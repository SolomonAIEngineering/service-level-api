{
  "swagger": "2.0",
  "info": {
    "title": "Social Service",
    "description": "Solomon AI Social Service",
    "version": "0.1",
    "contact": {
      "name": "YoanYomba",
      "url": "https://solomon-ai.io",
      "email": "yoanyomba@solomon-ai.co"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://github.com/openfga/openfga/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "SocialService"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/health": {
      "get": {
        "summary": "health check",
        "description": "This endpoint performs a healc check on the service",
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.HealthCheckResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "service health"
        ]
      }
    },
    "/api/v1/ready": {
      "get": {
        "summary": "readyness check",
        "description": "This endpoint performs a readiness check on the service",
        "operationId": "ReadynessCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.ReadynessCheckResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "service readyness"
        ]
      }
    },
    "/api/v1/user/{userId}": {
      "put": {
        "summary": "update a user profile",
        "description": "This endpoint performs an updates operation on a user profile based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state",
        "operationId": "EditUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.UpdateUserResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to update this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "profile",
            "description": "the profile payload | type: json_object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfile",
              "required": [
                "profile"
              ]
            }
          }
        ],
        "tags": [
          "user profile"
        ]
      }
    },
    "/v1/social/communities/page-size/{pageSize}/page-number/{pageNumber}": {
      "get": {
        "summary": "Get Community Profiles",
        "description": "This endpoint enables a client to get community profiles",
        "operationId": "GetCommunityProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetCommunitiesProfilesResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "community profile"
        ]
      }
    },
    "/v1/social/community/{communityId}/requestor/{requestorProfileId}/type/{requestorProfileType}": {
      "get": {
        "summary": "Get a community Profile",
        "description": "This endpoint enables a client to get a community profile",
        "operationId": "GetCommunityProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetCommunityProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "communityId",
            "description": "The communityID associated with the community being requested  | type:\nuint64",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "requestorProfileId",
            "description": "The RequestorProfileID is an optional parameter used to check if the\nprofileID (requestor) making a request for the record actually follows the\nrecord",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "requestorProfileType",
            "description": "The RequestorProfileType is an optional parameter which tells us what type\nof profile is the requestor",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_USER",
              "ACCOUNT_TYPE_COMMUNITY"
            ]
          }
        ],
        "tags": [
          "community profile"
        ]
      }
    },
    "/v1/social/community/{communityProfileId}/posts/blog": {
      "get": {
        "summary": "Get community blog posts",
        "description": "This endpoint enables a client to get community blog posts",
        "operationId": "GetCommunityBlogPosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetCommunityBlogPostsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "communityProfileId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "post"
        ]
      }
    },
    "/v1/social/community/{communityProfileId}/timeline": {
      "get": {
        "summary": "Gets A Community Feed",
        "description": "This endpoint enables a client query a community feed",
        "operationId": "GetCommunityFeed",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetCommunityFeedResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "communityProfileId",
            "description": "The ID of the community we are trying to obtain the feed for | type: uint64",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "feedType",
            "description": "The type of feed aiming to be obtained | type: string\n\n - FEED_TYPE_PERSONAL: UserFeed is a profile's personal feed\n - FEED_TYPE_NEWS: NewsFeed is a profile's timeline\n - FEED_TYPE_NOTIFICATION: NotificationFeed encompasses a profile's notification feed",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FEED_TYPE_UNSPECIFIED",
              "FEED_TYPE_PERSONAL",
              "FEED_TYPE_NEWS",
              "FEED_TYPE_NOTIFICATION"
            ],
            "default": "FEED_TYPE_UNSPECIFIED"
          },
          {
            "name": "accountType",
            "description": "The type of account making the request to obtain the feed | type: string",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_USER",
              "ACCOUNT_TYPE_COMMUNITY"
            ],
            "default": "ACCOUNT_TYPE_UNSPECIFIED"
          },
          {
            "name": "nextPageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "feed"
        ]
      }
    },
    "/v1/social/community/{communityProfileId}/topic/{topicName}/posts": {
      "get": {
        "summary": "Get all posts associated with a topic",
        "description": "This endpoint enables a client to get all posts tied to a topic",
        "operationId": "GetPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetPostsByTopicResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "communityProfileId",
            "description": "the community profile to associate the topic to | type: uint64",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "topicName",
            "description": "the name of a given topic | type: string",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "post"
        ]
      }
    },
    "/v1/social/post/{postId}/comment/{commentId}": {
      "delete": {
        "summary": "Delete A Comment",
        "description": "This endpoint enables a client to delete a comment",
        "operationId": "Delete Comment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.CreateCommentResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "postId",
            "description": "The ID of the post trying to be deleted | type: string",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "description": "The ID of the comment trying to be delete | type: string",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "description": "The type of post being reacted to | type: string",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "comment"
        ]
      }
    },
    "/v1/social/posts/blog/tag/{tag}": {
      "get": {
        "summary": "Get blog posts by tag",
        "description": "This endpoint enables a client to query a set of blog posts tied to a tag",
        "operationId": "GetBlogPostsByTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetBlogPostsByTagResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "description": "The type of post being reacted to | type: string",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "post"
        ]
      }
    },
    "/v1/social/user/bookmarks/{userId}": {
      "get": {
        "summary": "Get Bookmarked Posts",
        "description": "This endpoint enables a client to get all bookmarked posts of a given user",
        "operationId": "GetBookmarkedPosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetBookmarkedPostsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "bookmarks"
        ]
      }
    },
    "/v1/social/user/follow/accept/{followRecordId}": {
      "post": {
        "summary": "Accepts a user's follow request",
        "description": "This endpoint enables a client to accept a follow request from a source a user profile",
        "operationId": "AcceptFollowRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.AcceptFollowProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "followRecordId",
            "description": "The id of the follow record | type: uint64",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "user profile"
        ]
      }
    },
    "/v1/social/user/post/{postId}/type/{postType}": {
      "put": {
        "summary": "Edits a post by id",
        "description": "This endpoint enables a client to edit a post by id",
        "operationId": "GetPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.EditPostResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "postId",
            "description": "The ID of the post to be updated | type: string",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ]
          },
          {
            "name": "post",
            "description": "The post payload | type: json_object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post",
              "required": [
                "post"
              ]
            }
          }
        ],
        "tags": [
          "post"
        ]
      }
    },
    "/v1/social/user/{adminUserId}/publication/{publicationId}": {
      "delete": {
        "summary": "Deletes a publication",
        "description": "This endpoint enables a client to delete a publication",
        "operationId": "Get Publication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.DeletePublicationResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "adminUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "publicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "publication"
        ]
      }
    },
    "/v1/social/user/{adminUserId}/publication/{publicationId}/editor/{editorUserId}": {
      "delete": {
        "summary": "Deletes an editor to a publication",
        "description": "This endpoint enables a client to add an editor to a publication",
        "operationId": "Delete Editor To A Publication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.DeletePublicationEditorResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "adminUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "publicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "editorUserId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "publication"
        ]
      },
      "put": {
        "summary": "Adds an editor to a publication",
        "description": "This endpoint enables a client to add an editor to a publication",
        "operationId": "Add Editor To A Publication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.AddPublicationEditorResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "adminUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "publicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "editorUserId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "publication"
        ]
      }
    },
    "/v1/social/user/{editorUserId}/publication/{publicationId}": {
      "post": {
        "summary": "Add a post to a publication",
        "description": "This endpoint enables a client to add a post to a publication",
        "operationId": "AddPostTo Publication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.AddPostToPublicationResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "editorUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "publicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "post",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "tags": [
          "publication"
        ]
      }
    },
    "/v1/social/user/{editorUserId}/publication/{publicationId}/post/{postId}": {
      "delete": {
        "summary": "Deletes a post from a publication",
        "description": "This endpoint enables a client to delete a post from a publication",
        "operationId": "Delete a post from a publication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.DeletePostFromPublicationResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "editorUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "publicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "publication"
        ]
      }
    },
    "/v1/social/user/{sourceUserId}/block/target-user-id/{targetUserId}": {
      "post": {
        "summary": "blocks a user profile",
        "description": "This endpoint enables a client to block a user profile",
        "operationId": "BlockUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.BlockUserProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceUserId",
            "description": "the user ID trying to block another user (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetUserId",
            "description": "the user ID being blocked by another user (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "user profile"
        ]
      }
    },
    "/v1/social/user/{sourceUserId}/follow/community/{targetCommunityProfileId}": {
      "post": {
        "summary": "Follows A Community Profile",
        "description": "This endpoint enables a client to follow a community profile",
        "operationId": "FollowCommunityProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.FollowCommunityProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceUserId",
            "description": "the user ID trying to follow another user (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetCommunityProfileId",
            "description": "the targetCommunityProfileID ID being followed by another user",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "community profile"
        ]
      }
    },
    "/v1/social/user/{sourceUserId}/follow/target-user-id/{targetUserId}": {
      "post": {
        "summary": "follow a user profile",
        "description": "This endpoint enables a client to follow a user profile",
        "operationId": "FollowUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.FollowProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceUserId",
            "description": "the user ID trying to follow another user (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetUserId",
            "description": "the user ID being followed by another user (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "user profile"
        ]
      }
    },
    "/v1/social/user/{userId}": {
      "get": {
        "summary": "gets a user profile",
        "description": "This endpoint performs a query against the social service to obtain a user profile",
        "operationId": "GetUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetUserProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user ID associated with the profile we want to get | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestorProfileId",
            "description": "The RequestorProfileID is an optional parameter used to check if the\nprofileID (requestor) making a request for the record actually follows the\nrecord",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "requestorProfileType",
            "description": "The RequestorProfileType is an optional parameter which tells us what type\nof profile is the requestor",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_USER",
              "ACCOUNT_TYPE_COMMUNITY"
            ],
            "default": "ACCOUNT_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "user profile"
        ]
      },
      "delete": {
        "summary": "deletes a user profile",
        "description": "This endpoint enables a client to delete a user profile",
        "operationId": "DeleteUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.DeleteProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to delete this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "user profile"
        ]
      },
      "post": {
        "summary": "creates a user profile",
        "description": "This endpoint enables a client to create a user profile",
        "operationId": "CreateUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.CreateUserProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to create this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "idsOfCommunitiesToFollow": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uint64"
                  },
                  "title": "the set of ids of community profiles to follow"
                },
                "username": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/UserTags"
                  }
                },
                "isPrivate": {
                  "type": "boolean"
                },
                "profileImageUrl": {
                  "type": "string"
                }
              },
              "title": "CreateUserProfileRequest: Represents the request object invoked against the\nsocial service to create a user profile account",
              "required": [
                "username",
                "tags",
                "profileImageUrl"
              ]
            }
          }
        ],
        "tags": [
          "user profile"
        ]
      }
    },
    "/v1/social/user/{userId}/community": {
      "post": {
        "summary": "Create a community Profile",
        "description": "This endpoint enables a client to create a community profile",
        "operationId": "CreateCommunityProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.CreateCommunityProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to create this community profile (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "profile": {
                  "$ref": "#/definitions/CommunityProfile",
                  "title": "the community profile being created | type: json_object"
                }
              },
              "title": "CreateCommunityProfileRequest: Represents the request object invoked against\nthe social service to create a community profile account",
              "required": [
                "profile"
              ]
            }
          }
        ],
        "tags": [
          "community profile"
        ]
      }
    },
    "/v1/social/user/{userId}/community/{communityProfileId}": {
      "delete": {
        "summary": "Delete Community Profile",
        "description": "This endpoint enables a client to delete a community profile",
        "operationId": "DeleteCommunityProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetCommunitiesProfilesResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to delete this community profile (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "communityProfileId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "community profile"
        ]
      },
      "put": {
        "summary": "Edit a community Profile",
        "description": "This endpoint enables a client to update a community profile",
        "operationId": "EditCommunityProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.EditCommunityProfileRequest"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to update this community profile (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "communityProfileId",
            "description": "The community profile ID of the community being updated | type: uint64",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profile",
            "description": "The community profile being updated | type: json_object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommunityProfile",
              "required": [
                "profile"
              ]
            }
          }
        ],
        "tags": [
          "community profile"
        ]
      }
    },
    "/v1/social/user/{userId}/community/{communityProfileId}/topic": {
      "post": {
        "summary": "Create A Topic",
        "description": "This endpoint enables a client to create a topic",
        "operationId": "Delete Comment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.CreateTopicResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to whom the community is tied to (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "communityProfileId",
            "description": "the community profile to associate the topic to | type: uint64",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "topic",
            "description": "topic payload | type: json_object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Topic",
              "required": [
                "topic"
              ]
            }
          }
        ],
        "tags": [
          "topic"
        ]
      }
    },
    "/v1/social/user/{userId}/discover/limit/{limit}": {
      "get": {
        "summary": "Discover Profiles",
        "description": "This endpoint enables a client to discover a set of profiles he/she does not follow",
        "operationId": "Discover Profiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.DiscoverProfilesResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "discover"
        ]
      }
    },
    "/v1/social/user/{userId}/follow/communities": {
      "get": {
        "summary": "Gets all the communities a user follows",
        "description": "This endpoint enables a client to get all the communities a user follows",
        "operationId": "GetCommunitiesUserFollows",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetCommunitiesUserFollowsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID who's communities follow set we want to obtain (NOTE: userID\nrefers to the ID from the vantage point of the user service. This ID is the\nsingle source of truth for a given user across our suite of services) |\ntype: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "the max number of communities to return | type: uint64",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "community profile"
        ]
      }
    },
    "/v1/social/user/{userId}/follow/pending-requests": {
      "get": {
        "summary": "Get Pending Follow Requests",
        "description": "This endpoint enables a client to get all the pending follow requests",
        "operationId": "Get Topics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetPendingFollowsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID who's pending request we want to obtain (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "follow"
        ]
      }
    },
    "/v1/social/user/{userId}/poll": {
      "post": {
        "summary": "Create a poll",
        "description": "This endpoint enables a client to create a poll",
        "operationId": "CreatePoll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.CreatePollResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to create a post (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "poll",
            "description": "The post payload | type: json_object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PollPost",
              "required": [
                "poll"
              ]
            }
          }
        ],
        "tags": [
          "poll"
        ]
      }
    },
    "/v1/social/user/{userId}/poll/{pollId}": {
      "post": {
        "summary": "Adds a user response to a given poll by a user",
        "description": "This endpoint enables a client to response to a poll",
        "operationId": "RespondToPoll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.RespondToPollResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pollId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "pollOption": {
                  "type": "string",
                  "title": "the poll option the user is responding with"
                },
                "pollOptionIdx": {
                  "type": "string",
                  "format": "uint64",
                  "title": "the index of the poll option the user is responding with"
                }
              },
              "required": [
                "pollOption",
                "pollOptionIdx"
              ]
            }
          }
        ],
        "tags": [
          "poll"
        ]
      }
    },
    "/v1/social/user/{userId}/poll/{postId}": {
      "get": {
        "summary": "Get a poll",
        "description": "This endpoint enables a client to query a poll by id",
        "operationId": "GetPoll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetPollResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to delete this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "description": "The ID of the post attempted to be delete | type: string",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "poll"
        ]
      },
      "delete": {
        "summary": "Delete a poll",
        "description": "This endpoint enables a client to delete a poll",
        "operationId": "DeletePoll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.DeletePollResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to delete this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "description": "The ID of the post attempted to be delete | type: string",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "poll"
        ]
      }
    },
    "/v1/social/user/{userId}/polls": {
      "get": {
        "summary": "Get all the polls of a given user",
        "description": "This endpoint enables a client to query all polls tied to a given user id",
        "operationId": "GetPolls",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetPollsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to delete this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "poll"
        ]
      }
    },
    "/v1/social/user/{userId}/post": {
      "post": {
        "summary": "Create a post",
        "description": "This endpoint enables a client to create a post",
        "operationId": "CreatePost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.CreatePostResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to create a post (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "post",
            "description": "The post payload | type: json_object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post",
              "required": [
                "post"
              ]
            }
          },
          {
            "name": "communityProfileId",
            "description": "The ID of the community profile attempting to create the post  | type:\nuint64",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "accountType",
            "description": "The type of profile making the request | type: string",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_USER",
              "ACCOUNT_TYPE_COMMUNITY"
            ],
            "default": "ACCOUNT_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "post"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{parentPostId}/type/{parentPostType}/share": {
      "post": {
        "summary": "Share a post",
        "description": "This endpoint enables a client to share a post",
        "operationId": "SharePost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.SharePostResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentPostId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentPostType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ]
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "required": [
                "content"
              ]
            }
          }
        ],
        "tags": [
          "feed"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{parentPostId}/type/{postType}/thread": {
      "post": {
        "summary": "Adds A Post To A Thread",
        "description": "This endpoint enables a client to add a post to a thread",
        "operationId": "Add Post To A Thread",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.AddPostToThreadResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentPostId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ]
          },
          {
            "name": "post",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "tags": [
          "thread"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{parentPostId}/type/{postType}/thread/target/{participantPostId}": {
      "delete": {
        "summary": "Deletes A Post From A Thread",
        "description": "This endpoint enables a client to delete a post from a thread",
        "operationId": "Deletes A Post From A Thread",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.RemovePostFromThreadResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentPostId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ]
          },
          {
            "name": "participantPostId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "thread"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/account-type/{accountType}/reaction/{reaction}": {
      "post": {
        "summary": "Reacts to a post",
        "description": "This endpoint enables a client to react to a post",
        "operationId": "ReactToPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.AddPostReactionResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_USER",
              "ACCOUNT_TYPE_COMMUNITY"
            ]
          },
          {
            "name": "reaction",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "REACTION_UNSPECIFIED",
              "REACTION_LIKE",
              "REACTION_LOVE",
              "REACTION_HAHA",
              "REACTION_WOW",
              "REACTION_SAD",
              "REACTION_ANGRY",
              "REACTION_DISLIKE"
            ]
          },
          {
            "name": "postType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "reaction"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/bookmark": {
      "delete": {
        "summary": "Deletes A Bookmarked Post",
        "description": "This endpoint enables a client to delete a bookmarked post",
        "operationId": "Deletes A Bookmarked Posts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.RemoveBookmarkedPostResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "bookmark"
        ]
      },
      "post": {
        "summary": "Bookmarks a post",
        "description": "This endpoint enables a client to bookmark a post",
        "operationId": "Bookmark a post",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.BookmarkPostResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "bookmark"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/comment/{commentId}/account-type/{accountType}/reaction/{reaction}": {
      "post": {
        "summary": "Reacts to a comment",
        "description": "This endpoint enables a client to react to a comment",
        "operationId": "ReactToComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.ReactToCommentResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_USER",
              "ACCOUNT_TYPE_COMMUNITY"
            ]
          },
          {
            "name": "reaction",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "REACTION_UNSPECIFIED",
              "REACTION_LIKE",
              "REACTION_LOVE",
              "REACTION_HAHA",
              "REACTION_WOW",
              "REACTION_SAD",
              "REACTION_ANGRY",
              "REACTION_DISLIKE"
            ]
          },
          {
            "name": "postType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "reaction"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/comment/{commentId}/quality": {
      "post": {
        "summary": "Add Comment Quality Score",
        "description": "This endpoint enables a client to add a quality score to a comment",
        "operationId": "Add Comment Quality Score",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.AddCommentQualityScoreResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "qualityScore",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64",
              "required": [
                "qualityScore"
              ]
            }
          },
          {
            "name": "postType",
            "description": "The type of post being reacted to | type: string",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "comment"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/comment/{commentId}/replies": {
      "get": {
        "summary": "Get Comment Replies",
        "description": "This endpoint enables a client to get comment replies",
        "operationId": "Get Comment Replies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetCommentRepliesResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "comment reply"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/comment/{commentId}/reply": {
      "post": {
        "summary": "Reply To A Comment",
        "description": "This endpoint enables a client to reply to a comment",
        "operationId": "Replies To A Comment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.CreateCommentReplyResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "reply": {
                  "$ref": "#/definitions/CommentReply"
                },
                "postType": {
                  "$ref": "#/definitions/PostType"
                }
              },
              "required": [
                "postType"
              ]
            }
          }
        ],
        "tags": [
          "comment reply"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}": {
      "delete": {
        "summary": "Delete A Comment Reply",
        "description": "This endpoint enables a client to delete a comment reply",
        "operationId": "Delete Comment Reply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.DeleteCommentReplyResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "comment reply"
        ]
      },
      "put": {
        "summary": "Edit A Comment Reply",
        "description": "This endpoint enables a client to edit a comment reply",
        "operationId": "Edit Comment Reply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.EditCommentReplyResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "reply": {
                  "$ref": "#/definitions/CommentReply"
                },
                "postType": {
                  "$ref": "#/definitions/PostType"
                }
              },
              "required": [
                "postType"
              ]
            }
          }
        ],
        "tags": [
          "comment reply"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}/account-type/{accountType}/reaction/{reaction}": {
      "post": {
        "summary": "Reacts to a comment reply",
        "description": "This endpoint enables a client to react to a comment reply",
        "operationId": "ReactToComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.ReactToCommentReplyResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_USER",
              "ACCOUNT_TYPE_COMMUNITY"
            ]
          },
          {
            "name": "reaction",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "REACTION_UNSPECIFIED",
              "REACTION_LIKE",
              "REACTION_LOVE",
              "REACTION_HAHA",
              "REACTION_WOW",
              "REACTION_SAD",
              "REACTION_ANGRY",
              "REACTION_DISLIKE"
            ]
          },
          {
            "name": "postType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "reaction"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}/report": {
      "post": {
        "summary": "Report A Comment Reply",
        "description": "This endpoint enables a client to report a comment reply",
        "operationId": "Report Comment Reply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.ReportCommentReplyResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postType": {
                  "$ref": "#/definitions/PostType"
                }
              },
              "required": [
                "postType"
              ]
            }
          }
        ],
        "tags": [
          "comment reply"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/comment/{commentId}/report": {
      "post": {
        "summary": "Report A Comment",
        "description": "This endpoint enables a client to report a comment",
        "operationId": "Report Comment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.ReportCommentResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postType": {
                  "$ref": "#/definitions/PostType",
                  "title": "The type of post being reacted to | type: string"
                }
              },
              "title": "ReportCommentRequest: Represents the request object invoked against the\nsocial service to report a comment",
              "required": [
                "postType"
              ]
            }
          }
        ],
        "tags": [
          "comment"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/note": {
      "post": {
        "summary": "Creates and associates a note to a given post",
        "description": "This endpoint enables a client to create and associate a not to a post",
        "operationId": "Create Note",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.CreateNoteResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postType": {
                  "$ref": "#/definitions/PostType"
                },
                "note": {
                  "$ref": "#/definitions/Note"
                }
              },
              "required": [
                "postType"
              ]
            }
          }
        ],
        "tags": [
          "note"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/note/{noteId}": {
      "delete": {
        "summary": "Delete a note",
        "description": "This endpoint enables a client to delete a note",
        "operationId": "Delete Note",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.DeleteNoteResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "note"
        ]
      },
      "put": {
        "summary": "Update a note",
        "description": "This endpoint enables a client to update a note",
        "operationId": "Update Note",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.EditNoteResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "note",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          {
            "name": "postType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "note"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/quality": {
      "post": {
        "summary": "Adds a quality score to a post",
        "description": "This endpoint enables a client add a quality score to a post",
        "operationId": "AddQualityScore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.AddPostQualityScoreResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "qualityScore",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uint64",
              "required": [
                "qualityScore"
              ]
            }
          },
          {
            "name": "postType",
            "description": "The type of post being reacted to | type: string",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "post"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/thread": {
      "get": {
        "summary": "Gets A Post's Thread",
        "description": "This endpoint enables a client to query a post's thread",
        "operationId": "Gets A Post's Thread",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetPostThreadResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "thread"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/type/{postType}": {
      "get": {
        "summary": "Get a post",
        "description": "This endpoint enables a client to get a post",
        "operationId": "GetPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetPostResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to obtain a post (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "description": "The ID of the post to obtain | type: string",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ]
          }
        ],
        "tags": [
          "post"
        ]
      },
      "delete": {
        "summary": "Delete a post",
        "description": "This endpoint enables a client to delete a post",
        "operationId": "DeletePost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.DeletePostResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to delete a post (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "description": "The ID of the post attempted to be delete | type: string",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ]
          }
        ],
        "tags": [
          "post"
        ]
      }
    },
    "/v1/social/user/{userId}/post/{postId}/type/{postType}/report": {
      "post": {
        "summary": "Report a post",
        "description": "This endpoint enables a client to report a post",
        "operationId": "ReportPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.ReportPostResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ]
          }
        ],
        "tags": [
          "post"
        ]
      }
    },
    "/v1/social/user/{userId}/profile/{profileId}/account-type/{accountType}/following": {
      "get": {
        "summary": "Get Communities and users you are following",
        "description": "This endpoint enables a client to get all the accounts a given user follows",
        "operationId": "Get Users And Communities Following",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetAccountsFollowingResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "accountType",
            "description": "the account type of the user whoses followers are being requested",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_USER",
              "ACCOUNT_TYPE_COMMUNITY"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "follow"
        ]
      }
    },
    "/v1/social/user/{userId}/profile/{profileId}/followers": {
      "get": {
        "summary": "Get Users Following you",
        "description": "This endpoint enables a client to get all the followers following a given user",
        "operationId": "Get Topics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetFollowersResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "follow"
        ]
      }
    },
    "/v1/social/user/{userId}/publication": {
      "post": {
        "summary": "Creates a publication",
        "description": "This endpoint enables a client to creare a publication",
        "operationId": "Create Publication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.CreatePublicationResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "publication",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          }
        ],
        "tags": [
          "publication"
        ]
      }
    },
    "/v1/social/user/{userId}/publication/{publicationId}": {
      "get": {
        "summary": "Gets a publication",
        "description": "This endpoint enables a client to get a publication",
        "operationId": "Get Publication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetPublicationResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "publicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "publication"
        ]
      }
    },
    "/v1/social/user/{userId}/publication/{publicationId}/bookmark": {
      "delete": {
        "summary": "Deletes A Bookmarked Publication",
        "description": "This endpoint enables a client to delete a bookmarked publication",
        "operationId": "Deletes A Bookmarked Publication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.RemoveBookmarkedPostResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "publicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "bookmark"
        ]
      },
      "post": {
        "summary": "Bookmarks a publication",
        "description": "This endpoint enables a client to bookmark a publication",
        "operationId": "Bookmark a publication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.BookmarkPublicationResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "publicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "bookmark"
        ]
      }
    },
    "/v1/social/user/{userId}/timeline": {
      "get": {
        "summary": "Gets A Userfeed",
        "description": "This endpoint enables a client query a user feed",
        "operationId": "GetUserFeed",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetUserFeedResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to obtain a given feed (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "feedType",
            "description": "The type of feed aiming to be obtained | type: string\n\n - FEED_TYPE_PERSONAL: UserFeed is a profile's personal feed\n - FEED_TYPE_NEWS: NewsFeed is a profile's timeline\n - FEED_TYPE_NOTIFICATION: NotificationFeed encompasses a profile's notification feed",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FEED_TYPE_UNSPECIFIED",
              "FEED_TYPE_PERSONAL",
              "FEED_TYPE_NEWS",
              "FEED_TYPE_NOTIFICATION"
            ],
            "default": "FEED_TYPE_UNSPECIFIED"
          },
          {
            "name": "accountType",
            "description": "The type of account making the request to obtain the feed | type: string",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_USER",
              "ACCOUNT_TYPE_COMMUNITY"
            ],
            "default": "ACCOUNT_TYPE_UNSPECIFIED"
          },
          {
            "name": "nextPageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "feed"
        ]
      }
    },
    "/v1/social/user/{userId}/topics": {
      "get": {
        "summary": "Get Topics Of Communities User Follows",
        "description": "This endpoint enables a client to get topics of communities a user follows",
        "operationId": "Get Topics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetTopicsOfCommunitiesUserFollowsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID whose communities topics follow set we want to obtain (NOTE:\nuserID refers to the ID from the vantage point of the user service. This ID\nis the single source of truth for a given user across our suite of\nservices) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "topic"
        ]
      }
    },
    "/v1/social/users/page-size/{pageSize}/page-number/{pageNumber}": {
      "get": {
        "summary": "Gets a set of user profiles",
        "description": "This endpoint enables a client to get a number of user profiles in a paginated manner",
        "operationId": "GetUserProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.GetUserProfilesResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "user profile"
        ]
      }
    },
    "/v1/social/{userId}/post/{postId}/comment": {
      "post": {
        "summary": "Create A Commnet",
        "description": "This endpoint enables a client to create a comment",
        "operationId": "CreateComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v2.CreateCommentResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v2.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v2.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v2.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "the user ID trying to create a comment (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postId",
            "description": "The ID of the post to whom to add the comment | type: string",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment",
            "description": "The actual comment payload | type: json_object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment",
              "required": [
                "comment"
              ]
            }
          },
          {
            "name": "communityProfileId",
            "description": "The ID of the community trying to create a comment | type: uint64",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "accountType",
            "description": "The type of account making the request to create a comment | type: string",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_USER",
              "ACCOUNT_TYPE_COMMUNITY"
            ],
            "default": "ACCOUNT_TYPE_UNSPECIFIED"
          },
          {
            "name": "postType",
            "description": "The type of post being reacted to | type: string",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "POST_TYPE_UNSPECIFIED",
              "POST_TYPE_POST",
              "POST_TYPE_REPOST",
              "POST_TYPE_QUESTION",
              "POST_TYPE_ACHIEVEMENT",
              "POST_TYPE_ANNOUNCEMENT",
              "POST_TYPE_POLL",
              "POST_TYPE_ARTICLE",
              "POST_TYPE_SHORT_STORY"
            ],
            "default": "POST_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "comment"
        ]
      }
    }
  },
  "definitions": {
    "AcceptFollowProfileResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "title": "AcceptFollowProfileRequestResponse: Represent the object returned as a\nresponse to the accept follow profile request"
    },
    "AccountType": {
      "type": "string",
      "enum": [
        "ACCOUNT_TYPE_UNSPECIFIED",
        "ACCOUNT_TYPE_USER",
        "ACCOUNT_TYPE_COMMUNITY"
      ],
      "default": "ACCOUNT_TYPE_UNSPECIFIED",
      "title": "AccountType used to differ the type of profile an operation\nis being performed against"
    },
    "Actor": {
      "type": "object",
      "properties": {
        "userProfile": {
          "$ref": "#/definitions/UserProfile",
          "title": "UserProfile is the user profile who's performing a given operation"
        },
        "community": {
          "$ref": "#/definitions/CommunityProfile",
          "title": "Communtiy is the community profile who's performing a given operation"
        },
        "actorType": {
          "$ref": "#/definitions/AccountType",
          "title": "AccountType is the type of account this actor is"
        }
      },
      "title": "Actor references the profile performing an operation",
      "required": [
        "userProfile",
        "community",
        "actorType"
      ]
    },
    "AddCommentQualityScoreResponse": {
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/Comment"
        }
      }
    },
    "AddPostQualityScoreResponse": {
      "type": "object",
      "properties": {
        "regularPost": {
          "$ref": "#/definitions/Post"
        },
        "sharedPost": {
          "$ref": "#/definitions/SharedPost"
        },
        "pollPost": {
          "$ref": "#/definitions/PollPost"
        }
      }
    },
    "AddPostToPublicationResponse": {
      "type": "object",
      "properties": {
        "publication": {
          "$ref": "#/definitions/Publication"
        }
      }
    },
    "AddPostToThreadResponse": {
      "type": "object",
      "properties": {
        "regularPost": {
          "$ref": "#/definitions/Post"
        },
        "sharedPost": {
          "$ref": "#/definitions/SharedPost"
        },
        "pollPost": {
          "$ref": "#/definitions/PollPost"
        }
      }
    },
    "AddPublicationEditorResponse": {
      "type": "object",
      "properties": {
        "publication": {
          "$ref": "#/definitions/Publication"
        }
      }
    },
    "Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "BaseTimeline": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/FeedActivity"
          }
        }
      }
    },
    "BlockUserProfileResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "title": "BlockUserProfileResponse: Represents the object returned as a response to the\nblock user request"
    },
    "Bookmark": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "the id of the blocked record"
        },
        "postIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Publication"
          }
        }
      }
    },
    "BookmarkPostResponse": {
      "type": "object",
      "properties": {
        "bookmark": {
          "$ref": "#/definitions/Bookmark"
        }
      }
    },
    "BookmarkPublicationResponse": {
      "type": "object",
      "properties": {
        "bookmark": {
          "$ref": "#/definitions/Bookmark"
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Comment ID\n@gotag: bson:\"_id,omitempty\""
        },
        "backendPlatformUserId": {
          "type": "string",
          "title": "Platform wide ID of the user creating the comment\n@gotag: bson:\"backendPlatformUserId\""
        },
        "profileId": {
          "type": "string",
          "format": "uint64",
          "title": "ID of either the user profile or the community profile creating the comment\n@gotag: bson:\"profileId\""
        },
        "media": {
          "$ref": "#/definitions/Media",
          "title": "Media payload tied to the comment\n@gotag: bson:\"media\""
        },
        "mentions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Profiles mentioned in the comment\n@gotag: bson:\"mentions\""
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Hashtags defined in the comment\n@gotag: bson:\"hashtags\""
        },
        "createdAt": {
          "type": "string",
          "title": "Time when the comment was created\n@gotag: bson:\"createdAt\""
        },
        "content": {
          "type": "string",
          "title": "Content defining the comment\n@gotag: bson:\"content\""
        },
        "replies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommentReply"
          },
          "title": "Responses to a given comment\n@gotag: bson:\"replies\""
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Blob of extra content tied to the comment\n@gotag: bson:\"extra\""
        },
        "authorUsername": {
          "type": "string",
          "example": "test-user",
          "title": "Username of the person making the comment\n@gotag: bson:\"authorUsername\"",
          "minLength": 1
        },
        "authorProfileImage": {
          "type": "string",
          "example": "test-user",
          "title": "Profile image of the person making this comment\n@gotag: bson:\"authorProfileImage\"",
          "minLength": 1
        },
        "affinityScore": {
          "type": "string",
          "format": "uint64",
          "title": "AffinityScore is the average rating users on the platform associate with a\npiece of content. It is taken as the weighted average across all reactions\nfor the particular post\n@gotag: bson:\"affinityScore\""
        },
        "qualityScore": {
          "type": "string",
          "format": "uint64",
          "title": "QualityScore is the quality of the given piece of content.\nIt is taken as the weighted average across all reactions for the particular\npost\n@gotag: bson:\"qualityScore\""
        },
        "userIdToAffinityScoreMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "title": "UserIDToAffinityScoreMap witholds a mapping of all user profiles who left\nan affinity score\n@gotag: bson:\"userIdToAffinityScoreMap\""
        },
        "userIdToReportsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "title": "ReportCount details the number of reports were associated with a post\nA report is used as a signal to disclose the post's content are in\nviolation of platform rules\n@gotag: bson:\"userIdToReportsMap\""
        },
        "authorAccountType": {
          "$ref": "#/definitions/AccountType",
          "title": "AccountType is the account type of the creator of this piece of\ncontent\n@gotag: bson:\"authorAccountType\""
        },
        "userIdToReactionMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Reaction"
          },
          "title": "a map of user ids to reactions left by users\n@gotag: bson:\"userIdToReactionMap\""
        },
        "notes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Note"
          },
          "title": "the set of notes associated to this piece of content\n@gotag: bson:\"notes\""
        }
      },
      "required": [
        "authorUsername",
        "authorProfileImage"
      ]
    },
    "CommentReply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Response ID\n@gotag: bson:\"_id,omitempty\""
        },
        "backendPlatformUserId": {
          "type": "string",
          "title": "ID of the user creating the comment response\n@gotag: bson:\"backendPlatformUserId\""
        },
        "profileId": {
          "type": "string",
          "format": "uint64",
          "title": "ID of either the user profile or the community profile creating the comment response\n@gotag: bson:\"profileId\""
        },
        "media": {
          "$ref": "#/definitions/Media",
          "title": "Media payload associated to the response\n@gotag: bson:\"media\""
        },
        "mentions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Profiles mentioned in the comment\n@gotag: bson:\"mentions\""
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Hashtags defined in the comment\n@gotag: bson:\"hashtags\""
        },
        "createdAt": {
          "type": "string",
          "title": "Time when the comment was created\n@gotag: bson:\"createdAt\""
        },
        "content": {
          "type": "string",
          "title": "Content defining the comment\n@gotag: bson:\"content\""
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Blob of extra content tied to the comment response\n@gotag: bson:\"extra\""
        },
        "authorUsername": {
          "type": "string",
          "example": "test-user",
          "title": "Username of the person making the comment\n@gotag: bson:\"authorUsername\"",
          "minLength": 1
        },
        "authorProfileImage": {
          "type": "string",
          "example": "test-user",
          "title": "Profile image of the person making this comment\n@gotag: bson:\"authorProfileImage\"",
          "minLength": 1
        },
        "affinityScore": {
          "type": "string",
          "format": "uint64",
          "title": "AffinityScore is the average rating users on the platform associate with a\npiece of content. It is taken as the weighted average across all reactions\nfor the particular post\n@gotag: bson:\"affinityScore\""
        },
        "qualityScore": {
          "type": "string",
          "format": "uint64",
          "title": "QualityScore is the quality of the given piece of content.\nIt is taken as the weighted average across all reactions for the particular\npost\n@gotag: bson:\"qualityScore\""
        },
        "userIdToAffinityScoreMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "title": "UserIDToAffinityScoreMap witholds a mapping of all user profiles who left\nan affinity score\n@gotag: bson:\"userIdToAffinityScoreMap\""
        },
        "authorAccountType": {
          "$ref": "#/definitions/AccountType",
          "title": "AccountType is the account type of the creator of this piece of\ncontent\n@gotag: bson:\"authorAccountType\""
        },
        "userIdToReactionMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Reaction"
          },
          "title": "a map of user ids to reactions left by users\n@gotag: bson:\"userIdToReactionMap\""
        },
        "userIdToReportsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "title": "the report count for this comment reply\n@gotag: bson:\"userIdToReportsMap\""
        }
      },
      "required": [
        "authorUsername",
        "authorProfileImage"
      ]
    },
    "CommunityProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "Community profile ID"
        },
        "name": {
          "type": "string",
          "example": "test-community",
          "title": "Community name is the name tied to the community profile\ncommunity name must be at least 5 characters long"
        },
        "description": {
          "type": "string",
          "example": "community description useful for generating a test community that we can test against. a community is really cool and ideal",
          "title": "Desscription defines additional info about the community\ncommunity description must be at least 5 characters long"
        },
        "private": {
          "type": "boolean",
          "title": "Private defines wether only approved followers can see what this profile\nposts"
        },
        "visible": {
          "type": "boolean",
          "title": "Visible defines wether just about anyone can find this group"
        },
        "followers": {
          "type": "string",
          "format": "int64",
          "title": "Followers outlines the number of followers this user profile has"
        },
        "communityRules": {
          "type": "string",
          "example": "community rules useful for generating a test community that we can test against. a community is really cool and ideal",
          "title": "Defines rules community members must abide by\ncommunity rules must be at least 5 characters long"
        },
        "topics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Topic"
          },
          "title": "Defines topics assoociated with the community of interest\nmust create at least 1 topic"
        },
        "notificationFeedTimelineId": {
          "type": "string",
          "example": "asndlkhaskhdhasgdahsf-feed-id",
          "title": "Notification timeline Id. Notification for anything a user/group is\nfollowing"
        },
        "personalFeedTimelineId": {
          "type": "string",
          "example": "asndlkhaskhdhasgdahsf-feed-id",
          "title": "Personal timeline ID Has activities for a user that can be followed"
        },
        "newsFeedTimelineId": {
          "type": "string",
          "example": "asndlkhaskhdhasgdahsf-feed-id",
          "title": "Newsfeed timeline ID Displays all followed and group activities the user\nfollows"
        },
        "profileImageUrl": {
          "type": "string",
          "example": "asndlkhaskhdhasgdahsf.jpg",
          "title": "ProfileImageUrl witholds the url of a given profile image"
        },
        "algoliaId": {
          "type": "string",
          "example": "asndlkhaskhdhasgdahsf-feed-id",
          "title": "The id of the algolia record referencing this community"
        }
      },
      "title": "CommunityProfile: The profile object tied to a given community",
      "required": [
        "name",
        "description",
        "private",
        "visible",
        "followers",
        "communityRules",
        "notificationFeedTimelineId",
        "personalFeedTimelineId",
        "newsFeedTimelineId",
        "profileImageUrl",
        "algoliaId"
      ]
    },
    "ContentInsights": {
      "type": "object",
      "properties": {
        "sentenceCount": {
          "type": "string",
          "format": "uint64",
          "example": 10
        },
        "wordCount": {
          "type": "string",
          "format": "uint64"
        },
        "language": {
          "type": "string"
        },
        "languageConfidence": {
          "type": "number",
          "format": "float"
        },
        "entities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Entities"
          }
        },
        "sentiment": {
          "$ref": "#/definitions/Sentiment"
        }
      }
    },
    "CreateCommentReplyResponse": {
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/Comment"
        }
      }
    },
    "CreateCommentResponse": {
      "type": "object",
      "properties": {
        "regularPost": {
          "$ref": "#/definitions/Post"
        },
        "sharedPost": {
          "$ref": "#/definitions/SharedPost"
        },
        "pollPost": {
          "$ref": "#/definitions/PollPost"
        }
      },
      "title": "CreateCommentResponse: Represent the object returned as a\nresponse to the create comment request"
    },
    "CreateCommunityProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/CommunityProfile"
        }
      },
      "title": "CreateCommunityProfileResponse: Represents the response object returned as a\nresponse to the `create-community` request"
    },
    "CreateNoteResponse": {
      "type": "object",
      "properties": {
        "regularPost": {
          "$ref": "#/definitions/Post"
        },
        "sharedPost": {
          "$ref": "#/definitions/SharedPost"
        },
        "pollPost": {
          "$ref": "#/definitions/PollPost"
        }
      }
    },
    "CreatePollResponse": {
      "type": "object",
      "properties": {
        "pollId": {
          "type": "string"
        }
      }
    },
    "CreatePostResponse": {
      "type": "object",
      "properties": {
        "post": {
          "$ref": "#/definitions/Post"
        }
      },
      "title": "CreatePostResponse: Represent the object returned as a\nresponse to the create post request"
    },
    "CreatePublicationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "CreateTopicResponse": {
      "type": "object",
      "properties": {
        "topicId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "CreateTopicResponse: Represent the object returned as a response to the\ncreate topic request"
    },
    "CreateUserProfileResponse": {
      "type": "object",
      "properties": {
        "virtualProfileId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "CreateUserProfileResponse: Represents the response object returned as a\nresponse to the `create-user` request"
    },
    "DeleteCommentReplyResponse": {
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/Comment"
        }
      }
    },
    "DeleteCommentResponse": {
      "type": "object",
      "properties": {
        "sucess": {
          "type": "boolean"
        }
      },
      "title": "DeleteCommentResponse: Represent the object returned as a\nresponse to the delete comment request"
    },
    "DeleteCommunityProfileResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "title": "DeleteCommunityProfileResponse: Represent the response object returned as a response\nto the `delete profile` and `delete-community` request"
    },
    "DeleteNoteResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "DeletePollResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "DeletePostFromPublicationResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "DeletePostResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "title": "DeletePostResponse: Represent the object returned as a\nresponse to the delete post request"
    },
    "DeletePublicationEditorResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "DeletePublicationResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "DeleteUserProfileResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "title": "DeleteUserProfileResponse: Represent the response object returned as a response\nto the `delete profile` and `delete-community` request"
    },
    "DiscoverProfilesResponse": {
      "type": "object",
      "properties": {
        "communityProfiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommunityProfile"
          }
        },
        "userProfiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UserProfile"
          }
        },
        "topics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Topic"
          }
        }
      }
    },
    "EditCommentReplyResponse": {
      "type": "object",
      "properties": {
        "reply": {
          "$ref": "#/definitions/CommentReply"
        }
      }
    },
    "EditCommunityProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/CommunityProfile"
        }
      },
      "title": "UpdateCommunityProfileResponse: Represents the object returned as a response\nto `update-commmunity-profile` request"
    },
    "EditNoteResponse": {
      "type": "object",
      "properties": {
        "regularPost": {
          "$ref": "#/definitions/Post"
        },
        "sharedPost": {
          "$ref": "#/definitions/SharedPost"
        },
        "pollPost": {
          "$ref": "#/definitions/PollPost"
        }
      }
    },
    "EditPostResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "title": "EditPostResponse: Represent the object returned as a\nresponse to the update post request"
    },
    "EditUserProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/UserProfile"
        }
      },
      "title": "EditUserProfileResponse: Represents the object returned as a response to\n`update-user-profile` request"
    },
    "Entities": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "FeedActivity": {
      "type": "object",
      "properties": {
        "actor": {
          "$ref": "#/definitions/Actor",
          "title": "Actor refers to profile who created the object in the Activity"
        },
        "verb": {
          "$ref": "#/definitions/PostType",
          "description": "Identifies the action that the activity describes."
        },
        "regularPost": {
          "$ref": "#/definitions/Post"
        },
        "sharedPost": {
          "$ref": "#/definitions/SharedPost"
        },
        "pollPost": {
          "$ref": "#/definitions/PollPost"
        },
        "foreignId": {
          "type": "string",
          "title": "ForeignID is used as a reference identifier between our datastore\nand getstream"
        },
        "target": {
          "type": "string",
          "description": "Object\tDescribes the target of the activity. The precise meaning of the\nactivity's target is dependent on the activities verb, but will often be\nthe object the English preposition \"to\". For instance, in the activity,\n\"John saved a movie to his wishlist\", the target of the activity is\n\"wishlist\"."
        },
        "time": {
          "type": "string",
          "title": "Time is the time this activity was created at"
        },
        "origin": {
          "type": "string"
        },
        "to": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The TO field allows you to specify a list of feeds to which the activity\nshould be copied. One way to think about it is as the CC functionality of\nemail."
        },
        "score": {
          "type": "string",
          "format": "uint64",
          "title": "Score associated to an activity"
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Extra encompasses any additional activity metadata"
        },
        "getstreamActivityId": {
          "type": "string",
          "title": "The ID of the activity from the context of getstream"
        }
      },
      "title": "FeedActivity references an actvitiy present in a given user's timeline",
      "required": [
        "actor",
        "getstreamActivityId"
      ]
    },
    "FeedType": {
      "type": "string",
      "enum": [
        "FEED_TYPE_UNSPECIFIED",
        "FEED_TYPE_PERSONAL",
        "FEED_TYPE_NEWS",
        "FEED_TYPE_NOTIFICATION"
      ],
      "default": "FEED_TYPE_UNSPECIFIED",
      "description": "FeedType encompasses the various types of feeds a profile can have\n(in conjuction) with getstream.\n\n - FEED_TYPE_PERSONAL: UserFeed is a profile's personal feed\n - FEED_TYPE_NEWS: NewsFeed is a profile's timeline\n - FEED_TYPE_NOTIFICATION: NotificationFeed encompasses a profile's notification feed"
    },
    "FollowCommunityProfileResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "title": "FollowProfileResponse: Represent the object returned as a response to the\nfollow profile user request"
    },
    "FollowProfileResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "title": "FollowProfileResponse: Represent the object returned as a response to the\nfollow profile user request"
    },
    "GetAccountsFollowingResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UserProfile"
          }
        },
        "communities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommunityProfile"
          }
        }
      }
    },
    "GetBlogPostsByTagResponse": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "GetBookmarkedPostsResponse": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "GetCommentRepliesResponse": {
      "type": "object",
      "properties": {
        "replies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommentReply"
          }
        }
      }
    },
    "GetCommunitiesUserFollowsResponse": {
      "type": "object",
      "properties": {
        "communities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommunityProfile"
          }
        }
      },
      "title": "GetCommunitiesUserFollowsResponse: Represent the response object invoked\nagainst the social service to get all the communities a given user follows"
    },
    "GetCommunityBlogPostsResponse": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "GetCommunityFeedResponse": {
      "type": "object",
      "properties": {
        "baseTimeline": {
          "$ref": "#/definitions/BaseTimeline"
        },
        "notificationTimeline": {
          "$ref": "#/definitions/NotificationTimeline"
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "title": "GetCommunityFeedResponse: Represent the object returned as a\nresponse to the get community feed request"
    },
    "GetCommunityProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/CommunityProfile"
        },
        "metadata": {
          "$ref": "#/definitions/SocialRelationshipMetadata"
        }
      },
      "title": "GetCommunityProfileResponse: Represents the object returned as a response to\n`get-commmunity-profile` request"
    },
    "GetCommunityProfilesResponse": {
      "type": "object",
      "properties": {
        "nextPageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommunityProfile"
          }
        }
      }
    },
    "GetFollowersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UserProfile"
          }
        }
      }
    },
    "GetPendingFollowsResponse": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PendingFollowRequest"
          }
        }
      },
      "title": "GetPendingFollowRequestsResponse: Represent the response object invoked\nagainst the social service to get all pending follow requests tied to a user"
    },
    "GetPollResponse": {
      "type": "object",
      "properties": {
        "poll": {
          "$ref": "#/definitions/PollPost"
        }
      }
    },
    "GetPollsResponse": {
      "type": "object",
      "properties": {
        "polls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PollPost"
          }
        }
      }
    },
    "GetPostResponse": {
      "type": "object",
      "properties": {
        "post": {
          "$ref": "#/definitions/Post"
        }
      },
      "title": "GetPostResponse: Represent the object returned as a\nresponse to the get post request"
    },
    "GetPostThreadResponse": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "GetPostsByTopicResponse": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Post"
          }
        }
      },
      "title": "GetPostsByTopicResponse: Represent the object returned as a\nresponse to the get posts by topic request"
    },
    "GetPublicationResponse": {
      "type": "object",
      "properties": {
        "publication": {
          "$ref": "#/definitions/Publication"
        }
      }
    },
    "GetTopicsOfCommunitiesUserFollowsResponse": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Topic"
          }
        }
      },
      "title": "GetTopicsOfCommunitiesUserFollowsResponse: Represent the response object\ninvoked against the social service to get all the communities a given user\nfollows"
    },
    "GetUserFeedResponse": {
      "type": "object",
      "properties": {
        "baseTimeline": {
          "$ref": "#/definitions/BaseTimeline"
        },
        "notificationTimeline": {
          "$ref": "#/definitions/NotificationTimeline"
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "title": "GetUserFeedResponse: Represent the object returned as a\nresponse to the get user feed request"
    },
    "GetUserProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/UserProfile"
        },
        "metadata": {
          "$ref": "#/definitions/SocialRelationshipMetadata"
        }
      },
      "title": "GetUserProfileResponse: Represents the object returned as a response to\n`get-user-profile` request"
    },
    "GetUserProfilesResponse": {
      "type": "object",
      "properties": {
        "nextPageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UserProfile"
          }
        }
      }
    },
    "HealthCheckResponse": {
      "type": "object",
      "properties": {
        "healthy": {
          "type": "boolean"
        }
      },
      "title": "ServiceHealthResponse: Represent the object returned as a response to the\nservice health api invocation"
    },
    "Media": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/MediaMetadata"
        }
      }
    },
    "MediaCrop": {
      "type": "string",
      "enum": [
        "MEDIA_CROP_UNSPECIFIED",
        "MEDIA_CROP_TOP",
        "MEDIA_CROP_BOTTOM",
        "MEDIA_CROP_LEFT",
        "MEDIA_CROP_RIGHT",
        "MEDIA_CROP_CENTER"
      ],
      "default": "MEDIA_CROP_UNSPECIFIED"
    },
    "MediaMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "resize": {
          "$ref": "#/definitions/MediaResize"
        },
        "crop": {
          "$ref": "#/definitions/MediaCrop"
        },
        "imageWidth": {
          "type": "string",
          "format": "int64"
        },
        "imageHeight": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/MediaType"
        }
      }
    },
    "MediaResize": {
      "type": "string",
      "enum": [
        "MEDIA_RESIZE_UNSPECIFIED",
        "MEDIA_RESIZE_CLIP",
        "MEDIA_RESIZE_CROP",
        "MEDIA_RESIZE_SCALE"
      ],
      "default": "MEDIA_RESIZE_UNSPECIFIED"
    },
    "MediaType": {
      "type": "string",
      "enum": [
        "MEDIA_TYPE_UNSPECIFIED",
        "MEDIA_TYPE_IMAGE",
        "MEDIA_TYPE_VIDEO"
      ],
      "default": "MEDIA_TYPE_UNSPECIFIED"
    },
    "Note": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Note ID\n@gotag: bson:\"_id,omitempty\""
        },
        "backendPlatformUserId": {
          "type": "string",
          "title": "Platform wide ID of the user creating the note\n@gotag: bson:\"backendPlatformUserId\""
        },
        "profileId": {
          "type": "string",
          "format": "uint64",
          "title": "ID of either the user profile or the community profile creating the note\n@gotag: bson:\"profileId\""
        },
        "media": {
          "$ref": "#/definitions/Media",
          "title": "Media payload tied to the note\n@gotag: bson:\"media\""
        },
        "mentions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Profiles mentioned in the note - NOTE: only the creator of the article whom this\nnote is attached to and the mentioned members will be notified. Additionally, this note\nwill only be viewable by those folks\n@gotag: bson:\"mentions\""
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Hashtags defined in the note\n@gotag: bson:\"hashtags\""
        },
        "createdAt": {
          "type": "string",
          "title": "Time when the note was created\n@gotag: bson:\"createdAt\""
        },
        "content": {
          "type": "string",
          "title": "Content defining the note\n@gotag: bson:\"content\""
        },
        "authorAccountType": {
          "$ref": "#/definitions/AccountType",
          "title": "AccountType is the account type of the creator of this piece of\ncontent\n@gotag: bson:\"authorAccountType\""
        },
        "authorUserName": {
          "type": "string",
          "title": "Username of the person making the note\n@gotag: bson:\"authorUserName\""
        },
        "authorProfileImage": {
          "type": "string",
          "title": "Profile image of the person making this note\n@gotag: bson:\"authorProfileImage\""
        }
      },
      "title": "A note is a response a user can leave on another user's piece of content. Notes can\nonly be seen by the user who created the content (private) and should serve as some form of\nintimate feedback protocol",
      "required": [
        "content",
        "authorUserName",
        "authorProfileImage"
      ]
    },
    "NotificationActivity": {
      "type": "object",
      "properties": {
        "actorName": {
          "type": "string"
        },
        "foreignId": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "verb": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        },
        "object": {
          "type": "string"
        }
      }
    },
    "NotificationFeedGroup": {
      "type": "object",
      "properties": {
        "activityCount": {
          "type": "string",
          "format": "uint64"
        },
        "actorCount": {
          "type": "string",
          "format": "uint64"
        },
        "createdAt": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "feedGroupId": {
          "type": "string"
        },
        "isRead": {
          "type": "boolean"
        },
        "isSeen": {
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string"
        },
        "verb": {
          "type": "string"
        },
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NotificationActivity"
          }
        }
      }
    },
    "NotificationTimeline": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/NotificationFeedGroup"
          }
        }
      }
    },
    "PendingFollowRequest": {
      "type": "object",
      "properties": {
        "followRequestId": {
          "type": "string",
          "format": "uint64",
          "title": "The ID of the follow request"
        },
        "followerRequestionToFollow": {
          "$ref": "#/definitions/UserProfile",
          "title": "The profile who initiated follow request"
        },
        "createdAt": {
          "type": "string",
          "title": "The time the follow request originated"
        }
      },
      "title": "PendingFollowRequest defines the record describing the given pending follow\nrelationship",
      "required": [
        "followerRequestionToFollow",
        "createdAt"
      ]
    },
    "PollPost": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Post ID\n@gotag: bson:\"_id,omitempty\""
        },
        "createdAt": {
          "type": "string",
          "title": "Time post was created at\n@gotag: bson:\"createdAt\""
        },
        "action": {
          "$ref": "#/definitions/PostType",
          "title": "PostType defines the intent of the post\n@gotag: bson:\"action\""
        },
        "content": {
          "type": "string",
          "title": "Content is the content the post witholds\nContent is a string of text that is at least 5 characters long\n@gotag: bson:\"content\""
        },
        "mentions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Profiles mentioned in the post\n@gotag: bson:\"mentions\""
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Hashtags defined in the post\n@gotag: bson:\"hashtags\""
        },
        "media": {
          "$ref": "#/definitions/Media",
          "title": "Media associated with the post\n@gotag: bson:\"media\""
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Blob of extra content tied to the post\n@gotag: bson:\"extra\""
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Comment"
          },
          "title": "Comments tied to the post\n@gotag: bson:\"comments\""
        },
        "backendPlatformUserId": {
          "type": "string",
          "title": "ID of the user creating the post\n@gotag: bson:\"backendPlatformUserId\""
        },
        "profileId": {
          "type": "string",
          "format": "uint64",
          "title": "ID of the profile creating the post\n@gotag: bson:\"profileId\""
        },
        "title": {
          "type": "string",
          "title": "Title of the post\n@gotag: bson:\"title\""
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags associated with the post\n@gotag: bson:\"tags\""
        },
        "topicName": {
          "type": "string",
          "title": "The topic to which this post is currently associated to. For non-community\nprofiles, posts are not associated to any topic. However for the commmunity\ncase, posts are associated to topic\n@gotag: bson:\"topicName\""
        },
        "authorUsername": {
          "type": "string",
          "title": "Username of the person making the comment\n@gotag: bson:\"authorUsername\""
        },
        "authorProfileImage": {
          "type": "string",
          "title": "Profile image of the person making this comment\n@gotag: bson:\"authorProfileImage\""
        },
        "affinityScore": {
          "type": "string",
          "format": "uint64",
          "title": "AffinityScore is the average rating users on the platform associate with a\npiece of content. It is taken as the weighted average across all reactions\nfor the particular post\n@gotag: bson:\"affinityScore\""
        },
        "qualityScore": {
          "type": "string",
          "format": "uint64",
          "title": "QualityScore is the quality of the given piece of content.\nIt is taken as the weighted average across all reactions for the particular\npost\n@gotag: bson:\"qualityScore\""
        },
        "userIdToAffinityScoreMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "title": "UserIDToAffinityScoreMap witholds a mapping of all user profiles who left\nan affinity score\n@gotag: bson:\"userIdToAffinityScoreMap\""
        },
        "insights": {
          "$ref": "#/definitions/ContentInsights",
          "title": "Insights is a map of all insights associated to a post\n@gotag: bson:\"insights\""
        },
        "userIdToReportsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "title": "ReportCount details the number of reports were associated with a post\nA report is used as a signal to disclose the post's content are in\nviolation of platform rules\n@gotag: bson:\"userIdToReportsMap\""
        },
        "backgroundImageUrl": {
          "type": "string",
          "title": "BackgroundImageUrl signifies an image to associate to a post object.\nSuch urls are only associated when a post is an article or short story\n@gotag: bson:\"backgroundImageUrl\""
        },
        "authorAccountType": {
          "$ref": "#/definitions/AccountType",
          "title": "AccountType is the account type of the creator of this piece of\ncontent\n@gotag: bson:\"authorAccountType\""
        },
        "userIdToPollResponsesMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PollResponse"
          },
          "title": "A hash map of user ids to poll responses left by users\n@gotag: bson:\"userIdToPollResponseMap\""
        },
        "pollOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the set of options the poll witholds\n@gotag: bson:\"pollOptions\""
        },
        "pollDistribution": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "title": "the distribution of poll responses (in percentage form)\n@gotag: bson:\"pollDistribution\""
        },
        "pollEndDate": {
          "type": "string",
          "format": "date-time",
          "title": "the end date of the given poll\n@gotag: bson:\"pollEndDate\""
        },
        "notes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Note"
          },
          "title": "the set of notes associated to this piece of content\n@gotag: bson:\"notes\""
        },
        "thread": {
          "$ref": "#/definitions/Thread",
          "title": "a thread a is a continuation of posts associated to a singular post\n@gotag: bson:\"thread\""
        },
        "threadParticipantType": {
          "$ref": "#/definitions/ThreadParticipantType",
          "title": "thread participant posts are not sent to get stream to be part of the social graph.\nposts that are the parent of their thread are sent to get stream to comprise the social graph\n@gotag: bson:\"threadParticipantType\""
        },
        "userIdToReactionMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Reaction"
          },
          "title": "a map of user ids to reactions left by users\n@gotag: bson:\"userIdToReactionMap\""
        }
      },
      "required": [
        "action",
        "content",
        "pollOptions"
      ]
    },
    "PollResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "the id of the poll response\n@gotag: bson:\"_id,omitempty\""
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "the user id who left the poll response\n@gotag: bson:\"userId\""
        },
        "responseValue": {
          "type": "string",
          "title": "the actual poll response left by the user\n@gotag: bson:\"responseValue\""
        },
        "responseIdx": {
          "type": "string",
          "format": "uint64",
          "title": "the index of the given response\n@gotag: bson:\"responseIdx\""
        }
      }
    },
    "Post": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Post ID\n@gotag: bson:\"_id,omitempty\""
        },
        "createdAt": {
          "type": "string",
          "title": "Time post was created at\n@gotag: bson:\"createdAt\""
        },
        "action": {
          "$ref": "#/definitions/PostType",
          "title": "PostType defines the intent of the post\n@gotag: bson:\"action\""
        },
        "content": {
          "type": "string",
          "title": "Content is the content the post witholds\nContent is a string of text that is at least 5 characters long\n@gotag: bson:\"content\""
        },
        "mentions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Profiles mentioned in the post\n@gotag: bson:\"mentions\""
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Hashtags defined in the post\n@gotag: bson:\"hashtags\""
        },
        "media": {
          "$ref": "#/definitions/Media",
          "title": "Media associated with the post\n@gotag: bson:\"media\""
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Blob of extra content tied to the post\n@gotag: bson:\"extra\""
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Comment"
          },
          "title": "Comments tied to the post\n@gotag: bson:\"comments\""
        },
        "backendPlatformUserId": {
          "type": "string",
          "title": "ID of the user creating the post\n@gotag: bson:\"backendPlatformUserId\""
        },
        "profileId": {
          "type": "string",
          "format": "uint64",
          "title": "@gotag: bson:\"profileId\""
        },
        "title": {
          "type": "string",
          "title": "@gotag: bson:\"title\""
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@gotag: bson:\"tags\""
        },
        "topicName": {
          "type": "string",
          "title": "The topic to which this post is currently associated to. For non-community\nprofiles, posts are not associated to any topic. However for the commmunity\ncase, posts are associated to topic\n@gotag: bson:\"topicName\""
        },
        "authorUsername": {
          "type": "string",
          "title": "Username of the person making the comment\n@gotag: bson:\"authorUsername\""
        },
        "authorProfileImage": {
          "type": "string",
          "title": "Profile image of the person making this comment\n@gotag: bson:\"authorProfileImage\""
        },
        "affinityScore": {
          "type": "string",
          "format": "uint64",
          "title": "AffinityScore is the average rating users on the platform associate with a\npiece of content. It is taken as the weighted average across all reactions\nfor the particular post\n@gotag: bson:\"affinityScore\""
        },
        "qualityScore": {
          "type": "string",
          "format": "uint64",
          "title": "QualityScore is the quality of the given piece of content.\n@gotag: bson:\"qualityScore\""
        },
        "userIdToAffinityScoreMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "title": "UserIDToAffinityScoreMap witholds a mapping of all user profiles who left\nan affinity score\n@gotag: bson:\"userIdToAffinityScoreMap\""
        },
        "insights": {
          "$ref": "#/definitions/ContentInsights",
          "title": "@gotag: bson:\"insights\""
        },
        "userIdToReportsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "title": "ReportCount details the number of reports were associated with a post\nA report is used as a signal to disclose the post's content are in\nviolation of platform rules\n@gotag: bson:\"userIdToReportsMap\""
        },
        "readingTime": {
          "type": "string",
          "title": "ReadingTime outlines the number of minutes it would take to read the\ncontents of this post\n@gotag: bson:\"readingTime\""
        },
        "backgroundImageUrl": {
          "type": "string",
          "title": "BackgroundImageUrl signifies an image to associate to a post object.\nSuch urls are only associated when a post is an article or short story\n@gotag: bson:\"backgroundImageUrl\""
        },
        "authorAccountType": {
          "$ref": "#/definitions/AccountType",
          "title": "AccountType is the account type of the creator of this piece of\ncontent\n@gotag: bson:\"authorAccountType\""
        },
        "notes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Note"
          },
          "title": "the set of notes associated to this piece of content\n@gotag: bson:\"notes\""
        },
        "thread": {
          "$ref": "#/definitions/Thread",
          "title": "a thread a is a continuation of posts associated to a singular post\n@gotag: bson:\"thread\""
        },
        "threadParticipantType": {
          "$ref": "#/definitions/ThreadParticipantType",
          "title": "thread participant posts are not sent to get stream to be part of the social graph.\nposts that are the parent of their thread are sent to get stream to comprise the social graph\n@gotag: bson:\"threadParticipantType\""
        },
        "userIdToReactionMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Reaction"
          },
          "title": "a map of user ids to reactions left by users\n@gotag: bson:\"userIdToReactionMap\""
        },
        "aiGeneratedQuestionResponse": {
          "type": "string",
          "title": "if the post is a question, this field will hold the response to the question by the ai\n@gotag: bson:\"aiGeneratedQuestionResponse\""
        }
      },
      "title": "Posts: Critical to activities and define the content sent over by users and\ncommunities",
      "required": [
        "action",
        "content"
      ]
    },
    "PostType": {
      "type": "string",
      "enum": [
        "POST_TYPE_UNSPECIFIED",
        "POST_TYPE_POST",
        "POST_TYPE_REPOST",
        "POST_TYPE_QUESTION",
        "POST_TYPE_ACHIEVEMENT",
        "POST_TYPE_ANNOUNCEMENT",
        "POST_TYPE_POLL",
        "POST_TYPE_ARTICLE",
        "POST_TYPE_SHORT_STORY"
      ],
      "default": "POST_TYPE_UNSPECIFIED",
      "title": "PostType defines the type of content present in a post"
    },
    "Publication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "postIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "stories are post that can be submitted only by the publication editors"
        },
        "admin": {
          "$ref": "#/definitions/UserProfile"
        },
        "adminBackendPlatformUserId": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "editors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UserProfile"
          }
        },
        "subjects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/PublicationType"
        },
        "publicationName": {
          "type": "string"
        }
      },
      "description": "Use Case\n- An online magazine, a publication with a fixed publication staff that posts stories around a specific topic\n- A community publication, a publication that accepts stories published around Medium\n- A company blog, a publication that is created specifically to share company news\n- A collection of individual stories by a single author that are parts of a larger whole",
      "title": "A Publication is a collections of stories based around a common theme. Anyone can create them\nAs the creator of a publication, you're an editor by default, which means you have the ability to\na) add writers to your publication,\nb) edit and publish the stories that are submitted by your writers, and\nc) review the metrics for all of the stories that are part of your publication.\nAs the publication's creator, you'll also have the ability\nto appoint new editors (so they can do all of that stuff I just mentioned)",
      "required": [
        "adminBackendPlatformUserId",
        "tags",
        "subjects",
        "type",
        "publicationName"
      ]
    },
    "PublicationType": {
      "type": "string",
      "enum": [
        "PUBLICATION_TYPE_UNSPECIFIED",
        "PUBLICATION_TYPE_MAGAZINE",
        "PUBLICATION_TYPE_PLATFORM",
        "PUBLICATION_TYPE_BLOG",
        "PUBLICATION_TYPE_SUBJECTS"
      ],
      "default": "PUBLICATION_TYPE_UNSPECIFIED",
      "title": "- PUBLICATION_TYPE_MAGAZINE: a publication with a fixed publication staff that posts stories around a specific topic\n - PUBLICATION_TYPE_PLATFORM: a publication that accepts stories published around solomon\n - PUBLICATION_TYPE_BLOG: A community blog, a publication that is created specifically to share subset (community) news\n - PUBLICATION_TYPE_SUBJECTS: A collection of individual stories by a set of authors that are part of a whole"
    },
    "ReactToCommentReplyResponse": {
      "type": "object",
      "properties": {
        "reply": {
          "$ref": "#/definitions/CommentReply"
        }
      }
    },
    "ReactToCommentResponse": {
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/Comment"
        }
      }
    },
    "ReactToPostResponse": {
      "type": "object",
      "properties": {
        "regularPost": {
          "$ref": "#/definitions/Post"
        },
        "sharedPost": {
          "$ref": "#/definitions/SharedPost"
        },
        "pollPost": {
          "$ref": "#/definitions/PollPost"
        }
      }
    },
    "Reaction": {
      "type": "string",
      "enum": [
        "REACTION_UNSPECIFIED",
        "REACTION_LIKE",
        "REACTION_LOVE",
        "REACTION_HAHA",
        "REACTION_WOW",
        "REACTION_SAD",
        "REACTION_ANGRY",
        "REACTION_DISLIKE"
      ],
      "default": "REACTION_UNSPECIFIED"
    },
    "ReadynessCheckResponse": {
      "type": "object",
      "properties": {
        "ready": {
          "type": "boolean"
        }
      },
      "title": "ReadynessCheckResponse Represents a request invoked against the social service for the\nreadyness check response"
    },
    "RemoveBookmarkedPostResponse": {
      "type": "object",
      "properties": {
        "bookmark": {
          "$ref": "#/definitions/Bookmark"
        }
      }
    },
    "RemoveBookmarkedPublicationResponse": {
      "type": "object",
      "properties": {
        "bookmark": {
          "$ref": "#/definitions/Bookmark"
        }
      }
    },
    "RemovePostFromThreadResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "ReportCommentReplyResponse": {
      "type": "object",
      "properties": {
        "reply": {
          "$ref": "#/definitions/CommentReply"
        }
      }
    },
    "ReportCommentResponse": {
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/Comment"
        }
      }
    },
    "ReportPostResponse": {
      "type": "object",
      "properties": {
        "post": {
          "$ref": "#/definitions/Post"
        }
      },
      "title": "ReportPostResponse: Represent the object returned as a\nresponse to the report post request"
    },
    "RespondToPollResponse": {
      "type": "object",
      "properties": {
        "poll": {
          "$ref": "#/definitions/PollPost"
        }
      }
    },
    "Sentiment": {
      "type": "object",
      "properties": {
        "negative": {
          "type": "number",
          "format": "float",
          "example": 30
        },
        "neutral": {
          "type": "number",
          "format": "float",
          "example": 50
        },
        "positive": {
          "type": "number",
          "format": "float",
          "example": 89
        },
        "compound": {
          "type": "number",
          "format": "float",
          "example": 93
        }
      }
    },
    "SharePostResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "SharedPost": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "RePost ID\n@gotag: bson:\"_id,omitempty\""
        },
        "originalPostId": {
          "type": "string",
          "example": "test-user",
          "title": "Original Post ID\n@gotag: bson:\"originalPostId\"",
          "minLength": 1
        },
        "originalAuthorUsername": {
          "type": "string",
          "title": "The username of the original author\n@gotag: bson:\"originalAuthorUsername\""
        },
        "createdAt": {
          "type": "string",
          "title": "Time post was created at\n@gotag: bson:\"createdAt\""
        },
        "content": {
          "type": "string",
          "title": "Content is the content the post witholds\nContent is a string of text that is at least 5 characters long\n@gotag: bson:\"content\""
        },
        "mentions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Profiles mentioned in the post\n@gotag: bson:\"mentions\""
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Hashtags defined in the post\n@gotag: bson:\"hashtags\""
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Blob of extra content tied to the post\n@gotag: bson:\"extra\""
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Comment"
          },
          "title": "Comments tied to the post\n@gotag: bson:\"comments\""
        },
        "backendPlatformUserId": {
          "type": "string",
          "title": "ID of the user resharing the post\n@gotag: bson:\"backendPlatformUserId\""
        },
        "profileId": {
          "type": "string",
          "format": "uint64",
          "title": "ID of the profile resharing the post\n@gotag: bson:\"profileId\""
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags associated with the post\n@gotag: bson:\"tags\""
        },
        "authorUsername": {
          "type": "string",
          "title": "Username of the person making the comment\n@gotag: bson:\"authorUsername\""
        },
        "affinityScore": {
          "type": "string",
          "format": "uint64",
          "title": "AffinityScore is the average rating users on the platform associate with a\npiece of content. It is taken as the weighted average across all reactions\nfor the particular post\n@gotag: bson:\"affinityScore\""
        },
        "qualityScore": {
          "type": "string",
          "format": "uint64",
          "title": "QualityScore is the quality of the given piece of content.\nIt is taken as the weighted average across all reactions for the particular\npost\n@gotag: bson:\"qualityScore\""
        },
        "userIdToAffinityScoreMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "title": "UserIDToAffinityScoreMap witholds a mapping of all user profiles who left\nan affinity score\n@gotag: bson:\"userIdToAffinityScoreMap\""
        },
        "userIdToReportsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          },
          "description": "AccountType is the account type of the creator of this piece of\n content",
          "title": "ReportCount details the number of reports were associated with a post\nA report is used as a signal to disclose the post's content are in\nviolation of platform rules\n@gotag: bson:\"userIdToReportsMap\""
        },
        "notes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Note"
          },
          "title": "the set of notes associated to this piece of content\n@gotag: bson:\"notes\""
        },
        "thread": {
          "$ref": "#/definitions/Thread",
          "title": "a thread a is a continuation of posts associated to a singular post\n@gotag: bson:\"thread\""
        },
        "authorAccountType": {
          "$ref": "#/definitions/AccountType",
          "title": "AccountType is the account type of the creator of this piece of\ncontent\n@gotag: bson:\"authorAccountType\""
        },
        "userIdToReactionMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Reaction"
          },
          "title": "a map of user ids to reactions left by users\n@gotag: bson:\"userIdToReactionMap\""
        },
        "action": {
          "$ref": "#/definitions/PostType",
          "title": "PostType defines the intent of the post\n@gotag: bson:\"action\""
        },
        "originalPostUserProfileId": {
          "type": "string",
          "format": "uint64",
          "title": "The profile Id of the user who owned the original post\n@gotag: bson:\"originalPostUserProfileId\""
        },
        "originalPostUserbackendPlaformId": {
          "type": "string",
          "title": "The backend wide user id of the profile who owned the original post\n@gotag: bson:\"originalPostUserbackendPlaformId\""
        },
        "originalPostAction": {
          "$ref": "#/definitions/PostType",
          "title": "originalPostType defines the intent of the post\n@gotag: bson:\"originalPostAction\""
        }
      },
      "title": "SharedPost: Posts reshared by other profiles\nTODO: need to expose api endpoints to interact with shared posts",
      "required": [
        "originalPostId",
        "content",
        "action",
        "originalPostAction"
      ]
    },
    "SocialProfileMetadata": {
      "type": "object",
      "properties": {
        "profileType": {
          "$ref": "#/definitions/AccountType"
        },
        "profileId": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "SocialRelationshipMetadata": {
      "type": "object",
      "properties": {
        "sourceProfile": {
          "$ref": "#/definitions/SocialProfileMetadata"
        },
        "targetProfile": {
          "$ref": "#/definitions/SocialProfileMetadata"
        },
        "following": {
          "type": "boolean"
        },
        "followingSince": {
          "type": "string"
        }
      },
      "required": [
        "sourceProfile",
        "targetProfile"
      ]
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Any"
          }
        }
      }
    },
    "Thread": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Thread ID\n@gotag: bson:\"_id,omitempty\""
        },
        "postIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "a list of post ids associated to this thread\n@gotag: bson:\"postIds\""
        },
        "parentPostId": {
          "type": "string",
          "title": "the id of the parent post\n@gotag: bson:\"parentPostId\""
        },
        "createdAt": {
          "type": "string",
          "title": "@gotag: bson:\"createdAt\""
        },
        "updatedAt": {
          "type": "string",
          "title": "@gotag: bson:\"updatedAt\""
        }
      }
    },
    "ThreadParticipantType": {
      "type": "string",
      "enum": [
        "THREAD_PARTICIPANT_TYPE_UNSPECIFIED",
        "THREAD_PARTICIPANT_TYPE_PARENT",
        "THREAD_PARTICIPANT_TYPE_PARTICIPANT"
      ],
      "default": "THREAD_PARTICIPANT_TYPE_UNSPECIFIED"
    },
    "Topic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "the id of the topic"
        },
        "topicName": {
          "type": "string",
          "example": "test-tagname",
          "title": "the name of the topic"
        },
        "description": {
          "type": "string",
          "example": "test-description sakjlDKJGSAHGHFDHSGJHFGAHDFJKGSHAJDLgAKSGDHAS CSVDJKSADASKJHDASFDGJKJLHSAHGFJDSAHD kjskhdgfhgdhfgkhsdfdsdfdssdfsdf",
          "title": "the description of the topic"
        },
        "imageUrl": {
          "type": "string",
          "example": "test-tagname",
          "title": "the url of the topic image\nthe image url is required",
          "minLength": 1
        }
      },
      "title": "Topic: topic that can be associated to a record",
      "required": [
        "topicName",
        "description",
        "imageUrl"
      ]
    },
    "UserProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "User profile ID"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UserTags"
          },
          "title": "Tags are interests"
        },
        "name": {
          "type": "string",
          "example": "test-user",
          "title": "Profile name is the name tied to the user profile\nuser name must be at least 5 characters long"
        },
        "private": {
          "type": "boolean",
          "title": "Private defines wether only approved followers can see what this profile\nposts"
        },
        "followers": {
          "type": "string",
          "format": "int64",
          "title": "Followers outlines the number of followers this user profile has"
        },
        "following": {
          "type": "string",
          "format": "int64",
          "title": "Number of people account is following"
        },
        "notificationFeedTimelineId": {
          "type": "string",
          "example": "asndlkhaskhdhasgdahsf-feed-id",
          "title": "Notification timeline Id. Notification for anything a user/group is\nfollowing"
        },
        "personalFeedTimelineId": {
          "type": "string",
          "example": "asndlkhaskhdhasgdahsf-feed-id",
          "title": "Personal timeline ID Has activities for a user that can be followed"
        },
        "newsFeedTimelineId": {
          "type": "string",
          "example": "asndlkhaskhdhasgdahsf-feed-id",
          "title": "Newsfeed timeline ID Displays all followed and group activities the user\nfollows"
        },
        "profileImageUrl": {
          "type": "string",
          "example": "asndlkhaskhdhasgdahsf.jpg",
          "title": "ProfileImageUrl witholds the url of a given profile image"
        },
        "bookmarks": {
          "$ref": "#/definitions/Bookmark",
          "title": "all the bookmarked pieces of content on the platform"
        },
        "algoliaId": {
          "type": "string",
          "example": "asndlkhaskhdhasgdahsf-feed-id",
          "title": "The id of the algolia record referencing this user"
        }
      },
      "title": "UserProfile: The profile object tied to a given user",
      "required": [
        "tags",
        "name",
        "private",
        "followers",
        "following",
        "notificationFeedTimelineId",
        "personalFeedTimelineId",
        "newsFeedTimelineId",
        "profileImageUrl",
        "bookmarks",
        "algoliaId"
      ]
    },
    "UserTags": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "the id of the tag record"
        },
        "tagName": {
          "type": "string",
          "example": "test-tagname",
          "title": "the name of the tag ... tag must be at least 5 characters long"
        },
        "description": {
          "type": "string",
          "example": "test-description sakjlDKJGSAHGHFDHSGJHFGAHDFJKGSHAJDLgAKSGDHAS CSVDJKSADASKJHDASFDGJKJLHSAHGFJDSAHD kjskhdgfhgdhfgkhsdfdsdfdssdfsdf",
          "title": "the description of the tag ... tag must be at least 5 characters long"
        }
      },
      "title": "Tags: tags that can be associated to a record",
      "required": [
        "tagName",
        "description"
      ]
    }
  }
}
