// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: social_service/v2/service.proto

package social_servicev2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SocialService_HealthCheck_FullMethodName                       = "/social_service.v2.SocialService/HealthCheck"
	SocialService_ReadynessCheck_FullMethodName                    = "/social_service.v2.SocialService/ReadynessCheck"
	SocialService_EditUserProfile_FullMethodName                   = "/social_service.v2.SocialService/EditUserProfile"
	SocialService_GetUserProfile_FullMethodName                    = "/social_service.v2.SocialService/GetUserProfile"
	SocialService_CreateUserProfile_FullMethodName                 = "/social_service.v2.SocialService/CreateUserProfile"
	SocialService_DeleteUserProfile_FullMethodName                 = "/social_service.v2.SocialService/DeleteUserProfile"
	SocialService_BlockUserProfile_FullMethodName                  = "/social_service.v2.SocialService/BlockUserProfile"
	SocialService_FollowProfile_FullMethodName                     = "/social_service.v2.SocialService/FollowProfile"
	SocialService_AcceptFollowProfile_FullMethodName               = "/social_service.v2.SocialService/AcceptFollowProfile"
	SocialService_GetUserProfiles_FullMethodName                   = "/social_service.v2.SocialService/GetUserProfiles"
	SocialService_DiscoverProfiles_FullMethodName                  = "/social_service.v2.SocialService/DiscoverProfiles"
	SocialService_GetCommunityProfile_FullMethodName               = "/social_service.v2.SocialService/GetCommunityProfile"
	SocialService_CreateCommunityProfile_FullMethodName            = "/social_service.v2.SocialService/CreateCommunityProfile"
	SocialService_GetCommunitiesUserFollows_FullMethodName         = "/social_service.v2.SocialService/GetCommunitiesUserFollows"
	SocialService_FollowCommunityProfile_FullMethodName            = "/social_service.v2.SocialService/FollowCommunityProfile"
	SocialService_GetCommunityProfiles_FullMethodName              = "/social_service.v2.SocialService/GetCommunityProfiles"
	SocialService_DeleteCommunityProfile_FullMethodName            = "/social_service.v2.SocialService/DeleteCommunityProfile"
	SocialService_EditCommunityProfile_FullMethodName              = "/social_service.v2.SocialService/EditCommunityProfile"
	SocialService_CreatePost_FullMethodName                        = "/social_service.v2.SocialService/CreatePost"
	SocialService_DeletePost_FullMethodName                        = "/social_service.v2.SocialService/DeletePost"
	SocialService_GetPost_FullMethodName                           = "/social_service.v2.SocialService/GetPost"
	SocialService_GetPostsByTopic_FullMethodName                   = "/social_service.v2.SocialService/GetPostsByTopic"
	SocialService_EditPost_FullMethodName                          = "/social_service.v2.SocialService/EditPost"
	SocialService_ReportPost_FullMethodName                        = "/social_service.v2.SocialService/ReportPost"
	SocialService_SharePost_FullMethodName                         = "/social_service.v2.SocialService/SharePost"
	SocialService_AddPostToThread_FullMethodName                   = "/social_service.v2.SocialService/AddPostToThread"
	SocialService_RemovePostFromThread_FullMethodName              = "/social_service.v2.SocialService/RemovePostFromThread"
	SocialService_GetPostThread_FullMethodName                     = "/social_service.v2.SocialService/GetPostThread"
	SocialService_AddPostQualityScore_FullMethodName               = "/social_service.v2.SocialService/AddPostQualityScore"
	SocialService_ReactToPost_FullMethodName                       = "/social_service.v2.SocialService/ReactToPost"
	SocialService_ReactToComment_FullMethodName                    = "/social_service.v2.SocialService/ReactToComment"
	SocialService_ReactToCommentReply_FullMethodName               = "/social_service.v2.SocialService/ReactToCommentReply"
	SocialService_GetBlogPostsByTag_FullMethodName                 = "/social_service.v2.SocialService/GetBlogPostsByTag"
	SocialService_GetCommunityBlogPosts_FullMethodName             = "/social_service.v2.SocialService/GetCommunityBlogPosts"
	SocialService_GetUserFeed_FullMethodName                       = "/social_service.v2.SocialService/GetUserFeed"
	SocialService_GetCommunityFeed_FullMethodName                  = "/social_service.v2.SocialService/GetCommunityFeed"
	SocialService_CreateComment_FullMethodName                     = "/social_service.v2.SocialService/CreateComment"
	SocialService_DeleteComment_FullMethodName                     = "/social_service.v2.SocialService/DeleteComment"
	SocialService_ReportComment_FullMethodName                     = "/social_service.v2.SocialService/ReportComment"
	SocialService_AddCommentQualityScore_FullMethodName            = "/social_service.v2.SocialService/AddCommentQualityScore"
	SocialService_CreateCommentReply_FullMethodName                = "/social_service.v2.SocialService/CreateCommentReply"
	SocialService_DeleteCommentReply_FullMethodName                = "/social_service.v2.SocialService/DeleteCommentReply"
	SocialService_EditCommentReply_FullMethodName                  = "/social_service.v2.SocialService/EditCommentReply"
	SocialService_GetCommentReplies_FullMethodName                 = "/social_service.v2.SocialService/GetCommentReplies"
	SocialService_ReportCommentReply_FullMethodName                = "/social_service.v2.SocialService/ReportCommentReply"
	SocialService_CreateTopic_FullMethodName                       = "/social_service.v2.SocialService/CreateTopic"
	SocialService_GetTopicsOfCommunitiesUserFollows_FullMethodName = "/social_service.v2.SocialService/GetTopicsOfCommunitiesUserFollows"
	SocialService_GetPendingFollows_FullMethodName                 = "/social_service.v2.SocialService/GetPendingFollows"
	SocialService_GetFollowers_FullMethodName                      = "/social_service.v2.SocialService/GetFollowers"
	SocialService_GetAccountsFollowing_FullMethodName              = "/social_service.v2.SocialService/GetAccountsFollowing"
	SocialService_CreatePoll_FullMethodName                        = "/social_service.v2.SocialService/CreatePoll"
	SocialService_DeletePoll_FullMethodName                        = "/social_service.v2.SocialService/DeletePoll"
	SocialService_GetPoll_FullMethodName                           = "/social_service.v2.SocialService/GetPoll"
	SocialService_GetPolls_FullMethodName                          = "/social_service.v2.SocialService/GetPolls"
	SocialService_RespondToPoll_FullMethodName                     = "/social_service.v2.SocialService/RespondToPoll"
	SocialService_CreateNote_FullMethodName                        = "/social_service.v2.SocialService/CreateNote"
	SocialService_DeleteNote_FullMethodName                        = "/social_service.v2.SocialService/DeleteNote"
	SocialService_EditNote_FullMethodName                          = "/social_service.v2.SocialService/EditNote"
	SocialService_CreatePublication_FullMethodName                 = "/social_service.v2.SocialService/CreatePublication"
	SocialService_GetPublication_FullMethodName                    = "/social_service.v2.SocialService/GetPublication"
	SocialService_DeletePublication_FullMethodName                 = "/social_service.v2.SocialService/DeletePublication"
	SocialService_AddPublicationEditor_FullMethodName              = "/social_service.v2.SocialService/AddPublicationEditor"
	SocialService_DeletePublicationEditor_FullMethodName           = "/social_service.v2.SocialService/DeletePublicationEditor"
	SocialService_AddPostToPublication_FullMethodName              = "/social_service.v2.SocialService/AddPostToPublication"
	SocialService_DeletePostFromPublication_FullMethodName         = "/social_service.v2.SocialService/DeletePostFromPublication"
	SocialService_BookmarkPost_FullMethodName                      = "/social_service.v2.SocialService/BookmarkPost"
	SocialService_BookmarkPublication_FullMethodName               = "/social_service.v2.SocialService/BookmarkPublication"
	SocialService_RemoveBookmarkedPost_FullMethodName              = "/social_service.v2.SocialService/RemoveBookmarkedPost"
	SocialService_RemoveBookmarkedPublication_FullMethodName       = "/social_service.v2.SocialService/RemoveBookmarkedPublication"
	SocialService_GetBookmarkedPosts_FullMethodName                = "/social_service.v2.SocialService/GetBookmarkedPosts"
)

// SocialServiceClient is the client API for SocialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	ReadynessCheck(ctx context.Context, in *ReadynessCheckRequest, opts ...grpc.CallOption) (*ReadynessCheckResponse, error)
	// EditUserProfile: Used to perform an update operation on a given user profile
	// For the update operation to successfully pass, the profile payload must be valid and
	// the user id tied to the profile being updated must exist and be an active profile
	EditUserProfile(ctx context.Context, in *EditUserProfileRequest, opts ...grpc.CallOption) (*EditUserProfileResponse, error)
	// The get user profile request obtains a user profile from the service and
	// all other associated records
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// The get user profile request obtains a user profile from the service and
	// all other associated records
	CreateUserProfile(ctx context.Context, in *CreateUserProfileRequest, opts ...grpc.CallOption) (*CreateUserProfileResponse, error)
	// DeleteUserProfile: Used to delete a user profile account.
	DeleteUserProfile(ctx context.Context, in *DeleteUserProfileRequest, opts ...grpc.CallOption) (*DeleteUserProfileResponse, error)
	// BlockUserProfile: Used to perform a block operation against another account. For the
	// block operation to successfully pass, the profile initiating the block operation must exist
	// as well as the profile being blocked. Additionally, a block record cannot already exist
	// between both accounts
	BlockUserProfile(ctx context.Context, in *BlockUserProfileRequest, opts ...grpc.CallOption) (*BlockUserProfileResponse, error)
	// FollowProfile: Used to follow a given target profile. A follow request must be valid
	// meaning the profile initiating the follow request must exist as well as the profile being targeted.
	// Additionally, a follow relationship cannot already exist between both accounts as well as
	// a block record.
	//
	// NOTE: if the target profile is a private account, the follow request is
	// put in "standby" mode meaning a follow request is sent to the target profile
	// for approval
	FollowProfile(ctx context.Context, in *FollowProfileRequest, opts ...grpc.CallOption) (*FollowProfileResponse, error)
	// AcceptFollowRequest: Used to accept a follow request. This operation is successful only
	// if the record tied to this follow request already exists
	AcceptFollowProfile(ctx context.Context, in *AcceptFollowProfileRequest, opts ...grpc.CallOption) (*AcceptFollowProfileResponse, error)
	GetUserProfiles(ctx context.Context, in *GetUserProfilesRequest, opts ...grpc.CallOption) (*GetUserProfilesResponse, error)
	DiscoverProfiles(ctx context.Context, in *DiscoverProfilesRequest, opts ...grpc.CallOption) (*DiscoverProfilesResponse, error)
	// Used to obtain a community profile by id. Operation is successful only under the condition
	// that the community profile actually exists
	GetCommunityProfile(ctx context.Context, in *GetCommunityProfileRequest, opts ...grpc.CallOption) (*GetCommunityProfileResponse, error)
	// Used to create a community profile. Operation is successfull if and only if the community profile payload is
	// valid and the user attempting to create the community profile exists
	CreateCommunityProfile(ctx context.Context, in *CreateCommunityProfileRequest, opts ...grpc.CallOption) (*CreateCommunityProfileResponse, error)
	GetCommunitiesUserFollows(ctx context.Context, in *GetCommunitiesUserFollowsRequest, opts ...grpc.CallOption) (*GetCommunitiesUserFollowsResponse, error)
	FollowCommunityProfile(ctx context.Context, in *FollowCommunityProfileRequest, opts ...grpc.CallOption) (*FollowCommunityProfileResponse, error)
	GetCommunityProfiles(ctx context.Context, in *GetCommunityProfilesRequest, opts ...grpc.CallOption) (*GetCommunityProfilesResponse, error)
	DeleteCommunityProfile(ctx context.Context, in *DeleteCommunityProfileRequest, opts ...grpc.CallOption) (*DeleteCommunityProfileResponse, error)
	EditCommunityProfile(ctx context.Context, in *EditCommunityProfileRequest, opts ...grpc.CallOption) (*EditCommunityProfileResponse, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	GetPostsByTopic(ctx context.Context, in *GetPostsByTopicRequest, opts ...grpc.CallOption) (*GetPostsByTopicResponse, error)
	EditPost(ctx context.Context, in *EditPostRequest, opts ...grpc.CallOption) (*EditPostResponse, error)
	ReportPost(ctx context.Context, in *ReportPostRequest, opts ...grpc.CallOption) (*ReportPostResponse, error)
	SharePost(ctx context.Context, in *SharePostRequest, opts ...grpc.CallOption) (*SharePostResponse, error)
	AddPostToThread(ctx context.Context, in *AddPostToThreadRequest, opts ...grpc.CallOption) (*AddPostToThreadResponse, error)
	RemovePostFromThread(ctx context.Context, in *RemovePostFromThreadRequest, opts ...grpc.CallOption) (*RemovePostFromThreadResponse, error)
	GetPostThread(ctx context.Context, in *GetPostThreadRequest, opts ...grpc.CallOption) (*GetPostThreadResponse, error)
	AddPostQualityScore(ctx context.Context, in *AddPostQualityScoreRequest, opts ...grpc.CallOption) (*AddPostQualityScoreResponse, error)
	ReactToPost(ctx context.Context, in *ReactToPostRequest, opts ...grpc.CallOption) (*ReactToPostResponse, error)
	ReactToComment(ctx context.Context, in *ReactToCommentRequest, opts ...grpc.CallOption) (*ReactToCommentResponse, error)
	ReactToCommentReply(ctx context.Context, in *ReactToCommentReplyRequest, opts ...grpc.CallOption) (*ReactToCommentReplyResponse, error)
	GetBlogPostsByTag(ctx context.Context, in *GetBlogPostsByTagRequest, opts ...grpc.CallOption) (*GetBlogPostsByTagResponse, error)
	GetCommunityBlogPosts(ctx context.Context, in *GetCommunityBlogPostsRequest, opts ...grpc.CallOption) (*GetCommunityBlogPostsResponse, error)
	GetUserFeed(ctx context.Context, in *GetUserFeedRequest, opts ...grpc.CallOption) (*GetUserFeedResponse, error)
	GetCommunityFeed(ctx context.Context, in *GetCommunityFeedRequest, opts ...grpc.CallOption) (*GetCommunityFeedResponse, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	ReportComment(ctx context.Context, in *ReportCommentRequest, opts ...grpc.CallOption) (*ReportCommentResponse, error)
	AddCommentQualityScore(ctx context.Context, in *AddCommentQualityScoreRequest, opts ...grpc.CallOption) (*AddCommentQualityScoreResponse, error)
	CreateCommentReply(ctx context.Context, in *CreateCommentReplyRequest, opts ...grpc.CallOption) (*CreateCommentReplyResponse, error)
	DeleteCommentReply(ctx context.Context, in *DeleteCommentReplyRequest, opts ...grpc.CallOption) (*DeleteCommentReplyResponse, error)
	EditCommentReply(ctx context.Context, in *EditCommentReplyRequest, opts ...grpc.CallOption) (*EditCommentReplyResponse, error)
	GetCommentReplies(ctx context.Context, in *GetCommentRepliesRequest, opts ...grpc.CallOption) (*GetCommentRepliesResponse, error)
	ReportCommentReply(ctx context.Context, in *ReportCommentReplyRequest, opts ...grpc.CallOption) (*ReportCommentReplyResponse, error)
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	GetTopicsOfCommunitiesUserFollows(ctx context.Context, in *GetTopicsOfCommunitiesUserFollowsRequest, opts ...grpc.CallOption) (*GetTopicsOfCommunitiesUserFollowsResponse, error)
	GetPendingFollows(ctx context.Context, in *GetPendingFollowsRequest, opts ...grpc.CallOption) (*GetPendingFollowsResponse, error)
	GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error)
	GetAccountsFollowing(ctx context.Context, in *GetAccountsFollowingRequest, opts ...grpc.CallOption) (*GetAccountsFollowingResponse, error)
	CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollResponse, error)
	DeletePoll(ctx context.Context, in *DeletePollRequest, opts ...grpc.CallOption) (*DeletePollResponse, error)
	GetPoll(ctx context.Context, in *GetPollRequest, opts ...grpc.CallOption) (*GetPollResponse, error)
	GetPolls(ctx context.Context, in *GetPollsRequest, opts ...grpc.CallOption) (*GetPollsResponse, error)
	RespondToPoll(ctx context.Context, in *RespondToPollRequest, opts ...grpc.CallOption) (*RespondToPollResponse, error)
	CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*CreateNoteResponse, error)
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*DeleteNoteResponse, error)
	EditNote(ctx context.Context, in *EditNoteRequest, opts ...grpc.CallOption) (*EditNoteResponse, error)
	CreatePublication(ctx context.Context, in *CreatePublicationRequest, opts ...grpc.CallOption) (*CreatePublicationResponse, error)
	GetPublication(ctx context.Context, in *GetPublicationRequest, opts ...grpc.CallOption) (*GetPublicationResponse, error)
	DeletePublication(ctx context.Context, in *DeletePublicationRequest, opts ...grpc.CallOption) (*DeletePublicationResponse, error)
	AddPublicationEditor(ctx context.Context, in *AddPublicationEditorRequest, opts ...grpc.CallOption) (*AddPublicationEditorResponse, error)
	DeletePublicationEditor(ctx context.Context, in *DeletePublicationEditorRequest, opts ...grpc.CallOption) (*DeletePublicationEditorResponse, error)
	AddPostToPublication(ctx context.Context, in *AddPostToPublicationRequest, opts ...grpc.CallOption) (*AddPostToPublicationResponse, error)
	DeletePostFromPublication(ctx context.Context, in *DeletePostFromPublicationRequest, opts ...grpc.CallOption) (*DeletePostFromPublicationResponse, error)
	BookmarkPost(ctx context.Context, in *BookmarkPostRequest, opts ...grpc.CallOption) (*BookmarkPostResponse, error)
	BookmarkPublication(ctx context.Context, in *BookmarkPublicationRequest, opts ...grpc.CallOption) (*BookmarkPublicationResponse, error)
	RemoveBookmarkedPost(ctx context.Context, in *RemoveBookmarkedPostRequest, opts ...grpc.CallOption) (*RemoveBookmarkedPostResponse, error)
	RemoveBookmarkedPublication(ctx context.Context, in *RemoveBookmarkedPublicationRequest, opts ...grpc.CallOption) (*RemoveBookmarkedPublicationResponse, error)
	GetBookmarkedPosts(ctx context.Context, in *GetBookmarkedPostsRequest, opts ...grpc.CallOption) (*GetBookmarkedPostsResponse, error)
}

type socialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialServiceClient(cc grpc.ClientConnInterface) SocialServiceClient {
	return &socialServiceClient{cc}
}

func (c *socialServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, SocialService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ReadynessCheck(ctx context.Context, in *ReadynessCheckRequest, opts ...grpc.CallOption) (*ReadynessCheckResponse, error) {
	out := new(ReadynessCheckResponse)
	err := c.cc.Invoke(ctx, SocialService_ReadynessCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) EditUserProfile(ctx context.Context, in *EditUserProfileRequest, opts ...grpc.CallOption) (*EditUserProfileResponse, error) {
	out := new(EditUserProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_EditUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_GetUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreateUserProfile(ctx context.Context, in *CreateUserProfileRequest, opts ...grpc.CallOption) (*CreateUserProfileResponse, error) {
	out := new(CreateUserProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_CreateUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeleteUserProfile(ctx context.Context, in *DeleteUserProfileRequest, opts ...grpc.CallOption) (*DeleteUserProfileResponse, error) {
	out := new(DeleteUserProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_DeleteUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) BlockUserProfile(ctx context.Context, in *BlockUserProfileRequest, opts ...grpc.CallOption) (*BlockUserProfileResponse, error) {
	out := new(BlockUserProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_BlockUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) FollowProfile(ctx context.Context, in *FollowProfileRequest, opts ...grpc.CallOption) (*FollowProfileResponse, error) {
	out := new(FollowProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_FollowProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) AcceptFollowProfile(ctx context.Context, in *AcceptFollowProfileRequest, opts ...grpc.CallOption) (*AcceptFollowProfileResponse, error) {
	out := new(AcceptFollowProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_AcceptFollowProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetUserProfiles(ctx context.Context, in *GetUserProfilesRequest, opts ...grpc.CallOption) (*GetUserProfilesResponse, error) {
	out := new(GetUserProfilesResponse)
	err := c.cc.Invoke(ctx, SocialService_GetUserProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DiscoverProfiles(ctx context.Context, in *DiscoverProfilesRequest, opts ...grpc.CallOption) (*DiscoverProfilesResponse, error) {
	out := new(DiscoverProfilesResponse)
	err := c.cc.Invoke(ctx, SocialService_DiscoverProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetCommunityProfile(ctx context.Context, in *GetCommunityProfileRequest, opts ...grpc.CallOption) (*GetCommunityProfileResponse, error) {
	out := new(GetCommunityProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_GetCommunityProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreateCommunityProfile(ctx context.Context, in *CreateCommunityProfileRequest, opts ...grpc.CallOption) (*CreateCommunityProfileResponse, error) {
	out := new(CreateCommunityProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_CreateCommunityProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetCommunitiesUserFollows(ctx context.Context, in *GetCommunitiesUserFollowsRequest, opts ...grpc.CallOption) (*GetCommunitiesUserFollowsResponse, error) {
	out := new(GetCommunitiesUserFollowsResponse)
	err := c.cc.Invoke(ctx, SocialService_GetCommunitiesUserFollows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) FollowCommunityProfile(ctx context.Context, in *FollowCommunityProfileRequest, opts ...grpc.CallOption) (*FollowCommunityProfileResponse, error) {
	out := new(FollowCommunityProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_FollowCommunityProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetCommunityProfiles(ctx context.Context, in *GetCommunityProfilesRequest, opts ...grpc.CallOption) (*GetCommunityProfilesResponse, error) {
	out := new(GetCommunityProfilesResponse)
	err := c.cc.Invoke(ctx, SocialService_GetCommunityProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeleteCommunityProfile(ctx context.Context, in *DeleteCommunityProfileRequest, opts ...grpc.CallOption) (*DeleteCommunityProfileResponse, error) {
	out := new(DeleteCommunityProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_DeleteCommunityProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) EditCommunityProfile(ctx context.Context, in *EditCommunityProfileRequest, opts ...grpc.CallOption) (*EditCommunityProfileResponse, error) {
	out := new(EditCommunityProfileResponse)
	err := c.cc.Invoke(ctx, SocialService_EditCommunityProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, SocialService_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, SocialService_DeletePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, SocialService_GetPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetPostsByTopic(ctx context.Context, in *GetPostsByTopicRequest, opts ...grpc.CallOption) (*GetPostsByTopicResponse, error) {
	out := new(GetPostsByTopicResponse)
	err := c.cc.Invoke(ctx, SocialService_GetPostsByTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) EditPost(ctx context.Context, in *EditPostRequest, opts ...grpc.CallOption) (*EditPostResponse, error) {
	out := new(EditPostResponse)
	err := c.cc.Invoke(ctx, SocialService_EditPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ReportPost(ctx context.Context, in *ReportPostRequest, opts ...grpc.CallOption) (*ReportPostResponse, error) {
	out := new(ReportPostResponse)
	err := c.cc.Invoke(ctx, SocialService_ReportPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) SharePost(ctx context.Context, in *SharePostRequest, opts ...grpc.CallOption) (*SharePostResponse, error) {
	out := new(SharePostResponse)
	err := c.cc.Invoke(ctx, SocialService_SharePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) AddPostToThread(ctx context.Context, in *AddPostToThreadRequest, opts ...grpc.CallOption) (*AddPostToThreadResponse, error) {
	out := new(AddPostToThreadResponse)
	err := c.cc.Invoke(ctx, SocialService_AddPostToThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) RemovePostFromThread(ctx context.Context, in *RemovePostFromThreadRequest, opts ...grpc.CallOption) (*RemovePostFromThreadResponse, error) {
	out := new(RemovePostFromThreadResponse)
	err := c.cc.Invoke(ctx, SocialService_RemovePostFromThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetPostThread(ctx context.Context, in *GetPostThreadRequest, opts ...grpc.CallOption) (*GetPostThreadResponse, error) {
	out := new(GetPostThreadResponse)
	err := c.cc.Invoke(ctx, SocialService_GetPostThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) AddPostQualityScore(ctx context.Context, in *AddPostQualityScoreRequest, opts ...grpc.CallOption) (*AddPostQualityScoreResponse, error) {
	out := new(AddPostQualityScoreResponse)
	err := c.cc.Invoke(ctx, SocialService_AddPostQualityScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ReactToPost(ctx context.Context, in *ReactToPostRequest, opts ...grpc.CallOption) (*ReactToPostResponse, error) {
	out := new(ReactToPostResponse)
	err := c.cc.Invoke(ctx, SocialService_ReactToPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ReactToComment(ctx context.Context, in *ReactToCommentRequest, opts ...grpc.CallOption) (*ReactToCommentResponse, error) {
	out := new(ReactToCommentResponse)
	err := c.cc.Invoke(ctx, SocialService_ReactToComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ReactToCommentReply(ctx context.Context, in *ReactToCommentReplyRequest, opts ...grpc.CallOption) (*ReactToCommentReplyResponse, error) {
	out := new(ReactToCommentReplyResponse)
	err := c.cc.Invoke(ctx, SocialService_ReactToCommentReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetBlogPostsByTag(ctx context.Context, in *GetBlogPostsByTagRequest, opts ...grpc.CallOption) (*GetBlogPostsByTagResponse, error) {
	out := new(GetBlogPostsByTagResponse)
	err := c.cc.Invoke(ctx, SocialService_GetBlogPostsByTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetCommunityBlogPosts(ctx context.Context, in *GetCommunityBlogPostsRequest, opts ...grpc.CallOption) (*GetCommunityBlogPostsResponse, error) {
	out := new(GetCommunityBlogPostsResponse)
	err := c.cc.Invoke(ctx, SocialService_GetCommunityBlogPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetUserFeed(ctx context.Context, in *GetUserFeedRequest, opts ...grpc.CallOption) (*GetUserFeedResponse, error) {
	out := new(GetUserFeedResponse)
	err := c.cc.Invoke(ctx, SocialService_GetUserFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetCommunityFeed(ctx context.Context, in *GetCommunityFeedRequest, opts ...grpc.CallOption) (*GetCommunityFeedResponse, error) {
	out := new(GetCommunityFeedResponse)
	err := c.cc.Invoke(ctx, SocialService_GetCommunityFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, SocialService_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, SocialService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ReportComment(ctx context.Context, in *ReportCommentRequest, opts ...grpc.CallOption) (*ReportCommentResponse, error) {
	out := new(ReportCommentResponse)
	err := c.cc.Invoke(ctx, SocialService_ReportComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) AddCommentQualityScore(ctx context.Context, in *AddCommentQualityScoreRequest, opts ...grpc.CallOption) (*AddCommentQualityScoreResponse, error) {
	out := new(AddCommentQualityScoreResponse)
	err := c.cc.Invoke(ctx, SocialService_AddCommentQualityScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreateCommentReply(ctx context.Context, in *CreateCommentReplyRequest, opts ...grpc.CallOption) (*CreateCommentReplyResponse, error) {
	out := new(CreateCommentReplyResponse)
	err := c.cc.Invoke(ctx, SocialService_CreateCommentReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeleteCommentReply(ctx context.Context, in *DeleteCommentReplyRequest, opts ...grpc.CallOption) (*DeleteCommentReplyResponse, error) {
	out := new(DeleteCommentReplyResponse)
	err := c.cc.Invoke(ctx, SocialService_DeleteCommentReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) EditCommentReply(ctx context.Context, in *EditCommentReplyRequest, opts ...grpc.CallOption) (*EditCommentReplyResponse, error) {
	out := new(EditCommentReplyResponse)
	err := c.cc.Invoke(ctx, SocialService_EditCommentReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetCommentReplies(ctx context.Context, in *GetCommentRepliesRequest, opts ...grpc.CallOption) (*GetCommentRepliesResponse, error) {
	out := new(GetCommentRepliesResponse)
	err := c.cc.Invoke(ctx, SocialService_GetCommentReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ReportCommentReply(ctx context.Context, in *ReportCommentReplyRequest, opts ...grpc.CallOption) (*ReportCommentReplyResponse, error) {
	out := new(ReportCommentReplyResponse)
	err := c.cc.Invoke(ctx, SocialService_ReportCommentReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, SocialService_CreateTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetTopicsOfCommunitiesUserFollows(ctx context.Context, in *GetTopicsOfCommunitiesUserFollowsRequest, opts ...grpc.CallOption) (*GetTopicsOfCommunitiesUserFollowsResponse, error) {
	out := new(GetTopicsOfCommunitiesUserFollowsResponse)
	err := c.cc.Invoke(ctx, SocialService_GetTopicsOfCommunitiesUserFollows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetPendingFollows(ctx context.Context, in *GetPendingFollowsRequest, opts ...grpc.CallOption) (*GetPendingFollowsResponse, error) {
	out := new(GetPendingFollowsResponse)
	err := c.cc.Invoke(ctx, SocialService_GetPendingFollows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error) {
	out := new(GetFollowersResponse)
	err := c.cc.Invoke(ctx, SocialService_GetFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetAccountsFollowing(ctx context.Context, in *GetAccountsFollowingRequest, opts ...grpc.CallOption) (*GetAccountsFollowingResponse, error) {
	out := new(GetAccountsFollowingResponse)
	err := c.cc.Invoke(ctx, SocialService_GetAccountsFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollResponse, error) {
	out := new(CreatePollResponse)
	err := c.cc.Invoke(ctx, SocialService_CreatePoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeletePoll(ctx context.Context, in *DeletePollRequest, opts ...grpc.CallOption) (*DeletePollResponse, error) {
	out := new(DeletePollResponse)
	err := c.cc.Invoke(ctx, SocialService_DeletePoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetPoll(ctx context.Context, in *GetPollRequest, opts ...grpc.CallOption) (*GetPollResponse, error) {
	out := new(GetPollResponse)
	err := c.cc.Invoke(ctx, SocialService_GetPoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetPolls(ctx context.Context, in *GetPollsRequest, opts ...grpc.CallOption) (*GetPollsResponse, error) {
	out := new(GetPollsResponse)
	err := c.cc.Invoke(ctx, SocialService_GetPolls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) RespondToPoll(ctx context.Context, in *RespondToPollRequest, opts ...grpc.CallOption) (*RespondToPollResponse, error) {
	out := new(RespondToPollResponse)
	err := c.cc.Invoke(ctx, SocialService_RespondToPoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*CreateNoteResponse, error) {
	out := new(CreateNoteResponse)
	err := c.cc.Invoke(ctx, SocialService_CreateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*DeleteNoteResponse, error) {
	out := new(DeleteNoteResponse)
	err := c.cc.Invoke(ctx, SocialService_DeleteNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) EditNote(ctx context.Context, in *EditNoteRequest, opts ...grpc.CallOption) (*EditNoteResponse, error) {
	out := new(EditNoteResponse)
	err := c.cc.Invoke(ctx, SocialService_EditNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreatePublication(ctx context.Context, in *CreatePublicationRequest, opts ...grpc.CallOption) (*CreatePublicationResponse, error) {
	out := new(CreatePublicationResponse)
	err := c.cc.Invoke(ctx, SocialService_CreatePublication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetPublication(ctx context.Context, in *GetPublicationRequest, opts ...grpc.CallOption) (*GetPublicationResponse, error) {
	out := new(GetPublicationResponse)
	err := c.cc.Invoke(ctx, SocialService_GetPublication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeletePublication(ctx context.Context, in *DeletePublicationRequest, opts ...grpc.CallOption) (*DeletePublicationResponse, error) {
	out := new(DeletePublicationResponse)
	err := c.cc.Invoke(ctx, SocialService_DeletePublication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) AddPublicationEditor(ctx context.Context, in *AddPublicationEditorRequest, opts ...grpc.CallOption) (*AddPublicationEditorResponse, error) {
	out := new(AddPublicationEditorResponse)
	err := c.cc.Invoke(ctx, SocialService_AddPublicationEditor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeletePublicationEditor(ctx context.Context, in *DeletePublicationEditorRequest, opts ...grpc.CallOption) (*DeletePublicationEditorResponse, error) {
	out := new(DeletePublicationEditorResponse)
	err := c.cc.Invoke(ctx, SocialService_DeletePublicationEditor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) AddPostToPublication(ctx context.Context, in *AddPostToPublicationRequest, opts ...grpc.CallOption) (*AddPostToPublicationResponse, error) {
	out := new(AddPostToPublicationResponse)
	err := c.cc.Invoke(ctx, SocialService_AddPostToPublication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeletePostFromPublication(ctx context.Context, in *DeletePostFromPublicationRequest, opts ...grpc.CallOption) (*DeletePostFromPublicationResponse, error) {
	out := new(DeletePostFromPublicationResponse)
	err := c.cc.Invoke(ctx, SocialService_DeletePostFromPublication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) BookmarkPost(ctx context.Context, in *BookmarkPostRequest, opts ...grpc.CallOption) (*BookmarkPostResponse, error) {
	out := new(BookmarkPostResponse)
	err := c.cc.Invoke(ctx, SocialService_BookmarkPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) BookmarkPublication(ctx context.Context, in *BookmarkPublicationRequest, opts ...grpc.CallOption) (*BookmarkPublicationResponse, error) {
	out := new(BookmarkPublicationResponse)
	err := c.cc.Invoke(ctx, SocialService_BookmarkPublication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) RemoveBookmarkedPost(ctx context.Context, in *RemoveBookmarkedPostRequest, opts ...grpc.CallOption) (*RemoveBookmarkedPostResponse, error) {
	out := new(RemoveBookmarkedPostResponse)
	err := c.cc.Invoke(ctx, SocialService_RemoveBookmarkedPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) RemoveBookmarkedPublication(ctx context.Context, in *RemoveBookmarkedPublicationRequest, opts ...grpc.CallOption) (*RemoveBookmarkedPublicationResponse, error) {
	out := new(RemoveBookmarkedPublicationResponse)
	err := c.cc.Invoke(ctx, SocialService_RemoveBookmarkedPublication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetBookmarkedPosts(ctx context.Context, in *GetBookmarkedPostsRequest, opts ...grpc.CallOption) (*GetBookmarkedPostsResponse, error) {
	out := new(GetBookmarkedPostsResponse)
	err := c.cc.Invoke(ctx, SocialService_GetBookmarkedPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServiceServer is the server API for SocialService service.
// All implementations must embed UnimplementedSocialServiceServer
// for forward compatibility
type SocialServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	ReadynessCheck(context.Context, *ReadynessCheckRequest) (*ReadynessCheckResponse, error)
	// EditUserProfile: Used to perform an update operation on a given user profile
	// For the update operation to successfully pass, the profile payload must be valid and
	// the user id tied to the profile being updated must exist and be an active profile
	EditUserProfile(context.Context, *EditUserProfileRequest) (*EditUserProfileResponse, error)
	// The get user profile request obtains a user profile from the service and
	// all other associated records
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// The get user profile request obtains a user profile from the service and
	// all other associated records
	CreateUserProfile(context.Context, *CreateUserProfileRequest) (*CreateUserProfileResponse, error)
	// DeleteUserProfile: Used to delete a user profile account.
	DeleteUserProfile(context.Context, *DeleteUserProfileRequest) (*DeleteUserProfileResponse, error)
	// BlockUserProfile: Used to perform a block operation against another account. For the
	// block operation to successfully pass, the profile initiating the block operation must exist
	// as well as the profile being blocked. Additionally, a block record cannot already exist
	// between both accounts
	BlockUserProfile(context.Context, *BlockUserProfileRequest) (*BlockUserProfileResponse, error)
	// FollowProfile: Used to follow a given target profile. A follow request must be valid
	// meaning the profile initiating the follow request must exist as well as the profile being targeted.
	// Additionally, a follow relationship cannot already exist between both accounts as well as
	// a block record.
	//
	// NOTE: if the target profile is a private account, the follow request is
	// put in "standby" mode meaning a follow request is sent to the target profile
	// for approval
	FollowProfile(context.Context, *FollowProfileRequest) (*FollowProfileResponse, error)
	// AcceptFollowRequest: Used to accept a follow request. This operation is successful only
	// if the record tied to this follow request already exists
	AcceptFollowProfile(context.Context, *AcceptFollowProfileRequest) (*AcceptFollowProfileResponse, error)
	GetUserProfiles(context.Context, *GetUserProfilesRequest) (*GetUserProfilesResponse, error)
	DiscoverProfiles(context.Context, *DiscoverProfilesRequest) (*DiscoverProfilesResponse, error)
	// Used to obtain a community profile by id. Operation is successful only under the condition
	// that the community profile actually exists
	GetCommunityProfile(context.Context, *GetCommunityProfileRequest) (*GetCommunityProfileResponse, error)
	// Used to create a community profile. Operation is successfull if and only if the community profile payload is
	// valid and the user attempting to create the community profile exists
	CreateCommunityProfile(context.Context, *CreateCommunityProfileRequest) (*CreateCommunityProfileResponse, error)
	GetCommunitiesUserFollows(context.Context, *GetCommunitiesUserFollowsRequest) (*GetCommunitiesUserFollowsResponse, error)
	FollowCommunityProfile(context.Context, *FollowCommunityProfileRequest) (*FollowCommunityProfileResponse, error)
	GetCommunityProfiles(context.Context, *GetCommunityProfilesRequest) (*GetCommunityProfilesResponse, error)
	DeleteCommunityProfile(context.Context, *DeleteCommunityProfileRequest) (*DeleteCommunityProfileResponse, error)
	EditCommunityProfile(context.Context, *EditCommunityProfileRequest) (*EditCommunityProfileResponse, error)
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	GetPostsByTopic(context.Context, *GetPostsByTopicRequest) (*GetPostsByTopicResponse, error)
	EditPost(context.Context, *EditPostRequest) (*EditPostResponse, error)
	ReportPost(context.Context, *ReportPostRequest) (*ReportPostResponse, error)
	SharePost(context.Context, *SharePostRequest) (*SharePostResponse, error)
	AddPostToThread(context.Context, *AddPostToThreadRequest) (*AddPostToThreadResponse, error)
	RemovePostFromThread(context.Context, *RemovePostFromThreadRequest) (*RemovePostFromThreadResponse, error)
	GetPostThread(context.Context, *GetPostThreadRequest) (*GetPostThreadResponse, error)
	AddPostQualityScore(context.Context, *AddPostQualityScoreRequest) (*AddPostQualityScoreResponse, error)
	ReactToPost(context.Context, *ReactToPostRequest) (*ReactToPostResponse, error)
	ReactToComment(context.Context, *ReactToCommentRequest) (*ReactToCommentResponse, error)
	ReactToCommentReply(context.Context, *ReactToCommentReplyRequest) (*ReactToCommentReplyResponse, error)
	GetBlogPostsByTag(context.Context, *GetBlogPostsByTagRequest) (*GetBlogPostsByTagResponse, error)
	GetCommunityBlogPosts(context.Context, *GetCommunityBlogPostsRequest) (*GetCommunityBlogPostsResponse, error)
	GetUserFeed(context.Context, *GetUserFeedRequest) (*GetUserFeedResponse, error)
	GetCommunityFeed(context.Context, *GetCommunityFeedRequest) (*GetCommunityFeedResponse, error)
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	ReportComment(context.Context, *ReportCommentRequest) (*ReportCommentResponse, error)
	AddCommentQualityScore(context.Context, *AddCommentQualityScoreRequest) (*AddCommentQualityScoreResponse, error)
	CreateCommentReply(context.Context, *CreateCommentReplyRequest) (*CreateCommentReplyResponse, error)
	DeleteCommentReply(context.Context, *DeleteCommentReplyRequest) (*DeleteCommentReplyResponse, error)
	EditCommentReply(context.Context, *EditCommentReplyRequest) (*EditCommentReplyResponse, error)
	GetCommentReplies(context.Context, *GetCommentRepliesRequest) (*GetCommentRepliesResponse, error)
	ReportCommentReply(context.Context, *ReportCommentReplyRequest) (*ReportCommentReplyResponse, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	GetTopicsOfCommunitiesUserFollows(context.Context, *GetTopicsOfCommunitiesUserFollowsRequest) (*GetTopicsOfCommunitiesUserFollowsResponse, error)
	GetPendingFollows(context.Context, *GetPendingFollowsRequest) (*GetPendingFollowsResponse, error)
	GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error)
	GetAccountsFollowing(context.Context, *GetAccountsFollowingRequest) (*GetAccountsFollowingResponse, error)
	CreatePoll(context.Context, *CreatePollRequest) (*CreatePollResponse, error)
	DeletePoll(context.Context, *DeletePollRequest) (*DeletePollResponse, error)
	GetPoll(context.Context, *GetPollRequest) (*GetPollResponse, error)
	GetPolls(context.Context, *GetPollsRequest) (*GetPollsResponse, error)
	RespondToPoll(context.Context, *RespondToPollRequest) (*RespondToPollResponse, error)
	CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteResponse, error)
	DeleteNote(context.Context, *DeleteNoteRequest) (*DeleteNoteResponse, error)
	EditNote(context.Context, *EditNoteRequest) (*EditNoteResponse, error)
	CreatePublication(context.Context, *CreatePublicationRequest) (*CreatePublicationResponse, error)
	GetPublication(context.Context, *GetPublicationRequest) (*GetPublicationResponse, error)
	DeletePublication(context.Context, *DeletePublicationRequest) (*DeletePublicationResponse, error)
	AddPublicationEditor(context.Context, *AddPublicationEditorRequest) (*AddPublicationEditorResponse, error)
	DeletePublicationEditor(context.Context, *DeletePublicationEditorRequest) (*DeletePublicationEditorResponse, error)
	AddPostToPublication(context.Context, *AddPostToPublicationRequest) (*AddPostToPublicationResponse, error)
	DeletePostFromPublication(context.Context, *DeletePostFromPublicationRequest) (*DeletePostFromPublicationResponse, error)
	BookmarkPost(context.Context, *BookmarkPostRequest) (*BookmarkPostResponse, error)
	BookmarkPublication(context.Context, *BookmarkPublicationRequest) (*BookmarkPublicationResponse, error)
	RemoveBookmarkedPost(context.Context, *RemoveBookmarkedPostRequest) (*RemoveBookmarkedPostResponse, error)
	RemoveBookmarkedPublication(context.Context, *RemoveBookmarkedPublicationRequest) (*RemoveBookmarkedPublicationResponse, error)
	GetBookmarkedPosts(context.Context, *GetBookmarkedPostsRequest) (*GetBookmarkedPostsResponse, error)
	mustEmbedUnimplementedSocialServiceServer()
}

// UnimplementedSocialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocialServiceServer struct {
}

func (UnimplementedSocialServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSocialServiceServer) ReadynessCheck(context.Context, *ReadynessCheckRequest) (*ReadynessCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadynessCheck not implemented")
}
func (UnimplementedSocialServiceServer) EditUserProfile(context.Context, *EditUserProfileRequest) (*EditUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserProfile not implemented")
}
func (UnimplementedSocialServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedSocialServiceServer) CreateUserProfile(context.Context, *CreateUserProfileRequest) (*CreateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserProfile not implemented")
}
func (UnimplementedSocialServiceServer) DeleteUserProfile(context.Context, *DeleteUserProfileRequest) (*DeleteUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserProfile not implemented")
}
func (UnimplementedSocialServiceServer) BlockUserProfile(context.Context, *BlockUserProfileRequest) (*BlockUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUserProfile not implemented")
}
func (UnimplementedSocialServiceServer) FollowProfile(context.Context, *FollowProfileRequest) (*FollowProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowProfile not implemented")
}
func (UnimplementedSocialServiceServer) AcceptFollowProfile(context.Context, *AcceptFollowProfileRequest) (*AcceptFollowProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFollowProfile not implemented")
}
func (UnimplementedSocialServiceServer) GetUserProfiles(context.Context, *GetUserProfilesRequest) (*GetUserProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfiles not implemented")
}
func (UnimplementedSocialServiceServer) DiscoverProfiles(context.Context, *DiscoverProfilesRequest) (*DiscoverProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverProfiles not implemented")
}
func (UnimplementedSocialServiceServer) GetCommunityProfile(context.Context, *GetCommunityProfileRequest) (*GetCommunityProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityProfile not implemented")
}
func (UnimplementedSocialServiceServer) CreateCommunityProfile(context.Context, *CreateCommunityProfileRequest) (*CreateCommunityProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunityProfile not implemented")
}
func (UnimplementedSocialServiceServer) GetCommunitiesUserFollows(context.Context, *GetCommunitiesUserFollowsRequest) (*GetCommunitiesUserFollowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunitiesUserFollows not implemented")
}
func (UnimplementedSocialServiceServer) FollowCommunityProfile(context.Context, *FollowCommunityProfileRequest) (*FollowCommunityProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowCommunityProfile not implemented")
}
func (UnimplementedSocialServiceServer) GetCommunityProfiles(context.Context, *GetCommunityProfilesRequest) (*GetCommunityProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityProfiles not implemented")
}
func (UnimplementedSocialServiceServer) DeleteCommunityProfile(context.Context, *DeleteCommunityProfileRequest) (*DeleteCommunityProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunityProfile not implemented")
}
func (UnimplementedSocialServiceServer) EditCommunityProfile(context.Context, *EditCommunityProfileRequest) (*EditCommunityProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCommunityProfile not implemented")
}
func (UnimplementedSocialServiceServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedSocialServiceServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedSocialServiceServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedSocialServiceServer) GetPostsByTopic(context.Context, *GetPostsByTopicRequest) (*GetPostsByTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsByTopic not implemented")
}
func (UnimplementedSocialServiceServer) EditPost(context.Context, *EditPostRequest) (*EditPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPost not implemented")
}
func (UnimplementedSocialServiceServer) ReportPost(context.Context, *ReportPostRequest) (*ReportPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportPost not implemented")
}
func (UnimplementedSocialServiceServer) SharePost(context.Context, *SharePostRequest) (*SharePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePost not implemented")
}
func (UnimplementedSocialServiceServer) AddPostToThread(context.Context, *AddPostToThreadRequest) (*AddPostToThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPostToThread not implemented")
}
func (UnimplementedSocialServiceServer) RemovePostFromThread(context.Context, *RemovePostFromThreadRequest) (*RemovePostFromThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePostFromThread not implemented")
}
func (UnimplementedSocialServiceServer) GetPostThread(context.Context, *GetPostThreadRequest) (*GetPostThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostThread not implemented")
}
func (UnimplementedSocialServiceServer) AddPostQualityScore(context.Context, *AddPostQualityScoreRequest) (*AddPostQualityScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPostQualityScore not implemented")
}
func (UnimplementedSocialServiceServer) ReactToPost(context.Context, *ReactToPostRequest) (*ReactToPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactToPost not implemented")
}
func (UnimplementedSocialServiceServer) ReactToComment(context.Context, *ReactToCommentRequest) (*ReactToCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactToComment not implemented")
}
func (UnimplementedSocialServiceServer) ReactToCommentReply(context.Context, *ReactToCommentReplyRequest) (*ReactToCommentReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactToCommentReply not implemented")
}
func (UnimplementedSocialServiceServer) GetBlogPostsByTag(context.Context, *GetBlogPostsByTagRequest) (*GetBlogPostsByTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogPostsByTag not implemented")
}
func (UnimplementedSocialServiceServer) GetCommunityBlogPosts(context.Context, *GetCommunityBlogPostsRequest) (*GetCommunityBlogPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityBlogPosts not implemented")
}
func (UnimplementedSocialServiceServer) GetUserFeed(context.Context, *GetUserFeedRequest) (*GetUserFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFeed not implemented")
}
func (UnimplementedSocialServiceServer) GetCommunityFeed(context.Context, *GetCommunityFeedRequest) (*GetCommunityFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityFeed not implemented")
}
func (UnimplementedSocialServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedSocialServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedSocialServiceServer) ReportComment(context.Context, *ReportCommentRequest) (*ReportCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportComment not implemented")
}
func (UnimplementedSocialServiceServer) AddCommentQualityScore(context.Context, *AddCommentQualityScoreRequest) (*AddCommentQualityScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommentQualityScore not implemented")
}
func (UnimplementedSocialServiceServer) CreateCommentReply(context.Context, *CreateCommentReplyRequest) (*CreateCommentReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentReply not implemented")
}
func (UnimplementedSocialServiceServer) DeleteCommentReply(context.Context, *DeleteCommentReplyRequest) (*DeleteCommentReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentReply not implemented")
}
func (UnimplementedSocialServiceServer) EditCommentReply(context.Context, *EditCommentReplyRequest) (*EditCommentReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCommentReply not implemented")
}
func (UnimplementedSocialServiceServer) GetCommentReplies(context.Context, *GetCommentRepliesRequest) (*GetCommentRepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentReplies not implemented")
}
func (UnimplementedSocialServiceServer) ReportCommentReply(context.Context, *ReportCommentReplyRequest) (*ReportCommentReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCommentReply not implemented")
}
func (UnimplementedSocialServiceServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedSocialServiceServer) GetTopicsOfCommunitiesUserFollows(context.Context, *GetTopicsOfCommunitiesUserFollowsRequest) (*GetTopicsOfCommunitiesUserFollowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicsOfCommunitiesUserFollows not implemented")
}
func (UnimplementedSocialServiceServer) GetPendingFollows(context.Context, *GetPendingFollowsRequest) (*GetPendingFollowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingFollows not implemented")
}
func (UnimplementedSocialServiceServer) GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedSocialServiceServer) GetAccountsFollowing(context.Context, *GetAccountsFollowingRequest) (*GetAccountsFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsFollowing not implemented")
}
func (UnimplementedSocialServiceServer) CreatePoll(context.Context, *CreatePollRequest) (*CreatePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoll not implemented")
}
func (UnimplementedSocialServiceServer) DeletePoll(context.Context, *DeletePollRequest) (*DeletePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePoll not implemented")
}
func (UnimplementedSocialServiceServer) GetPoll(context.Context, *GetPollRequest) (*GetPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoll not implemented")
}
func (UnimplementedSocialServiceServer) GetPolls(context.Context, *GetPollsRequest) (*GetPollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolls not implemented")
}
func (UnimplementedSocialServiceServer) RespondToPoll(context.Context, *RespondToPollRequest) (*RespondToPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondToPoll not implemented")
}
func (UnimplementedSocialServiceServer) CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (UnimplementedSocialServiceServer) DeleteNote(context.Context, *DeleteNoteRequest) (*DeleteNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedSocialServiceServer) EditNote(context.Context, *EditNoteRequest) (*EditNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditNote not implemented")
}
func (UnimplementedSocialServiceServer) CreatePublication(context.Context, *CreatePublicationRequest) (*CreatePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublication not implemented")
}
func (UnimplementedSocialServiceServer) GetPublication(context.Context, *GetPublicationRequest) (*GetPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublication not implemented")
}
func (UnimplementedSocialServiceServer) DeletePublication(context.Context, *DeletePublicationRequest) (*DeletePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublication not implemented")
}
func (UnimplementedSocialServiceServer) AddPublicationEditor(context.Context, *AddPublicationEditorRequest) (*AddPublicationEditorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPublicationEditor not implemented")
}
func (UnimplementedSocialServiceServer) DeletePublicationEditor(context.Context, *DeletePublicationEditorRequest) (*DeletePublicationEditorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublicationEditor not implemented")
}
func (UnimplementedSocialServiceServer) AddPostToPublication(context.Context, *AddPostToPublicationRequest) (*AddPostToPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPostToPublication not implemented")
}
func (UnimplementedSocialServiceServer) DeletePostFromPublication(context.Context, *DeletePostFromPublicationRequest) (*DeletePostFromPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostFromPublication not implemented")
}
func (UnimplementedSocialServiceServer) BookmarkPost(context.Context, *BookmarkPostRequest) (*BookmarkPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkPost not implemented")
}
func (UnimplementedSocialServiceServer) BookmarkPublication(context.Context, *BookmarkPublicationRequest) (*BookmarkPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkPublication not implemented")
}
func (UnimplementedSocialServiceServer) RemoveBookmarkedPost(context.Context, *RemoveBookmarkedPostRequest) (*RemoveBookmarkedPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBookmarkedPost not implemented")
}
func (UnimplementedSocialServiceServer) RemoveBookmarkedPublication(context.Context, *RemoveBookmarkedPublicationRequest) (*RemoveBookmarkedPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBookmarkedPublication not implemented")
}
func (UnimplementedSocialServiceServer) GetBookmarkedPosts(context.Context, *GetBookmarkedPostsRequest) (*GetBookmarkedPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookmarkedPosts not implemented")
}
func (UnimplementedSocialServiceServer) mustEmbedUnimplementedSocialServiceServer() {}

// UnsafeSocialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServiceServer will
// result in compilation errors.
type UnsafeSocialServiceServer interface {
	mustEmbedUnimplementedSocialServiceServer()
}

func RegisterSocialServiceServer(s grpc.ServiceRegistrar, srv SocialServiceServer) {
	s.RegisterService(&SocialService_ServiceDesc, srv)
}

func _SocialService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ReadynessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadynessCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ReadynessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ReadynessCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ReadynessCheck(ctx, req.(*ReadynessCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_EditUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).EditUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_EditUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).EditUserProfile(ctx, req.(*EditUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreateUserProfile(ctx, req.(*CreateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeleteUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeleteUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeleteUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeleteUserProfile(ctx, req.(*DeleteUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_BlockUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).BlockUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_BlockUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).BlockUserProfile(ctx, req.(*BlockUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_FollowProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).FollowProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_FollowProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).FollowProfile(ctx, req.(*FollowProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_AcceptFollowProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptFollowProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).AcceptFollowProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_AcceptFollowProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).AcceptFollowProfile(ctx, req.(*AcceptFollowProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetUserProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetUserProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetUserProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetUserProfiles(ctx, req.(*GetUserProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DiscoverProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DiscoverProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DiscoverProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DiscoverProfiles(ctx, req.(*DiscoverProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetCommunityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetCommunityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetCommunityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetCommunityProfile(ctx, req.(*GetCommunityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreateCommunityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreateCommunityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreateCommunityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreateCommunityProfile(ctx, req.(*CreateCommunityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetCommunitiesUserFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunitiesUserFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetCommunitiesUserFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetCommunitiesUserFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetCommunitiesUserFollows(ctx, req.(*GetCommunitiesUserFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_FollowCommunityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowCommunityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).FollowCommunityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_FollowCommunityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).FollowCommunityProfile(ctx, req.(*FollowCommunityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetCommunityProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetCommunityProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetCommunityProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetCommunityProfiles(ctx, req.(*GetCommunityProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeleteCommunityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommunityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeleteCommunityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeleteCommunityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeleteCommunityProfile(ctx, req.(*DeleteCommunityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_EditCommunityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommunityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).EditCommunityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_EditCommunityProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).EditCommunityProfile(ctx, req.(*EditCommunityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetPostsByTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsByTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetPostsByTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetPostsByTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetPostsByTopic(ctx, req.(*GetPostsByTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_EditPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).EditPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_EditPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).EditPost(ctx, req.(*EditPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ReportPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ReportPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ReportPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ReportPost(ctx, req.(*ReportPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_SharePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).SharePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_SharePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).SharePost(ctx, req.(*SharePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_AddPostToThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostToThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).AddPostToThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_AddPostToThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).AddPostToThread(ctx, req.(*AddPostToThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_RemovePostFromThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePostFromThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).RemovePostFromThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_RemovePostFromThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).RemovePostFromThread(ctx, req.(*RemovePostFromThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetPostThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetPostThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetPostThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetPostThread(ctx, req.(*GetPostThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_AddPostQualityScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostQualityScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).AddPostQualityScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_AddPostQualityScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).AddPostQualityScore(ctx, req.(*AddPostQualityScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ReactToPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactToPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ReactToPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ReactToPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ReactToPost(ctx, req.(*ReactToPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ReactToComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactToCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ReactToComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ReactToComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ReactToComment(ctx, req.(*ReactToCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ReactToCommentReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactToCommentReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ReactToCommentReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ReactToCommentReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ReactToCommentReply(ctx, req.(*ReactToCommentReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetBlogPostsByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogPostsByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetBlogPostsByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetBlogPostsByTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetBlogPostsByTag(ctx, req.(*GetBlogPostsByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetCommunityBlogPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityBlogPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetCommunityBlogPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetCommunityBlogPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetCommunityBlogPosts(ctx, req.(*GetCommunityBlogPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetUserFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetUserFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetUserFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetUserFeed(ctx, req.(*GetUserFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetCommunityFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetCommunityFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetCommunityFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetCommunityFeed(ctx, req.(*GetCommunityFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ReportComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ReportComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ReportComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ReportComment(ctx, req.(*ReportCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_AddCommentQualityScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentQualityScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).AddCommentQualityScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_AddCommentQualityScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).AddCommentQualityScore(ctx, req.(*AddCommentQualityScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreateCommentReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreateCommentReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreateCommentReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreateCommentReply(ctx, req.(*CreateCommentReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeleteCommentReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeleteCommentReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeleteCommentReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeleteCommentReply(ctx, req.(*DeleteCommentReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_EditCommentReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).EditCommentReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_EditCommentReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).EditCommentReply(ctx, req.(*EditCommentReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetCommentReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetCommentReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetCommentReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetCommentReplies(ctx, req.(*GetCommentRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ReportCommentReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCommentReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ReportCommentReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ReportCommentReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ReportCommentReply(ctx, req.(*ReportCommentReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetTopicsOfCommunitiesUserFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicsOfCommunitiesUserFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetTopicsOfCommunitiesUserFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetTopicsOfCommunitiesUserFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetTopicsOfCommunitiesUserFollows(ctx, req.(*GetTopicsOfCommunitiesUserFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetPendingFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetPendingFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetPendingFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetPendingFollows(ctx, req.(*GetPendingFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetFollowers(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetAccountsFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetAccountsFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetAccountsFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetAccountsFollowing(ctx, req.(*GetAccountsFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreatePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreatePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreatePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreatePoll(ctx, req.(*CreatePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeletePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeletePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeletePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeletePoll(ctx, req.(*DeletePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetPoll(ctx, req.(*GetPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetPolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetPolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetPolls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetPolls(ctx, req.(*GetPollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_RespondToPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondToPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).RespondToPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_RespondToPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).RespondToPoll(ctx, req.(*RespondToPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreateNote(ctx, req.(*CreateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeleteNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeleteNote(ctx, req.(*DeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_EditNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).EditNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_EditNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).EditNote(ctx, req.(*EditNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreatePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreatePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreatePublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreatePublication(ctx, req.(*CreatePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetPublication(ctx, req.(*GetPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeletePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeletePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeletePublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeletePublication(ctx, req.(*DeletePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_AddPublicationEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPublicationEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).AddPublicationEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_AddPublicationEditor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).AddPublicationEditor(ctx, req.(*AddPublicationEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeletePublicationEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublicationEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeletePublicationEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeletePublicationEditor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeletePublicationEditor(ctx, req.(*DeletePublicationEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_AddPostToPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostToPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).AddPostToPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_AddPostToPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).AddPostToPublication(ctx, req.(*AddPostToPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeletePostFromPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostFromPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeletePostFromPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeletePostFromPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeletePostFromPublication(ctx, req.(*DeletePostFromPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_BookmarkPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).BookmarkPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_BookmarkPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).BookmarkPost(ctx, req.(*BookmarkPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_BookmarkPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).BookmarkPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_BookmarkPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).BookmarkPublication(ctx, req.(*BookmarkPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_RemoveBookmarkedPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBookmarkedPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).RemoveBookmarkedPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_RemoveBookmarkedPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).RemoveBookmarkedPost(ctx, req.(*RemoveBookmarkedPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_RemoveBookmarkedPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBookmarkedPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).RemoveBookmarkedPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_RemoveBookmarkedPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).RemoveBookmarkedPublication(ctx, req.(*RemoveBookmarkedPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetBookmarkedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookmarkedPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetBookmarkedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetBookmarkedPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetBookmarkedPosts(ctx, req.(*GetBookmarkedPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialService_ServiceDesc is the grpc.ServiceDesc for SocialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "social_service.v2.SocialService",
	HandlerType: (*SocialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _SocialService_HealthCheck_Handler,
		},
		{
			MethodName: "ReadynessCheck",
			Handler:    _SocialService_ReadynessCheck_Handler,
		},
		{
			MethodName: "EditUserProfile",
			Handler:    _SocialService_EditUserProfile_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _SocialService_GetUserProfile_Handler,
		},
		{
			MethodName: "CreateUserProfile",
			Handler:    _SocialService_CreateUserProfile_Handler,
		},
		{
			MethodName: "DeleteUserProfile",
			Handler:    _SocialService_DeleteUserProfile_Handler,
		},
		{
			MethodName: "BlockUserProfile",
			Handler:    _SocialService_BlockUserProfile_Handler,
		},
		{
			MethodName: "FollowProfile",
			Handler:    _SocialService_FollowProfile_Handler,
		},
		{
			MethodName: "AcceptFollowProfile",
			Handler:    _SocialService_AcceptFollowProfile_Handler,
		},
		{
			MethodName: "GetUserProfiles",
			Handler:    _SocialService_GetUserProfiles_Handler,
		},
		{
			MethodName: "DiscoverProfiles",
			Handler:    _SocialService_DiscoverProfiles_Handler,
		},
		{
			MethodName: "GetCommunityProfile",
			Handler:    _SocialService_GetCommunityProfile_Handler,
		},
		{
			MethodName: "CreateCommunityProfile",
			Handler:    _SocialService_CreateCommunityProfile_Handler,
		},
		{
			MethodName: "GetCommunitiesUserFollows",
			Handler:    _SocialService_GetCommunitiesUserFollows_Handler,
		},
		{
			MethodName: "FollowCommunityProfile",
			Handler:    _SocialService_FollowCommunityProfile_Handler,
		},
		{
			MethodName: "GetCommunityProfiles",
			Handler:    _SocialService_GetCommunityProfiles_Handler,
		},
		{
			MethodName: "DeleteCommunityProfile",
			Handler:    _SocialService_DeleteCommunityProfile_Handler,
		},
		{
			MethodName: "EditCommunityProfile",
			Handler:    _SocialService_EditCommunityProfile_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _SocialService_CreatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _SocialService_DeletePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _SocialService_GetPost_Handler,
		},
		{
			MethodName: "GetPostsByTopic",
			Handler:    _SocialService_GetPostsByTopic_Handler,
		},
		{
			MethodName: "EditPost",
			Handler:    _SocialService_EditPost_Handler,
		},
		{
			MethodName: "ReportPost",
			Handler:    _SocialService_ReportPost_Handler,
		},
		{
			MethodName: "SharePost",
			Handler:    _SocialService_SharePost_Handler,
		},
		{
			MethodName: "AddPostToThread",
			Handler:    _SocialService_AddPostToThread_Handler,
		},
		{
			MethodName: "RemovePostFromThread",
			Handler:    _SocialService_RemovePostFromThread_Handler,
		},
		{
			MethodName: "GetPostThread",
			Handler:    _SocialService_GetPostThread_Handler,
		},
		{
			MethodName: "AddPostQualityScore",
			Handler:    _SocialService_AddPostQualityScore_Handler,
		},
		{
			MethodName: "ReactToPost",
			Handler:    _SocialService_ReactToPost_Handler,
		},
		{
			MethodName: "ReactToComment",
			Handler:    _SocialService_ReactToComment_Handler,
		},
		{
			MethodName: "ReactToCommentReply",
			Handler:    _SocialService_ReactToCommentReply_Handler,
		},
		{
			MethodName: "GetBlogPostsByTag",
			Handler:    _SocialService_GetBlogPostsByTag_Handler,
		},
		{
			MethodName: "GetCommunityBlogPosts",
			Handler:    _SocialService_GetCommunityBlogPosts_Handler,
		},
		{
			MethodName: "GetUserFeed",
			Handler:    _SocialService_GetUserFeed_Handler,
		},
		{
			MethodName: "GetCommunityFeed",
			Handler:    _SocialService_GetCommunityFeed_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _SocialService_CreateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _SocialService_DeleteComment_Handler,
		},
		{
			MethodName: "ReportComment",
			Handler:    _SocialService_ReportComment_Handler,
		},
		{
			MethodName: "AddCommentQualityScore",
			Handler:    _SocialService_AddCommentQualityScore_Handler,
		},
		{
			MethodName: "CreateCommentReply",
			Handler:    _SocialService_CreateCommentReply_Handler,
		},
		{
			MethodName: "DeleteCommentReply",
			Handler:    _SocialService_DeleteCommentReply_Handler,
		},
		{
			MethodName: "EditCommentReply",
			Handler:    _SocialService_EditCommentReply_Handler,
		},
		{
			MethodName: "GetCommentReplies",
			Handler:    _SocialService_GetCommentReplies_Handler,
		},
		{
			MethodName: "ReportCommentReply",
			Handler:    _SocialService_ReportCommentReply_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _SocialService_CreateTopic_Handler,
		},
		{
			MethodName: "GetTopicsOfCommunitiesUserFollows",
			Handler:    _SocialService_GetTopicsOfCommunitiesUserFollows_Handler,
		},
		{
			MethodName: "GetPendingFollows",
			Handler:    _SocialService_GetPendingFollows_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _SocialService_GetFollowers_Handler,
		},
		{
			MethodName: "GetAccountsFollowing",
			Handler:    _SocialService_GetAccountsFollowing_Handler,
		},
		{
			MethodName: "CreatePoll",
			Handler:    _SocialService_CreatePoll_Handler,
		},
		{
			MethodName: "DeletePoll",
			Handler:    _SocialService_DeletePoll_Handler,
		},
		{
			MethodName: "GetPoll",
			Handler:    _SocialService_GetPoll_Handler,
		},
		{
			MethodName: "GetPolls",
			Handler:    _SocialService_GetPolls_Handler,
		},
		{
			MethodName: "RespondToPoll",
			Handler:    _SocialService_RespondToPoll_Handler,
		},
		{
			MethodName: "CreateNote",
			Handler:    _SocialService_CreateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _SocialService_DeleteNote_Handler,
		},
		{
			MethodName: "EditNote",
			Handler:    _SocialService_EditNote_Handler,
		},
		{
			MethodName: "CreatePublication",
			Handler:    _SocialService_CreatePublication_Handler,
		},
		{
			MethodName: "GetPublication",
			Handler:    _SocialService_GetPublication_Handler,
		},
		{
			MethodName: "DeletePublication",
			Handler:    _SocialService_DeletePublication_Handler,
		},
		{
			MethodName: "AddPublicationEditor",
			Handler:    _SocialService_AddPublicationEditor_Handler,
		},
		{
			MethodName: "DeletePublicationEditor",
			Handler:    _SocialService_DeletePublicationEditor_Handler,
		},
		{
			MethodName: "AddPostToPublication",
			Handler:    _SocialService_AddPostToPublication_Handler,
		},
		{
			MethodName: "DeletePostFromPublication",
			Handler:    _SocialService_DeletePostFromPublication_Handler,
		},
		{
			MethodName: "BookmarkPost",
			Handler:    _SocialService_BookmarkPost_Handler,
		},
		{
			MethodName: "BookmarkPublication",
			Handler:    _SocialService_BookmarkPublication_Handler,
		},
		{
			MethodName: "RemoveBookmarkedPost",
			Handler:    _SocialService_RemoveBookmarkedPost_Handler,
		},
		{
			MethodName: "RemoveBookmarkedPublication",
			Handler:    _SocialService_RemoveBookmarkedPublication_Handler,
		},
		{
			MethodName: "GetBookmarkedPosts",
			Handler:    _SocialService_GetBookmarkedPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social_service/v2/service.proto",
}
