// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: social_service/v2/message.proto

package social_servicev2

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// virtual profile type of the user account
type VirtualProfileType int32

const (
	VirtualProfileType_VIRTUAL_PROFILE_TYPE_UNSPECIFIED VirtualProfileType = 0
	VirtualProfileType_VIRTUAL_PROFILE_TYPE_USER        VirtualProfileType = 1
	VirtualProfileType_VIRTUAL_PROFILE_TYPE_BUSINESS    VirtualProfileType = 2
)

// Enum value maps for VirtualProfileType.
var (
	VirtualProfileType_name = map[int32]string{
		0: "VIRTUAL_PROFILE_TYPE_UNSPECIFIED",
		1: "VIRTUAL_PROFILE_TYPE_USER",
		2: "VIRTUAL_PROFILE_TYPE_BUSINESS",
	}
	VirtualProfileType_value = map[string]int32{
		"VIRTUAL_PROFILE_TYPE_UNSPECIFIED": 0,
		"VIRTUAL_PROFILE_TYPE_USER":        1,
		"VIRTUAL_PROFILE_TYPE_BUSINESS":    2,
	}
)

func (x VirtualProfileType) Enum() *VirtualProfileType {
	p := new(VirtualProfileType)
	*p = x
	return p
}

func (x VirtualProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_message_proto_enumTypes[0].Descriptor()
}

func (VirtualProfileType) Type() protoreflect.EnumType {
	return &file_social_service_v2_message_proto_enumTypes[0]
}

func (x VirtualProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualProfileType.Descriptor instead.
func (VirtualProfileType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{0}
}

type PublicationType int32

const (
	PublicationType_PUBLICATION_TYPE_UNSPECIFIED PublicationType = 0
	// a publication with a fixed publication staff that posts stories around a specific topic
	PublicationType_PUBLICATION_TYPE_MAGAZINE PublicationType = 1
	// a publication that accepts stories published around simfiny
	PublicationType_PUBLICATION_TYPE_PLATFORM PublicationType = 2
	// A community blog, a publication that is created specifically to share subset (community) news
	PublicationType_PUBLICATION_TYPE_BLOG PublicationType = 3
	// A collection of individual stories by a set of authors that are part of a whole
	PublicationType_PUBLICATION_TYPE_SUBJECTS PublicationType = 4
)

// Enum value maps for PublicationType.
var (
	PublicationType_name = map[int32]string{
		0: "PUBLICATION_TYPE_UNSPECIFIED",
		1: "PUBLICATION_TYPE_MAGAZINE",
		2: "PUBLICATION_TYPE_PLATFORM",
		3: "PUBLICATION_TYPE_BLOG",
		4: "PUBLICATION_TYPE_SUBJECTS",
	}
	PublicationType_value = map[string]int32{
		"PUBLICATION_TYPE_UNSPECIFIED": 0,
		"PUBLICATION_TYPE_MAGAZINE":    1,
		"PUBLICATION_TYPE_PLATFORM":    2,
		"PUBLICATION_TYPE_BLOG":        3,
		"PUBLICATION_TYPE_SUBJECTS":    4,
	}
)

func (x PublicationType) Enum() *PublicationType {
	p := new(PublicationType)
	*p = x
	return p
}

func (x PublicationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicationType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_message_proto_enumTypes[1].Descriptor()
}

func (PublicationType) Type() protoreflect.EnumType {
	return &file_social_service_v2_message_proto_enumTypes[1]
}

func (x PublicationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicationType.Descriptor instead.
func (PublicationType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{1}
}

type Follower_TargetFollowerProfileType int32

const (
	Follower_TARGET_FOLLOWER_PROFILE_TYPE_UNSPECIFIED       Follower_TargetFollowerProfileType = 0
	Follower_TARGET_FOLLOWER_PROFILE_TYPE_COMMUNITY_PROFILE Follower_TargetFollowerProfileType = 1
	Follower_TARGET_FOLLOWER_PROFILE_TYPE_USER_PROFILE      Follower_TargetFollowerProfileType = 2
)

// Enum value maps for Follower_TargetFollowerProfileType.
var (
	Follower_TargetFollowerProfileType_name = map[int32]string{
		0: "TARGET_FOLLOWER_PROFILE_TYPE_UNSPECIFIED",
		1: "TARGET_FOLLOWER_PROFILE_TYPE_COMMUNITY_PROFILE",
		2: "TARGET_FOLLOWER_PROFILE_TYPE_USER_PROFILE",
	}
	Follower_TargetFollowerProfileType_value = map[string]int32{
		"TARGET_FOLLOWER_PROFILE_TYPE_UNSPECIFIED":       0,
		"TARGET_FOLLOWER_PROFILE_TYPE_COMMUNITY_PROFILE": 1,
		"TARGET_FOLLOWER_PROFILE_TYPE_USER_PROFILE":      2,
	}
)

func (x Follower_TargetFollowerProfileType) Enum() *Follower_TargetFollowerProfileType {
	p := new(Follower_TargetFollowerProfileType)
	*p = x
	return p
}

func (x Follower_TargetFollowerProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Follower_TargetFollowerProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_message_proto_enumTypes[2].Descriptor()
}

func (Follower_TargetFollowerProfileType) Type() protoreflect.EnumType {
	return &file_social_service_v2_message_proto_enumTypes[2]
}

func (x Follower_TargetFollowerProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Follower_TargetFollowerProfileType.Descriptor instead.
func (Follower_TargetFollowerProfileType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{3, 0}
}

type Blocked_BlockedProfileType int32

const (
	Blocked_BLOCKED_PROFILE_TYPE_UNSPECIFIED       Blocked_BlockedProfileType = 0
	Blocked_BLOCKED_PROFILE_TYPE_COMMUNITY_PROFILE Blocked_BlockedProfileType = 1
	Blocked_BLOCKED_PROFILE_TYPE_USER_PROFILE      Blocked_BlockedProfileType = 2
)

// Enum value maps for Blocked_BlockedProfileType.
var (
	Blocked_BlockedProfileType_name = map[int32]string{
		0: "BLOCKED_PROFILE_TYPE_UNSPECIFIED",
		1: "BLOCKED_PROFILE_TYPE_COMMUNITY_PROFILE",
		2: "BLOCKED_PROFILE_TYPE_USER_PROFILE",
	}
	Blocked_BlockedProfileType_value = map[string]int32{
		"BLOCKED_PROFILE_TYPE_UNSPECIFIED":       0,
		"BLOCKED_PROFILE_TYPE_COMMUNITY_PROFILE": 1,
		"BLOCKED_PROFILE_TYPE_USER_PROFILE":      2,
	}
)

func (x Blocked_BlockedProfileType) Enum() *Blocked_BlockedProfileType {
	p := new(Blocked_BlockedProfileType)
	*p = x
	return p
}

func (x Blocked_BlockedProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Blocked_BlockedProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_message_proto_enumTypes[3].Descriptor()
}

func (Blocked_BlockedProfileType) Type() protoreflect.EnumType {
	return &file_social_service_v2_message_proto_enumTypes[3]
}

func (x Blocked_BlockedProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Blocked_BlockedProfileType.Descriptor instead.
func (Blocked_BlockedProfileType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{6, 0}
}

// VirtualProfile: Every user/community has a virtual profile account id
// associated with it. A virtual profile abstracts a grouping of separate social
// accounts a user can have (useful as we scale the types of users we support on
// the platform - finfluencers, .. etc). All child account types withhold a
// mapping to a parent virtual profile and in the relational world, this is
// enforced through primary keys.
//
// Example: A user may have 1 or 2 types of social profiles (finfluencers |
// regular | community). A virtual profile encompasses all such profiles and
// associates such to user records. (in our case N = 2)
type VirtualProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// virtual account id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// UserID id from the context of the user service (UserID is relegated across
	// all services and is maintained as the source of truth from an indentity
	// perspective)
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// ID of the user profile tied to this virtual account
	User *UserProfile `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	// ID of the community profile tied to this virtual account
	Communities []*CommunityProfile `protobuf:"bytes,8,rep,name=communities,proto3" json:"communities,omitempty"`
	// Active defines wether the account is a/ctive or not
	Activated   bool               `protobuf:"varint,9,opt,name=activated,proto3" json:"activated,omitempty"`
	ProfileType VirtualProfileType `protobuf:"varint,10,opt,name=profile_type,json=profileType,proto3,enum=social_service.v2.VirtualProfileType" json:"profile_type,omitempty"`
}

func (x *VirtualProfile) Reset() {
	*x = VirtualProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualProfile) ProtoMessage() {}

func (x *VirtualProfile) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualProfile.ProtoReflect.Descriptor instead.
func (*VirtualProfile) Descriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{0}
}

func (x *VirtualProfile) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VirtualProfile) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VirtualProfile) GetUser() *UserProfile {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *VirtualProfile) GetCommunities() []*CommunityProfile {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *VirtualProfile) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *VirtualProfile) GetProfileType() VirtualProfileType {
	if x != nil {
		return x.ProfileType
	}
	return VirtualProfileType_VIRTUAL_PROFILE_TYPE_UNSPECIFIED
}

// UserProfile: The profile object tied to a given user
type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User profile ID
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tags are interests
	Tags []*UserTags `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	// Profile name is the name tied to the user profile
	// user name must be at least 5 characters long
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Private defines wether only approved followers can see what this profile
	// posts
	Private bool `protobuf:"varint,4,opt,name=private,proto3" json:"private,omitempty"`
	// Followers outlines the number of followers this user profile has
	Followers int64 `protobuf:"varint,5,opt,name=followers,proto3" json:"followers,omitempty"`
	// Number of people account is following
	Following int64 `protobuf:"varint,9,opt,name=following,proto3" json:"following,omitempty"`
	// Notification timeline Id. Notification for anything a user/group is
	// following
	NotificationFeedTimelineId string `protobuf:"bytes,10,opt,name=notification_feed_timeline_id,json=notificationFeedTimelineId,proto3" json:"notification_feed_timeline_id,omitempty"`
	// Personal timeline ID Has activities for a user that can be followed
	PersonalFeedTimelineId string `protobuf:"bytes,11,opt,name=personal_feed_timeline_id,json=personalFeedTimelineId,proto3" json:"personal_feed_timeline_id,omitempty"`
	// Newsfeed timeline ID Displays all followed and group activities the user
	// follows
	NewsFeedTimelineId string `protobuf:"bytes,12,opt,name=news_feed_timeline_id,json=newsFeedTimelineId,proto3" json:"news_feed_timeline_id,omitempty"`
	// ProfileImageUrl witholds the url of a given profile image
	ProfileImageUrl string `protobuf:"bytes,13,opt,name=profile_image_url,json=profileImageUrl,proto3" json:"profile_image_url,omitempty"`
	// all the bookmarked pieces of content on the platform
	Bookmarks *Bookmark `protobuf:"bytes,14,opt,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	// The id of the algolia record referencing this user
	AlgoliaId string `protobuf:"bytes,15,opt,name=algolia_id,json=algoliaId,proto3" json:"algolia_id,omitempty"`
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{1}
}

func (x *UserProfile) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserProfile) GetTags() []*UserTags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UserProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserProfile) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *UserProfile) GetFollowers() int64 {
	if x != nil {
		return x.Followers
	}
	return 0
}

func (x *UserProfile) GetFollowing() int64 {
	if x != nil {
		return x.Following
	}
	return 0
}

func (x *UserProfile) GetNotificationFeedTimelineId() string {
	if x != nil {
		return x.NotificationFeedTimelineId
	}
	return ""
}

func (x *UserProfile) GetPersonalFeedTimelineId() string {
	if x != nil {
		return x.PersonalFeedTimelineId
	}
	return ""
}

func (x *UserProfile) GetNewsFeedTimelineId() string {
	if x != nil {
		return x.NewsFeedTimelineId
	}
	return ""
}

func (x *UserProfile) GetProfileImageUrl() string {
	if x != nil {
		return x.ProfileImageUrl
	}
	return ""
}

func (x *UserProfile) GetBookmarks() *Bookmark {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

func (x *UserProfile) GetAlgoliaId() string {
	if x != nil {
		return x.AlgoliaId
	}
	return ""
}

// CommunityProfile: The profile object tied to a given community
type CommunityProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Community profile ID
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Community name is the name tied to the community profile
	// community name must be at least 5 characters long
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Desscription defines additional info about the community
	// community description must be at least 5 characters long
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Private defines wether only approved followers can see what this profile
	// posts
	Private bool `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`
	// Visible defines wether just about anyone can find this group
	Visible bool `protobuf:"varint,6,opt,name=visible,proto3" json:"visible,omitempty"`
	// Followers outlines the number of followers this user profile has
	Followers int64 `protobuf:"varint,8,opt,name=followers,proto3" json:"followers,omitempty"`
	// Defines rules community members must abide by
	// community rules must be at least 5 characters long
	CommunityRules string `protobuf:"bytes,9,opt,name=community_rules,json=communityRules,proto3" json:"community_rules,omitempty"`
	// Defines topics assoociated with the community of interest
	// must create at least 1 topic
	Topics []*Topic `protobuf:"bytes,10,rep,name=topics,proto3" json:"topics,omitempty"`
	// Notification timeline Id. Notification for anything a user/group is
	// following
	NotificationFeedTimelineId string `protobuf:"bytes,11,opt,name=notification_feed_timeline_id,json=notificationFeedTimelineId,proto3" json:"notification_feed_timeline_id,omitempty"`
	// Personal timeline ID Has activities for a user that can be followed
	PersonalFeedTimelineId string `protobuf:"bytes,12,opt,name=personal_feed_timeline_id,json=personalFeedTimelineId,proto3" json:"personal_feed_timeline_id,omitempty"`
	// Newsfeed timeline ID Displays all followed and group activities the user
	// follows
	NewsFeedTimelineId string `protobuf:"bytes,13,opt,name=news_feed_timeline_id,json=newsFeedTimelineId,proto3" json:"news_feed_timeline_id,omitempty"`
	// ProfileImageUrl witholds the url of a given profile image
	ProfileImageUrl string `protobuf:"bytes,14,opt,name=profile_image_url,json=profileImageUrl,proto3" json:"profile_image_url,omitempty"`
	// The id of the algolia record referencing this community
	AlgoliaId string `protobuf:"bytes,15,opt,name=algolia_id,json=algoliaId,proto3" json:"algolia_id,omitempty"`
}

func (x *CommunityProfile) Reset() {
	*x = CommunityProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunityProfile) ProtoMessage() {}

func (x *CommunityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunityProfile.ProtoReflect.Descriptor instead.
func (*CommunityProfile) Descriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{2}
}

func (x *CommunityProfile) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommunityProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommunityProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CommunityProfile) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *CommunityProfile) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *CommunityProfile) GetFollowers() int64 {
	if x != nil {
		return x.Followers
	}
	return 0
}

func (x *CommunityProfile) GetCommunityRules() string {
	if x != nil {
		return x.CommunityRules
	}
	return ""
}

func (x *CommunityProfile) GetTopics() []*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *CommunityProfile) GetNotificationFeedTimelineId() string {
	if x != nil {
		return x.NotificationFeedTimelineId
	}
	return ""
}

func (x *CommunityProfile) GetPersonalFeedTimelineId() string {
	if x != nil {
		return x.PersonalFeedTimelineId
	}
	return ""
}

func (x *CommunityProfile) GetNewsFeedTimelineId() string {
	if x != nil {
		return x.NewsFeedTimelineId
	}
	return ""
}

func (x *CommunityProfile) GetProfileImageUrl() string {
	if x != nil {
		return x.ProfileImageUrl
	}
	return ""
}

func (x *CommunityProfile) GetAlgoliaId() string {
	if x != nil {
		return x.AlgoliaId
	}
	return ""
}

// Follower: The follower record establishing a follow relationship between 2
// profiles
type Follower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the follower
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the id of the profile being followed
	ProfileFollowedId uint64 `protobuf:"varint,2,opt,name=profile_followed_id,json=profileFollowedId,proto3" json:"profile_followed_id,omitempty"`
	// the id of the profile following the profile being followed
	ProfileFollowingId uint64 `protobuf:"varint,3,opt,name=profile_following_id,json=profileFollowingId,proto3" json:"profile_following_id,omitempty"`
	// whther or not the follow request has been approved
	RequestApproved bool `protobuf:"varint,4,opt,name=request_approved,json=requestApproved,proto3" json:"request_approved,omitempty"`
	// when the follow request was created
	CreatedAt string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// when the follow request was approved
	ApprovedAt string `protobuf:"bytes,6,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	// the type of profile being followed
	TargetFollowerType Follower_TargetFollowerProfileType `protobuf:"varint,7,opt,name=target_follower_type,json=targetFollowerType,proto3,enum=social_service.v2.Follower_TargetFollowerProfileType" json:"target_follower_type,omitempty"`
}

func (x *Follower) Reset() {
	*x = Follower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Follower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Follower) ProtoMessage() {}

func (x *Follower) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Follower.ProtoReflect.Descriptor instead.
func (*Follower) Descriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{3}
}

func (x *Follower) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Follower) GetProfileFollowedId() uint64 {
	if x != nil {
		return x.ProfileFollowedId
	}
	return 0
}

func (x *Follower) GetProfileFollowingId() uint64 {
	if x != nil {
		return x.ProfileFollowingId
	}
	return 0
}

func (x *Follower) GetRequestApproved() bool {
	if x != nil {
		return x.RequestApproved
	}
	return false
}

func (x *Follower) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Follower) GetApprovedAt() string {
	if x != nil {
		return x.ApprovedAt
	}
	return ""
}

func (x *Follower) GetTargetFollowerType() Follower_TargetFollowerProfileType {
	if x != nil {
		return x.TargetFollowerType
	}
	return Follower_TARGET_FOLLOWER_PROFILE_TYPE_UNSPECIFIED
}

// Tags: tags that can be associated to a record
type UserTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the tag record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the name of the tag ... tag must be at least 5 characters long
	TagName string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	// the description of the tag ... tag must be at least 5 characters long
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UserTags) Reset() {
	*x = UserTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTags) ProtoMessage() {}

func (x *UserTags) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTags.ProtoReflect.Descriptor instead.
func (*UserTags) Descriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{4}
}

func (x *UserTags) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserTags) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *UserTags) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Topic: topic that can be associated to a record
type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the topic
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the name of the topic
	TopicName string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// the description of the topic
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// the url of the topic image
	// the image url is required
	ImageUrl string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{5}
}

func (x *Topic) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Topic) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *Topic) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Topic) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

// Blocked: blocked relationship between 2 profiles
type Blocked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the blocked record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the id of the profile being blocked
	ProfileBlockedId uint64 `protobuf:"varint,2,opt,name=profile_blocked_id,json=profileBlockedId,proto3" json:"profile_blocked_id,omitempty"`
	// the id of the profile blocking the profile being blocked
	ProfileBlockingId uint64 `protobuf:"varint,3,opt,name=profile_blocking_id,json=profileBlockingId,proto3" json:"profile_blocking_id,omitempty"`
	// when the block request was created
	CreatedAt string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// the type of profile being blocked
	ProfileBlockedType Blocked_BlockedProfileType `protobuf:"varint,5,opt,name=profile_blocked_type,json=profileBlockedType,proto3,enum=social_service.v2.Blocked_BlockedProfileType" json:"profile_blocked_type,omitempty"`
	// the type of profile blocking the profile being blocked
	ProfileBlockingType Blocked_BlockedProfileType `protobuf:"varint,6,opt,name=profile_blocking_type,json=profileBlockingType,proto3,enum=social_service.v2.Blocked_BlockedProfileType" json:"profile_blocking_type,omitempty"`
}

func (x *Blocked) Reset() {
	*x = Blocked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blocked) ProtoMessage() {}

func (x *Blocked) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blocked.ProtoReflect.Descriptor instead.
func (*Blocked) Descriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{6}
}

func (x *Blocked) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Blocked) GetProfileBlockedId() uint64 {
	if x != nil {
		return x.ProfileBlockedId
	}
	return 0
}

func (x *Blocked) GetProfileBlockingId() uint64 {
	if x != nil {
		return x.ProfileBlockingId
	}
	return 0
}

func (x *Blocked) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Blocked) GetProfileBlockedType() Blocked_BlockedProfileType {
	if x != nil {
		return x.ProfileBlockedType
	}
	return Blocked_BLOCKED_PROFILE_TYPE_UNSPECIFIED
}

func (x *Blocked) GetProfileBlockingType() Blocked_BlockedProfileType {
	if x != nil {
		return x.ProfileBlockingType
	}
	return Blocked_BLOCKED_PROFILE_TYPE_UNSPECIFIED
}

type Bookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the blocked record
	Id           uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PostIds      []string       `protobuf:"bytes,2,rep,name=post_ids,json=postIds,proto3" json:"post_ids,omitempty"`
	Publications []*Publication `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
}

func (x *Bookmark) Reset() {
	*x = Bookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookmark) ProtoMessage() {}

func (x *Bookmark) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookmark.ProtoReflect.Descriptor instead.
func (*Bookmark) Descriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{7}
}

func (x *Bookmark) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bookmark) GetPostIds() []string {
	if x != nil {
		return x.PostIds
	}
	return nil
}

func (x *Bookmark) GetPublications() []*Publication {
	if x != nil {
		return x.Publications
	}
	return nil
}

// A Publication is a collections of stories based around a common theme. Anyone can create them
// As the creator of a publication, you're an editor by default, which means you have the ability to
// a) add writers to your publication,
// b) edit and publish the stories that are submitted by your writers, and
// c) review the metrics for all of the stories that are part of your publication.
// As the publication's creator, you'll also have the ability
// to appoint new editors (so they can do all of that stuff I just mentioned)
//
// Use Case
// - An online magazine, a publication with a fixed publication staff that posts stories around a specific topic
// - A community publication, a publication that accepts stories published around Medium
// - A company blog, a publication that is created specifically to share company news
// - A collection of individual stories by a single author that are parts of a larger whole
type Publication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// stories are post that can be submitted only by the publication editors
	PostIds                    []string        `protobuf:"bytes,2,rep,name=post_ids,json=postIds,proto3" json:"post_ids,omitempty"`
	Admin                      *UserProfile    `protobuf:"bytes,3,opt,name=admin,proto3" json:"admin,omitempty"`
	AdminSimfinyPlatformUserId uint64          `protobuf:"varint,4,opt,name=admin_simfiny_platform_user_id,json=adminSimfinyPlatformUserId,proto3" json:"admin_simfiny_platform_user_id,omitempty"`
	Tags                       []string        `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Editors                    []*UserProfile  `protobuf:"bytes,7,rep,name=editors,proto3" json:"editors,omitempty"`
	Subjects                   []string        `protobuf:"bytes,8,rep,name=subjects,proto3" json:"subjects,omitempty"`
	Description                string          `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt                  string          `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Type                       PublicationType `protobuf:"varint,11,opt,name=type,proto3,enum=social_service.v2.PublicationType" json:"type,omitempty"`
	PublicationName            string          `protobuf:"bytes,13,opt,name=publication_name,json=publicationName,proto3" json:"publication_name,omitempty"`
}

func (x *Publication) Reset() {
	*x = Publication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_social_service_v2_message_proto_rawDescGZIP(), []int{8}
}

func (x *Publication) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Publication) GetPostIds() []string {
	if x != nil {
		return x.PostIds
	}
	return nil
}

func (x *Publication) GetAdmin() *UserProfile {
	if x != nil {
		return x.Admin
	}
	return nil
}

func (x *Publication) GetAdminSimfinyPlatformUserId() uint64 {
	if x != nil {
		return x.AdminSimfinyPlatformUserId
	}
	return 0
}

func (x *Publication) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Publication) GetEditors() []*UserProfile {
	if x != nil {
		return x.Editors
	}
	return nil
}

func (x *Publication) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *Publication) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Publication) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Publication) GetType() PublicationType {
	if x != nil {
		return x.Type
	}
	return PublicationType_PUBLICATION_TYPE_UNSPECIFIED
}

func (x *Publication) GetPublicationName() string {
	if x != nil {
		return x.PublicationName
	}
	return ""
}

var File_social_service_v2_message_proto protoreflect.FileDescriptor

var file_social_service_v2_message_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcc, 0x02, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00,
	0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x52, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xba, 0xb9, 0x19, 0x04,
	0x2a, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x48, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xb5, 0x06, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67,
	0x73, 0x42, 0x13, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0xba, 0xb9,
	0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x0d, 0x4a,
	0x0b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x22, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x20, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x12, 0x71, 0x0a, 0x1d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x4a, 0x1f, 0x22,
	0x61, 0x73, 0x6e, 0x64, 0x6c, 0x6b, 0x68, 0x61, 0x73, 0x6b, 0x68, 0x64, 0x68, 0x61, 0x73, 0x67,
	0x64, 0x61, 0x68, 0x73, 0x66, 0x2d, 0x66, 0x65, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x22, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x4a, 0x1f, 0x22, 0x61,
	0x73, 0x6e, 0x64, 0x6c, 0x6b, 0x68, 0x61, 0x73, 0x6b, 0x68, 0x64, 0x68, 0x61, 0x73, 0x67, 0x64,
	0x61, 0x68, 0x73, 0x66, 0x2d, 0x66, 0x65, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x22, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x61, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0x92, 0x41, 0x21, 0x4a, 0x1f, 0x22, 0x61, 0x73, 0x6e, 0x64, 0x6c, 0x6b, 0x68, 0x61, 0x73, 0x6b,
	0x68, 0x64, 0x68, 0x61, 0x73, 0x67, 0x64, 0x61, 0x68, 0x73, 0x66, 0x2d, 0x66, 0x65, 0x65, 0x64,
	0x2d, 0x69, 0x64, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x12,
	0x6e, 0x65, 0x77, 0x73, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x1d, 0x4a, 0x1b, 0x22, 0x61, 0x73, 0x6e, 0x64, 0x6c, 0x6b, 0x68, 0x61, 0x73, 0x6b, 0x68,
	0x64, 0x68, 0x61, 0x73, 0x67, 0x64, 0x61, 0x68, 0x73, 0x66, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xba,
	0xb9, 0x19, 0x04, 0x22, 0x02, 0x38, 0x01, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x6c, 0x69, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x4a, 0x1f, 0x22, 0x61, 0x73,
	0x6e, 0x64, 0x6c, 0x6b, 0x68, 0x61, 0x73, 0x6b, 0x68, 0x64, 0x68, 0x61, 0x73, 0x67, 0x64, 0x61,
	0x68, 0x73, 0x66, 0x2d, 0x66, 0x65, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x22, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x20, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x6c, 0x69, 0x61, 0x49,
	0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xd6, 0x08, 0x0a, 0x10, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x12, 0x4a, 0x10, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x20, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8c,
	0x01, 0x92, 0x41, 0x7f, 0x4a, 0x7d, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65,
	0x66, 0x75, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20,
	0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x20, 0x61, 0x20,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x61,
	0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6f, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x64, 0x65,
	0x61, 0x6c, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x05, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x86, 0x01, 0x92, 0x41, 0x79, 0x4a, 0x77, 0x22, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x20, 0x75, 0x73,
	0x65, 0x66, 0x75, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x2e, 0x20, 0x61,
	0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65,
	0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6f, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x64,
	0x65, 0x61, 0x6c, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x05, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x12, 0x71, 0x0a, 0x1d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x4a, 0x1f,
	0x22, 0x61, 0x73, 0x6e, 0x64, 0x6c, 0x6b, 0x68, 0x61, 0x73, 0x6b, 0x68, 0x64, 0x68, 0x61, 0x73,
	0x67, 0x64, 0x61, 0x68, 0x73, 0x66, 0x2d, 0x66, 0x65, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x22, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x4a, 0x1f, 0x22,
	0x61, 0x73, 0x6e, 0x64, 0x6c, 0x6b, 0x68, 0x61, 0x73, 0x6b, 0x68, 0x64, 0x68, 0x61, 0x73, 0x67,
	0x64, 0x61, 0x68, 0x73, 0x66, 0x2d, 0x66, 0x65, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x22, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x61, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0x92, 0x41, 0x21, 0x4a, 0x1f, 0x22, 0x61, 0x73, 0x6e, 0x64, 0x6c, 0x6b, 0x68, 0x61, 0x73,
	0x6b, 0x68, 0x64, 0x68, 0x61, 0x73, 0x67, 0x64, 0x61, 0x68, 0x73, 0x66, 0x2d, 0x66, 0x65, 0x65,
	0x64, 0x2d, 0x69, 0x64, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52,
	0x12, 0x6e, 0x65, 0x77, 0x73, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0x92, 0x41, 0x1d, 0x4a, 0x1b, 0x22, 0x61, 0x73, 0x6e, 0x64, 0x6c, 0x6b, 0x68, 0x61, 0x73, 0x6b,
	0x68, 0x64, 0x68, 0x61, 0x73, 0x67, 0x64, 0x61, 0x68, 0x73, 0x66, 0x2e, 0x6a, 0x70, 0x67, 0x22,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x61,
	0x6c, 0x67, 0x6f, 0x6c, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0x92, 0x41, 0x21, 0x4a, 0x1f, 0x22, 0x61, 0x73, 0x6e, 0x64, 0x6c, 0x6b, 0x68, 0x61, 0x73,
	0x6b, 0x68, 0x64, 0x68, 0x61, 0x73, 0x67, 0x64, 0x61, 0x68, 0x73, 0x66, 0x2d, 0x66, 0x65, 0x65,
	0x64, 0x2d, 0x69, 0x64, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x00, 0x52,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x6c, 0x69, 0x61, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xb2, 0x04, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0d, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0d, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x6f, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xac, 0x01, 0x0a, 0x19, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x28, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x2d, 0x0a, 0x29, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x61, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x10,
	0x4a, 0x0e, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x61, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x05, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x96, 0x01, 0x92, 0x41, 0x88, 0x01,
	0x4a, 0x85, 0x01, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x61, 0x6b, 0x6a, 0x6c, 0x44, 0x4b, 0x4a, 0x47, 0x53, 0x41,
	0x48, 0x47, 0x48, 0x46, 0x44, 0x48, 0x53, 0x47, 0x4a, 0x48, 0x46, 0x47, 0x41, 0x48, 0x44, 0x46,
	0x4a, 0x4b, 0x47, 0x53, 0x48, 0x41, 0x4a, 0x44, 0x4c, 0x67, 0x41, 0x4b, 0x53, 0x47, 0x44, 0x48,
	0x41, 0x53, 0x20, 0x43, 0x53, 0x56, 0x44, 0x4a, 0x4b, 0x53, 0x41, 0x44, 0x41, 0x53, 0x4b, 0x4a,
	0x48, 0x44, 0x41, 0x53, 0x46, 0x44, 0x47, 0x4a, 0x4b, 0x4a, 0x4c, 0x48, 0x53, 0x41, 0x48, 0x47,
	0x46, 0x4a, 0x44, 0x53, 0x41, 0x48, 0x44, 0x20, 0x6b, 0x6a, 0x73, 0x6b, 0x68, 0x64, 0x67, 0x66,
	0x68, 0x67, 0x64, 0x68, 0x66, 0x67, 0x6b, 0x68, 0x73, 0x64, 0x66, 0x64, 0x73, 0x64, 0x66, 0x64,
	0x73, 0x73, 0x64, 0x66, 0x73, 0x64, 0x66, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x20, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xd8, 0x02, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x74, 0x65, 0x73,
	0x74, 0x2d, 0x74, 0x61, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0xb9, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x96, 0x01, 0x92, 0x41, 0x88, 0x01, 0x4a, 0x85, 0x01, 0x22,
	0x74, 0x65, 0x73, 0x74, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x73, 0x61, 0x6b, 0x6a, 0x6c, 0x44, 0x4b, 0x4a, 0x47, 0x53, 0x41, 0x48, 0x47, 0x48, 0x46,
	0x44, 0x48, 0x53, 0x47, 0x4a, 0x48, 0x46, 0x47, 0x41, 0x48, 0x44, 0x46, 0x4a, 0x4b, 0x47, 0x53,
	0x48, 0x41, 0x4a, 0x44, 0x4c, 0x67, 0x41, 0x4b, 0x53, 0x47, 0x44, 0x48, 0x41, 0x53, 0x20, 0x43,
	0x53, 0x56, 0x44, 0x4a, 0x4b, 0x53, 0x41, 0x44, 0x41, 0x53, 0x4b, 0x4a, 0x48, 0x44, 0x41, 0x53,
	0x46, 0x44, 0x47, 0x4a, 0x4b, 0x4a, 0x4c, 0x48, 0x53, 0x41, 0x48, 0x47, 0x46, 0x4a, 0x44, 0x53,
	0x41, 0x48, 0x44, 0x20, 0x6b, 0x6a, 0x73, 0x6b, 0x68, 0x64, 0x67, 0x66, 0x68, 0x67, 0x64, 0x68,
	0x66, 0x67, 0x6b, 0x68, 0x73, 0x64, 0x66, 0x64, 0x73, 0x64, 0x66, 0x64, 0x73, 0x73, 0x64, 0x66,
	0x73, 0x64, 0x66, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x05, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x13, 0x4a, 0x0e, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x61, 0x67, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xa0, 0x04, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x00, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x67, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x69, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x06, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x01,
	0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x4c, 0x0a,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0xae, 0x04, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x0f, 0x52,
	0x07, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x4e, 0x0a, 0x1e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x6d, 0x66, 0x69,
	0x6e, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x03, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x42, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x07, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x92,
	0x01, 0x02, 0x08, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x2a, 0x7c, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x2a, 0xab, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x47,
	0x41, 0x5a, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x47, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x10, 0x04,
	0x42, 0xfc, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x74, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x41, 0x49,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x3b,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x32,
	0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x10, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x10, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1c, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x32, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_social_service_v2_message_proto_rawDescOnce sync.Once
	file_social_service_v2_message_proto_rawDescData = file_social_service_v2_message_proto_rawDesc
)

func file_social_service_v2_message_proto_rawDescGZIP() []byte {
	file_social_service_v2_message_proto_rawDescOnce.Do(func() {
		file_social_service_v2_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_social_service_v2_message_proto_rawDescData)
	})
	return file_social_service_v2_message_proto_rawDescData
}

var file_social_service_v2_message_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_social_service_v2_message_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_social_service_v2_message_proto_goTypes = []interface{}{
	(VirtualProfileType)(0),                 // 0: social_service.v2.VirtualProfileType
	(PublicationType)(0),                    // 1: social_service.v2.PublicationType
	(Follower_TargetFollowerProfileType)(0), // 2: social_service.v2.Follower.TargetFollowerProfileType
	(Blocked_BlockedProfileType)(0),         // 3: social_service.v2.Blocked.BlockedProfileType
	(*VirtualProfile)(nil),                  // 4: social_service.v2.VirtualProfile
	(*UserProfile)(nil),                     // 5: social_service.v2.UserProfile
	(*CommunityProfile)(nil),                // 6: social_service.v2.CommunityProfile
	(*Follower)(nil),                        // 7: social_service.v2.Follower
	(*UserTags)(nil),                        // 8: social_service.v2.UserTags
	(*Topic)(nil),                           // 9: social_service.v2.Topic
	(*Blocked)(nil),                         // 10: social_service.v2.Blocked
	(*Bookmark)(nil),                        // 11: social_service.v2.Bookmark
	(*Publication)(nil),                     // 12: social_service.v2.Publication
}
var file_social_service_v2_message_proto_depIdxs = []int32{
	5,  // 0: social_service.v2.VirtualProfile.user:type_name -> social_service.v2.UserProfile
	6,  // 1: social_service.v2.VirtualProfile.communities:type_name -> social_service.v2.CommunityProfile
	0,  // 2: social_service.v2.VirtualProfile.profile_type:type_name -> social_service.v2.VirtualProfileType
	8,  // 3: social_service.v2.UserProfile.tags:type_name -> social_service.v2.UserTags
	11, // 4: social_service.v2.UserProfile.bookmarks:type_name -> social_service.v2.Bookmark
	9,  // 5: social_service.v2.CommunityProfile.topics:type_name -> social_service.v2.Topic
	2,  // 6: social_service.v2.Follower.target_follower_type:type_name -> social_service.v2.Follower.TargetFollowerProfileType
	3,  // 7: social_service.v2.Blocked.profile_blocked_type:type_name -> social_service.v2.Blocked.BlockedProfileType
	3,  // 8: social_service.v2.Blocked.profile_blocking_type:type_name -> social_service.v2.Blocked.BlockedProfileType
	12, // 9: social_service.v2.Bookmark.publications:type_name -> social_service.v2.Publication
	5,  // 10: social_service.v2.Publication.admin:type_name -> social_service.v2.UserProfile
	5,  // 11: social_service.v2.Publication.editors:type_name -> social_service.v2.UserProfile
	1,  // 12: social_service.v2.Publication.type:type_name -> social_service.v2.PublicationType
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_social_service_v2_message_proto_init() }
func file_social_service_v2_message_proto_init() {
	if File_social_service_v2_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_social_service_v2_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunityProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Follower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blocked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Publication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_social_service_v2_message_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_social_service_v2_message_proto_goTypes,
		DependencyIndexes: file_social_service_v2_message_proto_depIdxs,
		EnumInfos:         file_social_service_v2_message_proto_enumTypes,
		MessageInfos:      file_social_service_v2_message_proto_msgTypes,
	}.Build()
	File_social_service_v2_message_proto = out.File
	file_social_service_v2_message_proto_rawDesc = nil
	file_social_service_v2_message_proto_goTypes = nil
	file_social_service_v2_message_proto_depIdxs = nil
}
