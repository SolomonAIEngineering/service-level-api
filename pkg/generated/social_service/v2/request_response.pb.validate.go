// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: social_service/v2/request_response.proto

package social_servicev2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyRequestMultiError, or
// nil if none found.
func (m *EmptyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyRequestMultiError(errors)
	}

	return nil
}

// EmptyRequestMultiError is an error wrapping multiple validation errors
// returned by EmptyRequest.ValidateAll() if the designated constraints aren't met.
type EmptyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyRequestMultiError) AllErrors() []error { return m }

// EmptyRequestValidationError is the validation error returned by
// EmptyRequest.Validate if the designated constraints aren't met.
type EmptyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRequestValidationError) ErrorName() string { return "EmptyRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRequestValidationError{}

// Validate checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckRequestMultiError, or nil if none found.
func (m *HealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthCheckRequestMultiError(errors)
	}

	return nil
}

// HealthCheckRequestMultiError is an error wrapping multiple validation errors
// returned by HealthCheckRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckRequestMultiError) AllErrors() []error { return m }

// HealthCheckRequestValidationError is the validation error returned by
// HealthCheckRequest.Validate if the designated constraints aren't met.
type HealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckRequestValidationError) ErrorName() string {
	return "HealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckRequestValidationError{}

// Validate checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckResponseMultiError, or nil if none found.
func (m *HealthCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Healthy

	if len(errors) > 0 {
		return HealthCheckResponseMultiError(errors)
	}

	return nil
}

// HealthCheckResponseMultiError is an error wrapping multiple validation
// errors returned by HealthCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type HealthCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckResponseMultiError) AllErrors() []error { return m }

// HealthCheckResponseValidationError is the validation error returned by
// HealthCheckResponse.Validate if the designated constraints aren't met.
type HealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckResponseValidationError) ErrorName() string {
	return "HealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckResponseValidationError{}

// Validate checks the field values on ReadynessCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadynessCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadynessCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadynessCheckRequestMultiError, or nil if none found.
func (m *ReadynessCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadynessCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadynessCheckRequestMultiError(errors)
	}

	return nil
}

// ReadynessCheckRequestMultiError is an error wrapping multiple validation
// errors returned by ReadynessCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadynessCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadynessCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadynessCheckRequestMultiError) AllErrors() []error { return m }

// ReadynessCheckRequestValidationError is the validation error returned by
// ReadynessCheckRequest.Validate if the designated constraints aren't met.
type ReadynessCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadynessCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadynessCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadynessCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadynessCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadynessCheckRequestValidationError) ErrorName() string {
	return "ReadynessCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadynessCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadynessCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadynessCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadynessCheckRequestValidationError{}

// Validate checks the field values on ReadynessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadynessCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadynessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadynessCheckResponseMultiError, or nil if none found.
func (m *ReadynessCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadynessCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ready

	if len(errors) > 0 {
		return ReadynessCheckResponseMultiError(errors)
	}

	return nil
}

// ReadynessCheckResponseMultiError is an error wrapping multiple validation
// errors returned by ReadynessCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadynessCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadynessCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadynessCheckResponseMultiError) AllErrors() []error { return m }

// ReadynessCheckResponseValidationError is the validation error returned by
// ReadynessCheckResponse.Validate if the designated constraints aren't met.
type ReadynessCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadynessCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadynessCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadynessCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadynessCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadynessCheckResponseValidationError) ErrorName() string {
	return "ReadynessCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadynessCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadynessCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadynessCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadynessCheckResponseValidationError{}

// Validate checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileRequestMultiError, or nil if none found.
func (m *GetUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetUserProfileRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RequestorProfileId

	// no validation rules for RequestorProfileType

	if len(errors) > 0 {
		return GetUserProfileRequestMultiError(errors)
	}

	return nil
}

// GetUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileRequestMultiError) AllErrors() []error { return m }

// GetUserProfileRequestValidationError is the validation error returned by
// GetUserProfileRequest.Validate if the designated constraints aren't met.
type GetUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileRequestValidationError) ErrorName() string {
	return "GetUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileRequestValidationError{}

// Validate checks the field values on GetCommunityProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommunityProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommunityProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommunityProfileRequestMultiError, or nil if none found.
func (m *GetCommunityProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommunityProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommunityId() <= 0 {
		err := GetCommunityProfileRequestValidationError{
			field:  "CommunityId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRequestorProfileId() <= 0 {
		err := GetCommunityProfileRequestValidationError{
			field:  "RequestorProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RequestorProfileType

	if len(errors) > 0 {
		return GetCommunityProfileRequestMultiError(errors)
	}

	return nil
}

// GetCommunityProfileRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommunityProfileRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCommunityProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommunityProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommunityProfileRequestMultiError) AllErrors() []error { return m }

// GetCommunityProfileRequestValidationError is the validation error returned
// by GetCommunityProfileRequest.Validate if the designated constraints aren't met.
type GetCommunityProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommunityProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommunityProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommunityProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommunityProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommunityProfileRequestValidationError) ErrorName() string {
	return "GetCommunityProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommunityProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommunityProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommunityProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommunityProfileRequestValidationError{}

// Validate checks the field values on CreateUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserProfileRequestMultiError, or nil if none found.
func (m *CreateUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateUserProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := CreateUserProfileRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUserProfileRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUserProfileRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserProfileRequestValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsPrivate

	if utf8.RuneCountInString(m.GetProfileImageUrl()) < 1 {
		err := CreateUserProfileRequestValidationError{
			field:  "ProfileImageUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUserProfileRequestMultiError(errors)
	}

	return nil
}

// CreateUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserProfileRequestMultiError) AllErrors() []error { return m }

// CreateUserProfileRequestValidationError is the validation error returned by
// CreateUserProfileRequest.Validate if the designated constraints aren't met.
type CreateUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserProfileRequestValidationError) ErrorName() string {
	return "CreateUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserProfileRequestValidationError{}

// Validate checks the field values on CreateCommunityProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommunityProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommunityProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCommunityProfileRequestMultiError, or nil if none found.
func (m *CreateCommunityProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommunityProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProfile() == nil {
		err := CreateCommunityProfileRequestValidationError{
			field:  "Profile",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommunityProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommunityProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommunityProfileRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := CreateCommunityProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCommunityProfileRequestMultiError(errors)
	}

	return nil
}

// CreateCommunityProfileRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCommunityProfileRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCommunityProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommunityProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommunityProfileRequestMultiError) AllErrors() []error { return m }

// CreateCommunityProfileRequestValidationError is the validation error
// returned by CreateCommunityProfileRequest.Validate if the designated
// constraints aren't met.
type CreateCommunityProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommunityProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommunityProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommunityProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommunityProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommunityProfileRequestValidationError) ErrorName() string {
	return "CreateCommunityProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommunityProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommunityProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommunityProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommunityProfileRequestValidationError{}

// Validate checks the field values on DeleteUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserProfileRequestMultiError, or nil if none found.
func (m *DeleteUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DeleteUserProfileRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserProfileRequestMultiError(errors)
	}

	return nil
}

// DeleteUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserProfileRequestMultiError) AllErrors() []error { return m }

// DeleteUserProfileRequestValidationError is the validation error returned by
// DeleteUserProfileRequest.Validate if the designated constraints aren't met.
type DeleteUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserProfileRequestValidationError) ErrorName() string {
	return "DeleteUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserProfileRequestValidationError{}

// Validate checks the field values on DeleteCommunityProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommunityProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommunityProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCommunityProfileRequestMultiError, or nil if none found.
func (m *DeleteCommunityProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommunityProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DeleteCommunityProfileRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCommunityProfileId() <= 0 {
		err := DeleteCommunityProfileRequestValidationError{
			field:  "CommunityProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCommunityProfileRequestMultiError(errors)
	}

	return nil
}

// DeleteCommunityProfileRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCommunityProfileRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteCommunityProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommunityProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommunityProfileRequestMultiError) AllErrors() []error { return m }

// DeleteCommunityProfileRequestValidationError is the validation error
// returned by DeleteCommunityProfileRequest.Validate if the designated
// constraints aren't met.
type DeleteCommunityProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommunityProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommunityProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommunityProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommunityProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommunityProfileRequestValidationError) ErrorName() string {
	return "DeleteCommunityProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommunityProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommunityProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommunityProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommunityProfileRequestValidationError{}

// Validate checks the field values on EditUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditUserProfileRequestMultiError, or nil if none found.
func (m *EditUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := EditUserProfileRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfile() == nil {
		err := EditUserProfileRequestValidationError{
			field:  "Profile",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditUserProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditUserProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditUserProfileRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditUserProfileRequestMultiError(errors)
	}

	return nil
}

// EditUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by EditUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type EditUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUserProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUserProfileRequestMultiError) AllErrors() []error { return m }

// EditUserProfileRequestValidationError is the validation error returned by
// EditUserProfileRequest.Validate if the designated constraints aren't met.
type EditUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUserProfileRequestValidationError) ErrorName() string {
	return "EditUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUserProfileRequestValidationError{}

// Validate checks the field values on EditCommunityProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCommunityProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCommunityProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCommunityProfileRequestMultiError, or nil if none found.
func (m *EditCommunityProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCommunityProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProfile() == nil {
		err := EditCommunityProfileRequestValidationError{
			field:  "Profile",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditCommunityProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditCommunityProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditCommunityProfileRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := EditCommunityProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCommunityProfileId() <= 0 {
		err := EditCommunityProfileRequestValidationError{
			field:  "CommunityProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditCommunityProfileRequestMultiError(errors)
	}

	return nil
}

// EditCommunityProfileRequestMultiError is an error wrapping multiple
// validation errors returned by EditCommunityProfileRequest.ValidateAll() if
// the designated constraints aren't met.
type EditCommunityProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCommunityProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCommunityProfileRequestMultiError) AllErrors() []error { return m }

// EditCommunityProfileRequestValidationError is the validation error returned
// by EditCommunityProfileRequest.Validate if the designated constraints
// aren't met.
type EditCommunityProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCommunityProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCommunityProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCommunityProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCommunityProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCommunityProfileRequestValidationError) ErrorName() string {
	return "EditCommunityProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditCommunityProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCommunityProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCommunityProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCommunityProfileRequestValidationError{}

// Validate checks the field values on BlockUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUserProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockUserProfileRequestMultiError, or nil if none found.
func (m *BlockUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSourceUserId() <= 0 {
		err := BlockUserProfileRequestValidationError{
			field:  "SourceUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTargetUserId() <= 0 {
		err := BlockUserProfileRequestValidationError{
			field:  "TargetUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BlockUserProfileRequestMultiError(errors)
	}

	return nil
}

// BlockUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by BlockUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type BlockUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUserProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUserProfileRequestMultiError) AllErrors() []error { return m }

// BlockUserProfileRequestValidationError is the validation error returned by
// BlockUserProfileRequest.Validate if the designated constraints aren't met.
type BlockUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUserProfileRequestValidationError) ErrorName() string {
	return "BlockUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUserProfileRequestValidationError{}

// Validate checks the field values on FollowProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FollowProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowProfileRequestMultiError, or nil if none found.
func (m *FollowProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSourceUserId() <= 0 {
		err := FollowProfileRequestValidationError{
			field:  "SourceUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTargetUserId() <= 0 {
		err := FollowProfileRequestValidationError{
			field:  "TargetUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FollowProfileRequestMultiError(errors)
	}

	return nil
}

// FollowProfileRequestMultiError is an error wrapping multiple validation
// errors returned by FollowProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type FollowProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowProfileRequestMultiError) AllErrors() []error { return m }

// FollowProfileRequestValidationError is the validation error returned by
// FollowProfileRequest.Validate if the designated constraints aren't met.
type FollowProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowProfileRequestValidationError) ErrorName() string {
	return "FollowProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FollowProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowProfileRequestValidationError{}

// Validate checks the field values on FollowCommunityProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FollowCommunityProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowCommunityProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FollowCommunityProfileRequestMultiError, or nil if none found.
func (m *FollowCommunityProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowCommunityProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSourceUserId() <= 0 {
		err := FollowCommunityProfileRequestValidationError{
			field:  "SourceUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTargetCommunityProfileId() <= 0 {
		err := FollowCommunityProfileRequestValidationError{
			field:  "TargetCommunityProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FollowCommunityProfileRequestMultiError(errors)
	}

	return nil
}

// FollowCommunityProfileRequestMultiError is an error wrapping multiple
// validation errors returned by FollowCommunityProfileRequest.ValidateAll()
// if the designated constraints aren't met.
type FollowCommunityProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowCommunityProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowCommunityProfileRequestMultiError) AllErrors() []error { return m }

// FollowCommunityProfileRequestValidationError is the validation error
// returned by FollowCommunityProfileRequest.Validate if the designated
// constraints aren't met.
type FollowCommunityProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowCommunityProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowCommunityProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowCommunityProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowCommunityProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowCommunityProfileRequestValidationError) ErrorName() string {
	return "FollowCommunityProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FollowCommunityProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowCommunityProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowCommunityProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowCommunityProfileRequestValidationError{}

// Validate checks the field values on AcceptFollowProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptFollowProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptFollowProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptFollowProfileRequestMultiError, or nil if none found.
func (m *AcceptFollowProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptFollowProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFollowRecordId() <= 0 {
		err := AcceptFollowProfileRequestValidationError{
			field:  "FollowRecordId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcceptFollowProfileRequestMultiError(errors)
	}

	return nil
}

// AcceptFollowProfileRequestMultiError is an error wrapping multiple
// validation errors returned by AcceptFollowProfileRequest.ValidateAll() if
// the designated constraints aren't met.
type AcceptFollowProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptFollowProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptFollowProfileRequestMultiError) AllErrors() []error { return m }

// AcceptFollowProfileRequestValidationError is the validation error returned
// by AcceptFollowProfileRequest.Validate if the designated constraints aren't met.
type AcceptFollowProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptFollowProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptFollowProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptFollowProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptFollowProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptFollowProfileRequestValidationError) ErrorName() string {
	return "AcceptFollowProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptFollowProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptFollowProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptFollowProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptFollowProfileRequestValidationError{}

// Validate checks the field values on CreatePostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostRequestMultiError, or nil if none found.
func (m *CreatePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CreatePostRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CommunityProfileId

	if m.GetPost() == nil {
		err := CreatePostRequestValidationError{
			field:  "Post",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostRequestValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccountType

	if len(errors) > 0 {
		return CreatePostRequestMultiError(errors)
	}

	return nil
}

// CreatePostRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePostRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostRequestMultiError) AllErrors() []error { return m }

// CreatePostRequestValidationError is the validation error returned by
// CreatePostRequest.Validate if the designated constraints aren't met.
type CreatePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostRequestValidationError) ErrorName() string {
	return "CreatePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostRequestValidationError{}

// Validate checks the field values on DeletePostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostRequestMultiError, or nil if none found.
func (m *DeletePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DeletePostRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := DeletePostRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DeletePostRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := DeletePostRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePostRequestMultiError(errors)
	}

	return nil
}

// DeletePostRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePostRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostRequestMultiError) AllErrors() []error { return m }

// DeletePostRequestValidationError is the validation error returned by
// DeletePostRequest.Validate if the designated constraints aren't met.
type DeletePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostRequestValidationError) ErrorName() string {
	return "DeletePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostRequestValidationError{}

var _DeletePostRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on EditPostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPostRequestMultiError, or nil if none found.
func (m *EditPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPost() == nil {
		err := EditPostRequestValidationError{
			field:  "Post",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditPostRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditPostRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditPostRequestValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := EditPostRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _EditPostRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := EditPostRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditPostRequestMultiError(errors)
	}

	return nil
}

// EditPostRequestMultiError is an error wrapping multiple validation errors
// returned by EditPostRequest.ValidateAll() if the designated constraints
// aren't met.
type EditPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPostRequestMultiError) AllErrors() []error { return m }

// EditPostRequestValidationError is the validation error returned by
// EditPostRequest.Validate if the designated constraints aren't met.
type EditPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPostRequestValidationError) ErrorName() string { return "EditPostRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPostRequestValidationError{}

var _EditPostRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on GetPostRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPostRequestMultiError,
// or nil if none found.
func (m *GetPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetPostRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := GetPostRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetPostRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := GetPostRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPostRequestMultiError(errors)
	}

	return nil
}

// GetPostRequestMultiError is an error wrapping multiple validation errors
// returned by GetPostRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostRequestMultiError) AllErrors() []error { return m }

// GetPostRequestValidationError is the validation error returned by
// GetPostRequest.Validate if the designated constraints aren't met.
type GetPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostRequestValidationError) ErrorName() string { return "GetPostRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostRequestValidationError{}

var _GetPostRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on ReactionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReactionRequestMultiError, or nil if none found.
func (m *ReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := ReactionRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := ReactionRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if _, ok := _ReactionRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := ReactionRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReactionRequestMultiError(errors)
	}

	return nil
}

// ReactionRequestMultiError is an error wrapping multiple validation errors
// returned by ReactionRequest.ValidateAll() if the designated constraints
// aren't met.
type ReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReactionRequestMultiError) AllErrors() []error { return m }

// ReactionRequestValidationError is the validation error returned by
// ReactionRequest.Validate if the designated constraints aren't met.
type ReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactionRequestValidationError) ErrorName() string { return "ReactionRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactionRequestValidationError{}

var _ReactionRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on GetUserFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserFeedRequestMultiError, or nil if none found.
func (m *GetUserFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetUserFeedRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FeedType

	// no validation rules for AccountType

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetUserFeedRequestMultiError(errors)
	}

	return nil
}

// GetUserFeedRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserFeedRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserFeedRequestMultiError) AllErrors() []error { return m }

// GetUserFeedRequestValidationError is the validation error returned by
// GetUserFeedRequest.Validate if the designated constraints aren't met.
type GetUserFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFeedRequestValidationError) ErrorName() string {
	return "GetUserFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFeedRequestValidationError{}

// Validate checks the field values on GetCommunityFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommunityFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommunityFeedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommunityFeedRequestMultiError, or nil if none found.
func (m *GetCommunityFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommunityFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommunityProfileId() <= 0 {
		err := GetCommunityFeedRequestValidationError{
			field:  "CommunityProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FeedType

	// no validation rules for AccountType

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetCommunityFeedRequestMultiError(errors)
	}

	return nil
}

// GetCommunityFeedRequestMultiError is an error wrapping multiple validation
// errors returned by GetCommunityFeedRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCommunityFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommunityFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommunityFeedRequestMultiError) AllErrors() []error { return m }

// GetCommunityFeedRequestValidationError is the validation error returned by
// GetCommunityFeedRequest.Validate if the designated constraints aren't met.
type GetCommunityFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommunityFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommunityFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommunityFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommunityFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommunityFeedRequestValidationError) ErrorName() string {
	return "GetCommunityFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommunityFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommunityFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommunityFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommunityFeedRequestValidationError{}

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRequestMultiError, or nil if none found.
func (m *CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := CreateCommentRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := CreateCommentRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CommunityProfileId

	// no validation rules for AccountType

	if m.GetComment() == nil {
		err := CreateCommentRequestValidationError{
			field:  "Comment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _CreateCommentRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := CreateCommentRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCommentRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRequestMultiError) AllErrors() []error { return m }

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

var _CreateCommentRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentRequestMultiError, or nil if none found.
func (m *DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := DeleteCommentRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentId()) < 1 {
		err := DeleteCommentRequestValidationError{
			field:  "CommentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DeleteCommentRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := DeleteCommentRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentRequestMultiError) AllErrors() []error { return m }

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

var _DeleteCommentRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on CreateTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTopicRequestMultiError, or nil if none found.
func (m *CreateTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommunityProfileId() <= 0 {
		err := CreateTopicRequestValidationError{
			field:  "CommunityProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := CreateTopicRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTopic() == nil {
		err := CreateTopicRequestValidationError{
			field:  "Topic",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTopic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTopicRequestValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTopicRequestValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTopic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTopicRequestValidationError{
				field:  "Topic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTopicRequestMultiError(errors)
	}

	return nil
}

// CreateTopicRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTopicRequestMultiError) AllErrors() []error { return m }

// CreateTopicRequestValidationError is the validation error returned by
// CreateTopicRequest.Validate if the designated constraints aren't met.
type CreateTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTopicRequestValidationError) ErrorName() string {
	return "CreateTopicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTopicRequestValidationError{}

// Validate checks the field values on GetPostsByTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostsByTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostsByTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostsByTopicRequestMultiError, or nil if none found.
func (m *GetPostsByTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostsByTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommunityProfileId() <= 0 {
		err := GetPostsByTopicRequestValidationError{
			field:  "CommunityProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTopicName()) < 1 {
		err := GetPostsByTopicRequestValidationError{
			field:  "TopicName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPostsByTopicRequestMultiError(errors)
	}

	return nil
}

// GetPostsByTopicRequestMultiError is an error wrapping multiple validation
// errors returned by GetPostsByTopicRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPostsByTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostsByTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostsByTopicRequestMultiError) AllErrors() []error { return m }

// GetPostsByTopicRequestValidationError is the validation error returned by
// GetPostsByTopicRequest.Validate if the designated constraints aren't met.
type GetPostsByTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostsByTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostsByTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostsByTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostsByTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostsByTopicRequestValidationError) ErrorName() string {
	return "GetPostsByTopicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostsByTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostsByTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostsByTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostsByTopicRequestValidationError{}

// Validate checks the field values on GetPendingFollowsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPendingFollowsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPendingFollowsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPendingFollowsRequestMultiError, or nil if none found.
func (m *GetPendingFollowsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPendingFollowsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetPendingFollowsRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPendingFollowsRequestMultiError(errors)
	}

	return nil
}

// GetPendingFollowsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPendingFollowsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPendingFollowsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPendingFollowsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPendingFollowsRequestMultiError) AllErrors() []error { return m }

// GetPendingFollowsRequestValidationError is the validation error returned by
// GetPendingFollowsRequest.Validate if the designated constraints aren't met.
type GetPendingFollowsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPendingFollowsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPendingFollowsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPendingFollowsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPendingFollowsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPendingFollowsRequestValidationError) ErrorName() string {
	return "GetPendingFollowsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPendingFollowsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPendingFollowsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPendingFollowsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPendingFollowsRequestValidationError{}

// Validate checks the field values on GetCommunitiesUserFollowsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCommunitiesUserFollowsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommunitiesUserFollowsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommunitiesUserFollowsRequestMultiError, or nil if none found.
func (m *GetCommunitiesUserFollowsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommunitiesUserFollowsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetCommunitiesUserFollowsRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := GetCommunitiesUserFollowsRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommunitiesUserFollowsRequestMultiError(errors)
	}

	return nil
}

// GetCommunitiesUserFollowsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetCommunitiesUserFollowsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCommunitiesUserFollowsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommunitiesUserFollowsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommunitiesUserFollowsRequestMultiError) AllErrors() []error { return m }

// GetCommunitiesUserFollowsRequestValidationError is the validation error
// returned by GetCommunitiesUserFollowsRequest.Validate if the designated
// constraints aren't met.
type GetCommunitiesUserFollowsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommunitiesUserFollowsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommunitiesUserFollowsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommunitiesUserFollowsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommunitiesUserFollowsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommunitiesUserFollowsRequestValidationError) ErrorName() string {
	return "GetCommunitiesUserFollowsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommunitiesUserFollowsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommunitiesUserFollowsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommunitiesUserFollowsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommunitiesUserFollowsRequestValidationError{}

// Validate checks the field values on GetTopicsOfCommunitiesUserFollowsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTopicsOfCommunitiesUserFollowsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTopicsOfCommunitiesUserFollowsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetTopicsOfCommunitiesUserFollowsRequestMultiError, or nil if none found.
func (m *GetTopicsOfCommunitiesUserFollowsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopicsOfCommunitiesUserFollowsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetTopicsOfCommunitiesUserFollowsRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := GetTopicsOfCommunitiesUserFollowsRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTopicsOfCommunitiesUserFollowsRequestMultiError(errors)
	}

	return nil
}

// GetTopicsOfCommunitiesUserFollowsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetTopicsOfCommunitiesUserFollowsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTopicsOfCommunitiesUserFollowsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopicsOfCommunitiesUserFollowsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopicsOfCommunitiesUserFollowsRequestMultiError) AllErrors() []error { return m }

// GetTopicsOfCommunitiesUserFollowsRequestValidationError is the validation
// error returned by GetTopicsOfCommunitiesUserFollowsRequest.Validate if the
// designated constraints aren't met.
type GetTopicsOfCommunitiesUserFollowsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicsOfCommunitiesUserFollowsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicsOfCommunitiesUserFollowsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicsOfCommunitiesUserFollowsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicsOfCommunitiesUserFollowsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicsOfCommunitiesUserFollowsRequestValidationError) ErrorName() string {
	return "GetTopicsOfCommunitiesUserFollowsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopicsOfCommunitiesUserFollowsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicsOfCommunitiesUserFollowsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicsOfCommunitiesUserFollowsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicsOfCommunitiesUserFollowsRequestValidationError{}

// Validate checks the field values on PaginationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationRequestMultiError, or nil if none found.
func (m *PaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNumber

	if len(errors) > 0 {
		return PaginationRequestMultiError(errors)
	}

	return nil
}

// PaginationRequestMultiError is an error wrapping multiple validation errors
// returned by PaginationRequest.ValidateAll() if the designated constraints
// aren't met.
type PaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationRequestMultiError) AllErrors() []error { return m }

// PaginationRequestValidationError is the validation error returned by
// PaginationRequest.Validate if the designated constraints aren't met.
type PaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationRequestValidationError) ErrorName() string {
	return "PaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationRequestValidationError{}

// Validate checks the field values on GetUserProfilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfilesRequestMultiError, or nil if none found.
func (m *GetUserProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNumber

	if len(errors) > 0 {
		return GetUserProfilesRequestMultiError(errors)
	}

	return nil
}

// GetUserProfilesRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserProfilesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfilesRequestMultiError) AllErrors() []error { return m }

// GetUserProfilesRequestValidationError is the validation error returned by
// GetUserProfilesRequest.Validate if the designated constraints aren't met.
type GetUserProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfilesRequestValidationError) ErrorName() string {
	return "GetUserProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfilesRequestValidationError{}

// Validate checks the field values on GetCommunityProfilesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommunityProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommunityProfilesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommunityProfilesRequestMultiError, or nil if none found.
func (m *GetCommunityProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommunityProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNumber

	if len(errors) > 0 {
		return GetCommunityProfilesRequestMultiError(errors)
	}

	return nil
}

// GetCommunityProfilesRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommunityProfilesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCommunityProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommunityProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommunityProfilesRequestMultiError) AllErrors() []error { return m }

// GetCommunityProfilesRequestValidationError is the validation error returned
// by GetCommunityProfilesRequest.Validate if the designated constraints
// aren't met.
type GetCommunityProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommunityProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommunityProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommunityProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommunityProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommunityProfilesRequestValidationError) ErrorName() string {
	return "GetCommunityProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommunityProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommunityProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommunityProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommunityProfilesRequestValidationError{}

// Validate checks the field values on AddPostQualityScoreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostQualityScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostQualityScoreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostQualityScoreRequestMultiError, or nil if none found.
func (m *AddPostQualityScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostQualityScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := AddPostQualityScoreRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQualityScore() <= 0 {
		err := AddPostQualityScoreRequestValidationError{
			field:  "QualityScore",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AddPostQualityScoreRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddPostQualityScoreRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := AddPostQualityScoreRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddPostQualityScoreRequestMultiError(errors)
	}

	return nil
}

// AddPostQualityScoreRequestMultiError is an error wrapping multiple
// validation errors returned by AddPostQualityScoreRequest.ValidateAll() if
// the designated constraints aren't met.
type AddPostQualityScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostQualityScoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostQualityScoreRequestMultiError) AllErrors() []error { return m }

// AddPostQualityScoreRequestValidationError is the validation error returned
// by AddPostQualityScoreRequest.Validate if the designated constraints aren't met.
type AddPostQualityScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostQualityScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostQualityScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostQualityScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostQualityScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostQualityScoreRequestValidationError) ErrorName() string {
	return "AddPostQualityScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostQualityScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostQualityScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostQualityScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostQualityScoreRequestValidationError{}

var _AddPostQualityScoreRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on AddCommentQualityScoreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCommentQualityScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentQualityScoreRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddCommentQualityScoreRequestMultiError, or nil if none found.
func (m *AddCommentQualityScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentQualityScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := AddCommentQualityScoreRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentId()) < 1 {
		err := AddCommentQualityScoreRequestValidationError{
			field:  "CommentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQualityScore() <= 0 {
		err := AddCommentQualityScoreRequestValidationError{
			field:  "QualityScore",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AddCommentQualityScoreRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddCommentQualityScoreRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := AddCommentQualityScoreRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddCommentQualityScoreRequestMultiError(errors)
	}

	return nil
}

// AddCommentQualityScoreRequestMultiError is an error wrapping multiple
// validation errors returned by AddCommentQualityScoreRequest.ValidateAll()
// if the designated constraints aren't met.
type AddCommentQualityScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentQualityScoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentQualityScoreRequestMultiError) AllErrors() []error { return m }

// AddCommentQualityScoreRequestValidationError is the validation error
// returned by AddCommentQualityScoreRequest.Validate if the designated
// constraints aren't met.
type AddCommentQualityScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentQualityScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentQualityScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentQualityScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentQualityScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentQualityScoreRequestValidationError) ErrorName() string {
	return "AddCommentQualityScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentQualityScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentQualityScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentQualityScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentQualityScoreRequestValidationError{}

var _AddCommentQualityScoreRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on ReportPostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReportPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportPostRequestMultiError, or nil if none found.
func (m *ReportPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ReportPostRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := ReportPostRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ReportPostRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := ReportPostRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReportPostRequestMultiError(errors)
	}

	return nil
}

// ReportPostRequestMultiError is an error wrapping multiple validation errors
// returned by ReportPostRequest.ValidateAll() if the designated constraints
// aren't met.
type ReportPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportPostRequestMultiError) AllErrors() []error { return m }

// ReportPostRequestValidationError is the validation error returned by
// ReportPostRequest.Validate if the designated constraints aren't met.
type ReportPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportPostRequestValidationError) ErrorName() string {
	return "ReportPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportPostRequestValidationError{}

var _ReportPostRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on ReportCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCommentRequestMultiError, or nil if none found.
func (m *ReportCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ReportCommentRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := ReportCommentRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentId()) < 1 {
		err := ReportCommentRequestValidationError{
			field:  "CommentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ReportCommentRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := ReportCommentRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReportCommentRequestMultiError(errors)
	}

	return nil
}

// ReportCommentRequestMultiError is an error wrapping multiple validation
// errors returned by ReportCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCommentRequestMultiError) AllErrors() []error { return m }

// ReportCommentRequestValidationError is the validation error returned by
// ReportCommentRequest.Validate if the designated constraints aren't met.
type ReportCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCommentRequestValidationError) ErrorName() string {
	return "ReportCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCommentRequestValidationError{}

var _ReportCommentRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on GetBlogPostsByTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlogPostsByTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlogPostsByTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlogPostsByTagRequestMultiError, or nil if none found.
func (m *GetBlogPostsByTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlogPostsByTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTag()) < 1 {
		err := GetBlogPostsByTagRequestValidationError{
			field:  "Tag",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetBlogPostsByTagRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := GetBlogPostsByTagRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBlogPostsByTagRequestMultiError(errors)
	}

	return nil
}

// GetBlogPostsByTagRequestMultiError is an error wrapping multiple validation
// errors returned by GetBlogPostsByTagRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBlogPostsByTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlogPostsByTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlogPostsByTagRequestMultiError) AllErrors() []error { return m }

// GetBlogPostsByTagRequestValidationError is the validation error returned by
// GetBlogPostsByTagRequest.Validate if the designated constraints aren't met.
type GetBlogPostsByTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlogPostsByTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlogPostsByTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlogPostsByTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlogPostsByTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlogPostsByTagRequestValidationError) ErrorName() string {
	return "GetBlogPostsByTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlogPostsByTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlogPostsByTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlogPostsByTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlogPostsByTagRequestValidationError{}

var _GetBlogPostsByTagRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on GetCommunityBlogPostsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommunityBlogPostsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommunityBlogPostsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommunityBlogPostsRequestMultiError, or nil if none found.
func (m *GetCommunityBlogPostsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommunityBlogPostsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommunityProfileId() <= 0 {
		err := GetCommunityBlogPostsRequestValidationError{
			field:  "CommunityProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommunityBlogPostsRequestMultiError(errors)
	}

	return nil
}

// GetCommunityBlogPostsRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommunityBlogPostsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCommunityBlogPostsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommunityBlogPostsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommunityBlogPostsRequestMultiError) AllErrors() []error { return m }

// GetCommunityBlogPostsRequestValidationError is the validation error returned
// by GetCommunityBlogPostsRequest.Validate if the designated constraints
// aren't met.
type GetCommunityBlogPostsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommunityBlogPostsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommunityBlogPostsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommunityBlogPostsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommunityBlogPostsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommunityBlogPostsRequestValidationError) ErrorName() string {
	return "GetCommunityBlogPostsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommunityBlogPostsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommunityBlogPostsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommunityBlogPostsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommunityBlogPostsRequestValidationError{}

// Validate checks the field values on DiscoverProfilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoverProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoverProfilesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoverProfilesRequestMultiError, or nil if none found.
func (m *DiscoverProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoverProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DiscoverProfilesRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return DiscoverProfilesRequestMultiError(errors)
	}

	return nil
}

// DiscoverProfilesRequestMultiError is an error wrapping multiple validation
// errors returned by DiscoverProfilesRequest.ValidateAll() if the designated
// constraints aren't met.
type DiscoverProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoverProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoverProfilesRequestMultiError) AllErrors() []error { return m }

// DiscoverProfilesRequestValidationError is the validation error returned by
// DiscoverProfilesRequest.Validate if the designated constraints aren't met.
type DiscoverProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoverProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoverProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoverProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoverProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoverProfilesRequestValidationError) ErrorName() string {
	return "DiscoverProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoverProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoverProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoverProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoverProfilesRequestValidationError{}

// Validate checks the field values on ServiceReadyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceReadyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceReadyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceReadyResponseMultiError, or nil if none found.
func (m *ServiceReadyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceReadyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ready

	if len(errors) > 0 {
		return ServiceReadyResponseMultiError(errors)
	}

	return nil
}

// ServiceReadyResponseMultiError is an error wrapping multiple validation
// errors returned by ServiceReadyResponse.ValidateAll() if the designated
// constraints aren't met.
type ServiceReadyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceReadyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceReadyResponseMultiError) AllErrors() []error { return m }

// ServiceReadyResponseValidationError is the validation error returned by
// ServiceReadyResponse.Validate if the designated constraints aren't met.
type ServiceReadyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceReadyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceReadyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceReadyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceReadyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceReadyResponseValidationError) ErrorName() string {
	return "ServiceReadyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceReadyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceReadyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceReadyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceReadyResponseValidationError{}

// Validate checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileResponseMultiError, or nil if none found.
func (m *GetUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserProfileResponseMultiError(errors)
	}

	return nil
}

// GetUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponseMultiError) AllErrors() []error { return m }

// GetUserProfileResponseValidationError is the validation error returned by
// GetUserProfileResponse.Validate if the designated constraints aren't met.
type GetUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponseValidationError) ErrorName() string {
	return "GetUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponseValidationError{}

// Validate checks the field values on GetCommunityProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommunityProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommunityProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommunityProfileResponseMultiError, or nil if none found.
func (m *GetCommunityProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommunityProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommunityProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommunityProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommunityProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommunityProfileResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommunityProfileResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommunityProfileResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommunityProfileResponseMultiError(errors)
	}

	return nil
}

// GetCommunityProfileResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommunityProfileResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCommunityProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommunityProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommunityProfileResponseMultiError) AllErrors() []error { return m }

// GetCommunityProfileResponseValidationError is the validation error returned
// by GetCommunityProfileResponse.Validate if the designated constraints
// aren't met.
type GetCommunityProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommunityProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommunityProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommunityProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommunityProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommunityProfileResponseValidationError) ErrorName() string {
	return "GetCommunityProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommunityProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommunityProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommunityProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommunityProfileResponseValidationError{}

// Validate checks the field values on CreateUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserProfileResponseMultiError, or nil if none found.
func (m *CreateUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VirtualProfileId

	if len(errors) > 0 {
		return CreateUserProfileResponseMultiError(errors)
	}

	return nil
}

// CreateUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by CreateUserProfileResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserProfileResponseMultiError) AllErrors() []error { return m }

// CreateUserProfileResponseValidationError is the validation error returned by
// CreateUserProfileResponse.Validate if the designated constraints aren't met.
type CreateUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserProfileResponseValidationError) ErrorName() string {
	return "CreateUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserProfileResponseValidationError{}

// Validate checks the field values on CreateCommunityProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommunityProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommunityProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCommunityProfileResponseMultiError, or nil if none found.
func (m *CreateCommunityProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommunityProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommunityProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommunityProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommunityProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommunityProfileResponseMultiError(errors)
	}

	return nil
}

// CreateCommunityProfileResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCommunityProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateCommunityProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommunityProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommunityProfileResponseMultiError) AllErrors() []error { return m }

// CreateCommunityProfileResponseValidationError is the validation error
// returned by CreateCommunityProfileResponse.Validate if the designated
// constraints aren't met.
type CreateCommunityProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommunityProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommunityProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommunityProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommunityProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommunityProfileResponseValidationError) ErrorName() string {
	return "CreateCommunityProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommunityProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommunityProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommunityProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommunityProfileResponseValidationError{}

// Validate checks the field values on DeleteUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserProfileResponseMultiError, or nil if none found.
func (m *DeleteUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteUserProfileResponseMultiError(errors)
	}

	return nil
}

// DeleteUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserProfileResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserProfileResponseMultiError) AllErrors() []error { return m }

// DeleteUserProfileResponseValidationError is the validation error returned by
// DeleteUserProfileResponse.Validate if the designated constraints aren't met.
type DeleteUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserProfileResponseValidationError) ErrorName() string {
	return "DeleteUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserProfileResponseValidationError{}

// Validate checks the field values on EditUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUserProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditUserProfileResponseMultiError, or nil if none found.
func (m *EditUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditUserProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditUserProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditUserProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditUserProfileResponseMultiError(errors)
	}

	return nil
}

// EditUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by EditUserProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type EditUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUserProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUserProfileResponseMultiError) AllErrors() []error { return m }

// EditUserProfileResponseValidationError is the validation error returned by
// EditUserProfileResponse.Validate if the designated constraints aren't met.
type EditUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUserProfileResponseValidationError) ErrorName() string {
	return "EditUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUserProfileResponseValidationError{}

// Validate checks the field values on EditCommunityProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCommunityProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCommunityProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCommunityProfileResponseMultiError, or nil if none found.
func (m *EditCommunityProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCommunityProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditCommunityProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditCommunityProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditCommunityProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditCommunityProfileResponseMultiError(errors)
	}

	return nil
}

// EditCommunityProfileResponseMultiError is an error wrapping multiple
// validation errors returned by EditCommunityProfileResponse.ValidateAll() if
// the designated constraints aren't met.
type EditCommunityProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCommunityProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCommunityProfileResponseMultiError) AllErrors() []error { return m }

// EditCommunityProfileResponseValidationError is the validation error returned
// by EditCommunityProfileResponse.Validate if the designated constraints
// aren't met.
type EditCommunityProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCommunityProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCommunityProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCommunityProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCommunityProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCommunityProfileResponseValidationError) ErrorName() string {
	return "EditCommunityProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditCommunityProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCommunityProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCommunityProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCommunityProfileResponseValidationError{}

// Validate checks the field values on BlockUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUserProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockUserProfileResponseMultiError, or nil if none found.
func (m *BlockUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return BlockUserProfileResponseMultiError(errors)
	}

	return nil
}

// BlockUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by BlockUserProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type BlockUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUserProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUserProfileResponseMultiError) AllErrors() []error { return m }

// BlockUserProfileResponseValidationError is the validation error returned by
// BlockUserProfileResponse.Validate if the designated constraints aren't met.
type BlockUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUserProfileResponseValidationError) ErrorName() string {
	return "BlockUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlockUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUserProfileResponseValidationError{}

// Validate checks the field values on FollowCommunityProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FollowCommunityProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowCommunityProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FollowCommunityProfileResponseMultiError, or nil if none found.
func (m *FollowCommunityProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowCommunityProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return FollowCommunityProfileResponseMultiError(errors)
	}

	return nil
}

// FollowCommunityProfileResponseMultiError is an error wrapping multiple
// validation errors returned by FollowCommunityProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type FollowCommunityProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowCommunityProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowCommunityProfileResponseMultiError) AllErrors() []error { return m }

// FollowCommunityProfileResponseValidationError is the validation error
// returned by FollowCommunityProfileResponse.Validate if the designated
// constraints aren't met.
type FollowCommunityProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowCommunityProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowCommunityProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowCommunityProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowCommunityProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowCommunityProfileResponseValidationError) ErrorName() string {
	return "FollowCommunityProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FollowCommunityProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowCommunityProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowCommunityProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowCommunityProfileResponseValidationError{}

// Validate checks the field values on AcceptFollowProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptFollowProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptFollowProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptFollowProfileResponseMultiError, or nil if none found.
func (m *AcceptFollowProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptFollowProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AcceptFollowProfileResponseMultiError(errors)
	}

	return nil
}

// AcceptFollowProfileResponseMultiError is an error wrapping multiple
// validation errors returned by AcceptFollowProfileResponse.ValidateAll() if
// the designated constraints aren't met.
type AcceptFollowProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptFollowProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptFollowProfileResponseMultiError) AllErrors() []error { return m }

// AcceptFollowProfileResponseValidationError is the validation error returned
// by AcceptFollowProfileResponse.Validate if the designated constraints
// aren't met.
type AcceptFollowProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptFollowProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptFollowProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptFollowProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptFollowProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptFollowProfileResponseValidationError) ErrorName() string {
	return "AcceptFollowProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptFollowProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptFollowProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptFollowProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptFollowProfileResponseValidationError{}

// Validate checks the field values on CreatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostResponseMultiError, or nil if none found.
func (m *CreatePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostResponseValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePostResponseMultiError(errors)
	}

	return nil
}

// CreatePostResponseMultiError is an error wrapping multiple validation errors
// returned by CreatePostResponse.ValidateAll() if the designated constraints
// aren't met.
type CreatePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostResponseMultiError) AllErrors() []error { return m }

// CreatePostResponseValidationError is the validation error returned by
// CreatePostResponse.Validate if the designated constraints aren't met.
type CreatePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostResponseValidationError) ErrorName() string {
	return "CreatePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostResponseValidationError{}

// Validate checks the field values on DeletePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostResponseMultiError, or nil if none found.
func (m *DeletePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePostResponseMultiError(errors)
	}

	return nil
}

// DeletePostResponseMultiError is an error wrapping multiple validation errors
// returned by DeletePostResponse.ValidateAll() if the designated constraints
// aren't met.
type DeletePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostResponseMultiError) AllErrors() []error { return m }

// DeletePostResponseValidationError is the validation error returned by
// DeletePostResponse.Validate if the designated constraints aren't met.
type DeletePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostResponseValidationError) ErrorName() string {
	return "DeletePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostResponseValidationError{}

// Validate checks the field values on EditPostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPostResponseMultiError, or nil if none found.
func (m *EditPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return EditPostResponseMultiError(errors)
	}

	return nil
}

// EditPostResponseMultiError is an error wrapping multiple validation errors
// returned by EditPostResponse.ValidateAll() if the designated constraints
// aren't met.
type EditPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPostResponseMultiError) AllErrors() []error { return m }

// EditPostResponseValidationError is the validation error returned by
// EditPostResponse.Validate if the designated constraints aren't met.
type EditPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPostResponseValidationError) ErrorName() string { return "EditPostResponseValidationError" }

// Error satisfies the builtin error interface
func (e EditPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPostResponseValidationError{}

// Validate checks the field values on GetPostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostResponseMultiError, or nil if none found.
func (m *GetPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostResponseValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPostResponseMultiError(errors)
	}

	return nil
}

// GetPostResponseMultiError is an error wrapping multiple validation errors
// returned by GetPostResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostResponseMultiError) AllErrors() []error { return m }

// GetPostResponseValidationError is the validation error returned by
// GetPostResponse.Validate if the designated constraints aren't met.
type GetPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostResponseValidationError) ErrorName() string { return "GetPostResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostResponseValidationError{}

// Validate checks the field values on ReportPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportPostResponseMultiError, or nil if none found.
func (m *ReportPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportPostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportPostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportPostResponseValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportPostResponseMultiError(errors)
	}

	return nil
}

// ReportPostResponseMultiError is an error wrapping multiple validation errors
// returned by ReportPostResponse.ValidateAll() if the designated constraints
// aren't met.
type ReportPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportPostResponseMultiError) AllErrors() []error { return m }

// ReportPostResponseValidationError is the validation error returned by
// ReportPostResponse.Validate if the designated constraints aren't met.
type ReportPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportPostResponseValidationError) ErrorName() string {
	return "ReportPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportPostResponseValidationError{}

// Validate checks the field values on ReactionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReactionResponseMultiError, or nil if none found.
func (m *ReactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReactionResponseMultiError(errors)
	}

	return nil
}

// ReactionResponseMultiError is an error wrapping multiple validation errors
// returned by ReactionResponse.ValidateAll() if the designated constraints
// aren't met.
type ReactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReactionResponseMultiError) AllErrors() []error { return m }

// ReactionResponseValidationError is the validation error returned by
// ReactionResponse.Validate if the designated constraints aren't met.
type ReactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactionResponseValidationError) ErrorName() string { return "ReactionResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactionResponseValidationError{}

// Validate checks the field values on GetUserFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserFeedResponseMultiError, or nil if none found.
func (m *GetUserFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	switch v := m.Timeline.(type) {
	case *GetUserFeedResponse_BaseTimeline:
		if v == nil {
			err := GetUserFeedResponseValidationError{
				field:  "Timeline",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBaseTimeline()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserFeedResponseValidationError{
						field:  "BaseTimeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserFeedResponseValidationError{
						field:  "BaseTimeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBaseTimeline()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserFeedResponseValidationError{
					field:  "BaseTimeline",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetUserFeedResponse_NotificationTimeline:
		if v == nil {
			err := GetUserFeedResponseValidationError{
				field:  "Timeline",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNotificationTimeline()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserFeedResponseValidationError{
						field:  "NotificationTimeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserFeedResponseValidationError{
						field:  "NotificationTimeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNotificationTimeline()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserFeedResponseValidationError{
					field:  "NotificationTimeline",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetUserFeedResponseMultiError(errors)
	}

	return nil
}

// GetUserFeedResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserFeedResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserFeedResponseMultiError) AllErrors() []error { return m }

// GetUserFeedResponseValidationError is the validation error returned by
// GetUserFeedResponse.Validate if the designated constraints aren't met.
type GetUserFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFeedResponseValidationError) ErrorName() string {
	return "GetUserFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFeedResponseValidationError{}

// Validate checks the field values on GetCommunityFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommunityFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommunityFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommunityFeedResponseMultiError, or nil if none found.
func (m *GetCommunityFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommunityFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	switch v := m.Timeline.(type) {
	case *GetCommunityFeedResponse_BaseTimeline:
		if v == nil {
			err := GetCommunityFeedResponseValidationError{
				field:  "Timeline",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBaseTimeline()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommunityFeedResponseValidationError{
						field:  "BaseTimeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommunityFeedResponseValidationError{
						field:  "BaseTimeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBaseTimeline()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommunityFeedResponseValidationError{
					field:  "BaseTimeline",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetCommunityFeedResponse_NotificationTimeline:
		if v == nil {
			err := GetCommunityFeedResponseValidationError{
				field:  "Timeline",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNotificationTimeline()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommunityFeedResponseValidationError{
						field:  "NotificationTimeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommunityFeedResponseValidationError{
						field:  "NotificationTimeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNotificationTimeline()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommunityFeedResponseValidationError{
					field:  "NotificationTimeline",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetCommunityFeedResponseMultiError(errors)
	}

	return nil
}

// GetCommunityFeedResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommunityFeedResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommunityFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommunityFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommunityFeedResponseMultiError) AllErrors() []error { return m }

// GetCommunityFeedResponseValidationError is the validation error returned by
// GetCommunityFeedResponse.Validate if the designated constraints aren't met.
type GetCommunityFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommunityFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommunityFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommunityFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommunityFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommunityFeedResponseValidationError) ErrorName() string {
	return "GetCommunityFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommunityFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommunityFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommunityFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommunityFeedResponseValidationError{}

// Validate checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentResponseMultiError, or nil if none found.
func (m *CreateCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Post.(type) {
	case *CreateCommentResponse_RegularPost:
		if v == nil {
			err := CreateCommentResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegularPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCommentResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCommentResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegularPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCommentResponseValidationError{
					field:  "RegularPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateCommentResponse_SharedPost:
		if v == nil {
			err := CreateCommentResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSharedPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCommentResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCommentResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSharedPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCommentResponseValidationError{
					field:  "SharedPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateCommentResponse_PollPost:
		if v == nil {
			err := CreateCommentResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPollPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCommentResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCommentResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPollPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCommentResponseValidationError{
					field:  "PollPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateCommentResponseMultiError(errors)
	}

	return nil
}

// CreateCommentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentResponseMultiError) AllErrors() []error { return m }

// CreateCommentResponseValidationError is the validation error returned by
// CreateCommentResponse.Validate if the designated constraints aren't met.
type CreateCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentResponseValidationError) ErrorName() string {
	return "CreateCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentResponseValidationError{}

// Validate checks the field values on DeleteCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentResponseMultiError, or nil if none found.
func (m *DeleteCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sucess

	if len(errors) > 0 {
		return DeleteCommentResponseMultiError(errors)
	}

	return nil
}

// DeleteCommentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentResponseMultiError) AllErrors() []error { return m }

// DeleteCommentResponseValidationError is the validation error returned by
// DeleteCommentResponse.Validate if the designated constraints aren't met.
type DeleteCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentResponseValidationError) ErrorName() string {
	return "DeleteCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentResponseValidationError{}

// Validate checks the field values on CreateTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTopicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTopicResponseMultiError, or nil if none found.
func (m *CreateTopicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTopicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TopicId

	if len(errors) > 0 {
		return CreateTopicResponseMultiError(errors)
	}

	return nil
}

// CreateTopicResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTopicResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTopicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTopicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTopicResponseMultiError) AllErrors() []error { return m }

// CreateTopicResponseValidationError is the validation error returned by
// CreateTopicResponse.Validate if the designated constraints aren't met.
type CreateTopicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTopicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTopicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTopicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTopicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTopicResponseValidationError) ErrorName() string {
	return "CreateTopicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTopicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTopicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTopicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTopicResponseValidationError{}

// Validate checks the field values on GetPostsByTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostsByTopicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostsByTopicResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostsByTopicResponseMultiError, or nil if none found.
func (m *GetPostsByTopicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostsByTopicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPostsByTopicResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPostsByTopicResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPostsByTopicResponseValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPostsByTopicResponseMultiError(errors)
	}

	return nil
}

// GetPostsByTopicResponseMultiError is an error wrapping multiple validation
// errors returned by GetPostsByTopicResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPostsByTopicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostsByTopicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostsByTopicResponseMultiError) AllErrors() []error { return m }

// GetPostsByTopicResponseValidationError is the validation error returned by
// GetPostsByTopicResponse.Validate if the designated constraints aren't met.
type GetPostsByTopicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostsByTopicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostsByTopicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostsByTopicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostsByTopicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostsByTopicResponseValidationError) ErrorName() string {
	return "GetPostsByTopicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostsByTopicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostsByTopicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostsByTopicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostsByTopicResponseValidationError{}

// Validate checks the field values on GetPendingFollowsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPendingFollowsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPendingFollowsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPendingFollowsResponseMultiError, or nil if none found.
func (m *GetPendingFollowsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPendingFollowsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPendingFollowsResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPendingFollowsResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPendingFollowsResponseValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPendingFollowsResponseMultiError(errors)
	}

	return nil
}

// GetPendingFollowsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPendingFollowsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetPendingFollowsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPendingFollowsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPendingFollowsResponseMultiError) AllErrors() []error { return m }

// GetPendingFollowsResponseValidationError is the validation error returned by
// GetPendingFollowsResponse.Validate if the designated constraints aren't met.
type GetPendingFollowsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPendingFollowsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPendingFollowsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPendingFollowsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPendingFollowsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPendingFollowsResponseValidationError) ErrorName() string {
	return "GetPendingFollowsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPendingFollowsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPendingFollowsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPendingFollowsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPendingFollowsResponseValidationError{}

// Validate checks the field values on GetCommunitiesUserFollowsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCommunitiesUserFollowsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommunitiesUserFollowsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCommunitiesUserFollowsResponseMultiError, or nil if none found.
func (m *GetCommunitiesUserFollowsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommunitiesUserFollowsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommunities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommunitiesUserFollowsResponseValidationError{
						field:  fmt.Sprintf("Communities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommunitiesUserFollowsResponseValidationError{
						field:  fmt.Sprintf("Communities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommunitiesUserFollowsResponseValidationError{
					field:  fmt.Sprintf("Communities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommunitiesUserFollowsResponseMultiError(errors)
	}

	return nil
}

// GetCommunitiesUserFollowsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetCommunitiesUserFollowsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommunitiesUserFollowsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommunitiesUserFollowsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommunitiesUserFollowsResponseMultiError) AllErrors() []error { return m }

// GetCommunitiesUserFollowsResponseValidationError is the validation error
// returned by GetCommunitiesUserFollowsResponse.Validate if the designated
// constraints aren't met.
type GetCommunitiesUserFollowsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommunitiesUserFollowsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommunitiesUserFollowsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommunitiesUserFollowsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommunitiesUserFollowsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommunitiesUserFollowsResponseValidationError) ErrorName() string {
	return "GetCommunitiesUserFollowsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommunitiesUserFollowsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommunitiesUserFollowsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommunitiesUserFollowsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommunitiesUserFollowsResponseValidationError{}

// Validate checks the field values on
// GetTopicsOfCommunitiesUserFollowsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTopicsOfCommunitiesUserFollowsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTopicsOfCommunitiesUserFollowsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetTopicsOfCommunitiesUserFollowsResponseMultiError, or nil if none found.
func (m *GetTopicsOfCommunitiesUserFollowsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopicsOfCommunitiesUserFollowsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopic() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopicsOfCommunitiesUserFollowsResponseValidationError{
						field:  fmt.Sprintf("Topic[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopicsOfCommunitiesUserFollowsResponseValidationError{
						field:  fmt.Sprintf("Topic[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopicsOfCommunitiesUserFollowsResponseValidationError{
					field:  fmt.Sprintf("Topic[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTopicsOfCommunitiesUserFollowsResponseMultiError(errors)
	}

	return nil
}

// GetTopicsOfCommunitiesUserFollowsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetTopicsOfCommunitiesUserFollowsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTopicsOfCommunitiesUserFollowsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopicsOfCommunitiesUserFollowsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopicsOfCommunitiesUserFollowsResponseMultiError) AllErrors() []error { return m }

// GetTopicsOfCommunitiesUserFollowsResponseValidationError is the validation
// error returned by GetTopicsOfCommunitiesUserFollowsResponse.Validate if the
// designated constraints aren't met.
type GetTopicsOfCommunitiesUserFollowsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicsOfCommunitiesUserFollowsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicsOfCommunitiesUserFollowsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicsOfCommunitiesUserFollowsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicsOfCommunitiesUserFollowsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicsOfCommunitiesUserFollowsResponseValidationError) ErrorName() string {
	return "GetTopicsOfCommunitiesUserFollowsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopicsOfCommunitiesUserFollowsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicsOfCommunitiesUserFollowsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicsOfCommunitiesUserFollowsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicsOfCommunitiesUserFollowsResponseValidationError{}

// Validate checks the field values on GetUserProfilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfilesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfilesResponseMultiError, or nil if none found.
func (m *GetUserProfilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageNumber

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfilesResponseValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfilesResponseValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfilesResponseValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserProfilesResponseMultiError(errors)
	}

	return nil
}

// GetUserProfilesResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserProfilesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfilesResponseMultiError) AllErrors() []error { return m }

// GetUserProfilesResponseValidationError is the validation error returned by
// GetUserProfilesResponse.Validate if the designated constraints aren't met.
type GetUserProfilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfilesResponseValidationError) ErrorName() string {
	return "GetUserProfilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfilesResponseValidationError{}

// Validate checks the field values on GetCommunityProfilesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommunityProfilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommunityProfilesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommunityProfilesResponseMultiError, or nil if none found.
func (m *GetCommunityProfilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommunityProfilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageNumber

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommunityProfilesResponseValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommunityProfilesResponseValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommunityProfilesResponseValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommunityProfilesResponseMultiError(errors)
	}

	return nil
}

// GetCommunityProfilesResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommunityProfilesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCommunityProfilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommunityProfilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommunityProfilesResponseMultiError) AllErrors() []error { return m }

// GetCommunityProfilesResponseValidationError is the validation error returned
// by GetCommunityProfilesResponse.Validate if the designated constraints
// aren't met.
type GetCommunityProfilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommunityProfilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommunityProfilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommunityProfilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommunityProfilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommunityProfilesResponseValidationError) ErrorName() string {
	return "GetCommunityProfilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommunityProfilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommunityProfilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommunityProfilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommunityProfilesResponseValidationError{}

// Validate checks the field values on AddPostQualityScoreResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostQualityScoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostQualityScoreResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostQualityScoreResponseMultiError, or nil if none found.
func (m *AddPostQualityScoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostQualityScoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Post.(type) {
	case *AddPostQualityScoreResponse_RegularPost:
		if v == nil {
			err := AddPostQualityScoreResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegularPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddPostQualityScoreResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddPostQualityScoreResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegularPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddPostQualityScoreResponseValidationError{
					field:  "RegularPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddPostQualityScoreResponse_SharedPost:
		if v == nil {
			err := AddPostQualityScoreResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSharedPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddPostQualityScoreResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddPostQualityScoreResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSharedPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddPostQualityScoreResponseValidationError{
					field:  "SharedPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddPostQualityScoreResponse_PollPost:
		if v == nil {
			err := AddPostQualityScoreResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPollPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddPostQualityScoreResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddPostQualityScoreResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPollPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddPostQualityScoreResponseValidationError{
					field:  "PollPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddPostQualityScoreResponseMultiError(errors)
	}

	return nil
}

// AddPostQualityScoreResponseMultiError is an error wrapping multiple
// validation errors returned by AddPostQualityScoreResponse.ValidateAll() if
// the designated constraints aren't met.
type AddPostQualityScoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostQualityScoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostQualityScoreResponseMultiError) AllErrors() []error { return m }

// AddPostQualityScoreResponseValidationError is the validation error returned
// by AddPostQualityScoreResponse.Validate if the designated constraints
// aren't met.
type AddPostQualityScoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostQualityScoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostQualityScoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostQualityScoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostQualityScoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostQualityScoreResponseValidationError) ErrorName() string {
	return "AddPostQualityScoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostQualityScoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostQualityScoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostQualityScoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostQualityScoreResponseValidationError{}

// Validate checks the field values on GetBlogPostsByTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlogPostsByTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlogPostsByTagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlogPostsByTagResponseMultiError, or nil if none found.
func (m *GetBlogPostsByTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlogPostsByTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBlogPostsByTagResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBlogPostsByTagResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBlogPostsByTagResponseValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBlogPostsByTagResponseMultiError(errors)
	}

	return nil
}

// GetBlogPostsByTagResponseMultiError is an error wrapping multiple validation
// errors returned by GetBlogPostsByTagResponse.ValidateAll() if the
// designated constraints aren't met.
type GetBlogPostsByTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlogPostsByTagResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlogPostsByTagResponseMultiError) AllErrors() []error { return m }

// GetBlogPostsByTagResponseValidationError is the validation error returned by
// GetBlogPostsByTagResponse.Validate if the designated constraints aren't met.
type GetBlogPostsByTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlogPostsByTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlogPostsByTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlogPostsByTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlogPostsByTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlogPostsByTagResponseValidationError) ErrorName() string {
	return "GetBlogPostsByTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlogPostsByTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlogPostsByTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlogPostsByTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlogPostsByTagResponseValidationError{}

// Validate checks the field values on ReportCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCommentResponseMultiError, or nil if none found.
func (m *ReportCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportCommentResponseMultiError(errors)
	}

	return nil
}

// ReportCommentResponseMultiError is an error wrapping multiple validation
// errors returned by ReportCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCommentResponseMultiError) AllErrors() []error { return m }

// ReportCommentResponseValidationError is the validation error returned by
// ReportCommentResponse.Validate if the designated constraints aren't met.
type ReportCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCommentResponseValidationError) ErrorName() string {
	return "ReportCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCommentResponseValidationError{}

// Validate checks the field values on PostsPaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostsPaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostsPaginationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostsPaginationResponseMultiError, or nil if none found.
func (m *PostsPaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostsPaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostsPaginationResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostsPaginationResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostsPaginationResponseValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return PostsPaginationResponseMultiError(errors)
	}

	return nil
}

// PostsPaginationResponseMultiError is an error wrapping multiple validation
// errors returned by PostsPaginationResponse.ValidateAll() if the designated
// constraints aren't met.
type PostsPaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostsPaginationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostsPaginationResponseMultiError) AllErrors() []error { return m }

// PostsPaginationResponseValidationError is the validation error returned by
// PostsPaginationResponse.Validate if the designated constraints aren't met.
type PostsPaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostsPaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostsPaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostsPaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostsPaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostsPaginationResponseValidationError) ErrorName() string {
	return "PostsPaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostsPaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostsPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostsPaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostsPaginationResponseValidationError{}

// Validate checks the field values on DiscoverProfilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoverProfilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoverProfilesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoverProfilesResponseMultiError, or nil if none found.
func (m *DiscoverProfilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoverProfilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommunityProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscoverProfilesResponseValidationError{
						field:  fmt.Sprintf("CommunityProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscoverProfilesResponseValidationError{
						field:  fmt.Sprintf("CommunityProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscoverProfilesResponseValidationError{
					field:  fmt.Sprintf("CommunityProfiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscoverProfilesResponseValidationError{
						field:  fmt.Sprintf("UserProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscoverProfilesResponseValidationError{
						field:  fmt.Sprintf("UserProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscoverProfilesResponseValidationError{
					field:  fmt.Sprintf("UserProfiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscoverProfilesResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscoverProfilesResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscoverProfilesResponseValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiscoverProfilesResponseMultiError(errors)
	}

	return nil
}

// DiscoverProfilesResponseMultiError is an error wrapping multiple validation
// errors returned by DiscoverProfilesResponse.ValidateAll() if the designated
// constraints aren't met.
type DiscoverProfilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoverProfilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoverProfilesResponseMultiError) AllErrors() []error { return m }

// DiscoverProfilesResponseValidationError is the validation error returned by
// DiscoverProfilesResponse.Validate if the designated constraints aren't met.
type DiscoverProfilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoverProfilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoverProfilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoverProfilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoverProfilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoverProfilesResponseValidationError) ErrorName() string {
	return "DiscoverProfilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoverProfilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoverProfilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoverProfilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoverProfilesResponseValidationError{}

// Validate checks the field values on DeleteCommunityProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommunityProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommunityProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCommunityProfileResponseMultiError, or nil if none found.
func (m *DeleteCommunityProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommunityProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteCommunityProfileResponseMultiError(errors)
	}

	return nil
}

// DeleteCommunityProfileResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCommunityProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteCommunityProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommunityProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommunityProfileResponseMultiError) AllErrors() []error { return m }

// DeleteCommunityProfileResponseValidationError is the validation error
// returned by DeleteCommunityProfileResponse.Validate if the designated
// constraints aren't met.
type DeleteCommunityProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommunityProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommunityProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommunityProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommunityProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommunityProfileResponseValidationError) ErrorName() string {
	return "DeleteCommunityProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommunityProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommunityProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommunityProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommunityProfileResponseValidationError{}

// Validate checks the field values on FollowProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FollowProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowProfileResponseMultiError, or nil if none found.
func (m *FollowProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return FollowProfileResponseMultiError(errors)
	}

	return nil
}

// FollowProfileResponseMultiError is an error wrapping multiple validation
// errors returned by FollowProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type FollowProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowProfileResponseMultiError) AllErrors() []error { return m }

// FollowProfileResponseValidationError is the validation error returned by
// FollowProfileResponse.Validate if the designated constraints aren't met.
type FollowProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowProfileResponseValidationError) ErrorName() string {
	return "FollowProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FollowProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowProfileResponseValidationError{}

// Validate checks the field values on AddCommentQualityScoreResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCommentQualityScoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentQualityScoreResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddCommentQualityScoreResponseMultiError, or nil if none found.
func (m *AddCommentQualityScoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentQualityScoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddCommentQualityScoreResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddCommentQualityScoreResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCommentQualityScoreResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddCommentQualityScoreResponseMultiError(errors)
	}

	return nil
}

// AddCommentQualityScoreResponseMultiError is an error wrapping multiple
// validation errors returned by AddCommentQualityScoreResponse.ValidateAll()
// if the designated constraints aren't met.
type AddCommentQualityScoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentQualityScoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentQualityScoreResponseMultiError) AllErrors() []error { return m }

// AddCommentQualityScoreResponseValidationError is the validation error
// returned by AddCommentQualityScoreResponse.Validate if the designated
// constraints aren't met.
type AddCommentQualityScoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentQualityScoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentQualityScoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentQualityScoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentQualityScoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentQualityScoreResponseValidationError) ErrorName() string {
	return "AddCommentQualityScoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentQualityScoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentQualityScoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentQualityScoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentQualityScoreResponseValidationError{}

// Validate checks the field values on GetCommunityBlogPostsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommunityBlogPostsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommunityBlogPostsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommunityBlogPostsResponseMultiError, or nil if none found.
func (m *GetCommunityBlogPostsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommunityBlogPostsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommunityBlogPostsResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommunityBlogPostsResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommunityBlogPostsResponseValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommunityBlogPostsResponseMultiError(errors)
	}

	return nil
}

// GetCommunityBlogPostsResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommunityBlogPostsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCommunityBlogPostsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommunityBlogPostsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommunityBlogPostsResponseMultiError) AllErrors() []error { return m }

// GetCommunityBlogPostsResponseValidationError is the validation error
// returned by GetCommunityBlogPostsResponse.Validate if the designated
// constraints aren't met.
type GetCommunityBlogPostsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommunityBlogPostsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommunityBlogPostsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommunityBlogPostsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommunityBlogPostsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommunityBlogPostsResponseValidationError) ErrorName() string {
	return "GetCommunityBlogPostsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommunityBlogPostsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommunityBlogPostsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommunityBlogPostsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommunityBlogPostsResponseValidationError{}

// Validate checks the field values on CreatePollRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePollRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePollRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePollRequestMultiError, or nil if none found.
func (m *CreatePollRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePollRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CreatePollRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPoll() == nil {
		err := CreatePollRequestValidationError{
			field:  "Poll",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPoll()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePollRequestValidationError{
					field:  "Poll",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePollRequestValidationError{
					field:  "Poll",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoll()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePollRequestValidationError{
				field:  "Poll",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePollRequestMultiError(errors)
	}

	return nil
}

// CreatePollRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePollRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePollRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePollRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePollRequestMultiError) AllErrors() []error { return m }

// CreatePollRequestValidationError is the validation error returned by
// CreatePollRequest.Validate if the designated constraints aren't met.
type CreatePollRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePollRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePollRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePollRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePollRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePollRequestValidationError) ErrorName() string {
	return "CreatePollRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePollRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePollRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePollRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePollRequestValidationError{}

// Validate checks the field values on CreatePollResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePollResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePollResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePollResponseMultiError, or nil if none found.
func (m *CreatePollResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePollResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PollId

	if len(errors) > 0 {
		return CreatePollResponseMultiError(errors)
	}

	return nil
}

// CreatePollResponseMultiError is an error wrapping multiple validation errors
// returned by CreatePollResponse.ValidateAll() if the designated constraints
// aren't met.
type CreatePollResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePollResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePollResponseMultiError) AllErrors() []error { return m }

// CreatePollResponseValidationError is the validation error returned by
// CreatePollResponse.Validate if the designated constraints aren't met.
type CreatePollResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePollResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePollResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePollResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePollResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePollResponseValidationError) ErrorName() string {
	return "CreatePollResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePollResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePollResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePollResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePollResponseValidationError{}

// Validate checks the field values on DeletePollRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePollRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePollRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePollRequestMultiError, or nil if none found.
func (m *DeletePollRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePollRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DeletePollRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := DeletePollRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePollRequestMultiError(errors)
	}

	return nil
}

// DeletePollRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePollRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePollRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePollRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePollRequestMultiError) AllErrors() []error { return m }

// DeletePollRequestValidationError is the validation error returned by
// DeletePollRequest.Validate if the designated constraints aren't met.
type DeletePollRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePollRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePollRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePollRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePollRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePollRequestValidationError) ErrorName() string {
	return "DeletePollRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePollRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePollRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePollRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePollRequestValidationError{}

// Validate checks the field values on DeletePollResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePollResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePollResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePollResponseMultiError, or nil if none found.
func (m *DeletePollResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePollResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePollResponseMultiError(errors)
	}

	return nil
}

// DeletePollResponseMultiError is an error wrapping multiple validation errors
// returned by DeletePollResponse.ValidateAll() if the designated constraints
// aren't met.
type DeletePollResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePollResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePollResponseMultiError) AllErrors() []error { return m }

// DeletePollResponseValidationError is the validation error returned by
// DeletePollResponse.Validate if the designated constraints aren't met.
type DeletePollResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePollResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePollResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePollResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePollResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePollResponseValidationError) ErrorName() string {
	return "DeletePollResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePollResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePollResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePollResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePollResponseValidationError{}

// Validate checks the field values on GetPollRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPollRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPollRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPollRequestMultiError,
// or nil if none found.
func (m *GetPollRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPollRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetPollRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := GetPollRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPollRequestMultiError(errors)
	}

	return nil
}

// GetPollRequestMultiError is an error wrapping multiple validation errors
// returned by GetPollRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPollRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPollRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPollRequestMultiError) AllErrors() []error { return m }

// GetPollRequestValidationError is the validation error returned by
// GetPollRequest.Validate if the designated constraints aren't met.
type GetPollRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPollRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPollRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPollRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPollRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPollRequestValidationError) ErrorName() string { return "GetPollRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPollRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPollRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPollRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPollRequestValidationError{}

// Validate checks the field values on GetPollResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPollResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPollResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPollResponseMultiError, or nil if none found.
func (m *GetPollResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPollResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPoll()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPollResponseValidationError{
					field:  "Poll",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPollResponseValidationError{
					field:  "Poll",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoll()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPollResponseValidationError{
				field:  "Poll",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPollResponseMultiError(errors)
	}

	return nil
}

// GetPollResponseMultiError is an error wrapping multiple validation errors
// returned by GetPollResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPollResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPollResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPollResponseMultiError) AllErrors() []error { return m }

// GetPollResponseValidationError is the validation error returned by
// GetPollResponse.Validate if the designated constraints aren't met.
type GetPollResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPollResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPollResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPollResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPollResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPollResponseValidationError) ErrorName() string { return "GetPollResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPollResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPollResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPollResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPollResponseValidationError{}

// Validate checks the field values on GetPollsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPollsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPollsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPollsRequestMultiError, or nil if none found.
func (m *GetPollsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPollsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetPollsRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPollsRequestMultiError(errors)
	}

	return nil
}

// GetPollsRequestMultiError is an error wrapping multiple validation errors
// returned by GetPollsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPollsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPollsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPollsRequestMultiError) AllErrors() []error { return m }

// GetPollsRequestValidationError is the validation error returned by
// GetPollsRequest.Validate if the designated constraints aren't met.
type GetPollsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPollsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPollsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPollsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPollsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPollsRequestValidationError) ErrorName() string { return "GetPollsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPollsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPollsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPollsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPollsRequestValidationError{}

// Validate checks the field values on GetPollsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPollsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPollsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPollsResponseMultiError, or nil if none found.
func (m *GetPollsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPollsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPollsResponseValidationError{
						field:  fmt.Sprintf("Polls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPollsResponseValidationError{
						field:  fmt.Sprintf("Polls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPollsResponseValidationError{
					field:  fmt.Sprintf("Polls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPollsResponseMultiError(errors)
	}

	return nil
}

// GetPollsResponseMultiError is an error wrapping multiple validation errors
// returned by GetPollsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPollsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPollsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPollsResponseMultiError) AllErrors() []error { return m }

// GetPollsResponseValidationError is the validation error returned by
// GetPollsResponse.Validate if the designated constraints aren't met.
type GetPollsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPollsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPollsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPollsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPollsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPollsResponseValidationError) ErrorName() string { return "GetPollsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPollsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPollsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPollsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPollsResponseValidationError{}

// Validate checks the field values on RespondToPollRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RespondToPollRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondToPollRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RespondToPollRequestMultiError, or nil if none found.
func (m *RespondToPollRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondToPollRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := RespondToPollRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPollId()) < 1 {
		err := RespondToPollRequestValidationError{
			field:  "PollId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPollOption()) < 1 {
		err := RespondToPollRequestValidationError{
			field:  "PollOption",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPollOptionIdx() < 0 {
		err := RespondToPollRequestValidationError{
			field:  "PollOptionIdx",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RespondToPollRequestMultiError(errors)
	}

	return nil
}

// RespondToPollRequestMultiError is an error wrapping multiple validation
// errors returned by RespondToPollRequest.ValidateAll() if the designated
// constraints aren't met.
type RespondToPollRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondToPollRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondToPollRequestMultiError) AllErrors() []error { return m }

// RespondToPollRequestValidationError is the validation error returned by
// RespondToPollRequest.Validate if the designated constraints aren't met.
type RespondToPollRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondToPollRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondToPollRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondToPollRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondToPollRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondToPollRequestValidationError) ErrorName() string {
	return "RespondToPollRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RespondToPollRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondToPollRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondToPollRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondToPollRequestValidationError{}

// Validate checks the field values on RespondToPollResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RespondToPollResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondToPollResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RespondToPollResponseMultiError, or nil if none found.
func (m *RespondToPollResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondToPollResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPoll()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondToPollResponseValidationError{
					field:  "Poll",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondToPollResponseValidationError{
					field:  "Poll",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoll()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondToPollResponseValidationError{
				field:  "Poll",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RespondToPollResponseMultiError(errors)
	}

	return nil
}

// RespondToPollResponseMultiError is an error wrapping multiple validation
// errors returned by RespondToPollResponse.ValidateAll() if the designated
// constraints aren't met.
type RespondToPollResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondToPollResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondToPollResponseMultiError) AllErrors() []error { return m }

// RespondToPollResponseValidationError is the validation error returned by
// RespondToPollResponse.Validate if the designated constraints aren't met.
type RespondToPollResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondToPollResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondToPollResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondToPollResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondToPollResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondToPollResponseValidationError) ErrorName() string {
	return "RespondToPollResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RespondToPollResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondToPollResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondToPollResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondToPollResponseValidationError{}

// Validate checks the field values on CreateNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateNoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNoteRequestMultiError, or nil if none found.
func (m *CreateNoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CreateNoteRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := CreateNoteRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateNoteRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := CreateNoteRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNote() == nil {
		err := CreateNoteRequestValidationError{
			field:  "Note",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNote()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNoteRequestValidationError{
					field:  "Note",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNoteRequestValidationError{
					field:  "Note",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNote()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNoteRequestValidationError{
				field:  "Note",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNoteRequestMultiError(errors)
	}

	return nil
}

// CreateNoteRequestMultiError is an error wrapping multiple validation errors
// returned by CreateNoteRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateNoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNoteRequestMultiError) AllErrors() []error { return m }

// CreateNoteRequestValidationError is the validation error returned by
// CreateNoteRequest.Validate if the designated constraints aren't met.
type CreateNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoteRequestValidationError) ErrorName() string {
	return "CreateNoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoteRequestValidationError{}

var _CreateNoteRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on CreateNoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNoteResponseMultiError, or nil if none found.
func (m *CreateNoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Post.(type) {
	case *CreateNoteResponse_RegularPost:
		if v == nil {
			err := CreateNoteResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegularPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNoteResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNoteResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegularPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNoteResponseValidationError{
					field:  "RegularPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateNoteResponse_SharedPost:
		if v == nil {
			err := CreateNoteResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSharedPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNoteResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNoteResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSharedPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNoteResponseValidationError{
					field:  "SharedPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateNoteResponse_PollPost:
		if v == nil {
			err := CreateNoteResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPollPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNoteResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNoteResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPollPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNoteResponseValidationError{
					field:  "PollPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateNoteResponseMultiError(errors)
	}

	return nil
}

// CreateNoteResponseMultiError is an error wrapping multiple validation errors
// returned by CreateNoteResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateNoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNoteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNoteResponseMultiError) AllErrors() []error { return m }

// CreateNoteResponseValidationError is the validation error returned by
// CreateNoteResponse.Validate if the designated constraints aren't met.
type CreateNoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoteResponseValidationError) ErrorName() string {
	return "CreateNoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoteResponseValidationError{}

// Validate checks the field values on DeleteNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteNoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNoteRequestMultiError, or nil if none found.
func (m *DeleteNoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DeleteNoteRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := DeleteNoteRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNoteId()) < 1 {
		err := DeleteNoteRequestValidationError{
			field:  "NoteId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DeleteNoteRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := DeleteNoteRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNoteRequestMultiError(errors)
	}

	return nil
}

// DeleteNoteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteNoteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteNoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNoteRequestMultiError) AllErrors() []error { return m }

// DeleteNoteRequestValidationError is the validation error returned by
// DeleteNoteRequest.Validate if the designated constraints aren't met.
type DeleteNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNoteRequestValidationError) ErrorName() string {
	return "DeleteNoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNoteRequestValidationError{}

var _DeleteNoteRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on DeleteNoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNoteResponseMultiError, or nil if none found.
func (m *DeleteNoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteNoteResponseMultiError(errors)
	}

	return nil
}

// DeleteNoteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteNoteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteNoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNoteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNoteResponseMultiError) AllErrors() []error { return m }

// DeleteNoteResponseValidationError is the validation error returned by
// DeleteNoteResponse.Validate if the designated constraints aren't met.
type DeleteNoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNoteResponseValidationError) ErrorName() string {
	return "DeleteNoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNoteResponseValidationError{}

// Validate checks the field values on EditNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditNoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditNoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditNoteRequestMultiError, or nil if none found.
func (m *EditNoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditNoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := EditNoteRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := EditNoteRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNoteId()) < 1 {
		err := EditNoteRequestValidationError{
			field:  "NoteId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNote() == nil {
		err := EditNoteRequestValidationError{
			field:  "Note",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNote()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditNoteRequestValidationError{
					field:  "Note",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditNoteRequestValidationError{
					field:  "Note",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNote()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditNoteRequestValidationError{
				field:  "Note",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _EditNoteRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := EditNoteRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditNoteRequestMultiError(errors)
	}

	return nil
}

// EditNoteRequestMultiError is an error wrapping multiple validation errors
// returned by EditNoteRequest.ValidateAll() if the designated constraints
// aren't met.
type EditNoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditNoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditNoteRequestMultiError) AllErrors() []error { return m }

// EditNoteRequestValidationError is the validation error returned by
// EditNoteRequest.Validate if the designated constraints aren't met.
type EditNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditNoteRequestValidationError) ErrorName() string { return "EditNoteRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditNoteRequestValidationError{}

var _EditNoteRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on EditNoteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditNoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditNoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditNoteResponseMultiError, or nil if none found.
func (m *EditNoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditNoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Post.(type) {
	case *EditNoteResponse_RegularPost:
		if v == nil {
			err := EditNoteResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegularPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EditNoteResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EditNoteResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegularPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EditNoteResponseValidationError{
					field:  "RegularPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EditNoteResponse_SharedPost:
		if v == nil {
			err := EditNoteResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSharedPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EditNoteResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EditNoteResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSharedPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EditNoteResponseValidationError{
					field:  "SharedPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EditNoteResponse_PollPost:
		if v == nil {
			err := EditNoteResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPollPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EditNoteResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EditNoteResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPollPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EditNoteResponseValidationError{
					field:  "PollPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EditNoteResponseMultiError(errors)
	}

	return nil
}

// EditNoteResponseMultiError is an error wrapping multiple validation errors
// returned by EditNoteResponse.ValidateAll() if the designated constraints
// aren't met.
type EditNoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditNoteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditNoteResponseMultiError) AllErrors() []error { return m }

// EditNoteResponseValidationError is the validation error returned by
// EditNoteResponse.Validate if the designated constraints aren't met.
type EditNoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditNoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditNoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditNoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditNoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditNoteResponseValidationError) ErrorName() string { return "EditNoteResponseValidationError" }

// Error satisfies the builtin error interface
func (e EditNoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditNoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditNoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditNoteResponseValidationError{}

// Validate checks the field values on CreatePublicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePublicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePublicationRequestMultiError, or nil if none found.
func (m *CreatePublicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CreatePublicationRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPublication() == nil {
		err := CreatePublicationRequestValidationError{
			field:  "Publication",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPublication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublicationRequestValidationError{
					field:  "Publication",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublicationRequestValidationError{
					field:  "Publication",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublicationRequestValidationError{
				field:  "Publication",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePublicationRequestMultiError(errors)
	}

	return nil
}

// CreatePublicationRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePublicationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePublicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublicationRequestMultiError) AllErrors() []error { return m }

// CreatePublicationRequestValidationError is the validation error returned by
// CreatePublicationRequest.Validate if the designated constraints aren't met.
type CreatePublicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublicationRequestValidationError) ErrorName() string {
	return "CreatePublicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublicationRequestValidationError{}

// Validate checks the field values on CreatePublicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePublicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePublicationResponseMultiError, or nil if none found.
func (m *CreatePublicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreatePublicationResponseMultiError(errors)
	}

	return nil
}

// CreatePublicationResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePublicationResponse.ValidateAll() if the
// designated constraints aren't met.
type CreatePublicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublicationResponseMultiError) AllErrors() []error { return m }

// CreatePublicationResponseValidationError is the validation error returned by
// CreatePublicationResponse.Validate if the designated constraints aren't met.
type CreatePublicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublicationResponseValidationError) ErrorName() string {
	return "CreatePublicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublicationResponseValidationError{}

// Validate checks the field values on GetPublicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicationRequestMultiError, or nil if none found.
func (m *GetPublicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetPublicationRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPublicationId() <= 1 {
		err := GetPublicationRequestValidationError{
			field:  "PublicationId",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPublicationRequestMultiError(errors)
	}

	return nil
}

// GetPublicationRequestMultiError is an error wrapping multiple validation
// errors returned by GetPublicationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPublicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicationRequestMultiError) AllErrors() []error { return m }

// GetPublicationRequestValidationError is the validation error returned by
// GetPublicationRequest.Validate if the designated constraints aren't met.
type GetPublicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicationRequestValidationError) ErrorName() string {
	return "GetPublicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicationRequestValidationError{}

// Validate checks the field values on GetPublicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicationResponseMultiError, or nil if none found.
func (m *GetPublicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPublication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicationResponseValidationError{
					field:  "Publication",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicationResponseValidationError{
					field:  "Publication",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicationResponseValidationError{
				field:  "Publication",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPublicationResponseMultiError(errors)
	}

	return nil
}

// GetPublicationResponseMultiError is an error wrapping multiple validation
// errors returned by GetPublicationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPublicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicationResponseMultiError) AllErrors() []error { return m }

// GetPublicationResponseValidationError is the validation error returned by
// GetPublicationResponse.Validate if the designated constraints aren't met.
type GetPublicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicationResponseValidationError) ErrorName() string {
	return "GetPublicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicationResponseValidationError{}

// Validate checks the field values on DeletePublicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePublicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePublicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePublicationRequestMultiError, or nil if none found.
func (m *DeletePublicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePublicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAdminUserId() <= 0 {
		err := DeletePublicationRequestValidationError{
			field:  "AdminUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPublicationId() <= 1 {
		err := DeletePublicationRequestValidationError{
			field:  "PublicationId",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePublicationRequestMultiError(errors)
	}

	return nil
}

// DeletePublicationRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePublicationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePublicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePublicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePublicationRequestMultiError) AllErrors() []error { return m }

// DeletePublicationRequestValidationError is the validation error returned by
// DeletePublicationRequest.Validate if the designated constraints aren't met.
type DeletePublicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePublicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePublicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePublicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePublicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePublicationRequestValidationError) ErrorName() string {
	return "DeletePublicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePublicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePublicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePublicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePublicationRequestValidationError{}

// Validate checks the field values on DeletePublicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePublicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePublicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePublicationResponseMultiError, or nil if none found.
func (m *DeletePublicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePublicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePublicationResponseMultiError(errors)
	}

	return nil
}

// DeletePublicationResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePublicationResponse.ValidateAll() if the
// designated constraints aren't met.
type DeletePublicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePublicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePublicationResponseMultiError) AllErrors() []error { return m }

// DeletePublicationResponseValidationError is the validation error returned by
// DeletePublicationResponse.Validate if the designated constraints aren't met.
type DeletePublicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePublicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePublicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePublicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePublicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePublicationResponseValidationError) ErrorName() string {
	return "DeletePublicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePublicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePublicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePublicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePublicationResponseValidationError{}

// Validate checks the field values on AddPublicationEditorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPublicationEditorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPublicationEditorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPublicationEditorRequestMultiError, or nil if none found.
func (m *AddPublicationEditorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPublicationEditorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAdminUserId() <= 0 {
		err := AddPublicationEditorRequestValidationError{
			field:  "AdminUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEditorUserId() <= 0 {
		err := AddPublicationEditorRequestValidationError{
			field:  "EditorUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPublicationId() <= 0 {
		err := AddPublicationEditorRequestValidationError{
			field:  "PublicationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddPublicationEditorRequestMultiError(errors)
	}

	return nil
}

// AddPublicationEditorRequestMultiError is an error wrapping multiple
// validation errors returned by AddPublicationEditorRequest.ValidateAll() if
// the designated constraints aren't met.
type AddPublicationEditorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPublicationEditorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPublicationEditorRequestMultiError) AllErrors() []error { return m }

// AddPublicationEditorRequestValidationError is the validation error returned
// by AddPublicationEditorRequest.Validate if the designated constraints
// aren't met.
type AddPublicationEditorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPublicationEditorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPublicationEditorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPublicationEditorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPublicationEditorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPublicationEditorRequestValidationError) ErrorName() string {
	return "AddPublicationEditorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPublicationEditorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPublicationEditorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPublicationEditorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPublicationEditorRequestValidationError{}

// Validate checks the field values on AddPublicationEditorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPublicationEditorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPublicationEditorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPublicationEditorResponseMultiError, or nil if none found.
func (m *AddPublicationEditorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPublicationEditorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPublication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddPublicationEditorResponseValidationError{
					field:  "Publication",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddPublicationEditorResponseValidationError{
					field:  "Publication",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddPublicationEditorResponseValidationError{
				field:  "Publication",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddPublicationEditorResponseMultiError(errors)
	}

	return nil
}

// AddPublicationEditorResponseMultiError is an error wrapping multiple
// validation errors returned by AddPublicationEditorResponse.ValidateAll() if
// the designated constraints aren't met.
type AddPublicationEditorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPublicationEditorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPublicationEditorResponseMultiError) AllErrors() []error { return m }

// AddPublicationEditorResponseValidationError is the validation error returned
// by AddPublicationEditorResponse.Validate if the designated constraints
// aren't met.
type AddPublicationEditorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPublicationEditorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPublicationEditorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPublicationEditorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPublicationEditorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPublicationEditorResponseValidationError) ErrorName() string {
	return "AddPublicationEditorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPublicationEditorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPublicationEditorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPublicationEditorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPublicationEditorResponseValidationError{}

// Validate checks the field values on DeletePublicationEditorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePublicationEditorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePublicationEditorRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePublicationEditorRequestMultiError, or nil if none found.
func (m *DeletePublicationEditorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePublicationEditorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAdminUserId() <= 0 {
		err := DeletePublicationEditorRequestValidationError{
			field:  "AdminUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEditorUserId() <= 0 {
		err := DeletePublicationEditorRequestValidationError{
			field:  "EditorUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPublicationId() <= 0 {
		err := DeletePublicationEditorRequestValidationError{
			field:  "PublicationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePublicationEditorRequestMultiError(errors)
	}

	return nil
}

// DeletePublicationEditorRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePublicationEditorRequest.ValidateAll()
// if the designated constraints aren't met.
type DeletePublicationEditorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePublicationEditorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePublicationEditorRequestMultiError) AllErrors() []error { return m }

// DeletePublicationEditorRequestValidationError is the validation error
// returned by DeletePublicationEditorRequest.Validate if the designated
// constraints aren't met.
type DeletePublicationEditorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePublicationEditorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePublicationEditorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePublicationEditorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePublicationEditorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePublicationEditorRequestValidationError) ErrorName() string {
	return "DeletePublicationEditorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePublicationEditorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePublicationEditorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePublicationEditorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePublicationEditorRequestValidationError{}

// Validate checks the field values on DeletePublicationEditorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePublicationEditorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePublicationEditorResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePublicationEditorResponseMultiError, or nil if none found.
func (m *DeletePublicationEditorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePublicationEditorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePublicationEditorResponseMultiError(errors)
	}

	return nil
}

// DeletePublicationEditorResponseMultiError is an error wrapping multiple
// validation errors returned by DeletePublicationEditorResponse.ValidateAll()
// if the designated constraints aren't met.
type DeletePublicationEditorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePublicationEditorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePublicationEditorResponseMultiError) AllErrors() []error { return m }

// DeletePublicationEditorResponseValidationError is the validation error
// returned by DeletePublicationEditorResponse.Validate if the designated
// constraints aren't met.
type DeletePublicationEditorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePublicationEditorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePublicationEditorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePublicationEditorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePublicationEditorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePublicationEditorResponseValidationError) ErrorName() string {
	return "DeletePublicationEditorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePublicationEditorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePublicationEditorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePublicationEditorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePublicationEditorResponseValidationError{}

// Validate checks the field values on AddPostToPublicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostToPublicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostToPublicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostToPublicationRequestMultiError, or nil if none found.
func (m *AddPostToPublicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostToPublicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEditorUserId() <= 0 {
		err := AddPostToPublicationRequestValidationError{
			field:  "EditorUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPublicationId() <= 0 {
		err := AddPostToPublicationRequestValidationError{
			field:  "PublicationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPost() == nil {
		err := AddPostToPublicationRequestValidationError{
			field:  "Post",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddPostToPublicationRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddPostToPublicationRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddPostToPublicationRequestValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddPostToPublicationRequestMultiError(errors)
	}

	return nil
}

// AddPostToPublicationRequestMultiError is an error wrapping multiple
// validation errors returned by AddPostToPublicationRequest.ValidateAll() if
// the designated constraints aren't met.
type AddPostToPublicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostToPublicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostToPublicationRequestMultiError) AllErrors() []error { return m }

// AddPostToPublicationRequestValidationError is the validation error returned
// by AddPostToPublicationRequest.Validate if the designated constraints
// aren't met.
type AddPostToPublicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostToPublicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostToPublicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostToPublicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostToPublicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostToPublicationRequestValidationError) ErrorName() string {
	return "AddPostToPublicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostToPublicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostToPublicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostToPublicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostToPublicationRequestValidationError{}

// Validate checks the field values on AddPostToPublicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostToPublicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostToPublicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostToPublicationResponseMultiError, or nil if none found.
func (m *AddPostToPublicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostToPublicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPublication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddPostToPublicationResponseValidationError{
					field:  "Publication",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddPostToPublicationResponseValidationError{
					field:  "Publication",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddPostToPublicationResponseValidationError{
				field:  "Publication",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddPostToPublicationResponseMultiError(errors)
	}

	return nil
}

// AddPostToPublicationResponseMultiError is an error wrapping multiple
// validation errors returned by AddPostToPublicationResponse.ValidateAll() if
// the designated constraints aren't met.
type AddPostToPublicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostToPublicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostToPublicationResponseMultiError) AllErrors() []error { return m }

// AddPostToPublicationResponseValidationError is the validation error returned
// by AddPostToPublicationResponse.Validate if the designated constraints
// aren't met.
type AddPostToPublicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostToPublicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostToPublicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostToPublicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostToPublicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostToPublicationResponseValidationError) ErrorName() string {
	return "AddPostToPublicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostToPublicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostToPublicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostToPublicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostToPublicationResponseValidationError{}

// Validate checks the field values on DeletePostFromPublicationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeletePostFromPublicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostFromPublicationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePostFromPublicationRequestMultiError, or nil if none found.
func (m *DeletePostFromPublicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostFromPublicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEditorUserId() <= 0 {
		err := DeletePostFromPublicationRequestValidationError{
			field:  "EditorUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPublicationId() <= 1 {
		err := DeletePostFromPublicationRequestValidationError{
			field:  "PublicationId",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := DeletePostFromPublicationRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DeletePostFromPublicationRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := DeletePostFromPublicationRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePostFromPublicationRequestMultiError(errors)
	}

	return nil
}

// DeletePostFromPublicationRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeletePostFromPublicationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePostFromPublicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostFromPublicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostFromPublicationRequestMultiError) AllErrors() []error { return m }

// DeletePostFromPublicationRequestValidationError is the validation error
// returned by DeletePostFromPublicationRequest.Validate if the designated
// constraints aren't met.
type DeletePostFromPublicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostFromPublicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostFromPublicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostFromPublicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostFromPublicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostFromPublicationRequestValidationError) ErrorName() string {
	return "DeletePostFromPublicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostFromPublicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostFromPublicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostFromPublicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostFromPublicationRequestValidationError{}

var _DeletePostFromPublicationRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on DeletePostFromPublicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeletePostFromPublicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostFromPublicationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeletePostFromPublicationResponseMultiError, or nil if none found.
func (m *DeletePostFromPublicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostFromPublicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePostFromPublicationResponseMultiError(errors)
	}

	return nil
}

// DeletePostFromPublicationResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeletePostFromPublicationResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePostFromPublicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostFromPublicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostFromPublicationResponseMultiError) AllErrors() []error { return m }

// DeletePostFromPublicationResponseValidationError is the validation error
// returned by DeletePostFromPublicationResponse.Validate if the designated
// constraints aren't met.
type DeletePostFromPublicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostFromPublicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostFromPublicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostFromPublicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostFromPublicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostFromPublicationResponseValidationError) ErrorName() string {
	return "DeletePostFromPublicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostFromPublicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostFromPublicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostFromPublicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostFromPublicationResponseValidationError{}

// Validate checks the field values on AddPostToThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostToThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostToThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostToThreadRequestMultiError, or nil if none found.
func (m *AddPostToThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostToThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := AddPostToThreadRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetParentPostId()) < 1 {
		err := AddPostToThreadRequestValidationError{
			field:  "ParentPostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPost() == nil {
		err := AddPostToThreadRequestValidationError{
			field:  "Post",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddPostToThreadRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddPostToThreadRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddPostToThreadRequestValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _AddPostToThreadRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := AddPostToThreadRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddPostToThreadRequestMultiError(errors)
	}

	return nil
}

// AddPostToThreadRequestMultiError is an error wrapping multiple validation
// errors returned by AddPostToThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type AddPostToThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostToThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostToThreadRequestMultiError) AllErrors() []error { return m }

// AddPostToThreadRequestValidationError is the validation error returned by
// AddPostToThreadRequest.Validate if the designated constraints aren't met.
type AddPostToThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostToThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostToThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostToThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostToThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostToThreadRequestValidationError) ErrorName() string {
	return "AddPostToThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostToThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostToThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostToThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostToThreadRequestValidationError{}

var _AddPostToThreadRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on AddPostToThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostToThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostToThreadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostToThreadResponseMultiError, or nil if none found.
func (m *AddPostToThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostToThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Post.(type) {
	case *AddPostToThreadResponse_RegularPost:
		if v == nil {
			err := AddPostToThreadResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegularPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddPostToThreadResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddPostToThreadResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegularPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddPostToThreadResponseValidationError{
					field:  "RegularPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddPostToThreadResponse_SharedPost:
		if v == nil {
			err := AddPostToThreadResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSharedPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddPostToThreadResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddPostToThreadResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSharedPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddPostToThreadResponseValidationError{
					field:  "SharedPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddPostToThreadResponse_PollPost:
		if v == nil {
			err := AddPostToThreadResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPollPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddPostToThreadResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddPostToThreadResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPollPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddPostToThreadResponseValidationError{
					field:  "PollPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AddPostToThreadResponseMultiError(errors)
	}

	return nil
}

// AddPostToThreadResponseMultiError is an error wrapping multiple validation
// errors returned by AddPostToThreadResponse.ValidateAll() if the designated
// constraints aren't met.
type AddPostToThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostToThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostToThreadResponseMultiError) AllErrors() []error { return m }

// AddPostToThreadResponseValidationError is the validation error returned by
// AddPostToThreadResponse.Validate if the designated constraints aren't met.
type AddPostToThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostToThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostToThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostToThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostToThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostToThreadResponseValidationError) ErrorName() string {
	return "AddPostToThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostToThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostToThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostToThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostToThreadResponseValidationError{}

// Validate checks the field values on RemovePostFromThreadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePostFromThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePostFromThreadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemovePostFromThreadRequestMultiError, or nil if none found.
func (m *RemovePostFromThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePostFromThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := RemovePostFromThreadRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetParentPostId()) < 1 {
		err := RemovePostFromThreadRequestValidationError{
			field:  "ParentPostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetParticipantPostId()) < 1 {
		err := RemovePostFromThreadRequestValidationError{
			field:  "ParticipantPostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _RemovePostFromThreadRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := RemovePostFromThreadRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemovePostFromThreadRequestMultiError(errors)
	}

	return nil
}

// RemovePostFromThreadRequestMultiError is an error wrapping multiple
// validation errors returned by RemovePostFromThreadRequest.ValidateAll() if
// the designated constraints aren't met.
type RemovePostFromThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePostFromThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePostFromThreadRequestMultiError) AllErrors() []error { return m }

// RemovePostFromThreadRequestValidationError is the validation error returned
// by RemovePostFromThreadRequest.Validate if the designated constraints
// aren't met.
type RemovePostFromThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePostFromThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePostFromThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePostFromThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePostFromThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePostFromThreadRequestValidationError) ErrorName() string {
	return "RemovePostFromThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePostFromThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePostFromThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePostFromThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePostFromThreadRequestValidationError{}

var _RemovePostFromThreadRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on RemovePostFromThreadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePostFromThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePostFromThreadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemovePostFromThreadResponseMultiError, or nil if none found.
func (m *RemovePostFromThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePostFromThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemovePostFromThreadResponseMultiError(errors)
	}

	return nil
}

// RemovePostFromThreadResponseMultiError is an error wrapping multiple
// validation errors returned by RemovePostFromThreadResponse.ValidateAll() if
// the designated constraints aren't met.
type RemovePostFromThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePostFromThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePostFromThreadResponseMultiError) AllErrors() []error { return m }

// RemovePostFromThreadResponseValidationError is the validation error returned
// by RemovePostFromThreadResponse.Validate if the designated constraints
// aren't met.
type RemovePostFromThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePostFromThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePostFromThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePostFromThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePostFromThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePostFromThreadResponseValidationError) ErrorName() string {
	return "RemovePostFromThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePostFromThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePostFromThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePostFromThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePostFromThreadResponseValidationError{}

// Validate checks the field values on GetPostThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostThreadRequestMultiError, or nil if none found.
func (m *GetPostThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetPostThreadRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := GetPostThreadRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetPostThreadRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := GetPostThreadRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPostThreadRequestMultiError(errors)
	}

	return nil
}

// GetPostThreadRequestMultiError is an error wrapping multiple validation
// errors returned by GetPostThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPostThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostThreadRequestMultiError) AllErrors() []error { return m }

// GetPostThreadRequestValidationError is the validation error returned by
// GetPostThreadRequest.Validate if the designated constraints aren't met.
type GetPostThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostThreadRequestValidationError) ErrorName() string {
	return "GetPostThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostThreadRequestValidationError{}

var _GetPostThreadRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on GetPostThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostThreadResponseMultiError, or nil if none found.
func (m *GetPostThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPostThreadResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPostThreadResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPostThreadResponseValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPostThreadResponseMultiError(errors)
	}

	return nil
}

// GetPostThreadResponseMultiError is an error wrapping multiple validation
// errors returned by GetPostThreadResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPostThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostThreadResponseMultiError) AllErrors() []error { return m }

// GetPostThreadResponseValidationError is the validation error returned by
// GetPostThreadResponse.Validate if the designated constraints aren't met.
type GetPostThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostThreadResponseValidationError) ErrorName() string {
	return "GetPostThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostThreadResponseValidationError{}

// Validate checks the field values on BookmarkPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BookmarkPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookmarkPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookmarkPostRequestMultiError, or nil if none found.
func (m *BookmarkPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BookmarkPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := BookmarkPostRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := BookmarkPostRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BookmarkPostRequestMultiError(errors)
	}

	return nil
}

// BookmarkPostRequestMultiError is an error wrapping multiple validation
// errors returned by BookmarkPostRequest.ValidateAll() if the designated
// constraints aren't met.
type BookmarkPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookmarkPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookmarkPostRequestMultiError) AllErrors() []error { return m }

// BookmarkPostRequestValidationError is the validation error returned by
// BookmarkPostRequest.Validate if the designated constraints aren't met.
type BookmarkPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookmarkPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookmarkPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookmarkPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookmarkPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookmarkPostRequestValidationError) ErrorName() string {
	return "BookmarkPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BookmarkPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookmarkPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookmarkPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookmarkPostRequestValidationError{}

// Validate checks the field values on BookmarkPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BookmarkPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookmarkPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookmarkPostResponseMultiError, or nil if none found.
func (m *BookmarkPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BookmarkPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookmark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookmarkPostResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookmarkPostResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookmark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookmarkPostResponseValidationError{
				field:  "Bookmark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookmarkPostResponseMultiError(errors)
	}

	return nil
}

// BookmarkPostResponseMultiError is an error wrapping multiple validation
// errors returned by BookmarkPostResponse.ValidateAll() if the designated
// constraints aren't met.
type BookmarkPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookmarkPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookmarkPostResponseMultiError) AllErrors() []error { return m }

// BookmarkPostResponseValidationError is the validation error returned by
// BookmarkPostResponse.Validate if the designated constraints aren't met.
type BookmarkPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookmarkPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookmarkPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookmarkPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookmarkPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookmarkPostResponseValidationError) ErrorName() string {
	return "BookmarkPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BookmarkPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookmarkPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookmarkPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookmarkPostResponseValidationError{}

// Validate checks the field values on RemoveBookmarkedPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveBookmarkedPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveBookmarkedPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveBookmarkedPostRequestMultiError, or nil if none found.
func (m *RemoveBookmarkedPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveBookmarkedPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := RemoveBookmarkedPostRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := RemoveBookmarkedPostRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _RemoveBookmarkedPostRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := RemoveBookmarkedPostRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveBookmarkedPostRequestMultiError(errors)
	}

	return nil
}

// RemoveBookmarkedPostRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveBookmarkedPostRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveBookmarkedPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveBookmarkedPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveBookmarkedPostRequestMultiError) AllErrors() []error { return m }

// RemoveBookmarkedPostRequestValidationError is the validation error returned
// by RemoveBookmarkedPostRequest.Validate if the designated constraints
// aren't met.
type RemoveBookmarkedPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveBookmarkedPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveBookmarkedPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveBookmarkedPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveBookmarkedPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveBookmarkedPostRequestValidationError) ErrorName() string {
	return "RemoveBookmarkedPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveBookmarkedPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveBookmarkedPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveBookmarkedPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveBookmarkedPostRequestValidationError{}

var _RemoveBookmarkedPostRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on RemoveBookmarkedPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveBookmarkedPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveBookmarkedPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveBookmarkedPostResponseMultiError, or nil if none found.
func (m *RemoveBookmarkedPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveBookmarkedPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookmark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveBookmarkedPostResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveBookmarkedPostResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookmark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveBookmarkedPostResponseValidationError{
				field:  "Bookmark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveBookmarkedPostResponseMultiError(errors)
	}

	return nil
}

// RemoveBookmarkedPostResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveBookmarkedPostResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveBookmarkedPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveBookmarkedPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveBookmarkedPostResponseMultiError) AllErrors() []error { return m }

// RemoveBookmarkedPostResponseValidationError is the validation error returned
// by RemoveBookmarkedPostResponse.Validate if the designated constraints
// aren't met.
type RemoveBookmarkedPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveBookmarkedPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveBookmarkedPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveBookmarkedPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveBookmarkedPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveBookmarkedPostResponseValidationError) ErrorName() string {
	return "RemoveBookmarkedPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveBookmarkedPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveBookmarkedPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveBookmarkedPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveBookmarkedPostResponseValidationError{}

// Validate checks the field values on BookmarkPublicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BookmarkPublicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookmarkPublicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookmarkPublicationRequestMultiError, or nil if none found.
func (m *BookmarkPublicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BookmarkPublicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := BookmarkPublicationRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPublicationId() <= 0 {
		err := BookmarkPublicationRequestValidationError{
			field:  "PublicationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BookmarkPublicationRequestMultiError(errors)
	}

	return nil
}

// BookmarkPublicationRequestMultiError is an error wrapping multiple
// validation errors returned by BookmarkPublicationRequest.ValidateAll() if
// the designated constraints aren't met.
type BookmarkPublicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookmarkPublicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookmarkPublicationRequestMultiError) AllErrors() []error { return m }

// BookmarkPublicationRequestValidationError is the validation error returned
// by BookmarkPublicationRequest.Validate if the designated constraints aren't met.
type BookmarkPublicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookmarkPublicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookmarkPublicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookmarkPublicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookmarkPublicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookmarkPublicationRequestValidationError) ErrorName() string {
	return "BookmarkPublicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BookmarkPublicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookmarkPublicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookmarkPublicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookmarkPublicationRequestValidationError{}

// Validate checks the field values on BookmarkPublicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BookmarkPublicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookmarkPublicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookmarkPublicationResponseMultiError, or nil if none found.
func (m *BookmarkPublicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BookmarkPublicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookmark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookmarkPublicationResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookmarkPublicationResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookmark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookmarkPublicationResponseValidationError{
				field:  "Bookmark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookmarkPublicationResponseMultiError(errors)
	}

	return nil
}

// BookmarkPublicationResponseMultiError is an error wrapping multiple
// validation errors returned by BookmarkPublicationResponse.ValidateAll() if
// the designated constraints aren't met.
type BookmarkPublicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookmarkPublicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookmarkPublicationResponseMultiError) AllErrors() []error { return m }

// BookmarkPublicationResponseValidationError is the validation error returned
// by BookmarkPublicationResponse.Validate if the designated constraints
// aren't met.
type BookmarkPublicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookmarkPublicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookmarkPublicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookmarkPublicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookmarkPublicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookmarkPublicationResponseValidationError) ErrorName() string {
	return "BookmarkPublicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BookmarkPublicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookmarkPublicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookmarkPublicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookmarkPublicationResponseValidationError{}

// Validate checks the field values on RemoveBookmarkedPublicationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveBookmarkedPublicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveBookmarkedPublicationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveBookmarkedPublicationRequestMultiError, or nil if none found.
func (m *RemoveBookmarkedPublicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveBookmarkedPublicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := RemoveBookmarkedPublicationRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPublicationId() <= 1 {
		err := RemoveBookmarkedPublicationRequestValidationError{
			field:  "PublicationId",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveBookmarkedPublicationRequestMultiError(errors)
	}

	return nil
}

// RemoveBookmarkedPublicationRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemoveBookmarkedPublicationRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveBookmarkedPublicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveBookmarkedPublicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveBookmarkedPublicationRequestMultiError) AllErrors() []error { return m }

// RemoveBookmarkedPublicationRequestValidationError is the validation error
// returned by RemoveBookmarkedPublicationRequest.Validate if the designated
// constraints aren't met.
type RemoveBookmarkedPublicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveBookmarkedPublicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveBookmarkedPublicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveBookmarkedPublicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveBookmarkedPublicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveBookmarkedPublicationRequestValidationError) ErrorName() string {
	return "RemoveBookmarkedPublicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveBookmarkedPublicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveBookmarkedPublicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveBookmarkedPublicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveBookmarkedPublicationRequestValidationError{}

// Validate checks the field values on RemoveBookmarkedPublicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveBookmarkedPublicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveBookmarkedPublicationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveBookmarkedPublicationResponseMultiError, or nil if none found.
func (m *RemoveBookmarkedPublicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveBookmarkedPublicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookmark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveBookmarkedPublicationResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveBookmarkedPublicationResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookmark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveBookmarkedPublicationResponseValidationError{
				field:  "Bookmark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveBookmarkedPublicationResponseMultiError(errors)
	}

	return nil
}

// RemoveBookmarkedPublicationResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemoveBookmarkedPublicationResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveBookmarkedPublicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveBookmarkedPublicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveBookmarkedPublicationResponseMultiError) AllErrors() []error { return m }

// RemoveBookmarkedPublicationResponseValidationError is the validation error
// returned by RemoveBookmarkedPublicationResponse.Validate if the designated
// constraints aren't met.
type RemoveBookmarkedPublicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveBookmarkedPublicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveBookmarkedPublicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveBookmarkedPublicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveBookmarkedPublicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveBookmarkedPublicationResponseValidationError) ErrorName() string {
	return "RemoveBookmarkedPublicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveBookmarkedPublicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveBookmarkedPublicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveBookmarkedPublicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveBookmarkedPublicationResponseValidationError{}

// Validate checks the field values on GetFollowersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowersRequestMultiError, or nil if none found.
func (m *GetFollowersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetFollowersRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfileId() <= 0 {
		err := GetFollowersRequestValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := GetFollowersRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFollowersRequestMultiError(errors)
	}

	return nil
}

// GetFollowersRequestMultiError is an error wrapping multiple validation
// errors returned by GetFollowersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFollowersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowersRequestMultiError) AllErrors() []error { return m }

// GetFollowersRequestValidationError is the validation error returned by
// GetFollowersRequest.Validate if the designated constraints aren't met.
type GetFollowersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowersRequestValidationError) ErrorName() string {
	return "GetFollowersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowersRequestValidationError{}

// Validate checks the field values on GetFollowersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowersResponseMultiError, or nil if none found.
func (m *GetFollowersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFollowersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFollowersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFollowersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFollowersResponseMultiError(errors)
	}

	return nil
}

// GetFollowersResponseMultiError is an error wrapping multiple validation
// errors returned by GetFollowersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFollowersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowersResponseMultiError) AllErrors() []error { return m }

// GetFollowersResponseValidationError is the validation error returned by
// GetFollowersResponse.Validate if the designated constraints aren't met.
type GetFollowersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowersResponseValidationError) ErrorName() string {
	return "GetFollowersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowersResponseValidationError{}

// Validate checks the field values on GetAccountsFollowingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsFollowingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsFollowingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsFollowingRequestMultiError, or nil if none found.
func (m *GetAccountsFollowingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsFollowingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetAccountsFollowingRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfileId() <= 0 {
		err := GetAccountsFollowingRequestValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AccountType

	if m.GetLimit() <= 0 {
		err := GetAccountsFollowingRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountsFollowingRequestMultiError(errors)
	}

	return nil
}

// GetAccountsFollowingRequestMultiError is an error wrapping multiple
// validation errors returned by GetAccountsFollowingRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAccountsFollowingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsFollowingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsFollowingRequestMultiError) AllErrors() []error { return m }

// GetAccountsFollowingRequestValidationError is the validation error returned
// by GetAccountsFollowingRequest.Validate if the designated constraints
// aren't met.
type GetAccountsFollowingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsFollowingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsFollowingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsFollowingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsFollowingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsFollowingRequestValidationError) ErrorName() string {
	return "GetAccountsFollowingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsFollowingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsFollowingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsFollowingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsFollowingRequestValidationError{}

// Validate checks the field values on GetAccountsFollowingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsFollowingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsFollowingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsFollowingResponseMultiError, or nil if none found.
func (m *GetAccountsFollowingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsFollowingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountsFollowingResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountsFollowingResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountsFollowingResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCommunities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountsFollowingResponseValidationError{
						field:  fmt.Sprintf("Communities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountsFollowingResponseValidationError{
						field:  fmt.Sprintf("Communities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountsFollowingResponseValidationError{
					field:  fmt.Sprintf("Communities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountsFollowingResponseMultiError(errors)
	}

	return nil
}

// GetAccountsFollowingResponseMultiError is an error wrapping multiple
// validation errors returned by GetAccountsFollowingResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAccountsFollowingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsFollowingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsFollowingResponseMultiError) AllErrors() []error { return m }

// GetAccountsFollowingResponseValidationError is the validation error returned
// by GetAccountsFollowingResponse.Validate if the designated constraints
// aren't met.
type GetAccountsFollowingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsFollowingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsFollowingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsFollowingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsFollowingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsFollowingResponseValidationError) ErrorName() string {
	return "GetAccountsFollowingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsFollowingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsFollowingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsFollowingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsFollowingResponseValidationError{}

// Validate checks the field values on ReactToPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReactToPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReactToPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReactToPostRequestMultiError, or nil if none found.
func (m *ReactToPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReactToPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ReactToPostRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PostId

	// no validation rules for AccountType

	// no validation rules for Reaction

	if _, ok := _ReactToPostRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := ReactToPostRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReactToPostRequestMultiError(errors)
	}

	return nil
}

// ReactToPostRequestMultiError is an error wrapping multiple validation errors
// returned by ReactToPostRequest.ValidateAll() if the designated constraints
// aren't met.
type ReactToPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReactToPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReactToPostRequestMultiError) AllErrors() []error { return m }

// ReactToPostRequestValidationError is the validation error returned by
// ReactToPostRequest.Validate if the designated constraints aren't met.
type ReactToPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactToPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactToPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactToPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactToPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactToPostRequestValidationError) ErrorName() string {
	return "ReactToPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactToPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactToPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactToPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactToPostRequestValidationError{}

var _ReactToPostRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on ReactToPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReactToPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReactToPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReactToPostResponseMultiError, or nil if none found.
func (m *ReactToPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReactToPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Post.(type) {
	case *ReactToPostResponse_RegularPost:
		if v == nil {
			err := ReactToPostResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegularPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReactToPostResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReactToPostResponseValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegularPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReactToPostResponseValidationError{
					field:  "RegularPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ReactToPostResponse_SharedPost:
		if v == nil {
			err := ReactToPostResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSharedPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReactToPostResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReactToPostResponseValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSharedPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReactToPostResponseValidationError{
					field:  "SharedPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ReactToPostResponse_PollPost:
		if v == nil {
			err := ReactToPostResponseValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPollPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReactToPostResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReactToPostResponseValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPollPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReactToPostResponseValidationError{
					field:  "PollPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ReactToPostResponseMultiError(errors)
	}

	return nil
}

// ReactToPostResponseMultiError is an error wrapping multiple validation
// errors returned by ReactToPostResponse.ValidateAll() if the designated
// constraints aren't met.
type ReactToPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReactToPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReactToPostResponseMultiError) AllErrors() []error { return m }

// ReactToPostResponseValidationError is the validation error returned by
// ReactToPostResponse.Validate if the designated constraints aren't met.
type ReactToPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactToPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactToPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactToPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactToPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactToPostResponseValidationError) ErrorName() string {
	return "ReactToPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactToPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactToPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactToPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactToPostResponseValidationError{}

// Validate checks the field values on ReactToCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReactToCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReactToCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReactToCommentRequestMultiError, or nil if none found.
func (m *ReactToCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReactToCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ReactToCommentRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := ReactToCommentRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentId()) < 1 {
		err := ReactToCommentRequestValidationError{
			field:  "CommentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AccountType

	// no validation rules for Reaction

	if _, ok := _ReactToCommentRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := ReactToCommentRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReactToCommentRequestMultiError(errors)
	}

	return nil
}

// ReactToCommentRequestMultiError is an error wrapping multiple validation
// errors returned by ReactToCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type ReactToCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReactToCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReactToCommentRequestMultiError) AllErrors() []error { return m }

// ReactToCommentRequestValidationError is the validation error returned by
// ReactToCommentRequest.Validate if the designated constraints aren't met.
type ReactToCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactToCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactToCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactToCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactToCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactToCommentRequestValidationError) ErrorName() string {
	return "ReactToCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactToCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactToCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactToCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactToCommentRequestValidationError{}

var _ReactToCommentRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on ReactToCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReactToCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReactToCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReactToCommentResponseMultiError, or nil if none found.
func (m *ReactToCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReactToCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReactToCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReactToCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactToCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReactToCommentResponseMultiError(errors)
	}

	return nil
}

// ReactToCommentResponseMultiError is an error wrapping multiple validation
// errors returned by ReactToCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type ReactToCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReactToCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReactToCommentResponseMultiError) AllErrors() []error { return m }

// ReactToCommentResponseValidationError is the validation error returned by
// ReactToCommentResponse.Validate if the designated constraints aren't met.
type ReactToCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactToCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactToCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactToCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactToCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactToCommentResponseValidationError) ErrorName() string {
	return "ReactToCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactToCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactToCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactToCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactToCommentResponseValidationError{}

// Validate checks the field values on ReactToCommentReplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReactToCommentReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReactToCommentReplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReactToCommentReplyRequestMultiError, or nil if none found.
func (m *ReactToCommentReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReactToCommentReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ReactToCommentReplyRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := ReactToCommentReplyRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentId()) < 1 {
		err := ReactToCommentReplyRequestValidationError{
			field:  "CommentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReplyId()) < 1 {
		err := ReactToCommentReplyRequestValidationError{
			field:  "ReplyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AccountType

	// no validation rules for Reaction

	if _, ok := _ReactToCommentReplyRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := ReactToCommentReplyRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReactToCommentReplyRequestMultiError(errors)
	}

	return nil
}

// ReactToCommentReplyRequestMultiError is an error wrapping multiple
// validation errors returned by ReactToCommentReplyRequest.ValidateAll() if
// the designated constraints aren't met.
type ReactToCommentReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReactToCommentReplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReactToCommentReplyRequestMultiError) AllErrors() []error { return m }

// ReactToCommentReplyRequestValidationError is the validation error returned
// by ReactToCommentReplyRequest.Validate if the designated constraints aren't met.
type ReactToCommentReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactToCommentReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactToCommentReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactToCommentReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactToCommentReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactToCommentReplyRequestValidationError) ErrorName() string {
	return "ReactToCommentReplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactToCommentReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactToCommentReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactToCommentReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactToCommentReplyRequestValidationError{}

var _ReactToCommentReplyRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on ReactToCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReactToCommentReplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReactToCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReactToCommentReplyResponseMultiError, or nil if none found.
func (m *ReactToCommentReplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReactToCommentReplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReply()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReactToCommentReplyResponseValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReactToCommentReplyResponseValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReply()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactToCommentReplyResponseValidationError{
				field:  "Reply",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReactToCommentReplyResponseMultiError(errors)
	}

	return nil
}

// ReactToCommentReplyResponseMultiError is an error wrapping multiple
// validation errors returned by ReactToCommentReplyResponse.ValidateAll() if
// the designated constraints aren't met.
type ReactToCommentReplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReactToCommentReplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReactToCommentReplyResponseMultiError) AllErrors() []error { return m }

// ReactToCommentReplyResponseValidationError is the validation error returned
// by ReactToCommentReplyResponse.Validate if the designated constraints
// aren't met.
type ReactToCommentReplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactToCommentReplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactToCommentReplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactToCommentReplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactToCommentReplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactToCommentReplyResponseValidationError) ErrorName() string {
	return "ReactToCommentReplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactToCommentReplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactToCommentReplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactToCommentReplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactToCommentReplyResponseValidationError{}

// Validate checks the field values on CreateCommentReplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentReplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentReplyRequestMultiError, or nil if none found.
func (m *CreateCommentReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CreateCommentReplyRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := CreateCommentReplyRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentId()) < 1 {
		err := CreateCommentReplyRequestValidationError{
			field:  "CommentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReply() == nil {
		err := CreateCommentReplyRequestValidationError{
			field:  "Reply",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetReply()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentReplyRequestValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentReplyRequestValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReply()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentReplyRequestValidationError{
				field:  "Reply",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _CreateCommentReplyRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := CreateCommentReplyRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCommentReplyRequestMultiError(errors)
	}

	return nil
}

// CreateCommentReplyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentReplyRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateCommentReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentReplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentReplyRequestMultiError) AllErrors() []error { return m }

// CreateCommentReplyRequestValidationError is the validation error returned by
// CreateCommentReplyRequest.Validate if the designated constraints aren't met.
type CreateCommentReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentReplyRequestValidationError) ErrorName() string {
	return "CreateCommentReplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentReplyRequestValidationError{}

var _CreateCommentReplyRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on CreateCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentReplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentReplyResponseMultiError, or nil if none found.
func (m *CreateCommentReplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentReplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentReplyResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentReplyResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentReplyResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommentReplyResponseMultiError(errors)
	}

	return nil
}

// CreateCommentReplyResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCommentReplyResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateCommentReplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentReplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentReplyResponseMultiError) AllErrors() []error { return m }

// CreateCommentReplyResponseValidationError is the validation error returned
// by CreateCommentReplyResponse.Validate if the designated constraints aren't met.
type CreateCommentReplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentReplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentReplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentReplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentReplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentReplyResponseValidationError) ErrorName() string {
	return "CreateCommentReplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentReplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentReplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentReplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentReplyResponseValidationError{}

// Validate checks the field values on DeleteCommentReplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentReplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentReplyRequestMultiError, or nil if none found.
func (m *DeleteCommentReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DeleteCommentReplyRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := DeleteCommentReplyRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentId()) < 1 {
		err := DeleteCommentReplyRequestValidationError{
			field:  "CommentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReplyId()) < 1 {
		err := DeleteCommentReplyRequestValidationError{
			field:  "ReplyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DeleteCommentReplyRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := DeleteCommentReplyRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCommentReplyRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentReplyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentReplyRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteCommentReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentReplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentReplyRequestMultiError) AllErrors() []error { return m }

// DeleteCommentReplyRequestValidationError is the validation error returned by
// DeleteCommentReplyRequest.Validate if the designated constraints aren't met.
type DeleteCommentReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentReplyRequestValidationError) ErrorName() string {
	return "DeleteCommentReplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentReplyRequestValidationError{}

var _DeleteCommentReplyRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on DeleteCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentReplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentReplyResponseMultiError, or nil if none found.
func (m *DeleteCommentReplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentReplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCommentReplyResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCommentReplyResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCommentReplyResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCommentReplyResponseMultiError(errors)
	}

	return nil
}

// DeleteCommentReplyResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCommentReplyResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteCommentReplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentReplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentReplyResponseMultiError) AllErrors() []error { return m }

// DeleteCommentReplyResponseValidationError is the validation error returned
// by DeleteCommentReplyResponse.Validate if the designated constraints aren't met.
type DeleteCommentReplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentReplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentReplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentReplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentReplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentReplyResponseValidationError) ErrorName() string {
	return "DeleteCommentReplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentReplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentReplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentReplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentReplyResponseValidationError{}

// Validate checks the field values on EditCommentReplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCommentReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCommentReplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCommentReplyRequestMultiError, or nil if none found.
func (m *EditCommentReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCommentReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := EditCommentReplyRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := EditCommentReplyRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentId()) < 1 {
		err := EditCommentReplyRequestValidationError{
			field:  "CommentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReplyId()) < 1 {
		err := EditCommentReplyRequestValidationError{
			field:  "ReplyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReply() == nil {
		err := EditCommentReplyRequestValidationError{
			field:  "Reply",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetReply()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditCommentReplyRequestValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditCommentReplyRequestValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReply()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditCommentReplyRequestValidationError{
				field:  "Reply",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _EditCommentReplyRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := EditCommentReplyRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditCommentReplyRequestMultiError(errors)
	}

	return nil
}

// EditCommentReplyRequestMultiError is an error wrapping multiple validation
// errors returned by EditCommentReplyRequest.ValidateAll() if the designated
// constraints aren't met.
type EditCommentReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCommentReplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCommentReplyRequestMultiError) AllErrors() []error { return m }

// EditCommentReplyRequestValidationError is the validation error returned by
// EditCommentReplyRequest.Validate if the designated constraints aren't met.
type EditCommentReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCommentReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCommentReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCommentReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCommentReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCommentReplyRequestValidationError) ErrorName() string {
	return "EditCommentReplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditCommentReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCommentReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCommentReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCommentReplyRequestValidationError{}

var _EditCommentReplyRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on EditCommentReplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCommentReplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCommentReplyResponseMultiError, or nil if none found.
func (m *EditCommentReplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCommentReplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReply()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditCommentReplyResponseValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditCommentReplyResponseValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReply()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditCommentReplyResponseValidationError{
				field:  "Reply",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditCommentReplyResponseMultiError(errors)
	}

	return nil
}

// EditCommentReplyResponseMultiError is an error wrapping multiple validation
// errors returned by EditCommentReplyResponse.ValidateAll() if the designated
// constraints aren't met.
type EditCommentReplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCommentReplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCommentReplyResponseMultiError) AllErrors() []error { return m }

// EditCommentReplyResponseValidationError is the validation error returned by
// EditCommentReplyResponse.Validate if the designated constraints aren't met.
type EditCommentReplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCommentReplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCommentReplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCommentReplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCommentReplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCommentReplyResponseValidationError) ErrorName() string {
	return "EditCommentReplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditCommentReplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCommentReplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCommentReplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCommentReplyResponseValidationError{}

// Validate checks the field values on GetCommentRepliesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRepliesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRepliesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRepliesRequestMultiError, or nil if none found.
func (m *GetCommentRepliesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRepliesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetCommentRepliesRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := GetCommentRepliesRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentId()) < 1 {
		err := GetCommentRepliesRequestValidationError{
			field:  "CommentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetCommentRepliesRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := GetCommentRepliesRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommentRepliesRequestMultiError(errors)
	}

	return nil
}

// GetCommentRepliesRequestMultiError is an error wrapping multiple validation
// errors returned by GetCommentRepliesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCommentRepliesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRepliesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRepliesRequestMultiError) AllErrors() []error { return m }

// GetCommentRepliesRequestValidationError is the validation error returned by
// GetCommentRepliesRequest.Validate if the designated constraints aren't met.
type GetCommentRepliesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRepliesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRepliesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRepliesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRepliesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRepliesRequestValidationError) ErrorName() string {
	return "GetCommentRepliesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRepliesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRepliesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRepliesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRepliesRequestValidationError{}

var _GetCommentRepliesRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on GetCommentRepliesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRepliesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRepliesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRepliesResponseMultiError, or nil if none found.
func (m *GetCommentRepliesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRepliesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReplies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentRepliesResponseValidationError{
						field:  fmt.Sprintf("Replies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentRepliesResponseValidationError{
						field:  fmt.Sprintf("Replies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentRepliesResponseValidationError{
					field:  fmt.Sprintf("Replies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentRepliesResponseMultiError(errors)
	}

	return nil
}

// GetCommentRepliesResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommentRepliesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCommentRepliesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRepliesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRepliesResponseMultiError) AllErrors() []error { return m }

// GetCommentRepliesResponseValidationError is the validation error returned by
// GetCommentRepliesResponse.Validate if the designated constraints aren't met.
type GetCommentRepliesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRepliesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRepliesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRepliesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRepliesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRepliesResponseValidationError) ErrorName() string {
	return "GetCommentRepliesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRepliesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRepliesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRepliesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRepliesResponseValidationError{}

// Validate checks the field values on ReportCommentReplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCommentReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCommentReplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCommentReplyRequestMultiError, or nil if none found.
func (m *ReportCommentReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCommentReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ReportCommentReplyRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPostId()) < 1 {
		err := ReportCommentReplyRequestValidationError{
			field:  "PostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentId()) < 1 {
		err := ReportCommentReplyRequestValidationError{
			field:  "CommentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReplyId()) < 1 {
		err := ReportCommentReplyRequestValidationError{
			field:  "ReplyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ReportCommentReplyRequest_PostType_NotInLookup[m.GetPostType()]; ok {
		err := ReportCommentReplyRequestValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReportCommentReplyRequestMultiError(errors)
	}

	return nil
}

// ReportCommentReplyRequestMultiError is an error wrapping multiple validation
// errors returned by ReportCommentReplyRequest.ValidateAll() if the
// designated constraints aren't met.
type ReportCommentReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCommentReplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCommentReplyRequestMultiError) AllErrors() []error { return m }

// ReportCommentReplyRequestValidationError is the validation error returned by
// ReportCommentReplyRequest.Validate if the designated constraints aren't met.
type ReportCommentReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCommentReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCommentReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCommentReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCommentReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCommentReplyRequestValidationError) ErrorName() string {
	return "ReportCommentReplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCommentReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCommentReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCommentReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCommentReplyRequestValidationError{}

var _ReportCommentReplyRequest_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on ReportCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCommentReplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCommentReplyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCommentReplyResponseMultiError, or nil if none found.
func (m *ReportCommentReplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCommentReplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReply()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportCommentReplyResponseValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportCommentReplyResponseValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReply()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportCommentReplyResponseValidationError{
				field:  "Reply",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportCommentReplyResponseMultiError(errors)
	}

	return nil
}

// ReportCommentReplyResponseMultiError is an error wrapping multiple
// validation errors returned by ReportCommentReplyResponse.ValidateAll() if
// the designated constraints aren't met.
type ReportCommentReplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCommentReplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCommentReplyResponseMultiError) AllErrors() []error { return m }

// ReportCommentReplyResponseValidationError is the validation error returned
// by ReportCommentReplyResponse.Validate if the designated constraints aren't met.
type ReportCommentReplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCommentReplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCommentReplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCommentReplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCommentReplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCommentReplyResponseValidationError) ErrorName() string {
	return "ReportCommentReplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCommentReplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCommentReplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCommentReplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCommentReplyResponseValidationError{}

// Validate checks the field values on SharePostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SharePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharePostRequestMultiError, or nil if none found.
func (m *SharePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := SharePostRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetParentPostId()) < 1 {
		err := SharePostRequestValidationError{
			field:  "ParentPostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SharePostRequest_ParentPostType_NotInLookup[m.GetParentPostType()]; ok {
		err := SharePostRequestValidationError{
			field:  "ParentPostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContent()) < 5 {
		err := SharePostRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 5 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SharePostRequestMultiError(errors)
	}

	return nil
}

// SharePostRequestMultiError is an error wrapping multiple validation errors
// returned by SharePostRequest.ValidateAll() if the designated constraints
// aren't met.
type SharePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharePostRequestMultiError) AllErrors() []error { return m }

// SharePostRequestValidationError is the validation error returned by
// SharePostRequest.Validate if the designated constraints aren't met.
type SharePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharePostRequestValidationError) ErrorName() string { return "SharePostRequestValidationError" }

// Error satisfies the builtin error interface
func (e SharePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharePostRequestValidationError{}

var _SharePostRequest_ParentPostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on SharePostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SharePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharePostResponseMultiError, or nil if none found.
func (m *SharePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return SharePostResponseMultiError(errors)
	}

	return nil
}

// SharePostResponseMultiError is an error wrapping multiple validation errors
// returned by SharePostResponse.ValidateAll() if the designated constraints
// aren't met.
type SharePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharePostResponseMultiError) AllErrors() []error { return m }

// SharePostResponseValidationError is the validation error returned by
// SharePostResponse.Validate if the designated constraints aren't met.
type SharePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharePostResponseValidationError) ErrorName() string {
	return "SharePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharePostResponseValidationError{}

// Validate checks the field values on GetBookmarkedPostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookmarkedPostsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookmarkedPostsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookmarkedPostsRequestMultiError, or nil if none found.
func (m *GetBookmarkedPostsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookmarkedPostsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetBookmarkedPostsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBookmarkedPostsRequestMultiError(errors)
	}

	return nil
}

// GetBookmarkedPostsRequestMultiError is an error wrapping multiple validation
// errors returned by GetBookmarkedPostsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetBookmarkedPostsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookmarkedPostsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookmarkedPostsRequestMultiError) AllErrors() []error { return m }

// GetBookmarkedPostsRequestValidationError is the validation error returned by
// GetBookmarkedPostsRequest.Validate if the designated constraints aren't met.
type GetBookmarkedPostsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookmarkedPostsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookmarkedPostsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookmarkedPostsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookmarkedPostsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookmarkedPostsRequestValidationError) ErrorName() string {
	return "GetBookmarkedPostsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookmarkedPostsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookmarkedPostsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookmarkedPostsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookmarkedPostsRequestValidationError{}

// Validate checks the field values on GetBookmarkedPostsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookmarkedPostsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookmarkedPostsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookmarkedPostsResponseMultiError, or nil if none found.
func (m *GetBookmarkedPostsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookmarkedPostsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBookmarkedPostsResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBookmarkedPostsResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBookmarkedPostsResponseValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBookmarkedPostsResponseMultiError(errors)
	}

	return nil
}

// GetBookmarkedPostsResponseMultiError is an error wrapping multiple
// validation errors returned by GetBookmarkedPostsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBookmarkedPostsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookmarkedPostsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookmarkedPostsResponseMultiError) AllErrors() []error { return m }

// GetBookmarkedPostsResponseValidationError is the validation error returned
// by GetBookmarkedPostsResponse.Validate if the designated constraints aren't met.
type GetBookmarkedPostsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookmarkedPostsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookmarkedPostsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookmarkedPostsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookmarkedPostsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookmarkedPostsResponseValidationError) ErrorName() string {
	return "GetBookmarkedPostsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookmarkedPostsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookmarkedPostsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookmarkedPostsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookmarkedPostsResponseValidationError{}
