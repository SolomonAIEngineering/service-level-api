// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: social_service/v2/mongo.proto

package social_servicev2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContentInsights with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContentInsights) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContentInsights with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContentInsightsMultiError, or nil if none found.
func (m *ContentInsights) ValidateAll() error {
	return m.validate(true)
}

func (m *ContentInsights) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SentenceCount

	// no validation rules for WordCount

	// no validation rules for Language

	// no validation rules for LanguageConfidence

	for idx, item := range m.GetEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentInsightsValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentInsightsValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentInsightsValidationError{
					field:  fmt.Sprintf("Entities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSentiment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContentInsightsValidationError{
					field:  "Sentiment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContentInsightsValidationError{
					field:  "Sentiment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSentiment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContentInsightsValidationError{
				field:  "Sentiment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContentInsightsMultiError(errors)
	}

	return nil
}

// ContentInsightsMultiError is an error wrapping multiple validation errors
// returned by ContentInsights.ValidateAll() if the designated constraints
// aren't met.
type ContentInsightsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentInsightsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentInsightsMultiError) AllErrors() []error { return m }

// ContentInsightsValidationError is the validation error returned by
// ContentInsights.Validate if the designated constraints aren't met.
type ContentInsightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentInsightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentInsightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentInsightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentInsightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentInsightsValidationError) ErrorName() string { return "ContentInsightsValidationError" }

// Error satisfies the builtin error interface
func (e ContentInsightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContentInsights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentInsightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentInsightsValidationError{}

// Validate checks the field values on Entities with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Entities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Entities with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EntitiesMultiError, or nil
// if none found.
func (m *Entities) ValidateAll() error {
	return m.validate(true)
}

func (m *Entities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for Label

	if len(errors) > 0 {
		return EntitiesMultiError(errors)
	}

	return nil
}

// EntitiesMultiError is an error wrapping multiple validation errors returned
// by Entities.ValidateAll() if the designated constraints aren't met.
type EntitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitiesMultiError) AllErrors() []error { return m }

// EntitiesValidationError is the validation error returned by
// Entities.Validate if the designated constraints aren't met.
type EntitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitiesValidationError) ErrorName() string { return "EntitiesValidationError" }

// Error satisfies the builtin error interface
func (e EntitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitiesValidationError{}

// Validate checks the field values on Sentiment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Sentiment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sentiment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SentimentMultiError, or nil
// if none found.
func (m *Sentiment) ValidateAll() error {
	return m.validate(true)
}

func (m *Sentiment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Negative

	// no validation rules for Neutral

	// no validation rules for Positive

	// no validation rules for Compound

	if len(errors) > 0 {
		return SentimentMultiError(errors)
	}

	return nil
}

// SentimentMultiError is an error wrapping multiple validation errors returned
// by Sentiment.ValidateAll() if the designated constraints aren't met.
type SentimentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SentimentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SentimentMultiError) AllErrors() []error { return m }

// SentimentValidationError is the validation error returned by
// Sentiment.Validate if the designated constraints aren't met.
type SentimentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SentimentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SentimentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SentimentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SentimentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SentimentValidationError) ErrorName() string { return "SentimentValidationError" }

// Error satisfies the builtin error interface
func (e SentimentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSentiment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SentimentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SentimentValidationError{}

// Validate checks the field values on MediaMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MediaMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MediaMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MediaMetadataMultiError, or
// nil if none found.
func (m *MediaMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *MediaMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Resize

	// no validation rules for Crop

	// no validation rules for ImageWidth

	// no validation rules for ImageHeight

	// no validation rules for Type

	if len(errors) > 0 {
		return MediaMetadataMultiError(errors)
	}

	return nil
}

// MediaMetadataMultiError is an error wrapping multiple validation errors
// returned by MediaMetadata.ValidateAll() if the designated constraints
// aren't met.
type MediaMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaMetadataMultiError) AllErrors() []error { return m }

// MediaMetadataValidationError is the validation error returned by
// MediaMetadata.Validate if the designated constraints aren't met.
type MediaMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaMetadataValidationError) ErrorName() string { return "MediaMetadataValidationError" }

// Error satisfies the builtin error interface
func (e MediaMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMediaMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaMetadataValidationError{}

// Validate checks the field values on Media with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Media) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Media with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MediaMultiError, or nil if none found.
func (m *Media) ValidateAll() error {
	return m.validate(true)
}

func (m *Media) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for Link

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MediaValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MediaValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediaValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MediaMultiError(errors)
	}

	return nil
}

// MediaMultiError is an error wrapping multiple validation errors returned by
// Media.ValidateAll() if the designated constraints aren't met.
type MediaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaMultiError) AllErrors() []error { return m }

// MediaValidationError is the validation error returned by Media.Validate if
// the designated constraints aren't met.
type MediaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaValidationError) ErrorName() string { return "MediaValidationError" }

// Error satisfies the builtin error interface
func (e MediaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedia.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaValidationError{}

// Validate checks the field values on Post with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Post) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Post with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PostMultiError, or nil if none found.
func (m *Post) ValidateAll() error {
	return m.validate(true)
}

func (m *Post) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	if _, ok := _Post_Action_InLookup[m.GetAction()]; !ok {
		err := PostValidationError{
			field:  "Action",
			reason: "value must be in list [POST_TYPE_POST POST_TYPE_QUESTION POST_TYPE_ACHIEVEMENT POST_TYPE_ANNOUNCEMENT POST_TYPE_ARTICLE POST_TYPE_SHORT_STORY]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PostType_name[int32(m.GetAction())]; !ok {
		err := PostValidationError{
			field:  "Action",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContent()) < 50 {
		err := PostValidationError{
			field:  "Content",
			reason: "value length must be at least 50 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMedia()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedia()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "Media",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Extra

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetSimfinyPlatformUserId() <= 0 {
		err := PostValidationError{
			field:  "SimfinyPlatformUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfileId() <= 0 {
		err := PostValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for TopicName

	if utf8.RuneCountInString(m.GetAuthorUsername()) < 1 {
		err := PostValidationError{
			field:  "AuthorUsername",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuthorProfileImage

	// no validation rules for AffinityScore

	// no validation rules for QualityScore

	// no validation rules for UserIdToAffinityScoreMap

	if all {
		switch v := interface{}(m.GetInsights()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Insights",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Insights",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInsights()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "Insights",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserIdToReportsMap

	// no validation rules for ReadingTime

	// no validation rules for BackgroundImageUrl

	// no validation rules for AuthorAccountType

	for idx, item := range m.GetNotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostValidationError{
					field:  fmt.Sprintf("Notes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ThreadParticipantType

	// no validation rules for UserIdToReactionMap

	// no validation rules for AiGeneratedQuestionResponse

	if len(errors) > 0 {
		return PostMultiError(errors)
	}

	return nil
}

// PostMultiError is an error wrapping multiple validation errors returned by
// Post.ValidateAll() if the designated constraints aren't met.
type PostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostMultiError) AllErrors() []error { return m }

// PostValidationError is the validation error returned by Post.Validate if the
// designated constraints aren't met.
type PostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostValidationError) ErrorName() string { return "PostValidationError" }

// Error satisfies the builtin error interface
func (e PostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostValidationError{}

var _Post_Action_InLookup = map[PostType]struct{}{
	1: {},
	3: {},
	4: {},
	5: {},
	7: {},
	8: {},
}

// Validate checks the field values on PollPost with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PollPost) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollPost with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PollPostMultiError, or nil
// if none found.
func (m *PollPost) ValidateAll() error {
	return m.validate(true)
}

func (m *PollPost) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	if m.GetAction() != 6 {
		err := PollPostValidationError{
			field:  "Action",
			reason: "value must equal POST_TYPE_POLL",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PostType_name[int32(m.GetAction())]; !ok {
		err := PollPostValidationError{
			field:  "Action",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContent()) < 50 {
		err := PollPostValidationError{
			field:  "Content",
			reason: "value length must be at least 50 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMedia()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollPostValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollPostValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedia()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollPostValidationError{
				field:  "Media",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Extra

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PollPostValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PollPostValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PollPostValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetSimfinyPlatformUserId() <= 0 {
		err := PollPostValidationError{
			field:  "SimfinyPlatformUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfileId() <= 0 {
		err := PollPostValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for TopicName

	if utf8.RuneCountInString(m.GetAuthorUsername()) < 1 {
		err := PollPostValidationError{
			field:  "AuthorUsername",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuthorProfileImage

	// no validation rules for AffinityScore

	// no validation rules for QualityScore

	// no validation rules for UserIdToAffinityScoreMap

	if all {
		switch v := interface{}(m.GetInsights()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollPostValidationError{
					field:  "Insights",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollPostValidationError{
					field:  "Insights",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInsights()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollPostValidationError{
				field:  "Insights",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserIdToReportsMap

	// no validation rules for BackgroundImageUrl

	// no validation rules for AuthorAccountType

	{
		sorted_keys := make([]uint64, len(m.GetUserIdToPollResponsesMap()))
		i := 0
		for key := range m.GetUserIdToPollResponsesMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetUserIdToPollResponsesMap()[key]
			_ = val

			// no validation rules for UserIdToPollResponsesMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PollPostValidationError{
							field:  fmt.Sprintf("UserIdToPollResponsesMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PollPostValidationError{
							field:  fmt.Sprintf("UserIdToPollResponsesMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PollPostValidationError{
						field:  fmt.Sprintf("UserIdToPollResponsesMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(m.GetPollOptions()) < 2 {
		err := PollPostValidationError{
			field:  "PollOptions",
			reason: "value must contain at least 2 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PollDistribution

	if all {
		switch v := interface{}(m.GetPollEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollPostValidationError{
					field:  "PollEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollPostValidationError{
					field:  "PollEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPollEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollPostValidationError{
				field:  "PollEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PollPostValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PollPostValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PollPostValidationError{
					field:  fmt.Sprintf("Notes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollPostValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollPostValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollPostValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ThreadParticipantType

	// no validation rules for UserIdToReactionMap

	if len(errors) > 0 {
		return PollPostMultiError(errors)
	}

	return nil
}

// PollPostMultiError is an error wrapping multiple validation errors returned
// by PollPost.ValidateAll() if the designated constraints aren't met.
type PollPostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollPostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollPostMultiError) AllErrors() []error { return m }

// PollPostValidationError is the validation error returned by
// PollPost.Validate if the designated constraints aren't met.
type PollPostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollPostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollPostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollPostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollPostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollPostValidationError) ErrorName() string { return "PollPostValidationError" }

// Error satisfies the builtin error interface
func (e PollPostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollPost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollPostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollPostValidationError{}

// Validate checks the field values on PollResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PollResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PollResponseMultiError, or
// nil if none found.
func (m *PollResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PollResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetUserId() <= 0 {
		err := PollResponseValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ResponseValue

	// no validation rules for ResponseIdx

	if len(errors) > 0 {
		return PollResponseMultiError(errors)
	}

	return nil
}

// PollResponseMultiError is an error wrapping multiple validation errors
// returned by PollResponse.ValidateAll() if the designated constraints aren't met.
type PollResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollResponseMultiError) AllErrors() []error { return m }

// PollResponseValidationError is the validation error returned by
// PollResponse.Validate if the designated constraints aren't met.
type PollResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollResponseValidationError) ErrorName() string { return "PollResponseValidationError" }

// Error satisfies the builtin error interface
func (e PollResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollResponseValidationError{}

// Validate checks the field values on SharedPost with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedPost) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedPost with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SharedPostMultiError, or
// nil if none found.
func (m *SharedPost) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedPost) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOriginalPostId()) < 1 {
		err := SharedPostValidationError{
			field:  "OriginalPostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOriginalAuthorUsername()) < 1 {
		err := SharedPostValidationError{
			field:  "OriginalAuthorUsername",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	if len(m.GetContent()) < 50 {
		err := SharedPostValidationError{
			field:  "Content",
			reason: "value length must be at least 50 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Extra

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedPostValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedPostValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedPostValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetSimfinyPlatformUserId() <= 0 {
		err := SharedPostValidationError{
			field:  "SimfinyPlatformUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfileId() <= 0 {
		err := SharedPostValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAuthorUsername()) < 1 {
		err := SharedPostValidationError{
			field:  "AuthorUsername",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AffinityScore

	// no validation rules for QualityScore

	// no validation rules for UserIdToAffinityScoreMap

	// no validation rules for UserIdToReportsMap

	for idx, item := range m.GetNotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedPostValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedPostValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedPostValidationError{
					field:  fmt.Sprintf("Notes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharedPostValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharedPostValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharedPostValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AuthorAccountType

	// no validation rules for UserIdToReactionMap

	if m.GetAction() != 2 {
		err := SharedPostValidationError{
			field:  "Action",
			reason: "value must equal POST_TYPE_REPOST",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PostType_name[int32(m.GetAction())]; !ok {
		err := SharedPostValidationError{
			field:  "Action",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOriginalPostUserProfileId() <= 0 {
		err := SharedPostValidationError{
			field:  "OriginalPostUserProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOriginalPostUserSimfinyPlaformId() <= 0 {
		err := SharedPostValidationError{
			field:  "OriginalPostUserSimfinyPlaformId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SharedPost_OriginalPostAction_InLookup[m.GetOriginalPostAction()]; !ok {
		err := SharedPostValidationError{
			field:  "OriginalPostAction",
			reason: "value must be in list [POST_TYPE_POST POST_TYPE_QUESTION POST_TYPE_ACHIEVEMENT POST_TYPE_ANNOUNCEMENT POST_TYPE_POLL POST_TYPE_ARTICLE POST_TYPE_SHORT_STORY]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PostType_name[int32(m.GetOriginalPostAction())]; !ok {
		err := SharedPostValidationError{
			field:  "OriginalPostAction",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SharedPostMultiError(errors)
	}

	return nil
}

// SharedPostMultiError is an error wrapping multiple validation errors
// returned by SharedPost.ValidateAll() if the designated constraints aren't met.
type SharedPostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedPostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedPostMultiError) AllErrors() []error { return m }

// SharedPostValidationError is the validation error returned by
// SharedPost.Validate if the designated constraints aren't met.
type SharedPostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedPostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedPostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedPostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedPostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedPostValidationError) ErrorName() string { return "SharedPostValidationError" }

// Error satisfies the builtin error interface
func (e SharedPostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedPost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedPostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedPostValidationError{}

var _SharedPost_OriginalPostAction_InLookup = map[PostType]struct{}{
	1: {},
	3: {},
	4: {},
	5: {},
	6: {},
	7: {},
	8: {},
}

// Validate checks the field values on Thread with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Thread) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Thread with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThreadMultiError, or nil if none found.
func (m *Thread) ValidateAll() error {
	return m.validate(true)
}

func (m *Thread) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetParentPostId()) < 1 {
		err := ThreadValidationError{
			field:  "ParentPostId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ThreadMultiError(errors)
	}

	return nil
}

// ThreadMultiError is an error wrapping multiple validation errors returned by
// Thread.ValidateAll() if the designated constraints aren't met.
type ThreadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadMultiError) AllErrors() []error { return m }

// ThreadValidationError is the validation error returned by Thread.Validate if
// the designated constraints aren't met.
type ThreadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadValidationError) ErrorName() string { return "ThreadValidationError" }

// Error satisfies the builtin error interface
func (e ThreadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThread.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadValidationError{}

// Validate checks the field values on Note with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Note) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Note with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NoteMultiError, or nil if none found.
func (m *Note) ValidateAll() error {
	return m.validate(true)
}

func (m *Note) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetSimfinyPlatformUserId() <= 0 {
		err := NoteValidationError{
			field:  "SimfinyPlatformUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfileId() <= 0 {
		err := NoteValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMedia()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NoteValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NoteValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedia()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoteValidationError{
				field:  "Media",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	if len(m.GetContent()) < 50 {
		err := NoteValidationError{
			field:  "Content",
			reason: "value length must be at least 50 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuthorAccountType

	if len(m.GetAuthorUserName()) < 1 {
		err := NoteValidationError{
			field:  "AuthorUserName",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetAuthorProfileImage()) < 1 {
		err := NoteValidationError{
			field:  "AuthorProfileImage",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NoteMultiError(errors)
	}

	return nil
}

// NoteMultiError is an error wrapping multiple validation errors returned by
// Note.ValidateAll() if the designated constraints aren't met.
type NoteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoteMultiError) AllErrors() []error { return m }

// NoteValidationError is the validation error returned by Note.Validate if the
// designated constraints aren't met.
type NoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoteValidationError) ErrorName() string { return "NoteValidationError" }

// Error satisfies the builtin error interface
func (e NoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoteValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetSimfinyPlatformUserId() <= 0 {
		err := CommentValidationError{
			field:  "SimfinyPlatformUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfileId() <= 0 {
		err := CommentValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMedia()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedia()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "Media",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for Content

	for idx, item := range m.GetReplies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentValidationError{
						field:  fmt.Sprintf("Replies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentValidationError{
						field:  fmt.Sprintf("Replies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentValidationError{
					field:  fmt.Sprintf("Replies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Extra

	if len(m.GetAuthorUsername()) < 1 {
		err := CommentValidationError{
			field:  "AuthorUsername",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetAuthorProfileImage()) < 1 {
		err := CommentValidationError{
			field:  "AuthorProfileImage",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AffinityScore

	// no validation rules for QualityScore

	// no validation rules for UserIdToAffinityScoreMap

	// no validation rules for UserIdToReportsMap

	// no validation rules for AuthorAccountType

	// no validation rules for UserIdToReactionMap

	for idx, item := range m.GetNotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentValidationError{
					field:  fmt.Sprintf("Notes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on CommentReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentReplyMultiError, or
// nil if none found.
func (m *CommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetSimfinyPlatformUserId() <= 0 {
		err := CommentReplyValidationError{
			field:  "SimfinyPlatformUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfileId() <= 0 {
		err := CommentReplyValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMedia()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentReplyValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentReplyValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedia()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentReplyValidationError{
				field:  "Media",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for Content

	// no validation rules for Extra

	if len(m.GetAuthorUsername()) < 1 {
		err := CommentReplyValidationError{
			field:  "AuthorUsername",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetAuthorProfileImage()) < 1 {
		err := CommentReplyValidationError{
			field:  "AuthorProfileImage",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AffinityScore

	// no validation rules for QualityScore

	// no validation rules for UserIdToAffinityScoreMap

	// no validation rules for AuthorAccountType

	// no validation rules for UserIdToReactionMap

	// no validation rules for UserIdToReportsMap

	if len(errors) > 0 {
		return CommentReplyMultiError(errors)
	}

	return nil
}

// CommentReplyMultiError is an error wrapping multiple validation errors
// returned by CommentReply.ValidateAll() if the designated constraints aren't met.
type CommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentReplyMultiError) AllErrors() []error { return m }

// CommentReplyValidationError is the validation error returned by
// CommentReply.Validate if the designated constraints aren't met.
type CommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentReplyValidationError) ErrorName() string { return "CommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e CommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentReplyValidationError{}
