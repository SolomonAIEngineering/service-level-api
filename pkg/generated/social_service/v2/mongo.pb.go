// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: social_service/v2/mongo.proto

package social_servicev2

import (
	_ "github.com/cosmos/gogoproto/gogoproto"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MediaResize int32

const (
	MediaResize_MEDIA_RESIZE_UNSPECIFIED MediaResize = 0
	MediaResize_MEDIA_RESIZE_CLIP        MediaResize = 1
	MediaResize_MEDIA_RESIZE_CROP        MediaResize = 2
	MediaResize_MEDIA_RESIZE_SCALE       MediaResize = 3
)

// Enum value maps for MediaResize.
var (
	MediaResize_name = map[int32]string{
		0: "MEDIA_RESIZE_UNSPECIFIED",
		1: "MEDIA_RESIZE_CLIP",
		2: "MEDIA_RESIZE_CROP",
		3: "MEDIA_RESIZE_SCALE",
	}
	MediaResize_value = map[string]int32{
		"MEDIA_RESIZE_UNSPECIFIED": 0,
		"MEDIA_RESIZE_CLIP":        1,
		"MEDIA_RESIZE_CROP":        2,
		"MEDIA_RESIZE_SCALE":       3,
	}
)

func (x MediaResize) Enum() *MediaResize {
	p := new(MediaResize)
	*p = x
	return p
}

func (x MediaResize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaResize) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_mongo_proto_enumTypes[0].Descriptor()
}

func (MediaResize) Type() protoreflect.EnumType {
	return &file_social_service_v2_mongo_proto_enumTypes[0]
}

func (x MediaResize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaResize.Descriptor instead.
func (MediaResize) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{0}
}

type MediaCrop int32

const (
	MediaCrop_MEDIA_CROP_UNSPECIFIED MediaCrop = 0
	MediaCrop_MEDIA_CROP_TOP         MediaCrop = 1
	MediaCrop_MEDIA_CROP_BOTTOM      MediaCrop = 2
	MediaCrop_MEDIA_CROP_LEFT        MediaCrop = 3
	MediaCrop_MEDIA_CROP_RIGHT       MediaCrop = 4
	MediaCrop_MEDIA_CROP_CENTER      MediaCrop = 5
)

// Enum value maps for MediaCrop.
var (
	MediaCrop_name = map[int32]string{
		0: "MEDIA_CROP_UNSPECIFIED",
		1: "MEDIA_CROP_TOP",
		2: "MEDIA_CROP_BOTTOM",
		3: "MEDIA_CROP_LEFT",
		4: "MEDIA_CROP_RIGHT",
		5: "MEDIA_CROP_CENTER",
	}
	MediaCrop_value = map[string]int32{
		"MEDIA_CROP_UNSPECIFIED": 0,
		"MEDIA_CROP_TOP":         1,
		"MEDIA_CROP_BOTTOM":      2,
		"MEDIA_CROP_LEFT":        3,
		"MEDIA_CROP_RIGHT":       4,
		"MEDIA_CROP_CENTER":      5,
	}
)

func (x MediaCrop) Enum() *MediaCrop {
	p := new(MediaCrop)
	*p = x
	return p
}

func (x MediaCrop) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaCrop) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_mongo_proto_enumTypes[1].Descriptor()
}

func (MediaCrop) Type() protoreflect.EnumType {
	return &file_social_service_v2_mongo_proto_enumTypes[1]
}

func (x MediaCrop) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaCrop.Descriptor instead.
func (MediaCrop) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{1}
}

type MediaType int32

const (
	MediaType_MEDIA_TYPE_UNSPECIFIED MediaType = 0
	MediaType_MEDIA_TYPE_IMAGE       MediaType = 1
	MediaType_MEDIA_TYPE_VIDEO       MediaType = 2
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MEDIA_TYPE_UNSPECIFIED",
		1: "MEDIA_TYPE_IMAGE",
		2: "MEDIA_TYPE_VIDEO",
	}
	MediaType_value = map[string]int32{
		"MEDIA_TYPE_UNSPECIFIED": 0,
		"MEDIA_TYPE_IMAGE":       1,
		"MEDIA_TYPE_VIDEO":       2,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_mongo_proto_enumTypes[2].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_social_service_v2_mongo_proto_enumTypes[2]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{2}
}

// PostType defines the type of content present in a post
type PostType int32

const (
	PostType_POST_TYPE_UNSPECIFIED  PostType = 0
	PostType_POST_TYPE_POST         PostType = 1
	PostType_POST_TYPE_REPOST       PostType = 2
	PostType_POST_TYPE_QUESTION     PostType = 3
	PostType_POST_TYPE_ACHIEVEMENT  PostType = 4
	PostType_POST_TYPE_ANNOUNCEMENT PostType = 5
	PostType_POST_TYPE_POLL         PostType = 6
	PostType_POST_TYPE_ARTICLE      PostType = 7
	PostType_POST_TYPE_SHORT_STORY  PostType = 8
)

// Enum value maps for PostType.
var (
	PostType_name = map[int32]string{
		0: "POST_TYPE_UNSPECIFIED",
		1: "POST_TYPE_POST",
		2: "POST_TYPE_REPOST",
		3: "POST_TYPE_QUESTION",
		4: "POST_TYPE_ACHIEVEMENT",
		5: "POST_TYPE_ANNOUNCEMENT",
		6: "POST_TYPE_POLL",
		7: "POST_TYPE_ARTICLE",
		8: "POST_TYPE_SHORT_STORY",
	}
	PostType_value = map[string]int32{
		"POST_TYPE_UNSPECIFIED":  0,
		"POST_TYPE_POST":         1,
		"POST_TYPE_REPOST":       2,
		"POST_TYPE_QUESTION":     3,
		"POST_TYPE_ACHIEVEMENT":  4,
		"POST_TYPE_ANNOUNCEMENT": 5,
		"POST_TYPE_POLL":         6,
		"POST_TYPE_ARTICLE":      7,
		"POST_TYPE_SHORT_STORY":  8,
	}
)

func (x PostType) Enum() *PostType {
	p := new(PostType)
	*p = x
	return p
}

func (x PostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_mongo_proto_enumTypes[3].Descriptor()
}

func (PostType) Type() protoreflect.EnumType {
	return &file_social_service_v2_mongo_proto_enumTypes[3]
}

func (x PostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostType.Descriptor instead.
func (PostType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{3}
}

// AccountType used to differ the type of profile an operation
// is being performed against
type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_UNSPECIFIED AccountType = 0
	AccountType_ACCOUNT_TYPE_USER        AccountType = 1
	AccountType_ACCOUNT_TYPE_COMMUNITY   AccountType = 2
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "ACCOUNT_TYPE_UNSPECIFIED",
		1: "ACCOUNT_TYPE_USER",
		2: "ACCOUNT_TYPE_COMMUNITY",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_UNSPECIFIED": 0,
		"ACCOUNT_TYPE_USER":        1,
		"ACCOUNT_TYPE_COMMUNITY":   2,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_mongo_proto_enumTypes[4].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_social_service_v2_mongo_proto_enumTypes[4]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{4}
}

type ThreadParticipantType int32

const (
	ThreadParticipantType_THREAD_PARTICIPANT_TYPE_UNSPECIFIED ThreadParticipantType = 0
	ThreadParticipantType_THREAD_PARTICIPANT_TYPE_PARENT      ThreadParticipantType = 1
	ThreadParticipantType_THREAD_PARTICIPANT_TYPE_PARTICIPANT ThreadParticipantType = 2
)

// Enum value maps for ThreadParticipantType.
var (
	ThreadParticipantType_name = map[int32]string{
		0: "THREAD_PARTICIPANT_TYPE_UNSPECIFIED",
		1: "THREAD_PARTICIPANT_TYPE_PARENT",
		2: "THREAD_PARTICIPANT_TYPE_PARTICIPANT",
	}
	ThreadParticipantType_value = map[string]int32{
		"THREAD_PARTICIPANT_TYPE_UNSPECIFIED": 0,
		"THREAD_PARTICIPANT_TYPE_PARENT":      1,
		"THREAD_PARTICIPANT_TYPE_PARTICIPANT": 2,
	}
)

func (x ThreadParticipantType) Enum() *ThreadParticipantType {
	p := new(ThreadParticipantType)
	*p = x
	return p
}

func (x ThreadParticipantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThreadParticipantType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_mongo_proto_enumTypes[5].Descriptor()
}

func (ThreadParticipantType) Type() protoreflect.EnumType {
	return &file_social_service_v2_mongo_proto_enumTypes[5]
}

func (x ThreadParticipantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThreadParticipantType.Descriptor instead.
func (ThreadParticipantType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{5}
}

type Reaction int32

const (
	Reaction_REACTION_UNSPECIFIED Reaction = 0
	Reaction_REACTION_LIKE        Reaction = 1
	Reaction_REACTION_LOVE        Reaction = 2
	Reaction_REACTION_HAHA        Reaction = 3
	Reaction_REACTION_WOW         Reaction = 4
	Reaction_REACTION_SAD         Reaction = 5
	Reaction_REACTION_ANGRY       Reaction = 6
	Reaction_REACTION_DISLIKE     Reaction = 7
)

// Enum value maps for Reaction.
var (
	Reaction_name = map[int32]string{
		0: "REACTION_UNSPECIFIED",
		1: "REACTION_LIKE",
		2: "REACTION_LOVE",
		3: "REACTION_HAHA",
		4: "REACTION_WOW",
		5: "REACTION_SAD",
		6: "REACTION_ANGRY",
		7: "REACTION_DISLIKE",
	}
	Reaction_value = map[string]int32{
		"REACTION_UNSPECIFIED": 0,
		"REACTION_LIKE":        1,
		"REACTION_LOVE":        2,
		"REACTION_HAHA":        3,
		"REACTION_WOW":         4,
		"REACTION_SAD":         5,
		"REACTION_ANGRY":       6,
		"REACTION_DISLIKE":     7,
	}
)

func (x Reaction) Enum() *Reaction {
	p := new(Reaction)
	*p = x
	return p
}

func (x Reaction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reaction) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_mongo_proto_enumTypes[6].Descriptor()
}

func (Reaction) Type() protoreflect.EnumType {
	return &file_social_service_v2_mongo_proto_enumTypes[6]
}

func (x Reaction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reaction.Descriptor instead.
func (Reaction) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{6}
}

type ContentInsights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentenceCount      uint64      `protobuf:"varint,1,opt,name=sentence_count,json=sentenceCount,proto3" json:"sentence_count,omitempty"`
	WordCount          uint64      `protobuf:"varint,2,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
	Language           string      `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	LanguageConfidence float32     `protobuf:"fixed32,4,opt,name=language_confidence,json=languageConfidence,proto3" json:"language_confidence,omitempty"`
	Entities           []*Entities `protobuf:"bytes,5,rep,name=entities,proto3" json:"entities,omitempty"`
	Sentiment          *Sentiment  `protobuf:"bytes,6,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
}

func (x *ContentInsights) Reset() {
	*x = ContentInsights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentInsights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentInsights) ProtoMessage() {}

func (x *ContentInsights) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentInsights.ProtoReflect.Descriptor instead.
func (*ContentInsights) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{0}
}

func (x *ContentInsights) GetSentenceCount() uint64 {
	if x != nil {
		return x.SentenceCount
	}
	return 0
}

func (x *ContentInsights) GetWordCount() uint64 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

func (x *ContentInsights) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ContentInsights) GetLanguageConfidence() float32 {
	if x != nil {
		return x.LanguageConfidence
	}
	return 0
}

func (x *ContentInsights) GetEntities() []*Entities {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ContentInsights) GetSentiment() *Sentiment {
	if x != nil {
		return x.Sentiment
	}
	return nil
}

type Entities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Entities) Reset() {
	*x = Entities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entities) ProtoMessage() {}

func (x *Entities) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entities.ProtoReflect.Descriptor instead.
func (*Entities) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{1}
}

func (x *Entities) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Entities) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type Sentiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Negative float32 `protobuf:"fixed32,1,opt,name=negative,proto3" json:"negative,omitempty"`
	Neutral  float32 `protobuf:"fixed32,2,opt,name=neutral,proto3" json:"neutral,omitempty"`
	Positive float32 `protobuf:"fixed32,3,opt,name=positive,proto3" json:"positive,omitempty"`
	Compound float32 `protobuf:"fixed32,4,opt,name=compound,proto3" json:"compound,omitempty"`
}

func (x *Sentiment) Reset() {
	*x = Sentiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sentiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentiment) ProtoMessage() {}

func (x *Sentiment) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentiment.ProtoReflect.Descriptor instead.
func (*Sentiment) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{2}
}

func (x *Sentiment) GetNegative() float32 {
	if x != nil {
		return x.Negative
	}
	return 0
}

func (x *Sentiment) GetNeutral() float32 {
	if x != nil {
		return x.Neutral
	}
	return 0
}

func (x *Sentiment) GetPositive() float32 {
	if x != nil {
		return x.Positive
	}
	return 0
}

func (x *Sentiment) GetCompound() float32 {
	if x != nil {
		return x.Compound
	}
	return 0
}

type MediaMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Resize      MediaResize `protobuf:"varint,2,opt,name=resize,proto3,enum=social_service.v2.MediaResize" json:"resize,omitempty"`
	Crop        MediaCrop   `protobuf:"varint,3,opt,name=crop,proto3,enum=social_service.v2.MediaCrop" json:"crop,omitempty"`
	ImageWidth  int64       `protobuf:"varint,4,opt,name=image_width,json=imageWidth,proto3" json:"image_width,omitempty"`
	ImageHeight int64       `protobuf:"varint,5,opt,name=image_height,json=imageHeight,proto3" json:"image_height,omitempty"`
	Type        MediaType   `protobuf:"varint,6,opt,name=type,proto3,enum=social_service.v2.MediaType" json:"type,omitempty"`
}

func (x *MediaMetadata) Reset() {
	*x = MediaMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaMetadata) ProtoMessage() {}

func (x *MediaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaMetadata.ProtoReflect.Descriptor instead.
func (*MediaMetadata) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{3}
}

func (x *MediaMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MediaMetadata) GetResize() MediaResize {
	if x != nil {
		return x.Resize
	}
	return MediaResize_MEDIA_RESIZE_UNSPECIFIED
}

func (x *MediaMetadata) GetCrop() MediaCrop {
	if x != nil {
		return x.Crop
	}
	return MediaCrop_MEDIA_CROP_UNSPECIFIED
}

func (x *MediaMetadata) GetImageWidth() int64 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *MediaMetadata) GetImageHeight() int64 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

func (x *MediaMetadata) GetType() MediaType {
	if x != nil {
		return x.Type
	}
	return MediaType_MEDIA_TYPE_UNSPECIFIED
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt string         `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Link      string         `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Metadata  *MediaMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{4}
}

func (x *Media) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Media) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Media) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Media) GetMetadata() *MediaMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Posts: Critical to activities and define the content sent over by users and
// communities
type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Post ID
	// @gotag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	// Time post was created at
	// @gotag: bson:"createdAt"
	CreatedAt string `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"createdAt"`
	// PostType defines the intent of the post
	// @gotag: bson:"action"
	Action PostType `protobuf:"varint,3,opt,name=action,proto3,enum=social_service.v2.PostType" json:"action,omitempty" bson:"action"`
	// Content is the content the post witholds
	// Content is a string of text that is at least 5 characters long
	// @gotag: bson:"content"
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty" bson:"content"`
	// Profiles mentioned in the post
	// @gotag: bson:"mentions"
	Mentions []string `protobuf:"bytes,5,rep,name=mentions,proto3" json:"mentions,omitempty" bson:"mentions"`
	// Hashtags defined in the post
	// @gotag: bson:"hashtags"
	Hashtags []string `protobuf:"bytes,6,rep,name=hashtags,proto3" json:"hashtags,omitempty" bson:"hashtags"`
	// Media associated with the post
	// @gotag: bson:"media"
	Media *Media `protobuf:"bytes,7,opt,name=media,proto3" json:"media,omitempty" bson:"media"`
	// Blob of extra content tied to the post
	// @gotag: bson:"extra"
	Extra map[string]string `protobuf:"bytes,9,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"extra"`
	// Comments tied to the post
	// @gotag: bson:"comments"
	Comments []*Comment `protobuf:"bytes,10,rep,name=comments,proto3" json:"comments,omitempty" bson:"comments"`
	// ID of the user creating the post
	// @gotag: bson:"simfinyPlatformUserId"
	SimfinyPlatformUserId uint64 `protobuf:"varint,11,opt,name=simfiny_platform_user_id,json=simfinyPlatformUserId,proto3" json:"simfiny_platform_user_id,omitempty" bson:"simfinyPlatformUserId"`
	// @gotag: bson:"profileId"
	ProfileId uint64 `protobuf:"varint,12,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" bson:"profileId"`
	// @gotag: bson:"title"
	Title string `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty" bson:"title"`
	// @gotag: bson:"tags"
	Tags []string `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty" bson:"tags"`
	// The topic to which this post is currently associated to. For non-community
	// profiles, posts are not associated to any topic. However for the commmunity
	// case, posts are associated to topic
	// @gotag: bson:"topicName"
	TopicName string `protobuf:"bytes,15,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" bson:"topicName"`
	// Username of the person making the comment
	// @gotag: bson:"authorUsername"
	AuthorUsername string `protobuf:"bytes,16,opt,name=author_username,json=authorUsername,proto3" json:"author_username,omitempty" bson:"authorUsername"`
	// Profile image of the person making this comment
	// @gotag: bson:"authorProfileImage"
	AuthorProfileImage string `protobuf:"bytes,17,opt,name=author_profile_image,json=authorProfileImage,proto3" json:"author_profile_image,omitempty" bson:"authorProfileImage"`
	// AffinityScore is the average rating users on the platform associate with a
	// piece of content. It is taken as the weighted average across all reactions
	// for the particular post
	// @gotag: bson:"affinityScore"
	AffinityScore uint64 `protobuf:"varint,18,opt,name=affinity_score,json=affinityScore,proto3" json:"affinity_score,omitempty" bson:"affinityScore"`
	// QualityScore is the quality of the given piece of content.
	// @gotag: bson:"qualityScore"
	QualityScore uint64 `protobuf:"varint,19,opt,name=quality_score,json=qualityScore,proto3" json:"quality_score,omitempty" bson:"qualityScore"`
	// UserIDToAffinityScoreMap witholds a mapping of all user profiles who left
	// an affinity score
	// @gotag: bson:"userIdToAffinityScoreMap"
	UserIdToAffinityScoreMap map[uint64]uint64 `protobuf:"bytes,20,rep,name=user_id_to_affinity_score_map,json=userIdToAffinityScoreMap,proto3" json:"user_id_to_affinity_score_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"userIdToAffinityScoreMap"`
	// @gotag: bson:"insights"
	Insights *ContentInsights `protobuf:"bytes,21,opt,name=insights,proto3" json:"insights,omitempty" bson:"insights"`
	// ReportCount details the number of reports were associated with a post
	// A report is used as a signal to disclose the post's content are in
	// violation of platform rules
	// @gotag: bson:"userIdToReportsMap"
	UserIdToReportsMap map[uint64]uint64 `protobuf:"bytes,22,rep,name=user_id_to_reports_map,json=userIdToReportsMap,proto3" json:"user_id_to_reports_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"userIdToReportsMap"`
	// ReadingTime outlines the number of minutes it would take to read the
	// contents of this post
	// @gotag: bson:"readingTime"
	ReadingTime string `protobuf:"bytes,23,opt,name=reading_time,json=readingTime,proto3" json:"reading_time,omitempty" bson:"readingTime"`
	// BackgroundImageUrl signifies an image to associate to a post object.
	// Such urls are only associated when a post is an article or short story
	// @gotag: bson:"backgroundImageUrl"
	BackgroundImageUrl string `protobuf:"bytes,24,opt,name=background_image_url,json=backgroundImageUrl,proto3" json:"background_image_url,omitempty" bson:"backgroundImageUrl"`
	// AccountType is the account type of the creator of this piece of
	// content
	// @gotag: bson:"authorAccountType"
	AuthorAccountType AccountType `protobuf:"varint,25,opt,name=author_account_type,json=authorAccountType,proto3,enum=social_service.v2.AccountType" json:"author_account_type,omitempty" bson:"authorAccountType"`
	// the set of notes associated to this piece of content
	// @gotag: bson:"notes"
	Notes []*Note `protobuf:"bytes,30,rep,name=notes,proto3" json:"notes,omitempty" bson:"notes"`
	// a thread a is a continuation of posts associated to a singular post
	// @gotag: bson:"thread"
	Thread *Thread `protobuf:"bytes,31,opt,name=thread,proto3" json:"thread,omitempty" bson:"thread"`
	// thread participant posts are not sent to get stream to be part of the social graph.
	// posts that are the parent of their thread are sent to get stream to comprise the social graph
	// @gotag: bson:"threadParticipantType"
	ThreadParticipantType ThreadParticipantType `protobuf:"varint,32,opt,name=thread_participant_type,json=threadParticipantType,proto3,enum=social_service.v2.ThreadParticipantType" json:"thread_participant_type,omitempty" bson:"threadParticipantType"`
	// a map of user ids to reactions left by users
	// @gotag: bson:"userIdToReactionMap"
	UserIdToReactionMap map[uint64]Reaction `protobuf:"bytes,33,rep,name=user_id_to_reaction_map,json=userIdToReactionMap,proto3" json:"user_id_to_reaction_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=social_service.v2.Reaction" bson:"userIdToReactionMap"`
	// if the post is a question, this field will hold the response to the question by the ai
	// @gotag: bson:"aiGeneratedQuestionResponse"
	AiGeneratedQuestionResponse string `protobuf:"bytes,34,opt,name=ai_generated_question_response,json=aiGeneratedQuestionResponse,proto3" json:"ai_generated_question_response,omitempty" bson:"aiGeneratedQuestionResponse"`
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{5}
}

func (x *Post) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Post) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Post) GetAction() PostType {
	if x != nil {
		return x.Action
	}
	return PostType_POST_TYPE_UNSPECIFIED
}

func (x *Post) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Post) GetMentions() []string {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Post) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *Post) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Post) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Post) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Post) GetSimfinyPlatformUserId() uint64 {
	if x != nil {
		return x.SimfinyPlatformUserId
	}
	return 0
}

func (x *Post) GetProfileId() uint64 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

func (x *Post) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Post) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Post) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *Post) GetAuthorUsername() string {
	if x != nil {
		return x.AuthorUsername
	}
	return ""
}

func (x *Post) GetAuthorProfileImage() string {
	if x != nil {
		return x.AuthorProfileImage
	}
	return ""
}

func (x *Post) GetAffinityScore() uint64 {
	if x != nil {
		return x.AffinityScore
	}
	return 0
}

func (x *Post) GetQualityScore() uint64 {
	if x != nil {
		return x.QualityScore
	}
	return 0
}

func (x *Post) GetUserIdToAffinityScoreMap() map[uint64]uint64 {
	if x != nil {
		return x.UserIdToAffinityScoreMap
	}
	return nil
}

func (x *Post) GetInsights() *ContentInsights {
	if x != nil {
		return x.Insights
	}
	return nil
}

func (x *Post) GetUserIdToReportsMap() map[uint64]uint64 {
	if x != nil {
		return x.UserIdToReportsMap
	}
	return nil
}

func (x *Post) GetReadingTime() string {
	if x != nil {
		return x.ReadingTime
	}
	return ""
}

func (x *Post) GetBackgroundImageUrl() string {
	if x != nil {
		return x.BackgroundImageUrl
	}
	return ""
}

func (x *Post) GetAuthorAccountType() AccountType {
	if x != nil {
		return x.AuthorAccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *Post) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Post) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *Post) GetThreadParticipantType() ThreadParticipantType {
	if x != nil {
		return x.ThreadParticipantType
	}
	return ThreadParticipantType_THREAD_PARTICIPANT_TYPE_UNSPECIFIED
}

func (x *Post) GetUserIdToReactionMap() map[uint64]Reaction {
	if x != nil {
		return x.UserIdToReactionMap
	}
	return nil
}

func (x *Post) GetAiGeneratedQuestionResponse() string {
	if x != nil {
		return x.AiGeneratedQuestionResponse
	}
	return ""
}

type PollPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Post ID
	// @gotag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	// Time post was created at
	// @gotag: bson:"createdAt"
	CreatedAt string `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"createdAt"`
	// PostType defines the intent of the post
	// @gotag: bson:"action"
	Action PostType `protobuf:"varint,3,opt,name=action,proto3,enum=social_service.v2.PostType" json:"action,omitempty" bson:"action"`
	// Content is the content the post witholds
	// Content is a string of text that is at least 5 characters long
	// @gotag: bson:"content"
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty" bson:"content"`
	// Profiles mentioned in the post
	// @gotag: bson:"mentions"
	Mentions []string `protobuf:"bytes,5,rep,name=mentions,proto3" json:"mentions,omitempty" bson:"mentions"`
	// Hashtags defined in the post
	// @gotag: bson:"hashtags"
	Hashtags []string `protobuf:"bytes,6,rep,name=hashtags,proto3" json:"hashtags,omitempty" bson:"hashtags"`
	// Media associated with the post
	// @gotag: bson:"media"
	Media *Media `protobuf:"bytes,7,opt,name=media,proto3" json:"media,omitempty" bson:"media"`
	// Blob of extra content tied to the post
	// @gotag: bson:"extra"
	Extra map[string]string `protobuf:"bytes,9,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"extra"`
	// Comments tied to the post
	// @gotag: bson:"comments"
	Comments []*Comment `protobuf:"bytes,10,rep,name=comments,proto3" json:"comments,omitempty" bson:"comments"`
	// ID of the user creating the post
	// @gotag: bson:"simfinyPlatformUserId"
	SimfinyPlatformUserId uint64 `protobuf:"varint,11,opt,name=simfiny_platform_user_id,json=simfinyPlatformUserId,proto3" json:"simfiny_platform_user_id,omitempty" bson:"simfinyPlatformUserId"`
	// ID of the profile creating the post
	// @gotag: bson:"profileId"
	ProfileId uint64 `protobuf:"varint,12,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" bson:"profileId"`
	// Title of the post
	// @gotag: bson:"title"
	Title string `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty" bson:"title"`
	// Tags associated with the post
	// @gotag: bson:"tags"
	Tags []string `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty" bson:"tags"`
	// The topic to which this post is currently associated to. For non-community
	// profiles, posts are not associated to any topic. However for the commmunity
	// case, posts are associated to topic
	// @gotag: bson:"topicName"
	TopicName string `protobuf:"bytes,15,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" bson:"topicName"`
	// Username of the person making the comment
	// @gotag: bson:"authorUsername"
	AuthorUsername string `protobuf:"bytes,16,opt,name=author_username,json=authorUsername,proto3" json:"author_username,omitempty" bson:"authorUsername"`
	// Profile image of the person making this comment
	// @gotag: bson:"authorProfileImage"
	AuthorProfileImage string `protobuf:"bytes,17,opt,name=author_profile_image,json=authorProfileImage,proto3" json:"author_profile_image,omitempty" bson:"authorProfileImage"`
	// AffinityScore is the average rating users on the platform associate with a
	// piece of content. It is taken as the weighted average across all reactions
	// for the particular post
	// @gotag: bson:"affinityScore"
	AffinityScore uint64 `protobuf:"varint,18,opt,name=affinity_score,json=affinityScore,proto3" json:"affinity_score,omitempty" bson:"affinityScore"`
	// QualityScore is the quality of the given piece of content.
	// It is taken as the weighted average across all reactions for the particular
	// post
	// @gotag: bson:"qualityScore"
	QualityScore uint64 `protobuf:"varint,19,opt,name=quality_score,json=qualityScore,proto3" json:"quality_score,omitempty" bson:"qualityScore"`
	// UserIDToAffinityScoreMap witholds a mapping of all user profiles who left
	// an affinity score
	// @gotag: bson:"userIdToAffinityScoreMap"
	UserIdToAffinityScoreMap map[uint64]uint64 `protobuf:"bytes,20,rep,name=user_id_to_affinity_score_map,json=userIdToAffinityScoreMap,proto3" json:"user_id_to_affinity_score_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"userIdToAffinityScoreMap"`
	// Insights is a map of all insights associated to a post
	// @gotag: bson:"insights"
	Insights *ContentInsights `protobuf:"bytes,21,opt,name=insights,proto3" json:"insights,omitempty" bson:"insights"`
	// ReportCount details the number of reports were associated with a post
	// A report is used as a signal to disclose the post's content are in
	// violation of platform rules
	// @gotag: bson:"userIdToReportsMap"
	UserIdToReportsMap map[uint64]uint64 `protobuf:"bytes,22,rep,name=user_id_to_reports_map,json=userIdToReportsMap,proto3" json:"user_id_to_reports_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"userIdToReportsMap"`
	// BackgroundImageUrl signifies an image to associate to a post object.
	// Such urls are only associated when a post is an article or short story
	// @gotag: bson:"backgroundImageUrl"
	BackgroundImageUrl string `protobuf:"bytes,24,opt,name=background_image_url,json=backgroundImageUrl,proto3" json:"background_image_url,omitempty" bson:"backgroundImageUrl"`
	// AccountType is the account type of the creator of this piece of
	// content
	// @gotag: bson:"authorAccountType"
	AuthorAccountType AccountType `protobuf:"varint,25,opt,name=author_account_type,json=authorAccountType,proto3,enum=social_service.v2.AccountType" json:"author_account_type,omitempty" bson:"authorAccountType"`
	// A hash map of user ids to poll responses left by users
	// @gotag: bson:"userIdToPollResponseMap"
	UserIdToPollResponsesMap map[uint64]*PollResponse `protobuf:"bytes,26,rep,name=user_id_to_poll_responses_map,json=userIdToPollResponsesMap,proto3" json:"user_id_to_poll_responses_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"userIdToPollResponseMap"`
	// the set of options the poll witholds
	// @gotag: bson:"pollOptions"
	PollOptions []string `protobuf:"bytes,27,rep,name=poll_options,json=pollOptions,proto3" json:"poll_options,omitempty" bson:"pollOptions"`
	// the distribution of poll responses (in percentage form)
	// @gotag: bson:"pollDistribution"
	PollDistribution map[string]float64 `protobuf:"bytes,28,rep,name=poll_distribution,json=pollDistribution,proto3" json:"poll_distribution,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3" bson:"pollDistribution"`
	// the end date of the given poll
	// @gotag: bson:"pollEndDate"
	PollEndDate *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=poll_end_date,json=pollEndDate,proto3" json:"poll_end_date,omitempty" bson:"pollEndDate"`
	// the set of notes associated to this piece of content
	// @gotag: bson:"notes"
	Notes []*Note `protobuf:"bytes,30,rep,name=notes,proto3" json:"notes,omitempty" bson:"notes"`
	// a thread a is a continuation of posts associated to a singular post
	// @gotag: bson:"thread"
	Thread *Thread `protobuf:"bytes,31,opt,name=thread,proto3" json:"thread,omitempty" bson:"thread"`
	// thread participant posts are not sent to get stream to be part of the social graph.
	// posts that are the parent of their thread are sent to get stream to comprise the social graph
	// @gotag: bson:"threadParticipantType"
	ThreadParticipantType ThreadParticipantType `protobuf:"varint,32,opt,name=thread_participant_type,json=threadParticipantType,proto3,enum=social_service.v2.ThreadParticipantType" json:"thread_participant_type,omitempty" bson:"threadParticipantType"`
	// a map of user ids to reactions left by users
	// @gotag: bson:"userIdToReactionMap"
	UserIdToReactionMap map[uint64]Reaction `protobuf:"bytes,33,rep,name=user_id_to_reaction_map,json=userIdToReactionMap,proto3" json:"user_id_to_reaction_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=social_service.v2.Reaction" bson:"userIdToReactionMap"`
}

func (x *PollPost) Reset() {
	*x = PollPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollPost) ProtoMessage() {}

func (x *PollPost) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollPost.ProtoReflect.Descriptor instead.
func (*PollPost) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{6}
}

func (x *PollPost) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PollPost) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PollPost) GetAction() PostType {
	if x != nil {
		return x.Action
	}
	return PostType_POST_TYPE_UNSPECIFIED
}

func (x *PollPost) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PollPost) GetMentions() []string {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *PollPost) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *PollPost) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *PollPost) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PollPost) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *PollPost) GetSimfinyPlatformUserId() uint64 {
	if x != nil {
		return x.SimfinyPlatformUserId
	}
	return 0
}

func (x *PollPost) GetProfileId() uint64 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

func (x *PollPost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PollPost) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PollPost) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *PollPost) GetAuthorUsername() string {
	if x != nil {
		return x.AuthorUsername
	}
	return ""
}

func (x *PollPost) GetAuthorProfileImage() string {
	if x != nil {
		return x.AuthorProfileImage
	}
	return ""
}

func (x *PollPost) GetAffinityScore() uint64 {
	if x != nil {
		return x.AffinityScore
	}
	return 0
}

func (x *PollPost) GetQualityScore() uint64 {
	if x != nil {
		return x.QualityScore
	}
	return 0
}

func (x *PollPost) GetUserIdToAffinityScoreMap() map[uint64]uint64 {
	if x != nil {
		return x.UserIdToAffinityScoreMap
	}
	return nil
}

func (x *PollPost) GetInsights() *ContentInsights {
	if x != nil {
		return x.Insights
	}
	return nil
}

func (x *PollPost) GetUserIdToReportsMap() map[uint64]uint64 {
	if x != nil {
		return x.UserIdToReportsMap
	}
	return nil
}

func (x *PollPost) GetBackgroundImageUrl() string {
	if x != nil {
		return x.BackgroundImageUrl
	}
	return ""
}

func (x *PollPost) GetAuthorAccountType() AccountType {
	if x != nil {
		return x.AuthorAccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *PollPost) GetUserIdToPollResponsesMap() map[uint64]*PollResponse {
	if x != nil {
		return x.UserIdToPollResponsesMap
	}
	return nil
}

func (x *PollPost) GetPollOptions() []string {
	if x != nil {
		return x.PollOptions
	}
	return nil
}

func (x *PollPost) GetPollDistribution() map[string]float64 {
	if x != nil {
		return x.PollDistribution
	}
	return nil
}

func (x *PollPost) GetPollEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PollEndDate
	}
	return nil
}

func (x *PollPost) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *PollPost) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *PollPost) GetThreadParticipantType() ThreadParticipantType {
	if x != nil {
		return x.ThreadParticipantType
	}
	return ThreadParticipantType_THREAD_PARTICIPANT_TYPE_UNSPECIFIED
}

func (x *PollPost) GetUserIdToReactionMap() map[uint64]Reaction {
	if x != nil {
		return x.UserIdToReactionMap
	}
	return nil
}

type PollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the poll response
	// @gotag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	// the user id who left the poll response
	// @gotag: bson:"userId"
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"userId"`
	// the actual poll response left by the user
	// @gotag: bson:"responseValue"
	ResponseValue string `protobuf:"bytes,3,opt,name=response_value,json=responseValue,proto3" json:"response_value,omitempty" bson:"responseValue"`
	// the index of the given response
	// @gotag: bson:"responseIdx"
	ResponseIdx uint64 `protobuf:"varint,4,opt,name=response_idx,json=responseIdx,proto3" json:"response_idx,omitempty" bson:"responseIdx"`
}

func (x *PollResponse) Reset() {
	*x = PollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResponse) ProtoMessage() {}

func (x *PollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResponse.ProtoReflect.Descriptor instead.
func (*PollResponse) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{7}
}

func (x *PollResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PollResponse) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PollResponse) GetResponseValue() string {
	if x != nil {
		return x.ResponseValue
	}
	return ""
}

func (x *PollResponse) GetResponseIdx() uint64 {
	if x != nil {
		return x.ResponseIdx
	}
	return 0
}

// SharedPost: Posts reshared by other profiles
// TODO: need to expose api endpoints to interact with shared posts
type SharedPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RePost ID
	// @gotag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	// Original Post ID
	// @gotag: bson:"originalPostId"
	OriginalPostId string `protobuf:"bytes,2,opt,name=original_post_id,json=originalPostId,proto3" json:"original_post_id,omitempty" bson:"originalPostId"`
	// The username of the original author
	// @gotag: bson:"originalAuthorUsername"
	OriginalAuthorUsername string `protobuf:"bytes,3,opt,name=original_author_username,json=originalAuthorUsername,proto3" json:"original_author_username,omitempty" bson:"originalAuthorUsername"`
	// Time post was created at
	// @gotag: bson:"createdAt"
	CreatedAt string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"createdAt"`
	// Content is the content the post witholds
	// Content is a string of text that is at least 5 characters long
	// @gotag: bson:"content"
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty" bson:"content"`
	// Profiles mentioned in the post
	// @gotag: bson:"mentions"
	Mentions []string `protobuf:"bytes,7,rep,name=mentions,proto3" json:"mentions,omitempty" bson:"mentions"`
	// Hashtags defined in the post
	// @gotag: bson:"hashtags"
	Hashtags []string `protobuf:"bytes,8,rep,name=hashtags,proto3" json:"hashtags,omitempty" bson:"hashtags"`
	// Blob of extra content tied to the post
	// @gotag: bson:"extra"
	Extra map[string]string `protobuf:"bytes,10,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"extra"`
	// Comments tied to the post
	// @gotag: bson:"comments"
	Comments []*Comment `protobuf:"bytes,11,rep,name=comments,proto3" json:"comments,omitempty" bson:"comments"`
	// ID of the user resharing the post
	// @gotag: bson:"simfinyPlatformUserId"
	SimfinyPlatformUserId uint64 `protobuf:"varint,12,opt,name=simfiny_platform_user_id,json=simfinyPlatformUserId,proto3" json:"simfiny_platform_user_id,omitempty" bson:"simfinyPlatformUserId"`
	// ID of the profile resharing the post
	// @gotag: bson:"profileId"
	ProfileId uint64 `protobuf:"varint,13,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" bson:"profileId"`
	// Tags associated with the post
	// @gotag: bson:"tags"
	Tags []string `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty" bson:"tags"`
	// Username of the person making the comment
	// @gotag: bson:"authorUsername"
	AuthorUsername string `protobuf:"bytes,17,opt,name=author_username,json=authorUsername,proto3" json:"author_username,omitempty" bson:"authorUsername"`
	// AffinityScore is the average rating users on the platform associate with a
	// piece of content. It is taken as the weighted average across all reactions
	// for the particular post
	// @gotag: bson:"affinityScore"
	AffinityScore uint64 `protobuf:"varint,19,opt,name=affinity_score,json=affinityScore,proto3" json:"affinity_score,omitempty" bson:"affinityScore"`
	// QualityScore is the quality of the given piece of content.
	// It is taken as the weighted average across all reactions for the particular
	// post
	// @gotag: bson:"qualityScore"
	QualityScore uint64 `protobuf:"varint,20,opt,name=quality_score,json=qualityScore,proto3" json:"quality_score,omitempty" bson:"qualityScore"`
	// UserIDToAffinityScoreMap witholds a mapping of all user profiles who left
	// an affinity score
	// @gotag: bson:"userIdToAffinityScoreMap"
	UserIdToAffinityScoreMap map[uint64]uint64 `protobuf:"bytes,21,rep,name=user_id_to_affinity_score_map,json=userIdToAffinityScoreMap,proto3" json:"user_id_to_affinity_score_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"userIdToAffinityScoreMap"`
	// ReportCount details the number of reports were associated with a post
	// A report is used as a signal to disclose the post's content are in
	// violation of platform rules
	// @gotag: bson:"userIdToReportsMap"
	UserIdToReportsMap map[uint64]uint64 `protobuf:"bytes,23,rep,name=user_id_to_reports_map,json=userIdToReportsMap,proto3" json:"user_id_to_reports_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"userIdToReportsMap"`
	// the set of notes associated to this piece of content
	// @gotag: bson:"notes"
	Notes []*Note `protobuf:"bytes,24,rep,name=notes,proto3" json:"notes,omitempty" bson:"notes"`
	// a thread a is a continuation of posts associated to a singular post
	// @gotag: bson:"thread"
	Thread *Thread `protobuf:"bytes,25,opt,name=thread,proto3" json:"thread,omitempty" bson:"thread"`
	// AccountType is the account type of the creator of this piece of
	// content
	// @gotag: bson:"authorAccountType"
	AuthorAccountType AccountType `protobuf:"varint,26,opt,name=author_account_type,json=authorAccountType,proto3,enum=social_service.v2.AccountType" json:"author_account_type,omitempty" bson:"authorAccountType"`
	// a map of user ids to reactions left by users
	// @gotag: bson:"userIdToReactionMap"
	UserIdToReactionMap map[uint64]Reaction `protobuf:"bytes,34,rep,name=user_id_to_reaction_map,json=userIdToReactionMap,proto3" json:"user_id_to_reaction_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=social_service.v2.Reaction" bson:"userIdToReactionMap"`
	// PostType defines the intent of the post
	// @gotag: bson:"action"
	Action PostType `protobuf:"varint,35,opt,name=action,proto3,enum=social_service.v2.PostType" json:"action,omitempty" bson:"action"`
	// The profile Id of the user who owned the original post
	// @gotag: bson:"originalPostUserProfileId"
	OriginalPostUserProfileId uint64 `protobuf:"varint,36,opt,name=originalPostUserProfileId,proto3" json:"originalPostUserProfileId,omitempty" bson:"originalPostUserProfileId"`
	// The simfiny wide user id of the profile who owned the original post
	// @gotag: bson:"originalPostUserSimfinyPlaformId"
	OriginalPostUserSimfinyPlaformId uint64 `protobuf:"varint,37,opt,name=originalPostUserSimfinyPlaformId,proto3" json:"originalPostUserSimfinyPlaformId,omitempty" bson:"originalPostUserSimfinyPlaformId"`
	// originalPostType defines the intent of the post
	// @gotag: bson:"originalPostAction"
	OriginalPostAction PostType `protobuf:"varint,38,opt,name=originalPostAction,proto3,enum=social_service.v2.PostType" json:"originalPostAction,omitempty" bson:"originalPostAction"`
}

func (x *SharedPost) Reset() {
	*x = SharedPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedPost) ProtoMessage() {}

func (x *SharedPost) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedPost.ProtoReflect.Descriptor instead.
func (*SharedPost) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{8}
}

func (x *SharedPost) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SharedPost) GetOriginalPostId() string {
	if x != nil {
		return x.OriginalPostId
	}
	return ""
}

func (x *SharedPost) GetOriginalAuthorUsername() string {
	if x != nil {
		return x.OriginalAuthorUsername
	}
	return ""
}

func (x *SharedPost) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SharedPost) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SharedPost) GetMentions() []string {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *SharedPost) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *SharedPost) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *SharedPost) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *SharedPost) GetSimfinyPlatformUserId() uint64 {
	if x != nil {
		return x.SimfinyPlatformUserId
	}
	return 0
}

func (x *SharedPost) GetProfileId() uint64 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

func (x *SharedPost) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SharedPost) GetAuthorUsername() string {
	if x != nil {
		return x.AuthorUsername
	}
	return ""
}

func (x *SharedPost) GetAffinityScore() uint64 {
	if x != nil {
		return x.AffinityScore
	}
	return 0
}

func (x *SharedPost) GetQualityScore() uint64 {
	if x != nil {
		return x.QualityScore
	}
	return 0
}

func (x *SharedPost) GetUserIdToAffinityScoreMap() map[uint64]uint64 {
	if x != nil {
		return x.UserIdToAffinityScoreMap
	}
	return nil
}

func (x *SharedPost) GetUserIdToReportsMap() map[uint64]uint64 {
	if x != nil {
		return x.UserIdToReportsMap
	}
	return nil
}

func (x *SharedPost) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *SharedPost) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *SharedPost) GetAuthorAccountType() AccountType {
	if x != nil {
		return x.AuthorAccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *SharedPost) GetUserIdToReactionMap() map[uint64]Reaction {
	if x != nil {
		return x.UserIdToReactionMap
	}
	return nil
}

func (x *SharedPost) GetAction() PostType {
	if x != nil {
		return x.Action
	}
	return PostType_POST_TYPE_UNSPECIFIED
}

func (x *SharedPost) GetOriginalPostUserProfileId() uint64 {
	if x != nil {
		return x.OriginalPostUserProfileId
	}
	return 0
}

func (x *SharedPost) GetOriginalPostUserSimfinyPlaformId() uint64 {
	if x != nil {
		return x.OriginalPostUserSimfinyPlaformId
	}
	return 0
}

func (x *SharedPost) GetOriginalPostAction() PostType {
	if x != nil {
		return x.OriginalPostAction
	}
	return PostType_POST_TYPE_UNSPECIFIED
}

type Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Thread ID
	// @gotag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	// a list of post ids associated to this thread
	// @gotag: bson:"postIds"
	PostIds []string `protobuf:"bytes,2,rep,name=post_ids,json=postIds,proto3" json:"post_ids,omitempty" bson:"postIds"`
	// the id of the parent post
	// @gotag: bson:"parentPostId"
	ParentPostId string `protobuf:"bytes,3,opt,name=parent_post_id,json=parentPostId,proto3" json:"parent_post_id,omitempty" bson:"parentPostId"`
	// @gotag: bson:"createdAt"
	CreatedAt string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"createdAt"`
	// @gotag: bson:"updatedAt"
	UpdatedAt string `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" bson:"updatedAt"`
}

func (x *Thread) Reset() {
	*x = Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{9}
}

func (x *Thread) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Thread) GetPostIds() []string {
	if x != nil {
		return x.PostIds
	}
	return nil
}

func (x *Thread) GetParentPostId() string {
	if x != nil {
		return x.ParentPostId
	}
	return ""
}

func (x *Thread) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Thread) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// A note is a response a user can leave on another user's piece of content. Notes can
// only be seen by the user who created the content (private) and should serve as some form of
// intimate feedback protocol
type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note ID
	// @gotag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	// Platform wide ID of the user creating the note
	// @gotag: bson:"simfinyPlatformUserId"
	SimfinyPlatformUserId uint64 `protobuf:"varint,2,opt,name=simfiny_platform_user_id,json=simfinyPlatformUserId,proto3" json:"simfiny_platform_user_id,omitempty" bson:"simfinyPlatformUserId"`
	// ID of either the user profile or the community profile creating the note
	// @gotag: bson:"profileId"
	ProfileId uint64 `protobuf:"varint,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" bson:"profileId"`
	// Media payload tied to the note
	// @gotag: bson:"media"
	Media *Media `protobuf:"bytes,4,opt,name=media,proto3" json:"media,omitempty" bson:"media"`
	// Profiles mentioned in the note - NOTE: only the creator of the article whom this
	// note is attached to and the mentioned members will be notified. Additionally, this note
	// will only be viewable by those folks
	// @gotag: bson:"mentions"
	Mentions []string `protobuf:"bytes,6,rep,name=mentions,proto3" json:"mentions,omitempty" bson:"mentions"`
	// Hashtags defined in the note
	// @gotag: bson:"hashtags"
	Hashtags []string `protobuf:"bytes,7,rep,name=hashtags,proto3" json:"hashtags,omitempty" bson:"hashtags"`
	// Time when the note was created
	// @gotag: bson:"createdAt"
	CreatedAt string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"createdAt"`
	// Content defining the note
	// @gotag: bson:"content"
	Content string `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty" bson:"content"`
	// AccountType is the account type of the creator of this piece of
	// content
	// @gotag: bson:"authorAccountType"
	AuthorAccountType AccountType `protobuf:"varint,23,opt,name=author_account_type,json=authorAccountType,proto3,enum=social_service.v2.AccountType" json:"author_account_type,omitempty" bson:"authorAccountType"`
	// Username of the person making the note
	// @gotag: bson:"authorUserName"
	AuthorUserName string `protobuf:"bytes,24,opt,name=author_user_name,json=authorUserName,proto3" json:"author_user_name,omitempty" bson:"authorUserName"`
	// Profile image of the person making this note
	// @gotag: bson:"authorProfileImage"
	AuthorProfileImage string `protobuf:"bytes,25,opt,name=author_profile_image,json=authorProfileImage,proto3" json:"author_profile_image,omitempty" bson:"authorProfileImage"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{10}
}

func (x *Note) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Note) GetSimfinyPlatformUserId() uint64 {
	if x != nil {
		return x.SimfinyPlatformUserId
	}
	return 0
}

func (x *Note) GetProfileId() uint64 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

func (x *Note) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Note) GetMentions() []string {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Note) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *Note) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Note) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Note) GetAuthorAccountType() AccountType {
	if x != nil {
		return x.AuthorAccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *Note) GetAuthorUserName() string {
	if x != nil {
		return x.AuthorUserName
	}
	return ""
}

func (x *Note) GetAuthorProfileImage() string {
	if x != nil {
		return x.AuthorProfileImage
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comment ID
	// @gotag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	// Platform wide ID of the user creating the comment
	// @gotag: bson:"simfinyPlatformUserId"
	SimfinyPlatformUserId uint64 `protobuf:"varint,2,opt,name=simfiny_platform_user_id,json=simfinyPlatformUserId,proto3" json:"simfiny_platform_user_id,omitempty" bson:"simfinyPlatformUserId"`
	// ID of either the user profile or the community profile creating the comment
	// @gotag: bson:"profileId"
	ProfileId uint64 `protobuf:"varint,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" bson:"profileId"`
	// Media payload tied to the comment
	// @gotag: bson:"media"
	Media *Media `protobuf:"bytes,4,opt,name=media,proto3" json:"media,omitempty" bson:"media"`
	// Profiles mentioned in the comment
	// @gotag: bson:"mentions"
	Mentions []string `protobuf:"bytes,6,rep,name=mentions,proto3" json:"mentions,omitempty" bson:"mentions"`
	// Hashtags defined in the comment
	// @gotag: bson:"hashtags"
	Hashtags []string `protobuf:"bytes,7,rep,name=hashtags,proto3" json:"hashtags,omitempty" bson:"hashtags"`
	// Time when the comment was created
	// @gotag: bson:"createdAt"
	CreatedAt string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"createdAt"`
	// Content defining the comment
	// @gotag: bson:"content"
	Content string `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty" bson:"content"`
	// Responses to a given comment
	// @gotag: bson:"replies"
	Replies []*CommentReply `protobuf:"bytes,10,rep,name=replies,proto3" json:"replies,omitempty" bson:"replies"`
	// Blob of extra content tied to the comment
	// @gotag: bson:"extra"
	Extra map[string]string `protobuf:"bytes,11,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"extra"`
	// Username of the person making the comment
	// @gotag: bson:"authorUsername"
	AuthorUsername string `protobuf:"bytes,12,opt,name=author_username,json=authorUsername,proto3" json:"author_username,omitempty" bson:"authorUsername"`
	// Profile image of the person making this comment
	// @gotag: bson:"authorProfileImage"
	AuthorProfileImage string `protobuf:"bytes,13,opt,name=author_profile_image,json=authorProfileImage,proto3" json:"author_profile_image,omitempty" bson:"authorProfileImage"`
	// AffinityScore is the average rating users on the platform associate with a
	// piece of content. It is taken as the weighted average across all reactions
	// for the particular post
	// @gotag: bson:"affinityScore"
	AffinityScore uint64 `protobuf:"varint,14,opt,name=affinity_score,json=affinityScore,proto3" json:"affinity_score,omitempty" bson:"affinityScore"`
	// QualityScore is the quality of the given piece of content.
	// It is taken as the weighted average across all reactions for the particular
	// post
	// @gotag: bson:"qualityScore"
	QualityScore uint64 `protobuf:"varint,15,opt,name=quality_score,json=qualityScore,proto3" json:"quality_score,omitempty" bson:"qualityScore"`
	// UserIDToAffinityScoreMap witholds a mapping of all user profiles who left
	// an affinity score
	// @gotag: bson:"userIdToAffinityScoreMap"
	UserIdToAffinityScoreMap map[uint64]uint64 `protobuf:"bytes,16,rep,name=user_id_to_affinity_score_map,json=userIdToAffinityScoreMap,proto3" json:"user_id_to_affinity_score_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"userIdToAffinityScoreMap"`
	// ReportCount details the number of reports were associated with a post
	// A report is used as a signal to disclose the post's content are in
	// violation of platform rules
	// @gotag: bson:"userIdToReportsMap"
	UserIdToReportsMap map[uint64]uint64 `protobuf:"bytes,22,rep,name=user_id_to_reports_map,json=userIdToReportsMap,proto3" json:"user_id_to_reports_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"userIdToReportsMap"`
	// AccountType is the account type of the creator of this piece of
	// content
	// @gotag: bson:"authorAccountType"
	AuthorAccountType AccountType `protobuf:"varint,23,opt,name=author_account_type,json=authorAccountType,proto3,enum=social_service.v2.AccountType" json:"author_account_type,omitempty" bson:"authorAccountType"`
	// a map of user ids to reactions left by users
	// @gotag: bson:"userIdToReactionMap"
	UserIdToReactionMap map[uint64]Reaction `protobuf:"bytes,24,rep,name=user_id_to_reaction_map,json=userIdToReactionMap,proto3" json:"user_id_to_reaction_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=social_service.v2.Reaction" bson:"userIdToReactionMap"`
	// the set of notes associated to this piece of content
	// @gotag: bson:"notes"
	Notes []*Note `protobuf:"bytes,25,rep,name=notes,proto3" json:"notes,omitempty" bson:"notes"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{11}
}

func (x *Comment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Comment) GetSimfinyPlatformUserId() uint64 {
	if x != nil {
		return x.SimfinyPlatformUserId
	}
	return 0
}

func (x *Comment) GetProfileId() uint64 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

func (x *Comment) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Comment) GetMentions() []string {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Comment) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *Comment) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetReplies() []*CommentReply {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *Comment) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Comment) GetAuthorUsername() string {
	if x != nil {
		return x.AuthorUsername
	}
	return ""
}

func (x *Comment) GetAuthorProfileImage() string {
	if x != nil {
		return x.AuthorProfileImage
	}
	return ""
}

func (x *Comment) GetAffinityScore() uint64 {
	if x != nil {
		return x.AffinityScore
	}
	return 0
}

func (x *Comment) GetQualityScore() uint64 {
	if x != nil {
		return x.QualityScore
	}
	return 0
}

func (x *Comment) GetUserIdToAffinityScoreMap() map[uint64]uint64 {
	if x != nil {
		return x.UserIdToAffinityScoreMap
	}
	return nil
}

func (x *Comment) GetUserIdToReportsMap() map[uint64]uint64 {
	if x != nil {
		return x.UserIdToReportsMap
	}
	return nil
}

func (x *Comment) GetAuthorAccountType() AccountType {
	if x != nil {
		return x.AuthorAccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *Comment) GetUserIdToReactionMap() map[uint64]Reaction {
	if x != nil {
		return x.UserIdToReactionMap
	}
	return nil
}

func (x *Comment) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

type CommentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Response ID
	// @gotag: bson:"_id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	// ID of the user creating the comment response
	// @gotag: bson:"simfinyPlatformUserId"
	SimfinyPlatformUserId uint64 `protobuf:"varint,2,opt,name=simfiny_platform_user_id,json=simfinyPlatformUserId,proto3" json:"simfiny_platform_user_id,omitempty" bson:"simfinyPlatformUserId"`
	// ID of either the user profile or the community profile creating the comment response
	// @gotag: bson:"profileId"
	ProfileId uint64 `protobuf:"varint,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" bson:"profileId"`
	// Media payload associated to the response
	// @gotag: bson:"media"
	Media *Media `protobuf:"bytes,4,opt,name=media,proto3" json:"media,omitempty" bson:"media"`
	// Profiles mentioned in the comment
	// @gotag: bson:"mentions"
	Mentions []string `protobuf:"bytes,6,rep,name=mentions,proto3" json:"mentions,omitempty" bson:"mentions"`
	// Hashtags defined in the comment
	// @gotag: bson:"hashtags"
	Hashtags []string `protobuf:"bytes,7,rep,name=hashtags,proto3" json:"hashtags,omitempty" bson:"hashtags"`
	// Time when the comment was created
	// @gotag: bson:"createdAt"
	CreatedAt string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"createdAt"`
	// Content defining the comment
	// @gotag: bson:"content"
	Content string `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty" bson:"content"`
	// Blob of extra content tied to the comment response
	// @gotag: bson:"extra"
	Extra map[string]string `protobuf:"bytes,10,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"extra"`
	// Username of the person making the comment
	// @gotag: bson:"authorUsername"
	AuthorUsername string `protobuf:"bytes,11,opt,name=author_username,json=authorUsername,proto3" json:"author_username,omitempty" bson:"authorUsername"`
	// Profile image of the person making this comment
	// @gotag: bson:"authorProfileImage"
	AuthorProfileImage string `protobuf:"bytes,12,opt,name=author_profile_image,json=authorProfileImage,proto3" json:"author_profile_image,omitempty" bson:"authorProfileImage"`
	// AffinityScore is the average rating users on the platform associate with a
	// piece of content. It is taken as the weighted average across all reactions
	// for the particular post
	// @gotag: bson:"affinityScore"
	AffinityScore uint64 `protobuf:"varint,14,opt,name=affinity_score,json=affinityScore,proto3" json:"affinity_score,omitempty" bson:"affinityScore"`
	// QualityScore is the quality of the given piece of content.
	// It is taken as the weighted average across all reactions for the particular
	// post
	// @gotag: bson:"qualityScore"
	QualityScore uint64 `protobuf:"varint,15,opt,name=quality_score,json=qualityScore,proto3" json:"quality_score,omitempty" bson:"qualityScore"`
	// UserIDToAffinityScoreMap witholds a mapping of all user profiles who left
	// an affinity score
	// @gotag: bson:"userIdToAffinityScoreMap"
	UserIdToAffinityScoreMap map[uint64]uint64 `protobuf:"bytes,16,rep,name=user_id_to_affinity_score_map,json=userIdToAffinityScoreMap,proto3" json:"user_id_to_affinity_score_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"userIdToAffinityScoreMap"`
	// AccountType is the account type of the creator of this piece of
	// content
	// @gotag: bson:"authorAccountType"
	AuthorAccountType AccountType `protobuf:"varint,17,opt,name=author_account_type,json=authorAccountType,proto3,enum=social_service.v2.AccountType" json:"author_account_type,omitempty" bson:"authorAccountType"`
	// a map of user ids to reactions left by users
	// @gotag: bson:"userIdToReactionMap"
	UserIdToReactionMap map[uint64]Reaction `protobuf:"bytes,18,rep,name=user_id_to_reaction_map,json=userIdToReactionMap,proto3" json:"user_id_to_reaction_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=social_service.v2.Reaction" bson:"userIdToReactionMap"`
	// the report count for this comment reply
	// @gotag: bson:"userIdToReportsMap"
	UserIdToReportsMap map[uint64]uint64 `protobuf:"bytes,22,rep,name=user_id_to_reports_map,json=userIdToReportsMap,proto3" json:"user_id_to_reports_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"userIdToReportsMap"`
}

func (x *CommentReply) Reset() {
	*x = CommentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_mongo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentReply) ProtoMessage() {}

func (x *CommentReply) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_mongo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentReply.ProtoReflect.Descriptor instead.
func (*CommentReply) Descriptor() ([]byte, []int) {
	return file_social_service_v2_mongo_proto_rawDescGZIP(), []int{12}
}

func (x *CommentReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommentReply) GetSimfinyPlatformUserId() uint64 {
	if x != nil {
		return x.SimfinyPlatformUserId
	}
	return 0
}

func (x *CommentReply) GetProfileId() uint64 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

func (x *CommentReply) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *CommentReply) GetMentions() []string {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *CommentReply) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *CommentReply) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CommentReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentReply) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *CommentReply) GetAuthorUsername() string {
	if x != nil {
		return x.AuthorUsername
	}
	return ""
}

func (x *CommentReply) GetAuthorProfileImage() string {
	if x != nil {
		return x.AuthorProfileImage
	}
	return ""
}

func (x *CommentReply) GetAffinityScore() uint64 {
	if x != nil {
		return x.AffinityScore
	}
	return 0
}

func (x *CommentReply) GetQualityScore() uint64 {
	if x != nil {
		return x.QualityScore
	}
	return 0
}

func (x *CommentReply) GetUserIdToAffinityScoreMap() map[uint64]uint64 {
	if x != nil {
		return x.UserIdToAffinityScoreMap
	}
	return nil
}

func (x *CommentReply) GetAuthorAccountType() AccountType {
	if x != nil {
		return x.AuthorAccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *CommentReply) GetUserIdToReactionMap() map[uint64]Reaction {
	if x != nil {
		return x.UserIdToReactionMap
	}
	return nil
}

func (x *CommentReply) GetUserIdToReportsMap() map[uint64]uint64 {
	if x != nil {
		return x.UserIdToReportsMap
	}
	return nil
}

var File_social_service_v2_mongo_proto protoreflect.FileDescriptor

var file_social_service_v2_mongo_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x32, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x13,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x12,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x3e, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x33, 0x30, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x35, 0x30, 0x52, 0x07,
	0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02,
	0x38, 0x39, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x07,
	0x92, 0x41, 0x04, 0x4a, 0x02, 0x39, 0x33, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x22, 0xff, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x63,
	0x72, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdc,
	0x0e, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x17, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x11,
	0x82, 0x01, 0x0e, 0x10, 0x01, 0x18, 0x01, 0x18, 0x03, 0x18, 0x04, 0x18, 0x05, 0x18, 0x07, 0x18,
	0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x20, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x18, 0x73, 0x69, 0x6d,
	0x66, 0x69, 0x6e, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00,
	0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x15, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x76, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x53, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x60, 0x0a, 0x17, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a,
	0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x69, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61,
	0x69, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x45, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x11,
	0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x08, 0x06, 0x10, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x05, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x36,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x18, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x15, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x7a, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x50,
	0x6f, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x16, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54,
	0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x53, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a, 0x1d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x02, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x6c,
	0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x60, 0x0a, 0x17, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45,
	0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6c, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54,
	0x6f, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01,
	0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x78, 0x22, 0xb3, 0x0e,
	0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x10,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22, 0x74, 0x65,
	0x73, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x22, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x43, 0x0a, 0x18, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x15, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00,
	0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x7c, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x54, 0x6f, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x54, 0x6f, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x69, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x2d, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x53, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x50, 0x6f, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x08, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x56, 0x0a, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x50, 0x6c, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x50,
	0x6c, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x19, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x13, 0x82, 0x01, 0x10, 0x10, 0x01, 0x18, 0x01,
	0x18, 0x03, 0x18, 0x04, 0x18, 0x05, 0x18, 0x06, 0x18, 0x07, 0x18, 0x08, 0x52, 0x12, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63,
	0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfc, 0x03, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x18, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x15, 0x73,
	0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x13,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20,
	0x01, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x43, 0x0a, 0x18, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52,
	0x15, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x46, 0x0a, 0x0f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d,
	0x75, 0x73, 0x65, 0x72, 0x22, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x20, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52,
	0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x79, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x66, 0x0a, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d,
	0x61, 0x70, 0x12, 0x53, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x63, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x0a, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x18, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32,
	0x02, 0x20, 0x00, 0x52, 0x15, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a,
	0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x46, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4f, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x12, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x7e, 0x0a,
	0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x53, 0x0a,
	0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x12, 0x6b, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x54, 0x6f, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x2a, 0x71, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x43, 0x4c, 0x49, 0x50, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x10, 0x03, 0x2a, 0x94, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43,
	0x72, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x43, 0x52, 0x4f,
	0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x4f,
	0x50, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x43, 0x52, 0x4f,
	0x50, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x43,
	0x52, 0x4f, 0x50, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x05, 0x2a, 0x53, 0x0a, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10,
	0x02, 0x2a, 0xe4, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4f, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x08, 0x2a, 0x5e, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x02, 0x2a, 0x8d, 0x01, 0x0a, 0x15, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54,
	0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0xab, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4b, 0x45,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x56, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x48, 0x41, 0x48, 0x41, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x47, 0x52, 0x59, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53,
	0x4c, 0x49, 0x4b, 0x45, 0x10, 0x07, 0x42, 0xa6, 0x02, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x42, 0x0a, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x74,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f, 0x6c, 0x6f, 0x6d,
	0x6f, 0x6e, 0x41, 0x49, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x32, 0x3b, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x10, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x10,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x32,
	0xe2, 0x02, 0x1c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x11, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a,
	0x3a, 0x56, 0x32, 0xd8, 0xe1, 0x1e, 0x00, 0xe0, 0xe1, 0x1e, 0x01, 0xf0, 0xe1, 0x1e, 0x01, 0xf8,
	0xe1, 0x1e, 0x01, 0x80, 0xe2, 0x1e, 0x01, 0xa8, 0xe2, 0x1e, 0x01, 0xb8, 0xe2, 0x1e, 0x01, 0xc0,
	0xe2, 0x1e, 0x01, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xe0, 0xe2, 0x1e, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_social_service_v2_mongo_proto_rawDescOnce sync.Once
	file_social_service_v2_mongo_proto_rawDescData = file_social_service_v2_mongo_proto_rawDesc
)

func file_social_service_v2_mongo_proto_rawDescGZIP() []byte {
	file_social_service_v2_mongo_proto_rawDescOnce.Do(func() {
		file_social_service_v2_mongo_proto_rawDescData = protoimpl.X.CompressGZIP(file_social_service_v2_mongo_proto_rawDescData)
	})
	return file_social_service_v2_mongo_proto_rawDescData
}

var file_social_service_v2_mongo_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_social_service_v2_mongo_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_social_service_v2_mongo_proto_goTypes = []interface{}{
	(MediaResize)(0),              // 0: social_service.v2.MediaResize
	(MediaCrop)(0),                // 1: social_service.v2.MediaCrop
	(MediaType)(0),                // 2: social_service.v2.MediaType
	(PostType)(0),                 // 3: social_service.v2.PostType
	(AccountType)(0),              // 4: social_service.v2.AccountType
	(ThreadParticipantType)(0),    // 5: social_service.v2.ThreadParticipantType
	(Reaction)(0),                 // 6: social_service.v2.Reaction
	(*ContentInsights)(nil),       // 7: social_service.v2.ContentInsights
	(*Entities)(nil),              // 8: social_service.v2.Entities
	(*Sentiment)(nil),             // 9: social_service.v2.Sentiment
	(*MediaMetadata)(nil),         // 10: social_service.v2.MediaMetadata
	(*Media)(nil),                 // 11: social_service.v2.Media
	(*Post)(nil),                  // 12: social_service.v2.Post
	(*PollPost)(nil),              // 13: social_service.v2.PollPost
	(*PollResponse)(nil),          // 14: social_service.v2.PollResponse
	(*SharedPost)(nil),            // 15: social_service.v2.SharedPost
	(*Thread)(nil),                // 16: social_service.v2.Thread
	(*Note)(nil),                  // 17: social_service.v2.Note
	(*Comment)(nil),               // 18: social_service.v2.Comment
	(*CommentReply)(nil),          // 19: social_service.v2.CommentReply
	nil,                           // 20: social_service.v2.Post.ExtraEntry
	nil,                           // 21: social_service.v2.Post.UserIdToAffinityScoreMapEntry
	nil,                           // 22: social_service.v2.Post.UserIdToReportsMapEntry
	nil,                           // 23: social_service.v2.Post.UserIdToReactionMapEntry
	nil,                           // 24: social_service.v2.PollPost.ExtraEntry
	nil,                           // 25: social_service.v2.PollPost.UserIdToAffinityScoreMapEntry
	nil,                           // 26: social_service.v2.PollPost.UserIdToReportsMapEntry
	nil,                           // 27: social_service.v2.PollPost.UserIdToPollResponsesMapEntry
	nil,                           // 28: social_service.v2.PollPost.PollDistributionEntry
	nil,                           // 29: social_service.v2.PollPost.UserIdToReactionMapEntry
	nil,                           // 30: social_service.v2.SharedPost.ExtraEntry
	nil,                           // 31: social_service.v2.SharedPost.UserIdToAffinityScoreMapEntry
	nil,                           // 32: social_service.v2.SharedPost.UserIdToReportsMapEntry
	nil,                           // 33: social_service.v2.SharedPost.UserIdToReactionMapEntry
	nil,                           // 34: social_service.v2.Comment.ExtraEntry
	nil,                           // 35: social_service.v2.Comment.UserIdToAffinityScoreMapEntry
	nil,                           // 36: social_service.v2.Comment.UserIdToReportsMapEntry
	nil,                           // 37: social_service.v2.Comment.UserIdToReactionMapEntry
	nil,                           // 38: social_service.v2.CommentReply.ExtraEntry
	nil,                           // 39: social_service.v2.CommentReply.UserIdToAffinityScoreMapEntry
	nil,                           // 40: social_service.v2.CommentReply.UserIdToReactionMapEntry
	nil,                           // 41: social_service.v2.CommentReply.UserIdToReportsMapEntry
	(*timestamppb.Timestamp)(nil), // 42: google.protobuf.Timestamp
}
var file_social_service_v2_mongo_proto_depIdxs = []int32{
	8,  // 0: social_service.v2.ContentInsights.entities:type_name -> social_service.v2.Entities
	9,  // 1: social_service.v2.ContentInsights.sentiment:type_name -> social_service.v2.Sentiment
	0,  // 2: social_service.v2.MediaMetadata.resize:type_name -> social_service.v2.MediaResize
	1,  // 3: social_service.v2.MediaMetadata.crop:type_name -> social_service.v2.MediaCrop
	2,  // 4: social_service.v2.MediaMetadata.type:type_name -> social_service.v2.MediaType
	10, // 5: social_service.v2.Media.metadata:type_name -> social_service.v2.MediaMetadata
	3,  // 6: social_service.v2.Post.action:type_name -> social_service.v2.PostType
	11, // 7: social_service.v2.Post.media:type_name -> social_service.v2.Media
	20, // 8: social_service.v2.Post.extra:type_name -> social_service.v2.Post.ExtraEntry
	18, // 9: social_service.v2.Post.comments:type_name -> social_service.v2.Comment
	21, // 10: social_service.v2.Post.user_id_to_affinity_score_map:type_name -> social_service.v2.Post.UserIdToAffinityScoreMapEntry
	7,  // 11: social_service.v2.Post.insights:type_name -> social_service.v2.ContentInsights
	22, // 12: social_service.v2.Post.user_id_to_reports_map:type_name -> social_service.v2.Post.UserIdToReportsMapEntry
	4,  // 13: social_service.v2.Post.author_account_type:type_name -> social_service.v2.AccountType
	17, // 14: social_service.v2.Post.notes:type_name -> social_service.v2.Note
	16, // 15: social_service.v2.Post.thread:type_name -> social_service.v2.Thread
	5,  // 16: social_service.v2.Post.thread_participant_type:type_name -> social_service.v2.ThreadParticipantType
	23, // 17: social_service.v2.Post.user_id_to_reaction_map:type_name -> social_service.v2.Post.UserIdToReactionMapEntry
	3,  // 18: social_service.v2.PollPost.action:type_name -> social_service.v2.PostType
	11, // 19: social_service.v2.PollPost.media:type_name -> social_service.v2.Media
	24, // 20: social_service.v2.PollPost.extra:type_name -> social_service.v2.PollPost.ExtraEntry
	18, // 21: social_service.v2.PollPost.comments:type_name -> social_service.v2.Comment
	25, // 22: social_service.v2.PollPost.user_id_to_affinity_score_map:type_name -> social_service.v2.PollPost.UserIdToAffinityScoreMapEntry
	7,  // 23: social_service.v2.PollPost.insights:type_name -> social_service.v2.ContentInsights
	26, // 24: social_service.v2.PollPost.user_id_to_reports_map:type_name -> social_service.v2.PollPost.UserIdToReportsMapEntry
	4,  // 25: social_service.v2.PollPost.author_account_type:type_name -> social_service.v2.AccountType
	27, // 26: social_service.v2.PollPost.user_id_to_poll_responses_map:type_name -> social_service.v2.PollPost.UserIdToPollResponsesMapEntry
	28, // 27: social_service.v2.PollPost.poll_distribution:type_name -> social_service.v2.PollPost.PollDistributionEntry
	42, // 28: social_service.v2.PollPost.poll_end_date:type_name -> google.protobuf.Timestamp
	17, // 29: social_service.v2.PollPost.notes:type_name -> social_service.v2.Note
	16, // 30: social_service.v2.PollPost.thread:type_name -> social_service.v2.Thread
	5,  // 31: social_service.v2.PollPost.thread_participant_type:type_name -> social_service.v2.ThreadParticipantType
	29, // 32: social_service.v2.PollPost.user_id_to_reaction_map:type_name -> social_service.v2.PollPost.UserIdToReactionMapEntry
	30, // 33: social_service.v2.SharedPost.extra:type_name -> social_service.v2.SharedPost.ExtraEntry
	18, // 34: social_service.v2.SharedPost.comments:type_name -> social_service.v2.Comment
	31, // 35: social_service.v2.SharedPost.user_id_to_affinity_score_map:type_name -> social_service.v2.SharedPost.UserIdToAffinityScoreMapEntry
	32, // 36: social_service.v2.SharedPost.user_id_to_reports_map:type_name -> social_service.v2.SharedPost.UserIdToReportsMapEntry
	17, // 37: social_service.v2.SharedPost.notes:type_name -> social_service.v2.Note
	16, // 38: social_service.v2.SharedPost.thread:type_name -> social_service.v2.Thread
	4,  // 39: social_service.v2.SharedPost.author_account_type:type_name -> social_service.v2.AccountType
	33, // 40: social_service.v2.SharedPost.user_id_to_reaction_map:type_name -> social_service.v2.SharedPost.UserIdToReactionMapEntry
	3,  // 41: social_service.v2.SharedPost.action:type_name -> social_service.v2.PostType
	3,  // 42: social_service.v2.SharedPost.originalPostAction:type_name -> social_service.v2.PostType
	11, // 43: social_service.v2.Note.media:type_name -> social_service.v2.Media
	4,  // 44: social_service.v2.Note.author_account_type:type_name -> social_service.v2.AccountType
	11, // 45: social_service.v2.Comment.media:type_name -> social_service.v2.Media
	19, // 46: social_service.v2.Comment.replies:type_name -> social_service.v2.CommentReply
	34, // 47: social_service.v2.Comment.extra:type_name -> social_service.v2.Comment.ExtraEntry
	35, // 48: social_service.v2.Comment.user_id_to_affinity_score_map:type_name -> social_service.v2.Comment.UserIdToAffinityScoreMapEntry
	36, // 49: social_service.v2.Comment.user_id_to_reports_map:type_name -> social_service.v2.Comment.UserIdToReportsMapEntry
	4,  // 50: social_service.v2.Comment.author_account_type:type_name -> social_service.v2.AccountType
	37, // 51: social_service.v2.Comment.user_id_to_reaction_map:type_name -> social_service.v2.Comment.UserIdToReactionMapEntry
	17, // 52: social_service.v2.Comment.notes:type_name -> social_service.v2.Note
	11, // 53: social_service.v2.CommentReply.media:type_name -> social_service.v2.Media
	38, // 54: social_service.v2.CommentReply.extra:type_name -> social_service.v2.CommentReply.ExtraEntry
	39, // 55: social_service.v2.CommentReply.user_id_to_affinity_score_map:type_name -> social_service.v2.CommentReply.UserIdToAffinityScoreMapEntry
	4,  // 56: social_service.v2.CommentReply.author_account_type:type_name -> social_service.v2.AccountType
	40, // 57: social_service.v2.CommentReply.user_id_to_reaction_map:type_name -> social_service.v2.CommentReply.UserIdToReactionMapEntry
	41, // 58: social_service.v2.CommentReply.user_id_to_reports_map:type_name -> social_service.v2.CommentReply.UserIdToReportsMapEntry
	6,  // 59: social_service.v2.Post.UserIdToReactionMapEntry.value:type_name -> social_service.v2.Reaction
	14, // 60: social_service.v2.PollPost.UserIdToPollResponsesMapEntry.value:type_name -> social_service.v2.PollResponse
	6,  // 61: social_service.v2.PollPost.UserIdToReactionMapEntry.value:type_name -> social_service.v2.Reaction
	6,  // 62: social_service.v2.SharedPost.UserIdToReactionMapEntry.value:type_name -> social_service.v2.Reaction
	6,  // 63: social_service.v2.Comment.UserIdToReactionMapEntry.value:type_name -> social_service.v2.Reaction
	6,  // 64: social_service.v2.CommentReply.UserIdToReactionMapEntry.value:type_name -> social_service.v2.Reaction
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_social_service_v2_mongo_proto_init() }
func file_social_service_v2_mongo_proto_init() {
	if File_social_service_v2_mongo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_social_service_v2_mongo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentInsights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sentiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_mongo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_social_service_v2_mongo_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_social_service_v2_mongo_proto_goTypes,
		DependencyIndexes: file_social_service_v2_mongo_proto_depIdxs,
		EnumInfos:         file_social_service_v2_mongo_proto_enumTypes,
		MessageInfos:      file_social_service_v2_mongo_proto_msgTypes,
	}.Build()
	File_social_service_v2_mongo_proto = out.File
	file_social_service_v2_mongo_proto_rawDesc = nil
	file_social_service_v2_mongo_proto_goTypes = nil
	file_social_service_v2_mongo_proto_depIdxs = nil
}
