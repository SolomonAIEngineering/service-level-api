// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: social_service/v2/common.proto

package social_servicev2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserProfileRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserProfileRequestPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProfileRequestPayload with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserProfileRequestPayloadMultiError, or nil if none found.
func (m *UserProfileRequestPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProfileRequestPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProfileName()) < 1 {
		err := UserProfileRequestPayloadValidationError{
			field:  "ProfileName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Private

	if utf8.RuneCountInString(m.GetProfileImageUrl()) < 1 {
		err := UserProfileRequestPayloadValidationError{
			field:  "ProfileImageUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserProfileRequestPayloadMultiError(errors)
	}

	return nil
}

// UserProfileRequestPayloadMultiError is an error wrapping multiple validation
// errors returned by UserProfileRequestPayload.ValidateAll() if the
// designated constraints aren't met.
type UserProfileRequestPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileRequestPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileRequestPayloadMultiError) AllErrors() []error { return m }

// UserProfileRequestPayloadValidationError is the validation error returned by
// UserProfileRequestPayload.Validate if the designated constraints aren't met.
type UserProfileRequestPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileRequestPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileRequestPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileRequestPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileRequestPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileRequestPayloadValidationError) ErrorName() string {
	return "UserProfileRequestPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e UserProfileRequestPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfileRequestPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileRequestPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileRequestPayloadValidationError{}

// Validate checks the field values on TopicsRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopicsRequestPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicsRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopicsRequestPayloadMultiError, or nil if none found.
func (m *TopicsRequestPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicsRequestPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTopicName()) < 1 {
		err := TopicsRequestPayloadValidationError{
			field:  "TopicName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 5 {
		err := TopicsRequestPayloadValidationError{
			field:  "Description",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetImageUrl()) < 1 {
		err := TopicsRequestPayloadValidationError{
			field:  "ImageUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TopicsRequestPayloadMultiError(errors)
	}

	return nil
}

// TopicsRequestPayloadMultiError is an error wrapping multiple validation
// errors returned by TopicsRequestPayload.ValidateAll() if the designated
// constraints aren't met.
type TopicsRequestPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicsRequestPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicsRequestPayloadMultiError) AllErrors() []error { return m }

// TopicsRequestPayloadValidationError is the validation error returned by
// TopicsRequestPayload.Validate if the designated constraints aren't met.
type TopicsRequestPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicsRequestPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicsRequestPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicsRequestPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicsRequestPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicsRequestPayloadValidationError) ErrorName() string {
	return "TopicsRequestPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e TopicsRequestPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicsRequestPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicsRequestPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicsRequestPayloadValidationError{}

// Validate checks the field values on CommunityProfileRequestPayload with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommunityProfileRequestPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommunityProfileRequestPayload with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CommunityProfileRequestPayloadMultiError, or nil if none found.
func (m *CommunityProfileRequestPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *CommunityProfileRequestPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCommunityName()) < 1 {
		err := CommunityProfileRequestPayloadValidationError{
			field:  "CommunityName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 5 {
		err := CommunityProfileRequestPayloadValidationError{
			field:  "Description",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Private

	// no validation rules for Visible

	if utf8.RuneCountInString(m.GetCommunityRules()) < 5 {
		err := CommunityProfileRequestPayloadValidationError{
			field:  "CommunityRules",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommunityProfileRequestPayloadValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommunityProfileRequestPayloadValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommunityProfileRequestPayloadValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetProfileImageUrl()) < 1 {
		err := CommunityProfileRequestPayloadValidationError{
			field:  "ProfileImageUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommunityProfileRequestPayloadMultiError(errors)
	}

	return nil
}

// CommunityProfileRequestPayloadMultiError is an error wrapping multiple
// validation errors returned by CommunityProfileRequestPayload.ValidateAll()
// if the designated constraints aren't met.
type CommunityProfileRequestPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommunityProfileRequestPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommunityProfileRequestPayloadMultiError) AllErrors() []error { return m }

// CommunityProfileRequestPayloadValidationError is the validation error
// returned by CommunityProfileRequestPayload.Validate if the designated
// constraints aren't met.
type CommunityProfileRequestPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommunityProfileRequestPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommunityProfileRequestPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommunityProfileRequestPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommunityProfileRequestPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommunityProfileRequestPayloadValidationError) ErrorName() string {
	return "CommunityProfileRequestPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e CommunityProfileRequestPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommunityProfileRequestPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommunityProfileRequestPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommunityProfileRequestPayloadValidationError{}

// Validate checks the field values on PostRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostRequestPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostRequestPayloadMultiError, or nil if none found.
func (m *PostRequestPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *PostRequestPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContent()) < 5 {
		err := PostRequestPayloadValidationError{
			field:  "Content",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for Extra

	if _, ok := _PostRequestPayload_PostType_NotInLookup[m.GetPostType()]; ok {
		err := PostRequestPayloadValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TopicName

	if utf8.RuneCountInString(m.GetAuthorUserName()) < 1 {
		err := PostRequestPayloadValidationError{
			field:  "AuthorUserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAuthorProfileImage()) < 1 {
		err := PostRequestPayloadValidationError{
			field:  "AuthorProfileImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BackgroundImageUrl

	if len(errors) > 0 {
		return PostRequestPayloadMultiError(errors)
	}

	return nil
}

// PostRequestPayloadMultiError is an error wrapping multiple validation errors
// returned by PostRequestPayload.ValidateAll() if the designated constraints
// aren't met.
type PostRequestPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostRequestPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostRequestPayloadMultiError) AllErrors() []error { return m }

// PostRequestPayloadValidationError is the validation error returned by
// PostRequestPayload.Validate if the designated constraints aren't met.
type PostRequestPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostRequestPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostRequestPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostRequestPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostRequestPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostRequestPayloadValidationError) ErrorName() string {
	return "PostRequestPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e PostRequestPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostRequestPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostRequestPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostRequestPayloadValidationError{}

var _PostRequestPayload_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on PollRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PollRequestPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PollRequestPayloadMultiError, or nil if none found.
func (m *PollRequestPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *PollRequestPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContent()) < 5 {
		err := PollRequestPayloadValidationError{
			field:  "Content",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for Extra

	if _, ok := _PollRequestPayload_PostType_NotInLookup[m.GetPostType()]; ok {
		err := PollRequestPayloadValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TopicName

	if utf8.RuneCountInString(m.GetAuthorUserName()) < 1 {
		err := PollRequestPayloadValidationError{
			field:  "AuthorUserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAuthorProfileImage()) < 1 {
		err := PollRequestPayloadValidationError{
			field:  "AuthorProfileImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BackgroundImageUrl

	if len(m.GetPollOptions()) < 2 {
		err := PollRequestPayloadValidationError{
			field:  "PollOptions",
			reason: "value must contain at least 2 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPollEndDate() == nil {
		err := PollRequestPayloadValidationError{
			field:  "PollEndDate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PollRequestPayloadMultiError(errors)
	}

	return nil
}

// PollRequestPayloadMultiError is an error wrapping multiple validation errors
// returned by PollRequestPayload.ValidateAll() if the designated constraints
// aren't met.
type PollRequestPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollRequestPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollRequestPayloadMultiError) AllErrors() []error { return m }

// PollRequestPayloadValidationError is the validation error returned by
// PollRequestPayload.Validate if the designated constraints aren't met.
type PollRequestPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollRequestPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollRequestPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollRequestPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollRequestPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollRequestPayloadValidationError) ErrorName() string {
	return "PollRequestPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e PollRequestPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollRequestPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollRequestPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollRequestPayloadValidationError{}

var _PollRequestPayload_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on CommentRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentRequestPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentRequestPayloadMultiError, or nil if none found.
func (m *CommentRequestPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentRequestPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CommentRequestPayloadValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Extra

	if utf8.RuneCountInString(m.GetAuthorUsername()) < 1 {
		err := CommentRequestPayloadValidationError{
			field:  "AuthorUsername",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAuthorProfileImage()) < 1 {
		err := CommentRequestPayloadValidationError{
			field:  "AuthorProfileImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommentRequestPayloadMultiError(errors)
	}

	return nil
}

// CommentRequestPayloadMultiError is an error wrapping multiple validation
// errors returned by CommentRequestPayload.ValidateAll() if the designated
// constraints aren't met.
type CommentRequestPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentRequestPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentRequestPayloadMultiError) AllErrors() []error { return m }

// CommentRequestPayloadValidationError is the validation error returned by
// CommentRequestPayload.Validate if the designated constraints aren't met.
type CommentRequestPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentRequestPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentRequestPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentRequestPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentRequestPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentRequestPayloadValidationError) ErrorName() string {
	return "CommentRequestPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e CommentRequestPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentRequestPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentRequestPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentRequestPayloadValidationError{}

// Validate checks the field values on Actor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Actor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Actor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ActorMultiError, or nil if none found.
func (m *Actor) ValidateAll() error {
	return m.validate(true)
}

func (m *Actor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorType

	switch v := m.Actor.(type) {
	case *Actor_UserProfile:
		if v == nil {
			err := ActorValidationError{
				field:  "Actor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetUserProfile() == nil {
			err := ActorValidationError{
				field:  "UserProfile",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserProfile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActorValidationError{
						field:  "UserProfile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActorValidationError{
						field:  "UserProfile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserProfile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActorValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Actor_Community:
		if v == nil {
			err := ActorValidationError{
				field:  "Actor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetCommunity() == nil {
			err := ActorValidationError{
				field:  "Community",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCommunity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActorValidationError{
						field:  "Community",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActorValidationError{
						field:  "Community",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCommunity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActorValidationError{
					field:  "Community",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ActorMultiError(errors)
	}

	return nil
}

// ActorMultiError is an error wrapping multiple validation errors returned by
// Actor.ValidateAll() if the designated constraints aren't met.
type ActorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActorMultiError) AllErrors() []error { return m }

// ActorValidationError is the validation error returned by Actor.Validate if
// the designated constraints aren't met.
type ActorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActorValidationError) ErrorName() string { return "ActorValidationError" }

// Error satisfies the builtin error interface
func (e ActorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActorValidationError{}

// Validate checks the field values on BaseTimeline with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseTimeline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseTimeline with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseTimelineMultiError, or
// nil if none found.
func (m *BaseTimeline) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseTimeline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActivities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BaseTimelineValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BaseTimelineValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BaseTimelineValidationError{
					field:  fmt.Sprintf("Activities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BaseTimelineMultiError(errors)
	}

	return nil
}

// BaseTimelineMultiError is an error wrapping multiple validation errors
// returned by BaseTimeline.ValidateAll() if the designated constraints aren't met.
type BaseTimelineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseTimelineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseTimelineMultiError) AllErrors() []error { return m }

// BaseTimelineValidationError is the validation error returned by
// BaseTimeline.Validate if the designated constraints aren't met.
type BaseTimelineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseTimelineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseTimelineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseTimelineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseTimelineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseTimelineValidationError) ErrorName() string { return "BaseTimelineValidationError" }

// Error satisfies the builtin error interface
func (e BaseTimelineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseTimeline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseTimelineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseTimelineValidationError{}

// Validate checks the field values on NotificationTimeline with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationTimeline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationTimeline with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationTimelineMultiError, or nil if none found.
func (m *NotificationTimeline) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTimeline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActivities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotificationTimelineValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotificationTimelineValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotificationTimelineValidationError{
					field:  fmt.Sprintf("Activities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotificationTimelineMultiError(errors)
	}

	return nil
}

// NotificationTimelineMultiError is an error wrapping multiple validation
// errors returned by NotificationTimeline.ValidateAll() if the designated
// constraints aren't met.
type NotificationTimelineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTimelineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTimelineMultiError) AllErrors() []error { return m }

// NotificationTimelineValidationError is the validation error returned by
// NotificationTimeline.Validate if the designated constraints aren't met.
type NotificationTimelineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTimelineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTimelineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTimelineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTimelineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTimelineValidationError) ErrorName() string {
	return "NotificationTimelineValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTimelineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTimeline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTimelineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTimelineValidationError{}

// Validate checks the field values on FeedActivity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeedActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedActivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedActivityMultiError, or
// nil if none found.
func (m *FeedActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetActor() == nil {
		err := FeedActivityValidationError{
			field:  "Actor",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetActor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedActivityValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedActivityValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedActivityValidationError{
				field:  "Actor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _FeedActivity_Verb_NotInLookup[m.GetVerb()]; ok {
		err := FeedActivityValidationError{
			field:  "Verb",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ForeignId

	// no validation rules for Target

	// no validation rules for Time

	// no validation rules for Origin

	// no validation rules for Score

	// no validation rules for Extra

	if utf8.RuneCountInString(m.GetGetstreamActivityId()) < 1 {
		err := FeedActivityValidationError{
			field:  "GetstreamActivityId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Post.(type) {
	case *FeedActivity_RegularPost:
		if v == nil {
			err := FeedActivityValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegularPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedActivityValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedActivityValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegularPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedActivityValidationError{
					field:  "RegularPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FeedActivity_SharedPost:
		if v == nil {
			err := FeedActivityValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSharedPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedActivityValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedActivityValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSharedPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedActivityValidationError{
					field:  "SharedPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FeedActivity_PollPost:
		if v == nil {
			err := FeedActivityValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPollPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedActivityValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedActivityValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPollPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedActivityValidationError{
					field:  "PollPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FeedActivityMultiError(errors)
	}

	return nil
}

// FeedActivityMultiError is an error wrapping multiple validation errors
// returned by FeedActivity.ValidateAll() if the designated constraints aren't met.
type FeedActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedActivityMultiError) AllErrors() []error { return m }

// FeedActivityValidationError is the validation error returned by
// FeedActivity.Validate if the designated constraints aren't met.
type FeedActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedActivityValidationError) ErrorName() string { return "FeedActivityValidationError" }

// Error satisfies the builtin error interface
func (e FeedActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedActivityValidationError{}

var _FeedActivity_Verb_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on NotificationFeedGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationFeedGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationFeedGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationFeedGroupMultiError, or nil if none found.
func (m *NotificationFeedGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationFeedGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActivityCount

	// no validation rules for ActorCount

	// no validation rules for CreatedAt

	// no validation rules for Group

	// no validation rules for FeedGroupId

	// no validation rules for IsRead

	// no validation rules for IsSeen

	// no validation rules for UpdatedAt

	// no validation rules for Verb

	for idx, item := range m.GetActivities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotificationFeedGroupValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotificationFeedGroupValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotificationFeedGroupValidationError{
					field:  fmt.Sprintf("Activities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotificationFeedGroupMultiError(errors)
	}

	return nil
}

// NotificationFeedGroupMultiError is an error wrapping multiple validation
// errors returned by NotificationFeedGroup.ValidateAll() if the designated
// constraints aren't met.
type NotificationFeedGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationFeedGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationFeedGroupMultiError) AllErrors() []error { return m }

// NotificationFeedGroupValidationError is the validation error returned by
// NotificationFeedGroup.Validate if the designated constraints aren't met.
type NotificationFeedGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationFeedGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationFeedGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationFeedGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationFeedGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationFeedGroupValidationError) ErrorName() string {
	return "NotificationFeedGroupValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationFeedGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationFeedGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationFeedGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationFeedGroupValidationError{}

// Validate checks the field values on NotificationActivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationActivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationActivityMultiError, or nil if none found.
func (m *NotificationActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorName

	// no validation rules for ForeignId

	// no validation rules for ActivityId

	// no validation rules for Verb

	// no validation rules for Time

	// no validation rules for Target

	// no validation rules for Origin

	// no validation rules for Object

	if len(errors) > 0 {
		return NotificationActivityMultiError(errors)
	}

	return nil
}

// NotificationActivityMultiError is an error wrapping multiple validation
// errors returned by NotificationActivity.ValidateAll() if the designated
// constraints aren't met.
type NotificationActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationActivityMultiError) AllErrors() []error { return m }

// NotificationActivityValidationError is the validation error returned by
// NotificationActivity.Validate if the designated constraints aren't met.
type NotificationActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationActivityValidationError) ErrorName() string {
	return "NotificationActivityValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationActivityValidationError{}

// Validate checks the field values on PendingFollowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PendingFollowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PendingFollowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PendingFollowRequestMultiError, or nil if none found.
func (m *PendingFollowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PendingFollowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FollowRequestId

	if m.GetFollowerRequestionToFollow() == nil {
		err := PendingFollowRequestValidationError{
			field:  "FollowerRequestionToFollow",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFollowerRequestionToFollow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingFollowRequestValidationError{
					field:  "FollowerRequestionToFollow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingFollowRequestValidationError{
					field:  "FollowerRequestionToFollow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFollowerRequestionToFollow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingFollowRequestValidationError{
				field:  "FollowerRequestionToFollow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetCreatedAt()) < 1 {
		err := PendingFollowRequestValidationError{
			field:  "CreatedAt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PendingFollowRequestMultiError(errors)
	}

	return nil
}

// PendingFollowRequestMultiError is an error wrapping multiple validation
// errors returned by PendingFollowRequest.ValidateAll() if the designated
// constraints aren't met.
type PendingFollowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PendingFollowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PendingFollowRequestMultiError) AllErrors() []error { return m }

// PendingFollowRequestValidationError is the validation error returned by
// PendingFollowRequest.Validate if the designated constraints aren't met.
type PendingFollowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PendingFollowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PendingFollowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PendingFollowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PendingFollowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PendingFollowRequestValidationError) ErrorName() string {
	return "PendingFollowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PendingFollowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPendingFollowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PendingFollowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PendingFollowRequestValidationError{}

// Validate checks the field values on SocialRelationshipMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SocialRelationshipMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SocialRelationshipMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SocialRelationshipMetadataMultiError, or nil if none found.
func (m *SocialRelationshipMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SocialRelationshipMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSourceProfile() == nil {
		err := SocialRelationshipMetadataValidationError{
			field:  "SourceProfile",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSourceProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SocialRelationshipMetadataValidationError{
					field:  "SourceProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SocialRelationshipMetadataValidationError{
					field:  "SourceProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SocialRelationshipMetadataValidationError{
				field:  "SourceProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTargetProfile() == nil {
		err := SocialRelationshipMetadataValidationError{
			field:  "TargetProfile",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTargetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SocialRelationshipMetadataValidationError{
					field:  "TargetProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SocialRelationshipMetadataValidationError{
					field:  "TargetProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SocialRelationshipMetadataValidationError{
				field:  "TargetProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Following

	// no validation rules for FollowingSince

	if len(errors) > 0 {
		return SocialRelationshipMetadataMultiError(errors)
	}

	return nil
}

// SocialRelationshipMetadataMultiError is an error wrapping multiple
// validation errors returned by SocialRelationshipMetadata.ValidateAll() if
// the designated constraints aren't met.
type SocialRelationshipMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SocialRelationshipMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SocialRelationshipMetadataMultiError) AllErrors() []error { return m }

// SocialRelationshipMetadataValidationError is the validation error returned
// by SocialRelationshipMetadata.Validate if the designated constraints aren't met.
type SocialRelationshipMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SocialRelationshipMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SocialRelationshipMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SocialRelationshipMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SocialRelationshipMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SocialRelationshipMetadataValidationError) ErrorName() string {
	return "SocialRelationshipMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SocialRelationshipMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSocialRelationshipMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SocialRelationshipMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SocialRelationshipMetadataValidationError{}

// Validate checks the field values on FeedActivityPostRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedActivityPostRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedActivityPostRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedActivityPostRecordMultiError, or nil if none found.
func (m *FeedActivityPostRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedActivityPostRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _FeedActivityPostRecord_PostType_NotInLookup[m.GetPostType()]; ok {
		err := FeedActivityPostRecordValidationError{
			field:  "PostType",
			reason: "value must not be in list [POST_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PostId

	switch v := m.Post.(type) {
	case *FeedActivityPostRecord_RegularPost:
		if v == nil {
			err := FeedActivityPostRecordValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegularPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedActivityPostRecordValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedActivityPostRecordValidationError{
						field:  "RegularPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegularPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedActivityPostRecordValidationError{
					field:  "RegularPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FeedActivityPostRecord_SharedPost:
		if v == nil {
			err := FeedActivityPostRecordValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSharedPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedActivityPostRecordValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedActivityPostRecordValidationError{
						field:  "SharedPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSharedPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedActivityPostRecordValidationError{
					field:  "SharedPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FeedActivityPostRecord_PollPost:
		if v == nil {
			err := FeedActivityPostRecordValidationError{
				field:  "Post",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPollPost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedActivityPostRecordValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedActivityPostRecordValidationError{
						field:  "PollPost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPollPost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedActivityPostRecordValidationError{
					field:  "PollPost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FeedActivityPostRecordMultiError(errors)
	}

	return nil
}

// FeedActivityPostRecordMultiError is an error wrapping multiple validation
// errors returned by FeedActivityPostRecord.ValidateAll() if the designated
// constraints aren't met.
type FeedActivityPostRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedActivityPostRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedActivityPostRecordMultiError) AllErrors() []error { return m }

// FeedActivityPostRecordValidationError is the validation error returned by
// FeedActivityPostRecord.Validate if the designated constraints aren't met.
type FeedActivityPostRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedActivityPostRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedActivityPostRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedActivityPostRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedActivityPostRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedActivityPostRecordValidationError) ErrorName() string {
	return "FeedActivityPostRecordValidationError"
}

// Error satisfies the builtin error interface
func (e FeedActivityPostRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedActivityPostRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedActivityPostRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedActivityPostRecordValidationError{}

var _FeedActivityPostRecord_PostType_NotInLookup = map[PostType]struct{}{
	0: {},
}

// Validate checks the field values on FeedActorRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FeedActorRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedActorRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedActorRecordMultiError, or nil if none found.
func (m *FeedActorRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedActorRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorType

	switch v := m.Actor.(type) {
	case *FeedActorRecord_UserProfile:
		if v == nil {
			err := FeedActorRecordValidationError{
				field:  "Actor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserProfile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedActorRecordValidationError{
						field:  "UserProfile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedActorRecordValidationError{
						field:  "UserProfile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserProfile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedActorRecordValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FeedActorRecord_CommunityProfile:
		if v == nil {
			err := FeedActorRecordValidationError{
				field:  "Actor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCommunityProfile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedActorRecordValidationError{
						field:  "CommunityProfile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedActorRecordValidationError{
						field:  "CommunityProfile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCommunityProfile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedActorRecordValidationError{
					field:  "CommunityProfile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FeedActorRecordMultiError(errors)
	}

	return nil
}

// FeedActorRecordMultiError is an error wrapping multiple validation errors
// returned by FeedActorRecord.ValidateAll() if the designated constraints
// aren't met.
type FeedActorRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedActorRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedActorRecordMultiError) AllErrors() []error { return m }

// FeedActorRecordValidationError is the validation error returned by
// FeedActorRecord.Validate if the designated constraints aren't met.
type FeedActorRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedActorRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedActorRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedActorRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedActorRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedActorRecordValidationError) ErrorName() string { return "FeedActorRecordValidationError" }

// Error satisfies the builtin error interface
func (e FeedActorRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedActorRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedActorRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedActorRecordValidationError{}

// Validate checks the field values on
// SocialRelationshipMetadata_SocialProfileMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SocialRelationshipMetadata_SocialProfileMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SocialRelationshipMetadata_SocialProfileMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SocialRelationshipMetadata_SocialProfileMetadataMultiError, or nil if none found.
func (m *SocialRelationshipMetadata_SocialProfileMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SocialRelationshipMetadata_SocialProfileMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProfileType

	// no validation rules for ProfileId

	if len(errors) > 0 {
		return SocialRelationshipMetadata_SocialProfileMetadataMultiError(errors)
	}

	return nil
}

// SocialRelationshipMetadata_SocialProfileMetadataMultiError is an error
// wrapping multiple validation errors returned by
// SocialRelationshipMetadata_SocialProfileMetadata.ValidateAll() if the
// designated constraints aren't met.
type SocialRelationshipMetadata_SocialProfileMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SocialRelationshipMetadata_SocialProfileMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SocialRelationshipMetadata_SocialProfileMetadataMultiError) AllErrors() []error { return m }

// SocialRelationshipMetadata_SocialProfileMetadataValidationError is the
// validation error returned by
// SocialRelationshipMetadata_SocialProfileMetadata.Validate if the designated
// constraints aren't met.
type SocialRelationshipMetadata_SocialProfileMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SocialRelationshipMetadata_SocialProfileMetadataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SocialRelationshipMetadata_SocialProfileMetadataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SocialRelationshipMetadata_SocialProfileMetadataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SocialRelationshipMetadata_SocialProfileMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SocialRelationshipMetadata_SocialProfileMetadataValidationError) ErrorName() string {
	return "SocialRelationshipMetadata_SocialProfileMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SocialRelationshipMetadata_SocialProfileMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSocialRelationshipMetadata_SocialProfileMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SocialRelationshipMetadata_SocialProfileMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SocialRelationshipMetadata_SocialProfileMetadataValidationError{}
