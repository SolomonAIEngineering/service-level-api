// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: social_service/v2/common.proto

package social_servicev2

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_UNSPECIFIED          NotificationType = 0
	NotificationType_NOTIFICATION_TYPE_REPLIED_TO_POST      NotificationType = 1
	NotificationType_NOTIFICATION_TYPE_MENTIONED_IN_POST    NotificationType = 2
	NotificationType_NOTIFICATION_TYPE_REPLIED_TO_COMMENT   NotificationType = 3
	NotificationType_NOTIFICATION_TYPE_MENTIONED_IN_COMMENT NotificationType = 4
	NotificationType_NOTIFICATION_TYPE_SHARED_POST          NotificationType = 5
	NotificationType_NOTIFICATION_TYPE_REACTED_TO_POST      NotificationType = 6
	NotificationType_NOTIFICATION_TYPE_REACTED_TO_COMMENT   NotificationType = 7
	NotificationType_NOTIFICATION_TYPE_FOLLOW_REQUEST       NotificationType = 8
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0: "NOTIFICATION_TYPE_UNSPECIFIED",
		1: "NOTIFICATION_TYPE_REPLIED_TO_POST",
		2: "NOTIFICATION_TYPE_MENTIONED_IN_POST",
		3: "NOTIFICATION_TYPE_REPLIED_TO_COMMENT",
		4: "NOTIFICATION_TYPE_MENTIONED_IN_COMMENT",
		5: "NOTIFICATION_TYPE_SHARED_POST",
		6: "NOTIFICATION_TYPE_REACTED_TO_POST",
		7: "NOTIFICATION_TYPE_REACTED_TO_COMMENT",
		8: "NOTIFICATION_TYPE_FOLLOW_REQUEST",
	}
	NotificationType_value = map[string]int32{
		"NOTIFICATION_TYPE_UNSPECIFIED":          0,
		"NOTIFICATION_TYPE_REPLIED_TO_POST":      1,
		"NOTIFICATION_TYPE_MENTIONED_IN_POST":    2,
		"NOTIFICATION_TYPE_REPLIED_TO_COMMENT":   3,
		"NOTIFICATION_TYPE_MENTIONED_IN_COMMENT": 4,
		"NOTIFICATION_TYPE_SHARED_POST":          5,
		"NOTIFICATION_TYPE_REACTED_TO_POST":      6,
		"NOTIFICATION_TYPE_REACTED_TO_COMMENT":   7,
		"NOTIFICATION_TYPE_FOLLOW_REQUEST":       8,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_common_proto_enumTypes[0].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_social_service_v2_common_proto_enumTypes[0]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{0}
}

// ReactionType outlines the types of reactions an action can have associated
// with it
type ReactionType int32

const (
	ReactionType_REACTION_TYPE_UNSPECIFIED ReactionType = 0
	// Like action
	ReactionType_REACTION_TYPE_LIKE ReactionType = 1
	// Dislike action
	ReactionType_REACTION_TYPE_DISLIKE ReactionType = 2
	// Star action
	ReactionType_REACTION_TYPE_STAR ReactionType = 3
)

// Enum value maps for ReactionType.
var (
	ReactionType_name = map[int32]string{
		0: "REACTION_TYPE_UNSPECIFIED",
		1: "REACTION_TYPE_LIKE",
		2: "REACTION_TYPE_DISLIKE",
		3: "REACTION_TYPE_STAR",
	}
	ReactionType_value = map[string]int32{
		"REACTION_TYPE_UNSPECIFIED": 0,
		"REACTION_TYPE_LIKE":        1,
		"REACTION_TYPE_DISLIKE":     2,
		"REACTION_TYPE_STAR":        3,
	}
)

func (x ReactionType) Enum() *ReactionType {
	p := new(ReactionType)
	*p = x
	return p
}

func (x ReactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_common_proto_enumTypes[1].Descriptor()
}

func (ReactionType) Type() protoreflect.EnumType {
	return &file_social_service_v2_common_proto_enumTypes[1]
}

func (x ReactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReactionType.Descriptor instead.
func (ReactionType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{1}
}

// FeedType encompasses the various types of feeds a profile can have
// (in conjuction) with getstream.
type FeedType int32

const (
	FeedType_FEED_TYPE_UNSPECIFIED FeedType = 0
	// UserFeed is a profile's personal feed
	FeedType_FEED_TYPE_PERSONAL FeedType = 1
	// NewsFeed is a profile's timeline
	FeedType_FEED_TYPE_NEWS FeedType = 2
	// NotificationFeed encompasses a profile's notification feed
	FeedType_FEED_TYPE_NOTIFICATION FeedType = 3
)

// Enum value maps for FeedType.
var (
	FeedType_name = map[int32]string{
		0: "FEED_TYPE_UNSPECIFIED",
		1: "FEED_TYPE_PERSONAL",
		2: "FEED_TYPE_NEWS",
		3: "FEED_TYPE_NOTIFICATION",
	}
	FeedType_value = map[string]int32{
		"FEED_TYPE_UNSPECIFIED":  0,
		"FEED_TYPE_PERSONAL":     1,
		"FEED_TYPE_NEWS":         2,
		"FEED_TYPE_NOTIFICATION": 3,
	}
)

func (x FeedType) Enum() *FeedType {
	p := new(FeedType)
	*p = x
	return p
}

func (x FeedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_service_v2_common_proto_enumTypes[2].Descriptor()
}

func (FeedType) Type() protoreflect.EnumType {
	return &file_social_service_v2_common_proto_enumTypes[2]
}

func (x FeedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedType.Descriptor instead.
func (FeedType) EnumDescriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{2}
}

// UserProfileRequestPayload encompasses the request object necessary to
// perform operations against a user profile
type UserProfileRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Profile name is the name tied to the user profile
	ProfileName string `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	// Private defines wether only approved followers can see what this profile
	// posts
	Private bool `protobuf:"varint,3,opt,name=private,proto3" json:"private,omitempty"`
	// Profileimage_url witholds the url of a given profile image
	ProfileImageUrl string `protobuf:"bytes,4,opt,name=profile_image_url,json=profileImageUrl,proto3" json:"profile_image_url,omitempty"`
}

func (x *UserProfileRequestPayload) Reset() {
	*x = UserProfileRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileRequestPayload) ProtoMessage() {}

func (x *UserProfileRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileRequestPayload.ProtoReflect.Descriptor instead.
func (*UserProfileRequestPayload) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{0}
}

func (x *UserProfileRequestPayload) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *UserProfileRequestPayload) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *UserProfileRequestPayload) GetProfileImageUrl() string {
	if x != nil {
		return x.ProfileImageUrl
	}
	return ""
}

// TopicsRequestPayload encompasses the request object necessary to perform operations
// against topics
type TopicsRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic name refers to the name of a given topic
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// description refers to details about the topic
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Refers to the image tied to the created topic of interest
	ImageUrl string `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *TopicsRequestPayload) Reset() {
	*x = TopicsRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicsRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicsRequestPayload) ProtoMessage() {}

func (x *TopicsRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicsRequestPayload.ProtoReflect.Descriptor instead.
func (*TopicsRequestPayload) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{1}
}

func (x *TopicsRequestPayload) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *TopicsRequestPayload) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TopicsRequestPayload) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

// CommunityProfileRpc encompasses the client side request object
// to perform operations against communities
type CommunityProfileRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunityName string `protobuf:"bytes,3,opt,name=community_name,json=communityName,proto3" json:"community_name,omitempty"`
	// Desscription defines additional info about the community
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Private defines wether only approved followers can see what this profile
	// posts
	Private bool `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`
	// Visible defines wether just about anyone can find this group
	Visible bool `protobuf:"varint,6,opt,name=visible,proto3" json:"visible,omitempty"`
	// Defines rules community members must abide by
	CommunityRules string `protobuf:"bytes,9,opt,name=community_rules,json=communityRules,proto3" json:"community_rules,omitempty"`
	// Defines topics assoociated with the community of interest
	Topics []*TopicsRequestPayload `protobuf:"bytes,10,rep,name=topics,proto3" json:"topics,omitempty"`
	// Profileimage_url witholds the url of a given profile image
	ProfileImageUrl string `protobuf:"bytes,11,opt,name=profile_image_url,json=profileImageUrl,proto3" json:"profile_image_url,omitempty"`
}

func (x *CommunityProfileRequestPayload) Reset() {
	*x = CommunityProfileRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunityProfileRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunityProfileRequestPayload) ProtoMessage() {}

func (x *CommunityProfileRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunityProfileRequestPayload.ProtoReflect.Descriptor instead.
func (*CommunityProfileRequestPayload) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{2}
}

func (x *CommunityProfileRequestPayload) GetCommunityName() string {
	if x != nil {
		return x.CommunityName
	}
	return ""
}

func (x *CommunityProfileRequestPayload) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CommunityProfileRequestPayload) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *CommunityProfileRequestPayload) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *CommunityProfileRequestPayload) GetCommunityRules() string {
	if x != nil {
		return x.CommunityRules
	}
	return ""
}

func (x *CommunityProfileRequestPayload) GetTopics() []*TopicsRequestPayload {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *CommunityProfileRequestPayload) GetProfileImageUrl() string {
	if x != nil {
		return x.ProfileImageUrl
	}
	return ""
}

// PostRequestPayload encompasses the client side post object sent to perform
// operations pertinent to posts
type PostRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Content refers to the content in the post object.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Title refers to the high level description of the post content
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Extra are any additional metadata included in the post
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Post type refers to the type of post: Achievement, Post, Poll ...
	PostType PostType `protobuf:"varint,4,opt,name=post_type,json=postType,proto3,enum=social_service.v2.PostType" json:"post_type,omitempty"`
	// topic_name is native to community accounts and can be associated to posts
	TopicName string `protobuf:"bytes,5,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// tags are additional points of details ties to the post
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// Username of the person making the comment
	AuthorUserName string `protobuf:"bytes,7,opt,name=author_user_name,json=authorUserName,proto3" json:"author_user_name,omitempty"`
	// Profile image of the person making this comment
	AuthorProfileImage string `protobuf:"bytes,8,opt,name=author_profile_image,json=authorProfileImage,proto3" json:"author_profile_image,omitempty"`
	// Backgroundimage_url signifies an image to associate to a post object.
	// Such urls are only associated when a post is an article or short story
	BackgroundImageUrl string `protobuf:"bytes,9,opt,name=background_image_url,json=backgroundImageUrl,proto3" json:"background_image_url,omitempty"`
}

func (x *PostRequestPayload) Reset() {
	*x = PostRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostRequestPayload) ProtoMessage() {}

func (x *PostRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostRequestPayload.ProtoReflect.Descriptor instead.
func (*PostRequestPayload) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{3}
}

func (x *PostRequestPayload) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PostRequestPayload) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PostRequestPayload) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PostRequestPayload) GetPostType() PostType {
	if x != nil {
		return x.PostType
	}
	return PostType_POST_TYPE_UNSPECIFIED
}

func (x *PostRequestPayload) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *PostRequestPayload) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PostRequestPayload) GetAuthorUserName() string {
	if x != nil {
		return x.AuthorUserName
	}
	return ""
}

func (x *PostRequestPayload) GetAuthorProfileImage() string {
	if x != nil {
		return x.AuthorProfileImage
	}
	return ""
}

func (x *PostRequestPayload) GetBackgroundImageUrl() string {
	if x != nil {
		return x.BackgroundImageUrl
	}
	return ""
}

// PollRequestPayload encompasses the client side poll object sent to perform
// operations pertinent to polls (special posts)
type PollRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Content refers to the content in the post object.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Title refers to the high level description of the post content
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Extra are any additional metadata included in the post
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Post type refers to the type of post: Achievement, Post, Poll ...
	PostType PostType `protobuf:"varint,4,opt,name=post_type,json=postType,proto3,enum=social_service.v2.PostType" json:"post_type,omitempty"`
	// topic_name is native to community accounts and can be associated to posts
	TopicName string `protobuf:"bytes,5,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// tags are additional points of details ties to the post
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// Username of the person making the comment
	AuthorUserName string `protobuf:"bytes,7,opt,name=author_user_name,json=authorUserName,proto3" json:"author_user_name,omitempty"`
	// Profile image of the person making this comment
	AuthorProfileImage string `protobuf:"bytes,8,opt,name=author_profile_image,json=authorProfileImage,proto3" json:"author_profile_image,omitempty"`
	// Backgroundimage_url signifies an image to associate to a post object.
	// Such urls are only associated when a post is an article or short story
	BackgroundImageUrl string `protobuf:"bytes,9,opt,name=background_image_url,json=backgroundImageUrl,proto3" json:"background_image_url,omitempty"`
	// The set of options the poll witholds
	PollOptions []string `protobuf:"bytes,10,rep,name=poll_options,json=pollOptions,proto3" json:"poll_options,omitempty"`
	// The end date of a given poll
	PollEndDate *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=poll_end_date,json=pollEndDate,proto3" json:"poll_end_date,omitempty"`
}

func (x *PollRequestPayload) Reset() {
	*x = PollRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollRequestPayload) ProtoMessage() {}

func (x *PollRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollRequestPayload.ProtoReflect.Descriptor instead.
func (*PollRequestPayload) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{4}
}

func (x *PollRequestPayload) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PollRequestPayload) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PollRequestPayload) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PollRequestPayload) GetPostType() PostType {
	if x != nil {
		return x.PostType
	}
	return PostType_POST_TYPE_UNSPECIFIED
}

func (x *PollRequestPayload) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *PollRequestPayload) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PollRequestPayload) GetAuthorUserName() string {
	if x != nil {
		return x.AuthorUserName
	}
	return ""
}

func (x *PollRequestPayload) GetAuthorProfileImage() string {
	if x != nil {
		return x.AuthorProfileImage
	}
	return ""
}

func (x *PollRequestPayload) GetBackgroundImageUrl() string {
	if x != nil {
		return x.BackgroundImageUrl
	}
	return ""
}

func (x *PollRequestPayload) GetPollOptions() []string {
	if x != nil {
		return x.PollOptions
	}
	return nil
}

func (x *PollRequestPayload) GetPollEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PollEndDate
	}
	return nil
}

// CommentRequestObject encompasses the request object sent by the
// client to the service in order to add a new comment
type CommentRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Content encompasses the comment payload
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Extra refers to addional metadata tied to the comment
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Username of the person making the comment
	AuthorUsername string `protobuf:"bytes,3,opt,name=author_username,json=authorUsername,proto3" json:"author_username,omitempty"`
	// Profile image of the person making this comment
	AuthorProfileImage string `protobuf:"bytes,4,opt,name=author_profile_image,json=authorProfileImage,proto3" json:"author_profile_image,omitempty"`
}

func (x *CommentRequestPayload) Reset() {
	*x = CommentRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentRequestPayload) ProtoMessage() {}

func (x *CommentRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentRequestPayload.ProtoReflect.Descriptor instead.
func (*CommentRequestPayload) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{5}
}

func (x *CommentRequestPayload) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentRequestPayload) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *CommentRequestPayload) GetAuthorUsername() string {
	if x != nil {
		return x.AuthorUsername
	}
	return ""
}

func (x *CommentRequestPayload) GetAuthorProfileImage() string {
	if x != nil {
		return x.AuthorProfileImage
	}
	return ""
}

// Actor references the profile performing an operation
type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Actor:
	//
	//	*Actor_UserProfile
	//	*Actor_Community
	Actor isActor_Actor `protobuf_oneof:"actor"`
	// AccountType is the type of account this actor is
	ActorType AccountType `protobuf:"varint,3,opt,name=actor_type,json=actorType,proto3,enum=social_service.v2.AccountType" json:"actor_type,omitempty"`
}

func (x *Actor) Reset() {
	*x = Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{6}
}

func (m *Actor) GetActor() isActor_Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (x *Actor) GetUserProfile() *UserProfile {
	if x, ok := x.GetActor().(*Actor_UserProfile); ok {
		return x.UserProfile
	}
	return nil
}

func (x *Actor) GetCommunity() *CommunityProfile {
	if x, ok := x.GetActor().(*Actor_Community); ok {
		return x.Community
	}
	return nil
}

func (x *Actor) GetActorType() AccountType {
	if x != nil {
		return x.ActorType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

type isActor_Actor interface {
	isActor_Actor()
}

type Actor_UserProfile struct {
	// UserProfile is the user profile who's performing a given operation
	UserProfile *UserProfile `protobuf:"bytes,1,opt,name=user_profile,json=userProfile,proto3,oneof"`
}

type Actor_Community struct {
	// Communtiy is the community profile who's performing a given operation
	Community *CommunityProfile `protobuf:"bytes,2,opt,name=community,proto3,oneof"`
}

func (*Actor_UserProfile) isActor_Actor() {}

func (*Actor_Community) isActor_Actor() {}

type BaseTimeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activities []*FeedActivity `protobuf:"bytes,1,rep,name=activities,proto3" json:"activities,omitempty"`
}

func (x *BaseTimeline) Reset() {
	*x = BaseTimeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseTimeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTimeline) ProtoMessage() {}

func (x *BaseTimeline) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTimeline.ProtoReflect.Descriptor instead.
func (*BaseTimeline) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{7}
}

func (x *BaseTimeline) GetActivities() []*FeedActivity {
	if x != nil {
		return x.Activities
	}
	return nil
}

type NotificationTimeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activities []*NotificationFeedGroup `protobuf:"bytes,1,rep,name=activities,proto3" json:"activities,omitempty"`
}

func (x *NotificationTimeline) Reset() {
	*x = NotificationTimeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationTimeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationTimeline) ProtoMessage() {}

func (x *NotificationTimeline) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationTimeline.ProtoReflect.Descriptor instead.
func (*NotificationTimeline) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{8}
}

func (x *NotificationTimeline) GetActivities() []*NotificationFeedGroup {
	if x != nil {
		return x.Activities
	}
	return nil
}

// FeedActivity references an actvitiy present in a given user's timeline
type FeedActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actor refers to profile who created the object in the Activity
	Actor *Actor `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	// Identifies the action that the activity describes.
	Verb PostType `protobuf:"varint,2,opt,name=verb,proto3,enum=social_service.v2.PostType" json:"verb,omitempty"`
	// Object refers to the activity payload
	//
	// Types that are assignable to Post:
	//
	//	*FeedActivity_RegularPost
	//	*FeedActivity_SharedPost
	//	*FeedActivity_PollPost
	Post isFeedActivity_Post `protobuf_oneof:"post"`
	// ForeignID is used as a reference identifier between our datastore
	// and getstream
	ForeignId string `protobuf:"bytes,7,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	// Object	Describes the target of the activity. The precise meaning of the
	// activity's target is dependent on the activities verb, but will often be
	// the object the English preposition "to". For instance, in the activity,
	// "John saved a movie to his wishlist", the target of the activity is
	// "wishlist".
	Target string `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	// Time is the time this activity was created at
	Time   string `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	Origin string `protobuf:"bytes,10,opt,name=origin,proto3" json:"origin,omitempty"`
	// The TO field allows you to specify a list of feeds to which the activity
	// should be copied. One way to think about it is as the CC functionality of
	// email.
	To []string `protobuf:"bytes,11,rep,name=to,proto3" json:"to,omitempty"`
	// Score associated to an activity
	Score uint64 `protobuf:"varint,12,opt,name=score,proto3" json:"score,omitempty"`
	// Extra encompasses any additional activity metadata
	Extra map[string]string `protobuf:"bytes,13,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The ID of the activity from the context of getstream
	GetstreamActivityId string `protobuf:"bytes,14,opt,name=getstream_activity_id,json=getstreamActivityId,proto3" json:"getstream_activity_id,omitempty"`
}

func (x *FeedActivity) Reset() {
	*x = FeedActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedActivity) ProtoMessage() {}

func (x *FeedActivity) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedActivity.ProtoReflect.Descriptor instead.
func (*FeedActivity) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{9}
}

func (x *FeedActivity) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *FeedActivity) GetVerb() PostType {
	if x != nil {
		return x.Verb
	}
	return PostType_POST_TYPE_UNSPECIFIED
}

func (m *FeedActivity) GetPost() isFeedActivity_Post {
	if m != nil {
		return m.Post
	}
	return nil
}

func (x *FeedActivity) GetRegularPost() *Post {
	if x, ok := x.GetPost().(*FeedActivity_RegularPost); ok {
		return x.RegularPost
	}
	return nil
}

func (x *FeedActivity) GetSharedPost() *SharedPost {
	if x, ok := x.GetPost().(*FeedActivity_SharedPost); ok {
		return x.SharedPost
	}
	return nil
}

func (x *FeedActivity) GetPollPost() *PollPost {
	if x, ok := x.GetPost().(*FeedActivity_PollPost); ok {
		return x.PollPost
	}
	return nil
}

func (x *FeedActivity) GetForeignId() string {
	if x != nil {
		return x.ForeignId
	}
	return ""
}

func (x *FeedActivity) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *FeedActivity) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *FeedActivity) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FeedActivity) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *FeedActivity) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FeedActivity) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *FeedActivity) GetGetstreamActivityId() string {
	if x != nil {
		return x.GetstreamActivityId
	}
	return ""
}

type isFeedActivity_Post interface {
	isFeedActivity_Post()
}

type FeedActivity_RegularPost struct {
	RegularPost *Post `protobuf:"bytes,3,opt,name=regular_post,json=regularPost,proto3,oneof"`
}

type FeedActivity_SharedPost struct {
	SharedPost *SharedPost `protobuf:"bytes,4,opt,name=shared_post,json=sharedPost,proto3,oneof"`
}

type FeedActivity_PollPost struct {
	PollPost *PollPost `protobuf:"bytes,5,opt,name=poll_post,json=pollPost,proto3,oneof"`
}

func (*FeedActivity_RegularPost) isFeedActivity_Post() {}

func (*FeedActivity_SharedPost) isFeedActivity_Post() {}

func (*FeedActivity_PollPost) isFeedActivity_Post() {}

type NotificationFeedGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityCount uint64                  `protobuf:"varint,1,opt,name=activity_count,json=activityCount,proto3" json:"activity_count,omitempty"`
	ActorCount    uint64                  `protobuf:"varint,2,opt,name=actor_count,json=actorCount,proto3" json:"actor_count,omitempty"`
	CreatedAt     string                  `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Group         string                  `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	FeedGroupId   string                  `protobuf:"bytes,5,opt,name=feed_group_id,json=feedGroupId,proto3" json:"feed_group_id,omitempty"`
	IsRead        bool                    `protobuf:"varint,6,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	IsSeen        bool                    `protobuf:"varint,7,opt,name=is_seen,json=isSeen,proto3" json:"is_seen,omitempty"`
	UpdatedAt     string                  `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Verb          string                  `protobuf:"bytes,9,opt,name=verb,proto3" json:"verb,omitempty"`
	Activities    []*NotificationActivity `protobuf:"bytes,10,rep,name=activities,proto3" json:"activities,omitempty"`
}

func (x *NotificationFeedGroup) Reset() {
	*x = NotificationFeedGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationFeedGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationFeedGroup) ProtoMessage() {}

func (x *NotificationFeedGroup) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationFeedGroup.ProtoReflect.Descriptor instead.
func (*NotificationFeedGroup) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{10}
}

func (x *NotificationFeedGroup) GetActivityCount() uint64 {
	if x != nil {
		return x.ActivityCount
	}
	return 0
}

func (x *NotificationFeedGroup) GetActorCount() uint64 {
	if x != nil {
		return x.ActorCount
	}
	return 0
}

func (x *NotificationFeedGroup) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *NotificationFeedGroup) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *NotificationFeedGroup) GetFeedGroupId() string {
	if x != nil {
		return x.FeedGroupId
	}
	return ""
}

func (x *NotificationFeedGroup) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *NotificationFeedGroup) GetIsSeen() bool {
	if x != nil {
		return x.IsSeen
	}
	return false
}

func (x *NotificationFeedGroup) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *NotificationFeedGroup) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *NotificationFeedGroup) GetActivities() []*NotificationActivity {
	if x != nil {
		return x.Activities
	}
	return nil
}

type NotificationActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorName  string `protobuf:"bytes,1,opt,name=actor_name,json=actorName,proto3" json:"actor_name,omitempty"`
	ForeignId  string `protobuf:"bytes,2,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	ActivityId string `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Verb       string `protobuf:"bytes,4,opt,name=verb,proto3" json:"verb,omitempty"`
	Time       string `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Target     string `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
	Origin     string `protobuf:"bytes,7,opt,name=origin,proto3" json:"origin,omitempty"`
	Object     string `protobuf:"bytes,8,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *NotificationActivity) Reset() {
	*x = NotificationActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationActivity) ProtoMessage() {}

func (x *NotificationActivity) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationActivity.ProtoReflect.Descriptor instead.
func (*NotificationActivity) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{11}
}

func (x *NotificationActivity) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *NotificationActivity) GetForeignId() string {
	if x != nil {
		return x.ForeignId
	}
	return ""
}

func (x *NotificationActivity) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *NotificationActivity) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *NotificationActivity) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *NotificationActivity) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *NotificationActivity) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *NotificationActivity) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

// PendingFollowRequest defines the record describing the given pending follow
// relationship
type PendingFollowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the follow request
	FollowRequestId uint64 `protobuf:"varint,1,opt,name=follow_request_id,json=followRequestId,proto3" json:"follow_request_id,omitempty"`
	// The profile who initiated follow request
	FollowerRequestionToFollow *UserProfile `protobuf:"bytes,2,opt,name=follower_requestion_to_follow,json=followerRequestionToFollow,proto3" json:"follower_requestion_to_follow,omitempty"`
	// The time the follow request originated
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PendingFollowRequest) Reset() {
	*x = PendingFollowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingFollowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingFollowRequest) ProtoMessage() {}

func (x *PendingFollowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingFollowRequest.ProtoReflect.Descriptor instead.
func (*PendingFollowRequest) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{12}
}

func (x *PendingFollowRequest) GetFollowRequestId() uint64 {
	if x != nil {
		return x.FollowRequestId
	}
	return 0
}

func (x *PendingFollowRequest) GetFollowerRequestionToFollow() *UserProfile {
	if x != nil {
		return x.FollowerRequestionToFollow
	}
	return nil
}

func (x *PendingFollowRequest) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type SocialRelationshipMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceProfile  *SocialRelationshipMetadata_SocialProfileMetadata `protobuf:"bytes,1,opt,name=source_profile,json=sourceProfile,proto3" json:"source_profile,omitempty"`
	TargetProfile  *SocialRelationshipMetadata_SocialProfileMetadata `protobuf:"bytes,2,opt,name=target_profile,json=targetProfile,proto3" json:"target_profile,omitempty"`
	Following      bool                                              `protobuf:"varint,3,opt,name=following,proto3" json:"following,omitempty"`
	FollowingSince string                                            `protobuf:"bytes,4,opt,name=following_since,json=followingSince,proto3" json:"following_since,omitempty"`
}

func (x *SocialRelationshipMetadata) Reset() {
	*x = SocialRelationshipMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialRelationshipMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialRelationshipMetadata) ProtoMessage() {}

func (x *SocialRelationshipMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialRelationshipMetadata.ProtoReflect.Descriptor instead.
func (*SocialRelationshipMetadata) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{13}
}

func (x *SocialRelationshipMetadata) GetSourceProfile() *SocialRelationshipMetadata_SocialProfileMetadata {
	if x != nil {
		return x.SourceProfile
	}
	return nil
}

func (x *SocialRelationshipMetadata) GetTargetProfile() *SocialRelationshipMetadata_SocialProfileMetadata {
	if x != nil {
		return x.TargetProfile
	}
	return nil
}

func (x *SocialRelationshipMetadata) GetFollowing() bool {
	if x != nil {
		return x.Following
	}
	return false
}

func (x *SocialRelationshipMetadata) GetFollowingSince() string {
	if x != nil {
		return x.FollowingSince
	}
	return ""
}

type FeedActivityPostRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Post:
	//
	//	*FeedActivityPostRecord_RegularPost
	//	*FeedActivityPostRecord_SharedPost
	//	*FeedActivityPostRecord_PollPost
	Post     isFeedActivityPostRecord_Post `protobuf_oneof:"post"`
	PostType PostType                      `protobuf:"varint,4,opt,name=post_type,json=postType,proto3,enum=social_service.v2.PostType" json:"post_type,omitempty"`
	PostId   string                        `protobuf:"bytes,5,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
}

func (x *FeedActivityPostRecord) Reset() {
	*x = FeedActivityPostRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedActivityPostRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedActivityPostRecord) ProtoMessage() {}

func (x *FeedActivityPostRecord) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedActivityPostRecord.ProtoReflect.Descriptor instead.
func (*FeedActivityPostRecord) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{14}
}

func (m *FeedActivityPostRecord) GetPost() isFeedActivityPostRecord_Post {
	if m != nil {
		return m.Post
	}
	return nil
}

func (x *FeedActivityPostRecord) GetRegularPost() *Post {
	if x, ok := x.GetPost().(*FeedActivityPostRecord_RegularPost); ok {
		return x.RegularPost
	}
	return nil
}

func (x *FeedActivityPostRecord) GetSharedPost() *SharedPost {
	if x, ok := x.GetPost().(*FeedActivityPostRecord_SharedPost); ok {
		return x.SharedPost
	}
	return nil
}

func (x *FeedActivityPostRecord) GetPollPost() *PollPost {
	if x, ok := x.GetPost().(*FeedActivityPostRecord_PollPost); ok {
		return x.PollPost
	}
	return nil
}

func (x *FeedActivityPostRecord) GetPostType() PostType {
	if x != nil {
		return x.PostType
	}
	return PostType_POST_TYPE_UNSPECIFIED
}

func (x *FeedActivityPostRecord) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

type isFeedActivityPostRecord_Post interface {
	isFeedActivityPostRecord_Post()
}

type FeedActivityPostRecord_RegularPost struct {
	RegularPost *Post `protobuf:"bytes,1,opt,name=regular_post,json=regularPost,proto3,oneof"`
}

type FeedActivityPostRecord_SharedPost struct {
	SharedPost *SharedPost `protobuf:"bytes,2,opt,name=shared_post,json=sharedPost,proto3,oneof"`
}

type FeedActivityPostRecord_PollPost struct {
	PollPost *PollPost `protobuf:"bytes,3,opt,name=poll_post,json=pollPost,proto3,oneof"`
}

func (*FeedActivityPostRecord_RegularPost) isFeedActivityPostRecord_Post() {}

func (*FeedActivityPostRecord_SharedPost) isFeedActivityPostRecord_Post() {}

func (*FeedActivityPostRecord_PollPost) isFeedActivityPostRecord_Post() {}

type FeedActorRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Actor:
	//
	//	*FeedActorRecord_UserProfile
	//	*FeedActorRecord_CommunityProfile
	Actor     isFeedActorRecord_Actor `protobuf_oneof:"actor"`
	ActorType AccountType             `protobuf:"varint,3,opt,name=actor_type,json=actorType,proto3,enum=social_service.v2.AccountType" json:"actor_type,omitempty"`
}

func (x *FeedActorRecord) Reset() {
	*x = FeedActorRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedActorRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedActorRecord) ProtoMessage() {}

func (x *FeedActorRecord) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedActorRecord.ProtoReflect.Descriptor instead.
func (*FeedActorRecord) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{15}
}

func (m *FeedActorRecord) GetActor() isFeedActorRecord_Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (x *FeedActorRecord) GetUserProfile() *UserProfile {
	if x, ok := x.GetActor().(*FeedActorRecord_UserProfile); ok {
		return x.UserProfile
	}
	return nil
}

func (x *FeedActorRecord) GetCommunityProfile() *CommunityProfile {
	if x, ok := x.GetActor().(*FeedActorRecord_CommunityProfile); ok {
		return x.CommunityProfile
	}
	return nil
}

func (x *FeedActorRecord) GetActorType() AccountType {
	if x != nil {
		return x.ActorType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

type isFeedActorRecord_Actor interface {
	isFeedActorRecord_Actor()
}

type FeedActorRecord_UserProfile struct {
	UserProfile *UserProfile `protobuf:"bytes,1,opt,name=user_profile,json=userProfile,proto3,oneof"`
}

type FeedActorRecord_CommunityProfile struct {
	CommunityProfile *CommunityProfile `protobuf:"bytes,2,opt,name=community_profile,json=communityProfile,proto3,oneof"`
}

func (*FeedActorRecord_UserProfile) isFeedActorRecord_Actor() {}

func (*FeedActorRecord_CommunityProfile) isFeedActorRecord_Actor() {}

type SocialRelationshipMetadata_SocialProfileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileType AccountType `protobuf:"varint,1,opt,name=profile_type,json=profileType,proto3,enum=social_service.v2.AccountType" json:"profile_type,omitempty"`
	ProfileId   uint64      `protobuf:"varint,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *SocialRelationshipMetadata_SocialProfileMetadata) Reset() {
	*x = SocialRelationshipMetadata_SocialProfileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_service_v2_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialRelationshipMetadata_SocialProfileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialRelationshipMetadata_SocialProfileMetadata) ProtoMessage() {}

func (x *SocialRelationshipMetadata_SocialProfileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_social_service_v2_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialRelationshipMetadata_SocialProfileMetadata.ProtoReflect.Descriptor instead.
func (*SocialRelationshipMetadata_SocialProfileMetadata) Descriptor() ([]byte, []int) {
	return file_social_service_v2_common_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SocialRelationshipMetadata_SocialProfileMetadata) GetProfileType() AccountType {
	if x != nil {
		return x.ProfileType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *SocialRelationshipMetadata_SocialProfileMetadata) GetProfileId() uint64 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

var File_social_service_v2_common_proto protoreflect.FileDescriptor

var file_social_service_v2_common_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c,
	0x01, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x98, 0x01,
	0x0a, 0x14, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x32, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xe3, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x32, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x33, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x32, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xf2,
	0x03, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x32, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x46, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x14, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xec, 0x04, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x32, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x45,
	0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e,
	0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08,
	0x02, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48,
	0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70, 0x6f, 0x6c,
	0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb5, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x33, 0x0a,
	0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x12, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x05, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0b,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x48,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x8f, 0x05, 0x0a, 0x0c, 0x46, 0x65, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x04, 0x76, 0x65, 0x72,
	0x62, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3e, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x13, 0x67, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0xe6, 0x02, 0x0a, 0x15, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x65, 0x72, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x14,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x6e, 0x0a, 0x1d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x1a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x29, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd0, 0x03, 0x0a, 0x1a,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x77, 0x0a, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x1a, 0x79, 0x0a, 0x15, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb9,
	0x02, 0x0a, 0x16, 0x46, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x6f, 0x6c,
	0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x6c, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x0f, 0x46,
	0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x43,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2a,
	0xf5, 0x02, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x27,
	0x0a, 0x23, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x03, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x21, 0x0a,
	0x1d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x05,
	0x12, 0x25, 0x0a, 0x21, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x07, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x08, 0x2a, 0x78, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10,
	0x03, 0x2a, 0x6d, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x45, 0x45, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45,
	0x57, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x42, 0xfb, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x74, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x41, 0x49, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x3b, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x32, 0xa2,
	0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x10, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x10, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1c, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x32, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_social_service_v2_common_proto_rawDescOnce sync.Once
	file_social_service_v2_common_proto_rawDescData = file_social_service_v2_common_proto_rawDesc
)

func file_social_service_v2_common_proto_rawDescGZIP() []byte {
	file_social_service_v2_common_proto_rawDescOnce.Do(func() {
		file_social_service_v2_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_social_service_v2_common_proto_rawDescData)
	})
	return file_social_service_v2_common_proto_rawDescData
}

var file_social_service_v2_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_social_service_v2_common_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_social_service_v2_common_proto_goTypes = []interface{}{
	(NotificationType)(0),                  // 0: social_service.v2.NotificationType
	(ReactionType)(0),                      // 1: social_service.v2.ReactionType
	(FeedType)(0),                          // 2: social_service.v2.FeedType
	(*UserProfileRequestPayload)(nil),      // 3: social_service.v2.UserProfileRequestPayload
	(*TopicsRequestPayload)(nil),           // 4: social_service.v2.TopicsRequestPayload
	(*CommunityProfileRequestPayload)(nil), // 5: social_service.v2.CommunityProfileRequestPayload
	(*PostRequestPayload)(nil),             // 6: social_service.v2.PostRequestPayload
	(*PollRequestPayload)(nil),             // 7: social_service.v2.PollRequestPayload
	(*CommentRequestPayload)(nil),          // 8: social_service.v2.CommentRequestPayload
	(*Actor)(nil),                          // 9: social_service.v2.Actor
	(*BaseTimeline)(nil),                   // 10: social_service.v2.BaseTimeline
	(*NotificationTimeline)(nil),           // 11: social_service.v2.NotificationTimeline
	(*FeedActivity)(nil),                   // 12: social_service.v2.FeedActivity
	(*NotificationFeedGroup)(nil),          // 13: social_service.v2.NotificationFeedGroup
	(*NotificationActivity)(nil),           // 14: social_service.v2.NotificationActivity
	(*PendingFollowRequest)(nil),           // 15: social_service.v2.PendingFollowRequest
	(*SocialRelationshipMetadata)(nil),     // 16: social_service.v2.SocialRelationshipMetadata
	(*FeedActivityPostRecord)(nil),         // 17: social_service.v2.FeedActivityPostRecord
	(*FeedActorRecord)(nil),                // 18: social_service.v2.FeedActorRecord
	nil,                                    // 19: social_service.v2.PostRequestPayload.ExtraEntry
	nil,                                    // 20: social_service.v2.PollRequestPayload.ExtraEntry
	nil,                                    // 21: social_service.v2.CommentRequestPayload.ExtraEntry
	nil,                                    // 22: social_service.v2.FeedActivity.ExtraEntry
	(*SocialRelationshipMetadata_SocialProfileMetadata)(nil), // 23: social_service.v2.SocialRelationshipMetadata.SocialProfileMetadata
	(PostType)(0),                 // 24: social_service.v2.PostType
	(*timestamppb.Timestamp)(nil), // 25: google.protobuf.Timestamp
	(*UserProfile)(nil),           // 26: social_service.v2.UserProfile
	(*CommunityProfile)(nil),      // 27: social_service.v2.CommunityProfile
	(AccountType)(0),              // 28: social_service.v2.AccountType
	(*Post)(nil),                  // 29: social_service.v2.Post
	(*SharedPost)(nil),            // 30: social_service.v2.SharedPost
	(*PollPost)(nil),              // 31: social_service.v2.PollPost
}
var file_social_service_v2_common_proto_depIdxs = []int32{
	4,  // 0: social_service.v2.CommunityProfileRequestPayload.topics:type_name -> social_service.v2.TopicsRequestPayload
	19, // 1: social_service.v2.PostRequestPayload.extra:type_name -> social_service.v2.PostRequestPayload.ExtraEntry
	24, // 2: social_service.v2.PostRequestPayload.post_type:type_name -> social_service.v2.PostType
	20, // 3: social_service.v2.PollRequestPayload.extra:type_name -> social_service.v2.PollRequestPayload.ExtraEntry
	24, // 4: social_service.v2.PollRequestPayload.post_type:type_name -> social_service.v2.PostType
	25, // 5: social_service.v2.PollRequestPayload.poll_end_date:type_name -> google.protobuf.Timestamp
	21, // 6: social_service.v2.CommentRequestPayload.extra:type_name -> social_service.v2.CommentRequestPayload.ExtraEntry
	26, // 7: social_service.v2.Actor.user_profile:type_name -> social_service.v2.UserProfile
	27, // 8: social_service.v2.Actor.community:type_name -> social_service.v2.CommunityProfile
	28, // 9: social_service.v2.Actor.actor_type:type_name -> social_service.v2.AccountType
	12, // 10: social_service.v2.BaseTimeline.activities:type_name -> social_service.v2.FeedActivity
	13, // 11: social_service.v2.NotificationTimeline.activities:type_name -> social_service.v2.NotificationFeedGroup
	9,  // 12: social_service.v2.FeedActivity.actor:type_name -> social_service.v2.Actor
	24, // 13: social_service.v2.FeedActivity.verb:type_name -> social_service.v2.PostType
	29, // 14: social_service.v2.FeedActivity.regular_post:type_name -> social_service.v2.Post
	30, // 15: social_service.v2.FeedActivity.shared_post:type_name -> social_service.v2.SharedPost
	31, // 16: social_service.v2.FeedActivity.poll_post:type_name -> social_service.v2.PollPost
	22, // 17: social_service.v2.FeedActivity.extra:type_name -> social_service.v2.FeedActivity.ExtraEntry
	14, // 18: social_service.v2.NotificationFeedGroup.activities:type_name -> social_service.v2.NotificationActivity
	26, // 19: social_service.v2.PendingFollowRequest.follower_requestion_to_follow:type_name -> social_service.v2.UserProfile
	23, // 20: social_service.v2.SocialRelationshipMetadata.source_profile:type_name -> social_service.v2.SocialRelationshipMetadata.SocialProfileMetadata
	23, // 21: social_service.v2.SocialRelationshipMetadata.target_profile:type_name -> social_service.v2.SocialRelationshipMetadata.SocialProfileMetadata
	29, // 22: social_service.v2.FeedActivityPostRecord.regular_post:type_name -> social_service.v2.Post
	30, // 23: social_service.v2.FeedActivityPostRecord.shared_post:type_name -> social_service.v2.SharedPost
	31, // 24: social_service.v2.FeedActivityPostRecord.poll_post:type_name -> social_service.v2.PollPost
	24, // 25: social_service.v2.FeedActivityPostRecord.post_type:type_name -> social_service.v2.PostType
	26, // 26: social_service.v2.FeedActorRecord.user_profile:type_name -> social_service.v2.UserProfile
	27, // 27: social_service.v2.FeedActorRecord.community_profile:type_name -> social_service.v2.CommunityProfile
	28, // 28: social_service.v2.FeedActorRecord.actor_type:type_name -> social_service.v2.AccountType
	28, // 29: social_service.v2.SocialRelationshipMetadata.SocialProfileMetadata.profile_type:type_name -> social_service.v2.AccountType
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_social_service_v2_common_proto_init() }
func file_social_service_v2_common_proto_init() {
	if File_social_service_v2_common_proto != nil {
		return
	}
	file_social_service_v2_message_proto_init()
	file_social_service_v2_mongo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_social_service_v2_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicsRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunityProfileRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseTimeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationTimeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationFeedGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingFollowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialRelationshipMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedActivityPostRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedActorRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_service_v2_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialRelationshipMetadata_SocialProfileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_social_service_v2_common_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Actor_UserProfile)(nil),
		(*Actor_Community)(nil),
	}
	file_social_service_v2_common_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*FeedActivity_RegularPost)(nil),
		(*FeedActivity_SharedPost)(nil),
		(*FeedActivity_PollPost)(nil),
	}
	file_social_service_v2_common_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*FeedActivityPostRecord_RegularPost)(nil),
		(*FeedActivityPostRecord_SharedPost)(nil),
		(*FeedActivityPostRecord_PollPost)(nil),
	}
	file_social_service_v2_common_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*FeedActorRecord_UserProfile)(nil),
		(*FeedActorRecord_CommunityProfile)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_social_service_v2_common_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_social_service_v2_common_proto_goTypes,
		DependencyIndexes: file_social_service_v2_common_proto_depIdxs,
		EnumInfos:         file_social_service_v2_common_proto_enumTypes,
		MessageInfos:      file_social_service_v2_common_proto_msgTypes,
	}.Build()
	File_social_service_v2_common_proto = out.File
	file_social_service_v2_common_proto_rawDesc = nil
	file_social_service_v2_common_proto_goTypes = nil
	file_social_service_v2_common_proto_depIdxs = nil
}
