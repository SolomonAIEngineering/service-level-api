// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	social_servicev2 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/social_service/v2"
)

func newBlockedORM(db *gorm.DB, opts ...gen.DOOption) blockedORM {
	_blockedORM := blockedORM{}

	_blockedORM.blockedORMDo.UseDB(db, opts...)
	_blockedORM.blockedORMDo.UseModel(&social_servicev2.BlockedORM{})

	tableName := _blockedORM.blockedORMDo.TableName()
	_blockedORM.ALL = field.NewAsterisk(tableName)
	_blockedORM.CreatedAt = field.NewString(tableName, "created_at")
	_blockedORM.Id = field.NewUint64(tableName, "id")
	_blockedORM.ProfileBlockedId = field.NewUint64(tableName, "profile_blocked_id")
	_blockedORM.ProfileBlockedType = field.NewString(tableName, "profile_blocked_type")
	_blockedORM.ProfileBlockingId = field.NewUint64(tableName, "profile_blocking_id")
	_blockedORM.ProfileBlockingType = field.NewString(tableName, "profile_blocking_type")

	_blockedORM.fillFieldMap()

	return _blockedORM
}

type blockedORM struct {
	blockedORMDo

	ALL                 field.Asterisk
	CreatedAt           field.String
	Id                  field.Uint64
	ProfileBlockedId    field.Uint64
	ProfileBlockedType  field.String
	ProfileBlockingId   field.Uint64
	ProfileBlockingType field.String

	fieldMap map[string]field.Expr
}

func (b blockedORM) Table(newTableName string) *blockedORM {
	b.blockedORMDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b blockedORM) As(alias string) *blockedORM {
	b.blockedORMDo.DO = *(b.blockedORMDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *blockedORM) updateTableName(table string) *blockedORM {
	b.ALL = field.NewAsterisk(table)
	b.CreatedAt = field.NewString(table, "created_at")
	b.Id = field.NewUint64(table, "id")
	b.ProfileBlockedId = field.NewUint64(table, "profile_blocked_id")
	b.ProfileBlockedType = field.NewString(table, "profile_blocked_type")
	b.ProfileBlockingId = field.NewUint64(table, "profile_blocking_id")
	b.ProfileBlockingType = field.NewString(table, "profile_blocking_type")

	b.fillFieldMap()

	return b
}

func (b *blockedORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *blockedORM) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 6)
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["id"] = b.Id
	b.fieldMap["profile_blocked_id"] = b.ProfileBlockedId
	b.fieldMap["profile_blocked_type"] = b.ProfileBlockedType
	b.fieldMap["profile_blocking_id"] = b.ProfileBlockingId
	b.fieldMap["profile_blocking_type"] = b.ProfileBlockingType
}

func (b blockedORM) clone(db *gorm.DB) blockedORM {
	b.blockedORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b blockedORM) replaceDB(db *gorm.DB) blockedORM {
	b.blockedORMDo.ReplaceDB(db)
	return b
}

type blockedORMDo struct{ gen.DO }

type IBlockedORMDo interface {
	gen.SubQuery
	Debug() IBlockedORMDo
	WithContext(ctx context.Context) IBlockedORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBlockedORMDo
	WriteDB() IBlockedORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBlockedORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBlockedORMDo
	Not(conds ...gen.Condition) IBlockedORMDo
	Or(conds ...gen.Condition) IBlockedORMDo
	Select(conds ...field.Expr) IBlockedORMDo
	Where(conds ...gen.Condition) IBlockedORMDo
	Order(conds ...field.Expr) IBlockedORMDo
	Distinct(cols ...field.Expr) IBlockedORMDo
	Omit(cols ...field.Expr) IBlockedORMDo
	Join(table schema.Tabler, on ...field.Expr) IBlockedORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBlockedORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBlockedORMDo
	Group(cols ...field.Expr) IBlockedORMDo
	Having(conds ...gen.Condition) IBlockedORMDo
	Limit(limit int) IBlockedORMDo
	Offset(offset int) IBlockedORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBlockedORMDo
	Unscoped() IBlockedORMDo
	Create(values ...*social_servicev2.BlockedORM) error
	CreateInBatches(values []*social_servicev2.BlockedORM, batchSize int) error
	Save(values ...*social_servicev2.BlockedORM) error
	First() (*social_servicev2.BlockedORM, error)
	Take() (*social_servicev2.BlockedORM, error)
	Last() (*social_servicev2.BlockedORM, error)
	Find() ([]*social_servicev2.BlockedORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.BlockedORM, err error)
	FindInBatches(result *[]*social_servicev2.BlockedORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*social_servicev2.BlockedORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBlockedORMDo
	Assign(attrs ...field.AssignExpr) IBlockedORMDo
	Joins(fields ...field.RelationField) IBlockedORMDo
	Preload(fields ...field.RelationField) IBlockedORMDo
	FirstOrInit() (*social_servicev2.BlockedORM, error)
	FirstOrCreate() (*social_servicev2.BlockedORM, error)
	FindByPage(offset int, limit int) (result []*social_servicev2.BlockedORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBlockedORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result social_servicev2.BlockedORM, err error)
	GetRecordByIDs(ids []int) (result []social_servicev2.BlockedORM, err error)
	CreateRecord(item social_servicev2.BlockedORM) (err error)
	UpdateRecordByID(id int, item social_servicev2.BlockedORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.BlockedORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b blockedORMDo) GetRecordByID(id int) (result social_servicev2.BlockedORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM blockeds ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b blockedORMDo) GetRecordByIDs(ids []int) (result []social_servicev2.BlockedORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM blockeds ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (b blockedORMDo) CreateRecord(item social_servicev2.BlockedORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO blockeds (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (b blockedORMDo) UpdateRecordByID(id int, item social_servicev2.BlockedORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE blockeds SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b blockedORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM blockeds ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (b blockedORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.BlockedORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM blockeds ORDER BY " + b.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (b blockedORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM blockeds ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b blockedORMDo) Debug() IBlockedORMDo {
	return b.withDO(b.DO.Debug())
}

func (b blockedORMDo) WithContext(ctx context.Context) IBlockedORMDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b blockedORMDo) ReadDB() IBlockedORMDo {
	return b.Clauses(dbresolver.Read)
}

func (b blockedORMDo) WriteDB() IBlockedORMDo {
	return b.Clauses(dbresolver.Write)
}

func (b blockedORMDo) Session(config *gorm.Session) IBlockedORMDo {
	return b.withDO(b.DO.Session(config))
}

func (b blockedORMDo) Clauses(conds ...clause.Expression) IBlockedORMDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b blockedORMDo) Returning(value interface{}, columns ...string) IBlockedORMDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b blockedORMDo) Not(conds ...gen.Condition) IBlockedORMDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b blockedORMDo) Or(conds ...gen.Condition) IBlockedORMDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b blockedORMDo) Select(conds ...field.Expr) IBlockedORMDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b blockedORMDo) Where(conds ...gen.Condition) IBlockedORMDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b blockedORMDo) Order(conds ...field.Expr) IBlockedORMDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b blockedORMDo) Distinct(cols ...field.Expr) IBlockedORMDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b blockedORMDo) Omit(cols ...field.Expr) IBlockedORMDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b blockedORMDo) Join(table schema.Tabler, on ...field.Expr) IBlockedORMDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b blockedORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBlockedORMDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b blockedORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IBlockedORMDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b blockedORMDo) Group(cols ...field.Expr) IBlockedORMDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b blockedORMDo) Having(conds ...gen.Condition) IBlockedORMDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b blockedORMDo) Limit(limit int) IBlockedORMDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b blockedORMDo) Offset(offset int) IBlockedORMDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b blockedORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBlockedORMDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b blockedORMDo) Unscoped() IBlockedORMDo {
	return b.withDO(b.DO.Unscoped())
}

func (b blockedORMDo) Create(values ...*social_servicev2.BlockedORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b blockedORMDo) CreateInBatches(values []*social_servicev2.BlockedORM, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b blockedORMDo) Save(values ...*social_servicev2.BlockedORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b blockedORMDo) First() (*social_servicev2.BlockedORM, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.BlockedORM), nil
	}
}

func (b blockedORMDo) Take() (*social_servicev2.BlockedORM, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.BlockedORM), nil
	}
}

func (b blockedORMDo) Last() (*social_servicev2.BlockedORM, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.BlockedORM), nil
	}
}

func (b blockedORMDo) Find() ([]*social_servicev2.BlockedORM, error) {
	result, err := b.DO.Find()
	return result.([]*social_servicev2.BlockedORM), err
}

func (b blockedORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.BlockedORM, err error) {
	buf := make([]*social_servicev2.BlockedORM, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b blockedORMDo) FindInBatches(result *[]*social_servicev2.BlockedORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b blockedORMDo) Attrs(attrs ...field.AssignExpr) IBlockedORMDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b blockedORMDo) Assign(attrs ...field.AssignExpr) IBlockedORMDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b blockedORMDo) Joins(fields ...field.RelationField) IBlockedORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b blockedORMDo) Preload(fields ...field.RelationField) IBlockedORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b blockedORMDo) FirstOrInit() (*social_servicev2.BlockedORM, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.BlockedORM), nil
	}
}

func (b blockedORMDo) FirstOrCreate() (*social_servicev2.BlockedORM, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.BlockedORM), nil
	}
}

func (b blockedORMDo) FindByPage(offset int, limit int) (result []*social_servicev2.BlockedORM, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b blockedORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b blockedORMDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b blockedORMDo) Delete(models ...*social_servicev2.BlockedORM) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *blockedORMDo) withDO(do gen.Dao) *blockedORMDo {
	b.DO = *do.(*gen.DO)
	return b
}
