// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	social_servicev2 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/social_service/v2"
)

func newFollowerORM(db *gorm.DB, opts ...gen.DOOption) followerORM {
	_followerORM := followerORM{}

	_followerORM.followerORMDo.UseDB(db, opts...)
	_followerORM.followerORMDo.UseModel(&social_servicev2.FollowerORM{})

	tableName := _followerORM.followerORMDo.TableName()
	_followerORM.ALL = field.NewAsterisk(tableName)
	_followerORM.ApprovedAt = field.NewString(tableName, "approved_at")
	_followerORM.CreatedAt = field.NewString(tableName, "created_at")
	_followerORM.Id = field.NewUint64(tableName, "id")
	_followerORM.ProfileFollowedId = field.NewUint64(tableName, "profile_followed_id")
	_followerORM.ProfileFollowingId = field.NewUint64(tableName, "profile_following_id")
	_followerORM.RequestApproved = field.NewBool(tableName, "request_approved")
	_followerORM.TargetFollowerType = field.NewString(tableName, "target_follower_type")

	_followerORM.fillFieldMap()

	return _followerORM
}

type followerORM struct {
	followerORMDo

	ALL                field.Asterisk
	ApprovedAt         field.String
	CreatedAt          field.String
	Id                 field.Uint64
	ProfileFollowedId  field.Uint64
	ProfileFollowingId field.Uint64
	RequestApproved    field.Bool
	TargetFollowerType field.String

	fieldMap map[string]field.Expr
}

func (f followerORM) Table(newTableName string) *followerORM {
	f.followerORMDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f followerORM) As(alias string) *followerORM {
	f.followerORMDo.DO = *(f.followerORMDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *followerORM) updateTableName(table string) *followerORM {
	f.ALL = field.NewAsterisk(table)
	f.ApprovedAt = field.NewString(table, "approved_at")
	f.CreatedAt = field.NewString(table, "created_at")
	f.Id = field.NewUint64(table, "id")
	f.ProfileFollowedId = field.NewUint64(table, "profile_followed_id")
	f.ProfileFollowingId = field.NewUint64(table, "profile_following_id")
	f.RequestApproved = field.NewBool(table, "request_approved")
	f.TargetFollowerType = field.NewString(table, "target_follower_type")

	f.fillFieldMap()

	return f
}

func (f *followerORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *followerORM) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["approved_at"] = f.ApprovedAt
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["id"] = f.Id
	f.fieldMap["profile_followed_id"] = f.ProfileFollowedId
	f.fieldMap["profile_following_id"] = f.ProfileFollowingId
	f.fieldMap["request_approved"] = f.RequestApproved
	f.fieldMap["target_follower_type"] = f.TargetFollowerType
}

func (f followerORM) clone(db *gorm.DB) followerORM {
	f.followerORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f followerORM) replaceDB(db *gorm.DB) followerORM {
	f.followerORMDo.ReplaceDB(db)
	return f
}

type followerORMDo struct{ gen.DO }

type IFollowerORMDo interface {
	gen.SubQuery
	Debug() IFollowerORMDo
	WithContext(ctx context.Context) IFollowerORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFollowerORMDo
	WriteDB() IFollowerORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFollowerORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFollowerORMDo
	Not(conds ...gen.Condition) IFollowerORMDo
	Or(conds ...gen.Condition) IFollowerORMDo
	Select(conds ...field.Expr) IFollowerORMDo
	Where(conds ...gen.Condition) IFollowerORMDo
	Order(conds ...field.Expr) IFollowerORMDo
	Distinct(cols ...field.Expr) IFollowerORMDo
	Omit(cols ...field.Expr) IFollowerORMDo
	Join(table schema.Tabler, on ...field.Expr) IFollowerORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFollowerORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFollowerORMDo
	Group(cols ...field.Expr) IFollowerORMDo
	Having(conds ...gen.Condition) IFollowerORMDo
	Limit(limit int) IFollowerORMDo
	Offset(offset int) IFollowerORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFollowerORMDo
	Unscoped() IFollowerORMDo
	Create(values ...*social_servicev2.FollowerORM) error
	CreateInBatches(values []*social_servicev2.FollowerORM, batchSize int) error
	Save(values ...*social_servicev2.FollowerORM) error
	First() (*social_servicev2.FollowerORM, error)
	Take() (*social_servicev2.FollowerORM, error)
	Last() (*social_servicev2.FollowerORM, error)
	Find() ([]*social_servicev2.FollowerORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.FollowerORM, err error)
	FindInBatches(result *[]*social_servicev2.FollowerORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*social_servicev2.FollowerORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFollowerORMDo
	Assign(attrs ...field.AssignExpr) IFollowerORMDo
	Joins(fields ...field.RelationField) IFollowerORMDo
	Preload(fields ...field.RelationField) IFollowerORMDo
	FirstOrInit() (*social_servicev2.FollowerORM, error)
	FirstOrCreate() (*social_servicev2.FollowerORM, error)
	FindByPage(offset int, limit int) (result []*social_servicev2.FollowerORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFollowerORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result social_servicev2.FollowerORM, err error)
	GetRecordByIDs(ids []int) (result []social_servicev2.FollowerORM, err error)
	CreateRecord(item social_servicev2.FollowerORM) (err error)
	UpdateRecordByID(id int, item social_servicev2.FollowerORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.FollowerORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result social_servicev2.FollowerORM, err error)
	GetByIDs(ids []uint64) (result []social_servicev2.FollowerORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (f followerORMDo) GetRecordByID(id int) (result social_servicev2.FollowerORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM followers ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (f followerORMDo) GetRecordByIDs(ids []int) (result []social_servicev2.FollowerORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM followers ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (f followerORMDo) CreateRecord(item social_servicev2.FollowerORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO followers (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (f followerORMDo) UpdateRecordByID(id int, item social_servicev2.FollowerORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE followers SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (f followerORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM followers ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (f followerORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.FollowerORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM followers ORDER BY " + f.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (f followerORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM followers ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (f followerORMDo) GetByID(id uint64) (result social_servicev2.FollowerORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM followers ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (f followerORMDo) GetByIDs(ids []uint64) (result []social_servicev2.FollowerORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM followers ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (f followerORMDo) Debug() IFollowerORMDo {
	return f.withDO(f.DO.Debug())
}

func (f followerORMDo) WithContext(ctx context.Context) IFollowerORMDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f followerORMDo) ReadDB() IFollowerORMDo {
	return f.Clauses(dbresolver.Read)
}

func (f followerORMDo) WriteDB() IFollowerORMDo {
	return f.Clauses(dbresolver.Write)
}

func (f followerORMDo) Session(config *gorm.Session) IFollowerORMDo {
	return f.withDO(f.DO.Session(config))
}

func (f followerORMDo) Clauses(conds ...clause.Expression) IFollowerORMDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f followerORMDo) Returning(value interface{}, columns ...string) IFollowerORMDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f followerORMDo) Not(conds ...gen.Condition) IFollowerORMDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f followerORMDo) Or(conds ...gen.Condition) IFollowerORMDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f followerORMDo) Select(conds ...field.Expr) IFollowerORMDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f followerORMDo) Where(conds ...gen.Condition) IFollowerORMDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f followerORMDo) Order(conds ...field.Expr) IFollowerORMDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f followerORMDo) Distinct(cols ...field.Expr) IFollowerORMDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f followerORMDo) Omit(cols ...field.Expr) IFollowerORMDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f followerORMDo) Join(table schema.Tabler, on ...field.Expr) IFollowerORMDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f followerORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFollowerORMDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f followerORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IFollowerORMDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f followerORMDo) Group(cols ...field.Expr) IFollowerORMDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f followerORMDo) Having(conds ...gen.Condition) IFollowerORMDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f followerORMDo) Limit(limit int) IFollowerORMDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f followerORMDo) Offset(offset int) IFollowerORMDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f followerORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFollowerORMDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f followerORMDo) Unscoped() IFollowerORMDo {
	return f.withDO(f.DO.Unscoped())
}

func (f followerORMDo) Create(values ...*social_servicev2.FollowerORM) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f followerORMDo) CreateInBatches(values []*social_servicev2.FollowerORM, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f followerORMDo) Save(values ...*social_servicev2.FollowerORM) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f followerORMDo) First() (*social_servicev2.FollowerORM, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.FollowerORM), nil
	}
}

func (f followerORMDo) Take() (*social_servicev2.FollowerORM, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.FollowerORM), nil
	}
}

func (f followerORMDo) Last() (*social_servicev2.FollowerORM, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.FollowerORM), nil
	}
}

func (f followerORMDo) Find() ([]*social_servicev2.FollowerORM, error) {
	result, err := f.DO.Find()
	return result.([]*social_servicev2.FollowerORM), err
}

func (f followerORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.FollowerORM, err error) {
	buf := make([]*social_servicev2.FollowerORM, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f followerORMDo) FindInBatches(result *[]*social_servicev2.FollowerORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f followerORMDo) Attrs(attrs ...field.AssignExpr) IFollowerORMDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f followerORMDo) Assign(attrs ...field.AssignExpr) IFollowerORMDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f followerORMDo) Joins(fields ...field.RelationField) IFollowerORMDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f followerORMDo) Preload(fields ...field.RelationField) IFollowerORMDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f followerORMDo) FirstOrInit() (*social_servicev2.FollowerORM, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.FollowerORM), nil
	}
}

func (f followerORMDo) FirstOrCreate() (*social_servicev2.FollowerORM, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.FollowerORM), nil
	}
}

func (f followerORMDo) FindByPage(offset int, limit int) (result []*social_servicev2.FollowerORM, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f followerORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f followerORMDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f followerORMDo) Delete(models ...*social_servicev2.FollowerORM) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *followerORMDo) withDO(do gen.Dao) *followerORMDo {
	f.DO = *do.(*gen.DO)
	return f
}
