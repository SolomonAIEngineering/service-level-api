// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	social_servicev2 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/social_service/v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newUserTagsORM(db *gorm.DB, opts ...gen.DOOption) userTagsORM {
	_userTagsORM := userTagsORM{}

	_userTagsORM.userTagsORMDo.UseDB(db, opts...)
	_userTagsORM.userTagsORMDo.UseModel(&social_servicev2.UserTagsORM{})

	tableName := _userTagsORM.userTagsORMDo.TableName()
	_userTagsORM.ALL = field.NewAsterisk(tableName)
	_userTagsORM.Description = field.NewString(tableName, "description")
	_userTagsORM.Id = field.NewUint64(tableName, "id")
	_userTagsORM.TagName = field.NewString(tableName, "tag_name")
	_userTagsORM.UserProfileId = field.NewUint64(tableName, "user_profile_id")

	_userTagsORM.fillFieldMap()

	return _userTagsORM
}

type userTagsORM struct {
	userTagsORMDo

	ALL           field.Asterisk
	Description   field.String
	Id            field.Uint64
	TagName       field.String
	UserProfileId field.Uint64

	fieldMap map[string]field.Expr
}

func (u userTagsORM) Table(newTableName string) *userTagsORM {
	u.userTagsORMDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userTagsORM) As(alias string) *userTagsORM {
	u.userTagsORMDo.DO = *(u.userTagsORMDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userTagsORM) updateTableName(table string) *userTagsORM {
	u.ALL = field.NewAsterisk(table)
	u.Description = field.NewString(table, "description")
	u.Id = field.NewUint64(table, "id")
	u.TagName = field.NewString(table, "tag_name")
	u.UserProfileId = field.NewUint64(table, "user_profile_id")

	u.fillFieldMap()

	return u
}

func (u *userTagsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userTagsORM) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["description"] = u.Description
	u.fieldMap["id"] = u.Id
	u.fieldMap["tag_name"] = u.TagName
	u.fieldMap["user_profile_id"] = u.UserProfileId
}

func (u userTagsORM) clone(db *gorm.DB) userTagsORM {
	u.userTagsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userTagsORM) replaceDB(db *gorm.DB) userTagsORM {
	u.userTagsORMDo.ReplaceDB(db)
	return u
}

type userTagsORMDo struct{ gen.DO }

type IUserTagsORMDo interface {
	gen.SubQuery
	Debug() IUserTagsORMDo
	WithContext(ctx context.Context) IUserTagsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserTagsORMDo
	WriteDB() IUserTagsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserTagsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserTagsORMDo
	Not(conds ...gen.Condition) IUserTagsORMDo
	Or(conds ...gen.Condition) IUserTagsORMDo
	Select(conds ...field.Expr) IUserTagsORMDo
	Where(conds ...gen.Condition) IUserTagsORMDo
	Order(conds ...field.Expr) IUserTagsORMDo
	Distinct(cols ...field.Expr) IUserTagsORMDo
	Omit(cols ...field.Expr) IUserTagsORMDo
	Join(table schema.Tabler, on ...field.Expr) IUserTagsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserTagsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserTagsORMDo
	Group(cols ...field.Expr) IUserTagsORMDo
	Having(conds ...gen.Condition) IUserTagsORMDo
	Limit(limit int) IUserTagsORMDo
	Offset(offset int) IUserTagsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserTagsORMDo
	Unscoped() IUserTagsORMDo
	Create(values ...*social_servicev2.UserTagsORM) error
	CreateInBatches(values []*social_servicev2.UserTagsORM, batchSize int) error
	Save(values ...*social_servicev2.UserTagsORM) error
	First() (*social_servicev2.UserTagsORM, error)
	Take() (*social_servicev2.UserTagsORM, error)
	Last() (*social_servicev2.UserTagsORM, error)
	Find() ([]*social_servicev2.UserTagsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.UserTagsORM, err error)
	FindInBatches(result *[]*social_servicev2.UserTagsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*social_servicev2.UserTagsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserTagsORMDo
	Assign(attrs ...field.AssignExpr) IUserTagsORMDo
	Joins(fields ...field.RelationField) IUserTagsORMDo
	Preload(fields ...field.RelationField) IUserTagsORMDo
	FirstOrInit() (*social_servicev2.UserTagsORM, error)
	FirstOrCreate() (*social_servicev2.UserTagsORM, error)
	FindByPage(offset int, limit int) (result []*social_servicev2.UserTagsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserTagsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result social_servicev2.UserTagsORM, err error)
	GetRecordByIDs(ids []int) (result []social_servicev2.UserTagsORM, err error)
	CreateRecord(item social_servicev2.UserTagsORM) (err error)
	UpdateRecordByID(id int, item social_servicev2.UserTagsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.UserTagsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result social_servicev2.UserTagsORM, err error)
	GetByIDs(ids []uint64) (result []social_servicev2.UserTagsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (u userTagsORMDo) GetRecordByID(id int) (result social_servicev2.UserTagsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_tags ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (u userTagsORMDo) GetRecordByIDs(ids []int) (result []social_servicev2.UserTagsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_tags ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (u userTagsORMDo) CreateRecord(item social_servicev2.UserTagsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO user_tags (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (u userTagsORMDo) UpdateRecordByID(id int, item social_servicev2.UserTagsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE user_tags SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (u userTagsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM user_tags ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (u userTagsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.UserTagsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_tags ORDER BY " + u.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (u userTagsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM user_tags ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (u userTagsORMDo) GetByID(id uint64) (result social_servicev2.UserTagsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_tags ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (u userTagsORMDo) GetByIDs(ids []uint64) (result []social_servicev2.UserTagsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_tags ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userTagsORMDo) Debug() IUserTagsORMDo {
	return u.withDO(u.DO.Debug())
}

func (u userTagsORMDo) WithContext(ctx context.Context) IUserTagsORMDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userTagsORMDo) ReadDB() IUserTagsORMDo {
	return u.Clauses(dbresolver.Read)
}

func (u userTagsORMDo) WriteDB() IUserTagsORMDo {
	return u.Clauses(dbresolver.Write)
}

func (u userTagsORMDo) Session(config *gorm.Session) IUserTagsORMDo {
	return u.withDO(u.DO.Session(config))
}

func (u userTagsORMDo) Clauses(conds ...clause.Expression) IUserTagsORMDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userTagsORMDo) Returning(value interface{}, columns ...string) IUserTagsORMDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userTagsORMDo) Not(conds ...gen.Condition) IUserTagsORMDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userTagsORMDo) Or(conds ...gen.Condition) IUserTagsORMDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userTagsORMDo) Select(conds ...field.Expr) IUserTagsORMDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userTagsORMDo) Where(conds ...gen.Condition) IUserTagsORMDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userTagsORMDo) Order(conds ...field.Expr) IUserTagsORMDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userTagsORMDo) Distinct(cols ...field.Expr) IUserTagsORMDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userTagsORMDo) Omit(cols ...field.Expr) IUserTagsORMDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userTagsORMDo) Join(table schema.Tabler, on ...field.Expr) IUserTagsORMDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userTagsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserTagsORMDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userTagsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserTagsORMDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userTagsORMDo) Group(cols ...field.Expr) IUserTagsORMDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userTagsORMDo) Having(conds ...gen.Condition) IUserTagsORMDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userTagsORMDo) Limit(limit int) IUserTagsORMDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userTagsORMDo) Offset(offset int) IUserTagsORMDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userTagsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserTagsORMDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userTagsORMDo) Unscoped() IUserTagsORMDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userTagsORMDo) Create(values ...*social_servicev2.UserTagsORM) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userTagsORMDo) CreateInBatches(values []*social_servicev2.UserTagsORM, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userTagsORMDo) Save(values ...*social_servicev2.UserTagsORM) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userTagsORMDo) First() (*social_servicev2.UserTagsORM, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.UserTagsORM), nil
	}
}

func (u userTagsORMDo) Take() (*social_servicev2.UserTagsORM, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.UserTagsORM), nil
	}
}

func (u userTagsORMDo) Last() (*social_servicev2.UserTagsORM, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.UserTagsORM), nil
	}
}

func (u userTagsORMDo) Find() ([]*social_servicev2.UserTagsORM, error) {
	result, err := u.DO.Find()
	return result.([]*social_servicev2.UserTagsORM), err
}

func (u userTagsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.UserTagsORM, err error) {
	buf := make([]*social_servicev2.UserTagsORM, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userTagsORMDo) FindInBatches(result *[]*social_servicev2.UserTagsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userTagsORMDo) Attrs(attrs ...field.AssignExpr) IUserTagsORMDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userTagsORMDo) Assign(attrs ...field.AssignExpr) IUserTagsORMDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userTagsORMDo) Joins(fields ...field.RelationField) IUserTagsORMDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userTagsORMDo) Preload(fields ...field.RelationField) IUserTagsORMDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userTagsORMDo) FirstOrInit() (*social_servicev2.UserTagsORM, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.UserTagsORM), nil
	}
}

func (u userTagsORMDo) FirstOrCreate() (*social_servicev2.UserTagsORM, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.UserTagsORM), nil
	}
}

func (u userTagsORMDo) FindByPage(offset int, limit int) (result []*social_servicev2.UserTagsORM, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userTagsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userTagsORMDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userTagsORMDo) Delete(models ...*social_servicev2.UserTagsORM) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userTagsORMDo) withDO(do gen.Dao) *userTagsORMDo {
	u.DO = *do.(*gen.DO)
	return u
}
