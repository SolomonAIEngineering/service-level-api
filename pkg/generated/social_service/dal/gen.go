// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	BlockedORM          *blockedORM
	BookmarkORM         *bookmarkORM
	CommunityProfileORM *communityProfileORM
	FollowerORM         *followerORM
	PublicationORM      *publicationORM
	TopicORM            *topicORM
	UserProfileORM      *userProfileORM
	UserTagsORM         *userTagsORM
	VirtualProfileORM   *virtualProfileORM
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	BlockedORM = &Q.BlockedORM
	BookmarkORM = &Q.BookmarkORM
	CommunityProfileORM = &Q.CommunityProfileORM
	FollowerORM = &Q.FollowerORM
	PublicationORM = &Q.PublicationORM
	TopicORM = &Q.TopicORM
	UserProfileORM = &Q.UserProfileORM
	UserTagsORM = &Q.UserTagsORM
	VirtualProfileORM = &Q.VirtualProfileORM
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		BlockedORM:          newBlockedORM(db, opts...),
		BookmarkORM:         newBookmarkORM(db, opts...),
		CommunityProfileORM: newCommunityProfileORM(db, opts...),
		FollowerORM:         newFollowerORM(db, opts...),
		PublicationORM:      newPublicationORM(db, opts...),
		TopicORM:            newTopicORM(db, opts...),
		UserProfileORM:      newUserProfileORM(db, opts...),
		UserTagsORM:         newUserTagsORM(db, opts...),
		VirtualProfileORM:   newVirtualProfileORM(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	BlockedORM          blockedORM
	BookmarkORM         bookmarkORM
	CommunityProfileORM communityProfileORM
	FollowerORM         followerORM
	PublicationORM      publicationORM
	TopicORM            topicORM
	UserProfileORM      userProfileORM
	UserTagsORM         userTagsORM
	VirtualProfileORM   virtualProfileORM
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		BlockedORM:          q.BlockedORM.clone(db),
		BookmarkORM:         q.BookmarkORM.clone(db),
		CommunityProfileORM: q.CommunityProfileORM.clone(db),
		FollowerORM:         q.FollowerORM.clone(db),
		PublicationORM:      q.PublicationORM.clone(db),
		TopicORM:            q.TopicORM.clone(db),
		UserProfileORM:      q.UserProfileORM.clone(db),
		UserTagsORM:         q.UserTagsORM.clone(db),
		VirtualProfileORM:   q.VirtualProfileORM.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		BlockedORM:          q.BlockedORM.replaceDB(db),
		BookmarkORM:         q.BookmarkORM.replaceDB(db),
		CommunityProfileORM: q.CommunityProfileORM.replaceDB(db),
		FollowerORM:         q.FollowerORM.replaceDB(db),
		PublicationORM:      q.PublicationORM.replaceDB(db),
		TopicORM:            q.TopicORM.replaceDB(db),
		UserProfileORM:      q.UserProfileORM.replaceDB(db),
		UserTagsORM:         q.UserTagsORM.replaceDB(db),
		VirtualProfileORM:   q.VirtualProfileORM.replaceDB(db),
	}
}

type queryCtx struct {
	BlockedORM          IBlockedORMDo
	BookmarkORM         IBookmarkORMDo
	CommunityProfileORM ICommunityProfileORMDo
	FollowerORM         IFollowerORMDo
	PublicationORM      IPublicationORMDo
	TopicORM            ITopicORMDo
	UserProfileORM      IUserProfileORMDo
	UserTagsORM         IUserTagsORMDo
	VirtualProfileORM   IVirtualProfileORMDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		BlockedORM:          q.BlockedORM.WithContext(ctx),
		BookmarkORM:         q.BookmarkORM.WithContext(ctx),
		CommunityProfileORM: q.CommunityProfileORM.WithContext(ctx),
		FollowerORM:         q.FollowerORM.WithContext(ctx),
		PublicationORM:      q.PublicationORM.WithContext(ctx),
		TopicORM:            q.TopicORM.WithContext(ctx),
		UserProfileORM:      q.UserProfileORM.WithContext(ctx),
		UserTagsORM:         q.UserTagsORM.WithContext(ctx),
		VirtualProfileORM:   q.VirtualProfileORM.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
