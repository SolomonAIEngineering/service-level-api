// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	social_servicev2 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/social_service/v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newTopicORM(db *gorm.DB, opts ...gen.DOOption) topicORM {
	_topicORM := topicORM{}

	_topicORM.topicORMDo.UseDB(db, opts...)
	_topicORM.topicORMDo.UseModel(&social_servicev2.TopicORM{})

	tableName := _topicORM.topicORMDo.TableName()
	_topicORM.ALL = field.NewAsterisk(tableName)
	_topicORM.CommunityProfileId = field.NewUint64(tableName, "community_profile_id")
	_topicORM.Description = field.NewString(tableName, "description")
	_topicORM.Id = field.NewUint64(tableName, "id")
	_topicORM.ImageUrl = field.NewString(tableName, "image_url")
	_topicORM.TopicName = field.NewString(tableName, "topic_name")

	_topicORM.fillFieldMap()

	return _topicORM
}

type topicORM struct {
	topicORMDo

	ALL                field.Asterisk
	CommunityProfileId field.Uint64
	Description        field.String
	Id                 field.Uint64
	ImageUrl           field.String
	TopicName          field.String

	fieldMap map[string]field.Expr
}

func (t topicORM) Table(newTableName string) *topicORM {
	t.topicORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t topicORM) As(alias string) *topicORM {
	t.topicORMDo.DO = *(t.topicORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *topicORM) updateTableName(table string) *topicORM {
	t.ALL = field.NewAsterisk(table)
	t.CommunityProfileId = field.NewUint64(table, "community_profile_id")
	t.Description = field.NewString(table, "description")
	t.Id = field.NewUint64(table, "id")
	t.ImageUrl = field.NewString(table, "image_url")
	t.TopicName = field.NewString(table, "topic_name")

	t.fillFieldMap()

	return t
}

func (t *topicORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *topicORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["community_profile_id"] = t.CommunityProfileId
	t.fieldMap["description"] = t.Description
	t.fieldMap["id"] = t.Id
	t.fieldMap["image_url"] = t.ImageUrl
	t.fieldMap["topic_name"] = t.TopicName
}

func (t topicORM) clone(db *gorm.DB) topicORM {
	t.topicORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t topicORM) replaceDB(db *gorm.DB) topicORM {
	t.topicORMDo.ReplaceDB(db)
	return t
}

type topicORMDo struct{ gen.DO }

type ITopicORMDo interface {
	gen.SubQuery
	Debug() ITopicORMDo
	WithContext(ctx context.Context) ITopicORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITopicORMDo
	WriteDB() ITopicORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITopicORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITopicORMDo
	Not(conds ...gen.Condition) ITopicORMDo
	Or(conds ...gen.Condition) ITopicORMDo
	Select(conds ...field.Expr) ITopicORMDo
	Where(conds ...gen.Condition) ITopicORMDo
	Order(conds ...field.Expr) ITopicORMDo
	Distinct(cols ...field.Expr) ITopicORMDo
	Omit(cols ...field.Expr) ITopicORMDo
	Join(table schema.Tabler, on ...field.Expr) ITopicORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITopicORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITopicORMDo
	Group(cols ...field.Expr) ITopicORMDo
	Having(conds ...gen.Condition) ITopicORMDo
	Limit(limit int) ITopicORMDo
	Offset(offset int) ITopicORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITopicORMDo
	Unscoped() ITopicORMDo
	Create(values ...*social_servicev2.TopicORM) error
	CreateInBatches(values []*social_servicev2.TopicORM, batchSize int) error
	Save(values ...*social_servicev2.TopicORM) error
	First() (*social_servicev2.TopicORM, error)
	Take() (*social_servicev2.TopicORM, error)
	Last() (*social_servicev2.TopicORM, error)
	Find() ([]*social_servicev2.TopicORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.TopicORM, err error)
	FindInBatches(result *[]*social_servicev2.TopicORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*social_servicev2.TopicORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITopicORMDo
	Assign(attrs ...field.AssignExpr) ITopicORMDo
	Joins(fields ...field.RelationField) ITopicORMDo
	Preload(fields ...field.RelationField) ITopicORMDo
	FirstOrInit() (*social_servicev2.TopicORM, error)
	FirstOrCreate() (*social_servicev2.TopicORM, error)
	FindByPage(offset int, limit int) (result []*social_servicev2.TopicORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITopicORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result social_servicev2.TopicORM, err error)
	GetRecordByIDs(ids []int) (result []social_servicev2.TopicORM, err error)
	CreateRecord(item social_servicev2.TopicORM) (err error)
	UpdateRecordByID(id int, item social_servicev2.TopicORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.TopicORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result social_servicev2.TopicORM, err error)
	GetByIDs(ids []uint64) (result []social_servicev2.TopicORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t topicORMDo) GetRecordByID(id int) (result social_servicev2.TopicORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM topics ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t topicORMDo) GetRecordByIDs(ids []int) (result []social_servicev2.TopicORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM topics ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (t topicORMDo) CreateRecord(item social_servicev2.TopicORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO topics (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (t topicORMDo) UpdateRecordByID(id int, item social_servicev2.TopicORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE topics SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t topicORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM topics ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (t topicORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.TopicORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM topics ORDER BY " + t.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t topicORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM topics ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t topicORMDo) GetByID(id uint64) (result social_servicev2.TopicORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM topics ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t topicORMDo) GetByIDs(ids []uint64) (result []social_servicev2.TopicORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM topics ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t topicORMDo) Debug() ITopicORMDo {
	return t.withDO(t.DO.Debug())
}

func (t topicORMDo) WithContext(ctx context.Context) ITopicORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t topicORMDo) ReadDB() ITopicORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t topicORMDo) WriteDB() ITopicORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t topicORMDo) Session(config *gorm.Session) ITopicORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t topicORMDo) Clauses(conds ...clause.Expression) ITopicORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t topicORMDo) Returning(value interface{}, columns ...string) ITopicORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t topicORMDo) Not(conds ...gen.Condition) ITopicORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t topicORMDo) Or(conds ...gen.Condition) ITopicORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t topicORMDo) Select(conds ...field.Expr) ITopicORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t topicORMDo) Where(conds ...gen.Condition) ITopicORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t topicORMDo) Order(conds ...field.Expr) ITopicORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t topicORMDo) Distinct(cols ...field.Expr) ITopicORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t topicORMDo) Omit(cols ...field.Expr) ITopicORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t topicORMDo) Join(table schema.Tabler, on ...field.Expr) ITopicORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t topicORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITopicORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t topicORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITopicORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t topicORMDo) Group(cols ...field.Expr) ITopicORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t topicORMDo) Having(conds ...gen.Condition) ITopicORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t topicORMDo) Limit(limit int) ITopicORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t topicORMDo) Offset(offset int) ITopicORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t topicORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITopicORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t topicORMDo) Unscoped() ITopicORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t topicORMDo) Create(values ...*social_servicev2.TopicORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t topicORMDo) CreateInBatches(values []*social_servicev2.TopicORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t topicORMDo) Save(values ...*social_servicev2.TopicORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t topicORMDo) First() (*social_servicev2.TopicORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.TopicORM), nil
	}
}

func (t topicORMDo) Take() (*social_servicev2.TopicORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.TopicORM), nil
	}
}

func (t topicORMDo) Last() (*social_servicev2.TopicORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.TopicORM), nil
	}
}

func (t topicORMDo) Find() ([]*social_servicev2.TopicORM, error) {
	result, err := t.DO.Find()
	return result.([]*social_servicev2.TopicORM), err
}

func (t topicORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.TopicORM, err error) {
	buf := make([]*social_servicev2.TopicORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t topicORMDo) FindInBatches(result *[]*social_servicev2.TopicORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t topicORMDo) Attrs(attrs ...field.AssignExpr) ITopicORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t topicORMDo) Assign(attrs ...field.AssignExpr) ITopicORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t topicORMDo) Joins(fields ...field.RelationField) ITopicORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t topicORMDo) Preload(fields ...field.RelationField) ITopicORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t topicORMDo) FirstOrInit() (*social_servicev2.TopicORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.TopicORM), nil
	}
}

func (t topicORMDo) FirstOrCreate() (*social_servicev2.TopicORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.TopicORM), nil
	}
}

func (t topicORMDo) FindByPage(offset int, limit int) (result []*social_servicev2.TopicORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t topicORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t topicORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t topicORMDo) Delete(models ...*social_servicev2.TopicORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *topicORMDo) withDO(do gen.Dao) *topicORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
