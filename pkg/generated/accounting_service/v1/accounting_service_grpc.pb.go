// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: accounting_service/v1/accounting_service.proto

package accounting_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountingService_HealthCheck_FullMethodName                                 = "/accounting_service.v1.AccountingService/HealthCheck"
	AccountingService_ReadynessCheck_FullMethodName                              = "/accounting_service.v1.AccountingService/ReadynessCheck"
	AccountingService_CreateBusinessAccountingProfile_FullMethodName             = "/accounting_service.v1.AccountingService/CreateBusinessAccountingProfile"
	AccountingService_GetBusinessAccountingProfile_FullMethodName                = "/accounting_service.v1.AccountingService/GetBusinessAccountingProfile"
	AccountingService_DeleteBusinessAccountingProfile_FullMethodName             = "/accounting_service.v1.AccountingService/DeleteBusinessAccountingProfile"
	AccountingService_UpdateBusinessAccountingProfile_FullMethodName             = "/accounting_service.v1.AccountingService/UpdateBusinessAccountingProfile"
	AccountingService_MergeGetPublicLinkToken_FullMethodName                     = "/accounting_service.v1.AccountingService/MergeGetPublicLinkToken"
	AccountingService_MergeExchangePublicLinkTokenForAccountToken_FullMethodName = "/accounting_service.v1.AccountingService/MergeExchangePublicLinkTokenForAccountToken"
)

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountingServiceClient interface {
	// Healthcheck performs a health check on the service
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// ReadynessCheck performs a readiness check on the service
	ReadynessCheck(ctx context.Context, in *ReadynessCheckRequest, opts ...grpc.CallOption) (*ReadynessCheckResponse, error)
	// creates a business accouting profile on the service
	CreateBusinessAccountingProfile(ctx context.Context, in *CreateBusinessAccountingProfileRequest, opts ...grpc.CallOption) (*CreateBusinessAccountingProfileResponse, error)
	// gets business accounting profile
	GetBusinessAccountingProfile(ctx context.Context, in *GetBusinessAccountingProfileRequest, opts ...grpc.CallOption) (*GetBusinessAccountingProfileResponse, error)
	// delete business accounting profile
	DeleteBusinessAccountingProfile(ctx context.Context, in *DeleteBusinessAccountingProfileRequest, opts ...grpc.CallOption) (*DeleteBusinessAccountingProfileResponse, error)
	UpdateBusinessAccountingProfile(ctx context.Context, in *UpdateBusinessAccountingProfileRequest, opts ...grpc.CallOption) (*UpdateBusinessAccountingProfileResponse, error)
	// enables the client to get a link_token to initialize a Link session for your end user.
	MergeGetPublicLinkToken(ctx context.Context, in *MergeGetPublicLinkTokenRequest, opts ...grpc.CallOption) (*MergeGetPublicLinkTokenResponse, error)
	// enables the client to exchange a public link token for an access token
	MergeExchangePublicLinkTokenForAccountToken(ctx context.Context, in *MergeExchangePublicLinkTokenForAccountTokenRequest, opts ...grpc.CallOption) (*MergeExchangePublicLinkTokenForAccountTokenResponse, error)
}

type accountingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingServiceClient(cc grpc.ClientConnInterface) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AccountingService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ReadynessCheck(ctx context.Context, in *ReadynessCheckRequest, opts ...grpc.CallOption) (*ReadynessCheckResponse, error) {
	out := new(ReadynessCheckResponse)
	err := c.cc.Invoke(ctx, AccountingService_ReadynessCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) CreateBusinessAccountingProfile(ctx context.Context, in *CreateBusinessAccountingProfileRequest, opts ...grpc.CallOption) (*CreateBusinessAccountingProfileResponse, error) {
	out := new(CreateBusinessAccountingProfileResponse)
	err := c.cc.Invoke(ctx, AccountingService_CreateBusinessAccountingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetBusinessAccountingProfile(ctx context.Context, in *GetBusinessAccountingProfileRequest, opts ...grpc.CallOption) (*GetBusinessAccountingProfileResponse, error) {
	out := new(GetBusinessAccountingProfileResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetBusinessAccountingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) DeleteBusinessAccountingProfile(ctx context.Context, in *DeleteBusinessAccountingProfileRequest, opts ...grpc.CallOption) (*DeleteBusinessAccountingProfileResponse, error) {
	out := new(DeleteBusinessAccountingProfileResponse)
	err := c.cc.Invoke(ctx, AccountingService_DeleteBusinessAccountingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) UpdateBusinessAccountingProfile(ctx context.Context, in *UpdateBusinessAccountingProfileRequest, opts ...grpc.CallOption) (*UpdateBusinessAccountingProfileResponse, error) {
	out := new(UpdateBusinessAccountingProfileResponse)
	err := c.cc.Invoke(ctx, AccountingService_UpdateBusinessAccountingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) MergeGetPublicLinkToken(ctx context.Context, in *MergeGetPublicLinkTokenRequest, opts ...grpc.CallOption) (*MergeGetPublicLinkTokenResponse, error) {
	out := new(MergeGetPublicLinkTokenResponse)
	err := c.cc.Invoke(ctx, AccountingService_MergeGetPublicLinkToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) MergeExchangePublicLinkTokenForAccountToken(ctx context.Context, in *MergeExchangePublicLinkTokenForAccountTokenRequest, opts ...grpc.CallOption) (*MergeExchangePublicLinkTokenForAccountTokenResponse, error) {
	out := new(MergeExchangePublicLinkTokenForAccountTokenResponse)
	err := c.cc.Invoke(ctx, AccountingService_MergeExchangePublicLinkTokenForAccountToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServiceServer is the server API for AccountingService service.
// All implementations must embed UnimplementedAccountingServiceServer
// for forward compatibility
type AccountingServiceServer interface {
	// Healthcheck performs a health check on the service
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// ReadynessCheck performs a readiness check on the service
	ReadynessCheck(context.Context, *ReadynessCheckRequest) (*ReadynessCheckResponse, error)
	// creates a business accouting profile on the service
	CreateBusinessAccountingProfile(context.Context, *CreateBusinessAccountingProfileRequest) (*CreateBusinessAccountingProfileResponse, error)
	// gets business accounting profile
	GetBusinessAccountingProfile(context.Context, *GetBusinessAccountingProfileRequest) (*GetBusinessAccountingProfileResponse, error)
	// delete business accounting profile
	DeleteBusinessAccountingProfile(context.Context, *DeleteBusinessAccountingProfileRequest) (*DeleteBusinessAccountingProfileResponse, error)
	UpdateBusinessAccountingProfile(context.Context, *UpdateBusinessAccountingProfileRequest) (*UpdateBusinessAccountingProfileResponse, error)
	// enables the client to get a link_token to initialize a Link session for your end user.
	MergeGetPublicLinkToken(context.Context, *MergeGetPublicLinkTokenRequest) (*MergeGetPublicLinkTokenResponse, error)
	// enables the client to exchange a public link token for an access token
	MergeExchangePublicLinkTokenForAccountToken(context.Context, *MergeExchangePublicLinkTokenForAccountTokenRequest) (*MergeExchangePublicLinkTokenForAccountTokenResponse, error)
	mustEmbedUnimplementedAccountingServiceServer()
}

// UnimplementedAccountingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountingServiceServer struct {
}

func (UnimplementedAccountingServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAccountingServiceServer) ReadynessCheck(context.Context, *ReadynessCheckRequest) (*ReadynessCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadynessCheck not implemented")
}
func (UnimplementedAccountingServiceServer) CreateBusinessAccountingProfile(context.Context, *CreateBusinessAccountingProfileRequest) (*CreateBusinessAccountingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessAccountingProfile not implemented")
}
func (UnimplementedAccountingServiceServer) GetBusinessAccountingProfile(context.Context, *GetBusinessAccountingProfileRequest) (*GetBusinessAccountingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessAccountingProfile not implemented")
}
func (UnimplementedAccountingServiceServer) DeleteBusinessAccountingProfile(context.Context, *DeleteBusinessAccountingProfileRequest) (*DeleteBusinessAccountingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessAccountingProfile not implemented")
}
func (UnimplementedAccountingServiceServer) UpdateBusinessAccountingProfile(context.Context, *UpdateBusinessAccountingProfileRequest) (*UpdateBusinessAccountingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessAccountingProfile not implemented")
}
func (UnimplementedAccountingServiceServer) MergeGetPublicLinkToken(context.Context, *MergeGetPublicLinkTokenRequest) (*MergeGetPublicLinkTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeGetPublicLinkToken not implemented")
}
func (UnimplementedAccountingServiceServer) MergeExchangePublicLinkTokenForAccountToken(context.Context, *MergeExchangePublicLinkTokenForAccountTokenRequest) (*MergeExchangePublicLinkTokenForAccountTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeExchangePublicLinkTokenForAccountToken not implemented")
}
func (UnimplementedAccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {}

// UnsafeAccountingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServiceServer will
// result in compilation errors.
type UnsafeAccountingServiceServer interface {
	mustEmbedUnimplementedAccountingServiceServer()
}

func RegisterAccountingServiceServer(s grpc.ServiceRegistrar, srv AccountingServiceServer) {
	s.RegisterService(&AccountingService_ServiceDesc, srv)
}

func _AccountingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ReadynessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadynessCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ReadynessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ReadynessCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ReadynessCheck(ctx, req.(*ReadynessCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_CreateBusinessAccountingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessAccountingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CreateBusinessAccountingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CreateBusinessAccountingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CreateBusinessAccountingProfile(ctx, req.(*CreateBusinessAccountingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetBusinessAccountingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessAccountingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetBusinessAccountingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetBusinessAccountingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetBusinessAccountingProfile(ctx, req.(*GetBusinessAccountingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_DeleteBusinessAccountingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessAccountingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).DeleteBusinessAccountingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_DeleteBusinessAccountingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).DeleteBusinessAccountingProfile(ctx, req.(*DeleteBusinessAccountingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_UpdateBusinessAccountingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessAccountingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).UpdateBusinessAccountingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_UpdateBusinessAccountingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).UpdateBusinessAccountingProfile(ctx, req.(*UpdateBusinessAccountingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_MergeGetPublicLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeGetPublicLinkTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).MergeGetPublicLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_MergeGetPublicLinkToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).MergeGetPublicLinkToken(ctx, req.(*MergeGetPublicLinkTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_MergeExchangePublicLinkTokenForAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeExchangePublicLinkTokenForAccountTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).MergeExchangePublicLinkTokenForAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_MergeExchangePublicLinkTokenForAccountToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).MergeExchangePublicLinkTokenForAccountToken(ctx, req.(*MergeExchangePublicLinkTokenForAccountTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountingService_ServiceDesc is the grpc.ServiceDesc for AccountingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting_service.v1.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _AccountingService_HealthCheck_Handler,
		},
		{
			MethodName: "ReadynessCheck",
			Handler:    _AccountingService_ReadynessCheck_Handler,
		},
		{
			MethodName: "CreateBusinessAccountingProfile",
			Handler:    _AccountingService_CreateBusinessAccountingProfile_Handler,
		},
		{
			MethodName: "GetBusinessAccountingProfile",
			Handler:    _AccountingService_GetBusinessAccountingProfile_Handler,
		},
		{
			MethodName: "DeleteBusinessAccountingProfile",
			Handler:    _AccountingService_DeleteBusinessAccountingProfile_Handler,
		},
		{
			MethodName: "UpdateBusinessAccountingProfile",
			Handler:    _AccountingService_UpdateBusinessAccountingProfile_Handler,
		},
		{
			MethodName: "MergeGetPublicLinkToken",
			Handler:    _AccountingService_MergeGetPublicLinkToken_Handler,
		},
		{
			MethodName: "MergeExchangePublicLinkTokenForAccountToken",
			Handler:    _AccountingService_MergeExchangePublicLinkTokenForAccountToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting_service/v1/accounting_service.proto",
}
