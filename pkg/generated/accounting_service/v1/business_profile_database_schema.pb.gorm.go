package accounting_servicev1

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

type MergeBusinessProfileORM struct {
	AccountingIntegrationMergeLink []*AccountingIntegrationMergeLinkORM `gorm:"foreignkey:MergeBusinessProfileId;association_foreignkey:Id;preload:true"`
	ActionablePersonalInsights     []*BusinessActionableInsightORM      `gorm:"foreignkey:MergeBusinessProfileId;association_foreignkey:Id;preload:true"`
	AuthZeroUserId                 string
	CompanyName                    string
	Email                          string
	Id                             uint64                         `gorm:"unique_index:idx_merge_business_profiles_id"`
	PayrollIntegrationMergeLink    []*HrisIntegrationMergeLinkORM `gorm:"foreignkey:MergeBusinessProfileId;association_foreignkey:Id;preload:true"`
}

// TableName overrides the default tablename generated by GORM
func (MergeBusinessProfileORM) TableName() string {
	return "merge_business_profiles"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *MergeBusinessProfile) ToORM(ctx context.Context) (MergeBusinessProfileORM, error) {
	to := MergeBusinessProfileORM{}
	var err error
	if prehook, ok := interface{}(m).(MergeBusinessProfileWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.AuthZeroUserId = m.AuthZeroUserId
	to.CompanyName = m.CompanyName
	to.Email = m.Email
	for _, v := range m.AccountingIntegrationMergeLink {
		if v != nil {
			if tempAccountingIntegrationMergeLink, cErr := v.ToORM(ctx); cErr == nil {
				to.AccountingIntegrationMergeLink = append(to.AccountingIntegrationMergeLink, &tempAccountingIntegrationMergeLink)
			} else {
				return to, cErr
			}
		} else {
			to.AccountingIntegrationMergeLink = append(to.AccountingIntegrationMergeLink, nil)
		}
	}
	for _, v := range m.PayrollIntegrationMergeLink {
		if v != nil {
			if tempPayrollIntegrationMergeLink, cErr := v.ToORM(ctx); cErr == nil {
				to.PayrollIntegrationMergeLink = append(to.PayrollIntegrationMergeLink, &tempPayrollIntegrationMergeLink)
			} else {
				return to, cErr
			}
		} else {
			to.PayrollIntegrationMergeLink = append(to.PayrollIntegrationMergeLink, nil)
		}
	}
	for _, v := range m.ActionablePersonalInsights {
		if v != nil {
			if tempActionablePersonalInsights, cErr := v.ToORM(ctx); cErr == nil {
				to.ActionablePersonalInsights = append(to.ActionablePersonalInsights, &tempActionablePersonalInsights)
			} else {
				return to, cErr
			}
		} else {
			to.ActionablePersonalInsights = append(to.ActionablePersonalInsights, nil)
		}
	}
	if posthook, ok := interface{}(m).(MergeBusinessProfileWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *MergeBusinessProfileORM) ToPB(ctx context.Context) (MergeBusinessProfile, error) {
	to := MergeBusinessProfile{}
	var err error
	if prehook, ok := interface{}(m).(MergeBusinessProfileWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.AuthZeroUserId = m.AuthZeroUserId
	to.CompanyName = m.CompanyName
	to.Email = m.Email
	for _, v := range m.AccountingIntegrationMergeLink {
		if v != nil {
			if tempAccountingIntegrationMergeLink, cErr := v.ToPB(ctx); cErr == nil {
				to.AccountingIntegrationMergeLink = append(to.AccountingIntegrationMergeLink, &tempAccountingIntegrationMergeLink)
			} else {
				return to, cErr
			}
		} else {
			to.AccountingIntegrationMergeLink = append(to.AccountingIntegrationMergeLink, nil)
		}
	}
	for _, v := range m.PayrollIntegrationMergeLink {
		if v != nil {
			if tempPayrollIntegrationMergeLink, cErr := v.ToPB(ctx); cErr == nil {
				to.PayrollIntegrationMergeLink = append(to.PayrollIntegrationMergeLink, &tempPayrollIntegrationMergeLink)
			} else {
				return to, cErr
			}
		} else {
			to.PayrollIntegrationMergeLink = append(to.PayrollIntegrationMergeLink, nil)
		}
	}
	for _, v := range m.ActionablePersonalInsights {
		if v != nil {
			if tempActionablePersonalInsights, cErr := v.ToPB(ctx); cErr == nil {
				to.ActionablePersonalInsights = append(to.ActionablePersonalInsights, &tempActionablePersonalInsights)
			} else {
				return to, cErr
			}
		} else {
			to.ActionablePersonalInsights = append(to.ActionablePersonalInsights, nil)
		}
	}
	if posthook, ok := interface{}(m).(MergeBusinessProfileWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type MergeBusinessProfile the arg will be the target, the caller the one being converted from

// MergeBusinessProfileBeforeToORM called before default ToORM code
type MergeBusinessProfileWithBeforeToORM interface {
	BeforeToORM(context.Context, *MergeBusinessProfileORM) error
}

// MergeBusinessProfileAfterToORM called after default ToORM code
type MergeBusinessProfileWithAfterToORM interface {
	AfterToORM(context.Context, *MergeBusinessProfileORM) error
}

// MergeBusinessProfileBeforeToPB called before default ToPB code
type MergeBusinessProfileWithBeforeToPB interface {
	BeforeToPB(context.Context, *MergeBusinessProfile) error
}

// MergeBusinessProfileAfterToPB called after default ToPB code
type MergeBusinessProfileWithAfterToPB interface {
	AfterToPB(context.Context, *MergeBusinessProfile) error
}

// DefaultCreateMergeBusinessProfile executes a basic gorm create call
func DefaultCreateMergeBusinessProfile(ctx context.Context, in *MergeBusinessProfile, db *gorm.DB) (*MergeBusinessProfile, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type MergeBusinessProfileORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadMergeBusinessProfile(ctx context.Context, in *MergeBusinessProfile, db *gorm.DB) (*MergeBusinessProfile, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &MergeBusinessProfileORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := MergeBusinessProfileORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(MergeBusinessProfileORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type MergeBusinessProfileORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteMergeBusinessProfile(ctx context.Context, in *MergeBusinessProfile, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&MergeBusinessProfileORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type MergeBusinessProfileORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteMergeBusinessProfileSet(ctx context.Context, in []*MergeBusinessProfile, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&MergeBusinessProfileORM{})).(MergeBusinessProfileORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&MergeBusinessProfileORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&MergeBusinessProfileORM{})).(MergeBusinessProfileORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type MergeBusinessProfileORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*MergeBusinessProfile, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*MergeBusinessProfile, *gorm.DB) error
}

// DefaultStrictUpdateMergeBusinessProfile clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateMergeBusinessProfile(ctx context.Context, in *MergeBusinessProfile, db *gorm.DB) (*MergeBusinessProfile, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateMergeBusinessProfile")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &MergeBusinessProfileORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterAccountingIntegrationMergeLink := AccountingIntegrationMergeLinkORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterAccountingIntegrationMergeLink.MergeBusinessProfileId = new(uint64)
	*filterAccountingIntegrationMergeLink.MergeBusinessProfileId = ormObj.Id
	if err = db.Where(filterAccountingIntegrationMergeLink).Delete(AccountingIntegrationMergeLinkORM{}).Error; err != nil {
		return nil, err
	}
	filterActionablePersonalInsights := BusinessActionableInsightORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterActionablePersonalInsights.MergeBusinessProfileId = new(uint64)
	*filterActionablePersonalInsights.MergeBusinessProfileId = ormObj.Id
	if err = db.Where(filterActionablePersonalInsights).Delete(BusinessActionableInsightORM{}).Error; err != nil {
		return nil, err
	}
	filterPayrollIntegrationMergeLink := HrisIntegrationMergeLinkORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterPayrollIntegrationMergeLink.MergeBusinessProfileId = new(uint64)
	*filterPayrollIntegrationMergeLink.MergeBusinessProfileId = ormObj.Id
	if err = db.Where(filterPayrollIntegrationMergeLink).Delete(HrisIntegrationMergeLinkORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type MergeBusinessProfileORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchMergeBusinessProfile executes a basic gorm update call with patch behavior
func DefaultPatchMergeBusinessProfile(ctx context.Context, in *MergeBusinessProfile, updateMask *field_mask.FieldMask, db *gorm.DB) (*MergeBusinessProfile, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj MergeBusinessProfile
	var err error
	if hook, ok := interface{}(&pbObj).(MergeBusinessProfileWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadMergeBusinessProfile(ctx, &MergeBusinessProfile{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(MergeBusinessProfileWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskMergeBusinessProfile(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(MergeBusinessProfileWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateMergeBusinessProfile(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(MergeBusinessProfileWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type MergeBusinessProfileWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *MergeBusinessProfile, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *MergeBusinessProfile, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *MergeBusinessProfile, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *MergeBusinessProfile, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetMergeBusinessProfile executes a bulk gorm update call with patch behavior
func DefaultPatchSetMergeBusinessProfile(ctx context.Context, objects []*MergeBusinessProfile, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*MergeBusinessProfile, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*MergeBusinessProfile, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchMergeBusinessProfile(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskMergeBusinessProfile patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskMergeBusinessProfile(ctx context.Context, patchee *MergeBusinessProfile, patcher *MergeBusinessProfile, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*MergeBusinessProfile, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"AuthZeroUserId" {
			patchee.AuthZeroUserId = patcher.AuthZeroUserId
			continue
		}
		if f == prefix+"CompanyName" {
			patchee.CompanyName = patcher.CompanyName
			continue
		}
		if f == prefix+"Email" {
			patchee.Email = patcher.Email
			continue
		}
		if f == prefix+"AccountingIntegrationMergeLink" {
			patchee.AccountingIntegrationMergeLink = patcher.AccountingIntegrationMergeLink
			continue
		}
		if f == prefix+"PayrollIntegrationMergeLink" {
			patchee.PayrollIntegrationMergeLink = patcher.PayrollIntegrationMergeLink
			continue
		}
		if f == prefix+"ActionablePersonalInsights" {
			patchee.ActionablePersonalInsights = patcher.ActionablePersonalInsights
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListMergeBusinessProfile executes a gorm list call
func DefaultListMergeBusinessProfile(ctx context.Context, db *gorm.DB) ([]*MergeBusinessProfile, error) {
	in := MergeBusinessProfile{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &MergeBusinessProfileORM{}, &MergeBusinessProfile{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []MergeBusinessProfileORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MergeBusinessProfileORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*MergeBusinessProfile{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type MergeBusinessProfileORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MergeBusinessProfileORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]MergeBusinessProfileORM) error
}
