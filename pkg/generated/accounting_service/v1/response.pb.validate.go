// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: accounting_service/v1/response.proto

package accounting_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckResponseMultiError, or nil if none found.
func (m *HealthCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Healthy

	if len(errors) > 0 {
		return HealthCheckResponseMultiError(errors)
	}

	return nil
}

// HealthCheckResponseMultiError is an error wrapping multiple validation
// errors returned by HealthCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type HealthCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckResponseMultiError) AllErrors() []error { return m }

// HealthCheckResponseValidationError is the validation error returned by
// HealthCheckResponse.Validate if the designated constraints aren't met.
type HealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckResponseValidationError) ErrorName() string {
	return "HealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckResponseValidationError{}

// Validate checks the field values on ReadynessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadynessCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadynessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadynessCheckResponseMultiError, or nil if none found.
func (m *ReadynessCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadynessCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Healthy

	if len(errors) > 0 {
		return ReadynessCheckResponseMultiError(errors)
	}

	return nil
}

// ReadynessCheckResponseMultiError is an error wrapping multiple validation
// errors returned by ReadynessCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadynessCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadynessCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadynessCheckResponseMultiError) AllErrors() []error { return m }

// ReadynessCheckResponseValidationError is the validation error returned by
// ReadynessCheckResponse.Validate if the designated constraints aren't met.
type ReadynessCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadynessCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadynessCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadynessCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadynessCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadynessCheckResponseValidationError) ErrorName() string {
	return "ReadynessCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadynessCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadynessCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadynessCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadynessCheckResponseValidationError{}

// Validate checks the field values on CreateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProfileResponseMultiError, or nil if none found.
func (m *CreateProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProfileId

	if len(errors) > 0 {
		return CreateProfileResponseMultiError(errors)
	}

	return nil
}

// CreateProfileResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProfileResponseMultiError) AllErrors() []error { return m }

// CreateProfileResponseValidationError is the validation error returned by
// CreateProfileResponse.Validate if the designated constraints aren't met.
type CreateProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProfileResponseValidationError) ErrorName() string {
	return "CreateProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProfileResponseValidationError{}

// Validate checks the field values on ReadProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadProfileResponseMultiError, or nil if none found.
func (m *ReadProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadProfileResponseMultiError(errors)
	}

	return nil
}

// ReadProfileResponseMultiError is an error wrapping multiple validation
// errors returned by ReadProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadProfileResponseMultiError) AllErrors() []error { return m }

// ReadProfileResponseValidationError is the validation error returned by
// ReadProfileResponse.Validate if the designated constraints aren't met.
type ReadProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadProfileResponseValidationError) ErrorName() string {
	return "ReadProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadProfileResponseValidationError{}

// Validate checks the field values on DeleteProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProfileResponseMultiError, or nil if none found.
func (m *DeleteProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return DeleteProfileResponseMultiError(errors)
	}

	return nil
}

// DeleteProfileResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProfileResponseMultiError) AllErrors() []error { return m }

// DeleteProfileResponseValidationError is the validation error returned by
// DeleteProfileResponse.Validate if the designated constraints aren't met.
type DeleteProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProfileResponseValidationError) ErrorName() string {
	return "DeleteProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProfileResponseValidationError{}

// Validate checks the field values on UpdateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileResponseMultiError, or nil if none found.
func (m *UpdateProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProfileResponseMultiError(errors)
	}

	return nil
}

// UpdateProfileResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileResponseMultiError) AllErrors() []error { return m }

// UpdateProfileResponseValidationError is the validation error returned by
// UpdateProfileResponse.Validate if the designated constraints aren't met.
type UpdateProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileResponseValidationError) ErrorName() string {
	return "UpdateProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileResponseValidationError{}

// Validate checks the field values on GetLinkTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLinkTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLinkTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLinkTokenResponseMultiError, or nil if none found.
func (m *GetLinkTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLinkTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LinkToken

	// no validation rules for IntegrationName

	// no validation rules for MagicLinkUrl

	// no validation rules for EndUserOriginId

	// no validation rules for OrganizationName

	if len(errors) > 0 {
		return GetLinkTokenResponseMultiError(errors)
	}

	return nil
}

// GetLinkTokenResponseMultiError is an error wrapping multiple validation
// errors returned by GetLinkTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLinkTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLinkTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLinkTokenResponseMultiError) AllErrors() []error { return m }

// GetLinkTokenResponseValidationError is the validation error returned by
// GetLinkTokenResponse.Validate if the designated constraints aren't met.
type GetLinkTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLinkTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLinkTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLinkTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLinkTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLinkTokenResponseValidationError) ErrorName() string {
	return "GetLinkTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLinkTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLinkTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLinkTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLinkTokenResponseValidationError{}

// Validate checks the field values on
// ExchangePublicLinkTokenForAccountTokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExchangePublicLinkTokenForAccountTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExchangePublicLinkTokenForAccountTokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ExchangePublicLinkTokenForAccountTokenResponseMultiError, or nil if none found.
func (m *ExchangePublicLinkTokenForAccountTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangePublicLinkTokenForAccountTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ExchangePublicLinkTokenForAccountTokenResponseMultiError(errors)
	}

	return nil
}

// ExchangePublicLinkTokenForAccountTokenResponseMultiError is an error
// wrapping multiple validation errors returned by
// ExchangePublicLinkTokenForAccountTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type ExchangePublicLinkTokenForAccountTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangePublicLinkTokenForAccountTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangePublicLinkTokenForAccountTokenResponseMultiError) AllErrors() []error { return m }

// ExchangePublicLinkTokenForAccountTokenResponseValidationError is the
// validation error returned by
// ExchangePublicLinkTokenForAccountTokenResponse.Validate if the designated
// constraints aren't met.
type ExchangePublicLinkTokenForAccountTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) ErrorName() string {
	return "ExchangePublicLinkTokenForAccountTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangePublicLinkTokenForAccountTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangePublicLinkTokenForAccountTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangePublicLinkTokenForAccountTokenResponseValidationError{}
