// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: accounting_service/v1/response.proto

package accounting_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckResponseMultiError, or nil if none found.
func (m *HealthCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Healthy

	if len(errors) > 0 {
		return HealthCheckResponseMultiError(errors)
	}

	return nil
}

// HealthCheckResponseMultiError is an error wrapping multiple validation
// errors returned by HealthCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type HealthCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckResponseMultiError) AllErrors() []error { return m }

// HealthCheckResponseValidationError is the validation error returned by
// HealthCheckResponse.Validate if the designated constraints aren't met.
type HealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckResponseValidationError) ErrorName() string {
	return "HealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckResponseValidationError{}

// Validate checks the field values on ReadynessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadynessCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadynessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadynessCheckResponseMultiError, or nil if none found.
func (m *ReadynessCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadynessCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Healthy

	if len(errors) > 0 {
		return ReadynessCheckResponseMultiError(errors)
	}

	return nil
}

// ReadynessCheckResponseMultiError is an error wrapping multiple validation
// errors returned by ReadynessCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadynessCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadynessCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadynessCheckResponseMultiError) AllErrors() []error { return m }

// ReadynessCheckResponseValidationError is the validation error returned by
// ReadynessCheckResponse.Validate if the designated constraints aren't met.
type ReadynessCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadynessCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadynessCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadynessCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadynessCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadynessCheckResponseValidationError) ErrorName() string {
	return "ReadynessCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadynessCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadynessCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadynessCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadynessCheckResponseValidationError{}

// Validate checks the field values on CreateAccountingProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountingProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountingProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAccountingProfileResponseMultiError, or nil if none found.
func (m *CreateAccountingProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountingProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProfileId

	if len(errors) > 0 {
		return CreateAccountingProfileResponseMultiError(errors)
	}

	return nil
}

// CreateAccountingProfileResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAccountingProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateAccountingProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountingProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountingProfileResponseMultiError) AllErrors() []error { return m }

// CreateAccountingProfileResponseValidationError is the validation error
// returned by CreateAccountingProfileResponse.Validate if the designated
// constraints aren't met.
type CreateAccountingProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountingProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountingProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountingProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountingProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountingProfileResponseValidationError) ErrorName() string {
	return "CreateAccountingProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountingProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountingProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountingProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountingProfileResponseValidationError{}

// Validate checks the field values on ReadAccountingProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadAccountingProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadAccountingProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReadAccountingProfileResponseMultiError, or nil if none found.
func (m *ReadAccountingProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadAccountingProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadAccountingProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadAccountingProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadAccountingProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadAccountingProfileResponseMultiError(errors)
	}

	return nil
}

// ReadAccountingProfileResponseMultiError is an error wrapping multiple
// validation errors returned by ReadAccountingProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type ReadAccountingProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadAccountingProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadAccountingProfileResponseMultiError) AllErrors() []error { return m }

// ReadAccountingProfileResponseValidationError is the validation error
// returned by ReadAccountingProfileResponse.Validate if the designated
// constraints aren't met.
type ReadAccountingProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAccountingProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAccountingProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAccountingProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAccountingProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAccountingProfileResponseValidationError) ErrorName() string {
	return "ReadAccountingProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAccountingProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAccountingProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAccountingProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAccountingProfileResponseValidationError{}

// Validate checks the field values on DeleteAccountingProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountingProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountingProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAccountingProfileResponseMultiError, or nil if none found.
func (m *DeleteAccountingProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountingProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return DeleteAccountingProfileResponseMultiError(errors)
	}

	return nil
}

// DeleteAccountingProfileResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAccountingProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteAccountingProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountingProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountingProfileResponseMultiError) AllErrors() []error { return m }

// DeleteAccountingProfileResponseValidationError is the validation error
// returned by DeleteAccountingProfileResponse.Validate if the designated
// constraints aren't met.
type DeleteAccountingProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountingProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountingProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountingProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountingProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountingProfileResponseValidationError) ErrorName() string {
	return "DeleteAccountingProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountingProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountingProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountingProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountingProfileResponseValidationError{}

// Validate checks the field values on UpdateAccountingProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountingProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountingProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAccountingProfileResponseMultiError, or nil if none found.
func (m *UpdateAccountingProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountingProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountingProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountingProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountingProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountingProfileResponseMultiError(errors)
	}

	return nil
}

// UpdateAccountingProfileResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAccountingProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateAccountingProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountingProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountingProfileResponseMultiError) AllErrors() []error { return m }

// UpdateAccountingProfileResponseValidationError is the validation error
// returned by UpdateAccountingProfileResponse.Validate if the designated
// constraints aren't met.
type UpdateAccountingProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountingProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountingProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountingProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountingProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountingProfileResponseValidationError) ErrorName() string {
	return "UpdateAccountingProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountingProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountingProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountingProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountingProfileResponseValidationError{}

// Validate checks the field values on GetMergeLinkTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMergeLinkTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMergeLinkTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMergeLinkTokenResponseMultiError, or nil if none found.
func (m *GetMergeLinkTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMergeLinkTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LinkToken

	// no validation rules for IntegrationName

	// no validation rules for MagicLinkUrl

	// no validation rules for EndUserOriginId

	// no validation rules for OrganizationName

	if len(errors) > 0 {
		return GetMergeLinkTokenResponseMultiError(errors)
	}

	return nil
}

// GetMergeLinkTokenResponseMultiError is an error wrapping multiple validation
// errors returned by GetMergeLinkTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type GetMergeLinkTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMergeLinkTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMergeLinkTokenResponseMultiError) AllErrors() []error { return m }

// GetMergeLinkTokenResponseValidationError is the validation error returned by
// GetMergeLinkTokenResponse.Validate if the designated constraints aren't met.
type GetMergeLinkTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMergeLinkTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMergeLinkTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMergeLinkTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMergeLinkTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMergeLinkTokenResponseValidationError) ErrorName() string {
	return "GetMergeLinkTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMergeLinkTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMergeLinkTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMergeLinkTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMergeLinkTokenResponseValidationError{}

// Validate checks the field values on
// ExchangePublicLinkTokenForAccountTokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExchangePublicLinkTokenForAccountTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExchangePublicLinkTokenForAccountTokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ExchangePublicLinkTokenForAccountTokenResponseMultiError, or nil if none found.
func (m *ExchangePublicLinkTokenForAccountTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangePublicLinkTokenForAccountTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ExchangePublicLinkTokenForAccountTokenResponseMultiError(errors)
	}

	return nil
}

// ExchangePublicLinkTokenForAccountTokenResponseMultiError is an error
// wrapping multiple validation errors returned by
// ExchangePublicLinkTokenForAccountTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type ExchangePublicLinkTokenForAccountTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangePublicLinkTokenForAccountTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangePublicLinkTokenForAccountTokenResponseMultiError) AllErrors() []error { return m }

// ExchangePublicLinkTokenForAccountTokenResponseValidationError is the
// validation error returned by
// ExchangePublicLinkTokenForAccountTokenResponse.Validate if the designated
// constraints aren't met.
type ExchangePublicLinkTokenForAccountTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) ErrorName() string {
	return "ExchangePublicLinkTokenForAccountTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangePublicLinkTokenForAccountTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangePublicLinkTokenForAccountTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangePublicLinkTokenForAccountTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangePublicLinkTokenForAccountTokenResponseValidationError{}

// Validate checks the field values on ReadBalanceSheetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadBalanceSheetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadBalanceSheetsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadBalanceSheetsResponseMultiError, or nil if none found.
func (m *ReadBalanceSheetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadBalanceSheetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBalanceSheets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadBalanceSheetsResponseValidationError{
						field:  fmt.Sprintf("BalanceSheets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadBalanceSheetsResponseValidationError{
						field:  fmt.Sprintf("BalanceSheets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadBalanceSheetsResponseValidationError{
					field:  fmt.Sprintf("BalanceSheets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPage

	if len(errors) > 0 {
		return ReadBalanceSheetsResponseMultiError(errors)
	}

	return nil
}

// ReadBalanceSheetsResponseMultiError is an error wrapping multiple validation
// errors returned by ReadBalanceSheetsResponse.ValidateAll() if the
// designated constraints aren't met.
type ReadBalanceSheetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadBalanceSheetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadBalanceSheetsResponseMultiError) AllErrors() []error { return m }

// ReadBalanceSheetsResponseValidationError is the validation error returned by
// ReadBalanceSheetsResponse.Validate if the designated constraints aren't met.
type ReadBalanceSheetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadBalanceSheetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadBalanceSheetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadBalanceSheetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadBalanceSheetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadBalanceSheetsResponseValidationError) ErrorName() string {
	return "ReadBalanceSheetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadBalanceSheetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadBalanceSheetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadBalanceSheetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadBalanceSheetsResponseValidationError{}

// Validate checks the field values on ReadCashFlowStatementsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadCashFlowStatementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadCashFlowStatementsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReadCashFlowStatementsResponseMultiError, or nil if none found.
func (m *ReadCashFlowStatementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadCashFlowStatementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCashFlowStatements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadCashFlowStatementsResponseValidationError{
						field:  fmt.Sprintf("CashFlowStatements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadCashFlowStatementsResponseValidationError{
						field:  fmt.Sprintf("CashFlowStatements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadCashFlowStatementsResponseValidationError{
					field:  fmt.Sprintf("CashFlowStatements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPage

	if len(errors) > 0 {
		return ReadCashFlowStatementsResponseMultiError(errors)
	}

	return nil
}

// ReadCashFlowStatementsResponseMultiError is an error wrapping multiple
// validation errors returned by ReadCashFlowStatementsResponse.ValidateAll()
// if the designated constraints aren't met.
type ReadCashFlowStatementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadCashFlowStatementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadCashFlowStatementsResponseMultiError) AllErrors() []error { return m }

// ReadCashFlowStatementsResponseValidationError is the validation error
// returned by ReadCashFlowStatementsResponse.Validate if the designated
// constraints aren't met.
type ReadCashFlowStatementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadCashFlowStatementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadCashFlowStatementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadCashFlowStatementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadCashFlowStatementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadCashFlowStatementsResponseValidationError) ErrorName() string {
	return "ReadCashFlowStatementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadCashFlowStatementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadCashFlowStatementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadCashFlowStatementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadCashFlowStatementsResponseValidationError{}

// Validate checks the field values on ReadIncomeStatementsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadIncomeStatementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadIncomeStatementsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadIncomeStatementsResponseMultiError, or nil if none found.
func (m *ReadIncomeStatementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadIncomeStatementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIncomeStatements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadIncomeStatementsResponseValidationError{
						field:  fmt.Sprintf("IncomeStatements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadIncomeStatementsResponseValidationError{
						field:  fmt.Sprintf("IncomeStatements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadIncomeStatementsResponseValidationError{
					field:  fmt.Sprintf("IncomeStatements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPage

	if len(errors) > 0 {
		return ReadIncomeStatementsResponseMultiError(errors)
	}

	return nil
}

// ReadIncomeStatementsResponseMultiError is an error wrapping multiple
// validation errors returned by ReadIncomeStatementsResponse.ValidateAll() if
// the designated constraints aren't met.
type ReadIncomeStatementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadIncomeStatementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadIncomeStatementsResponseMultiError) AllErrors() []error { return m }

// ReadIncomeStatementsResponseValidationError is the validation error returned
// by ReadIncomeStatementsResponse.Validate if the designated constraints
// aren't met.
type ReadIncomeStatementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadIncomeStatementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadIncomeStatementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadIncomeStatementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadIncomeStatementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadIncomeStatementsResponseValidationError) ErrorName() string {
	return "ReadIncomeStatementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadIncomeStatementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadIncomeStatementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadIncomeStatementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadIncomeStatementsResponseValidationError{}

// Validate checks the field values on ReadBusinessChartOfAccountsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReadBusinessChartOfAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadBusinessChartOfAccountsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadBusinessChartOfAccountsResponseMultiError, or nil if none found.
func (m *ReadBusinessChartOfAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadBusinessChartOfAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChartOfAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadBusinessChartOfAccountsResponseValidationError{
						field:  fmt.Sprintf("ChartOfAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadBusinessChartOfAccountsResponseValidationError{
						field:  fmt.Sprintf("ChartOfAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadBusinessChartOfAccountsResponseValidationError{
					field:  fmt.Sprintf("ChartOfAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadBusinessChartOfAccountsResponseMultiError(errors)
	}

	return nil
}

// ReadBusinessChartOfAccountsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReadBusinessChartOfAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadBusinessChartOfAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadBusinessChartOfAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadBusinessChartOfAccountsResponseMultiError) AllErrors() []error { return m }

// ReadBusinessChartOfAccountsResponseValidationError is the validation error
// returned by ReadBusinessChartOfAccountsResponse.Validate if the designated
// constraints aren't met.
type ReadBusinessChartOfAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadBusinessChartOfAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadBusinessChartOfAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadBusinessChartOfAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadBusinessChartOfAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadBusinessChartOfAccountsResponseValidationError) ErrorName() string {
	return "ReadBusinessChartOfAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadBusinessChartOfAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadBusinessChartOfAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadBusinessChartOfAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadBusinessChartOfAccountsResponseValidationError{}
