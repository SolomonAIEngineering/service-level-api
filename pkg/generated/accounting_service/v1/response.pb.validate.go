// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: accounting_service/v1/response.proto

package accounting_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckResponseMultiError, or nil if none found.
func (m *HealthCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Healthy

	if len(errors) > 0 {
		return HealthCheckResponseMultiError(errors)
	}

	return nil
}

// HealthCheckResponseMultiError is an error wrapping multiple validation
// errors returned by HealthCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type HealthCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckResponseMultiError) AllErrors() []error { return m }

// HealthCheckResponseValidationError is the validation error returned by
// HealthCheckResponse.Validate if the designated constraints aren't met.
type HealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckResponseValidationError) ErrorName() string {
	return "HealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckResponseValidationError{}

// Validate checks the field values on ReadynessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadynessCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadynessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadynessCheckResponseMultiError, or nil if none found.
func (m *ReadynessCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadynessCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Healthy

	if len(errors) > 0 {
		return ReadynessCheckResponseMultiError(errors)
	}

	return nil
}

// ReadynessCheckResponseMultiError is an error wrapping multiple validation
// errors returned by ReadynessCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadynessCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadynessCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadynessCheckResponseMultiError) AllErrors() []error { return m }

// ReadynessCheckResponseValidationError is the validation error returned by
// ReadynessCheckResponse.Validate if the designated constraints aren't met.
type ReadynessCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadynessCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadynessCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadynessCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadynessCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadynessCheckResponseValidationError) ErrorName() string {
	return "ReadynessCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadynessCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadynessCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadynessCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadynessCheckResponseValidationError{}

// Validate checks the field values on CreateBusinessAccountingProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateBusinessAccountingProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateBusinessAccountingProfileResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateBusinessAccountingProfileResponseMultiError, or nil if none found.
func (m *CreateBusinessAccountingProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessAccountingProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProfileId

	if len(errors) > 0 {
		return CreateBusinessAccountingProfileResponseMultiError(errors)
	}

	return nil
}

// CreateBusinessAccountingProfileResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateBusinessAccountingProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessAccountingProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessAccountingProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessAccountingProfileResponseMultiError) AllErrors() []error { return m }

// CreateBusinessAccountingProfileResponseValidationError is the validation
// error returned by CreateBusinessAccountingProfileResponse.Validate if the
// designated constraints aren't met.
type CreateBusinessAccountingProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessAccountingProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessAccountingProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessAccountingProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessAccountingProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessAccountingProfileResponseValidationError) ErrorName() string {
	return "CreateBusinessAccountingProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessAccountingProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessAccountingProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessAccountingProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessAccountingProfileResponseValidationError{}

// Validate checks the field values on GetBusinessAccountingProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBusinessAccountingProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessAccountingProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessAccountingProfileResponseMultiError, or nil if none found.
func (m *GetBusinessAccountingProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessAccountingProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBusinessAccountingProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBusinessAccountingProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBusinessAccountingProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBusinessAccountingProfileResponseMultiError(errors)
	}

	return nil
}

// GetBusinessAccountingProfileResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessAccountingProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessAccountingProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessAccountingProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessAccountingProfileResponseMultiError) AllErrors() []error { return m }

// GetBusinessAccountingProfileResponseValidationError is the validation error
// returned by GetBusinessAccountingProfileResponse.Validate if the designated
// constraints aren't met.
type GetBusinessAccountingProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessAccountingProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessAccountingProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessAccountingProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessAccountingProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessAccountingProfileResponseValidationError) ErrorName() string {
	return "GetBusinessAccountingProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessAccountingProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessAccountingProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessAccountingProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessAccountingProfileResponseValidationError{}

// Validate checks the field values on DeleteBusinessAccountingProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteBusinessAccountingProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteBusinessAccountingProfileResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteBusinessAccountingProfileResponseMultiError, or nil if none found.
func (m *DeleteBusinessAccountingProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessAccountingProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return DeleteBusinessAccountingProfileResponseMultiError(errors)
	}

	return nil
}

// DeleteBusinessAccountingProfileResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteBusinessAccountingProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessAccountingProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessAccountingProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessAccountingProfileResponseMultiError) AllErrors() []error { return m }

// DeleteBusinessAccountingProfileResponseValidationError is the validation
// error returned by DeleteBusinessAccountingProfileResponse.Validate if the
// designated constraints aren't met.
type DeleteBusinessAccountingProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessAccountingProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessAccountingProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessAccountingProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessAccountingProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessAccountingProfileResponseValidationError) ErrorName() string {
	return "DeleteBusinessAccountingProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessAccountingProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessAccountingProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessAccountingProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessAccountingProfileResponseValidationError{}

// Validate checks the field values on UpdateBusinessAccountingProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateBusinessAccountingProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBusinessAccountingProfileResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateBusinessAccountingProfileResponseMultiError, or nil if none found.
func (m *UpdateBusinessAccountingProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessAccountingProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessAccountingProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessAccountingProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessAccountingProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessAccountingProfileResponseMultiError(errors)
	}

	return nil
}

// UpdateBusinessAccountingProfileResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateBusinessAccountingProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessAccountingProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessAccountingProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessAccountingProfileResponseMultiError) AllErrors() []error { return m }

// UpdateBusinessAccountingProfileResponseValidationError is the validation
// error returned by UpdateBusinessAccountingProfileResponse.Validate if the
// designated constraints aren't met.
type UpdateBusinessAccountingProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessAccountingProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessAccountingProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessAccountingProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessAccountingProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessAccountingProfileResponseValidationError) ErrorName() string {
	return "UpdateBusinessAccountingProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessAccountingProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessAccountingProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessAccountingProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessAccountingProfileResponseValidationError{}

// Validate checks the field values on MergeGetPublicLinkTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MergeGetPublicLinkTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeGetPublicLinkTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MergeGetPublicLinkTokenResponseMultiError, or nil if none found.
func (m *MergeGetPublicLinkTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeGetPublicLinkTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LinkToken

	// no validation rules for IntegrationName

	// no validation rules for MagicLinkUrl

	// no validation rules for EndUserOriginId

	// no validation rules for OrganizationName

	if len(errors) > 0 {
		return MergeGetPublicLinkTokenResponseMultiError(errors)
	}

	return nil
}

// MergeGetPublicLinkTokenResponseMultiError is an error wrapping multiple
// validation errors returned by MergeGetPublicLinkTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type MergeGetPublicLinkTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeGetPublicLinkTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeGetPublicLinkTokenResponseMultiError) AllErrors() []error { return m }

// MergeGetPublicLinkTokenResponseValidationError is the validation error
// returned by MergeGetPublicLinkTokenResponse.Validate if the designated
// constraints aren't met.
type MergeGetPublicLinkTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeGetPublicLinkTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeGetPublicLinkTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeGetPublicLinkTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeGetPublicLinkTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeGetPublicLinkTokenResponseValidationError) ErrorName() string {
	return "MergeGetPublicLinkTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MergeGetPublicLinkTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeGetPublicLinkTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeGetPublicLinkTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeGetPublicLinkTokenResponseValidationError{}

// Validate checks the field values on
// MergeExchangePublicLinkTokenForAccountTokenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MergeExchangePublicLinkTokenForAccountTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MergeExchangePublicLinkTokenForAccountTokenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MergeExchangePublicLinkTokenForAccountTokenResponseMultiError, or nil if
// none found.
func (m *MergeExchangePublicLinkTokenForAccountTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeExchangePublicLinkTokenForAccountTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return MergeExchangePublicLinkTokenForAccountTokenResponseMultiError(errors)
	}

	return nil
}

// MergeExchangePublicLinkTokenForAccountTokenResponseMultiError is an error
// wrapping multiple validation errors returned by
// MergeExchangePublicLinkTokenForAccountTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type MergeExchangePublicLinkTokenForAccountTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeExchangePublicLinkTokenForAccountTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeExchangePublicLinkTokenForAccountTokenResponseMultiError) AllErrors() []error { return m }

// MergeExchangePublicLinkTokenForAccountTokenResponseValidationError is the
// validation error returned by
// MergeExchangePublicLinkTokenForAccountTokenResponse.Validate if the
// designated constraints aren't met.
type MergeExchangePublicLinkTokenForAccountTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeExchangePublicLinkTokenForAccountTokenResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MergeExchangePublicLinkTokenForAccountTokenResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MergeExchangePublicLinkTokenForAccountTokenResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MergeExchangePublicLinkTokenForAccountTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeExchangePublicLinkTokenForAccountTokenResponseValidationError) ErrorName() string {
	return "MergeExchangePublicLinkTokenForAccountTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MergeExchangePublicLinkTokenForAccountTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeExchangePublicLinkTokenForAccountTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeExchangePublicLinkTokenForAccountTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeExchangePublicLinkTokenForAccountTokenResponseValidationError{}
