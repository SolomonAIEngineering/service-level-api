// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: accounting_service/v1/payroll_database_schema.proto

package accounting_servicev1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HrisIntegrationMergeLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id                      uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Integration             string                   `protobuf:"bytes,2,opt,name=integration,proto3" json:"integration,omitempty"`
	IntegrationSlug         string                   `protobuf:"bytes,3,opt,name=integration_slug,json=integrationSlug,proto3" json:"integration_slug,omitempty"`
	Category                string                   `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	EndUserOriginId         string                   `protobuf:"bytes,5,opt,name=end_user_origin_id,json=endUserOriginId,proto3" json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName string                   `protobuf:"bytes,6,opt,name=end_user_organization_name,json=endUserOrganizationName,proto3" json:"end_user_organization_name,omitempty"`
	EndUserEmailAddress     string                   `protobuf:"bytes,7,opt,name=end_user_email_address,json=endUserEmailAddress,proto3" json:"end_user_email_address,omitempty"`
	Status                  string                   `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	WebhookListenerUrl      string                   `protobuf:"bytes,9,opt,name=webhook_listener_url,json=webhookListenerUrl,proto3" json:"webhook_listener_url,omitempty"`
	IsDuplicate             bool                     `protobuf:"varint,10,opt,name=is_duplicate,json=isDuplicate,proto3" json:"is_duplicate,omitempty"`
	Token                   *MergeLinkedAccountToken `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`
	IntegrationName         string                   `protobuf:"bytes,12,opt,name=integration_name,json=integrationName,proto3" json:"integration_name,omitempty"`
	IntegrationImage        string                   `protobuf:"bytes,13,opt,name=integration_image,json=integrationImage,proto3" json:"integration_image,omitempty"`
	IntegrationSquareImage  string                   `protobuf:"bytes,14,opt,name=integration_square_image,json=integrationSquareImage,proto3" json:"integration_square_image,omitempty"`
	// When you request a link token to initiate a Merge Link session, Merge determines whether to create a new linked account or modify
	// an existing linked account based on a combination of the end_user_origin_id and the category. If you want to support multiple
	// connections, you simply need to provide a different end_user_origin_id for each company.
	//
	// This approach enables you to link multiple instances of the same integration (like QuickBooks) for the same end user.
	// It also has the added security benefit of not exposing any internal end_user_origin_ids.
	Account              *HrisLinkedAccount     `protobuf:"bytes,15,opt,name=account,proto3" json:"account,omitempty"`
	MergeLinkedAccountId string                 `protobuf:"bytes,16,opt,name=merge_linked_account_id,json=mergeLinkedAccountId,proto3" json:"merge_linked_account_id,omitempty"`
	LastModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
}

func (x *HrisIntegrationMergeLink) Reset() {
	*x = HrisIntegrationMergeLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HrisIntegrationMergeLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HrisIntegrationMergeLink) ProtoMessage() {}

func (x *HrisIntegrationMergeLink) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HrisIntegrationMergeLink.ProtoReflect.Descriptor instead.
func (*HrisIntegrationMergeLink) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{0}
}

func (x *HrisIntegrationMergeLink) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HrisIntegrationMergeLink) GetIntegration() string {
	if x != nil {
		return x.Integration
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetIntegrationSlug() string {
	if x != nil {
		return x.IntegrationSlug
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetEndUserOriginId() string {
	if x != nil {
		return x.EndUserOriginId
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetEndUserOrganizationName() string {
	if x != nil {
		return x.EndUserOrganizationName
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetEndUserEmailAddress() string {
	if x != nil {
		return x.EndUserEmailAddress
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetWebhookListenerUrl() string {
	if x != nil {
		return x.WebhookListenerUrl
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *HrisIntegrationMergeLink) GetToken() *MergeLinkedAccountToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *HrisIntegrationMergeLink) GetIntegrationName() string {
	if x != nil {
		return x.IntegrationName
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetIntegrationImage() string {
	if x != nil {
		return x.IntegrationImage
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetIntegrationSquareImage() string {
	if x != nil {
		return x.IntegrationSquareImage
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetAccount() *HrisLinkedAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *HrisIntegrationMergeLink) GetMergeLinkedAccountId() string {
	if x != nil {
		return x.MergeLinkedAccountId
	}
	return ""
}

func (x *HrisIntegrationMergeLink) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

type HrisLinkedAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the company profile of interest
	Profile *CompanyProfile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	// the set of benefit plans offered by the company
	BenefitPlans []*EmployerBenefits `protobuf:"bytes,3,rep,name=benefit_plans,json=benefitPlans,proto3" json:"benefit_plans,omitempty"`
	// the set of employees employed by the employer
	Employees []*Employee `protobuf:"bytes,4,rep,name=employees,proto3" json:"employees,omitempty"`
	// the set of payroll runs by the employer
	PayrollRuns []*EmployerPayrollRun `protobuf:"bytes,5,rep,name=payroll_runs,json=payrollRuns,proto3" json:"payroll_runs,omitempty"`
}

func (x *HrisLinkedAccount) Reset() {
	*x = HrisLinkedAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HrisLinkedAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HrisLinkedAccount) ProtoMessage() {}

func (x *HrisLinkedAccount) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HrisLinkedAccount.ProtoReflect.Descriptor instead.
func (*HrisLinkedAccount) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{1}
}

func (x *HrisLinkedAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HrisLinkedAccount) GetProfile() *CompanyProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *HrisLinkedAccount) GetBenefitPlans() []*EmployerBenefits {
	if x != nil {
		return x.BenefitPlans
	}
	return nil
}

func (x *HrisLinkedAccount) GetEmployees() []*Employee {
	if x != nil {
		return x.Employees
	}
	return nil
}

func (x *HrisLinkedAccount) GetPayrollRuns() []*EmployerPayrollRun {
	if x != nil {
		return x.PayrollRuns
	}
	return nil
}

// The CompanyProfile object is used to represent a company within the HRIS / Payroll system.
// NOTE: a company can link multiple hris company profiles. This is important because a company can have multiple
// locations and each location can have its own hris company profile
type CompanyProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The company's legal name.
	LegalName string `protobuf:"bytes,3,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// The displayed name of the company
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The company's tax number.
	EinNumbers []string `protobuf:"bytes,5,rep,name=ein_numbers,json=einNumbers,proto3" json:"ein_numbers,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool `protobuf:"varint,6,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// This is the datetime that this object was created
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	// The uuid of the object as stored in merge
	MergeAccountId string `protobuf:"bytes,9,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *CompanyProfile) Reset() {
	*x = CompanyProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProfile) ProtoMessage() {}

func (x *CompanyProfile) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProfile.ProtoReflect.Descriptor instead.
func (*CompanyProfile) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{2}
}

func (x *CompanyProfile) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompanyProfile) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *CompanyProfile) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *CompanyProfile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CompanyProfile) GetEinNumbers() []string {
	if x != nil {
		return x.EinNumbers
	}
	return nil
}

func (x *CompanyProfile) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *CompanyProfile) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *CompanyProfile) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *CompanyProfile) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// EmployerBenefits is used to represent a benefit plan offered by a company.
type EmployerBenefits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"` // External system identifier (integration)
	// The type of benefit plan. Possible values include: MEDICAL, HEALTH_SAVINGS, INSURANCE, RETIREMENT, OTHER.
	// In cases where there is no clear mapping, the original value passed through will be returned.
	BenefitPlanType BenefitPlanType `protobuf:"varint,3,opt,name=benefit_plan_type,json=benefitPlanType,proto3,enum=accounting_service.v1.BenefitPlanType" json:"benefit_plan_type,omitempty"` // Type of benefit plan, e.g., "MEDICAL"
	// The employer benefit's name - typically the carrier or network name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"` // Name of the benefit plan
	// The employer benefit's description.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"` // Description of the plan
	// The employer benefit's deduction code.
	DeductionCode string `protobuf:"bytes,6,opt,name=deduction_code,json=deductionCode,proto3" json:"deduction_code,omitempty"` // Code for payroll deduction
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"` // Flag for deletion status
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                        // Creation date in ISO 8601 format
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Last modification date in ISO 8601 format
	// The id of the record as seen on the merge platform
	MergeAccountId string `protobuf:"bytes,10,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"` // Merge record UUID
	// The employee benefits tied to this provided record
	EmployeeBenefits []*EmployeeBenefits `protobuf:"bytes,11,rep,name=employee_benefits,json=employeeBenefits,proto3" json:"employee_benefits,omitempty"`
}

func (x *EmployerBenefits) Reset() {
	*x = EmployerBenefits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployerBenefits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployerBenefits) ProtoMessage() {}

func (x *EmployerBenefits) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployerBenefits.ProtoReflect.Descriptor instead.
func (*EmployerBenefits) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{3}
}

func (x *EmployerBenefits) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployerBenefits) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *EmployerBenefits) GetBenefitPlanType() BenefitPlanType {
	if x != nil {
		return x.BenefitPlanType
	}
	return BenefitPlanType_BENEFIT_PLAN_TYPE_UNSPECIFIED
}

func (x *EmployerBenefits) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmployerBenefits) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EmployerBenefits) GetDeductionCode() string {
	if x != nil {
		return x.DeductionCode
	}
	return ""
}

func (x *EmployerBenefits) GetRemoteWasDeleted() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return nil
}

func (x *EmployerBenefits) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EmployerBenefits) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *EmployerBenefits) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *EmployerBenefits) GetEmployeeBenefits() []*EmployeeBenefits {
	if x != nil {
		return x.EmployeeBenefits
	}
	return nil
}

// The Employee object is used to represent any person who has been employed by a company.
type Employee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The employee's number
	EmployeeNumber string `protobuf:"bytes,3,opt,name=employee_number,json=employeeNumber,proto3" json:"employee_number,omitempty"`
	// The ID of the employee's company.
	CompanyId string `protobuf:"bytes,4,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// The employee's first name.
	FirstName string `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The employee's last name.
	LastName string `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The employee's preferred name.
	EmployeesPreferredName string `protobuf:"bytes,7,opt,name=employees_preferred_name,json=employeesPreferredName,proto3" json:"employees_preferred_name,omitempty"`
	// The employee's full name, to use for display purposes.
	// If a preferred first name is available, the full name
	// will include the preferred first name
	DisplayFullName string `protobuf:"bytes,8,opt,name=display_full_name,json=displayFullName,proto3" json:"display_full_name,omitempty"`
	// The employee's username that appears in the remote UI.
	EmployeeUserNameAsSeenInRemoteUi string `protobuf:"bytes,9,opt,name=employee_user_name_as_seen_in_remote_ui,json=employeeUserNameAsSeenInRemoteUi,proto3" json:"employee_user_name_as_seen_in_remote_ui,omitempty"`
	// The employee's work email.
	WorkEmail string `protobuf:"bytes,10,opt,name=work_email,json=workEmail,proto3" json:"work_email,omitempty"`
	// the employee's personal email
	PersonalEmail string `protobuf:"bytes,11,opt,name=personal_email,json=personalEmail,proto3" json:"personal_email,omitempty"`
	// The employee's mobile phone number.
	MobilePhoneNumber string `protobuf:"bytes,12,opt,name=mobile_phone_number,json=mobilePhoneNumber,proto3" json:"mobile_phone_number,omitempty"`
	// The employee's various position at the company
	Employments []*EmployeeJobPositionAtCompany `protobuf:"bytes,13,rep,name=employments,proto3" json:"employments,omitempty"`
	// the employment type
	EmploymentType string `protobuf:"bytes,14,opt,name=employment_type,json=employmentType,proto3" json:"employment_type,omitempty"` // UUID fields
	// the employee's home location
	HomeLocation *LocationAddress `protobuf:"bytes,15,opt,name=home_location,json=homeLocation,proto3" json:"home_location,omitempty"`
	// the employee's work location
	WorkLocation *LocationAddress `protobuf:"bytes,16,opt,name=work_location,json=workLocation,proto3" json:"work_location,omitempty"`
	// the employee's manager
	Manager *Employee `protobuf:"bytes,17,opt,name=manager,proto3" json:"manager,omitempty"`
	// the employee's pay group
	Group *Group `protobuf:"bytes,18,opt,name=group,proto3" json:"group,omitempty"`
	// Other fields
	// the employee's social security number
	Ssn string `protobuf:"bytes,20,opt,name=ssn,proto3" json:"ssn,omitempty"`
	// The employee's gender. Possible values include: MALE, FEMALE, NON-BINARY, OTHER, PREFER_NOT_TO_DISCLOSE.
	// In cases where there is no clear mapping, the original value passed through will be returned.
	Gender Gender `protobuf:"varint,21,opt,name=gender,proto3,enum=accounting_service.v1.Gender" json:"gender,omitempty"`
	// The employee's ethnicity. Possible values include: AMERICAN_INDIAN_OR_ALASKA_NATIVE, ASIAN_OR_INDIAN_SUBCONTINENT,
	// BLACK_OR_AFRICAN_AMERICAN, HISPANIC_OR_LATINO, NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER,
	// TWO_OR_MORE_RACES, WHITE, PREFER_NOT_TO_DISCLOSE. In cases where there is no clear mapping, the original value passed through will be returned.
	Ethnicity Ethnicity `protobuf:"varint,22,opt,name=ethnicity,proto3,enum=accounting_service.v1.Ethnicity" json:"ethnicity,omitempty"`
	// The employee's filing status as related to marital status. Possible values include: SINGLE, MARRIED_FILING_JOINTLY,
	// MARRIED_FILING_SEPARATELY, HEAD_OF_HOUSEHOLD, QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD.
	// In cases where there is no clear mapping, the original value passed through will be returned.
	MaritalStatus MaritalStatus `protobuf:"varint,23,opt,name=marital_status,json=maritalStatus,proto3,enum=accounting_service.v1.MaritalStatus" json:"marital_status,omitempty"`
	// The employee's date of birth.
	DateOfBirth string `protobuf:"bytes,24,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"` // Use string for ISO 8601 datetime
	// The date that the employee started working.
	// If an employee was rehired, the most recent start date will be returned.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// When the third party's employee was created.
	RemoteCreatedAt *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"`
	// The employment status of the employee. Possible values include: ACTIVE, PENDING, INACTIVE.
	// In cases where there is no clear mapping, the original value passed through will be returned.
	EmploymentStatus EmploymentStatus `protobuf:"varint,28,opt,name=employment_status,json=employmentStatus,proto3,enum=accounting_service.v1.EmploymentStatus" json:"employment_status,omitempty"`
	// The employee's termination date.
	TerminationDate *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=termination_date,json=terminationDate,proto3" json:"termination_date,omitempty"`
	// The URL of the employee's avatar image.
	Avatar string `protobuf:"bytes,30,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// The bank account information for an employee
	BankAccounts []*BankInfo `protobuf:"bytes,31,rep,name=bank_accounts,json=bankAccounts,proto3" json:"bank_accounts,omitempty"`
	// The dependents of the employee
	Dependents []*Dependents `protobuf:"bytes,32,rep,name=dependents,proto3" json:"dependents,omitempty"`
	// Represent an employee's pay statement for a specific payroll run.
	PayrollRuns []*EmployeePayrollRun `protobuf:"bytes,33,rep,name=payroll_runs,json=payrollRuns,proto3" json:"payroll_runs,omitempty"`
	// The time off balance for an employee
	PayTimeOffBalance *EmployeTimeOffBalance `protobuf:"bytes,34,opt,name=pay_time_off_balance,json=payTimeOffBalance,proto3" json:"pay_time_off_balance,omitempty"`
	// the benefits associated with the employee.
	Benefits       []*EmployeeBenefits    `protobuf:"bytes,35,rep,name=benefits,proto3" json:"benefits,omitempty"`
	MergeAccountId string                 `protobuf:"bytes,36,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"` // Merge record UUID
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,37,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,38,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	RemoteWasDeleted bool                   `protobuf:"varint,39,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
}

func (x *Employee) Reset() {
	*x = Employee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Employee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Employee) ProtoMessage() {}

func (x *Employee) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Employee.ProtoReflect.Descriptor instead.
func (*Employee) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{4}
}

func (x *Employee) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Employee) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Employee) GetEmployeeNumber() string {
	if x != nil {
		return x.EmployeeNumber
	}
	return ""
}

func (x *Employee) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Employee) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Employee) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Employee) GetEmployeesPreferredName() string {
	if x != nil {
		return x.EmployeesPreferredName
	}
	return ""
}

func (x *Employee) GetDisplayFullName() string {
	if x != nil {
		return x.DisplayFullName
	}
	return ""
}

func (x *Employee) GetEmployeeUserNameAsSeenInRemoteUi() string {
	if x != nil {
		return x.EmployeeUserNameAsSeenInRemoteUi
	}
	return ""
}

func (x *Employee) GetWorkEmail() string {
	if x != nil {
		return x.WorkEmail
	}
	return ""
}

func (x *Employee) GetPersonalEmail() string {
	if x != nil {
		return x.PersonalEmail
	}
	return ""
}

func (x *Employee) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *Employee) GetEmployments() []*EmployeeJobPositionAtCompany {
	if x != nil {
		return x.Employments
	}
	return nil
}

func (x *Employee) GetEmploymentType() string {
	if x != nil {
		return x.EmploymentType
	}
	return ""
}

func (x *Employee) GetHomeLocation() *LocationAddress {
	if x != nil {
		return x.HomeLocation
	}
	return nil
}

func (x *Employee) GetWorkLocation() *LocationAddress {
	if x != nil {
		return x.WorkLocation
	}
	return nil
}

func (x *Employee) GetManager() *Employee {
	if x != nil {
		return x.Manager
	}
	return nil
}

func (x *Employee) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Employee) GetSsn() string {
	if x != nil {
		return x.Ssn
	}
	return ""
}

func (x *Employee) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *Employee) GetEthnicity() Ethnicity {
	if x != nil {
		return x.Ethnicity
	}
	return Ethnicity_ETHNICITY_UNSPECIFIED
}

func (x *Employee) GetMaritalStatus() MaritalStatus {
	if x != nil {
		return x.MaritalStatus
	}
	return MaritalStatus_MARITAL_STATUS_UNSPECIFIED
}

func (x *Employee) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *Employee) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Employee) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *Employee) GetEmploymentStatus() EmploymentStatus {
	if x != nil {
		return x.EmploymentStatus
	}
	return EmploymentStatus_EMPLOYMENT_STATUS_UNSPECIFIED
}

func (x *Employee) GetTerminationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TerminationDate
	}
	return nil
}

func (x *Employee) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Employee) GetBankAccounts() []*BankInfo {
	if x != nil {
		return x.BankAccounts
	}
	return nil
}

func (x *Employee) GetDependents() []*Dependents {
	if x != nil {
		return x.Dependents
	}
	return nil
}

func (x *Employee) GetPayrollRuns() []*EmployeePayrollRun {
	if x != nil {
		return x.PayrollRuns
	}
	return nil
}

func (x *Employee) GetPayTimeOffBalance() *EmployeTimeOffBalance {
	if x != nil {
		return x.PayTimeOffBalance
	}
	return nil
}

func (x *Employee) GetBenefits() []*EmployeeBenefits {
	if x != nil {
		return x.Benefits
	}
	return nil
}

func (x *Employee) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *Employee) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Employee) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Employee) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

// The Benefit object is used to represent a benefit that an employee has enrolled in.
type EmployeeBenefits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The name of the benefit provider.
	ProviderName string `protobuf:"bytes,3,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// The ID of the employee.
	EmployeeMergeAccountId string `protobuf:"bytes,4,opt,name=employee_merge_account_id,json=employeeMergeAccountId,proto3" json:"employee_merge_account_id,omitempty"`
	// The ID of the benefit plan.
	BenefitPlanMergeAccountId string `protobuf:"bytes,5,opt,name=benefit_plan_merge_account_id,json=benefitPlanMergeAccountId,proto3" json:"benefit_plan_merge_account_id,omitempty"`
	// The employee's contribution.
	EmployeeContribution uint64 `protobuf:"varint,6,opt,name=employee_contribution,json=employeeContribution,proto3" json:"employee_contribution,omitempty"`
	// The company's contribution.
	CompanyContribution uint64 `protobuf:"varint,7,opt,name=company_contribution,json=companyContribution,proto3" json:"company_contribution,omitempty"`
	// The day and time the benefit started.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// The day and time the benefit ended.
	EndDate *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool                   `protobuf:"varint,10,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// This it the id of the record as seeon on the merge platform
	MergeAccountId string `protobuf:"bytes,13,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *EmployeeBenefits) Reset() {
	*x = EmployeeBenefits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeBenefits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeBenefits) ProtoMessage() {}

func (x *EmployeeBenefits) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeBenefits.ProtoReflect.Descriptor instead.
func (*EmployeeBenefits) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{5}
}

func (x *EmployeeBenefits) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployeeBenefits) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *EmployeeBenefits) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *EmployeeBenefits) GetEmployeeMergeAccountId() string {
	if x != nil {
		return x.EmployeeMergeAccountId
	}
	return ""
}

func (x *EmployeeBenefits) GetBenefitPlanMergeAccountId() string {
	if x != nil {
		return x.BenefitPlanMergeAccountId
	}
	return ""
}

func (x *EmployeeBenefits) GetEmployeeContribution() uint64 {
	if x != nil {
		return x.EmployeeContribution
	}
	return 0
}

func (x *EmployeeBenefits) GetCompanyContribution() uint64 {
	if x != nil {
		return x.CompanyContribution
	}
	return 0
}

func (x *EmployeeBenefits) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *EmployeeBenefits) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *EmployeeBenefits) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *EmployeeBenefits) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EmployeeBenefits) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *EmployeeBenefits) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The EmployerPayrollRun object is used to represent a group of pay statements for a specific pay schedule.
type EmployerPayrollRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The state of the payroll run Possible values include: PAID, DRAFT, APPROVED, FAILED, CLOSED.
	// In cases where there is no clear mapping, the original value passed through will be returned.
	RunState PayrollRunState `protobuf:"varint,3,opt,name=run_state,json=runState,proto3,enum=accounting_service.v1.PayrollRunState" json:"run_state,omitempty"`
	// The type of the payroll run Possible values include: REGULAR, OFF_CYCLE,
	// CORRECTION, TERMINATION, SIGN_ON_BONUS. In cases where there is no clear mapping, the original value passed through will be returned.
	RunType PayrollRunType `protobuf:"varint,4,opt,name=run_type,json=runType,proto3,enum=accounting_service.v1.PayrollRunType" json:"run_type,omitempty"`
	// The day and time the payroll run started.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// The day and time the payroll run ended.
	EndDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// The day and time the payroll run was checked.
	CheckDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=check_date,json=checkDate,proto3" json:"check_date,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform
	RemoteWasDeleted bool `protobuf:"varint,8,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was created by Merge
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// The set of payroll records for the payroll run
	PayrollRuns []*EmployeePayrollRun `protobuf:"bytes,11,rep,name=payroll_runs,json=payrollRuns,proto3" json:"payroll_runs,omitempty"`
}

func (x *EmployerPayrollRun) Reset() {
	*x = EmployerPayrollRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployerPayrollRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployerPayrollRun) ProtoMessage() {}

func (x *EmployerPayrollRun) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployerPayrollRun.ProtoReflect.Descriptor instead.
func (*EmployerPayrollRun) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{6}
}

func (x *EmployerPayrollRun) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployerPayrollRun) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *EmployerPayrollRun) GetRunState() PayrollRunState {
	if x != nil {
		return x.RunState
	}
	return PayrollRunState_PAYROLL_RUN_STATE_UNSPECIFIED
}

func (x *EmployerPayrollRun) GetRunType() PayrollRunType {
	if x != nil {
		return x.RunType
	}
	return PayrollRunType_PAYROLL_RUN_TYPE_UNSPECIFIED
}

func (x *EmployerPayrollRun) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *EmployerPayrollRun) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *EmployerPayrollRun) GetCheckDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CheckDate
	}
	return nil
}

func (x *EmployerPayrollRun) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *EmployerPayrollRun) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EmployerPayrollRun) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *EmployerPayrollRun) GetPayrollRuns() []*EmployeePayrollRun {
	if x != nil {
		return x.PayrollRuns
	}
	return nil
}

// The Employment object is used to represent a job position at a company.
// NOTE: When there is a change in pay or title, integrations with historical
// data will create new Employment objects while integrations without
// historical data will update existing ones.
type EmployeeJobPositionAtCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The job title
	JobTitle string `protobuf:"bytes,3,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`
	// the pay rate
	PayRate float64 `protobuf:"fixed64,4,opt,name=pay_rate,json=payRate,proto3" json:"pay_rate,omitempty"`
	// the pay period
	PayPeriod PayPeriod `protobuf:"varint,5,opt,name=pay_period,json=payPeriod,proto3,enum=accounting_service.v1.PayPeriod" json:"pay_period,omitempty"`
	// the pay frequency
	PayFrequency PayFrequency `protobuf:"varint,6,opt,name=pay_frequency,json=payFrequency,proto3,enum=accounting_service.v1.PayFrequency" json:"pay_frequency,omitempty"`
	// the pay currency
	PayCurrency string `protobuf:"bytes,7,opt,name=pay_currency,json=payCurrency,proto3" json:"pay_currency,omitempty"`
	// the positions flsa status
	FlsaStatus FlsaStatus `protobuf:"varint,8,opt,name=flsa_status,json=flsaStatus,proto3,enum=accounting_service.v1.FlsaStatus" json:"flsa_status,omitempty"`
	// the positions effective date
	EffectiveDate *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool                   `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// This is the record id as seen on merge
	MergeAccountId string `protobuf:"bytes,15,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *EmployeeJobPositionAtCompany) Reset() {
	*x = EmployeeJobPositionAtCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeJobPositionAtCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeJobPositionAtCompany) ProtoMessage() {}

func (x *EmployeeJobPositionAtCompany) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeJobPositionAtCompany.ProtoReflect.Descriptor instead.
func (*EmployeeJobPositionAtCompany) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{7}
}

func (x *EmployeeJobPositionAtCompany) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployeeJobPositionAtCompany) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *EmployeeJobPositionAtCompany) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *EmployeeJobPositionAtCompany) GetPayRate() float64 {
	if x != nil {
		return x.PayRate
	}
	return 0
}

func (x *EmployeeJobPositionAtCompany) GetPayPeriod() PayPeriod {
	if x != nil {
		return x.PayPeriod
	}
	return PayPeriod_PAY_PERIOD_UNSPECIFIED
}

func (x *EmployeeJobPositionAtCompany) GetPayFrequency() PayFrequency {
	if x != nil {
		return x.PayFrequency
	}
	return PayFrequency_PAY_FREQUENCY_UNSPECIFIED
}

func (x *EmployeeJobPositionAtCompany) GetPayCurrency() string {
	if x != nil {
		return x.PayCurrency
	}
	return ""
}

func (x *EmployeeJobPositionAtCompany) GetFlsaStatus() FlsaStatus {
	if x != nil {
		return x.FlsaStatus
	}
	return FlsaStatus_FLSA_STATUS_UNSPECIFIED
}

func (x *EmployeeJobPositionAtCompany) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *EmployeeJobPositionAtCompany) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *EmployeeJobPositionAtCompany) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EmployeeJobPositionAtCompany) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *EmployeeJobPositionAtCompany) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The Group object is used to represent any subset of employees, such as PayGroup or Team. Employees can be in multiple Groups.
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// the pay group's name
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// the pay group's type
	Type PayGroupType `protobuf:"varint,5,opt,name=type,proto3,enum=accounting_service.v1.PayGroupType" json:"type,omitempty"`
	// the parent pay group merge record id
	ParentGroupMergeAccountId string `protobuf:"bytes,6,opt,name=parent_group_merge_account_id,json=parentGroupMergeAccountId,proto3" json:"parent_group_merge_account_id,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool                   `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// This is the record id as seen on merge
	MergeAccountId string `protobuf:"bytes,15,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{8}
}

func (x *Group) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Group) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetType() PayGroupType {
	if x != nil {
		return x.Type
	}
	return PayGroupType_PAY_GROUP_TYPE_UNSPECIFIED
}

func (x *Group) GetParentGroupMergeAccountId() string {
	if x != nil {
		return x.ParentGroupMergeAccountId
	}
	return ""
}

func (x *Group) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Group) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Group) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Group) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The Location object is used to represent an address that can be associated with an employee.
type LocationAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the record
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The location's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The location's phone number.
	PhoneNumber string `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Line 1 of the location's street address.
	Street_1 string `protobuf:"bytes,5,opt,name=street_1,json=street1,proto3" json:"street_1,omitempty"`
	// Line 2 of the location's street address.
	Street_2 string `protobuf:"bytes,6,opt,name=street_2,json=street2,proto3" json:"street_2,omitempty"`
	// The location's city.
	City string `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	// The location's state. Represents a region if outside of the US.
	State string `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// The location's zip code or postal code.
	ZipCode string `protobuf:"bytes,9,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	// The location's country.
	Country string `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
	// The location's type. Can be either WORK or HOME Possible values include: HOME, WORK.
	// In cases where there is no clear mapping, the original value passed through will be returned.
	LocationType LocationType `protobuf:"varint,11,opt,name=location_type,json=locationType,proto3,enum=accounting_service.v1.LocationType" json:"location_type,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool                   `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// This is the record id as seen on merge
	MergeAccountId string `protobuf:"bytes,15,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *LocationAddress) Reset() {
	*x = LocationAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationAddress) ProtoMessage() {}

func (x *LocationAddress) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationAddress.ProtoReflect.Descriptor instead.
func (*LocationAddress) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{9}
}

func (x *LocationAddress) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LocationAddress) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *LocationAddress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocationAddress) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *LocationAddress) GetStreet_1() string {
	if x != nil {
		return x.Street_1
	}
	return ""
}

func (x *LocationAddress) GetStreet_2() string {
	if x != nil {
		return x.Street_2
	}
	return ""
}

func (x *LocationAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *LocationAddress) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *LocationAddress) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *LocationAddress) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *LocationAddress) GetLocationType() LocationType {
	if x != nil {
		return x.LocationType
	}
	return LocationType_LOCATION_TYPE_UNSPECIFIED
}

func (x *LocationAddress) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *LocationAddress) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LocationAddress) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *LocationAddress) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The BankInfo object is used to represent the Bank Account information for an Employee.
type BankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The account number
	AccountNumber string `protobuf:"bytes,3,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	// The routing number
	RoutingNumber string `protobuf:"bytes,4,opt,name=routing_number,json=routingNumber,proto3" json:"routing_number,omitempty"`
	// The bank name
	BankName string `protobuf:"bytes,5,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	// The bank account type Possible values include: SAVINGS, CHECKING.
	// In cases where there is no clear mapping, the original value passed through will be returned.
	AccountType BankAccountType `protobuf:"varint,6,opt,name=account_type,json=accountType,proto3,enum=accounting_service.v1.BankAccountType" json:"account_type,omitempty"`
	// When the matching bank object was created in the third party system.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The record id as stored on the merge platform
	MergeAccountId string `protobuf:"bytes,8,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *BankInfo) Reset() {
	*x = BankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankInfo) ProtoMessage() {}

func (x *BankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankInfo.ProtoReflect.Descriptor instead.
func (*BankInfo) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{10}
}

func (x *BankInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BankInfo) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *BankInfo) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *BankInfo) GetRoutingNumber() string {
	if x != nil {
		return x.RoutingNumber
	}
	return ""
}

func (x *BankInfo) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *BankInfo) GetAccountType() BankAccountType {
	if x != nil {
		return x.AccountType
	}
	return BankAccountType_BANK_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *BankInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BankInfo) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *BankInfo) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *BankInfo) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// Dependents object is used to represent a dependent (e.g. child, spouse, domestic partner, etc) of an Employee
type Dependents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The employee's first name.
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The employee's last name.
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The employee's middle name
	MiddleName string `protobuf:"bytes,5,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	// The relationship of the dependent to the employee. Possible values include: CHILD, SPOUSE, DOMESTIC_PARTNER, OTHER.
	// In cases where there is no clear mapping, the original value passed through will be returned.
	DependentRelationshipToEmployee DependentRelationship `protobuf:"varint,6,opt,name=dependent_relationship_to_employee,json=dependentRelationshipToEmployee,proto3,enum=accounting_service.v1.DependentRelationship" json:"dependent_relationship_to_employee,omitempty"`
	// The dependent's date of birth.
	DateOfBirth *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	// the gender of the dependent
	Gender Gender `protobuf:"varint,10,opt,name=gender,proto3,enum=accounting_service.v1.Gender" json:"gender,omitempty"`
	// the phone number of the dependent
	PhoneNumber string `protobuf:"bytes,11,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// The dependents home location
	HomeLocation *LocationAddress `protobuf:"bytes,12,opt,name=home_location,json=homeLocation,proto3" json:"home_location,omitempty"`
	// Whether or not the dependent is a student
	IsStudent bool `protobuf:"varint,13,opt,name=is_student,json=isStudent,proto3" json:"is_student,omitempty"`
	// The dependents's social security number.
	Ssn string `protobuf:"bytes,14,opt,name=ssn,proto3" json:"ssn,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool `protobuf:"varint,15,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was created by Merge
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// This is the record id as seen on the merge platform
	MergeAccountId string `protobuf:"bytes,18,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *Dependents) Reset() {
	*x = Dependents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dependents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependents) ProtoMessage() {}

func (x *Dependents) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependents.ProtoReflect.Descriptor instead.
func (*Dependents) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{11}
}

func (x *Dependents) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Dependents) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Dependents) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Dependents) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Dependents) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *Dependents) GetDependentRelationshipToEmployee() DependentRelationship {
	if x != nil {
		return x.DependentRelationshipToEmployee
	}
	return DependentRelationship_DEPENDENT_RELATIONSHIP_UNSPECIFIED
}

func (x *Dependents) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *Dependents) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *Dependents) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Dependents) GetHomeLocation() *LocationAddress {
	if x != nil {
		return x.HomeLocation
	}
	return nil
}

func (x *Dependents) GetIsStudent() bool {
	if x != nil {
		return x.IsStudent
	}
	return false
}

func (x *Dependents) GetSsn() string {
	if x != nil {
		return x.Ssn
	}
	return ""
}

func (x *Dependents) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Dependents) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Dependents) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Dependents) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The EmployeePayrollRun object is used to represent an employee's pay statement for a specific payroll run.
type EmployeePayrollRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The total earnings throughout a given period for an employee before any deductions are made.
	GrossPay float64 `protobuf:"fixed64,5,opt,name=gross_pay,json=grossPay,proto3" json:"gross_pay,omitempty"`
	// The take-home pay throughout a given period for an employee after deductions are made.
	NetPay float64 `protobuf:"fixed64,6,opt,name=net_pay,json=netPay,proto3" json:"net_pay,omitempty"`
	// The day and time the payroll run started.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	CheckDate *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=check_date,json=checkDate,proto3" json:"check_date,omitempty"`
	// The Earning object is used to represent an array of different compensations
	// that an employee receives within specific wage categories
	Earnings []*Earning `protobuf:"bytes,10,rep,name=earnings,proto3" json:"earnings,omitempty"`
	// The Deduction object is used to represent an array of the wages withheld
	// from total earnings for the purpose of paying taxes.
	Deductions []*Deduction `protobuf:"bytes,11,rep,name=deductions,proto3" json:"deductions,omitempty"`
	// The Tax object is used to represent an array of the tax deductions
	// for a given employee's payroll run.
	Taxes []*Tax `protobuf:"bytes,12,rep,name=taxes,proto3" json:"taxes,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool                   `protobuf:"varint,13,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// The payroll being run.
	PayrollRunMergeAccountId string `protobuf:"bytes,16,opt,name=payroll_run_merge_account_id,json=payrollRunMergeAccountId,proto3" json:"payroll_run_merge_account_id,omitempty"`
	// The employee whose payroll is being run.
	EmployeeMergeAccountId string `protobuf:"bytes,17,opt,name=employee_merge_account_id,json=employeeMergeAccountId,proto3" json:"employee_merge_account_id,omitempty"`
	// This is the record id as seen on the merge platform
	MergeAccountId string `protobuf:"bytes,18,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *EmployeePayrollRun) Reset() {
	*x = EmployeePayrollRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeePayrollRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeePayrollRun) ProtoMessage() {}

func (x *EmployeePayrollRun) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeePayrollRun.ProtoReflect.Descriptor instead.
func (*EmployeePayrollRun) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{12}
}

func (x *EmployeePayrollRun) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployeePayrollRun) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *EmployeePayrollRun) GetGrossPay() float64 {
	if x != nil {
		return x.GrossPay
	}
	return 0
}

func (x *EmployeePayrollRun) GetNetPay() float64 {
	if x != nil {
		return x.NetPay
	}
	return 0
}

func (x *EmployeePayrollRun) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *EmployeePayrollRun) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *EmployeePayrollRun) GetCheckDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CheckDate
	}
	return nil
}

func (x *EmployeePayrollRun) GetEarnings() []*Earning {
	if x != nil {
		return x.Earnings
	}
	return nil
}

func (x *EmployeePayrollRun) GetDeductions() []*Deduction {
	if x != nil {
		return x.Deductions
	}
	return nil
}

func (x *EmployeePayrollRun) GetTaxes() []*Tax {
	if x != nil {
		return x.Taxes
	}
	return nil
}

func (x *EmployeePayrollRun) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *EmployeePayrollRun) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EmployeePayrollRun) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *EmployeePayrollRun) GetPayrollRunMergeAccountId() string {
	if x != nil {
		return x.PayrollRunMergeAccountId
	}
	return ""
}

func (x *EmployeePayrollRun) GetEmployeeMergeAccountId() string {
	if x != nil {
		return x.EmployeeMergeAccountId
	}
	return ""
}

func (x *EmployeePayrollRun) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The Earning object is used to represent an array of different compensations
// that an employee receives within specific wage categories.
type Earning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string  `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Amount   float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The type of earning. Possible values include: SALARY, REIMBURSEMENT, OVERTIME, BONUS.
	//
	//	In cases where there is no clear mapping, the original value passed through will be returned.
	Type EarningType `protobuf:"varint,4,opt,name=type,proto3,enum=accounting_service.v1.EarningType" json:"type,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool                   `protobuf:"varint,5,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// The payroll being run.
	PayrollRunMergeAccountId string `protobuf:"bytes,16,opt,name=payroll_run_merge_account_id,json=payrollRunMergeAccountId,proto3" json:"payroll_run_merge_account_id,omitempty"`
	// This is the record id as seen on the merge platform
	MergeAccountId string `protobuf:"bytes,18,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *Earning) Reset() {
	*x = Earning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Earning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Earning) ProtoMessage() {}

func (x *Earning) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Earning.ProtoReflect.Descriptor instead.
func (*Earning) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{13}
}

func (x *Earning) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Earning) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Earning) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Earning) GetType() EarningType {
	if x != nil {
		return x.Type
	}
	return EarningType_EARNING_TYPE_UNSPECIFIED
}

func (x *Earning) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Earning) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Earning) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Earning) GetPayrollRunMergeAccountId() string {
	if x != nil {
		return x.PayrollRunMergeAccountId
	}
	return ""
}

func (x *Earning) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The Deduction object is used to represent an array of the wages
// withheld from total earnings for the purpose of paying taxes.
type Deduction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The deduction's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The amount of money that is withheld from an employee's gross pay by the employee.
	EmployeeDeduction float64 `protobuf:"fixed64,4,opt,name=employee_deduction,json=employeeDeduction,proto3" json:"employee_deduction,omitempty"`
	// The amount of money that is withheld on behalf of an employee by the company.
	CompanyDeduction float64 `protobuf:"fixed64,5,opt,name=company_deduction,json=companyDeduction,proto3" json:"company_deduction,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool                   `protobuf:"varint,6,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// The payroll being run.
	PayrollRunMergeAccountId string `protobuf:"bytes,16,opt,name=payroll_run_merge_account_id,json=payrollRunMergeAccountId,proto3" json:"payroll_run_merge_account_id,omitempty"`
	// This is the record id as seen on the merge platform
	MergeAccountId string `protobuf:"bytes,18,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *Deduction) Reset() {
	*x = Deduction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deduction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deduction) ProtoMessage() {}

func (x *Deduction) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deduction.ProtoReflect.Descriptor instead.
func (*Deduction) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{14}
}

func (x *Deduction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Deduction) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Deduction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Deduction) GetEmployeeDeduction() float64 {
	if x != nil {
		return x.EmployeeDeduction
	}
	return 0
}

func (x *Deduction) GetCompanyDeduction() float64 {
	if x != nil {
		return x.CompanyDeduction
	}
	return 0
}

func (x *Deduction) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Deduction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Deduction) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Deduction) GetPayrollRunMergeAccountId() string {
	if x != nil {
		return x.PayrollRunMergeAccountId
	}
	return ""
}

func (x *Deduction) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The Tax object is used to represent an array of the tax deductions for a given employee's payroll run.
type Tax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The tax's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The tax amount.
	Amount float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Whether or not the employer is responsible for paying the tax.
	EmployerTax      bool                   `protobuf:"varint,5,opt,name=employer_tax,json=employerTax,proto3" json:"employer_tax,omitempty"`
	RemoteWasDeleted bool                   `protobuf:"varint,6,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// The payroll being run.
	PayrollRunMergeAccountId string `protobuf:"bytes,16,opt,name=payroll_run_merge_account_id,json=payrollRunMergeAccountId,proto3" json:"payroll_run_merge_account_id,omitempty"`
	// This is the record id as seen on the merge platform
	MergeAccountId string `protobuf:"bytes,18,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *Tax) Reset() {
	*x = Tax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tax) ProtoMessage() {}

func (x *Tax) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tax.ProtoReflect.Descriptor instead.
func (*Tax) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{15}
}

func (x *Tax) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tax) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Tax) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tax) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Tax) GetEmployerTax() bool {
	if x != nil {
		return x.EmployerTax
	}
	return false
}

func (x *Tax) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Tax) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Tax) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Tax) GetPayrollRunMergeAccountId() string {
	if x != nil {
		return x.PayrollRunMergeAccountId
	}
	return ""
}

func (x *Tax) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

type EmployeTimeOffBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// balance
	Balance float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
	// used
	Used float64 `protobuf:"fixed64,4,opt,name=used,proto3" json:"used,omitempty"`
	// policy type of the time off balance
	PolicyType       PolicyType             `protobuf:"varint,5,opt,name=policy_type,json=policyType,proto3,enum=accounting_service.v1.PolicyType" json:"policy_type,omitempty"`
	RemoteWasDeleted bool                   `protobuf:"varint,6,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// This is the record id as seen on the merge platform
	MergeAccountId string `protobuf:"bytes,18,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *EmployeTimeOffBalance) Reset() {
	*x = EmployeTimeOffBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeTimeOffBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeTimeOffBalance) ProtoMessage() {}

func (x *EmployeTimeOffBalance) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeTimeOffBalance.ProtoReflect.Descriptor instead.
func (*EmployeTimeOffBalance) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{16}
}

func (x *EmployeTimeOffBalance) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployeTimeOffBalance) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *EmployeTimeOffBalance) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *EmployeTimeOffBalance) GetUsed() float64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *EmployeTimeOffBalance) GetPolicyType() PolicyType {
	if x != nil {
		return x.PolicyType
	}
	return PolicyType_POLICY_TYPE_UNSPECIFIED
}

func (x *EmployeTimeOffBalance) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *EmployeTimeOffBalance) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EmployeTimeOffBalance) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *EmployeTimeOffBalance) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The TimeOff object is used to represent all employees' Time Off entries.
type TimeOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId         string                 `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Employee         *Employee              `protobuf:"bytes,3,opt,name=employee,proto3" json:"employee,omitempty"`
	Approver         *Employee              `protobuf:"bytes,4,opt,name=approver,proto3" json:"approver,omitempty"`
	Status           TimeOffStatus          `protobuf:"varint,5,opt,name=status,proto3,enum=accounting_service.v1.TimeOffStatus" json:"status,omitempty"`
	EmploymentNote   string                 `protobuf:"bytes,6,opt,name=employment_note,json=employmentNote,proto3" json:"employment_note,omitempty"`
	Units            TimeOffUnits           `protobuf:"varint,7,opt,name=units,proto3,enum=accounting_service.v1.TimeOffUnits" json:"units,omitempty"`
	Amount           float64                `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	RequestType      string                 `protobuf:"bytes,9,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	StartTime        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RemoteWasDeleted bool                   `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// This is the record id as seen on the merge platform
	MergeAccountId string `protobuf:"bytes,18,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
	// This is the record id as seen on the merge platform of the employee requesting time off
	EmployeeMergeAccountId string `protobuf:"bytes,19,opt,name=employee_merge_account_id,json=employeeMergeAccountId,proto3" json:"employee_merge_account_id,omitempty"`
	// This is the record id as seen on the merge platform of the approver
	ApproverMergeAccountId string `protobuf:"bytes,20,opt,name=approver_merge_account_id,json=approverMergeAccountId,proto3" json:"approver_merge_account_id,omitempty"`
}

func (x *TimeOff) Reset() {
	*x = TimeOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeOff) ProtoMessage() {}

func (x *TimeOff) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_payroll_database_schema_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeOff.ProtoReflect.Descriptor instead.
func (*TimeOff) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP(), []int{17}
}

func (x *TimeOff) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TimeOff) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *TimeOff) GetEmployee() *Employee {
	if x != nil {
		return x.Employee
	}
	return nil
}

func (x *TimeOff) GetApprover() *Employee {
	if x != nil {
		return x.Approver
	}
	return nil
}

func (x *TimeOff) GetStatus() TimeOffStatus {
	if x != nil {
		return x.Status
	}
	return TimeOffStatus_TIME_OFF_STATUS_UNSPECIFIED
}

func (x *TimeOff) GetEmploymentNote() string {
	if x != nil {
		return x.EmploymentNote
	}
	return ""
}

func (x *TimeOff) GetUnits() TimeOffUnits {
	if x != nil {
		return x.Units
	}
	return TimeOffUnits_TIME_OFF_UNITS_UNSPECIFIED
}

func (x *TimeOff) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TimeOff) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *TimeOff) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimeOff) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TimeOff) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *TimeOff) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TimeOff) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *TimeOff) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *TimeOff) GetEmployeeMergeAccountId() string {
	if x != nil {
		return x.EmployeeMergeAccountId
	}
	return ""
}

func (x *TimeOff) GetApproverMergeAccountId() string {
	if x != nil {
		return x.ApproverMergeAccountId
	}
	return ""
}

var File_accounting_service_v1_payroll_database_schema_proto protoreflect.FileDescriptor

var file_accounting_service_v1_payroll_database_schema_proto_rawDesc = []byte{
	0x0a, 0x33, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x22, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x06, 0x0a,
	0x18, 0x48, 0x72, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x72, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf7,
	0x02, 0x0a, 0x11, 0x48, 0x72, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48,
	0x01, 0x52, 0x0c, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12,
	0x47, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x09, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x72,
	0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a,
	0x02, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x73,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x86, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xc9, 0x04, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x11, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a,
	0x02, 0x48, 0x01, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf0, 0x10,
	0x0a, 0x08, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x27, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x5f,
	0x73, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x49,
	0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x5f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4a, 0x6f, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a,
	0x02, 0x48, 0x01, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19,
	0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42,
	0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x07, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x73, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x6e, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x52, 0x09, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x4b, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6d,
	0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x54, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x4e, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x61, 0x79, 0x72,
	0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x6a, 0x0a,
	0x14, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x66, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9,
	0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x11, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x66, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x08,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0x98, 0x05, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x80, 0x05, 0x0a, 0x12,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52,
	0x75, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x08, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x75, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x56,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x72, 0x6f,
	0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x95,
	0x05, 0x0a, 0x1c, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4a, 0x6f, 0x62, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x61,
	0x79, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x66, 0x6c, 0x73, 0x61, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x73, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x66, 0x6c, 0x73, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa0, 0x03, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x40, 0x0a, 0x1d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xb1, 0x04, 0x0a, 0x0f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x31, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x32, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x32, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xca, 0x03,
	0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x86, 0x06, 0x0a, 0x0a, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x22, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x1f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a,
	0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x68, 0x6f,
	0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x73, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57,
	0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0xac, 0x06, 0x0a, 0x12, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x64,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a,
	0x05, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x05, 0x74, 0x61, 0x78, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x61, 0x79,
	0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xa3, 0x03, 0x0a, 0x07, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c,
	0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x61,
	0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc5, 0x03, 0x0a, 0x09, 0x44, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e,
	0x0a, 0x1c, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75, 0x6e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0x9e, 0x03, 0x0a, 0x03, 0x54, 0x61, 0x78, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x54, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3e, 0x0a, 0x1c, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x75,
	0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0x93, 0x03, 0x0a, 0x15, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x66, 0x66, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xec, 0x06, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19,
	0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12,
	0x48, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x42, 0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x42, 0xab, 0x02, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x1a, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x80, 0x01, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x41, 0x49, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x3b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x14, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accounting_service_v1_payroll_database_schema_proto_rawDescOnce sync.Once
	file_accounting_service_v1_payroll_database_schema_proto_rawDescData = file_accounting_service_v1_payroll_database_schema_proto_rawDesc
)

func file_accounting_service_v1_payroll_database_schema_proto_rawDescGZIP() []byte {
	file_accounting_service_v1_payroll_database_schema_proto_rawDescOnce.Do(func() {
		file_accounting_service_v1_payroll_database_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_accounting_service_v1_payroll_database_schema_proto_rawDescData)
	})
	return file_accounting_service_v1_payroll_database_schema_proto_rawDescData
}

var file_accounting_service_v1_payroll_database_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_accounting_service_v1_payroll_database_schema_proto_goTypes = []interface{}{
	(*HrisIntegrationMergeLink)(nil),     // 0: accounting_service.v1.HrisIntegrationMergeLink
	(*HrisLinkedAccount)(nil),            // 1: accounting_service.v1.HrisLinkedAccount
	(*CompanyProfile)(nil),               // 2: accounting_service.v1.CompanyProfile
	(*EmployerBenefits)(nil),             // 3: accounting_service.v1.EmployerBenefits
	(*Employee)(nil),                     // 4: accounting_service.v1.Employee
	(*EmployeeBenefits)(nil),             // 5: accounting_service.v1.EmployeeBenefits
	(*EmployerPayrollRun)(nil),           // 6: accounting_service.v1.EmployerPayrollRun
	(*EmployeeJobPositionAtCompany)(nil), // 7: accounting_service.v1.EmployeeJobPositionAtCompany
	(*Group)(nil),                        // 8: accounting_service.v1.Group
	(*LocationAddress)(nil),              // 9: accounting_service.v1.LocationAddress
	(*BankInfo)(nil),                     // 10: accounting_service.v1.BankInfo
	(*Dependents)(nil),                   // 11: accounting_service.v1.Dependents
	(*EmployeePayrollRun)(nil),           // 12: accounting_service.v1.EmployeePayrollRun
	(*Earning)(nil),                      // 13: accounting_service.v1.Earning
	(*Deduction)(nil),                    // 14: accounting_service.v1.Deduction
	(*Tax)(nil),                          // 15: accounting_service.v1.Tax
	(*EmployeTimeOffBalance)(nil),        // 16: accounting_service.v1.EmployeTimeOffBalance
	(*TimeOff)(nil),                      // 17: accounting_service.v1.TimeOff
	(*MergeLinkedAccountToken)(nil),      // 18: accounting_service.v1.MergeLinkedAccountToken
	(*timestamppb.Timestamp)(nil),        // 19: google.protobuf.Timestamp
	(BenefitPlanType)(0),                 // 20: accounting_service.v1.BenefitPlanType
	(Gender)(0),                          // 21: accounting_service.v1.Gender
	(Ethnicity)(0),                       // 22: accounting_service.v1.Ethnicity
	(MaritalStatus)(0),                   // 23: accounting_service.v1.MaritalStatus
	(EmploymentStatus)(0),                // 24: accounting_service.v1.EmploymentStatus
	(PayrollRunState)(0),                 // 25: accounting_service.v1.PayrollRunState
	(PayrollRunType)(0),                  // 26: accounting_service.v1.PayrollRunType
	(PayPeriod)(0),                       // 27: accounting_service.v1.PayPeriod
	(PayFrequency)(0),                    // 28: accounting_service.v1.PayFrequency
	(FlsaStatus)(0),                      // 29: accounting_service.v1.FlsaStatus
	(PayGroupType)(0),                    // 30: accounting_service.v1.PayGroupType
	(LocationType)(0),                    // 31: accounting_service.v1.LocationType
	(BankAccountType)(0),                 // 32: accounting_service.v1.BankAccountType
	(DependentRelationship)(0),           // 33: accounting_service.v1.DependentRelationship
	(EarningType)(0),                     // 34: accounting_service.v1.EarningType
	(PolicyType)(0),                      // 35: accounting_service.v1.PolicyType
	(TimeOffStatus)(0),                   // 36: accounting_service.v1.TimeOffStatus
	(TimeOffUnits)(0),                    // 37: accounting_service.v1.TimeOffUnits
}
var file_accounting_service_v1_payroll_database_schema_proto_depIdxs = []int32{
	18, // 0: accounting_service.v1.HrisIntegrationMergeLink.token:type_name -> accounting_service.v1.MergeLinkedAccountToken
	1,  // 1: accounting_service.v1.HrisIntegrationMergeLink.account:type_name -> accounting_service.v1.HrisLinkedAccount
	19, // 2: accounting_service.v1.HrisIntegrationMergeLink.last_modified_at:type_name -> google.protobuf.Timestamp
	2,  // 3: accounting_service.v1.HrisLinkedAccount.profile:type_name -> accounting_service.v1.CompanyProfile
	3,  // 4: accounting_service.v1.HrisLinkedAccount.benefit_plans:type_name -> accounting_service.v1.EmployerBenefits
	4,  // 5: accounting_service.v1.HrisLinkedAccount.employees:type_name -> accounting_service.v1.Employee
	6,  // 6: accounting_service.v1.HrisLinkedAccount.payroll_runs:type_name -> accounting_service.v1.EmployerPayrollRun
	19, // 7: accounting_service.v1.CompanyProfile.modified_at:type_name -> google.protobuf.Timestamp
	19, // 8: accounting_service.v1.CompanyProfile.last_updated_at:type_name -> google.protobuf.Timestamp
	20, // 9: accounting_service.v1.EmployerBenefits.benefit_plan_type:type_name -> accounting_service.v1.BenefitPlanType
	19, // 10: accounting_service.v1.EmployerBenefits.remote_was_deleted:type_name -> google.protobuf.Timestamp
	19, // 11: accounting_service.v1.EmployerBenefits.created_at:type_name -> google.protobuf.Timestamp
	19, // 12: accounting_service.v1.EmployerBenefits.modified_at:type_name -> google.protobuf.Timestamp
	5,  // 13: accounting_service.v1.EmployerBenefits.employee_benefits:type_name -> accounting_service.v1.EmployeeBenefits
	7,  // 14: accounting_service.v1.Employee.employments:type_name -> accounting_service.v1.EmployeeJobPositionAtCompany
	9,  // 15: accounting_service.v1.Employee.home_location:type_name -> accounting_service.v1.LocationAddress
	9,  // 16: accounting_service.v1.Employee.work_location:type_name -> accounting_service.v1.LocationAddress
	4,  // 17: accounting_service.v1.Employee.manager:type_name -> accounting_service.v1.Employee
	8,  // 18: accounting_service.v1.Employee.group:type_name -> accounting_service.v1.Group
	21, // 19: accounting_service.v1.Employee.gender:type_name -> accounting_service.v1.Gender
	22, // 20: accounting_service.v1.Employee.ethnicity:type_name -> accounting_service.v1.Ethnicity
	23, // 21: accounting_service.v1.Employee.marital_status:type_name -> accounting_service.v1.MaritalStatus
	19, // 22: accounting_service.v1.Employee.start_date:type_name -> google.protobuf.Timestamp
	19, // 23: accounting_service.v1.Employee.remote_created_at:type_name -> google.protobuf.Timestamp
	24, // 24: accounting_service.v1.Employee.employment_status:type_name -> accounting_service.v1.EmploymentStatus
	19, // 25: accounting_service.v1.Employee.termination_date:type_name -> google.protobuf.Timestamp
	10, // 26: accounting_service.v1.Employee.bank_accounts:type_name -> accounting_service.v1.BankInfo
	11, // 27: accounting_service.v1.Employee.dependents:type_name -> accounting_service.v1.Dependents
	12, // 28: accounting_service.v1.Employee.payroll_runs:type_name -> accounting_service.v1.EmployeePayrollRun
	16, // 29: accounting_service.v1.Employee.pay_time_off_balance:type_name -> accounting_service.v1.EmployeTimeOffBalance
	5,  // 30: accounting_service.v1.Employee.benefits:type_name -> accounting_service.v1.EmployeeBenefits
	19, // 31: accounting_service.v1.Employee.created_at:type_name -> google.protobuf.Timestamp
	19, // 32: accounting_service.v1.Employee.modified_at:type_name -> google.protobuf.Timestamp
	19, // 33: accounting_service.v1.EmployeeBenefits.start_date:type_name -> google.protobuf.Timestamp
	19, // 34: accounting_service.v1.EmployeeBenefits.end_date:type_name -> google.protobuf.Timestamp
	19, // 35: accounting_service.v1.EmployeeBenefits.created_at:type_name -> google.protobuf.Timestamp
	19, // 36: accounting_service.v1.EmployeeBenefits.modified_at:type_name -> google.protobuf.Timestamp
	25, // 37: accounting_service.v1.EmployerPayrollRun.run_state:type_name -> accounting_service.v1.PayrollRunState
	26, // 38: accounting_service.v1.EmployerPayrollRun.run_type:type_name -> accounting_service.v1.PayrollRunType
	19, // 39: accounting_service.v1.EmployerPayrollRun.start_date:type_name -> google.protobuf.Timestamp
	19, // 40: accounting_service.v1.EmployerPayrollRun.end_date:type_name -> google.protobuf.Timestamp
	19, // 41: accounting_service.v1.EmployerPayrollRun.check_date:type_name -> google.protobuf.Timestamp
	19, // 42: accounting_service.v1.EmployerPayrollRun.created_at:type_name -> google.protobuf.Timestamp
	19, // 43: accounting_service.v1.EmployerPayrollRun.modified_at:type_name -> google.protobuf.Timestamp
	12, // 44: accounting_service.v1.EmployerPayrollRun.payroll_runs:type_name -> accounting_service.v1.EmployeePayrollRun
	27, // 45: accounting_service.v1.EmployeeJobPositionAtCompany.pay_period:type_name -> accounting_service.v1.PayPeriod
	28, // 46: accounting_service.v1.EmployeeJobPositionAtCompany.pay_frequency:type_name -> accounting_service.v1.PayFrequency
	29, // 47: accounting_service.v1.EmployeeJobPositionAtCompany.flsa_status:type_name -> accounting_service.v1.FlsaStatus
	19, // 48: accounting_service.v1.EmployeeJobPositionAtCompany.effective_date:type_name -> google.protobuf.Timestamp
	19, // 49: accounting_service.v1.EmployeeJobPositionAtCompany.created_at:type_name -> google.protobuf.Timestamp
	19, // 50: accounting_service.v1.EmployeeJobPositionAtCompany.modified_at:type_name -> google.protobuf.Timestamp
	30, // 51: accounting_service.v1.Group.type:type_name -> accounting_service.v1.PayGroupType
	19, // 52: accounting_service.v1.Group.created_at:type_name -> google.protobuf.Timestamp
	19, // 53: accounting_service.v1.Group.modified_at:type_name -> google.protobuf.Timestamp
	31, // 54: accounting_service.v1.LocationAddress.location_type:type_name -> accounting_service.v1.LocationType
	19, // 55: accounting_service.v1.LocationAddress.created_at:type_name -> google.protobuf.Timestamp
	19, // 56: accounting_service.v1.LocationAddress.modified_at:type_name -> google.protobuf.Timestamp
	32, // 57: accounting_service.v1.BankInfo.account_type:type_name -> accounting_service.v1.BankAccountType
	19, // 58: accounting_service.v1.BankInfo.created_at:type_name -> google.protobuf.Timestamp
	19, // 59: accounting_service.v1.BankInfo.modified_at:type_name -> google.protobuf.Timestamp
	33, // 60: accounting_service.v1.Dependents.dependent_relationship_to_employee:type_name -> accounting_service.v1.DependentRelationship
	19, // 61: accounting_service.v1.Dependents.date_of_birth:type_name -> google.protobuf.Timestamp
	21, // 62: accounting_service.v1.Dependents.gender:type_name -> accounting_service.v1.Gender
	9,  // 63: accounting_service.v1.Dependents.home_location:type_name -> accounting_service.v1.LocationAddress
	19, // 64: accounting_service.v1.Dependents.created_at:type_name -> google.protobuf.Timestamp
	19, // 65: accounting_service.v1.Dependents.modified_at:type_name -> google.protobuf.Timestamp
	19, // 66: accounting_service.v1.EmployeePayrollRun.start_date:type_name -> google.protobuf.Timestamp
	19, // 67: accounting_service.v1.EmployeePayrollRun.end_date:type_name -> google.protobuf.Timestamp
	19, // 68: accounting_service.v1.EmployeePayrollRun.check_date:type_name -> google.protobuf.Timestamp
	13, // 69: accounting_service.v1.EmployeePayrollRun.earnings:type_name -> accounting_service.v1.Earning
	14, // 70: accounting_service.v1.EmployeePayrollRun.deductions:type_name -> accounting_service.v1.Deduction
	15, // 71: accounting_service.v1.EmployeePayrollRun.taxes:type_name -> accounting_service.v1.Tax
	19, // 72: accounting_service.v1.EmployeePayrollRun.created_at:type_name -> google.protobuf.Timestamp
	19, // 73: accounting_service.v1.EmployeePayrollRun.modified_at:type_name -> google.protobuf.Timestamp
	34, // 74: accounting_service.v1.Earning.type:type_name -> accounting_service.v1.EarningType
	19, // 75: accounting_service.v1.Earning.created_at:type_name -> google.protobuf.Timestamp
	19, // 76: accounting_service.v1.Earning.modified_at:type_name -> google.protobuf.Timestamp
	19, // 77: accounting_service.v1.Deduction.created_at:type_name -> google.protobuf.Timestamp
	19, // 78: accounting_service.v1.Deduction.modified_at:type_name -> google.protobuf.Timestamp
	19, // 79: accounting_service.v1.Tax.created_at:type_name -> google.protobuf.Timestamp
	19, // 80: accounting_service.v1.Tax.modified_at:type_name -> google.protobuf.Timestamp
	35, // 81: accounting_service.v1.EmployeTimeOffBalance.policy_type:type_name -> accounting_service.v1.PolicyType
	19, // 82: accounting_service.v1.EmployeTimeOffBalance.created_at:type_name -> google.protobuf.Timestamp
	19, // 83: accounting_service.v1.EmployeTimeOffBalance.modified_at:type_name -> google.protobuf.Timestamp
	4,  // 84: accounting_service.v1.TimeOff.employee:type_name -> accounting_service.v1.Employee
	4,  // 85: accounting_service.v1.TimeOff.approver:type_name -> accounting_service.v1.Employee
	36, // 86: accounting_service.v1.TimeOff.status:type_name -> accounting_service.v1.TimeOffStatus
	37, // 87: accounting_service.v1.TimeOff.units:type_name -> accounting_service.v1.TimeOffUnits
	19, // 88: accounting_service.v1.TimeOff.start_time:type_name -> google.protobuf.Timestamp
	19, // 89: accounting_service.v1.TimeOff.end_time:type_name -> google.protobuf.Timestamp
	19, // 90: accounting_service.v1.TimeOff.created_at:type_name -> google.protobuf.Timestamp
	19, // 91: accounting_service.v1.TimeOff.modified_at:type_name -> google.protobuf.Timestamp
	92, // [92:92] is the sub-list for method output_type
	92, // [92:92] is the sub-list for method input_type
	92, // [92:92] is the sub-list for extension type_name
	92, // [92:92] is the sub-list for extension extendee
	0,  // [0:92] is the sub-list for field type_name
}

func init() { file_accounting_service_v1_payroll_database_schema_proto_init() }
func file_accounting_service_v1_payroll_database_schema_proto_init() {
	if File_accounting_service_v1_payroll_database_schema_proto != nil {
		return
	}
	file_accounting_service_v1_enums_proto_init()
	file_accounting_service_v1_link_token_database_schema_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HrisIntegrationMergeLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HrisLinkedAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployerBenefits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Employee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeBenefits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployerPayrollRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeJobPositionAtCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dependents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeePayrollRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Earning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deduction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeTimeOffBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_payroll_database_schema_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accounting_service_v1_payroll_database_schema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accounting_service_v1_payroll_database_schema_proto_goTypes,
		DependencyIndexes: file_accounting_service_v1_payroll_database_schema_proto_depIdxs,
		MessageInfos:      file_accounting_service_v1_payroll_database_schema_proto_msgTypes,
	}.Build()
	File_accounting_service_v1_payroll_database_schema_proto = out.File
	file_accounting_service_v1_payroll_database_schema_proto_rawDesc = nil
	file_accounting_service_v1_payroll_database_schema_proto_goTypes = nil
	file_accounting_service_v1_payroll_database_schema_proto_depIdxs = nil
}
