// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: accounting_service/v1/request.proto

package accounting_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckRequestMultiError, or nil if none found.
func (m *HealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthCheckRequestMultiError(errors)
	}

	return nil
}

// HealthCheckRequestMultiError is an error wrapping multiple validation errors
// returned by HealthCheckRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckRequestMultiError) AllErrors() []error { return m }

// HealthCheckRequestValidationError is the validation error returned by
// HealthCheckRequest.Validate if the designated constraints aren't met.
type HealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckRequestValidationError) ErrorName() string {
	return "HealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckRequestValidationError{}

// Validate checks the field values on ReadynessCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadynessCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadynessCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadynessCheckRequestMultiError, or nil if none found.
func (m *ReadynessCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadynessCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadynessCheckRequestMultiError(errors)
	}

	return nil
}

// ReadynessCheckRequestMultiError is an error wrapping multiple validation
// errors returned by ReadynessCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadynessCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadynessCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadynessCheckRequestMultiError) AllErrors() []error { return m }

// ReadynessCheckRequestValidationError is the validation error returned by
// ReadynessCheckRequest.Validate if the designated constraints aren't met.
type ReadynessCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadynessCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadynessCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadynessCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadynessCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadynessCheckRequestValidationError) ErrorName() string {
	return "ReadynessCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadynessCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadynessCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadynessCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadynessCheckRequestValidationError{}

// Validate checks the field values on CreateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProfileRequestMultiError, or nil if none found.
func (m *CreateProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProfileRequestMultiError(errors)
	}

	return nil
}

// CreateProfileRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProfileRequestMultiError) AllErrors() []error { return m }

// CreateProfileRequestValidationError is the validation error returned by
// CreateProfileRequest.Validate if the designated constraints aren't met.
type CreateProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProfileRequestValidationError) ErrorName() string {
	return "CreateProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProfileRequestValidationError{}

// Validate checks the field values on ReadProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadProfileRequestMultiError, or nil if none found.
func (m *ReadProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ReadProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLinkedAccountingAccountId() <= 0 {
		err := ReadProfileRequestValidationError{
			field:  "LinkedAccountingAccountId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadProfileRequestMultiError(errors)
	}

	return nil
}

// ReadProfileRequestMultiError is an error wrapping multiple validation errors
// returned by ReadProfileRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadProfileRequestMultiError) AllErrors() []error { return m }

// ReadProfileRequestValidationError is the validation error returned by
// ReadProfileRequest.Validate if the designated constraints aren't met.
type ReadProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadProfileRequestValidationError) ErrorName() string {
	return "ReadProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadProfileRequestValidationError{}

// Validate checks the field values on DeleteProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProfileRequestMultiError, or nil if none found.
func (m *DeleteProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DeleteProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProfileRequestMultiError(errors)
	}

	return nil
}

// DeleteProfileRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProfileRequestMultiError) AllErrors() []error { return m }

// DeleteProfileRequestValidationError is the validation error returned by
// DeleteProfileRequest.Validate if the designated constraints aren't met.
type DeleteProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProfileRequestValidationError) ErrorName() string {
	return "DeleteProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProfileRequestValidationError{}

// Validate checks the field values on UpdateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileRequestMultiError, or nil if none found.
func (m *UpdateProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProfileRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateProfileRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileRequestMultiError) AllErrors() []error { return m }

// UpdateProfileRequestValidationError is the validation error returned by
// UpdateProfileRequest.Validate if the designated constraints aren't met.
type UpdateProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileRequestValidationError) ErrorName() string {
	return "UpdateProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileRequestValidationError{}

// Validate checks the field values on GetMergeLinkTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMergeLinkTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMergeLinkTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMergeLinkTokenRequestMultiError, or nil if none found.
func (m *GetMergeLinkTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMergeLinkTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetMergeLinkTokenRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := GetMergeLinkTokenRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := GetMergeLinkTokenRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMergeLinkTokenRequestMultiError(errors)
	}

	return nil
}

// GetMergeLinkTokenRequestMultiError is an error wrapping multiple validation
// errors returned by GetMergeLinkTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMergeLinkTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMergeLinkTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMergeLinkTokenRequestMultiError) AllErrors() []error { return m }

// GetMergeLinkTokenRequestValidationError is the validation error returned by
// GetMergeLinkTokenRequest.Validate if the designated constraints aren't met.
type GetMergeLinkTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMergeLinkTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMergeLinkTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMergeLinkTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMergeLinkTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMergeLinkTokenRequestValidationError) ErrorName() string {
	return "GetMergeLinkTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMergeLinkTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMergeLinkTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMergeLinkTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMergeLinkTokenRequestValidationError{}

// Validate checks the field values on
// ExchangePublicLinkTokenForAccountTokenRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExchangePublicLinkTokenForAccountTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExchangePublicLinkTokenForAccountTokenRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ExchangePublicLinkTokenForAccountTokenRequestMultiError, or nil if none found.
func (m *ExchangePublicLinkTokenForAccountTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangePublicLinkTokenForAccountTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ExchangePublicLinkTokenForAccountTokenRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PublicToken

	// no validation rules for EndUserOriginId

	// no validation rules for OrganizationName

	if len(errors) > 0 {
		return ExchangePublicLinkTokenForAccountTokenRequestMultiError(errors)
	}

	return nil
}

// ExchangePublicLinkTokenForAccountTokenRequestMultiError is an error wrapping
// multiple validation errors returned by
// ExchangePublicLinkTokenForAccountTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type ExchangePublicLinkTokenForAccountTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangePublicLinkTokenForAccountTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangePublicLinkTokenForAccountTokenRequestMultiError) AllErrors() []error { return m }

// ExchangePublicLinkTokenForAccountTokenRequestValidationError is the
// validation error returned by
// ExchangePublicLinkTokenForAccountTokenRequest.Validate if the designated
// constraints aren't met.
type ExchangePublicLinkTokenForAccountTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangePublicLinkTokenForAccountTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangePublicLinkTokenForAccountTokenRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ExchangePublicLinkTokenForAccountTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangePublicLinkTokenForAccountTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangePublicLinkTokenForAccountTokenRequestValidationError) ErrorName() string {
	return "ExchangePublicLinkTokenForAccountTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangePublicLinkTokenForAccountTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangePublicLinkTokenForAccountTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangePublicLinkTokenForAccountTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangePublicLinkTokenForAccountTokenRequestValidationError{}

// Validate checks the field values on ReadBalanceSheetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadBalanceSheetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadBalanceSheetsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadBalanceSheetsRequestMultiError, or nil if none found.
func (m *ReadBalanceSheetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadBalanceSheetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ReadBalanceSheetsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAcountingIntegrationMergeLinkId() <= 0 {
		err := ReadBalanceSheetsRequestValidationError{
			field:  "AcountingIntegrationMergeLinkId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadBalanceSheetsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadBalanceSheetsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadBalanceSheetsRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadBalanceSheetsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadBalanceSheetsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadBalanceSheetsRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() <= 0 {
		err := ReadBalanceSheetsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageNumber() <= 0 {
		err := ReadBalanceSheetsRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadBalanceSheetsRequestMultiError(errors)
	}

	return nil
}

// ReadBalanceSheetsRequestMultiError is an error wrapping multiple validation
// errors returned by ReadBalanceSheetsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadBalanceSheetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadBalanceSheetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadBalanceSheetsRequestMultiError) AllErrors() []error { return m }

// ReadBalanceSheetsRequestValidationError is the validation error returned by
// ReadBalanceSheetsRequest.Validate if the designated constraints aren't met.
type ReadBalanceSheetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadBalanceSheetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadBalanceSheetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadBalanceSheetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadBalanceSheetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadBalanceSheetsRequestValidationError) ErrorName() string {
	return "ReadBalanceSheetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadBalanceSheetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadBalanceSheetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadBalanceSheetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadBalanceSheetsRequestValidationError{}

// Validate checks the field values on ReadCashFlowStatementsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadCashFlowStatementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadCashFlowStatementsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReadCashFlowStatementsRequestMultiError, or nil if none found.
func (m *ReadCashFlowStatementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadCashFlowStatementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ReadCashFlowStatementsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAcountingIntegrationMergeLinkId() <= 0 {
		err := ReadCashFlowStatementsRequestValidationError{
			field:  "AcountingIntegrationMergeLinkId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadCashFlowStatementsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadCashFlowStatementsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadCashFlowStatementsRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadCashFlowStatementsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadCashFlowStatementsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadCashFlowStatementsRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() <= 0 {
		err := ReadCashFlowStatementsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageNumber() <= 0 {
		err := ReadCashFlowStatementsRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadCashFlowStatementsRequestMultiError(errors)
	}

	return nil
}

// ReadCashFlowStatementsRequestMultiError is an error wrapping multiple
// validation errors returned by ReadCashFlowStatementsRequest.ValidateAll()
// if the designated constraints aren't met.
type ReadCashFlowStatementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadCashFlowStatementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadCashFlowStatementsRequestMultiError) AllErrors() []error { return m }

// ReadCashFlowStatementsRequestValidationError is the validation error
// returned by ReadCashFlowStatementsRequest.Validate if the designated
// constraints aren't met.
type ReadCashFlowStatementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadCashFlowStatementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadCashFlowStatementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadCashFlowStatementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadCashFlowStatementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadCashFlowStatementsRequestValidationError) ErrorName() string {
	return "ReadCashFlowStatementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadCashFlowStatementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadCashFlowStatementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadCashFlowStatementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadCashFlowStatementsRequestValidationError{}

// Validate checks the field values on ReadIncomeStatementsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadIncomeStatementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadIncomeStatementsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadIncomeStatementsRequestMultiError, or nil if none found.
func (m *ReadIncomeStatementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadIncomeStatementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ReadIncomeStatementsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAcountingIntegrationMergeLinkId() <= 0 {
		err := ReadIncomeStatementsRequestValidationError{
			field:  "AcountingIntegrationMergeLinkId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadIncomeStatementsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadIncomeStatementsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadIncomeStatementsRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadIncomeStatementsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadIncomeStatementsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadIncomeStatementsRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() <= 0 {
		err := ReadIncomeStatementsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageNumber() <= 0 {
		err := ReadIncomeStatementsRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadIncomeStatementsRequestMultiError(errors)
	}

	return nil
}

// ReadIncomeStatementsRequestMultiError is an error wrapping multiple
// validation errors returned by ReadIncomeStatementsRequest.ValidateAll() if
// the designated constraints aren't met.
type ReadIncomeStatementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadIncomeStatementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadIncomeStatementsRequestMultiError) AllErrors() []error { return m }

// ReadIncomeStatementsRequestValidationError is the validation error returned
// by ReadIncomeStatementsRequest.Validate if the designated constraints
// aren't met.
type ReadIncomeStatementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadIncomeStatementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadIncomeStatementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadIncomeStatementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadIncomeStatementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadIncomeStatementsRequestValidationError) ErrorName() string {
	return "ReadIncomeStatementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadIncomeStatementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadIncomeStatementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadIncomeStatementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadIncomeStatementsRequestValidationError{}

// Validate checks the field values on ReadBusinessChartOfAccountsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReadBusinessChartOfAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadBusinessChartOfAccountsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReadBusinessChartOfAccountsRequestMultiError, or nil if none found.
func (m *ReadBusinessChartOfAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadBusinessChartOfAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ReadBusinessChartOfAccountsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAcountingIntegrationMergeLinkId() <= 0 {
		err := ReadBusinessChartOfAccountsRequestValidationError{
			field:  "AcountingIntegrationMergeLinkId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadBusinessChartOfAccountsRequestMultiError(errors)
	}

	return nil
}

// ReadBusinessChartOfAccountsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReadBusinessChartOfAccountsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadBusinessChartOfAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadBusinessChartOfAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadBusinessChartOfAccountsRequestMultiError) AllErrors() []error { return m }

// ReadBusinessChartOfAccountsRequestValidationError is the validation error
// returned by ReadBusinessChartOfAccountsRequest.Validate if the designated
// constraints aren't met.
type ReadBusinessChartOfAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadBusinessChartOfAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadBusinessChartOfAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadBusinessChartOfAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadBusinessChartOfAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadBusinessChartOfAccountsRequestValidationError) ErrorName() string {
	return "ReadBusinessChartOfAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadBusinessChartOfAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadBusinessChartOfAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadBusinessChartOfAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadBusinessChartOfAccountsRequestValidationError{}
