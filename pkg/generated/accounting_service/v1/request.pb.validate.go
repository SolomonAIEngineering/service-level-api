// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: accounting_service/v1/request.proto

package accounting_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckRequestMultiError, or nil if none found.
func (m *HealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthCheckRequestMultiError(errors)
	}

	return nil
}

// HealthCheckRequestMultiError is an error wrapping multiple validation errors
// returned by HealthCheckRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckRequestMultiError) AllErrors() []error { return m }

// HealthCheckRequestValidationError is the validation error returned by
// HealthCheckRequest.Validate if the designated constraints aren't met.
type HealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckRequestValidationError) ErrorName() string {
	return "HealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckRequestValidationError{}

// Validate checks the field values on ReadynessCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadynessCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadynessCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadynessCheckRequestMultiError, or nil if none found.
func (m *ReadynessCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadynessCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadynessCheckRequestMultiError(errors)
	}

	return nil
}

// ReadynessCheckRequestMultiError is an error wrapping multiple validation
// errors returned by ReadynessCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadynessCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadynessCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadynessCheckRequestMultiError) AllErrors() []error { return m }

// ReadynessCheckRequestValidationError is the validation error returned by
// ReadynessCheckRequest.Validate if the designated constraints aren't met.
type ReadynessCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadynessCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadynessCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadynessCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadynessCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadynessCheckRequestValidationError) ErrorName() string {
	return "ReadynessCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadynessCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadynessCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadynessCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadynessCheckRequestValidationError{}

// Validate checks the field values on CreateBusinessAccountingProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateBusinessAccountingProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateBusinessAccountingProfileRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateBusinessAccountingProfileRequestMultiError, or nil if none found.
func (m *CreateBusinessAccountingProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessAccountingProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateBusinessAccountingProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) != 1 {
		err := CreateBusinessAccountingProfileRequestValidationError{
			field:  "Email",
			reason: "value length must be 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetCompanyName()) != 1 {
		err := CreateBusinessAccountingProfileRequestValidationError{
			field:  "CompanyName",
			reason: "value length must be 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return CreateBusinessAccountingProfileRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessAccountingProfileRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateBusinessAccountingProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessAccountingProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessAccountingProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessAccountingProfileRequestMultiError) AllErrors() []error { return m }

// CreateBusinessAccountingProfileRequestValidationError is the validation
// error returned by CreateBusinessAccountingProfileRequest.Validate if the
// designated constraints aren't met.
type CreateBusinessAccountingProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessAccountingProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessAccountingProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessAccountingProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessAccountingProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessAccountingProfileRequestValidationError) ErrorName() string {
	return "CreateBusinessAccountingProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessAccountingProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessAccountingProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessAccountingProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessAccountingProfileRequestValidationError{}

// Validate checks the field values on GetBusinessAccountingProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessAccountingProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessAccountingProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessAccountingProfileRequestMultiError, or nil if none found.
func (m *GetBusinessAccountingProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessAccountingProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetBusinessAccountingProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBusinessAccountingProfileRequestMultiError(errors)
	}

	return nil
}

// GetBusinessAccountingProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessAccountingProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessAccountingProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessAccountingProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessAccountingProfileRequestMultiError) AllErrors() []error { return m }

// GetBusinessAccountingProfileRequestValidationError is the validation error
// returned by GetBusinessAccountingProfileRequest.Validate if the designated
// constraints aren't met.
type GetBusinessAccountingProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessAccountingProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessAccountingProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessAccountingProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessAccountingProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessAccountingProfileRequestValidationError) ErrorName() string {
	return "GetBusinessAccountingProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessAccountingProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessAccountingProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessAccountingProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessAccountingProfileRequestValidationError{}

// Validate checks the field values on DeleteBusinessAccountingProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteBusinessAccountingProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteBusinessAccountingProfileRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteBusinessAccountingProfileRequestMultiError, or nil if none found.
func (m *DeleteBusinessAccountingProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessAccountingProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DeleteBusinessAccountingProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteBusinessAccountingProfileRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessAccountingProfileRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteBusinessAccountingProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessAccountingProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessAccountingProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessAccountingProfileRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessAccountingProfileRequestValidationError is the validation
// error returned by DeleteBusinessAccountingProfileRequest.Validate if the
// designated constraints aren't met.
type DeleteBusinessAccountingProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessAccountingProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessAccountingProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessAccountingProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessAccountingProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessAccountingProfileRequestValidationError) ErrorName() string {
	return "DeleteBusinessAccountingProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessAccountingProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessAccountingProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessAccountingProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessAccountingProfileRequestValidationError{}

// Validate checks the field values on UpdateBusinessAccountingProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateBusinessAccountingProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBusinessAccountingProfileRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateBusinessAccountingProfileRequestMultiError, or nil if none found.
func (m *UpdateBusinessAccountingProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessAccountingProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessAccountingProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessAccountingProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessAccountingProfileRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessAccountingProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessAccountingProfileRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateBusinessAccountingProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessAccountingProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessAccountingProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessAccountingProfileRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessAccountingProfileRequestValidationError is the validation
// error returned by UpdateBusinessAccountingProfileRequest.Validate if the
// designated constraints aren't met.
type UpdateBusinessAccountingProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessAccountingProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessAccountingProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessAccountingProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessAccountingProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessAccountingProfileRequestValidationError) ErrorName() string {
	return "UpdateBusinessAccountingProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessAccountingProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessAccountingProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessAccountingProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessAccountingProfileRequestValidationError{}

// Validate checks the field values on MergeGetPublicLinkTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MergeGetPublicLinkTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeGetPublicLinkTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MergeGetPublicLinkTokenRequestMultiError, or nil if none found.
func (m *MergeGetPublicLinkTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeGetPublicLinkTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := MergeGetPublicLinkTokenRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := MergeGetPublicLinkTokenRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := MergeGetPublicLinkTokenRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MergeGetPublicLinkTokenRequestMultiError(errors)
	}

	return nil
}

// MergeGetPublicLinkTokenRequestMultiError is an error wrapping multiple
// validation errors returned by MergeGetPublicLinkTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type MergeGetPublicLinkTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeGetPublicLinkTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeGetPublicLinkTokenRequestMultiError) AllErrors() []error { return m }

// MergeGetPublicLinkTokenRequestValidationError is the validation error
// returned by MergeGetPublicLinkTokenRequest.Validate if the designated
// constraints aren't met.
type MergeGetPublicLinkTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeGetPublicLinkTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeGetPublicLinkTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeGetPublicLinkTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeGetPublicLinkTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeGetPublicLinkTokenRequestValidationError) ErrorName() string {
	return "MergeGetPublicLinkTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MergeGetPublicLinkTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeGetPublicLinkTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeGetPublicLinkTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeGetPublicLinkTokenRequestValidationError{}

// Validate checks the field values on
// MergeExchangePublicLinkTokenForAccountTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MergeExchangePublicLinkTokenForAccountTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MergeExchangePublicLinkTokenForAccountTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// MergeExchangePublicLinkTokenForAccountTokenRequestMultiError, or nil if
// none found.
func (m *MergeExchangePublicLinkTokenForAccountTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeExchangePublicLinkTokenForAccountTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := MergeExchangePublicLinkTokenForAccountTokenRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPublicToken()) < 1 {
		err := MergeExchangePublicLinkTokenForAccountTokenRequestValidationError{
			field:  "PublicToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndUserOriginId()) < 1 {
		err := MergeExchangePublicLinkTokenForAccountTokenRequestValidationError{
			field:  "EndUserOriginId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := MergeExchangePublicLinkTokenForAccountTokenRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MergeExchangePublicLinkTokenForAccountTokenRequestMultiError(errors)
	}

	return nil
}

// MergeExchangePublicLinkTokenForAccountTokenRequestMultiError is an error
// wrapping multiple validation errors returned by
// MergeExchangePublicLinkTokenForAccountTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type MergeExchangePublicLinkTokenForAccountTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeExchangePublicLinkTokenForAccountTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeExchangePublicLinkTokenForAccountTokenRequestMultiError) AllErrors() []error { return m }

// MergeExchangePublicLinkTokenForAccountTokenRequestValidationError is the
// validation error returned by
// MergeExchangePublicLinkTokenForAccountTokenRequest.Validate if the
// designated constraints aren't met.
type MergeExchangePublicLinkTokenForAccountTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeExchangePublicLinkTokenForAccountTokenRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e MergeExchangePublicLinkTokenForAccountTokenRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e MergeExchangePublicLinkTokenForAccountTokenRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e MergeExchangePublicLinkTokenForAccountTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeExchangePublicLinkTokenForAccountTokenRequestValidationError) ErrorName() string {
	return "MergeExchangePublicLinkTokenForAccountTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MergeExchangePublicLinkTokenForAccountTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeExchangePublicLinkTokenForAccountTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeExchangePublicLinkTokenForAccountTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeExchangePublicLinkTokenForAccountTokenRequestValidationError{}

// Validate checks the field values on GetChartOfAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChartOfAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChartOfAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChartOfAccountsRequestMultiError, or nil if none found.
func (m *GetChartOfAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChartOfAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetChartOfAccountsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLinkId() <= 0 {
		err := GetChartOfAccountsRequestValidationError{
			field:  "LinkId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetChartOfAccountsRequestMultiError(errors)
	}

	return nil
}

// GetChartOfAccountsRequestMultiError is an error wrapping multiple validation
// errors returned by GetChartOfAccountsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetChartOfAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChartOfAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChartOfAccountsRequestMultiError) AllErrors() []error { return m }

// GetChartOfAccountsRequestValidationError is the validation error returned by
// GetChartOfAccountsRequest.Validate if the designated constraints aren't met.
type GetChartOfAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChartOfAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChartOfAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChartOfAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChartOfAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChartOfAccountsRequestValidationError) ErrorName() string {
	return "GetChartOfAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChartOfAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChartOfAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChartOfAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChartOfAccountsRequestValidationError{}

// Validate checks the field values on GetChartOfAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChartOfAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChartOfAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChartOfAccountsResponseMultiError, or nil if none found.
func (m *GetChartOfAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChartOfAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChartOfAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChartOfAccountsResponseValidationError{
						field:  fmt.Sprintf("ChartOfAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChartOfAccountsResponseValidationError{
						field:  fmt.Sprintf("ChartOfAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChartOfAccountsResponseValidationError{
					field:  fmt.Sprintf("ChartOfAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChartOfAccountsResponseMultiError(errors)
	}

	return nil
}

// GetChartOfAccountsResponseMultiError is an error wrapping multiple
// validation errors returned by GetChartOfAccountsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetChartOfAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChartOfAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChartOfAccountsResponseMultiError) AllErrors() []error { return m }

// GetChartOfAccountsResponseValidationError is the validation error returned
// by GetChartOfAccountsResponse.Validate if the designated constraints aren't met.
type GetChartOfAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChartOfAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChartOfAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChartOfAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChartOfAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChartOfAccountsResponseValidationError) ErrorName() string {
	return "GetChartOfAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChartOfAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChartOfAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChartOfAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChartOfAccountsResponseValidationError{}

// Validate checks the field values on GetTransactionDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionDetailsRequestMultiError, or nil if none found.
func (m *GetTransactionDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetTransactionDetailsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLinkId() <= 0 {
		err := GetTransactionDetailsRequestValidationError{
			field:  "LinkId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTransactionDetailsRequestMultiError(errors)
	}

	return nil
}

// GetTransactionDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransactionDetailsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTransactionDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionDetailsRequestMultiError) AllErrors() []error { return m }

// GetTransactionDetailsRequestValidationError is the validation error returned
// by GetTransactionDetailsRequest.Validate if the designated constraints
// aren't met.
type GetTransactionDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionDetailsRequestValidationError) ErrorName() string {
	return "GetTransactionDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionDetailsRequestValidationError{}

// Validate checks the field values on GetTransactionDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionDetailsResponseMultiError, or nil if none found.
func (m *GetTransactionDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransactionDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionDetailsResponseValidationError{
					field:  "TransactionDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionDetailsResponseValidationError{
					field:  "TransactionDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransactionDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionDetailsResponseValidationError{
				field:  "TransactionDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionDetailsResponseMultiError(errors)
	}

	return nil
}

// GetTransactionDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by GetTransactionDetailsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTransactionDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionDetailsResponseMultiError) AllErrors() []error { return m }

// GetTransactionDetailsResponseValidationError is the validation error
// returned by GetTransactionDetailsResponse.Validate if the designated
// constraints aren't met.
type GetTransactionDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionDetailsResponseValidationError) ErrorName() string {
	return "GetTransactionDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionDetailsResponseValidationError{}

// Validate checks the field values on GetReferenceDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReferenceDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReferenceDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReferenceDetailsRequestMultiError, or nil if none found.
func (m *GetReferenceDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReferenceDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetReferenceDetailsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLinkId() <= 0 {
		err := GetReferenceDetailsRequestValidationError{
			field:  "LinkId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReferenceDetailsRequestMultiError(errors)
	}

	return nil
}

// GetReferenceDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by GetReferenceDetailsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetReferenceDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReferenceDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReferenceDetailsRequestMultiError) AllErrors() []error { return m }

// GetReferenceDetailsRequestValidationError is the validation error returned
// by GetReferenceDetailsRequest.Validate if the designated constraints aren't met.
type GetReferenceDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReferenceDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReferenceDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReferenceDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReferenceDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReferenceDetailsRequestValidationError) ErrorName() string {
	return "GetReferenceDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReferenceDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReferenceDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReferenceDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReferenceDetailsRequestValidationError{}

// Validate checks the field values on GetReferenceDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReferenceDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReferenceDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReferenceDetailsResponseMultiError, or nil if none found.
func (m *GetReferenceDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReferenceDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReferenceDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReferenceDetailsResponseValidationError{
					field:  "ReferenceDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReferenceDetailsResponseValidationError{
					field:  "ReferenceDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReferenceDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReferenceDetailsResponseValidationError{
				field:  "ReferenceDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReferenceDetailsResponseMultiError(errors)
	}

	return nil
}

// GetReferenceDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by GetReferenceDetailsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetReferenceDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReferenceDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReferenceDetailsResponseMultiError) AllErrors() []error { return m }

// GetReferenceDetailsResponseValidationError is the validation error returned
// by GetReferenceDetailsResponse.Validate if the designated constraints
// aren't met.
type GetReferenceDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReferenceDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReferenceDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReferenceDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReferenceDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReferenceDetailsResponseValidationError) ErrorName() string {
	return "GetReferenceDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReferenceDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReferenceDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReferenceDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReferenceDetailsResponseValidationError{}
