// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: accounting_service/v1/accounting_database_schema.proto

package accounting_servicev1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrackingCategory_CategoryType int32

const (
	TrackingCategory_CATEGORY_TYPE_UNSPECIFIED TrackingCategory_CategoryType = 0
	TrackingCategory_CATEGORY_TYPE_DEPARTMENT  TrackingCategory_CategoryType = 1
	TrackingCategory_CATEGORY_TYPE_CLASS       TrackingCategory_CategoryType = 2
)

// Enum value maps for TrackingCategory_CategoryType.
var (
	TrackingCategory_CategoryType_name = map[int32]string{
		0: "CATEGORY_TYPE_UNSPECIFIED",
		1: "CATEGORY_TYPE_DEPARTMENT",
		2: "CATEGORY_TYPE_CLASS",
	}
	TrackingCategory_CategoryType_value = map[string]int32{
		"CATEGORY_TYPE_UNSPECIFIED": 0,
		"CATEGORY_TYPE_DEPARTMENT":  1,
		"CATEGORY_TYPE_CLASS":       2,
	}
)

func (x TrackingCategory_CategoryType) Enum() *TrackingCategory_CategoryType {
	p := new(TrackingCategory_CategoryType)
	*p = x
	return p
}

func (x TrackingCategory_CategoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackingCategory_CategoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_accounting_service_v1_accounting_database_schema_proto_enumTypes[0].Descriptor()
}

func (TrackingCategory_CategoryType) Type() protoreflect.EnumType {
	return &file_accounting_service_v1_accounting_database_schema_proto_enumTypes[0]
}

func (x TrackingCategory_CategoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackingCategory_CategoryType.Descriptor instead.
func (TrackingCategory_CategoryType) EnumDescriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{25, 0}
}

type AccountingIntegrationMergeLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id                      uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Integration             string                   `protobuf:"bytes,2,opt,name=integration,proto3" json:"integration,omitempty"`
	IntegrationSlug         string                   `protobuf:"bytes,3,opt,name=integration_slug,json=integrationSlug,proto3" json:"integration_slug,omitempty"`
	Category                string                   `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	EndUserOriginId         string                   `protobuf:"bytes,5,opt,name=end_user_origin_id,json=endUserOriginId,proto3" json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName string                   `protobuf:"bytes,6,opt,name=end_user_organization_name,json=endUserOrganizationName,proto3" json:"end_user_organization_name,omitempty"`
	EndUserEmailAddress     string                   `protobuf:"bytes,7,opt,name=end_user_email_address,json=endUserEmailAddress,proto3" json:"end_user_email_address,omitempty"`
	Status                  string                   `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	WebhookListenerUrl      string                   `protobuf:"bytes,9,opt,name=webhook_listener_url,json=webhookListenerUrl,proto3" json:"webhook_listener_url,omitempty"`
	IsDuplicate             bool                     `protobuf:"varint,10,opt,name=is_duplicate,json=isDuplicate,proto3" json:"is_duplicate,omitempty"`
	Token                   *MergeLinkedAccountToken `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`
	IntegrationName         string                   `protobuf:"bytes,12,opt,name=integration_name,json=integrationName,proto3" json:"integration_name,omitempty"`
	IntegrationImage        string                   `protobuf:"bytes,13,opt,name=integration_image,json=integrationImage,proto3" json:"integration_image,omitempty"`
	IntegrationSquareImage  string                   `protobuf:"bytes,14,opt,name=integration_square_image,json=integrationSquareImage,proto3" json:"integration_square_image,omitempty"`
	// When you request a link token to initiate a Merge Link session, Merge determines whether to create a new linked account or modify
	// an existing linked account based on a combination of the end_user_origin_id and the category. If you want to support multiple
	// connections, you simply need to provide a different end_user_origin_id for each company.
	//
	// This approach enables you to link multiple instances of the same integration (like QuickBooks) for the same end user.
	// It also has the added security benefit of not exposing any internal end_user_origin_ids.
	Account              *LinkedAccountingAccount `protobuf:"bytes,15,opt,name=account,proto3" json:"account,omitempty"`
	MergeLinkedAccountId string                   `protobuf:"bytes,16,opt,name=merge_linked_account_id,json=mergeLinkedAccountId,proto3" json:"merge_linked_account_id,omitempty"`
	LastModifiedAt       *timestamppb.Timestamp   `protobuf:"bytes,17,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
}

func (x *AccountingIntegrationMergeLink) Reset() {
	*x = AccountingIntegrationMergeLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingIntegrationMergeLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingIntegrationMergeLink) ProtoMessage() {}

func (x *AccountingIntegrationMergeLink) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingIntegrationMergeLink.ProtoReflect.Descriptor instead.
func (*AccountingIntegrationMergeLink) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{0}
}

func (x *AccountingIntegrationMergeLink) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountingIntegrationMergeLink) GetIntegration() string {
	if x != nil {
		return x.Integration
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetIntegrationSlug() string {
	if x != nil {
		return x.IntegrationSlug
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetEndUserOriginId() string {
	if x != nil {
		return x.EndUserOriginId
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetEndUserOrganizationName() string {
	if x != nil {
		return x.EndUserOrganizationName
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetEndUserEmailAddress() string {
	if x != nil {
		return x.EndUserEmailAddress
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetWebhookListenerUrl() string {
	if x != nil {
		return x.WebhookListenerUrl
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *AccountingIntegrationMergeLink) GetToken() *MergeLinkedAccountToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *AccountingIntegrationMergeLink) GetIntegrationName() string {
	if x != nil {
		return x.IntegrationName
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetIntegrationImage() string {
	if x != nil {
		return x.IntegrationImage
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetIntegrationSquareImage() string {
	if x != nil {
		return x.IntegrationSquareImage
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetAccount() *LinkedAccountingAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AccountingIntegrationMergeLink) GetMergeLinkedAccountId() string {
	if x != nil {
		return x.MergeLinkedAccountId
	}
	return ""
}

func (x *AccountingIntegrationMergeLink) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

type LinkedAccountingAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Represent a company's attachments. a business can have many attachments
	Attachments []*AccountingAttachment `protobuf:"bytes,2,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// The CompanyInfo object is used to represent a company's information.
	CompanyInfo []*CompanyInfo `protobuf:"bytes,3,rep,name=company_info,json=companyInfo,proto3" json:"company_info,omitempty"`
	// a business can have many purchase orders
	PurchaseOrders []*PurchaseOrder `protobuf:"bytes,4,rep,name=purchase_orders,json=purchaseOrders,proto3" json:"purchase_orders,omitempty"`
	// The BalanceSheet object shows a companyâ€™s assets, liabilities, and equity. Assets should be equal to liability and equity combined. This shows the companyâ€™s financial health at a specific point in time.
	// a business can have many balance sheets
	BalanceSheets []*BalanceSheet `protobuf:"bytes,5,rep,name=balance_sheets,json=balanceSheets,proto3" json:"balance_sheets,omitempty"`
	// The CashFlowStatement object shows operating activities, investing activities, and financing activities over a period of time (month, quarter, or year).
	// a company can have many cash flow statements
	CashFlowStatements []*CashFlowStatement `protobuf:"bytes,6,rep,name=cash_flow_statements,json=cashFlowStatements,proto3" json:"cash_flow_statements,omitempty"`
	// a business can have many income statements
	IncomeStatements []*IncomeStatement `protobuf:"bytes,7,rep,name=income_statements,json=incomeStatements,proto3" json:"income_statements,omitempty"`
	// A "Business Chart of Accounts" is a structured list of a company's general ledger accounts.
	// These accounts are used to categorize every financial transaction a company makes.
	// This structure allows businesses to systematically track, manage, and report their financial activities
	ChartOfAccounts []*BusinessChartOfAccounts `protobuf:"bytes,8,rep,name=chart_of_accounts,json=chartOfAccounts,proto3" json:"chart_of_accounts,omitempty"`
	// a business can have many items
	Items []*Item `protobuf:"bytes,9,rep,name=items,proto3" json:"items,omitempty"`
	// a business can have many tax rates
	TaxRates []*TaxRate `protobuf:"bytes,10,rep,name=tax_rates,json=taxRates,proto3" json:"tax_rates,omitempty"`
	// The Contact object refers to either a supplier or a customer.
	Contacts []*Contacts `protobuf:"bytes,11,rep,name=contacts,proto3" json:"contacts,omitempty"`
	// a business can have many invoices
	Invoices []*Invoice `protobuf:"bytes,12,rep,name=invoices,proto3" json:"invoices,omitempty"`
	// a business can have many payments
	Payments []*Payment `protobuf:"bytes,13,rep,name=payments,proto3" json:"payments,omitempty"`
	// a business can have many expenses
	Expenses []*Expense `protobuf:"bytes,14,rep,name=expenses,proto3" json:"expenses,omitempty"`
	// a business can have many journal entries
	JournalEntries []*JournalEntry `protobuf:"bytes,15,rep,name=journal_entries,json=journalEntries,proto3" json:"journal_entries,omitempty"`
	// a business can have many transactions
	Transactions []*BusinessTransaction `protobuf:"bytes,16,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// a business can have many vendor credits
	VendorCredits []*VendorCredit `protobuf:"bytes,17,rep,name=vendor_credits,json=vendorCredits,proto3" json:"vendor_credits,omitempty"`
	// a business can have many credit notes
	CreditNotes []*CreditNote `protobuf:"bytes,18,rep,name=credit_notes,json=creditNotes,proto3" json:"credit_notes,omitempty"`
}

func (x *LinkedAccountingAccount) Reset() {
	*x = LinkedAccountingAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedAccountingAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedAccountingAccount) ProtoMessage() {}

func (x *LinkedAccountingAccount) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedAccountingAccount.ProtoReflect.Descriptor instead.
func (*LinkedAccountingAccount) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{1}
}

func (x *LinkedAccountingAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LinkedAccountingAccount) GetAttachments() []*AccountingAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *LinkedAccountingAccount) GetCompanyInfo() []*CompanyInfo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *LinkedAccountingAccount) GetPurchaseOrders() []*PurchaseOrder {
	if x != nil {
		return x.PurchaseOrders
	}
	return nil
}

func (x *LinkedAccountingAccount) GetBalanceSheets() []*BalanceSheet {
	if x != nil {
		return x.BalanceSheets
	}
	return nil
}

func (x *LinkedAccountingAccount) GetCashFlowStatements() []*CashFlowStatement {
	if x != nil {
		return x.CashFlowStatements
	}
	return nil
}

func (x *LinkedAccountingAccount) GetIncomeStatements() []*IncomeStatement {
	if x != nil {
		return x.IncomeStatements
	}
	return nil
}

func (x *LinkedAccountingAccount) GetChartOfAccounts() []*BusinessChartOfAccounts {
	if x != nil {
		return x.ChartOfAccounts
	}
	return nil
}

func (x *LinkedAccountingAccount) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *LinkedAccountingAccount) GetTaxRates() []*TaxRate {
	if x != nil {
		return x.TaxRates
	}
	return nil
}

func (x *LinkedAccountingAccount) GetContacts() []*Contacts {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *LinkedAccountingAccount) GetInvoices() []*Invoice {
	if x != nil {
		return x.Invoices
	}
	return nil
}

func (x *LinkedAccountingAccount) GetPayments() []*Payment {
	if x != nil {
		return x.Payments
	}
	return nil
}

func (x *LinkedAccountingAccount) GetExpenses() []*Expense {
	if x != nil {
		return x.Expenses
	}
	return nil
}

func (x *LinkedAccountingAccount) GetJournalEntries() []*JournalEntry {
	if x != nil {
		return x.JournalEntries
	}
	return nil
}

func (x *LinkedAccountingAccount) GetTransactions() []*BusinessTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *LinkedAccountingAccount) GetVendorCredits() []*VendorCredit {
	if x != nil {
		return x.VendorCredits
	}
	return nil
}

func (x *LinkedAccountingAccount) GetCreditNotes() []*CreditNote {
	if x != nil {
		return x.CreditNotes
	}
	return nil
}

// The Account object is what companies use to track transactions.
// They can be both bank accounts or a general ledger account (also called a chart of accounts).
//
// Note: a company can have a multitude of these accounts
type BusinessChartOfAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the database record's id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the account id as stored in merge-api. this is a required field
	MergeRecordId string `protobuf:"bytes,2,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	// The third-party matching id for the object. For example, this field will be the id
	// as seen in quickbooks for a sample remote connection against quickbookks
	RemoteId string `protobuf:"bytes,3,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The account's name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The account's description.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The account's broadest grouping. Possible values include: ASSET, EQUITY, EXPENSE,
	// LIABILITY, REVENUE. In cases where there is no clear mapping, the original
	// value passed through will be returned.
	Classification string `protobuf:"bytes,6,opt,name=classification,proto3" json:"classification,omitempty"`
	// The account's type is a narrower and more specific grouping within the account's classification.
	Type string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// The account's status. Possible values include: ACTIVE, PENDING, INACTIVE. In cases where there is
	//
	//	no clear mapping, the original value passed through will be returned.
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// The account's current balance.
	CurrentBalance float64 `protobuf:"fixed64,9,opt,name=current_balance,json=currentBalance,proto3" json:"current_balance,omitempty"`
	Currency       string  `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	// The account's number.
	AccountNumber string `protobuf:"bytes,11,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	// ID of the parent account.
	ParentAccountId string `protobuf:"bytes,12,opt,name=parent_account_id,json=parentAccountId,proto3" json:"parent_account_id,omitempty"`
	// The company the account belongs to.
	Company string `protobuf:"bytes,13,opt,name=company,proto3" json:"company,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool                   `protobuf:"varint,15,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *BusinessChartOfAccounts) Reset() {
	*x = BusinessChartOfAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessChartOfAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessChartOfAccounts) ProtoMessage() {}

func (x *BusinessChartOfAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessChartOfAccounts.ProtoReflect.Descriptor instead.
func (*BusinessChartOfAccounts) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{2}
}

func (x *BusinessChartOfAccounts) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BusinessChartOfAccounts) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetCurrentBalance() float64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

func (x *BusinessChartOfAccounts) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetParentAccountId() string {
	if x != nil {
		return x.ParentAccountId
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *BusinessChartOfAccounts) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *BusinessChartOfAccounts) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The CompanyAddress object is used to represent a contact's or company's address.
type CompanyAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the database record's id
	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Line 1 of the address's street.
	Street_1 string `protobuf:"bytes,3,opt,name=street_1,json=street1,proto3" json:"street_1,omitempty"`
	// Line 2 of the address's street.
	Street_2 string `protobuf:"bytes,4,opt,name=street_2,json=street2,proto3" json:"street_2,omitempty"`
	// The address's city.
	City string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	// The address's state or region.
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// country's subdivision
	CountrySubdivision string `protobuf:"bytes,7,opt,name=country_subdivision,json=countrySubdivision,proto3" json:"country_subdivision,omitempty"` // Typically, this might just be 'state' but used your field name to keep it consistent with the JSON
	// The address's country.
	Country string `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	// The address's zip code.
	ZipCode string `protobuf:"bytes,9,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp if precise time manipulation is required
}

func (x *CompanyAddress) Reset() {
	*x = CompanyAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyAddress) ProtoMessage() {}

func (x *CompanyAddress) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyAddress.ProtoReflect.Descriptor instead.
func (*CompanyAddress) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{3}
}

func (x *CompanyAddress) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompanyAddress) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CompanyAddress) GetStreet_1() string {
	if x != nil {
		return x.Street_1
	}
	return ""
}

func (x *CompanyAddress) GetStreet_2() string {
	if x != nil {
		return x.Street_2
	}
	return ""
}

func (x *CompanyAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CompanyAddress) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CompanyAddress) GetCountrySubdivision() string {
	if x != nil {
		return x.CountrySubdivision
	}
	return ""
}

func (x *CompanyAddress) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CompanyAddress) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *CompanyAddress) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The BalanceSheet object shows a companyâ€™s assets, liabilities, and equity. Assets should be equal
// to liability and equity combined.  This shows the companyâ€™s financial health at a specific point in time.
type BalanceSheet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The balance sheet's name.
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	// Company object for the given BalanceSheet object. May not necessarily be the compnay name but the
	// company reference
	Company string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	// The balance sheet's date. The balance sheet data will
	//
	//	reflect the company's financial position this point in time.
	Date *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"` // Consider using google.protobuf.Timestamp
	// The balance sheet's net assets.
	NetAssets float64 `protobuf:"fixed64,7,opt,name=net_assets,json=netAssets,proto3" json:"net_assets,omitempty"`
	// The balance sheet's total assets.
	Assets []*ReportItem `protobuf:"bytes,8,rep,name=assets,proto3" json:"assets,omitempty"`
	// The balance sheet's total liabilities.
	Liabilities []*ReportItem `protobuf:"bytes,9,rep,name=liabilities,proto3" json:"liabilities,omitempty"`
	// The balance sheet's total equity.
	Equity []*ReportItem `protobuf:"bytes,10,rep,name=equity,proto3" json:"equity,omitempty"`
	// The time that balance sheet was generated by the accounting system.
	RemoteGeneratedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=remote_generated_at,json=remoteGeneratedAt,proto3" json:"remote_generated_at,omitempty"` // Consider using google.protobuf.Timestamp
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	// the id as stored in merge
	MergeRecordId string `protobuf:"bytes,14,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	// the time the record was created at
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *BalanceSheet) Reset() {
	*x = BalanceSheet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceSheet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceSheet) ProtoMessage() {}

func (x *BalanceSheet) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceSheet.ProtoReflect.Descriptor instead.
func (*BalanceSheet) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{4}
}

func (x *BalanceSheet) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BalanceSheet) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *BalanceSheet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BalanceSheet) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BalanceSheet) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *BalanceSheet) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *BalanceSheet) GetNetAssets() float64 {
	if x != nil {
		return x.NetAssets
	}
	return 0
}

func (x *BalanceSheet) GetAssets() []*ReportItem {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *BalanceSheet) GetLiabilities() []*ReportItem {
	if x != nil {
		return x.Liabilities
	}
	return nil
}

func (x *BalanceSheet) GetEquity() []*ReportItem {
	if x != nil {
		return x.Equity
	}
	return nil
}

func (x *BalanceSheet) GetRemoteGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteGeneratedAt
	}
	return nil
}

func (x *BalanceSheet) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *BalanceSheet) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *BalanceSheet) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *BalanceSheet) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The ReportItem object is used to represent a report item for a Balance Sheet,
// Cash Flow Statement or Profit and Loss Report.
type ReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the id as stored in the third-party system
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The report item's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The report item's value.
	Value int64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// The company the report item belongs to. may not necessarily be the company name but a reference instead
	Company string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
}

func (x *ReportItem) Reset() {
	*x = ReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportItem) ProtoMessage() {}

func (x *ReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportItem.ProtoReflect.Descriptor instead.
func (*ReportItem) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{5}
}

func (x *ReportItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReportItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *ReportItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportItem) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ReportItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ReportItem) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The CashFlowStatement object shows operating activities, investing activities, and financing activities over a
// period of time (month, quarter, or year).
type CashFlowStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The cash flow statement's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The cash flow statement's currency
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	// The company the cash flow statement belongs to.
	Company string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	// The cash flow statement's start period.
	StartPeriod *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_period,json=startPeriod,proto3" json:"start_period,omitempty"` // Consider using google.protobuf.Timestamp
	// The cash flow statement's end period.
	EndPeriod *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_period,json=endPeriod,proto3" json:"end_period,omitempty"` // Consider using google.protobuf.Timestamp
	// Cash and cash equivalents at the beginning of the cash flow statement's period.
	CashAtBeginningOfPeriod float64 `protobuf:"fixed64,8,opt,name=cash_at_beginning_of_period,json=cashAtBeginningOfPeriod,proto3" json:"cash_at_beginning_of_period,omitempty"`
	// Cash and cash equivalents at the beginning of the cash flow statement's period.
	CashAtEndOfPeriod float64 `protobuf:"fixed64,9,opt,name=cash_at_end_of_period,json=cashAtEndOfPeriod,proto3" json:"cash_at_end_of_period,omitempty"`
	// Operating activities
	OperatingActivities []*ReportItem `protobuf:"bytes,10,rep,name=operating_activities,json=operatingActivities,proto3" json:"operating_activities,omitempty"`
	// Investing activities
	InvestingActivities []*ReportItem `protobuf:"bytes,11,rep,name=investing_activities,json=investingActivities,proto3" json:"investing_activities,omitempty"`
	// Financing activities
	FinancingActivities []*ReportItem `protobuf:"bytes,12,rep,name=financing_activities,json=financingActivities,proto3" json:"financing_activities,omitempty"`
	// The time that cash flow statement was generated by the accounting system.
	RemoteGeneratedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=remote_generated_at,json=remoteGeneratedAt,proto3" json:"remote_generated_at,omitempty"` // Consider using google.protobuf.Timestamp
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,14,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	// the cashflow statements id as stored in merge
	MergeRecordId string `protobuf:"bytes,16,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
}

func (x *CashFlowStatement) Reset() {
	*x = CashFlowStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashFlowStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashFlowStatement) ProtoMessage() {}

func (x *CashFlowStatement) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashFlowStatement.ProtoReflect.Descriptor instead.
func (*CashFlowStatement) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{6}
}

func (x *CashFlowStatement) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CashFlowStatement) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *CashFlowStatement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CashFlowStatement) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CashFlowStatement) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *CashFlowStatement) GetStartPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.StartPeriod
	}
	return nil
}

func (x *CashFlowStatement) GetEndPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.EndPeriod
	}
	return nil
}

func (x *CashFlowStatement) GetCashAtBeginningOfPeriod() float64 {
	if x != nil {
		return x.CashAtBeginningOfPeriod
	}
	return 0
}

func (x *CashFlowStatement) GetCashAtEndOfPeriod() float64 {
	if x != nil {
		return x.CashAtEndOfPeriod
	}
	return 0
}

func (x *CashFlowStatement) GetOperatingActivities() []*ReportItem {
	if x != nil {
		return x.OperatingActivities
	}
	return nil
}

func (x *CashFlowStatement) GetInvestingActivities() []*ReportItem {
	if x != nil {
		return x.InvestingActivities
	}
	return nil
}

func (x *CashFlowStatement) GetFinancingActivities() []*ReportItem {
	if x != nil {
		return x.FinancingActivities
	}
	return nil
}

func (x *CashFlowStatement) GetRemoteGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteGeneratedAt
	}
	return nil
}

func (x *CashFlowStatement) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *CashFlowStatement) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *CashFlowStatement) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

// The CompanyInfo object is used to represent a company's information.
type CompanyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the record in our system
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The company's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The company's legal name.
	LegalName string `protobuf:"bytes,4,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// The company's tax number.
	TaxNumber string `protobuf:"bytes,5,opt,name=tax_number,json=taxNumber,proto3" json:"tax_number,omitempty"`
	// The company's fiscal year end month.
	FiscalYearEndMonth int32 `protobuf:"varint,6,opt,name=fiscal_year_end_month,json=fiscalYearEndMonth,proto3" json:"fiscal_year_end_month,omitempty"`
	// The company's fiscal year end day.
	FiscalYearEndDay int32 `protobuf:"varint,7,opt,name=fiscal_year_end_day,json=fiscalYearEndDay,proto3" json:"fiscal_year_end_day,omitempty"`
	// The currency set in the company's accounting platform.
	Currency string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	// When the third party's company was created.
	RemoteCreatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"` // Consider using google.protobuf.Timestamp
	// The company's urls.
	Urls []string `protobuf:"bytes,10,rep,name=urls,proto3" json:"urls,omitempty"`
	// the company's addresses
	Addresses []*CompanyAddress `protobuf:"bytes,11,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// the company's phone numbers
	PhoneNumbers []string `protobuf:"bytes,12,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,13,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// the id of the record as stored in merge
	MergeRecordId string `protobuf:"bytes,15,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
}

func (x *CompanyInfo) Reset() {
	*x = CompanyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfo) ProtoMessage() {}

func (x *CompanyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfo.ProtoReflect.Descriptor instead.
func (*CompanyInfo) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{7}
}

func (x *CompanyInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompanyInfo) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *CompanyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyInfo) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *CompanyInfo) GetTaxNumber() string {
	if x != nil {
		return x.TaxNumber
	}
	return ""
}

func (x *CompanyInfo) GetFiscalYearEndMonth() int32 {
	if x != nil {
		return x.FiscalYearEndMonth
	}
	return 0
}

func (x *CompanyInfo) GetFiscalYearEndDay() int32 {
	if x != nil {
		return x.FiscalYearEndDay
	}
	return 0
}

func (x *CompanyInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CompanyInfo) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *CompanyInfo) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *CompanyInfo) GetAddresses() []*CompanyAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *CompanyInfo) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

func (x *CompanyInfo) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *CompanyInfo) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *CompanyInfo) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

// The AccountingAttachment object is used to represent a company's attachments.
type AccountingAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The attachment's name.
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// The attachment's url.
	FileUrl string `protobuf:"bytes,4,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	// The company the accounting attachment belongs to.
	Company          string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	RemoteWasDeleted bool   `protobuf:"varint,6,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp if precise time manipulation is required
	// The third-party API ID of the matching object.
	MergeRecordId string                 `protobuf:"bytes,8,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AccountingAttachment) Reset() {
	*x = AccountingAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingAttachment) ProtoMessage() {}

func (x *AccountingAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingAttachment.ProtoReflect.Descriptor instead.
func (*AccountingAttachment) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{8}
}

func (x *AccountingAttachment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountingAttachment) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *AccountingAttachment) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AccountingAttachment) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *AccountingAttachment) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *AccountingAttachment) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *AccountingAttachment) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *AccountingAttachment) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *AccountingAttachment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The Contact object refers to either a supplier or a customer.
type Contacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The contact's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Whether the contact is a supplier.
	IsSupplier bool `protobuf:"varint,4,opt,name=is_supplier,json=isSupplier,proto3" json:"is_supplier,omitempty"`
	// Whether the contact is a customer.
	IsCustomer bool `protobuf:"varint,5,opt,name=is_customer,json=isCustomer,proto3" json:"is_customer,omitempty"`
	// The contact's email address.
	EmailAddress string `protobuf:"bytes,6,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// The contact's tax number.
	TaxNumber string `protobuf:"bytes,7,opt,name=tax_number,json=taxNumber,proto3" json:"tax_number,omitempty"`
	// The contact's status
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// The currency the contact's transactions are in.
	Currency string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	// When the third party's contact was updated.
	RemoteUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"` // Consider using google.protobuf.Timestamp
	// The company the contact belongs to.
	Company string `protobuf:"bytes,11,opt,name=company,proto3" json:"company,omitempty"`
	// Address object IDs for the given Contacts object.
	AddressesIds []string `protobuf:"bytes,12,rep,name=addresses_ids,json=addressesIds,proto3" json:"addresses_ids,omitempty"` // These are IDs, not the Address structure itself
	// Phone numbers of the contact
	PhoneNumbers []string `protobuf:"bytes,13,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,14,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	// The account id as seen in merge
	MergeRecordId string `protobuf:"bytes,16,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
}

func (x *Contacts) Reset() {
	*x = Contacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contacts) ProtoMessage() {}

func (x *Contacts) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contacts.ProtoReflect.Descriptor instead.
func (*Contacts) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{9}
}

func (x *Contacts) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contacts) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Contacts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contacts) GetIsSupplier() bool {
	if x != nil {
		return x.IsSupplier
	}
	return false
}

func (x *Contacts) GetIsCustomer() bool {
	if x != nil {
		return x.IsCustomer
	}
	return false
}

func (x *Contacts) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *Contacts) GetTaxNumber() string {
	if x != nil {
		return x.TaxNumber
	}
	return ""
}

func (x *Contacts) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Contacts) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Contacts) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *Contacts) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Contacts) GetAddressesIds() []string {
	if x != nil {
		return x.AddressesIds
	}
	return nil
}

func (x *Contacts) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

func (x *Contacts) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Contacts) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Contacts) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

// A CreditNote is transaction issued to a customer, indicating a reduction or cancellation of the amount owed by the customer.
// It is most generally used as an adjustment note used to rectify errors, returns, or overpayments related to a sales transaction.
// A CreditNote can be applied to Accounts Receivable Invoices to decrease the overall amount of the Invoice.
type CreditNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the database record id as stored in our systems
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The credit note's transaction date.
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"` // Consider using google.protobuf.Timestamp
	// The credit note's status.
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The credit note's number.
	Number string `protobuf:"bytes,5,opt,name=number,proto3" json:"number,omitempty"`
	// The credit note's contact.
	Contact string `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"`
	// The company the credit note belongs to.
	Company string `protobuf:"bytes,7,opt,name=company,proto3" json:"company,omitempty"`
	// The credit note's exchange rate.
	ExchangeRate string `protobuf:"bytes,8,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Consider using double or float if this represents a number
	// The credit note's total amount.
	TotalAmount float64 `protobuf:"fixed64,9,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The amount of value remaining in the credit note that the customer can use.
	RemainingCredit    float64                `protobuf:"fixed64,10,opt,name=remaining_credit,json=remainingCredit,proto3" json:"remaining_credit,omitempty"`
	LineItems          []*CreditNoteLineItem  `protobuf:"bytes,11,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,12,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"` // These are IDs
	Currency           string                 `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	RemoteCreatedAt    *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"` // Consider using google.protobuf.Timestamp
	RemoteUpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"` // Consider using google.protobuf.Timestamp
	// Array of Payment object IDs
	PaymentIds       []string `protobuf:"bytes,16,rep,name=payment_ids,json=paymentIds,proto3" json:"payment_ids,omitempty"` // These are IDs
	RemoteWasDeleted bool     `protobuf:"varint,17,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the CreditNote was generated in.
	AccountingPeriod string                 `protobuf:"bytes,18,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	// the id as stored in merge
	MergeRecordId string                 `protobuf:"bytes,20,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CreditNote) Reset() {
	*x = CreditNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditNote) ProtoMessage() {}

func (x *CreditNote) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditNote.ProtoReflect.Descriptor instead.
func (*CreditNote) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{10}
}

func (x *CreditNote) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreditNote) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *CreditNote) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *CreditNote) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreditNote) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CreditNote) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *CreditNote) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *CreditNote) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *CreditNote) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *CreditNote) GetRemainingCredit() float64 {
	if x != nil {
		return x.RemainingCredit
	}
	return 0
}

func (x *CreditNote) GetLineItems() []*CreditNoteLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *CreditNote) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *CreditNote) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreditNote) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *CreditNote) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *CreditNote) GetPaymentIds() []string {
	if x != nil {
		return x.PaymentIds
	}
	return nil
}

func (x *CreditNote) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *CreditNote) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *CreditNote) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *CreditNote) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *CreditNote) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// CreditNoteLineItem is used to represent a credit note's line items.
type CreditNoteLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Quantity           string   `protobuf:"bytes,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	UnitPrice          string   `protobuf:"bytes,6,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`                             // Consider using double or float if this represents a number
	TaxRate            string   `protobuf:"bytes,7,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`                                   // This seems to be an ID
	TotalLineAmount    string   `protobuf:"bytes,8,opt,name=total_line_amount,json=totalLineAmount,proto3" json:"total_line_amount,omitempty"`         // Consider using double or float
	TrackingCategory   string   `protobuf:"bytes,9,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`        // This seems to be an ID
	TrackingCategories []string `protobuf:"bytes,10,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"` // These are IDs
	Account            string   `protobuf:"bytes,11,opt,name=account,proto3" json:"account,omitempty"`                                                 // This seems to be an ID
	Company            string   `protobuf:"bytes,12,opt,name=company,proto3" json:"company,omitempty"`
	RemoteId           string   `protobuf:"bytes,13,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Item               string   `protobuf:"bytes,14,opt,name=item,proto3" json:"item,omitempty"`
	RemoteWasDeleted   bool     `protobuf:"varint,17,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	Memo               string   `protobuf:"bytes,18,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *CreditNoteLineItem) Reset() {
	*x = CreditNoteLineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditNoteLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditNoteLineItem) ProtoMessage() {}

func (x *CreditNoteLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditNoteLineItem.ProtoReflect.Descriptor instead.
func (*CreditNoteLineItem) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{11}
}

func (x *CreditNoteLineItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreditNoteLineItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreditNoteLineItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreditNoteLineItem) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *CreditNoteLineItem) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *CreditNoteLineItem) GetTaxRate() string {
	if x != nil {
		return x.TaxRate
	}
	return ""
}

func (x *CreditNoteLineItem) GetTotalLineAmount() string {
	if x != nil {
		return x.TotalLineAmount
	}
	return ""
}

func (x *CreditNoteLineItem) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *CreditNoteLineItem) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *CreditNoteLineItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CreditNoteLineItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *CreditNoteLineItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *CreditNoteLineItem) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *CreditNoteLineItem) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *CreditNoteLineItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// The Expense object is used to represent a direct purchase by a business, typically made with a check, credit card, or cash.
// Each Expense object is dedicated to a grouping of expenses, with each expense recorded in the lines object.
//
// The Expense object is used also used to represent refunds to direct purchases. Refunds can be distinguished from purchases
// by the amount sign of the records. Expense objects with a negative amount are purchases and Expense objects
// with a positive amount are refunds to those purchases.
type Expense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// When the transaction occurred.
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"` // Consider using google.protobuf.Timestamp
	// When the expense was created.
	RemoteCreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"` // Consider using google.protobuf.Timestamp
	// The expense's payment account.
	Account string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// The expense's contact.
	Contact string `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"`
	// The expense's total amount.
	TotalAmount float64 `protobuf:"fixed64,7,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The expense's total amount before tax.
	SubTotal float64 `protobuf:"fixed64,8,opt,name=sub_total,json=subTotal,proto3" json:"sub_total,omitempty"`
	// The expense's total tax amount.
	TotalTaxAmount float64 `protobuf:"fixed64,9,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	// The expense's currency
	Currency string `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	// The expense's exchange rate.
	ExchangeRate string `protobuf:"bytes,11,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Consider using double or float if this represents a number
	// The company the expense belongs to.
	Company string `protobuf:"bytes,12,opt,name=company,proto3" json:"company,omitempty"`
	// The expense's private note.
	Memo string `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	// The ExpenseLine object is used to represent an expense's line items.
	Lines              []*ExpenseLine `protobuf:"bytes,14,rep,name=lines,proto3" json:"lines,omitempty"`
	TrackingCategories []string       `protobuf:"bytes,15,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"` // These are IDs
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,16,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the Expense was generated in.
	AccountingPeriod string `protobuf:"bytes,17,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	MergeRecordId string                 `protobuf:"bytes,19,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
}

func (x *Expense) Reset() {
	*x = Expense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expense) ProtoMessage() {}

func (x *Expense) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expense.ProtoReflect.Descriptor instead.
func (*Expense) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{12}
}

func (x *Expense) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Expense) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Expense) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *Expense) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *Expense) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Expense) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Expense) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Expense) GetSubTotal() float64 {
	if x != nil {
		return x.SubTotal
	}
	return 0
}

func (x *Expense) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *Expense) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Expense) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *Expense) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Expense) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Expense) GetLines() []*ExpenseLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *Expense) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *Expense) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Expense) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *Expense) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Expense) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

// The ExpenseLine object is used to represent an expense's line items.
type ExpenseLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The line's net amount.
	NetAmount          float64  `protobuf:"fixed64,2,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	TrackingCategory   string   `protobuf:"bytes,3,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`       // This seems to be an ID
	TrackingCategories []string `protobuf:"bytes,4,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"` // These are IDs
	// The company the line belongs to.
	Company string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	// The line's item.
	Item string `protobuf:"bytes,6,opt,name=item,proto3" json:"item,omitempty"` // This seems to be an ID
	// The expense's payment account.
	Account string `protobuf:"bytes,7,opt,name=account,proto3" json:"account,omitempty"`
	// The expense's contact.
	Contact string `protobuf:"bytes,8,opt,name=contact,proto3" json:"contact,omitempty"` // Optional based on provided JSON
	// The description of the item that was purchased by the company.
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// The expense line item's exchange rate.
	ExchangeRate string `protobuf:"bytes,10,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Consider using double or float if this represents a number
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,11,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The expense line item's currency
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	RemoteWasDeleted bool                   `protobuf:"varint,14,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ExpenseLine) Reset() {
	*x = ExpenseLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpenseLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpenseLine) ProtoMessage() {}

func (x *ExpenseLine) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpenseLine.ProtoReflect.Descriptor instead.
func (*ExpenseLine) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{13}
}

func (x *ExpenseLine) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExpenseLine) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *ExpenseLine) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *ExpenseLine) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *ExpenseLine) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ExpenseLine) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *ExpenseLine) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ExpenseLine) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *ExpenseLine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExpenseLine) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *ExpenseLine) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *ExpenseLine) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExpenseLine) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *ExpenseLine) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *ExpenseLine) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The IncomeStatement object is used to represent a companyâ€™s income, the cost of sales, operating expenses,
// and other non-operating expenses. The object also includes other important values like gross profit,
// gross operating profit, and net income. This represents a period of time (month, quarter, or year).
type IncomeStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The income statement's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The income statement's currency.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	// The company the income statement belongs to.
	Company string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	// The income statement's start period.
	StartPeriod *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_period,json=startPeriod,proto3" json:"start_period,omitempty"`
	// The income statement's end period.
	EndPeriod *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_period,json=endPeriod,proto3" json:"end_period,omitempty"`
	// income
	Income []*ReportItem `protobuf:"bytes,8,rep,name=income,proto3" json:"income,omitempty"`
	// cost of sales
	CostOfSales []*ReportItem `protobuf:"bytes,9,rep,name=cost_of_sales,json=costOfSales,proto3" json:"cost_of_sales,omitempty"`
	// The revenue minus the cost of sale.
	GrossProfit float64 `protobuf:"fixed64,10,opt,name=gross_profit,json=grossProfit,proto3" json:"gross_profit,omitempty"`
	// operating expenses
	OperatingExpenses []*ReportItem `protobuf:"bytes,11,rep,name=operating_expenses,json=operatingExpenses,proto3" json:"operating_expenses,omitempty"`
	// The revenue minus the operating expenses.
	NetOperatingIncome   float64       `protobuf:"fixed64,12,opt,name=net_operating_income,json=netOperatingIncome,proto3" json:"net_operating_income,omitempty"`
	NonOperatingExpenses []*ReportItem `protobuf:"bytes,13,rep,name=non_operating_expenses,json=nonOperatingExpenses,proto3" json:"non_operating_expenses,omitempty"`
	// The gross profit minus the total expenses.
	NetIncome float64 `protobuf:"fixed64,14,opt,name=net_income,json=netIncome,proto3" json:"net_income,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,15,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	MergeRecordId string                 `protobuf:"bytes,17,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *IncomeStatement) Reset() {
	*x = IncomeStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeStatement) ProtoMessage() {}

func (x *IncomeStatement) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeStatement.ProtoReflect.Descriptor instead.
func (*IncomeStatement) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{14}
}

func (x *IncomeStatement) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IncomeStatement) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *IncomeStatement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IncomeStatement) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *IncomeStatement) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *IncomeStatement) GetStartPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.StartPeriod
	}
	return nil
}

func (x *IncomeStatement) GetEndPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.EndPeriod
	}
	return nil
}

func (x *IncomeStatement) GetIncome() []*ReportItem {
	if x != nil {
		return x.Income
	}
	return nil
}

func (x *IncomeStatement) GetCostOfSales() []*ReportItem {
	if x != nil {
		return x.CostOfSales
	}
	return nil
}

func (x *IncomeStatement) GetGrossProfit() float64 {
	if x != nil {
		return x.GrossProfit
	}
	return 0
}

func (x *IncomeStatement) GetOperatingExpenses() []*ReportItem {
	if x != nil {
		return x.OperatingExpenses
	}
	return nil
}

func (x *IncomeStatement) GetNetOperatingIncome() float64 {
	if x != nil {
		return x.NetOperatingIncome
	}
	return 0
}

func (x *IncomeStatement) GetNonOperatingExpenses() []*ReportItem {
	if x != nil {
		return x.NonOperatingExpenses
	}
	return nil
}

func (x *IncomeStatement) GetNetIncome() float64 {
	if x != nil {
		return x.NetIncome
	}
	return 0
}

func (x *IncomeStatement) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *IncomeStatement) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *IncomeStatement) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *IncomeStatement) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The Invoice object represents an itemized record of goods and/or services sold to a customer.
type Invoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether the invoice is an accounts receivable or accounts payable
	//
	//	If type is accounts_payable, the invoice is a bill. If type is
	//	accounts_receivable, it is an invoice. Possible values include: ACCOUNTS_RECEIVABLE, ACCOUNTS_PAYABLE.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The invoice's contact.
	Contact string `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
	// The invoice's number.
	Number string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// The invoice's issue date.
	IssueDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	// The invoice's due date.
	DueDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	// The invoice's paid date.
	PaidOnDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=paid_on_date,json=paidOnDate,proto3" json:"paid_on_date,omitempty"`
	// The invoice's private note.
	Memo string `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`
	// The company the invoice belongs to.
	Company string `protobuf:"bytes,9,opt,name=company,proto3" json:"company,omitempty"`
	// The invoice's currency
	Currency string `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	// The invoice's exchange rate.
	ExchangeRate string `protobuf:"bytes,11,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// The total discounts applied to the total cost.
	TotalDiscount float32 `protobuf:"fixed32,12,opt,name=total_discount,json=totalDiscount,proto3" json:"total_discount,omitempty"`
	// The total amount being paid before taxes.
	SubTotal float32 `protobuf:"fixed32,13,opt,name=sub_total,json=subTotal,proto3" json:"sub_total,omitempty"`
	Status   string  `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// The total amount being paid in taxes.
	TotalTaxAmount float32 `protobuf:"fixed32,15,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	// The invoice's total amount.
	TotalAmount float32 `protobuf:"fixed32,16,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The invoice's remaining balance.
	Balance float32 `protobuf:"fixed32,17,opt,name=balance,proto3" json:"balance,omitempty"`
	// When the third party's invoice entry was updated.
	RemoteUpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,19,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	// Array of Payment object IDs.
	Payments         []string           `protobuf:"bytes,20,rep,name=payments,proto3" json:"payments,omitempty"`
	LineItems        []*InvoiceLineItem `protobuf:"bytes,21,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	RemoteWasDeleted bool               `protobuf:"varint,22,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the Invoice was generated in.
	AccountingPeriod string   `protobuf:"bytes,23,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	PurchaseOrders   []string `protobuf:"bytes,24,rep,name=purchase_orders,json=purchaseOrders,proto3" json:"purchase_orders,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId   string                 `protobuf:"bytes,25,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// the account id as stored in merge
	MergeRecordId string `protobuf:"bytes,27,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
}

func (x *Invoice) Reset() {
	*x = Invoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invoice) ProtoMessage() {}

func (x *Invoice) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invoice.ProtoReflect.Descriptor instead.
func (*Invoice) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{15}
}

func (x *Invoice) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Invoice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Invoice) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Invoice) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Invoice) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *Invoice) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *Invoice) GetPaidOnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaidOnDate
	}
	return nil
}

func (x *Invoice) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Invoice) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Invoice) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Invoice) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *Invoice) GetTotalDiscount() float32 {
	if x != nil {
		return x.TotalDiscount
	}
	return 0
}

func (x *Invoice) GetSubTotal() float32 {
	if x != nil {
		return x.SubTotal
	}
	return 0
}

func (x *Invoice) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Invoice) GetTotalTaxAmount() float32 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *Invoice) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Invoice) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Invoice) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *Invoice) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *Invoice) GetPayments() []string {
	if x != nil {
		return x.Payments
	}
	return nil
}

func (x *Invoice) GetLineItems() []*InvoiceLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *Invoice) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Invoice) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *Invoice) GetPurchaseOrders() []string {
	if x != nil {
		return x.PurchaseOrders
	}
	return nil
}

func (x *Invoice) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Invoice) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Invoice) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

// The Invoice object represents an itemized record of goods and/or services sold to a customer.
type InvoiceLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The line item's description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The line item's unit price.
	UnitPrice float32 `protobuf:"fixed32,4,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// The line item's quantity.
	Quantity int32 `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The line item's total amount.
	TotalAmount float32 `protobuf:"fixed32,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The line item's currency
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// The line item's exchange rate.
	ExchangeRate       string   `protobuf:"bytes,8,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	Item               string   `protobuf:"bytes,9,opt,name=item,proto3" json:"item,omitempty"`
	Account            string   `protobuf:"bytes,10,opt,name=account,proto3" json:"account,omitempty"`
	TrackingCategory   string   `protobuf:"bytes,11,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`
	TrackingCategories []string `protobuf:"bytes,12,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	// The company the line item belongs to.
	Company string `protobuf:"bytes,13,opt,name=company,proto3" json:"company,omitempty"`
	// the id of the record as stored in merge
	MergeRecordId string `protobuf:"bytes,14,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
}

func (x *InvoiceLineItem) Reset() {
	*x = InvoiceLineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLineItem) ProtoMessage() {}

func (x *InvoiceLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLineItem.ProtoReflect.Descriptor instead.
func (*InvoiceLineItem) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{16}
}

func (x *InvoiceLineItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvoiceLineItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *InvoiceLineItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InvoiceLineItem) GetUnitPrice() float32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *InvoiceLineItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *InvoiceLineItem) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *InvoiceLineItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *InvoiceLineItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *InvoiceLineItem) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *InvoiceLineItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InvoiceLineItem) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *InvoiceLineItem) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *InvoiceLineItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *InvoiceLineItem) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *InvoiceLineItem) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The Item object refers to the goods involved in a transaction.
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The item's name.
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The item's unit price.
	UnitPrice float32 `protobuf:"fixed32,5,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// The price at which the item is purchased from a vendor.
	PurchasePrice float32 `protobuf:"fixed32,6,opt,name=purchase_price,json=purchasePrice,proto3" json:"purchase_price,omitempty"`
	// References the default account used to record a purchase of the item.
	PurchaseAccount string `protobuf:"bytes,7,opt,name=purchase_account,json=purchaseAccount,proto3" json:"purchase_account,omitempty"`
	// References the default account used to record a sale.
	SalesAccount string `protobuf:"bytes,8,opt,name=sales_account,json=salesAccount,proto3" json:"sales_account,omitempty"`
	// The company the item belongs to.
	Company string `protobuf:"bytes,9,opt,name=company,proto3" json:"company,omitempty"`
	// When the third party's item note was updated.
	RemoteUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,11,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	MergeRecordId string                 `protobuf:"bytes,13,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{17}
}

func (x *Item) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Item) GetUnitPrice() float32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *Item) GetPurchasePrice() float32 {
	if x != nil {
		return x.PurchasePrice
	}
	return 0
}

func (x *Item) GetPurchaseAccount() string {
	if x != nil {
		return x.PurchaseAccount
	}
	return ""
}

func (x *Item) GetSalesAccount() string {
	if x != nil {
		return x.SalesAccount
	}
	return ""
}

func (x *Item) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Item) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *Item) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Item) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Item) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *Item) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// A JournalEntry is a record of a transaction or event that is entered into a company's accounting system.
//
// The JournalEntry common model contains records that are automatically created as a result of a
// certain type of transaction, like an Invoice, and records that are manually created against a companyâ€™s ledger.
//
// The lines of a given JournalEntry object should always sum to 0. A positive net_amount means
// the line represents a debit and a negative net_amount represents a credit.
type JournalEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The journal entry's transaction date.
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	// When the third party's journal entry was created.
	RemoteCreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"`
	RemoteUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"`
	Payments        []string               `protobuf:"bytes,6,rep,name=payments,proto3" json:"payments,omitempty"`
	// The journal entry's private note.
	Memo     string `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
	Currency string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	// The journal entry's exchange rate.
	ExchangeRate string `protobuf:"bytes,9,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string due to the example provided, but could be float or double.
	// The company the journal entry belongs to.
	Company string `protobuf:"bytes,10,opt,name=company,proto3" json:"company,omitempty"`
	// The JournalLine object is used to represent a journal entry's line items.
	Lines []*JournalLine `protobuf:"bytes,11,rep,name=lines,proto3" json:"lines,omitempty"`
	// Reference number for identifying journal entries.
	JournalNumber      string   `protobuf:"bytes,12,opt,name=journal_number,json=journalNumber,proto3" json:"journal_number,omitempty"`
	TrackingCategories []string `protobuf:"bytes,13,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	RemoteWasDeleted   bool     `protobuf:"varint,14,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	PostingStatus      string   `protobuf:"bytes,15,opt,name=posting_status,json=postingStatus,proto3" json:"posting_status,omitempty"`
	// The accounting period that the JournalEntry was generated in.
	AccountingPeriod string                 `protobuf:"bytes,16,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// the id of the record as stored in merge
	MergeRecordId string `protobuf:"bytes,18,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	// A list of the Payment Applied to Lines common models
	// related to a given Invoice, Credit Note, or Journal Entry.
	AppliedPayments []string               `protobuf:"bytes,19,rep,name=applied_payments,json=appliedPayments,proto3" json:"applied_payments,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *JournalEntry) Reset() {
	*x = JournalEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalEntry) ProtoMessage() {}

func (x *JournalEntry) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalEntry.ProtoReflect.Descriptor instead.
func (*JournalEntry) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{18}
}

func (x *JournalEntry) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JournalEntry) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *JournalEntry) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *JournalEntry) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *JournalEntry) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *JournalEntry) GetPayments() []string {
	if x != nil {
		return x.Payments
	}
	return nil
}

func (x *JournalEntry) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *JournalEntry) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JournalEntry) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *JournalEntry) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *JournalEntry) GetLines() []*JournalLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *JournalEntry) GetJournalNumber() string {
	if x != nil {
		return x.JournalNumber
	}
	return ""
}

func (x *JournalEntry) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *JournalEntry) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *JournalEntry) GetPostingStatus() string {
	if x != nil {
		return x.PostingStatus
	}
	return ""
}

func (x *JournalEntry) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *JournalEntry) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *JournalEntry) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *JournalEntry) GetAppliedPayments() []string {
	if x != nil {
		return x.AppliedPayments
	}
	return nil
}

func (x *JournalEntry) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The JournalLine object is used to represent a journal entry's line items.
type JournalLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Account  string `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	// The value of the line item including taxes and other fees.
	NetAmount          float32  `protobuf:"fixed32,5,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"` // Might want to use double or a more precise type
	TrackingCategory   string   `protobuf:"bytes,6,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`
	TrackingCategories []string `protobuf:"bytes,7,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	Contact            string   `protobuf:"bytes,8,opt,name=contact,proto3" json:"contact,omitempty"`
	// The company the journal entry belongs to.
	Company string `protobuf:"bytes,9,opt,name=company,proto3" json:"company,omitempty"`
	// The line's description.
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// The journal line item's exchange rate.
	ExchangeRate string                 `protobuf:"bytes,11,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string due to the example provided, but could be float or double.
	ModifiedAt   *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *JournalLine) Reset() {
	*x = JournalLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalLine) ProtoMessage() {}

func (x *JournalLine) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalLine.ProtoReflect.Descriptor instead.
func (*JournalLine) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{19}
}

func (x *JournalLine) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JournalLine) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *JournalLine) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *JournalLine) GetNetAmount() float32 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *JournalLine) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *JournalLine) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *JournalLine) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *JournalLine) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *JournalLine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JournalLine) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *JournalLine) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *JournalLine) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The Payment object represents general payments made towards a specific transaction.
type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The payment's transaction date.
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	// The supplier, or customer involved in the payment.
	Contact string `protobuf:"bytes,4,opt,name=contact,proto3" json:"contact,omitempty"`
	// The supplierâ€™s or customerâ€™s account in which the payment is made.
	Account  string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Currency string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	// The payment's exchange rate.
	ExchangeRate string `protobuf:"bytes,7,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string due to the example provided, but could be float or double.
	// The company the payment belongs to.
	Company string `protobuf:"bytes,8,opt,name=company,proto3" json:"company,omitempty"`
	// The total amount of money being paid to the supplier, or customer, after taxes.
	TotalAmount        float32                `protobuf:"fixed32,9,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"` // Might want to use double or a more precise type
	TrackingCategories []string               `protobuf:"bytes,10,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	RemoteUpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"`
	RemoteWasDeleted   bool                   `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the Payment was generated in.
	AccountingPeriod string `protobuf:"bytes,13,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// the id as stored in merge
	MergeRecordId string                 `protobuf:"bytes,15,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{20}
}

func (x *Payment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payment) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Payment) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *Payment) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Payment) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Payment) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Payment) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *Payment) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Payment) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Payment) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *Payment) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *Payment) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Payment) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *Payment) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Payment) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *Payment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The PaymentLineItem object is an applied-to-line on a Payment that
// can either be a Invoice, CreditNote, or JournalEntry.
type PaymentLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The amount being applied to the transaction.
	AppliedAmount float32 `protobuf:"fixed32,2,opt,name=applied_amount,json=appliedAmount,proto3" json:"applied_amount,omitempty"`
	// The date the payment portion is applied.
	AppliedDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=applied_date,json=appliedDate,proto3" json:"applied_date,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,4,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The Merge ID of the transaction the payment portion is being applied to.
	RelatedObjectId string `protobuf:"bytes,5,opt,name=related_object_id,json=relatedObjectId,proto3" json:"related_object_id,omitempty"`
	// The type of transaction the payment portion is being applied to. Possible values include: INVOICE, JOURNAL_ENTRY, or CREDIT_NOTE.
	RelatedObjectType string `protobuf:"bytes,6,opt,name=related_object_type,json=relatedObjectType,proto3" json:"related_object_type,omitempty"`
	// The record id as seen on merge platform
	MergeRecordId string                 `protobuf:"bytes,7,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *PaymentLineItem) Reset() {
	*x = PaymentLineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentLineItem) ProtoMessage() {}

func (x *PaymentLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentLineItem.ProtoReflect.Descriptor instead.
func (*PaymentLineItem) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{21}
}

func (x *PaymentLineItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentLineItem) GetAppliedAmount() float32 {
	if x != nil {
		return x.AppliedAmount
	}
	return 0
}

func (x *PaymentLineItem) GetAppliedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AppliedDate
	}
	return nil
}

func (x *PaymentLineItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *PaymentLineItem) GetRelatedObjectId() string {
	if x != nil {
		return x.RelatedObjectId
	}
	return ""
}

func (x *PaymentLineItem) GetRelatedObjectType() string {
	if x != nil {
		return x.RelatedObjectType
	}
	return ""
}

func (x *PaymentLineItem) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *PaymentLineItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PaymentLineItem) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The PurchaseOrder object is a record of request for a product or service between a buyer and seller.
type PurchaseOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MergeRecordId string `protobuf:"bytes,2,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	Status        string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// The purchase order's issue date.
	IssueDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	// The human-readable number of the purchase order.
	PurchaseOrderNumber string `protobuf:"bytes,5,opt,name=purchase_order_number,json=purchaseOrderNumber,proto3" json:"purchase_order_number,omitempty"`
	// The purchase order's delivery date.
	DeliveryDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=delivery_date,json=deliveryDate,proto3" json:"delivery_date,omitempty"`
	// The purchase order's delivery address.
	DeliveryAddress *CompanyAddress `protobuf:"bytes,7,opt,name=delivery_address,json=deliveryAddress,proto3" json:"delivery_address,omitempty"`
	// The contact making the purchase order.
	Customer string `protobuf:"bytes,8,opt,name=customer,proto3" json:"customer,omitempty"`
	// The party fulfilling the purchase order.
	Vendor string `protobuf:"bytes,9,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// A memo attached to the purchase order.
	Memo string `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo,omitempty"`
	// The company the purchase order belongs to.
	Company string `protobuf:"bytes,11,opt,name=company,proto3" json:"company,omitempty"`
	// The purchase order's total amount.
	TotalAmount float32 `protobuf:"fixed32,12,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"` // Might be better as double.
	// The purchase order's currency.
	Currency           string                   `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	ExchangeRate       string                   `protobuf:"bytes,14,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string, but might be better as float or double.
	LineItems          []*PurchaseOrderLineItem `protobuf:"bytes,15,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	TrackingCategories []string                 `protobuf:"bytes,16,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	RemoteCreatedAt    *timestamppb.Timestamp   `protobuf:"bytes,17,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"`
	RemoteUpdatedAt    *timestamppb.Timestamp   `protobuf:"bytes,18,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"`
	RemoteWasDeleted   bool                     `protobuf:"varint,19,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the PurchaseOrder was generated in.
	AccountingPeriod string                 `protobuf:"bytes,20,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	RemoteId         string                 `protobuf:"bytes,21,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PurchaseOrder) Reset() {
	*x = PurchaseOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrder) ProtoMessage() {}

func (x *PurchaseOrder) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrder.ProtoReflect.Descriptor instead.
func (*PurchaseOrder) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{22}
}

func (x *PurchaseOrder) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchaseOrder) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *PurchaseOrder) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PurchaseOrder) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *PurchaseOrder) GetPurchaseOrderNumber() string {
	if x != nil {
		return x.PurchaseOrderNumber
	}
	return ""
}

func (x *PurchaseOrder) GetDeliveryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveryDate
	}
	return nil
}

func (x *PurchaseOrder) GetDeliveryAddress() *CompanyAddress {
	if x != nil {
		return x.DeliveryAddress
	}
	return nil
}

func (x *PurchaseOrder) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *PurchaseOrder) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *PurchaseOrder) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *PurchaseOrder) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *PurchaseOrder) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *PurchaseOrder) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PurchaseOrder) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *PurchaseOrder) GetLineItems() []*PurchaseOrderLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *PurchaseOrder) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *PurchaseOrder) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *PurchaseOrder) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *PurchaseOrder) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *PurchaseOrder) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *PurchaseOrder) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *PurchaseOrder) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *PurchaseOrder) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The PurchaseOrderLineItem object is used to represent a purchase order's line item.
type PurchaseOrderLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId           string                 `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Quantity           int32                  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	UnitPrice          string                 `protobuf:"bytes,5,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"` // Assuming string, but might be better as float or double.
	Item               string                 `protobuf:"bytes,6,opt,name=item,proto3" json:"item,omitempty"`
	Account            string                 `protobuf:"bytes,7,opt,name=account,proto3" json:"account,omitempty"`
	TrackingCategory   string                 `protobuf:"bytes,8,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,9,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	TaxAmount          string                 `protobuf:"bytes,10,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	TotalLineAmount    string                 `protobuf:"bytes,11,opt,name=total_line_amount,json=totalLineAmount,proto3" json:"total_line_amount,omitempty"`
	Currency           string                 `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	ExchangeRate       string                 `protobuf:"bytes,13,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string, but might be better as float or double.
	Company            string                 `protobuf:"bytes,14,opt,name=company,proto3" json:"company,omitempty"`
	ModifiedAt         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	RemoteWasDeleted   bool                   `protobuf:"varint,17,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
}

func (x *PurchaseOrderLineItem) Reset() {
	*x = PurchaseOrderLineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrderLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderLineItem) ProtoMessage() {}

func (x *PurchaseOrderLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderLineItem.ProtoReflect.Descriptor instead.
func (*PurchaseOrderLineItem) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{23}
}

func (x *PurchaseOrderLineItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchaseOrderLineItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PurchaseOrderLineItem) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *PurchaseOrderLineItem) GetTaxAmount() string {
	if x != nil {
		return x.TaxAmount
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetTotalLineAmount() string {
	if x != nil {
		return x.TotalLineAmount
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *PurchaseOrderLineItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PurchaseOrderLineItem) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

// The TaxRate object is used to represent a tax rate.
type TaxRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The tax rate's description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The tax rate's total tax rate.
	TotalTaxRate float64 `protobuf:"fixed64,4,opt,name=total_tax_rate,json=totalTaxRate,proto3" json:"total_tax_rate,omitempty"`
	// The tax rate's effective tax rate.
	EffectiveTaxRate float64 `protobuf:"fixed64,5,opt,name=effective_tax_rate,json=effectiveTaxRate,proto3" json:"effective_tax_rate,omitempty"`
	// The company the tax rate belongs to.
	Company string `protobuf:"bytes,6,opt,name=company,proto3" json:"company,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool `protobuf:"varint,7,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	MergeRecordId string                 `protobuf:"bytes,9,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TaxRate) Reset() {
	*x = TaxRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxRate) ProtoMessage() {}

func (x *TaxRate) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxRate.ProtoReflect.Descriptor instead.
func (*TaxRate) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{24}
}

func (x *TaxRate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxRate) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *TaxRate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaxRate) GetTotalTaxRate() float64 {
	if x != nil {
		return x.TotalTaxRate
	}
	return 0
}

func (x *TaxRate) GetEffectiveTaxRate() float64 {
	if x != nil {
		return x.EffectiveTaxRate
	}
	return 0
}

func (x *TaxRate) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *TaxRate) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *TaxRate) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *TaxRate) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *TaxRate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The TrackingCategory object is used to represent a company's tracking categories.
type TrackingCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId      string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	MergeRecordId string `protobuf:"bytes,3,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	// The tracking categoryâ€™s type. Possible values include: CLASS, DEPARTMENT.
	// In cases where there is no clear mapping, the original value passed through will be returned.
	CategoryType TrackingCategory_CategoryType `protobuf:"varint,4,opt,name=category_type,json=categoryType,proto3,enum=accounting_service.v1.TrackingCategory_CategoryType" json:"category_type,omitempty"`
	// ID of the parent tracking category.
	ParentCategory string `protobuf:"bytes,5,opt,name=parent_category,json=parentCategory,proto3" json:"parent_category,omitempty"`
	// The company the tracking category belongs to.
	Company string `protobuf:"bytes,6,opt,name=company,proto3" json:"company,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool `protobuf:"varint,7,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// The tracking category's name.
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// The tracking category's status. Possible values include: ACTIVE, ARCHIVED.
	// In cases where there is no clear mapping, the original value passed through will be returned.
	Status    string                 `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TrackingCategory) Reset() {
	*x = TrackingCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackingCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackingCategory) ProtoMessage() {}

func (x *TrackingCategory) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackingCategory.ProtoReflect.Descriptor instead.
func (*TrackingCategory) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{25}
}

func (x *TrackingCategory) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrackingCategory) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *TrackingCategory) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *TrackingCategory) GetCategoryType() TrackingCategory_CategoryType {
	if x != nil {
		return x.CategoryType
	}
	return TrackingCategory_CATEGORY_TYPE_UNSPECIFIED
}

func (x *TrackingCategory) GetParentCategory() string {
	if x != nil {
		return x.ParentCategory
	}
	return ""
}

func (x *TrackingCategory) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *TrackingCategory) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *TrackingCategory) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *TrackingCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrackingCategory) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TrackingCategory) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The Transaction common model includes records of all types of transactions that do not appear in other common models.
// The type of transaction can be identified through the type field. More specifically,
// it will contain all types of transactions outside of:
//
// * Credit Notes
// * Expenses
// * Invoices
// * Journal Entries
// * Payments
// * Purchase Orders
// * Vendor Credits
type BusinessTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of transaction, which can by any transaction object not already included in Mergeâ€™s common model.
	TransactionType string `protobuf:"bytes,2,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	// The transaction's number used for identifying purposes.
	Number string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	// The date upon which the transaction occurred.
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	// The transaction's account.
	Account string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// The contact to whom the transaction relates to.
	Contact string `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"`
	// The total amount being paid after taxes.
	TotalAmount string `protobuf:"bytes,7,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"` // Might be better as double.
	Currency    string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	// The transaction's exchange rate.
	ExchangeRate string `protobuf:"bytes,9,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string, but might be better as float or double.
	// The company the transaction belongs to.
	Company            string   `protobuf:"bytes,10,opt,name=company,proto3" json:"company,omitempty"`
	TrackingCategories []string `protobuf:"bytes,11,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	// The TransactionLineItem object is used to represent a transaction's line item
	LineItems []*TransactionLineItem `protobuf:"bytes,12,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool `protobuf:"varint,13,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the Transaction was generated in.
	AccountingPeriod string `protobuf:"bytes,14,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	MergeRecordId    string `protobuf:"bytes,15,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	RemoteId         string `protobuf:"bytes,16,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *BusinessTransaction) Reset() {
	*x = BusinessTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessTransaction) ProtoMessage() {}

func (x *BusinessTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessTransaction.ProtoReflect.Descriptor instead.
func (*BusinessTransaction) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{26}
}

func (x *BusinessTransaction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BusinessTransaction) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *BusinessTransaction) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *BusinessTransaction) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *BusinessTransaction) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *BusinessTransaction) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *BusinessTransaction) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *BusinessTransaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BusinessTransaction) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *BusinessTransaction) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *BusinessTransaction) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *BusinessTransaction) GetLineItems() []*TransactionLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *BusinessTransaction) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *BusinessTransaction) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *BusinessTransaction) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *BusinessTransaction) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *BusinessTransaction) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *BusinessTransaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The TransactionLineItem object is used to represent a transaction's line items.
type TransactionLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// An internal note used by the business to clarify purpose of the transaction.
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// The line item's unit price.
	UnitPrice string `protobuf:"bytes,4,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// The line item's quantity.
	Quantity string `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Item     string `protobuf:"bytes,6,opt,name=item,proto3" json:"item,omitempty"`
	// The line item's account.
	Account string `protobuf:"bytes,7,opt,name=account,proto3" json:"account,omitempty"`
	// The line's associated tracking category.
	TrackingCategory   string   `protobuf:"bytes,8,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`
	TrackingCategories []string `protobuf:"bytes,9,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	// The line item's total.
	TotalLineAmount string `protobuf:"bytes,10,opt,name=total_line_amount,json=totalLineAmount,proto3" json:"total_line_amount,omitempty"`
	// The line item's tax rate.
	TaxRate string `protobuf:"bytes,11,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	// The line item's currency
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	// The line item's exchange rate.
	ExchangeRate string `protobuf:"bytes,13,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string, but might be better as float or double.
	// The company the line belongs to.
	Company    string                 `protobuf:"bytes,14,opt,name=company,proto3" json:"company,omitempty"`
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted bool                   `protobuf:"varint,16,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TransactionLineItem) Reset() {
	*x = TransactionLineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionLineItem) ProtoMessage() {}

func (x *TransactionLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionLineItem.ProtoReflect.Descriptor instead.
func (*TransactionLineItem) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{27}
}

func (x *TransactionLineItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionLineItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *TransactionLineItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TransactionLineItem) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *TransactionLineItem) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *TransactionLineItem) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *TransactionLineItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TransactionLineItem) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *TransactionLineItem) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *TransactionLineItem) GetTotalLineAmount() string {
	if x != nil {
		return x.TotalLineAmount
	}
	return ""
}

func (x *TransactionLineItem) GetTaxRate() string {
	if x != nil {
		return x.TaxRate
	}
	return ""
}

func (x *TransactionLineItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TransactionLineItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *TransactionLineItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *TransactionLineItem) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *TransactionLineItem) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *TransactionLineItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// The VendorCredit object represents an accounts receivable transaction indicating that a customer is owed a gift or refund.
// It includes details such as the amount of credit, the vendor responsible,
// the associated account, and other relevant information.
type VendorCredit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the Merge account
	MergeRecordId string `protobuf:"bytes,1,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
	// Identifier for the VendorCredit in the remote system
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// Transaction number or reference identifier
	Number string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	// Date of the transaction
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	// Name or identifier of the vendor
	Vendor string `protobuf:"bytes,5,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Total amount of credit owed
	TotalAmount float64 `protobuf:"fixed64,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// Currency code for the transaction (e.g., USD, EUR)
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// Exchange rate used for currency conversion, represented as a string for precision
	ExchangeRate string `protobuf:"bytes,8,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// Identifier or name of the associated company
	Company string `protobuf:"bytes,9,opt,name=company,proto3" json:"company,omitempty"`
	// Line items associated with the vendor credit
	Lines []*VendorCreditLine `protobuf:"bytes,10,rep,name=lines,proto3" json:"lines,omitempty"`
	// Tracking categories for accounting purposes
	TrackingCategories []string `protobuf:"bytes,11,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	// Flag indicating if the VendorCredit was deleted in the remote system
	RemoteWasDeleted bool `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// Accounting period for the transaction
	AccountingPeriod string `protobuf:"bytes,13,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	// Timestamp of the last modification
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Unique identifier for the VendorCredit
	Id uint64 `protobuf:"varint,15,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VendorCredit) Reset() {
	*x = VendorCredit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorCredit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCredit) ProtoMessage() {}

func (x *VendorCredit) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCredit.ProtoReflect.Descriptor instead.
func (*VendorCredit) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{28}
}

func (x *VendorCredit) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

func (x *VendorCredit) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *VendorCredit) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *VendorCredit) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *VendorCredit) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *VendorCredit) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *VendorCredit) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *VendorCredit) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *VendorCredit) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *VendorCredit) GetLines() []*VendorCreditLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *VendorCredit) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *VendorCredit) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *VendorCredit) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *VendorCredit) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *VendorCredit) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// The VendorCreditLine object represents individual line items in a VendorCredit transaction, detailing specific elements of the credit.
type VendorCreditLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the VendorCreditLine in the remote system
	RemoteId string `protobuf:"bytes,1,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// Net amount for the line item
	NetAmount float64 `protobuf:"fixed64,2,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	// Single tracking category for this line item
	TrackingCategory string `protobuf:"bytes,3,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`
	// Multiple tracking categories for detailed accounting
	TrackingCategories []string `protobuf:"bytes,4,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	// Description of the line item
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Account associated with the line item
	Account string `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`
	// Identifier or name of the associated company
	Company string `protobuf:"bytes,7,opt,name=company,proto3" json:"company,omitempty"`
	// Exchange rate used for currency conversion, potentially as a float or double for precision
	ExchangeRate string `protobuf:"bytes,8,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// Timestamp of the last modification to the line item
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Unique identifier for the VendorCreditLine
	Id uint64 `protobuf:"varint,10,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VendorCreditLine) Reset() {
	*x = VendorCreditLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorCreditLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCreditLine) ProtoMessage() {}

func (x *VendorCreditLine) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_service_v1_accounting_database_schema_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCreditLine.ProtoReflect.Descriptor instead.
func (*VendorCreditLine) Descriptor() ([]byte, []int) {
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP(), []int{29}
}

func (x *VendorCreditLine) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *VendorCreditLine) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *VendorCreditLine) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *VendorCreditLine) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *VendorCreditLine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VendorCreditLine) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *VendorCreditLine) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *VendorCreditLine) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *VendorCreditLine) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *VendorCreditLine) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_accounting_service_v1_accounting_database_schema_proto protoreflect.FileDescriptor

var file_accounting_service_v1_accounting_database_schema_proto_rawDesc = []byte{
	0x0a, 0x36, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x06,
	0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2b,
	0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x65,
	0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a,
	0x02, 0x38, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xaf, 0x0b, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02,
	0x48, 0x01, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x4f, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a,
	0x02, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x57, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01,
	0x52, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x73, 0x12,
	0x64, 0x0a, 0x14, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48,
	0x01, 0x52, 0x12, 0x63, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02,
	0x48, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x2a, 0x02, 0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x45,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48,
	0x01, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0f, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x0e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01,
	0x52, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12,
	0x4e, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02,
	0x48, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xe5, 0x04, 0x0a, 0x17, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22,
	0xc4, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x32, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xcf, 0x05, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x2a, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x43, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x06,
	0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xfb, 0x06,
	0x0a, 0x11, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x74, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x63, 0x61, 0x73, 0x68, 0x41,
	0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x30, 0x0a, 0x15, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x63, 0x61, 0x73, 0x68, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x5e, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x13, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xeb, 0x04, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69,
	0x73, 0x63, 0x61, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x69, 0x73, 0x63, 0x61,
	0x6c, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2d, 0x0a,
	0x13, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x69, 0x73, 0x63,
	0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x72, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xeb, 0x02, 0x0a, 0x14, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xcc, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57,
	0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa2, 0x07, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x48, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xe9, 0x03, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x85, 0x06, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x38, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22,
	0xaa, 0x04, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3b,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57,
	0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf9, 0x06, 0x0a,
	0x0f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x39, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0d,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x6e, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x14, 0x6e,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xab, 0x08, 0x0a, 0x07, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x70, 0x61, 0x69, 0x64, 0x4f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x11,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x92, 0x04, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xad, 0x04, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x46, 0x0a,
	0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x84, 0x07, 0x0a, 0x0c,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xcc, 0x03, 0x0a, 0x0b, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xab, 0x05, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22,
	0xa8, 0x03, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xad, 0x08, 0x0a, 0x0d, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x10,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x81, 0x05, 0x0a, 0x15, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x9c,
	0x03, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc5, 0x04,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x64, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x02, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xfd, 0x05, 0x0a, 0x13, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xed, 0x04, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77,
	0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xe8, 0x04, 0x0a, 0x0c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x3d, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xfc, 0x02, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x42,
	0xae, 0x02, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x1d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x80,
	0x01, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f, 0x6c, 0x6f,
	0x6d, 0x6f, 0x6e, 0x41, 0x49, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accounting_service_v1_accounting_database_schema_proto_rawDescOnce sync.Once
	file_accounting_service_v1_accounting_database_schema_proto_rawDescData = file_accounting_service_v1_accounting_database_schema_proto_rawDesc
)

func file_accounting_service_v1_accounting_database_schema_proto_rawDescGZIP() []byte {
	file_accounting_service_v1_accounting_database_schema_proto_rawDescOnce.Do(func() {
		file_accounting_service_v1_accounting_database_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_accounting_service_v1_accounting_database_schema_proto_rawDescData)
	})
	return file_accounting_service_v1_accounting_database_schema_proto_rawDescData
}

var file_accounting_service_v1_accounting_database_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_accounting_service_v1_accounting_database_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_accounting_service_v1_accounting_database_schema_proto_goTypes = []interface{}{
	(TrackingCategory_CategoryType)(0),     // 0: accounting_service.v1.TrackingCategory.CategoryType
	(*AccountingIntegrationMergeLink)(nil), // 1: accounting_service.v1.AccountingIntegrationMergeLink
	(*LinkedAccountingAccount)(nil),        // 2: accounting_service.v1.LinkedAccountingAccount
	(*BusinessChartOfAccounts)(nil),        // 3: accounting_service.v1.BusinessChartOfAccounts
	(*CompanyAddress)(nil),                 // 4: accounting_service.v1.CompanyAddress
	(*BalanceSheet)(nil),                   // 5: accounting_service.v1.BalanceSheet
	(*ReportItem)(nil),                     // 6: accounting_service.v1.ReportItem
	(*CashFlowStatement)(nil),              // 7: accounting_service.v1.CashFlowStatement
	(*CompanyInfo)(nil),                    // 8: accounting_service.v1.CompanyInfo
	(*AccountingAttachment)(nil),           // 9: accounting_service.v1.AccountingAttachment
	(*Contacts)(nil),                       // 10: accounting_service.v1.Contacts
	(*CreditNote)(nil),                     // 11: accounting_service.v1.CreditNote
	(*CreditNoteLineItem)(nil),             // 12: accounting_service.v1.CreditNoteLineItem
	(*Expense)(nil),                        // 13: accounting_service.v1.Expense
	(*ExpenseLine)(nil),                    // 14: accounting_service.v1.ExpenseLine
	(*IncomeStatement)(nil),                // 15: accounting_service.v1.IncomeStatement
	(*Invoice)(nil),                        // 16: accounting_service.v1.Invoice
	(*InvoiceLineItem)(nil),                // 17: accounting_service.v1.InvoiceLineItem
	(*Item)(nil),                           // 18: accounting_service.v1.Item
	(*JournalEntry)(nil),                   // 19: accounting_service.v1.JournalEntry
	(*JournalLine)(nil),                    // 20: accounting_service.v1.JournalLine
	(*Payment)(nil),                        // 21: accounting_service.v1.Payment
	(*PaymentLineItem)(nil),                // 22: accounting_service.v1.PaymentLineItem
	(*PurchaseOrder)(nil),                  // 23: accounting_service.v1.PurchaseOrder
	(*PurchaseOrderLineItem)(nil),          // 24: accounting_service.v1.PurchaseOrderLineItem
	(*TaxRate)(nil),                        // 25: accounting_service.v1.TaxRate
	(*TrackingCategory)(nil),               // 26: accounting_service.v1.TrackingCategory
	(*BusinessTransaction)(nil),            // 27: accounting_service.v1.BusinessTransaction
	(*TransactionLineItem)(nil),            // 28: accounting_service.v1.TransactionLineItem
	(*VendorCredit)(nil),                   // 29: accounting_service.v1.VendorCredit
	(*VendorCreditLine)(nil),               // 30: accounting_service.v1.VendorCreditLine
	(*MergeLinkedAccountToken)(nil),        // 31: accounting_service.v1.MergeLinkedAccountToken
	(*timestamppb.Timestamp)(nil),          // 32: google.protobuf.Timestamp
}
var file_accounting_service_v1_accounting_database_schema_proto_depIdxs = []int32{
	31,  // 0: accounting_service.v1.AccountingIntegrationMergeLink.token:type_name -> accounting_service.v1.MergeLinkedAccountToken
	2,   // 1: accounting_service.v1.AccountingIntegrationMergeLink.account:type_name -> accounting_service.v1.LinkedAccountingAccount
	32,  // 2: accounting_service.v1.AccountingIntegrationMergeLink.last_modified_at:type_name -> google.protobuf.Timestamp
	9,   // 3: accounting_service.v1.LinkedAccountingAccount.attachments:type_name -> accounting_service.v1.AccountingAttachment
	8,   // 4: accounting_service.v1.LinkedAccountingAccount.company_info:type_name -> accounting_service.v1.CompanyInfo
	23,  // 5: accounting_service.v1.LinkedAccountingAccount.purchase_orders:type_name -> accounting_service.v1.PurchaseOrder
	5,   // 6: accounting_service.v1.LinkedAccountingAccount.balance_sheets:type_name -> accounting_service.v1.BalanceSheet
	7,   // 7: accounting_service.v1.LinkedAccountingAccount.cash_flow_statements:type_name -> accounting_service.v1.CashFlowStatement
	15,  // 8: accounting_service.v1.LinkedAccountingAccount.income_statements:type_name -> accounting_service.v1.IncomeStatement
	3,   // 9: accounting_service.v1.LinkedAccountingAccount.chart_of_accounts:type_name -> accounting_service.v1.BusinessChartOfAccounts
	18,  // 10: accounting_service.v1.LinkedAccountingAccount.items:type_name -> accounting_service.v1.Item
	25,  // 11: accounting_service.v1.LinkedAccountingAccount.tax_rates:type_name -> accounting_service.v1.TaxRate
	10,  // 12: accounting_service.v1.LinkedAccountingAccount.contacts:type_name -> accounting_service.v1.Contacts
	16,  // 13: accounting_service.v1.LinkedAccountingAccount.invoices:type_name -> accounting_service.v1.Invoice
	21,  // 14: accounting_service.v1.LinkedAccountingAccount.payments:type_name -> accounting_service.v1.Payment
	13,  // 15: accounting_service.v1.LinkedAccountingAccount.expenses:type_name -> accounting_service.v1.Expense
	19,  // 16: accounting_service.v1.LinkedAccountingAccount.journal_entries:type_name -> accounting_service.v1.JournalEntry
	27,  // 17: accounting_service.v1.LinkedAccountingAccount.transactions:type_name -> accounting_service.v1.BusinessTransaction
	29,  // 18: accounting_service.v1.LinkedAccountingAccount.vendor_credits:type_name -> accounting_service.v1.VendorCredit
	11,  // 19: accounting_service.v1.LinkedAccountingAccount.credit_notes:type_name -> accounting_service.v1.CreditNote
	32,  // 20: accounting_service.v1.BusinessChartOfAccounts.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 21: accounting_service.v1.BusinessChartOfAccounts.created_at:type_name -> google.protobuf.Timestamp
	32,  // 22: accounting_service.v1.CompanyAddress.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 23: accounting_service.v1.BalanceSheet.date:type_name -> google.protobuf.Timestamp
	6,   // 24: accounting_service.v1.BalanceSheet.assets:type_name -> accounting_service.v1.ReportItem
	6,   // 25: accounting_service.v1.BalanceSheet.liabilities:type_name -> accounting_service.v1.ReportItem
	6,   // 26: accounting_service.v1.BalanceSheet.equity:type_name -> accounting_service.v1.ReportItem
	32,  // 27: accounting_service.v1.BalanceSheet.remote_generated_at:type_name -> google.protobuf.Timestamp
	32,  // 28: accounting_service.v1.BalanceSheet.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 29: accounting_service.v1.BalanceSheet.created_at:type_name -> google.protobuf.Timestamp
	32,  // 30: accounting_service.v1.ReportItem.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 31: accounting_service.v1.CashFlowStatement.start_period:type_name -> google.protobuf.Timestamp
	32,  // 32: accounting_service.v1.CashFlowStatement.end_period:type_name -> google.protobuf.Timestamp
	6,   // 33: accounting_service.v1.CashFlowStatement.operating_activities:type_name -> accounting_service.v1.ReportItem
	6,   // 34: accounting_service.v1.CashFlowStatement.investing_activities:type_name -> accounting_service.v1.ReportItem
	6,   // 35: accounting_service.v1.CashFlowStatement.financing_activities:type_name -> accounting_service.v1.ReportItem
	32,  // 36: accounting_service.v1.CashFlowStatement.remote_generated_at:type_name -> google.protobuf.Timestamp
	32,  // 37: accounting_service.v1.CashFlowStatement.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 38: accounting_service.v1.CompanyInfo.remote_created_at:type_name -> google.protobuf.Timestamp
	4,   // 39: accounting_service.v1.CompanyInfo.addresses:type_name -> accounting_service.v1.CompanyAddress
	32,  // 40: accounting_service.v1.CompanyInfo.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 41: accounting_service.v1.AccountingAttachment.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 42: accounting_service.v1.AccountingAttachment.created_at:type_name -> google.protobuf.Timestamp
	32,  // 43: accounting_service.v1.Contacts.remote_updated_at:type_name -> google.protobuf.Timestamp
	32,  // 44: accounting_service.v1.Contacts.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 45: accounting_service.v1.CreditNote.transaction_date:type_name -> google.protobuf.Timestamp
	12,  // 46: accounting_service.v1.CreditNote.line_items:type_name -> accounting_service.v1.CreditNoteLineItem
	32,  // 47: accounting_service.v1.CreditNote.remote_created_at:type_name -> google.protobuf.Timestamp
	32,  // 48: accounting_service.v1.CreditNote.remote_updated_at:type_name -> google.protobuf.Timestamp
	32,  // 49: accounting_service.v1.CreditNote.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 50: accounting_service.v1.CreditNote.created_at:type_name -> google.protobuf.Timestamp
	32,  // 51: accounting_service.v1.Expense.transaction_date:type_name -> google.protobuf.Timestamp
	32,  // 52: accounting_service.v1.Expense.remote_created_at:type_name -> google.protobuf.Timestamp
	14,  // 53: accounting_service.v1.Expense.lines:type_name -> accounting_service.v1.ExpenseLine
	32,  // 54: accounting_service.v1.Expense.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 55: accounting_service.v1.ExpenseLine.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 56: accounting_service.v1.ExpenseLine.created_at:type_name -> google.protobuf.Timestamp
	32,  // 57: accounting_service.v1.IncomeStatement.start_period:type_name -> google.protobuf.Timestamp
	32,  // 58: accounting_service.v1.IncomeStatement.end_period:type_name -> google.protobuf.Timestamp
	6,   // 59: accounting_service.v1.IncomeStatement.income:type_name -> accounting_service.v1.ReportItem
	6,   // 60: accounting_service.v1.IncomeStatement.cost_of_sales:type_name -> accounting_service.v1.ReportItem
	6,   // 61: accounting_service.v1.IncomeStatement.operating_expenses:type_name -> accounting_service.v1.ReportItem
	6,   // 62: accounting_service.v1.IncomeStatement.non_operating_expenses:type_name -> accounting_service.v1.ReportItem
	32,  // 63: accounting_service.v1.IncomeStatement.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 64: accounting_service.v1.IncomeStatement.created_at:type_name -> google.protobuf.Timestamp
	32,  // 65: accounting_service.v1.Invoice.issue_date:type_name -> google.protobuf.Timestamp
	32,  // 66: accounting_service.v1.Invoice.due_date:type_name -> google.protobuf.Timestamp
	32,  // 67: accounting_service.v1.Invoice.paid_on_date:type_name -> google.protobuf.Timestamp
	32,  // 68: accounting_service.v1.Invoice.remote_updated_at:type_name -> google.protobuf.Timestamp
	17,  // 69: accounting_service.v1.Invoice.line_items:type_name -> accounting_service.v1.InvoiceLineItem
	32,  // 70: accounting_service.v1.Invoice.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 71: accounting_service.v1.InvoiceLineItem.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 72: accounting_service.v1.Item.remote_updated_at:type_name -> google.protobuf.Timestamp
	32,  // 73: accounting_service.v1.Item.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 74: accounting_service.v1.Item.created_at:type_name -> google.protobuf.Timestamp
	32,  // 75: accounting_service.v1.JournalEntry.transaction_date:type_name -> google.protobuf.Timestamp
	32,  // 76: accounting_service.v1.JournalEntry.remote_created_at:type_name -> google.protobuf.Timestamp
	32,  // 77: accounting_service.v1.JournalEntry.remote_updated_at:type_name -> google.protobuf.Timestamp
	20,  // 78: accounting_service.v1.JournalEntry.lines:type_name -> accounting_service.v1.JournalLine
	32,  // 79: accounting_service.v1.JournalEntry.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 80: accounting_service.v1.JournalEntry.created_at:type_name -> google.protobuf.Timestamp
	32,  // 81: accounting_service.v1.JournalLine.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 82: accounting_service.v1.JournalLine.created_at:type_name -> google.protobuf.Timestamp
	32,  // 83: accounting_service.v1.Payment.transaction_date:type_name -> google.protobuf.Timestamp
	32,  // 84: accounting_service.v1.Payment.remote_updated_at:type_name -> google.protobuf.Timestamp
	32,  // 85: accounting_service.v1.Payment.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 86: accounting_service.v1.Payment.created_at:type_name -> google.protobuf.Timestamp
	32,  // 87: accounting_service.v1.PaymentLineItem.applied_date:type_name -> google.protobuf.Timestamp
	32,  // 88: accounting_service.v1.PaymentLineItem.created_at:type_name -> google.protobuf.Timestamp
	32,  // 89: accounting_service.v1.PaymentLineItem.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 90: accounting_service.v1.PurchaseOrder.issue_date:type_name -> google.protobuf.Timestamp
	32,  // 91: accounting_service.v1.PurchaseOrder.delivery_date:type_name -> google.protobuf.Timestamp
	4,   // 92: accounting_service.v1.PurchaseOrder.delivery_address:type_name -> accounting_service.v1.CompanyAddress
	24,  // 93: accounting_service.v1.PurchaseOrder.line_items:type_name -> accounting_service.v1.PurchaseOrderLineItem
	32,  // 94: accounting_service.v1.PurchaseOrder.remote_created_at:type_name -> google.protobuf.Timestamp
	32,  // 95: accounting_service.v1.PurchaseOrder.remote_updated_at:type_name -> google.protobuf.Timestamp
	32,  // 96: accounting_service.v1.PurchaseOrder.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 97: accounting_service.v1.PurchaseOrder.created_at:type_name -> google.protobuf.Timestamp
	32,  // 98: accounting_service.v1.PurchaseOrderLineItem.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 99: accounting_service.v1.PurchaseOrderLineItem.created_at:type_name -> google.protobuf.Timestamp
	32,  // 100: accounting_service.v1.TaxRate.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 101: accounting_service.v1.TaxRate.created_at:type_name -> google.protobuf.Timestamp
	0,   // 102: accounting_service.v1.TrackingCategory.category_type:type_name -> accounting_service.v1.TrackingCategory.CategoryType
	32,  // 103: accounting_service.v1.TrackingCategory.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 104: accounting_service.v1.TrackingCategory.created_at:type_name -> google.protobuf.Timestamp
	32,  // 105: accounting_service.v1.BusinessTransaction.transaction_date:type_name -> google.protobuf.Timestamp
	28,  // 106: accounting_service.v1.BusinessTransaction.line_items:type_name -> accounting_service.v1.TransactionLineItem
	32,  // 107: accounting_service.v1.BusinessTransaction.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 108: accounting_service.v1.BusinessTransaction.created_at:type_name -> google.protobuf.Timestamp
	32,  // 109: accounting_service.v1.TransactionLineItem.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 110: accounting_service.v1.TransactionLineItem.created_at:type_name -> google.protobuf.Timestamp
	32,  // 111: accounting_service.v1.VendorCredit.transaction_date:type_name -> google.protobuf.Timestamp
	30,  // 112: accounting_service.v1.VendorCredit.lines:type_name -> accounting_service.v1.VendorCreditLine
	32,  // 113: accounting_service.v1.VendorCredit.modified_at:type_name -> google.protobuf.Timestamp
	32,  // 114: accounting_service.v1.VendorCreditLine.modified_at:type_name -> google.protobuf.Timestamp
	115, // [115:115] is the sub-list for method output_type
	115, // [115:115] is the sub-list for method input_type
	115, // [115:115] is the sub-list for extension type_name
	115, // [115:115] is the sub-list for extension extendee
	0,   // [0:115] is the sub-list for field type_name
}

func init() { file_accounting_service_v1_accounting_database_schema_proto_init() }
func file_accounting_service_v1_accounting_database_schema_proto_init() {
	if File_accounting_service_v1_accounting_database_schema_proto != nil {
		return
	}
	file_accounting_service_v1_link_token_database_schema_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountingIntegrationMergeLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedAccountingAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessChartOfAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceSheet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashFlowStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountingAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditNoteLineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpenseLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceLineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentLineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrderLineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackingCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionLineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorCredit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_service_v1_accounting_database_schema_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorCreditLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accounting_service_v1_accounting_database_schema_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accounting_service_v1_accounting_database_schema_proto_goTypes,
		DependencyIndexes: file_accounting_service_v1_accounting_database_schema_proto_depIdxs,
		EnumInfos:         file_accounting_service_v1_accounting_database_schema_proto_enumTypes,
		MessageInfos:      file_accounting_service_v1_accounting_database_schema_proto_msgTypes,
	}.Build()
	File_accounting_service_v1_accounting_database_schema_proto = out.File
	file_accounting_service_v1_accounting_database_schema_proto_rawDesc = nil
	file_accounting_service_v1_accounting_database_schema_proto_goTypes = nil
	file_accounting_service_v1_accounting_database_schema_proto_depIdxs = nil
}
