// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: accounting_service/v1/service.proto

package accounting_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountingService_HealthCheck_FullMethodName                            = "/accounting_service.v1.AccountingService/HealthCheck"
	AccountingService_ReadynessCheck_FullMethodName                         = "/accounting_service.v1.AccountingService/ReadynessCheck"
	AccountingService_CreateAccountingProfile_FullMethodName                = "/accounting_service.v1.AccountingService/CreateAccountingProfile"
	AccountingService_ReadAccountingProfile_FullMethodName                  = "/accounting_service.v1.AccountingService/ReadAccountingProfile"
	AccountingService_DeleteAccountingProfile_FullMethodName                = "/accounting_service.v1.AccountingService/DeleteAccountingProfile"
	AccountingService_UpdateAccountingProfile_FullMethodName                = "/accounting_service.v1.AccountingService/UpdateAccountingProfile"
	AccountingService_GetMergeLinkToken_FullMethodName                      = "/accounting_service.v1.AccountingService/GetMergeLinkToken"
	AccountingService_ExchangePublicLinkTokenForAccountToken_FullMethodName = "/accounting_service.v1.AccountingService/ExchangePublicLinkTokenForAccountToken"
	AccountingService_ReadBalanceSheets_FullMethodName                      = "/accounting_service.v1.AccountingService/ReadBalanceSheets"
	AccountingService_ReadCashFlowStatements_FullMethodName                 = "/accounting_service.v1.AccountingService/ReadCashFlowStatements"
	AccountingService_ReadIncomeStatements_FullMethodName                   = "/accounting_service.v1.AccountingService/ReadIncomeStatements"
	AccountingService_ReadBusinessChartOfAccounts_FullMethodName            = "/accounting_service.v1.AccountingService/ReadBusinessChartOfAccounts"
)

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountingServiceClient interface {
	// Healthcheck performs a health check on the service
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// ReadynessCheck performs a readiness check on the service
	ReadynessCheck(ctx context.Context, in *ReadynessCheckRequest, opts ...grpc.CallOption) (*ReadynessCheckResponse, error)
	// creates a business accouting profile on the service
	CreateAccountingProfile(ctx context.Context, in *CreateAccountingProfileRequest, opts ...grpc.CallOption) (*CreateAccountingProfileResponse, error)
	// gets business accounting profile
	ReadAccountingProfile(ctx context.Context, in *ReadAccountingProfileRequest, opts ...grpc.CallOption) (*ReadAccountingProfileResponse, error)
	// delete business payroll profile
	DeleteAccountingProfile(ctx context.Context, in *DeleteAccountingProfileRequest, opts ...grpc.CallOption) (*DeleteAccountingProfileResponse, error)
	// updates a business account
	UpdateAccountingProfile(ctx context.Context, in *UpdateAccountingProfileRequest, opts ...grpc.CallOption) (*UpdateAccountingProfileResponse, error)
	// enables the client to get a link_token to initialize a Link session for your end user.
	GetMergeLinkToken(ctx context.Context, in *GetMergeLinkTokenRequest, opts ...grpc.CallOption) (*GetMergeLinkTokenResponse, error)
	// enables the client to exchange a public link token for an access token
	ExchangePublicLinkTokenForAccountToken(ctx context.Context, in *ExchangePublicLinkTokenForAccountTokenRequest, opts ...grpc.CallOption) (*ExchangePublicLinkTokenForAccountTokenResponse, error)
	// ReadBalanceSheets reads the balances sheet for a given a user
	ReadBalanceSheets(ctx context.Context, in *ReadBalanceSheetsRequest, opts ...grpc.CallOption) (*ReadBalanceSheetsResponse, error)
	// ReadCashFlowStatements reads the cash flow statements for a given a user
	ReadCashFlowStatements(ctx context.Context, in *ReadCashFlowStatementsRequest, opts ...grpc.CallOption) (*ReadCashFlowStatementsResponse, error)
	// ReadIncomeStatements reads the income statements for a given a user
	ReadIncomeStatements(ctx context.Context, in *ReadIncomeStatementsRequest, opts ...grpc.CallOption) (*ReadIncomeStatementsResponse, error)
	ReadBusinessChartOfAccounts(ctx context.Context, in *ReadBusinessChartOfAccountsRequest, opts ...grpc.CallOption) (*ReadBusinessChartOfAccountsResponse, error)
}

type accountingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingServiceClient(cc grpc.ClientConnInterface) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AccountingService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ReadynessCheck(ctx context.Context, in *ReadynessCheckRequest, opts ...grpc.CallOption) (*ReadynessCheckResponse, error) {
	out := new(ReadynessCheckResponse)
	err := c.cc.Invoke(ctx, AccountingService_ReadynessCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) CreateAccountingProfile(ctx context.Context, in *CreateAccountingProfileRequest, opts ...grpc.CallOption) (*CreateAccountingProfileResponse, error) {
	out := new(CreateAccountingProfileResponse)
	err := c.cc.Invoke(ctx, AccountingService_CreateAccountingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ReadAccountingProfile(ctx context.Context, in *ReadAccountingProfileRequest, opts ...grpc.CallOption) (*ReadAccountingProfileResponse, error) {
	out := new(ReadAccountingProfileResponse)
	err := c.cc.Invoke(ctx, AccountingService_ReadAccountingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) DeleteAccountingProfile(ctx context.Context, in *DeleteAccountingProfileRequest, opts ...grpc.CallOption) (*DeleteAccountingProfileResponse, error) {
	out := new(DeleteAccountingProfileResponse)
	err := c.cc.Invoke(ctx, AccountingService_DeleteAccountingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) UpdateAccountingProfile(ctx context.Context, in *UpdateAccountingProfileRequest, opts ...grpc.CallOption) (*UpdateAccountingProfileResponse, error) {
	out := new(UpdateAccountingProfileResponse)
	err := c.cc.Invoke(ctx, AccountingService_UpdateAccountingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetMergeLinkToken(ctx context.Context, in *GetMergeLinkTokenRequest, opts ...grpc.CallOption) (*GetMergeLinkTokenResponse, error) {
	out := new(GetMergeLinkTokenResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetMergeLinkToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ExchangePublicLinkTokenForAccountToken(ctx context.Context, in *ExchangePublicLinkTokenForAccountTokenRequest, opts ...grpc.CallOption) (*ExchangePublicLinkTokenForAccountTokenResponse, error) {
	out := new(ExchangePublicLinkTokenForAccountTokenResponse)
	err := c.cc.Invoke(ctx, AccountingService_ExchangePublicLinkTokenForAccountToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ReadBalanceSheets(ctx context.Context, in *ReadBalanceSheetsRequest, opts ...grpc.CallOption) (*ReadBalanceSheetsResponse, error) {
	out := new(ReadBalanceSheetsResponse)
	err := c.cc.Invoke(ctx, AccountingService_ReadBalanceSheets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ReadCashFlowStatements(ctx context.Context, in *ReadCashFlowStatementsRequest, opts ...grpc.CallOption) (*ReadCashFlowStatementsResponse, error) {
	out := new(ReadCashFlowStatementsResponse)
	err := c.cc.Invoke(ctx, AccountingService_ReadCashFlowStatements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ReadIncomeStatements(ctx context.Context, in *ReadIncomeStatementsRequest, opts ...grpc.CallOption) (*ReadIncomeStatementsResponse, error) {
	out := new(ReadIncomeStatementsResponse)
	err := c.cc.Invoke(ctx, AccountingService_ReadIncomeStatements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ReadBusinessChartOfAccounts(ctx context.Context, in *ReadBusinessChartOfAccountsRequest, opts ...grpc.CallOption) (*ReadBusinessChartOfAccountsResponse, error) {
	out := new(ReadBusinessChartOfAccountsResponse)
	err := c.cc.Invoke(ctx, AccountingService_ReadBusinessChartOfAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServiceServer is the server API for AccountingService service.
// All implementations must embed UnimplementedAccountingServiceServer
// for forward compatibility
type AccountingServiceServer interface {
	// Healthcheck performs a health check on the service
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// ReadynessCheck performs a readiness check on the service
	ReadynessCheck(context.Context, *ReadynessCheckRequest) (*ReadynessCheckResponse, error)
	// creates a business accouting profile on the service
	CreateAccountingProfile(context.Context, *CreateAccountingProfileRequest) (*CreateAccountingProfileResponse, error)
	// gets business accounting profile
	ReadAccountingProfile(context.Context, *ReadAccountingProfileRequest) (*ReadAccountingProfileResponse, error)
	// delete business payroll profile
	DeleteAccountingProfile(context.Context, *DeleteAccountingProfileRequest) (*DeleteAccountingProfileResponse, error)
	// updates a business account
	UpdateAccountingProfile(context.Context, *UpdateAccountingProfileRequest) (*UpdateAccountingProfileResponse, error)
	// enables the client to get a link_token to initialize a Link session for your end user.
	GetMergeLinkToken(context.Context, *GetMergeLinkTokenRequest) (*GetMergeLinkTokenResponse, error)
	// enables the client to exchange a public link token for an access token
	ExchangePublicLinkTokenForAccountToken(context.Context, *ExchangePublicLinkTokenForAccountTokenRequest) (*ExchangePublicLinkTokenForAccountTokenResponse, error)
	// ReadBalanceSheets reads the balances sheet for a given a user
	ReadBalanceSheets(context.Context, *ReadBalanceSheetsRequest) (*ReadBalanceSheetsResponse, error)
	// ReadCashFlowStatements reads the cash flow statements for a given a user
	ReadCashFlowStatements(context.Context, *ReadCashFlowStatementsRequest) (*ReadCashFlowStatementsResponse, error)
	// ReadIncomeStatements reads the income statements for a given a user
	ReadIncomeStatements(context.Context, *ReadIncomeStatementsRequest) (*ReadIncomeStatementsResponse, error)
	ReadBusinessChartOfAccounts(context.Context, *ReadBusinessChartOfAccountsRequest) (*ReadBusinessChartOfAccountsResponse, error)
	mustEmbedUnimplementedAccountingServiceServer()
}

// UnimplementedAccountingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountingServiceServer struct {
}

func (UnimplementedAccountingServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAccountingServiceServer) ReadynessCheck(context.Context, *ReadynessCheckRequest) (*ReadynessCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadynessCheck not implemented")
}
func (UnimplementedAccountingServiceServer) CreateAccountingProfile(context.Context, *CreateAccountingProfileRequest) (*CreateAccountingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountingProfile not implemented")
}
func (UnimplementedAccountingServiceServer) ReadAccountingProfile(context.Context, *ReadAccountingProfileRequest) (*ReadAccountingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAccountingProfile not implemented")
}
func (UnimplementedAccountingServiceServer) DeleteAccountingProfile(context.Context, *DeleteAccountingProfileRequest) (*DeleteAccountingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountingProfile not implemented")
}
func (UnimplementedAccountingServiceServer) UpdateAccountingProfile(context.Context, *UpdateAccountingProfileRequest) (*UpdateAccountingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountingProfile not implemented")
}
func (UnimplementedAccountingServiceServer) GetMergeLinkToken(context.Context, *GetMergeLinkTokenRequest) (*GetMergeLinkTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMergeLinkToken not implemented")
}
func (UnimplementedAccountingServiceServer) ExchangePublicLinkTokenForAccountToken(context.Context, *ExchangePublicLinkTokenForAccountTokenRequest) (*ExchangePublicLinkTokenForAccountTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangePublicLinkTokenForAccountToken not implemented")
}
func (UnimplementedAccountingServiceServer) ReadBalanceSheets(context.Context, *ReadBalanceSheetsRequest) (*ReadBalanceSheetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBalanceSheets not implemented")
}
func (UnimplementedAccountingServiceServer) ReadCashFlowStatements(context.Context, *ReadCashFlowStatementsRequest) (*ReadCashFlowStatementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCashFlowStatements not implemented")
}
func (UnimplementedAccountingServiceServer) ReadIncomeStatements(context.Context, *ReadIncomeStatementsRequest) (*ReadIncomeStatementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadIncomeStatements not implemented")
}
func (UnimplementedAccountingServiceServer) ReadBusinessChartOfAccounts(context.Context, *ReadBusinessChartOfAccountsRequest) (*ReadBusinessChartOfAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBusinessChartOfAccounts not implemented")
}
func (UnimplementedAccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {}

// UnsafeAccountingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServiceServer will
// result in compilation errors.
type UnsafeAccountingServiceServer interface {
	mustEmbedUnimplementedAccountingServiceServer()
}

func RegisterAccountingServiceServer(s grpc.ServiceRegistrar, srv AccountingServiceServer) {
	s.RegisterService(&AccountingService_ServiceDesc, srv)
}

func _AccountingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ReadynessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadynessCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ReadynessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ReadynessCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ReadynessCheck(ctx, req.(*ReadynessCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_CreateAccountingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CreateAccountingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CreateAccountingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CreateAccountingProfile(ctx, req.(*CreateAccountingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ReadAccountingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAccountingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ReadAccountingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ReadAccountingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ReadAccountingProfile(ctx, req.(*ReadAccountingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_DeleteAccountingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).DeleteAccountingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_DeleteAccountingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).DeleteAccountingProfile(ctx, req.(*DeleteAccountingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_UpdateAccountingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).UpdateAccountingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_UpdateAccountingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).UpdateAccountingProfile(ctx, req.(*UpdateAccountingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetMergeLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergeLinkTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetMergeLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetMergeLinkToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetMergeLinkToken(ctx, req.(*GetMergeLinkTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ExchangePublicLinkTokenForAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangePublicLinkTokenForAccountTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ExchangePublicLinkTokenForAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ExchangePublicLinkTokenForAccountToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ExchangePublicLinkTokenForAccountToken(ctx, req.(*ExchangePublicLinkTokenForAccountTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ReadBalanceSheets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBalanceSheetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ReadBalanceSheets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ReadBalanceSheets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ReadBalanceSheets(ctx, req.(*ReadBalanceSheetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ReadCashFlowStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCashFlowStatementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ReadCashFlowStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ReadCashFlowStatements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ReadCashFlowStatements(ctx, req.(*ReadCashFlowStatementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ReadIncomeStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadIncomeStatementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ReadIncomeStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ReadIncomeStatements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ReadIncomeStatements(ctx, req.(*ReadIncomeStatementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ReadBusinessChartOfAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBusinessChartOfAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ReadBusinessChartOfAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ReadBusinessChartOfAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ReadBusinessChartOfAccounts(ctx, req.(*ReadBusinessChartOfAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountingService_ServiceDesc is the grpc.ServiceDesc for AccountingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting_service.v1.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _AccountingService_HealthCheck_Handler,
		},
		{
			MethodName: "ReadynessCheck",
			Handler:    _AccountingService_ReadynessCheck_Handler,
		},
		{
			MethodName: "CreateAccountingProfile",
			Handler:    _AccountingService_CreateAccountingProfile_Handler,
		},
		{
			MethodName: "ReadAccountingProfile",
			Handler:    _AccountingService_ReadAccountingProfile_Handler,
		},
		{
			MethodName: "DeleteAccountingProfile",
			Handler:    _AccountingService_DeleteAccountingProfile_Handler,
		},
		{
			MethodName: "UpdateAccountingProfile",
			Handler:    _AccountingService_UpdateAccountingProfile_Handler,
		},
		{
			MethodName: "GetMergeLinkToken",
			Handler:    _AccountingService_GetMergeLinkToken_Handler,
		},
		{
			MethodName: "ExchangePublicLinkTokenForAccountToken",
			Handler:    _AccountingService_ExchangePublicLinkTokenForAccountToken_Handler,
		},
		{
			MethodName: "ReadBalanceSheets",
			Handler:    _AccountingService_ReadBalanceSheets_Handler,
		},
		{
			MethodName: "ReadCashFlowStatements",
			Handler:    _AccountingService_ReadCashFlowStatements_Handler,
		},
		{
			MethodName: "ReadIncomeStatements",
			Handler:    _AccountingService_ReadIncomeStatements_Handler,
		},
		{
			MethodName: "ReadBusinessChartOfAccounts",
			Handler:    _AccountingService_ReadBusinessChartOfAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting_service/v1/service.proto",
}
