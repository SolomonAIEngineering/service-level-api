// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newBankInfoORM(db *gorm.DB, opts ...gen.DOOption) bankInfoORM {
	_bankInfoORM := bankInfoORM{}

	_bankInfoORM.bankInfoORMDo.UseDB(db, opts...)
	_bankInfoORM.bankInfoORMDo.UseModel(&accounting_servicev1.BankInfoORM{})

	tableName := _bankInfoORM.bankInfoORMDo.TableName()
	_bankInfoORM.ALL = field.NewAsterisk(tableName)
	_bankInfoORM.AccountNumber = field.NewString(tableName, "account_number")
	_bankInfoORM.AccountType = field.NewString(tableName, "account_type")
	_bankInfoORM.BankName = field.NewString(tableName, "bank_name")
	_bankInfoORM.CreatedAt = field.NewTime(tableName, "created_at")
	_bankInfoORM.EmployeeId = field.NewUint64(tableName, "employee_id")
	_bankInfoORM.Id = field.NewUint64(tableName, "id")
	_bankInfoORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_bankInfoORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_bankInfoORM.RemoteId = field.NewString(tableName, "remote_id")
	_bankInfoORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_bankInfoORM.RoutingNumber = field.NewString(tableName, "routing_number")

	_bankInfoORM.fillFieldMap()

	return _bankInfoORM
}

type bankInfoORM struct {
	bankInfoORMDo

	ALL              field.Asterisk
	AccountNumber    field.String
	AccountType      field.String
	BankName         field.String
	CreatedAt        field.Time
	EmployeeId       field.Uint64
	Id               field.Uint64
	MergeAccountId   field.String
	ModifiedAt       field.Time
	RemoteId         field.String
	RemoteWasDeleted field.Bool
	RoutingNumber    field.String

	fieldMap map[string]field.Expr
}

func (b bankInfoORM) Table(newTableName string) *bankInfoORM {
	b.bankInfoORMDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bankInfoORM) As(alias string) *bankInfoORM {
	b.bankInfoORMDo.DO = *(b.bankInfoORMDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bankInfoORM) updateTableName(table string) *bankInfoORM {
	b.ALL = field.NewAsterisk(table)
	b.AccountNumber = field.NewString(table, "account_number")
	b.AccountType = field.NewString(table, "account_type")
	b.BankName = field.NewString(table, "bank_name")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.EmployeeId = field.NewUint64(table, "employee_id")
	b.Id = field.NewUint64(table, "id")
	b.MergeAccountId = field.NewString(table, "merge_account_id")
	b.ModifiedAt = field.NewTime(table, "modified_at")
	b.RemoteId = field.NewString(table, "remote_id")
	b.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	b.RoutingNumber = field.NewString(table, "routing_number")

	b.fillFieldMap()

	return b
}

func (b *bankInfoORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bankInfoORM) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 11)
	b.fieldMap["account_number"] = b.AccountNumber
	b.fieldMap["account_type"] = b.AccountType
	b.fieldMap["bank_name"] = b.BankName
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["employee_id"] = b.EmployeeId
	b.fieldMap["id"] = b.Id
	b.fieldMap["merge_account_id"] = b.MergeAccountId
	b.fieldMap["modified_at"] = b.ModifiedAt
	b.fieldMap["remote_id"] = b.RemoteId
	b.fieldMap["remote_was_deleted"] = b.RemoteWasDeleted
	b.fieldMap["routing_number"] = b.RoutingNumber
}

func (b bankInfoORM) clone(db *gorm.DB) bankInfoORM {
	b.bankInfoORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bankInfoORM) replaceDB(db *gorm.DB) bankInfoORM {
	b.bankInfoORMDo.ReplaceDB(db)
	return b
}

type bankInfoORMDo struct{ gen.DO }

type IBankInfoORMDo interface {
	gen.SubQuery
	Debug() IBankInfoORMDo
	WithContext(ctx context.Context) IBankInfoORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBankInfoORMDo
	WriteDB() IBankInfoORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBankInfoORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBankInfoORMDo
	Not(conds ...gen.Condition) IBankInfoORMDo
	Or(conds ...gen.Condition) IBankInfoORMDo
	Select(conds ...field.Expr) IBankInfoORMDo
	Where(conds ...gen.Condition) IBankInfoORMDo
	Order(conds ...field.Expr) IBankInfoORMDo
	Distinct(cols ...field.Expr) IBankInfoORMDo
	Omit(cols ...field.Expr) IBankInfoORMDo
	Join(table schema.Tabler, on ...field.Expr) IBankInfoORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBankInfoORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBankInfoORMDo
	Group(cols ...field.Expr) IBankInfoORMDo
	Having(conds ...gen.Condition) IBankInfoORMDo
	Limit(limit int) IBankInfoORMDo
	Offset(offset int) IBankInfoORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBankInfoORMDo
	Unscoped() IBankInfoORMDo
	Create(values ...*accounting_servicev1.BankInfoORM) error
	CreateInBatches(values []*accounting_servicev1.BankInfoORM, batchSize int) error
	Save(values ...*accounting_servicev1.BankInfoORM) error
	First() (*accounting_servicev1.BankInfoORM, error)
	Take() (*accounting_servicev1.BankInfoORM, error)
	Last() (*accounting_servicev1.BankInfoORM, error)
	Find() ([]*accounting_servicev1.BankInfoORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.BankInfoORM, err error)
	FindInBatches(result *[]*accounting_servicev1.BankInfoORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.BankInfoORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBankInfoORMDo
	Assign(attrs ...field.AssignExpr) IBankInfoORMDo
	Joins(fields ...field.RelationField) IBankInfoORMDo
	Preload(fields ...field.RelationField) IBankInfoORMDo
	FirstOrInit() (*accounting_servicev1.BankInfoORM, error)
	FirstOrCreate() (*accounting_servicev1.BankInfoORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.BankInfoORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBankInfoORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.BankInfoORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.BankInfoORM, err error)
	CreateRecord(item accounting_servicev1.BankInfoORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.BankInfoORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.BankInfoORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.BankInfoORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.BankInfoORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b bankInfoORMDo) GetRecordByID(id int) (result accounting_servicev1.BankInfoORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM bank_infos ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b bankInfoORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.BankInfoORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM bank_infos ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (b bankInfoORMDo) CreateRecord(item accounting_servicev1.BankInfoORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO bank_infos (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (b bankInfoORMDo) UpdateRecordByID(id int, item accounting_servicev1.BankInfoORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE bank_infos SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b bankInfoORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM bank_infos ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (b bankInfoORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.BankInfoORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM bank_infos ORDER BY " + b.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (b bankInfoORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM bank_infos ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b bankInfoORMDo) GetByID(id uint64) (result accounting_servicev1.BankInfoORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM bank_infos ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b bankInfoORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.BankInfoORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM bank_infos ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b bankInfoORMDo) Debug() IBankInfoORMDo {
	return b.withDO(b.DO.Debug())
}

func (b bankInfoORMDo) WithContext(ctx context.Context) IBankInfoORMDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bankInfoORMDo) ReadDB() IBankInfoORMDo {
	return b.Clauses(dbresolver.Read)
}

func (b bankInfoORMDo) WriteDB() IBankInfoORMDo {
	return b.Clauses(dbresolver.Write)
}

func (b bankInfoORMDo) Session(config *gorm.Session) IBankInfoORMDo {
	return b.withDO(b.DO.Session(config))
}

func (b bankInfoORMDo) Clauses(conds ...clause.Expression) IBankInfoORMDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bankInfoORMDo) Returning(value interface{}, columns ...string) IBankInfoORMDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bankInfoORMDo) Not(conds ...gen.Condition) IBankInfoORMDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bankInfoORMDo) Or(conds ...gen.Condition) IBankInfoORMDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bankInfoORMDo) Select(conds ...field.Expr) IBankInfoORMDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bankInfoORMDo) Where(conds ...gen.Condition) IBankInfoORMDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bankInfoORMDo) Order(conds ...field.Expr) IBankInfoORMDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bankInfoORMDo) Distinct(cols ...field.Expr) IBankInfoORMDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bankInfoORMDo) Omit(cols ...field.Expr) IBankInfoORMDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bankInfoORMDo) Join(table schema.Tabler, on ...field.Expr) IBankInfoORMDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bankInfoORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBankInfoORMDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bankInfoORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IBankInfoORMDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bankInfoORMDo) Group(cols ...field.Expr) IBankInfoORMDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bankInfoORMDo) Having(conds ...gen.Condition) IBankInfoORMDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bankInfoORMDo) Limit(limit int) IBankInfoORMDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bankInfoORMDo) Offset(offset int) IBankInfoORMDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bankInfoORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBankInfoORMDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bankInfoORMDo) Unscoped() IBankInfoORMDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bankInfoORMDo) Create(values ...*accounting_servicev1.BankInfoORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bankInfoORMDo) CreateInBatches(values []*accounting_servicev1.BankInfoORM, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bankInfoORMDo) Save(values ...*accounting_servicev1.BankInfoORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bankInfoORMDo) First() (*accounting_servicev1.BankInfoORM, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BankInfoORM), nil
	}
}

func (b bankInfoORMDo) Take() (*accounting_servicev1.BankInfoORM, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BankInfoORM), nil
	}
}

func (b bankInfoORMDo) Last() (*accounting_servicev1.BankInfoORM, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BankInfoORM), nil
	}
}

func (b bankInfoORMDo) Find() ([]*accounting_servicev1.BankInfoORM, error) {
	result, err := b.DO.Find()
	return result.([]*accounting_servicev1.BankInfoORM), err
}

func (b bankInfoORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.BankInfoORM, err error) {
	buf := make([]*accounting_servicev1.BankInfoORM, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bankInfoORMDo) FindInBatches(result *[]*accounting_servicev1.BankInfoORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bankInfoORMDo) Attrs(attrs ...field.AssignExpr) IBankInfoORMDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bankInfoORMDo) Assign(attrs ...field.AssignExpr) IBankInfoORMDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bankInfoORMDo) Joins(fields ...field.RelationField) IBankInfoORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bankInfoORMDo) Preload(fields ...field.RelationField) IBankInfoORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bankInfoORMDo) FirstOrInit() (*accounting_servicev1.BankInfoORM, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BankInfoORM), nil
	}
}

func (b bankInfoORMDo) FirstOrCreate() (*accounting_servicev1.BankInfoORM, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BankInfoORM), nil
	}
}

func (b bankInfoORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.BankInfoORM, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bankInfoORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bankInfoORMDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bankInfoORMDo) Delete(models ...*accounting_servicev1.BankInfoORM) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bankInfoORMDo) withDO(do gen.Dao) *bankInfoORMDo {
	b.DO = *do.(*gen.DO)
	return b
}
