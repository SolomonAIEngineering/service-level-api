// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newEmployeePayrollRunORM(db *gorm.DB, opts ...gen.DOOption) employeePayrollRunORM {
	_employeePayrollRunORM := employeePayrollRunORM{}

	_employeePayrollRunORM.employeePayrollRunORMDo.UseDB(db, opts...)
	_employeePayrollRunORM.employeePayrollRunORMDo.UseModel(&accounting_servicev1.EmployeePayrollRunORM{})

	tableName := _employeePayrollRunORM.employeePayrollRunORMDo.TableName()
	_employeePayrollRunORM.ALL = field.NewAsterisk(tableName)
	_employeePayrollRunORM.CheckDate = field.NewTime(tableName, "check_date")
	_employeePayrollRunORM.CreatedAt = field.NewTime(tableName, "created_at")
	_employeePayrollRunORM.EmployeeId = field.NewUint64(tableName, "employee_id")
	_employeePayrollRunORM.EmployeeMergeAccountId = field.NewString(tableName, "employee_merge_account_id")
	_employeePayrollRunORM.EmployerPayrollRunId = field.NewUint64(tableName, "employer_payroll_run_id")
	_employeePayrollRunORM.EndDate = field.NewTime(tableName, "end_date")
	_employeePayrollRunORM.GrossPay = field.NewFloat64(tableName, "gross_pay")
	_employeePayrollRunORM.Id = field.NewUint64(tableName, "id")
	_employeePayrollRunORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_employeePayrollRunORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_employeePayrollRunORM.NetPay = field.NewFloat64(tableName, "net_pay")
	_employeePayrollRunORM.PayrollRunMergeAccountId = field.NewString(tableName, "payroll_run_merge_account_id")
	_employeePayrollRunORM.RemoteId = field.NewString(tableName, "remote_id")
	_employeePayrollRunORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_employeePayrollRunORM.StartDate = field.NewTime(tableName, "start_date")
	_employeePayrollRunORM.Deductions = employeePayrollRunORMHasManyDeductions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Deductions", "accounting_servicev1.DeductionORM"),
	}

	_employeePayrollRunORM.Earnings = employeePayrollRunORMHasManyEarnings{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Earnings", "accounting_servicev1.EarningORM"),
	}

	_employeePayrollRunORM.Taxes = employeePayrollRunORMHasManyTaxes{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Taxes", "accounting_servicev1.TaxORM"),
	}

	_employeePayrollRunORM.fillFieldMap()

	return _employeePayrollRunORM
}

type employeePayrollRunORM struct {
	employeePayrollRunORMDo

	ALL                      field.Asterisk
	CheckDate                field.Time
	CreatedAt                field.Time
	EmployeeId               field.Uint64
	EmployeeMergeAccountId   field.String
	EmployerPayrollRunId     field.Uint64
	EndDate                  field.Time
	GrossPay                 field.Float64
	Id                       field.Uint64
	MergeAccountId           field.String
	ModifiedAt               field.Time
	NetPay                   field.Float64
	PayrollRunMergeAccountId field.String
	RemoteId                 field.String
	RemoteWasDeleted         field.Bool
	StartDate                field.Time
	Deductions               employeePayrollRunORMHasManyDeductions

	Earnings employeePayrollRunORMHasManyEarnings

	Taxes employeePayrollRunORMHasManyTaxes

	fieldMap map[string]field.Expr
}

func (e employeePayrollRunORM) Table(newTableName string) *employeePayrollRunORM {
	e.employeePayrollRunORMDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e employeePayrollRunORM) As(alias string) *employeePayrollRunORM {
	e.employeePayrollRunORMDo.DO = *(e.employeePayrollRunORMDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *employeePayrollRunORM) updateTableName(table string) *employeePayrollRunORM {
	e.ALL = field.NewAsterisk(table)
	e.CheckDate = field.NewTime(table, "check_date")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.EmployeeId = field.NewUint64(table, "employee_id")
	e.EmployeeMergeAccountId = field.NewString(table, "employee_merge_account_id")
	e.EmployerPayrollRunId = field.NewUint64(table, "employer_payroll_run_id")
	e.EndDate = field.NewTime(table, "end_date")
	e.GrossPay = field.NewFloat64(table, "gross_pay")
	e.Id = field.NewUint64(table, "id")
	e.MergeAccountId = field.NewString(table, "merge_account_id")
	e.ModifiedAt = field.NewTime(table, "modified_at")
	e.NetPay = field.NewFloat64(table, "net_pay")
	e.PayrollRunMergeAccountId = field.NewString(table, "payroll_run_merge_account_id")
	e.RemoteId = field.NewString(table, "remote_id")
	e.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	e.StartDate = field.NewTime(table, "start_date")

	e.fillFieldMap()

	return e
}

func (e *employeePayrollRunORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *employeePayrollRunORM) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 18)
	e.fieldMap["check_date"] = e.CheckDate
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["employee_id"] = e.EmployeeId
	e.fieldMap["employee_merge_account_id"] = e.EmployeeMergeAccountId
	e.fieldMap["employer_payroll_run_id"] = e.EmployerPayrollRunId
	e.fieldMap["end_date"] = e.EndDate
	e.fieldMap["gross_pay"] = e.GrossPay
	e.fieldMap["id"] = e.Id
	e.fieldMap["merge_account_id"] = e.MergeAccountId
	e.fieldMap["modified_at"] = e.ModifiedAt
	e.fieldMap["net_pay"] = e.NetPay
	e.fieldMap["payroll_run_merge_account_id"] = e.PayrollRunMergeAccountId
	e.fieldMap["remote_id"] = e.RemoteId
	e.fieldMap["remote_was_deleted"] = e.RemoteWasDeleted
	e.fieldMap["start_date"] = e.StartDate

}

func (e employeePayrollRunORM) clone(db *gorm.DB) employeePayrollRunORM {
	e.employeePayrollRunORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e employeePayrollRunORM) replaceDB(db *gorm.DB) employeePayrollRunORM {
	e.employeePayrollRunORMDo.ReplaceDB(db)
	return e
}

type employeePayrollRunORMHasManyDeductions struct {
	db *gorm.DB

	field.RelationField
}

func (a employeePayrollRunORMHasManyDeductions) Where(conds ...field.Expr) *employeePayrollRunORMHasManyDeductions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeePayrollRunORMHasManyDeductions) WithContext(ctx context.Context) *employeePayrollRunORMHasManyDeductions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeePayrollRunORMHasManyDeductions) Session(session *gorm.Session) *employeePayrollRunORMHasManyDeductions {
	a.db = a.db.Session(session)
	return &a
}

func (a employeePayrollRunORMHasManyDeductions) Model(m *accounting_servicev1.EmployeePayrollRunORM) *employeePayrollRunORMHasManyDeductionsTx {
	return &employeePayrollRunORMHasManyDeductionsTx{a.db.Model(m).Association(a.Name())}
}

type employeePayrollRunORMHasManyDeductionsTx struct{ tx *gorm.Association }

func (a employeePayrollRunORMHasManyDeductionsTx) Find() (result []*accounting_servicev1.DeductionORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeePayrollRunORMHasManyDeductionsTx) Append(values ...*accounting_servicev1.DeductionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeePayrollRunORMHasManyDeductionsTx) Replace(values ...*accounting_servicev1.DeductionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeePayrollRunORMHasManyDeductionsTx) Delete(values ...*accounting_servicev1.DeductionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeePayrollRunORMHasManyDeductionsTx) Clear() error {
	return a.tx.Clear()
}

func (a employeePayrollRunORMHasManyDeductionsTx) Count() int64 {
	return a.tx.Count()
}

type employeePayrollRunORMHasManyEarnings struct {
	db *gorm.DB

	field.RelationField
}

func (a employeePayrollRunORMHasManyEarnings) Where(conds ...field.Expr) *employeePayrollRunORMHasManyEarnings {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeePayrollRunORMHasManyEarnings) WithContext(ctx context.Context) *employeePayrollRunORMHasManyEarnings {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeePayrollRunORMHasManyEarnings) Session(session *gorm.Session) *employeePayrollRunORMHasManyEarnings {
	a.db = a.db.Session(session)
	return &a
}

func (a employeePayrollRunORMHasManyEarnings) Model(m *accounting_servicev1.EmployeePayrollRunORM) *employeePayrollRunORMHasManyEarningsTx {
	return &employeePayrollRunORMHasManyEarningsTx{a.db.Model(m).Association(a.Name())}
}

type employeePayrollRunORMHasManyEarningsTx struct{ tx *gorm.Association }

func (a employeePayrollRunORMHasManyEarningsTx) Find() (result []*accounting_servicev1.EarningORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeePayrollRunORMHasManyEarningsTx) Append(values ...*accounting_servicev1.EarningORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeePayrollRunORMHasManyEarningsTx) Replace(values ...*accounting_servicev1.EarningORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeePayrollRunORMHasManyEarningsTx) Delete(values ...*accounting_servicev1.EarningORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeePayrollRunORMHasManyEarningsTx) Clear() error {
	return a.tx.Clear()
}

func (a employeePayrollRunORMHasManyEarningsTx) Count() int64 {
	return a.tx.Count()
}

type employeePayrollRunORMHasManyTaxes struct {
	db *gorm.DB

	field.RelationField
}

func (a employeePayrollRunORMHasManyTaxes) Where(conds ...field.Expr) *employeePayrollRunORMHasManyTaxes {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeePayrollRunORMHasManyTaxes) WithContext(ctx context.Context) *employeePayrollRunORMHasManyTaxes {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeePayrollRunORMHasManyTaxes) Session(session *gorm.Session) *employeePayrollRunORMHasManyTaxes {
	a.db = a.db.Session(session)
	return &a
}

func (a employeePayrollRunORMHasManyTaxes) Model(m *accounting_servicev1.EmployeePayrollRunORM) *employeePayrollRunORMHasManyTaxesTx {
	return &employeePayrollRunORMHasManyTaxesTx{a.db.Model(m).Association(a.Name())}
}

type employeePayrollRunORMHasManyTaxesTx struct{ tx *gorm.Association }

func (a employeePayrollRunORMHasManyTaxesTx) Find() (result []*accounting_servicev1.TaxORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeePayrollRunORMHasManyTaxesTx) Append(values ...*accounting_servicev1.TaxORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeePayrollRunORMHasManyTaxesTx) Replace(values ...*accounting_servicev1.TaxORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeePayrollRunORMHasManyTaxesTx) Delete(values ...*accounting_servicev1.TaxORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeePayrollRunORMHasManyTaxesTx) Clear() error {
	return a.tx.Clear()
}

func (a employeePayrollRunORMHasManyTaxesTx) Count() int64 {
	return a.tx.Count()
}

type employeePayrollRunORMDo struct{ gen.DO }

type IEmployeePayrollRunORMDo interface {
	gen.SubQuery
	Debug() IEmployeePayrollRunORMDo
	WithContext(ctx context.Context) IEmployeePayrollRunORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmployeePayrollRunORMDo
	WriteDB() IEmployeePayrollRunORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmployeePayrollRunORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmployeePayrollRunORMDo
	Not(conds ...gen.Condition) IEmployeePayrollRunORMDo
	Or(conds ...gen.Condition) IEmployeePayrollRunORMDo
	Select(conds ...field.Expr) IEmployeePayrollRunORMDo
	Where(conds ...gen.Condition) IEmployeePayrollRunORMDo
	Order(conds ...field.Expr) IEmployeePayrollRunORMDo
	Distinct(cols ...field.Expr) IEmployeePayrollRunORMDo
	Omit(cols ...field.Expr) IEmployeePayrollRunORMDo
	Join(table schema.Tabler, on ...field.Expr) IEmployeePayrollRunORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmployeePayrollRunORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmployeePayrollRunORMDo
	Group(cols ...field.Expr) IEmployeePayrollRunORMDo
	Having(conds ...gen.Condition) IEmployeePayrollRunORMDo
	Limit(limit int) IEmployeePayrollRunORMDo
	Offset(offset int) IEmployeePayrollRunORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployeePayrollRunORMDo
	Unscoped() IEmployeePayrollRunORMDo
	Create(values ...*accounting_servicev1.EmployeePayrollRunORM) error
	CreateInBatches(values []*accounting_servicev1.EmployeePayrollRunORM, batchSize int) error
	Save(values ...*accounting_servicev1.EmployeePayrollRunORM) error
	First() (*accounting_servicev1.EmployeePayrollRunORM, error)
	Take() (*accounting_servicev1.EmployeePayrollRunORM, error)
	Last() (*accounting_servicev1.EmployeePayrollRunORM, error)
	Find() ([]*accounting_servicev1.EmployeePayrollRunORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.EmployeePayrollRunORM, err error)
	FindInBatches(result *[]*accounting_servicev1.EmployeePayrollRunORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.EmployeePayrollRunORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmployeePayrollRunORMDo
	Assign(attrs ...field.AssignExpr) IEmployeePayrollRunORMDo
	Joins(fields ...field.RelationField) IEmployeePayrollRunORMDo
	Preload(fields ...field.RelationField) IEmployeePayrollRunORMDo
	FirstOrInit() (*accounting_servicev1.EmployeePayrollRunORM, error)
	FirstOrCreate() (*accounting_servicev1.EmployeePayrollRunORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.EmployeePayrollRunORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmployeePayrollRunORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.EmployeePayrollRunORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.EmployeePayrollRunORM, err error)
	CreateRecord(item accounting_servicev1.EmployeePayrollRunORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.EmployeePayrollRunORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.EmployeePayrollRunORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.EmployeePayrollRunORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.EmployeePayrollRunORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeePayrollRunORMDo) GetRecordByID(id int) (result accounting_servicev1.EmployeePayrollRunORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employee_payroll_runs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e employeePayrollRunORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.EmployeePayrollRunORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employee_payroll_runs ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (e employeePayrollRunORMDo) CreateRecord(item accounting_servicev1.EmployeePayrollRunORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO employee_payroll_runs (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeePayrollRunORMDo) UpdateRecordByID(id int, item accounting_servicev1.EmployeePayrollRunORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE employee_payroll_runs SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeePayrollRunORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM employee_payroll_runs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (e employeePayrollRunORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.EmployeePayrollRunORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employee_payroll_runs ORDER BY " + e.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (e employeePayrollRunORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM employee_payroll_runs ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeePayrollRunORMDo) GetByID(id uint64) (result accounting_servicev1.EmployeePayrollRunORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employee_payroll_runs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e employeePayrollRunORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.EmployeePayrollRunORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employee_payroll_runs ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e employeePayrollRunORMDo) Debug() IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Debug())
}

func (e employeePayrollRunORMDo) WithContext(ctx context.Context) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e employeePayrollRunORMDo) ReadDB() IEmployeePayrollRunORMDo {
	return e.Clauses(dbresolver.Read)
}

func (e employeePayrollRunORMDo) WriteDB() IEmployeePayrollRunORMDo {
	return e.Clauses(dbresolver.Write)
}

func (e employeePayrollRunORMDo) Session(config *gorm.Session) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Session(config))
}

func (e employeePayrollRunORMDo) Clauses(conds ...clause.Expression) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e employeePayrollRunORMDo) Returning(value interface{}, columns ...string) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e employeePayrollRunORMDo) Not(conds ...gen.Condition) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e employeePayrollRunORMDo) Or(conds ...gen.Condition) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e employeePayrollRunORMDo) Select(conds ...field.Expr) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e employeePayrollRunORMDo) Where(conds ...gen.Condition) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e employeePayrollRunORMDo) Order(conds ...field.Expr) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e employeePayrollRunORMDo) Distinct(cols ...field.Expr) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e employeePayrollRunORMDo) Omit(cols ...field.Expr) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e employeePayrollRunORMDo) Join(table schema.Tabler, on ...field.Expr) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e employeePayrollRunORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e employeePayrollRunORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e employeePayrollRunORMDo) Group(cols ...field.Expr) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e employeePayrollRunORMDo) Having(conds ...gen.Condition) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e employeePayrollRunORMDo) Limit(limit int) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e employeePayrollRunORMDo) Offset(offset int) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e employeePayrollRunORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e employeePayrollRunORMDo) Unscoped() IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Unscoped())
}

func (e employeePayrollRunORMDo) Create(values ...*accounting_servicev1.EmployeePayrollRunORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e employeePayrollRunORMDo) CreateInBatches(values []*accounting_servicev1.EmployeePayrollRunORM, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e employeePayrollRunORMDo) Save(values ...*accounting_servicev1.EmployeePayrollRunORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e employeePayrollRunORMDo) First() (*accounting_servicev1.EmployeePayrollRunORM, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeePayrollRunORM), nil
	}
}

func (e employeePayrollRunORMDo) Take() (*accounting_servicev1.EmployeePayrollRunORM, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeePayrollRunORM), nil
	}
}

func (e employeePayrollRunORMDo) Last() (*accounting_servicev1.EmployeePayrollRunORM, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeePayrollRunORM), nil
	}
}

func (e employeePayrollRunORMDo) Find() ([]*accounting_servicev1.EmployeePayrollRunORM, error) {
	result, err := e.DO.Find()
	return result.([]*accounting_servicev1.EmployeePayrollRunORM), err
}

func (e employeePayrollRunORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.EmployeePayrollRunORM, err error) {
	buf := make([]*accounting_servicev1.EmployeePayrollRunORM, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e employeePayrollRunORMDo) FindInBatches(result *[]*accounting_servicev1.EmployeePayrollRunORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e employeePayrollRunORMDo) Attrs(attrs ...field.AssignExpr) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e employeePayrollRunORMDo) Assign(attrs ...field.AssignExpr) IEmployeePayrollRunORMDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e employeePayrollRunORMDo) Joins(fields ...field.RelationField) IEmployeePayrollRunORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e employeePayrollRunORMDo) Preload(fields ...field.RelationField) IEmployeePayrollRunORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e employeePayrollRunORMDo) FirstOrInit() (*accounting_servicev1.EmployeePayrollRunORM, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeePayrollRunORM), nil
	}
}

func (e employeePayrollRunORMDo) FirstOrCreate() (*accounting_servicev1.EmployeePayrollRunORM, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeePayrollRunORM), nil
	}
}

func (e employeePayrollRunORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.EmployeePayrollRunORM, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e employeePayrollRunORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e employeePayrollRunORMDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e employeePayrollRunORMDo) Delete(models ...*accounting_servicev1.EmployeePayrollRunORM) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *employeePayrollRunORMDo) withDO(do gen.Dao) *employeePayrollRunORMDo {
	e.DO = *do.(*gen.DO)
	return e
}
