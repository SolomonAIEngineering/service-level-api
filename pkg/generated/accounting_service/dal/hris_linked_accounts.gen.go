// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newHrisLinkedAccountORM(db *gorm.DB, opts ...gen.DOOption) hrisLinkedAccountORM {
	_hrisLinkedAccountORM := hrisLinkedAccountORM{}

	_hrisLinkedAccountORM.hrisLinkedAccountORMDo.UseDB(db, opts...)
	_hrisLinkedAccountORM.hrisLinkedAccountORMDo.UseModel(&accounting_servicev1.HrisLinkedAccountORM{})

	tableName := _hrisLinkedAccountORM.hrisLinkedAccountORMDo.TableName()
	_hrisLinkedAccountORM.ALL = field.NewAsterisk(tableName)
	_hrisLinkedAccountORM.HrisIntegrationMergeLinkId = field.NewUint64(tableName, "hris_integration_merge_link_id")
	_hrisLinkedAccountORM.Id = field.NewUint64(tableName, "id")
	_hrisLinkedAccountORM.Profile = hrisLinkedAccountORMHasOneProfile{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Profile", "accounting_servicev1.CompanyProfileORM"),
	}

	_hrisLinkedAccountORM.BenefitPlans = hrisLinkedAccountORMHasManyBenefitPlans{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BenefitPlans", "accounting_servicev1.EmployerBenefitsORM"),
		EmployeeBenefits: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("BenefitPlans.EmployeeBenefits", "accounting_servicev1.EmployeeBenefitsORM"),
		},
	}

	_hrisLinkedAccountORM.Employees = hrisLinkedAccountORMHasManyEmployees{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Employees", "accounting_servicev1.EmployeeORM"),
		Manager: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employees.Manager", "accounting_servicev1.EmployeeORM"),
		},
		Group: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employees.Group", "accounting_servicev1.GroupORM"),
		},
		HomeLocation: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employees.HomeLocation", "accounting_servicev1.LocationAddressORM"),
		},
		PayTimeOffBalance: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employees.PayTimeOffBalance", "accounting_servicev1.EmployeTimeOffBalanceORM"),
		},
		WorkLocation: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employees.WorkLocation", "accounting_servicev1.LocationAddressORM"),
		},
		BankAccounts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employees.BankAccounts", "accounting_servicev1.BankInfoORM"),
		},
		Benefits: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employees.Benefits", "accounting_servicev1.EmployeeBenefitsORM"),
		},
		Dependents: struct {
			field.RelationField
			HomeLocation struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employees.Dependents", "accounting_servicev1.DependentsORM"),
			HomeLocation: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employees.Dependents.HomeLocation", "accounting_servicev1.LocationAddressORM"),
			},
		},
		Employments: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employees.Employments", "accounting_servicev1.EmployeeJobPositionAtCompanyORM"),
		},
		PayrollRuns: struct {
			field.RelationField
			Deductions struct {
				field.RelationField
			}
			Earnings struct {
				field.RelationField
			}
			Taxes struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employees.PayrollRuns", "accounting_servicev1.EmployeePayrollRunORM"),
			Deductions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employees.PayrollRuns.Deductions", "accounting_servicev1.DeductionORM"),
			},
			Earnings: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employees.PayrollRuns.Earnings", "accounting_servicev1.EarningORM"),
			},
			Taxes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employees.PayrollRuns.Taxes", "accounting_servicev1.TaxORM"),
			},
		},
	}

	_hrisLinkedAccountORM.PayrollRuns = hrisLinkedAccountORMHasManyPayrollRuns{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PayrollRuns", "accounting_servicev1.EmployerPayrollRunORM"),
		PayrollRuns: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("PayrollRuns.PayrollRuns", "accounting_servicev1.EmployeePayrollRunORM"),
		},
	}

	_hrisLinkedAccountORM.fillFieldMap()

	return _hrisLinkedAccountORM
}

type hrisLinkedAccountORM struct {
	hrisLinkedAccountORMDo

	ALL                        field.Asterisk
	HrisIntegrationMergeLinkId field.Uint64
	Id                         field.Uint64
	Profile                    hrisLinkedAccountORMHasOneProfile

	BenefitPlans hrisLinkedAccountORMHasManyBenefitPlans

	Employees hrisLinkedAccountORMHasManyEmployees

	PayrollRuns hrisLinkedAccountORMHasManyPayrollRuns

	fieldMap map[string]field.Expr
}

func (h hrisLinkedAccountORM) Table(newTableName string) *hrisLinkedAccountORM {
	h.hrisLinkedAccountORMDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hrisLinkedAccountORM) As(alias string) *hrisLinkedAccountORM {
	h.hrisLinkedAccountORMDo.DO = *(h.hrisLinkedAccountORMDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hrisLinkedAccountORM) updateTableName(table string) *hrisLinkedAccountORM {
	h.ALL = field.NewAsterisk(table)
	h.HrisIntegrationMergeLinkId = field.NewUint64(table, "hris_integration_merge_link_id")
	h.Id = field.NewUint64(table, "id")

	h.fillFieldMap()

	return h
}

func (h *hrisLinkedAccountORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hrisLinkedAccountORM) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 6)
	h.fieldMap["hris_integration_merge_link_id"] = h.HrisIntegrationMergeLinkId
	h.fieldMap["id"] = h.Id

}

func (h hrisLinkedAccountORM) clone(db *gorm.DB) hrisLinkedAccountORM {
	h.hrisLinkedAccountORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hrisLinkedAccountORM) replaceDB(db *gorm.DB) hrisLinkedAccountORM {
	h.hrisLinkedAccountORMDo.ReplaceDB(db)
	return h
}

type hrisLinkedAccountORMHasOneProfile struct {
	db *gorm.DB

	field.RelationField
}

func (a hrisLinkedAccountORMHasOneProfile) Where(conds ...field.Expr) *hrisLinkedAccountORMHasOneProfile {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a hrisLinkedAccountORMHasOneProfile) WithContext(ctx context.Context) *hrisLinkedAccountORMHasOneProfile {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a hrisLinkedAccountORMHasOneProfile) Session(session *gorm.Session) *hrisLinkedAccountORMHasOneProfile {
	a.db = a.db.Session(session)
	return &a
}

func (a hrisLinkedAccountORMHasOneProfile) Model(m *accounting_servicev1.HrisLinkedAccountORM) *hrisLinkedAccountORMHasOneProfileTx {
	return &hrisLinkedAccountORMHasOneProfileTx{a.db.Model(m).Association(a.Name())}
}

type hrisLinkedAccountORMHasOneProfileTx struct{ tx *gorm.Association }

func (a hrisLinkedAccountORMHasOneProfileTx) Find() (result *accounting_servicev1.CompanyProfileORM, err error) {
	return result, a.tx.Find(&result)
}

func (a hrisLinkedAccountORMHasOneProfileTx) Append(values ...*accounting_servicev1.CompanyProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a hrisLinkedAccountORMHasOneProfileTx) Replace(values ...*accounting_servicev1.CompanyProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a hrisLinkedAccountORMHasOneProfileTx) Delete(values ...*accounting_servicev1.CompanyProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a hrisLinkedAccountORMHasOneProfileTx) Clear() error {
	return a.tx.Clear()
}

func (a hrisLinkedAccountORMHasOneProfileTx) Count() int64 {
	return a.tx.Count()
}

type hrisLinkedAccountORMHasManyBenefitPlans struct {
	db *gorm.DB

	field.RelationField

	EmployeeBenefits struct {
		field.RelationField
	}
}

func (a hrisLinkedAccountORMHasManyBenefitPlans) Where(conds ...field.Expr) *hrisLinkedAccountORMHasManyBenefitPlans {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a hrisLinkedAccountORMHasManyBenefitPlans) WithContext(ctx context.Context) *hrisLinkedAccountORMHasManyBenefitPlans {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a hrisLinkedAccountORMHasManyBenefitPlans) Session(session *gorm.Session) *hrisLinkedAccountORMHasManyBenefitPlans {
	a.db = a.db.Session(session)
	return &a
}

func (a hrisLinkedAccountORMHasManyBenefitPlans) Model(m *accounting_servicev1.HrisLinkedAccountORM) *hrisLinkedAccountORMHasManyBenefitPlansTx {
	return &hrisLinkedAccountORMHasManyBenefitPlansTx{a.db.Model(m).Association(a.Name())}
}

type hrisLinkedAccountORMHasManyBenefitPlansTx struct{ tx *gorm.Association }

func (a hrisLinkedAccountORMHasManyBenefitPlansTx) Find() (result []*accounting_servicev1.EmployerBenefitsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a hrisLinkedAccountORMHasManyBenefitPlansTx) Append(values ...*accounting_servicev1.EmployerBenefitsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a hrisLinkedAccountORMHasManyBenefitPlansTx) Replace(values ...*accounting_servicev1.EmployerBenefitsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a hrisLinkedAccountORMHasManyBenefitPlansTx) Delete(values ...*accounting_servicev1.EmployerBenefitsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a hrisLinkedAccountORMHasManyBenefitPlansTx) Clear() error {
	return a.tx.Clear()
}

func (a hrisLinkedAccountORMHasManyBenefitPlansTx) Count() int64 {
	return a.tx.Count()
}

type hrisLinkedAccountORMHasManyEmployees struct {
	db *gorm.DB

	field.RelationField

	Manager struct {
		field.RelationField
	}
	Group struct {
		field.RelationField
	}
	HomeLocation struct {
		field.RelationField
	}
	PayTimeOffBalance struct {
		field.RelationField
	}
	WorkLocation struct {
		field.RelationField
	}
	BankAccounts struct {
		field.RelationField
	}
	Benefits struct {
		field.RelationField
	}
	Dependents struct {
		field.RelationField
		HomeLocation struct {
			field.RelationField
		}
	}
	Employments struct {
		field.RelationField
	}
	PayrollRuns struct {
		field.RelationField
		Deductions struct {
			field.RelationField
		}
		Earnings struct {
			field.RelationField
		}
		Taxes struct {
			field.RelationField
		}
	}
}

func (a hrisLinkedAccountORMHasManyEmployees) Where(conds ...field.Expr) *hrisLinkedAccountORMHasManyEmployees {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a hrisLinkedAccountORMHasManyEmployees) WithContext(ctx context.Context) *hrisLinkedAccountORMHasManyEmployees {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a hrisLinkedAccountORMHasManyEmployees) Session(session *gorm.Session) *hrisLinkedAccountORMHasManyEmployees {
	a.db = a.db.Session(session)
	return &a
}

func (a hrisLinkedAccountORMHasManyEmployees) Model(m *accounting_servicev1.HrisLinkedAccountORM) *hrisLinkedAccountORMHasManyEmployeesTx {
	return &hrisLinkedAccountORMHasManyEmployeesTx{a.db.Model(m).Association(a.Name())}
}

type hrisLinkedAccountORMHasManyEmployeesTx struct{ tx *gorm.Association }

func (a hrisLinkedAccountORMHasManyEmployeesTx) Find() (result []*accounting_servicev1.EmployeeORM, err error) {
	return result, a.tx.Find(&result)
}

func (a hrisLinkedAccountORMHasManyEmployeesTx) Append(values ...*accounting_servicev1.EmployeeORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a hrisLinkedAccountORMHasManyEmployeesTx) Replace(values ...*accounting_servicev1.EmployeeORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a hrisLinkedAccountORMHasManyEmployeesTx) Delete(values ...*accounting_servicev1.EmployeeORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a hrisLinkedAccountORMHasManyEmployeesTx) Clear() error {
	return a.tx.Clear()
}

func (a hrisLinkedAccountORMHasManyEmployeesTx) Count() int64 {
	return a.tx.Count()
}

type hrisLinkedAccountORMHasManyPayrollRuns struct {
	db *gorm.DB

	field.RelationField

	PayrollRuns struct {
		field.RelationField
	}
}

func (a hrisLinkedAccountORMHasManyPayrollRuns) Where(conds ...field.Expr) *hrisLinkedAccountORMHasManyPayrollRuns {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a hrisLinkedAccountORMHasManyPayrollRuns) WithContext(ctx context.Context) *hrisLinkedAccountORMHasManyPayrollRuns {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a hrisLinkedAccountORMHasManyPayrollRuns) Session(session *gorm.Session) *hrisLinkedAccountORMHasManyPayrollRuns {
	a.db = a.db.Session(session)
	return &a
}

func (a hrisLinkedAccountORMHasManyPayrollRuns) Model(m *accounting_servicev1.HrisLinkedAccountORM) *hrisLinkedAccountORMHasManyPayrollRunsTx {
	return &hrisLinkedAccountORMHasManyPayrollRunsTx{a.db.Model(m).Association(a.Name())}
}

type hrisLinkedAccountORMHasManyPayrollRunsTx struct{ tx *gorm.Association }

func (a hrisLinkedAccountORMHasManyPayrollRunsTx) Find() (result []*accounting_servicev1.EmployerPayrollRunORM, err error) {
	return result, a.tx.Find(&result)
}

func (a hrisLinkedAccountORMHasManyPayrollRunsTx) Append(values ...*accounting_servicev1.EmployerPayrollRunORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a hrisLinkedAccountORMHasManyPayrollRunsTx) Replace(values ...*accounting_servicev1.EmployerPayrollRunORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a hrisLinkedAccountORMHasManyPayrollRunsTx) Delete(values ...*accounting_servicev1.EmployerPayrollRunORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a hrisLinkedAccountORMHasManyPayrollRunsTx) Clear() error {
	return a.tx.Clear()
}

func (a hrisLinkedAccountORMHasManyPayrollRunsTx) Count() int64 {
	return a.tx.Count()
}

type hrisLinkedAccountORMDo struct{ gen.DO }

type IHrisLinkedAccountORMDo interface {
	gen.SubQuery
	Debug() IHrisLinkedAccountORMDo
	WithContext(ctx context.Context) IHrisLinkedAccountORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHrisLinkedAccountORMDo
	WriteDB() IHrisLinkedAccountORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHrisLinkedAccountORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHrisLinkedAccountORMDo
	Not(conds ...gen.Condition) IHrisLinkedAccountORMDo
	Or(conds ...gen.Condition) IHrisLinkedAccountORMDo
	Select(conds ...field.Expr) IHrisLinkedAccountORMDo
	Where(conds ...gen.Condition) IHrisLinkedAccountORMDo
	Order(conds ...field.Expr) IHrisLinkedAccountORMDo
	Distinct(cols ...field.Expr) IHrisLinkedAccountORMDo
	Omit(cols ...field.Expr) IHrisLinkedAccountORMDo
	Join(table schema.Tabler, on ...field.Expr) IHrisLinkedAccountORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHrisLinkedAccountORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHrisLinkedAccountORMDo
	Group(cols ...field.Expr) IHrisLinkedAccountORMDo
	Having(conds ...gen.Condition) IHrisLinkedAccountORMDo
	Limit(limit int) IHrisLinkedAccountORMDo
	Offset(offset int) IHrisLinkedAccountORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHrisLinkedAccountORMDo
	Unscoped() IHrisLinkedAccountORMDo
	Create(values ...*accounting_servicev1.HrisLinkedAccountORM) error
	CreateInBatches(values []*accounting_servicev1.HrisLinkedAccountORM, batchSize int) error
	Save(values ...*accounting_servicev1.HrisLinkedAccountORM) error
	First() (*accounting_servicev1.HrisLinkedAccountORM, error)
	Take() (*accounting_servicev1.HrisLinkedAccountORM, error)
	Last() (*accounting_servicev1.HrisLinkedAccountORM, error)
	Find() ([]*accounting_servicev1.HrisLinkedAccountORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.HrisLinkedAccountORM, err error)
	FindInBatches(result *[]*accounting_servicev1.HrisLinkedAccountORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.HrisLinkedAccountORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHrisLinkedAccountORMDo
	Assign(attrs ...field.AssignExpr) IHrisLinkedAccountORMDo
	Joins(fields ...field.RelationField) IHrisLinkedAccountORMDo
	Preload(fields ...field.RelationField) IHrisLinkedAccountORMDo
	FirstOrInit() (*accounting_servicev1.HrisLinkedAccountORM, error)
	FirstOrCreate() (*accounting_servicev1.HrisLinkedAccountORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.HrisLinkedAccountORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHrisLinkedAccountORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.HrisLinkedAccountORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.HrisLinkedAccountORM, err error)
	CreateRecord(item accounting_servicev1.HrisLinkedAccountORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.HrisLinkedAccountORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.HrisLinkedAccountORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.HrisLinkedAccountORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.HrisLinkedAccountORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (h hrisLinkedAccountORMDo) GetRecordByID(id int) (result accounting_servicev1.HrisLinkedAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM hris_linked_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (h hrisLinkedAccountORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.HrisLinkedAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM hris_linked_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (h hrisLinkedAccountORMDo) CreateRecord(item accounting_servicev1.HrisLinkedAccountORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO hris_linked_accounts (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (h hrisLinkedAccountORMDo) UpdateRecordByID(id int, item accounting_servicev1.HrisLinkedAccountORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE hris_linked_accounts SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (h hrisLinkedAccountORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM hris_linked_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (h hrisLinkedAccountORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.HrisLinkedAccountORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM hris_linked_accounts ORDER BY " + h.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (h hrisLinkedAccountORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM hris_linked_accounts ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (h hrisLinkedAccountORMDo) GetByID(id uint64) (result accounting_servicev1.HrisLinkedAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM hris_linked_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (h hrisLinkedAccountORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.HrisLinkedAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM hris_linked_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (h hrisLinkedAccountORMDo) Debug() IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Debug())
}

func (h hrisLinkedAccountORMDo) WithContext(ctx context.Context) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hrisLinkedAccountORMDo) ReadDB() IHrisLinkedAccountORMDo {
	return h.Clauses(dbresolver.Read)
}

func (h hrisLinkedAccountORMDo) WriteDB() IHrisLinkedAccountORMDo {
	return h.Clauses(dbresolver.Write)
}

func (h hrisLinkedAccountORMDo) Session(config *gorm.Session) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Session(config))
}

func (h hrisLinkedAccountORMDo) Clauses(conds ...clause.Expression) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hrisLinkedAccountORMDo) Returning(value interface{}, columns ...string) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hrisLinkedAccountORMDo) Not(conds ...gen.Condition) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hrisLinkedAccountORMDo) Or(conds ...gen.Condition) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hrisLinkedAccountORMDo) Select(conds ...field.Expr) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hrisLinkedAccountORMDo) Where(conds ...gen.Condition) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hrisLinkedAccountORMDo) Order(conds ...field.Expr) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hrisLinkedAccountORMDo) Distinct(cols ...field.Expr) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hrisLinkedAccountORMDo) Omit(cols ...field.Expr) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hrisLinkedAccountORMDo) Join(table schema.Tabler, on ...field.Expr) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hrisLinkedAccountORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hrisLinkedAccountORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hrisLinkedAccountORMDo) Group(cols ...field.Expr) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hrisLinkedAccountORMDo) Having(conds ...gen.Condition) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hrisLinkedAccountORMDo) Limit(limit int) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hrisLinkedAccountORMDo) Offset(offset int) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hrisLinkedAccountORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hrisLinkedAccountORMDo) Unscoped() IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hrisLinkedAccountORMDo) Create(values ...*accounting_servicev1.HrisLinkedAccountORM) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hrisLinkedAccountORMDo) CreateInBatches(values []*accounting_servicev1.HrisLinkedAccountORM, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hrisLinkedAccountORMDo) Save(values ...*accounting_servicev1.HrisLinkedAccountORM) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hrisLinkedAccountORMDo) First() (*accounting_servicev1.HrisLinkedAccountORM, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.HrisLinkedAccountORM), nil
	}
}

func (h hrisLinkedAccountORMDo) Take() (*accounting_servicev1.HrisLinkedAccountORM, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.HrisLinkedAccountORM), nil
	}
}

func (h hrisLinkedAccountORMDo) Last() (*accounting_servicev1.HrisLinkedAccountORM, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.HrisLinkedAccountORM), nil
	}
}

func (h hrisLinkedAccountORMDo) Find() ([]*accounting_servicev1.HrisLinkedAccountORM, error) {
	result, err := h.DO.Find()
	return result.([]*accounting_servicev1.HrisLinkedAccountORM), err
}

func (h hrisLinkedAccountORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.HrisLinkedAccountORM, err error) {
	buf := make([]*accounting_servicev1.HrisLinkedAccountORM, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hrisLinkedAccountORMDo) FindInBatches(result *[]*accounting_servicev1.HrisLinkedAccountORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hrisLinkedAccountORMDo) Attrs(attrs ...field.AssignExpr) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hrisLinkedAccountORMDo) Assign(attrs ...field.AssignExpr) IHrisLinkedAccountORMDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hrisLinkedAccountORMDo) Joins(fields ...field.RelationField) IHrisLinkedAccountORMDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hrisLinkedAccountORMDo) Preload(fields ...field.RelationField) IHrisLinkedAccountORMDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hrisLinkedAccountORMDo) FirstOrInit() (*accounting_servicev1.HrisLinkedAccountORM, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.HrisLinkedAccountORM), nil
	}
}

func (h hrisLinkedAccountORMDo) FirstOrCreate() (*accounting_servicev1.HrisLinkedAccountORM, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.HrisLinkedAccountORM), nil
	}
}

func (h hrisLinkedAccountORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.HrisLinkedAccountORM, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hrisLinkedAccountORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hrisLinkedAccountORMDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hrisLinkedAccountORMDo) Delete(models ...*accounting_servicev1.HrisLinkedAccountORM) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hrisLinkedAccountORMDo) withDO(do gen.Dao) *hrisLinkedAccountORMDo {
	h.DO = *do.(*gen.DO)
	return h
}
