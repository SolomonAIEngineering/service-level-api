// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newEmployeeBenefitsORM(db *gorm.DB, opts ...gen.DOOption) employeeBenefitsORM {
	_employeeBenefitsORM := employeeBenefitsORM{}

	_employeeBenefitsORM.employeeBenefitsORMDo.UseDB(db, opts...)
	_employeeBenefitsORM.employeeBenefitsORMDo.UseModel(&accounting_servicev1.EmployeeBenefitsORM{})

	tableName := _employeeBenefitsORM.employeeBenefitsORMDo.TableName()
	_employeeBenefitsORM.ALL = field.NewAsterisk(tableName)
	_employeeBenefitsORM.BenefitPlanMergeAccountId = field.NewString(tableName, "benefit_plan_merge_account_id")
	_employeeBenefitsORM.CompanyContribution = field.NewUint64(tableName, "company_contribution")
	_employeeBenefitsORM.CreatedAt = field.NewTime(tableName, "created_at")
	_employeeBenefitsORM.EmployeeContribution = field.NewUint64(tableName, "employee_contribution")
	_employeeBenefitsORM.EmployeeId = field.NewUint64(tableName, "employee_id")
	_employeeBenefitsORM.EmployeeMergeAccountId = field.NewString(tableName, "employee_merge_account_id")
	_employeeBenefitsORM.EmployerBenefitsId = field.NewUint64(tableName, "employer_benefits_id")
	_employeeBenefitsORM.EndDate = field.NewTime(tableName, "end_date")
	_employeeBenefitsORM.Id = field.NewUint64(tableName, "id")
	_employeeBenefitsORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_employeeBenefitsORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_employeeBenefitsORM.ProviderName = field.NewString(tableName, "provider_name")
	_employeeBenefitsORM.RemoteId = field.NewString(tableName, "remote_id")
	_employeeBenefitsORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_employeeBenefitsORM.StartDate = field.NewTime(tableName, "start_date")

	_employeeBenefitsORM.fillFieldMap()

	return _employeeBenefitsORM
}

type employeeBenefitsORM struct {
	employeeBenefitsORMDo

	ALL                       field.Asterisk
	BenefitPlanMergeAccountId field.String
	CompanyContribution       field.Uint64
	CreatedAt                 field.Time
	EmployeeContribution      field.Uint64
	EmployeeId                field.Uint64
	EmployeeMergeAccountId    field.String
	EmployerBenefitsId        field.Uint64
	EndDate                   field.Time
	Id                        field.Uint64
	MergeAccountId            field.String
	ModifiedAt                field.Time
	ProviderName              field.String
	RemoteId                  field.String
	RemoteWasDeleted          field.Bool
	StartDate                 field.Time

	fieldMap map[string]field.Expr
}

func (e employeeBenefitsORM) Table(newTableName string) *employeeBenefitsORM {
	e.employeeBenefitsORMDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e employeeBenefitsORM) As(alias string) *employeeBenefitsORM {
	e.employeeBenefitsORMDo.DO = *(e.employeeBenefitsORMDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *employeeBenefitsORM) updateTableName(table string) *employeeBenefitsORM {
	e.ALL = field.NewAsterisk(table)
	e.BenefitPlanMergeAccountId = field.NewString(table, "benefit_plan_merge_account_id")
	e.CompanyContribution = field.NewUint64(table, "company_contribution")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.EmployeeContribution = field.NewUint64(table, "employee_contribution")
	e.EmployeeId = field.NewUint64(table, "employee_id")
	e.EmployeeMergeAccountId = field.NewString(table, "employee_merge_account_id")
	e.EmployerBenefitsId = field.NewUint64(table, "employer_benefits_id")
	e.EndDate = field.NewTime(table, "end_date")
	e.Id = field.NewUint64(table, "id")
	e.MergeAccountId = field.NewString(table, "merge_account_id")
	e.ModifiedAt = field.NewTime(table, "modified_at")
	e.ProviderName = field.NewString(table, "provider_name")
	e.RemoteId = field.NewString(table, "remote_id")
	e.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	e.StartDate = field.NewTime(table, "start_date")

	e.fillFieldMap()

	return e
}

func (e *employeeBenefitsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *employeeBenefitsORM) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 15)
	e.fieldMap["benefit_plan_merge_account_id"] = e.BenefitPlanMergeAccountId
	e.fieldMap["company_contribution"] = e.CompanyContribution
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["employee_contribution"] = e.EmployeeContribution
	e.fieldMap["employee_id"] = e.EmployeeId
	e.fieldMap["employee_merge_account_id"] = e.EmployeeMergeAccountId
	e.fieldMap["employer_benefits_id"] = e.EmployerBenefitsId
	e.fieldMap["end_date"] = e.EndDate
	e.fieldMap["id"] = e.Id
	e.fieldMap["merge_account_id"] = e.MergeAccountId
	e.fieldMap["modified_at"] = e.ModifiedAt
	e.fieldMap["provider_name"] = e.ProviderName
	e.fieldMap["remote_id"] = e.RemoteId
	e.fieldMap["remote_was_deleted"] = e.RemoteWasDeleted
	e.fieldMap["start_date"] = e.StartDate
}

func (e employeeBenefitsORM) clone(db *gorm.DB) employeeBenefitsORM {
	e.employeeBenefitsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e employeeBenefitsORM) replaceDB(db *gorm.DB) employeeBenefitsORM {
	e.employeeBenefitsORMDo.ReplaceDB(db)
	return e
}

type employeeBenefitsORMDo struct{ gen.DO }

type IEmployeeBenefitsORMDo interface {
	gen.SubQuery
	Debug() IEmployeeBenefitsORMDo
	WithContext(ctx context.Context) IEmployeeBenefitsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmployeeBenefitsORMDo
	WriteDB() IEmployeeBenefitsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmployeeBenefitsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmployeeBenefitsORMDo
	Not(conds ...gen.Condition) IEmployeeBenefitsORMDo
	Or(conds ...gen.Condition) IEmployeeBenefitsORMDo
	Select(conds ...field.Expr) IEmployeeBenefitsORMDo
	Where(conds ...gen.Condition) IEmployeeBenefitsORMDo
	Order(conds ...field.Expr) IEmployeeBenefitsORMDo
	Distinct(cols ...field.Expr) IEmployeeBenefitsORMDo
	Omit(cols ...field.Expr) IEmployeeBenefitsORMDo
	Join(table schema.Tabler, on ...field.Expr) IEmployeeBenefitsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmployeeBenefitsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmployeeBenefitsORMDo
	Group(cols ...field.Expr) IEmployeeBenefitsORMDo
	Having(conds ...gen.Condition) IEmployeeBenefitsORMDo
	Limit(limit int) IEmployeeBenefitsORMDo
	Offset(offset int) IEmployeeBenefitsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployeeBenefitsORMDo
	Unscoped() IEmployeeBenefitsORMDo
	Create(values ...*accounting_servicev1.EmployeeBenefitsORM) error
	CreateInBatches(values []*accounting_servicev1.EmployeeBenefitsORM, batchSize int) error
	Save(values ...*accounting_servicev1.EmployeeBenefitsORM) error
	First() (*accounting_servicev1.EmployeeBenefitsORM, error)
	Take() (*accounting_servicev1.EmployeeBenefitsORM, error)
	Last() (*accounting_servicev1.EmployeeBenefitsORM, error)
	Find() ([]*accounting_servicev1.EmployeeBenefitsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.EmployeeBenefitsORM, err error)
	FindInBatches(result *[]*accounting_servicev1.EmployeeBenefitsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.EmployeeBenefitsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmployeeBenefitsORMDo
	Assign(attrs ...field.AssignExpr) IEmployeeBenefitsORMDo
	Joins(fields ...field.RelationField) IEmployeeBenefitsORMDo
	Preload(fields ...field.RelationField) IEmployeeBenefitsORMDo
	FirstOrInit() (*accounting_servicev1.EmployeeBenefitsORM, error)
	FirstOrCreate() (*accounting_servicev1.EmployeeBenefitsORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.EmployeeBenefitsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmployeeBenefitsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.EmployeeBenefitsORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.EmployeeBenefitsORM, err error)
	CreateRecord(item accounting_servicev1.EmployeeBenefitsORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.EmployeeBenefitsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.EmployeeBenefitsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.EmployeeBenefitsORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.EmployeeBenefitsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeeBenefitsORMDo) GetRecordByID(id int) (result accounting_servicev1.EmployeeBenefitsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employee_benefits ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e employeeBenefitsORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.EmployeeBenefitsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employee_benefits ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (e employeeBenefitsORMDo) CreateRecord(item accounting_servicev1.EmployeeBenefitsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO employee_benefits (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeeBenefitsORMDo) UpdateRecordByID(id int, item accounting_servicev1.EmployeeBenefitsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE employee_benefits SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeeBenefitsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM employee_benefits ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (e employeeBenefitsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.EmployeeBenefitsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employee_benefits ORDER BY " + e.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (e employeeBenefitsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM employee_benefits ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeeBenefitsORMDo) GetByID(id uint64) (result accounting_servicev1.EmployeeBenefitsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employee_benefits ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e employeeBenefitsORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.EmployeeBenefitsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employee_benefits ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e employeeBenefitsORMDo) Debug() IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Debug())
}

func (e employeeBenefitsORMDo) WithContext(ctx context.Context) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e employeeBenefitsORMDo) ReadDB() IEmployeeBenefitsORMDo {
	return e.Clauses(dbresolver.Read)
}

func (e employeeBenefitsORMDo) WriteDB() IEmployeeBenefitsORMDo {
	return e.Clauses(dbresolver.Write)
}

func (e employeeBenefitsORMDo) Session(config *gorm.Session) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Session(config))
}

func (e employeeBenefitsORMDo) Clauses(conds ...clause.Expression) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e employeeBenefitsORMDo) Returning(value interface{}, columns ...string) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e employeeBenefitsORMDo) Not(conds ...gen.Condition) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e employeeBenefitsORMDo) Or(conds ...gen.Condition) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e employeeBenefitsORMDo) Select(conds ...field.Expr) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e employeeBenefitsORMDo) Where(conds ...gen.Condition) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e employeeBenefitsORMDo) Order(conds ...field.Expr) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e employeeBenefitsORMDo) Distinct(cols ...field.Expr) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e employeeBenefitsORMDo) Omit(cols ...field.Expr) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e employeeBenefitsORMDo) Join(table schema.Tabler, on ...field.Expr) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e employeeBenefitsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e employeeBenefitsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e employeeBenefitsORMDo) Group(cols ...field.Expr) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e employeeBenefitsORMDo) Having(conds ...gen.Condition) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e employeeBenefitsORMDo) Limit(limit int) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e employeeBenefitsORMDo) Offset(offset int) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e employeeBenefitsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e employeeBenefitsORMDo) Unscoped() IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Unscoped())
}

func (e employeeBenefitsORMDo) Create(values ...*accounting_servicev1.EmployeeBenefitsORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e employeeBenefitsORMDo) CreateInBatches(values []*accounting_servicev1.EmployeeBenefitsORM, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e employeeBenefitsORMDo) Save(values ...*accounting_servicev1.EmployeeBenefitsORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e employeeBenefitsORMDo) First() (*accounting_servicev1.EmployeeBenefitsORM, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeeBenefitsORM), nil
	}
}

func (e employeeBenefitsORMDo) Take() (*accounting_servicev1.EmployeeBenefitsORM, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeeBenefitsORM), nil
	}
}

func (e employeeBenefitsORMDo) Last() (*accounting_servicev1.EmployeeBenefitsORM, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeeBenefitsORM), nil
	}
}

func (e employeeBenefitsORMDo) Find() ([]*accounting_servicev1.EmployeeBenefitsORM, error) {
	result, err := e.DO.Find()
	return result.([]*accounting_servicev1.EmployeeBenefitsORM), err
}

func (e employeeBenefitsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.EmployeeBenefitsORM, err error) {
	buf := make([]*accounting_servicev1.EmployeeBenefitsORM, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e employeeBenefitsORMDo) FindInBatches(result *[]*accounting_servicev1.EmployeeBenefitsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e employeeBenefitsORMDo) Attrs(attrs ...field.AssignExpr) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e employeeBenefitsORMDo) Assign(attrs ...field.AssignExpr) IEmployeeBenefitsORMDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e employeeBenefitsORMDo) Joins(fields ...field.RelationField) IEmployeeBenefitsORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e employeeBenefitsORMDo) Preload(fields ...field.RelationField) IEmployeeBenefitsORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e employeeBenefitsORMDo) FirstOrInit() (*accounting_servicev1.EmployeeBenefitsORM, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeeBenefitsORM), nil
	}
}

func (e employeeBenefitsORMDo) FirstOrCreate() (*accounting_servicev1.EmployeeBenefitsORM, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeeBenefitsORM), nil
	}
}

func (e employeeBenefitsORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.EmployeeBenefitsORM, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e employeeBenefitsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e employeeBenefitsORMDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e employeeBenefitsORMDo) Delete(models ...*accounting_servicev1.EmployeeBenefitsORM) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *employeeBenefitsORMDo) withDO(do gen.Dao) *employeeBenefitsORMDo {
	e.DO = *do.(*gen.DO)
	return e
}
