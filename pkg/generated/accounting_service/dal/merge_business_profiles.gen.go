// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
)

func newMergeBusinessProfileORM(db *gorm.DB, opts ...gen.DOOption) mergeBusinessProfileORM {
	_mergeBusinessProfileORM := mergeBusinessProfileORM{}

	_mergeBusinessProfileORM.mergeBusinessProfileORMDo.UseDB(db, opts...)
	_mergeBusinessProfileORM.mergeBusinessProfileORMDo.UseModel(&accounting_servicev1.MergeBusinessProfileORM{})

	tableName := _mergeBusinessProfileORM.mergeBusinessProfileORMDo.TableName()
	_mergeBusinessProfileORM.ALL = field.NewAsterisk(tableName)
	_mergeBusinessProfileORM.CompanyName = field.NewString(tableName, "company_name")
	_mergeBusinessProfileORM.Email = field.NewString(tableName, "email")
	_mergeBusinessProfileORM.Id = field.NewUint64(tableName, "id")
	_mergeBusinessProfileORM.UserId = field.NewUint64(tableName, "user_id")
	_mergeBusinessProfileORM.AccountingIntegrationMergeLink = mergeBusinessProfileORMHasManyAccountingIntegrationMergeLink{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AccountingIntegrationMergeLink", "accounting_servicev1.AccountingIntegrationMergeLinkORM"),
		Account: struct {
			field.RelationField
			Attachments struct {
				field.RelationField
			}
			BalanceSheets struct {
				field.RelationField
				Assets struct {
					field.RelationField
				}
				Equity struct {
					field.RelationField
				}
				Liabilities struct {
					field.RelationField
				}
			}
			CashFlowStatements struct {
				field.RelationField
				FinancingActivities struct {
					field.RelationField
				}
				InvestingActivities struct {
					field.RelationField
				}
				OperatingActivities struct {
					field.RelationField
				}
			}
			ChartOfAccounts struct {
				field.RelationField
			}
			CompanyInfo struct {
				field.RelationField
				Addresses struct {
					field.RelationField
				}
			}
			Contacts struct {
				field.RelationField
			}
			CreditNotes struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			Expenses struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
			IncomeStatements struct {
				field.RelationField
				CostOfSales struct {
					field.RelationField
				}
				Income struct {
					field.RelationField
				}
				NonOperatingExpenses struct {
					field.RelationField
				}
				OperatingExpenses struct {
					field.RelationField
				}
			}
			Invoices struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			Items struct {
				field.RelationField
			}
			JournalEntries struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
			Payments struct {
				field.RelationField
			}
			PurchaseOrders struct {
				field.RelationField
				DeliveryAddress struct {
					field.RelationField
				}
				LineItems struct {
					field.RelationField
				}
			}
			TaxRates struct {
				field.RelationField
			}
			Transactions struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			VendorCredits struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account", "accounting_servicev1.LinkedAccountingAccountORM"),
			Attachments: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.Attachments", "accounting_servicev1.AccountingAttachmentORM"),
			},
			BalanceSheets: struct {
				field.RelationField
				Assets struct {
					field.RelationField
				}
				Equity struct {
					field.RelationField
				}
				Liabilities struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.BalanceSheets", "accounting_servicev1.BalanceSheetORM"),
				Assets: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.BalanceSheets.Assets", "accounting_servicev1.ReportItemORM"),
				},
				Equity: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.BalanceSheets.Equity", "accounting_servicev1.ReportItemORM"),
				},
				Liabilities: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.BalanceSheets.Liabilities", "accounting_servicev1.ReportItemORM"),
				},
			},
			CashFlowStatements: struct {
				field.RelationField
				FinancingActivities struct {
					field.RelationField
				}
				InvestingActivities struct {
					field.RelationField
				}
				OperatingActivities struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.CashFlowStatements", "accounting_servicev1.CashFlowStatementORM"),
				FinancingActivities: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.CashFlowStatements.FinancingActivities", "accounting_servicev1.ReportItemORM"),
				},
				InvestingActivities: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.CashFlowStatements.InvestingActivities", "accounting_servicev1.ReportItemORM"),
				},
				OperatingActivities: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.CashFlowStatements.OperatingActivities", "accounting_servicev1.ReportItemORM"),
				},
			},
			ChartOfAccounts: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.ChartOfAccounts", "accounting_servicev1.BusinessChartOfAccountsORM"),
			},
			CompanyInfo: struct {
				field.RelationField
				Addresses struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.CompanyInfo", "accounting_servicev1.CompanyInfoORM"),
				Addresses: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.CompanyInfo.Addresses", "accounting_servicev1.CompanyAddressORM"),
				},
			},
			Contacts: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.Contacts", "accounting_servicev1.ContactsORM"),
			},
			CreditNotes: struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.CreditNotes", "accounting_servicev1.CreditNoteORM"),
				LineItems: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.CreditNotes.LineItems", "accounting_servicev1.CreditNoteLineItemORM"),
				},
			},
			Expenses: struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.Expenses", "accounting_servicev1.ExpenseORM"),
				Lines: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.Expenses.Lines", "accounting_servicev1.ExpenseLineORM"),
				},
			},
			IncomeStatements: struct {
				field.RelationField
				CostOfSales struct {
					field.RelationField
				}
				Income struct {
					field.RelationField
				}
				NonOperatingExpenses struct {
					field.RelationField
				}
				OperatingExpenses struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.IncomeStatements", "accounting_servicev1.IncomeStatementORM"),
				CostOfSales: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.IncomeStatements.CostOfSales", "accounting_servicev1.ReportItemORM"),
				},
				Income: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.IncomeStatements.Income", "accounting_servicev1.ReportItemORM"),
				},
				NonOperatingExpenses: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.IncomeStatements.NonOperatingExpenses", "accounting_servicev1.ReportItemORM"),
				},
				OperatingExpenses: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.IncomeStatements.OperatingExpenses", "accounting_servicev1.ReportItemORM"),
				},
			},
			Invoices: struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.Invoices", "accounting_servicev1.InvoiceORM"),
				LineItems: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.Invoices.LineItems", "accounting_servicev1.InvoiceLineItemORM"),
				},
			},
			Items: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.Items", "accounting_servicev1.ItemORM"),
			},
			JournalEntries: struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.JournalEntries", "accounting_servicev1.JournalEntryORM"),
				Lines: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.JournalEntries.Lines", "accounting_servicev1.JournalLineORM"),
				},
			},
			Payments: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.Payments", "accounting_servicev1.PaymentORM"),
			},
			PurchaseOrders: struct {
				field.RelationField
				DeliveryAddress struct {
					field.RelationField
				}
				LineItems struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.PurchaseOrders", "accounting_servicev1.PurchaseOrderORM"),
				DeliveryAddress: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.PurchaseOrders.DeliveryAddress", "accounting_servicev1.CompanyAddressORM"),
				},
				LineItems: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.PurchaseOrders.LineItems", "accounting_servicev1.PurchaseOrderLineItemORM"),
				},
			},
			TaxRates: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.TaxRates", "accounting_servicev1.TaxRateORM"),
			},
			Transactions: struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.Transactions", "accounting_servicev1.BusinessTransactionORM"),
				LineItems: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.Transactions.LineItems", "accounting_servicev1.TransactionLineItemORM"),
				},
			},
			VendorCredits: struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.VendorCredits", "accounting_servicev1.VendorCreditORM"),
				Lines: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AccountingIntegrationMergeLink.Account.VendorCredits.Lines", "accounting_servicev1.VendorCreditLineORM"),
				},
			},
		},
		Token: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AccountingIntegrationMergeLink.Token", "accounting_servicev1.MergeLinkedAccountTokenORM"),
		},
	}

	_mergeBusinessProfileORM.ActionablePersonalInsights = mergeBusinessProfileORMHasManyActionablePersonalInsights{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ActionablePersonalInsights", "accounting_servicev1.BusinessActionableInsightORM"),
	}

	_mergeBusinessProfileORM.PayrollIntegrationMergeLink = mergeBusinessProfileORMHasManyPayrollIntegrationMergeLink{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PayrollIntegrationMergeLink", "accounting_servicev1.HrisIntegrationMergeLinkORM"),
		Account: struct {
			field.RelationField
			Profile struct {
				field.RelationField
			}
			BenefitPlans struct {
				field.RelationField
				EmployeeBenefits struct {
					field.RelationField
				}
			}
			Employees struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
				Group struct {
					field.RelationField
				}
				HomeLocation struct {
					field.RelationField
				}
				PayTimeOffBalance struct {
					field.RelationField
				}
				WorkLocation struct {
					field.RelationField
				}
				BankAccounts struct {
					field.RelationField
				}
				Benefits struct {
					field.RelationField
				}
				Dependents struct {
					field.RelationField
					HomeLocation struct {
						field.RelationField
					}
				}
				Employments struct {
					field.RelationField
				}
				PayrollRuns struct {
					field.RelationField
					Deductions struct {
						field.RelationField
					}
					Earnings struct {
						field.RelationField
					}
					Taxes struct {
						field.RelationField
					}
				}
			}
			PayrollRuns struct {
				field.RelationField
				PayrollRuns struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account", "accounting_servicev1.HrisLinkedAccountORM"),
			Profile: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Profile", "accounting_servicev1.CompanyProfileORM"),
			},
			BenefitPlans: struct {
				field.RelationField
				EmployeeBenefits struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.BenefitPlans", "accounting_servicev1.EmployerBenefitsORM"),
				EmployeeBenefits: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.BenefitPlans.EmployeeBenefits", "accounting_servicev1.EmployeeBenefitsORM"),
				},
			},
			Employees: struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
				Group struct {
					field.RelationField
				}
				HomeLocation struct {
					field.RelationField
				}
				PayTimeOffBalance struct {
					field.RelationField
				}
				WorkLocation struct {
					field.RelationField
				}
				BankAccounts struct {
					field.RelationField
				}
				Benefits struct {
					field.RelationField
				}
				Dependents struct {
					field.RelationField
					HomeLocation struct {
						field.RelationField
					}
				}
				Employments struct {
					field.RelationField
				}
				PayrollRuns struct {
					field.RelationField
					Deductions struct {
						field.RelationField
					}
					Earnings struct {
						field.RelationField
					}
					Taxes struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees", "accounting_servicev1.EmployeeORM"),
				Manager: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.Manager", "accounting_servicev1.EmployeeORM"),
				},
				Group: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.Group", "accounting_servicev1.GroupORM"),
				},
				HomeLocation: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.HomeLocation", "accounting_servicev1.LocationAddressORM"),
				},
				PayTimeOffBalance: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.PayTimeOffBalance", "accounting_servicev1.EmployeTimeOffBalanceORM"),
				},
				WorkLocation: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.WorkLocation", "accounting_servicev1.LocationAddressORM"),
				},
				BankAccounts: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.BankAccounts", "accounting_servicev1.BankInfoORM"),
				},
				Benefits: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.Benefits", "accounting_servicev1.EmployeeBenefitsORM"),
				},
				Dependents: struct {
					field.RelationField
					HomeLocation struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.Dependents", "accounting_servicev1.DependentsORM"),
					HomeLocation: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.Dependents.HomeLocation", "accounting_servicev1.LocationAddressORM"),
					},
				},
				Employments: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.Employments", "accounting_servicev1.EmployeeJobPositionAtCompanyORM"),
				},
				PayrollRuns: struct {
					field.RelationField
					Deductions struct {
						field.RelationField
					}
					Earnings struct {
						field.RelationField
					}
					Taxes struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.PayrollRuns", "accounting_servicev1.EmployeePayrollRunORM"),
					Deductions: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.PayrollRuns.Deductions", "accounting_servicev1.DeductionORM"),
					},
					Earnings: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.PayrollRuns.Earnings", "accounting_servicev1.EarningORM"),
					},
					Taxes: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.Employees.PayrollRuns.Taxes", "accounting_servicev1.TaxORM"),
					},
				},
			},
			PayrollRuns: struct {
				field.RelationField
				PayrollRuns struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.PayrollRuns", "accounting_servicev1.EmployerPayrollRunORM"),
				PayrollRuns: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("PayrollIntegrationMergeLink.Account.PayrollRuns.PayrollRuns", "accounting_servicev1.EmployeePayrollRunORM"),
				},
			},
		},
		Token: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("PayrollIntegrationMergeLink.Token", "accounting_servicev1.MergeLinkedAccountTokenORM"),
		},
	}

	_mergeBusinessProfileORM.fillFieldMap()

	return _mergeBusinessProfileORM
}

type mergeBusinessProfileORM struct {
	mergeBusinessProfileORMDo

	ALL                            field.Asterisk
	CompanyName                    field.String
	Email                          field.String
	Id                             field.Uint64
	UserId                         field.Uint64
	AccountingIntegrationMergeLink mergeBusinessProfileORMHasManyAccountingIntegrationMergeLink

	ActionablePersonalInsights mergeBusinessProfileORMHasManyActionablePersonalInsights

	PayrollIntegrationMergeLink mergeBusinessProfileORMHasManyPayrollIntegrationMergeLink

	fieldMap map[string]field.Expr
}

func (m mergeBusinessProfileORM) Table(newTableName string) *mergeBusinessProfileORM {
	m.mergeBusinessProfileORMDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mergeBusinessProfileORM) As(alias string) *mergeBusinessProfileORM {
	m.mergeBusinessProfileORMDo.DO = *(m.mergeBusinessProfileORMDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mergeBusinessProfileORM) updateTableName(table string) *mergeBusinessProfileORM {
	m.ALL = field.NewAsterisk(table)
	m.CompanyName = field.NewString(table, "company_name")
	m.Email = field.NewString(table, "email")
	m.Id = field.NewUint64(table, "id")
	m.UserId = field.NewUint64(table, "user_id")

	m.fillFieldMap()

	return m
}

func (m *mergeBusinessProfileORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mergeBusinessProfileORM) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["company_name"] = m.CompanyName
	m.fieldMap["email"] = m.Email
	m.fieldMap["id"] = m.Id
	m.fieldMap["user_id"] = m.UserId

}

func (m mergeBusinessProfileORM) clone(db *gorm.DB) mergeBusinessProfileORM {
	m.mergeBusinessProfileORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mergeBusinessProfileORM) replaceDB(db *gorm.DB) mergeBusinessProfileORM {
	m.mergeBusinessProfileORMDo.ReplaceDB(db)
	return m
}

type mergeBusinessProfileORMHasManyAccountingIntegrationMergeLink struct {
	db *gorm.DB

	field.RelationField

	Account struct {
		field.RelationField
		Attachments struct {
			field.RelationField
		}
		BalanceSheets struct {
			field.RelationField
			Assets struct {
				field.RelationField
			}
			Equity struct {
				field.RelationField
			}
			Liabilities struct {
				field.RelationField
			}
		}
		CashFlowStatements struct {
			field.RelationField
			FinancingActivities struct {
				field.RelationField
			}
			InvestingActivities struct {
				field.RelationField
			}
			OperatingActivities struct {
				field.RelationField
			}
		}
		ChartOfAccounts struct {
			field.RelationField
		}
		CompanyInfo struct {
			field.RelationField
			Addresses struct {
				field.RelationField
			}
		}
		Contacts struct {
			field.RelationField
		}
		CreditNotes struct {
			field.RelationField
			LineItems struct {
				field.RelationField
			}
		}
		Expenses struct {
			field.RelationField
			Lines struct {
				field.RelationField
			}
		}
		IncomeStatements struct {
			field.RelationField
			CostOfSales struct {
				field.RelationField
			}
			Income struct {
				field.RelationField
			}
			NonOperatingExpenses struct {
				field.RelationField
			}
			OperatingExpenses struct {
				field.RelationField
			}
		}
		Invoices struct {
			field.RelationField
			LineItems struct {
				field.RelationField
			}
		}
		Items struct {
			field.RelationField
		}
		JournalEntries struct {
			field.RelationField
			Lines struct {
				field.RelationField
			}
		}
		Payments struct {
			field.RelationField
		}
		PurchaseOrders struct {
			field.RelationField
			DeliveryAddress struct {
				field.RelationField
			}
			LineItems struct {
				field.RelationField
			}
		}
		TaxRates struct {
			field.RelationField
		}
		Transactions struct {
			field.RelationField
			LineItems struct {
				field.RelationField
			}
		}
		VendorCredits struct {
			field.RelationField
			Lines struct {
				field.RelationField
			}
		}
	}
	Token struct {
		field.RelationField
	}
}

func (a mergeBusinessProfileORMHasManyAccountingIntegrationMergeLink) Where(conds ...field.Expr) *mergeBusinessProfileORMHasManyAccountingIntegrationMergeLink {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a mergeBusinessProfileORMHasManyAccountingIntegrationMergeLink) WithContext(ctx context.Context) *mergeBusinessProfileORMHasManyAccountingIntegrationMergeLink {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a mergeBusinessProfileORMHasManyAccountingIntegrationMergeLink) Session(session *gorm.Session) *mergeBusinessProfileORMHasManyAccountingIntegrationMergeLink {
	a.db = a.db.Session(session)
	return &a
}

func (a mergeBusinessProfileORMHasManyAccountingIntegrationMergeLink) Model(m *accounting_servicev1.MergeBusinessProfileORM) *mergeBusinessProfileORMHasManyAccountingIntegrationMergeLinkTx {
	return &mergeBusinessProfileORMHasManyAccountingIntegrationMergeLinkTx{a.db.Model(m).Association(a.Name())}
}

type mergeBusinessProfileORMHasManyAccountingIntegrationMergeLinkTx struct{ tx *gorm.Association }

func (a mergeBusinessProfileORMHasManyAccountingIntegrationMergeLinkTx) Find() (result []*accounting_servicev1.AccountingIntegrationMergeLinkORM, err error) {
	return result, a.tx.Find(&result)
}

func (a mergeBusinessProfileORMHasManyAccountingIntegrationMergeLinkTx) Append(values ...*accounting_servicev1.AccountingIntegrationMergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a mergeBusinessProfileORMHasManyAccountingIntegrationMergeLinkTx) Replace(values ...*accounting_servicev1.AccountingIntegrationMergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a mergeBusinessProfileORMHasManyAccountingIntegrationMergeLinkTx) Delete(values ...*accounting_servicev1.AccountingIntegrationMergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a mergeBusinessProfileORMHasManyAccountingIntegrationMergeLinkTx) Clear() error {
	return a.tx.Clear()
}

func (a mergeBusinessProfileORMHasManyAccountingIntegrationMergeLinkTx) Count() int64 {
	return a.tx.Count()
}

type mergeBusinessProfileORMHasManyActionablePersonalInsights struct {
	db *gorm.DB

	field.RelationField
}

func (a mergeBusinessProfileORMHasManyActionablePersonalInsights) Where(conds ...field.Expr) *mergeBusinessProfileORMHasManyActionablePersonalInsights {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a mergeBusinessProfileORMHasManyActionablePersonalInsights) WithContext(ctx context.Context) *mergeBusinessProfileORMHasManyActionablePersonalInsights {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a mergeBusinessProfileORMHasManyActionablePersonalInsights) Session(session *gorm.Session) *mergeBusinessProfileORMHasManyActionablePersonalInsights {
	a.db = a.db.Session(session)
	return &a
}

func (a mergeBusinessProfileORMHasManyActionablePersonalInsights) Model(m *accounting_servicev1.MergeBusinessProfileORM) *mergeBusinessProfileORMHasManyActionablePersonalInsightsTx {
	return &mergeBusinessProfileORMHasManyActionablePersonalInsightsTx{a.db.Model(m).Association(a.Name())}
}

type mergeBusinessProfileORMHasManyActionablePersonalInsightsTx struct{ tx *gorm.Association }

func (a mergeBusinessProfileORMHasManyActionablePersonalInsightsTx) Find() (result []*accounting_servicev1.BusinessActionableInsightORM, err error) {
	return result, a.tx.Find(&result)
}

func (a mergeBusinessProfileORMHasManyActionablePersonalInsightsTx) Append(values ...*accounting_servicev1.BusinessActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a mergeBusinessProfileORMHasManyActionablePersonalInsightsTx) Replace(values ...*accounting_servicev1.BusinessActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a mergeBusinessProfileORMHasManyActionablePersonalInsightsTx) Delete(values ...*accounting_servicev1.BusinessActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a mergeBusinessProfileORMHasManyActionablePersonalInsightsTx) Clear() error {
	return a.tx.Clear()
}

func (a mergeBusinessProfileORMHasManyActionablePersonalInsightsTx) Count() int64 {
	return a.tx.Count()
}

type mergeBusinessProfileORMHasManyPayrollIntegrationMergeLink struct {
	db *gorm.DB

	field.RelationField

	Account struct {
		field.RelationField
		Profile struct {
			field.RelationField
		}
		BenefitPlans struct {
			field.RelationField
			EmployeeBenefits struct {
				field.RelationField
			}
		}
		Employees struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
			Group struct {
				field.RelationField
			}
			HomeLocation struct {
				field.RelationField
			}
			PayTimeOffBalance struct {
				field.RelationField
			}
			WorkLocation struct {
				field.RelationField
			}
			BankAccounts struct {
				field.RelationField
			}
			Benefits struct {
				field.RelationField
			}
			Dependents struct {
				field.RelationField
				HomeLocation struct {
					field.RelationField
				}
			}
			Employments struct {
				field.RelationField
			}
			PayrollRuns struct {
				field.RelationField
				Deductions struct {
					field.RelationField
				}
				Earnings struct {
					field.RelationField
				}
				Taxes struct {
					field.RelationField
				}
			}
		}
		PayrollRuns struct {
			field.RelationField
			PayrollRuns struct {
				field.RelationField
			}
		}
	}
	Token struct {
		field.RelationField
	}
}

func (a mergeBusinessProfileORMHasManyPayrollIntegrationMergeLink) Where(conds ...field.Expr) *mergeBusinessProfileORMHasManyPayrollIntegrationMergeLink {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a mergeBusinessProfileORMHasManyPayrollIntegrationMergeLink) WithContext(ctx context.Context) *mergeBusinessProfileORMHasManyPayrollIntegrationMergeLink {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a mergeBusinessProfileORMHasManyPayrollIntegrationMergeLink) Session(session *gorm.Session) *mergeBusinessProfileORMHasManyPayrollIntegrationMergeLink {
	a.db = a.db.Session(session)
	return &a
}

func (a mergeBusinessProfileORMHasManyPayrollIntegrationMergeLink) Model(m *accounting_servicev1.MergeBusinessProfileORM) *mergeBusinessProfileORMHasManyPayrollIntegrationMergeLinkTx {
	return &mergeBusinessProfileORMHasManyPayrollIntegrationMergeLinkTx{a.db.Model(m).Association(a.Name())}
}

type mergeBusinessProfileORMHasManyPayrollIntegrationMergeLinkTx struct{ tx *gorm.Association }

func (a mergeBusinessProfileORMHasManyPayrollIntegrationMergeLinkTx) Find() (result []*accounting_servicev1.HrisIntegrationMergeLinkORM, err error) {
	return result, a.tx.Find(&result)
}

func (a mergeBusinessProfileORMHasManyPayrollIntegrationMergeLinkTx) Append(values ...*accounting_servicev1.HrisIntegrationMergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a mergeBusinessProfileORMHasManyPayrollIntegrationMergeLinkTx) Replace(values ...*accounting_servicev1.HrisIntegrationMergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a mergeBusinessProfileORMHasManyPayrollIntegrationMergeLinkTx) Delete(values ...*accounting_servicev1.HrisIntegrationMergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a mergeBusinessProfileORMHasManyPayrollIntegrationMergeLinkTx) Clear() error {
	return a.tx.Clear()
}

func (a mergeBusinessProfileORMHasManyPayrollIntegrationMergeLinkTx) Count() int64 {
	return a.tx.Count()
}

type mergeBusinessProfileORMDo struct{ gen.DO }

type IMergeBusinessProfileORMDo interface {
	gen.SubQuery
	Debug() IMergeBusinessProfileORMDo
	WithContext(ctx context.Context) IMergeBusinessProfileORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMergeBusinessProfileORMDo
	WriteDB() IMergeBusinessProfileORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMergeBusinessProfileORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMergeBusinessProfileORMDo
	Not(conds ...gen.Condition) IMergeBusinessProfileORMDo
	Or(conds ...gen.Condition) IMergeBusinessProfileORMDo
	Select(conds ...field.Expr) IMergeBusinessProfileORMDo
	Where(conds ...gen.Condition) IMergeBusinessProfileORMDo
	Order(conds ...field.Expr) IMergeBusinessProfileORMDo
	Distinct(cols ...field.Expr) IMergeBusinessProfileORMDo
	Omit(cols ...field.Expr) IMergeBusinessProfileORMDo
	Join(table schema.Tabler, on ...field.Expr) IMergeBusinessProfileORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMergeBusinessProfileORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMergeBusinessProfileORMDo
	Group(cols ...field.Expr) IMergeBusinessProfileORMDo
	Having(conds ...gen.Condition) IMergeBusinessProfileORMDo
	Limit(limit int) IMergeBusinessProfileORMDo
	Offset(offset int) IMergeBusinessProfileORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMergeBusinessProfileORMDo
	Unscoped() IMergeBusinessProfileORMDo
	Create(values ...*accounting_servicev1.MergeBusinessProfileORM) error
	CreateInBatches(values []*accounting_servicev1.MergeBusinessProfileORM, batchSize int) error
	Save(values ...*accounting_servicev1.MergeBusinessProfileORM) error
	First() (*accounting_servicev1.MergeBusinessProfileORM, error)
	Take() (*accounting_servicev1.MergeBusinessProfileORM, error)
	Last() (*accounting_servicev1.MergeBusinessProfileORM, error)
	Find() ([]*accounting_servicev1.MergeBusinessProfileORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.MergeBusinessProfileORM, err error)
	FindInBatches(result *[]*accounting_servicev1.MergeBusinessProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.MergeBusinessProfileORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMergeBusinessProfileORMDo
	Assign(attrs ...field.AssignExpr) IMergeBusinessProfileORMDo
	Joins(fields ...field.RelationField) IMergeBusinessProfileORMDo
	Preload(fields ...field.RelationField) IMergeBusinessProfileORMDo
	FirstOrInit() (*accounting_servicev1.MergeBusinessProfileORM, error)
	FirstOrCreate() (*accounting_servicev1.MergeBusinessProfileORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.MergeBusinessProfileORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMergeBusinessProfileORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.MergeBusinessProfileORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.MergeBusinessProfileORM, err error)
	CreateRecord(item accounting_servicev1.MergeBusinessProfileORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.MergeBusinessProfileORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.MergeBusinessProfileORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.MergeBusinessProfileORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.MergeBusinessProfileORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeBusinessProfileORMDo) GetRecordByID(id int) (result accounting_servicev1.MergeBusinessProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_business_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mergeBusinessProfileORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.MergeBusinessProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_business_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (m mergeBusinessProfileORMDo) CreateRecord(item accounting_servicev1.MergeBusinessProfileORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO merge_business_profiles (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeBusinessProfileORMDo) UpdateRecordByID(id int, item accounting_servicev1.MergeBusinessProfileORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE merge_business_profiles SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeBusinessProfileORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM merge_business_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (m mergeBusinessProfileORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.MergeBusinessProfileORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_business_profiles ORDER BY " + m.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (m mergeBusinessProfileORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM merge_business_profiles ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeBusinessProfileORMDo) GetByID(id uint64) (result accounting_servicev1.MergeBusinessProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_business_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mergeBusinessProfileORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.MergeBusinessProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_business_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m mergeBusinessProfileORMDo) Debug() IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Debug())
}

func (m mergeBusinessProfileORMDo) WithContext(ctx context.Context) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mergeBusinessProfileORMDo) ReadDB() IMergeBusinessProfileORMDo {
	return m.Clauses(dbresolver.Read)
}

func (m mergeBusinessProfileORMDo) WriteDB() IMergeBusinessProfileORMDo {
	return m.Clauses(dbresolver.Write)
}

func (m mergeBusinessProfileORMDo) Session(config *gorm.Session) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Session(config))
}

func (m mergeBusinessProfileORMDo) Clauses(conds ...clause.Expression) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mergeBusinessProfileORMDo) Returning(value interface{}, columns ...string) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mergeBusinessProfileORMDo) Not(conds ...gen.Condition) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mergeBusinessProfileORMDo) Or(conds ...gen.Condition) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mergeBusinessProfileORMDo) Select(conds ...field.Expr) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mergeBusinessProfileORMDo) Where(conds ...gen.Condition) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mergeBusinessProfileORMDo) Order(conds ...field.Expr) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mergeBusinessProfileORMDo) Distinct(cols ...field.Expr) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mergeBusinessProfileORMDo) Omit(cols ...field.Expr) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mergeBusinessProfileORMDo) Join(table schema.Tabler, on ...field.Expr) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mergeBusinessProfileORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mergeBusinessProfileORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mergeBusinessProfileORMDo) Group(cols ...field.Expr) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mergeBusinessProfileORMDo) Having(conds ...gen.Condition) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mergeBusinessProfileORMDo) Limit(limit int) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mergeBusinessProfileORMDo) Offset(offset int) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mergeBusinessProfileORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mergeBusinessProfileORMDo) Unscoped() IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mergeBusinessProfileORMDo) Create(values ...*accounting_servicev1.MergeBusinessProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mergeBusinessProfileORMDo) CreateInBatches(values []*accounting_servicev1.MergeBusinessProfileORM, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mergeBusinessProfileORMDo) Save(values ...*accounting_servicev1.MergeBusinessProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mergeBusinessProfileORMDo) First() (*accounting_servicev1.MergeBusinessProfileORM, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeBusinessProfileORM), nil
	}
}

func (m mergeBusinessProfileORMDo) Take() (*accounting_servicev1.MergeBusinessProfileORM, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeBusinessProfileORM), nil
	}
}

func (m mergeBusinessProfileORMDo) Last() (*accounting_servicev1.MergeBusinessProfileORM, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeBusinessProfileORM), nil
	}
}

func (m mergeBusinessProfileORMDo) Find() ([]*accounting_servicev1.MergeBusinessProfileORM, error) {
	result, err := m.DO.Find()
	return result.([]*accounting_servicev1.MergeBusinessProfileORM), err
}

func (m mergeBusinessProfileORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.MergeBusinessProfileORM, err error) {
	buf := make([]*accounting_servicev1.MergeBusinessProfileORM, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mergeBusinessProfileORMDo) FindInBatches(result *[]*accounting_servicev1.MergeBusinessProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mergeBusinessProfileORMDo) Attrs(attrs ...field.AssignExpr) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mergeBusinessProfileORMDo) Assign(attrs ...field.AssignExpr) IMergeBusinessProfileORMDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mergeBusinessProfileORMDo) Joins(fields ...field.RelationField) IMergeBusinessProfileORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mergeBusinessProfileORMDo) Preload(fields ...field.RelationField) IMergeBusinessProfileORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mergeBusinessProfileORMDo) FirstOrInit() (*accounting_servicev1.MergeBusinessProfileORM, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeBusinessProfileORM), nil
	}
}

func (m mergeBusinessProfileORMDo) FirstOrCreate() (*accounting_servicev1.MergeBusinessProfileORM, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeBusinessProfileORM), nil
	}
}

func (m mergeBusinessProfileORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.MergeBusinessProfileORM, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mergeBusinessProfileORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mergeBusinessProfileORMDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mergeBusinessProfileORMDo) Delete(models ...*accounting_servicev1.MergeBusinessProfileORM) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mergeBusinessProfileORMDo) withDO(do gen.Dao) *mergeBusinessProfileORMDo {
	m.DO = *do.(*gen.DO)
	return m
}
