// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newEmployerBenefitsORM(db *gorm.DB, opts ...gen.DOOption) employerBenefitsORM {
	_employerBenefitsORM := employerBenefitsORM{}

	_employerBenefitsORM.employerBenefitsORMDo.UseDB(db, opts...)
	_employerBenefitsORM.employerBenefitsORMDo.UseModel(&accounting_servicev1.EmployerBenefitsORM{})

	tableName := _employerBenefitsORM.employerBenefitsORMDo.TableName()
	_employerBenefitsORM.ALL = field.NewAsterisk(tableName)
	_employerBenefitsORM.BenefitPlanType = field.NewString(tableName, "benefit_plan_type")
	_employerBenefitsORM.CreatedAt = field.NewTime(tableName, "created_at")
	_employerBenefitsORM.DeductionCode = field.NewString(tableName, "deduction_code")
	_employerBenefitsORM.Description = field.NewString(tableName, "description")
	_employerBenefitsORM.HrisLinkedAccountId = field.NewUint64(tableName, "hris_linked_account_id")
	_employerBenefitsORM.Id = field.NewUint64(tableName, "id")
	_employerBenefitsORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_employerBenefitsORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_employerBenefitsORM.Name = field.NewString(tableName, "name")
	_employerBenefitsORM.RemoteId = field.NewString(tableName, "remote_id")
	_employerBenefitsORM.RemoteWasDeleted = field.NewTime(tableName, "remote_was_deleted")
	_employerBenefitsORM.EmployeeBenefits = employerBenefitsORMHasManyEmployeeBenefits{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("EmployeeBenefits", "accounting_servicev1.EmployeeBenefitsORM"),
	}

	_employerBenefitsORM.fillFieldMap()

	return _employerBenefitsORM
}

type employerBenefitsORM struct {
	employerBenefitsORMDo

	ALL                 field.Asterisk
	BenefitPlanType     field.String
	CreatedAt           field.Time
	DeductionCode       field.String
	Description         field.String
	HrisLinkedAccountId field.Uint64
	Id                  field.Uint64
	MergeAccountId      field.String
	ModifiedAt          field.Time
	Name                field.String
	RemoteId            field.String
	RemoteWasDeleted    field.Time
	EmployeeBenefits    employerBenefitsORMHasManyEmployeeBenefits

	fieldMap map[string]field.Expr
}

func (e employerBenefitsORM) Table(newTableName string) *employerBenefitsORM {
	e.employerBenefitsORMDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e employerBenefitsORM) As(alias string) *employerBenefitsORM {
	e.employerBenefitsORMDo.DO = *(e.employerBenefitsORMDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *employerBenefitsORM) updateTableName(table string) *employerBenefitsORM {
	e.ALL = field.NewAsterisk(table)
	e.BenefitPlanType = field.NewString(table, "benefit_plan_type")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.DeductionCode = field.NewString(table, "deduction_code")
	e.Description = field.NewString(table, "description")
	e.HrisLinkedAccountId = field.NewUint64(table, "hris_linked_account_id")
	e.Id = field.NewUint64(table, "id")
	e.MergeAccountId = field.NewString(table, "merge_account_id")
	e.ModifiedAt = field.NewTime(table, "modified_at")
	e.Name = field.NewString(table, "name")
	e.RemoteId = field.NewString(table, "remote_id")
	e.RemoteWasDeleted = field.NewTime(table, "remote_was_deleted")

	e.fillFieldMap()

	return e
}

func (e *employerBenefitsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *employerBenefitsORM) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["benefit_plan_type"] = e.BenefitPlanType
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["deduction_code"] = e.DeductionCode
	e.fieldMap["description"] = e.Description
	e.fieldMap["hris_linked_account_id"] = e.HrisLinkedAccountId
	e.fieldMap["id"] = e.Id
	e.fieldMap["merge_account_id"] = e.MergeAccountId
	e.fieldMap["modified_at"] = e.ModifiedAt
	e.fieldMap["name"] = e.Name
	e.fieldMap["remote_id"] = e.RemoteId
	e.fieldMap["remote_was_deleted"] = e.RemoteWasDeleted

}

func (e employerBenefitsORM) clone(db *gorm.DB) employerBenefitsORM {
	e.employerBenefitsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e employerBenefitsORM) replaceDB(db *gorm.DB) employerBenefitsORM {
	e.employerBenefitsORMDo.ReplaceDB(db)
	return e
}

type employerBenefitsORMHasManyEmployeeBenefits struct {
	db *gorm.DB

	field.RelationField
}

func (a employerBenefitsORMHasManyEmployeeBenefits) Where(conds ...field.Expr) *employerBenefitsORMHasManyEmployeeBenefits {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employerBenefitsORMHasManyEmployeeBenefits) WithContext(ctx context.Context) *employerBenefitsORMHasManyEmployeeBenefits {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employerBenefitsORMHasManyEmployeeBenefits) Session(session *gorm.Session) *employerBenefitsORMHasManyEmployeeBenefits {
	a.db = a.db.Session(session)
	return &a
}

func (a employerBenefitsORMHasManyEmployeeBenefits) Model(m *accounting_servicev1.EmployerBenefitsORM) *employerBenefitsORMHasManyEmployeeBenefitsTx {
	return &employerBenefitsORMHasManyEmployeeBenefitsTx{a.db.Model(m).Association(a.Name())}
}

type employerBenefitsORMHasManyEmployeeBenefitsTx struct{ tx *gorm.Association }

func (a employerBenefitsORMHasManyEmployeeBenefitsTx) Find() (result []*accounting_servicev1.EmployeeBenefitsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employerBenefitsORMHasManyEmployeeBenefitsTx) Append(values ...*accounting_servicev1.EmployeeBenefitsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employerBenefitsORMHasManyEmployeeBenefitsTx) Replace(values ...*accounting_servicev1.EmployeeBenefitsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employerBenefitsORMHasManyEmployeeBenefitsTx) Delete(values ...*accounting_servicev1.EmployeeBenefitsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employerBenefitsORMHasManyEmployeeBenefitsTx) Clear() error {
	return a.tx.Clear()
}

func (a employerBenefitsORMHasManyEmployeeBenefitsTx) Count() int64 {
	return a.tx.Count()
}

type employerBenefitsORMDo struct{ gen.DO }

type IEmployerBenefitsORMDo interface {
	gen.SubQuery
	Debug() IEmployerBenefitsORMDo
	WithContext(ctx context.Context) IEmployerBenefitsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmployerBenefitsORMDo
	WriteDB() IEmployerBenefitsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmployerBenefitsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmployerBenefitsORMDo
	Not(conds ...gen.Condition) IEmployerBenefitsORMDo
	Or(conds ...gen.Condition) IEmployerBenefitsORMDo
	Select(conds ...field.Expr) IEmployerBenefitsORMDo
	Where(conds ...gen.Condition) IEmployerBenefitsORMDo
	Order(conds ...field.Expr) IEmployerBenefitsORMDo
	Distinct(cols ...field.Expr) IEmployerBenefitsORMDo
	Omit(cols ...field.Expr) IEmployerBenefitsORMDo
	Join(table schema.Tabler, on ...field.Expr) IEmployerBenefitsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmployerBenefitsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmployerBenefitsORMDo
	Group(cols ...field.Expr) IEmployerBenefitsORMDo
	Having(conds ...gen.Condition) IEmployerBenefitsORMDo
	Limit(limit int) IEmployerBenefitsORMDo
	Offset(offset int) IEmployerBenefitsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployerBenefitsORMDo
	Unscoped() IEmployerBenefitsORMDo
	Create(values ...*accounting_servicev1.EmployerBenefitsORM) error
	CreateInBatches(values []*accounting_servicev1.EmployerBenefitsORM, batchSize int) error
	Save(values ...*accounting_servicev1.EmployerBenefitsORM) error
	First() (*accounting_servicev1.EmployerBenefitsORM, error)
	Take() (*accounting_servicev1.EmployerBenefitsORM, error)
	Last() (*accounting_servicev1.EmployerBenefitsORM, error)
	Find() ([]*accounting_servicev1.EmployerBenefitsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.EmployerBenefitsORM, err error)
	FindInBatches(result *[]*accounting_servicev1.EmployerBenefitsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.EmployerBenefitsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmployerBenefitsORMDo
	Assign(attrs ...field.AssignExpr) IEmployerBenefitsORMDo
	Joins(fields ...field.RelationField) IEmployerBenefitsORMDo
	Preload(fields ...field.RelationField) IEmployerBenefitsORMDo
	FirstOrInit() (*accounting_servicev1.EmployerBenefitsORM, error)
	FirstOrCreate() (*accounting_servicev1.EmployerBenefitsORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.EmployerBenefitsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmployerBenefitsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.EmployerBenefitsORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.EmployerBenefitsORM, err error)
	CreateRecord(item accounting_servicev1.EmployerBenefitsORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.EmployerBenefitsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.EmployerBenefitsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.EmployerBenefitsORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.EmployerBenefitsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employerBenefitsORMDo) GetRecordByID(id int) (result accounting_servicev1.EmployerBenefitsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employer_benefits ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e employerBenefitsORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.EmployerBenefitsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employer_benefits ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (e employerBenefitsORMDo) CreateRecord(item accounting_servicev1.EmployerBenefitsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO employer_benefits (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employerBenefitsORMDo) UpdateRecordByID(id int, item accounting_servicev1.EmployerBenefitsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE employer_benefits SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employerBenefitsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM employer_benefits ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (e employerBenefitsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.EmployerBenefitsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employer_benefits ORDER BY " + e.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (e employerBenefitsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM employer_benefits ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employerBenefitsORMDo) GetByID(id uint64) (result accounting_servicev1.EmployerBenefitsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employer_benefits ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e employerBenefitsORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.EmployerBenefitsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employer_benefits ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e employerBenefitsORMDo) Debug() IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Debug())
}

func (e employerBenefitsORMDo) WithContext(ctx context.Context) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e employerBenefitsORMDo) ReadDB() IEmployerBenefitsORMDo {
	return e.Clauses(dbresolver.Read)
}

func (e employerBenefitsORMDo) WriteDB() IEmployerBenefitsORMDo {
	return e.Clauses(dbresolver.Write)
}

func (e employerBenefitsORMDo) Session(config *gorm.Session) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Session(config))
}

func (e employerBenefitsORMDo) Clauses(conds ...clause.Expression) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e employerBenefitsORMDo) Returning(value interface{}, columns ...string) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e employerBenefitsORMDo) Not(conds ...gen.Condition) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e employerBenefitsORMDo) Or(conds ...gen.Condition) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e employerBenefitsORMDo) Select(conds ...field.Expr) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e employerBenefitsORMDo) Where(conds ...gen.Condition) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e employerBenefitsORMDo) Order(conds ...field.Expr) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e employerBenefitsORMDo) Distinct(cols ...field.Expr) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e employerBenefitsORMDo) Omit(cols ...field.Expr) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e employerBenefitsORMDo) Join(table schema.Tabler, on ...field.Expr) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e employerBenefitsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e employerBenefitsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e employerBenefitsORMDo) Group(cols ...field.Expr) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e employerBenefitsORMDo) Having(conds ...gen.Condition) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e employerBenefitsORMDo) Limit(limit int) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e employerBenefitsORMDo) Offset(offset int) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e employerBenefitsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e employerBenefitsORMDo) Unscoped() IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Unscoped())
}

func (e employerBenefitsORMDo) Create(values ...*accounting_servicev1.EmployerBenefitsORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e employerBenefitsORMDo) CreateInBatches(values []*accounting_servicev1.EmployerBenefitsORM, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e employerBenefitsORMDo) Save(values ...*accounting_servicev1.EmployerBenefitsORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e employerBenefitsORMDo) First() (*accounting_servicev1.EmployerBenefitsORM, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployerBenefitsORM), nil
	}
}

func (e employerBenefitsORMDo) Take() (*accounting_servicev1.EmployerBenefitsORM, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployerBenefitsORM), nil
	}
}

func (e employerBenefitsORMDo) Last() (*accounting_servicev1.EmployerBenefitsORM, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployerBenefitsORM), nil
	}
}

func (e employerBenefitsORMDo) Find() ([]*accounting_servicev1.EmployerBenefitsORM, error) {
	result, err := e.DO.Find()
	return result.([]*accounting_servicev1.EmployerBenefitsORM), err
}

func (e employerBenefitsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.EmployerBenefitsORM, err error) {
	buf := make([]*accounting_servicev1.EmployerBenefitsORM, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e employerBenefitsORMDo) FindInBatches(result *[]*accounting_servicev1.EmployerBenefitsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e employerBenefitsORMDo) Attrs(attrs ...field.AssignExpr) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e employerBenefitsORMDo) Assign(attrs ...field.AssignExpr) IEmployerBenefitsORMDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e employerBenefitsORMDo) Joins(fields ...field.RelationField) IEmployerBenefitsORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e employerBenefitsORMDo) Preload(fields ...field.RelationField) IEmployerBenefitsORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e employerBenefitsORMDo) FirstOrInit() (*accounting_servicev1.EmployerBenefitsORM, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployerBenefitsORM), nil
	}
}

func (e employerBenefitsORMDo) FirstOrCreate() (*accounting_servicev1.EmployerBenefitsORM, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployerBenefitsORM), nil
	}
}

func (e employerBenefitsORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.EmployerBenefitsORM, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e employerBenefitsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e employerBenefitsORMDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e employerBenefitsORMDo) Delete(models ...*accounting_servicev1.EmployerBenefitsORM) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *employerBenefitsORMDo) withDO(do gen.Dao) *employerBenefitsORMDo {
	e.DO = *do.(*gen.DO)
	return e
}
