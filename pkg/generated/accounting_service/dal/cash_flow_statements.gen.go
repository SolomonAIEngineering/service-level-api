// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newCashFlowStatementsORM(db *gorm.DB, opts ...gen.DOOption) cashFlowStatementsORM {
	_cashFlowStatementsORM := cashFlowStatementsORM{}

	_cashFlowStatementsORM.cashFlowStatementsORMDo.UseDB(db, opts...)
	_cashFlowStatementsORM.cashFlowStatementsORMDo.UseModel(&accounting_servicev1.CashFlowStatementsORM{})

	tableName := _cashFlowStatementsORM.cashFlowStatementsORMDo.TableName()
	_cashFlowStatementsORM.ALL = field.NewAsterisk(tableName)
	_cashFlowStatementsORM.CashAtBeginningOfPeriod = field.NewFloat64(tableName, "cash_at_beginning_of_period")
	_cashFlowStatementsORM.CashAtEndOfPeriod = field.NewFloat64(tableName, "cash_at_end_of_period")
	_cashFlowStatementsORM.Company = field.NewString(tableName, "company")
	_cashFlowStatementsORM.Currency = field.NewString(tableName, "currency")
	_cashFlowStatementsORM.EndPeriod = field.NewTime(tableName, "end_period")
	_cashFlowStatementsORM.Id = field.NewUint64(tableName, "id")
	_cashFlowStatementsORM.MergeRecordId = field.NewString(tableName, "merge_record_id")
	_cashFlowStatementsORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_cashFlowStatementsORM.Name = field.NewString(tableName, "name")
	_cashFlowStatementsORM.RemoteGeneratedAt = field.NewTime(tableName, "remote_generated_at")
	_cashFlowStatementsORM.RemoteId = field.NewString(tableName, "remote_id")
	_cashFlowStatementsORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_cashFlowStatementsORM.ReportDetailsId = field.NewUint64(tableName, "report_details_id")
	_cashFlowStatementsORM.StartPeriod = field.NewTime(tableName, "start_period")
	_cashFlowStatementsORM.FinancingActivities = cashFlowStatementsORMHasManyFinancingActivities{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("FinancingActivities", "accounting_servicev1.ReportItemORM"),
	}

	_cashFlowStatementsORM.InvestingActivities = cashFlowStatementsORMHasManyInvestingActivities{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("InvestingActivities", "accounting_servicev1.ReportItemORM"),
	}

	_cashFlowStatementsORM.OperatingActivities = cashFlowStatementsORMHasManyOperatingActivities{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("OperatingActivities", "accounting_servicev1.ReportItemORM"),
	}

	_cashFlowStatementsORM.fillFieldMap()

	return _cashFlowStatementsORM
}

type cashFlowStatementsORM struct {
	cashFlowStatementsORMDo

	ALL                     field.Asterisk
	CashAtBeginningOfPeriod field.Float64
	CashAtEndOfPeriod       field.Float64
	Company                 field.String
	Currency                field.String
	EndPeriod               field.Time
	Id                      field.Uint64
	MergeRecordId           field.String
	ModifiedAt              field.Time
	Name                    field.String
	RemoteGeneratedAt       field.Time
	RemoteId                field.String
	RemoteWasDeleted        field.Bool
	ReportDetailsId         field.Uint64
	StartPeriod             field.Time
	FinancingActivities     cashFlowStatementsORMHasManyFinancingActivities

	InvestingActivities cashFlowStatementsORMHasManyInvestingActivities

	OperatingActivities cashFlowStatementsORMHasManyOperatingActivities

	fieldMap map[string]field.Expr
}

func (c cashFlowStatementsORM) Table(newTableName string) *cashFlowStatementsORM {
	c.cashFlowStatementsORMDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cashFlowStatementsORM) As(alias string) *cashFlowStatementsORM {
	c.cashFlowStatementsORMDo.DO = *(c.cashFlowStatementsORMDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cashFlowStatementsORM) updateTableName(table string) *cashFlowStatementsORM {
	c.ALL = field.NewAsterisk(table)
	c.CashAtBeginningOfPeriod = field.NewFloat64(table, "cash_at_beginning_of_period")
	c.CashAtEndOfPeriod = field.NewFloat64(table, "cash_at_end_of_period")
	c.Company = field.NewString(table, "company")
	c.Currency = field.NewString(table, "currency")
	c.EndPeriod = field.NewTime(table, "end_period")
	c.Id = field.NewUint64(table, "id")
	c.MergeRecordId = field.NewString(table, "merge_record_id")
	c.ModifiedAt = field.NewTime(table, "modified_at")
	c.Name = field.NewString(table, "name")
	c.RemoteGeneratedAt = field.NewTime(table, "remote_generated_at")
	c.RemoteId = field.NewString(table, "remote_id")
	c.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	c.ReportDetailsId = field.NewUint64(table, "report_details_id")
	c.StartPeriod = field.NewTime(table, "start_period")

	c.fillFieldMap()

	return c
}

func (c *cashFlowStatementsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cashFlowStatementsORM) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 17)
	c.fieldMap["cash_at_beginning_of_period"] = c.CashAtBeginningOfPeriod
	c.fieldMap["cash_at_end_of_period"] = c.CashAtEndOfPeriod
	c.fieldMap["company"] = c.Company
	c.fieldMap["currency"] = c.Currency
	c.fieldMap["end_period"] = c.EndPeriod
	c.fieldMap["id"] = c.Id
	c.fieldMap["merge_record_id"] = c.MergeRecordId
	c.fieldMap["modified_at"] = c.ModifiedAt
	c.fieldMap["name"] = c.Name
	c.fieldMap["remote_generated_at"] = c.RemoteGeneratedAt
	c.fieldMap["remote_id"] = c.RemoteId
	c.fieldMap["remote_was_deleted"] = c.RemoteWasDeleted
	c.fieldMap["report_details_id"] = c.ReportDetailsId
	c.fieldMap["start_period"] = c.StartPeriod

}

func (c cashFlowStatementsORM) clone(db *gorm.DB) cashFlowStatementsORM {
	c.cashFlowStatementsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cashFlowStatementsORM) replaceDB(db *gorm.DB) cashFlowStatementsORM {
	c.cashFlowStatementsORMDo.ReplaceDB(db)
	return c
}

type cashFlowStatementsORMHasManyFinancingActivities struct {
	db *gorm.DB

	field.RelationField
}

func (a cashFlowStatementsORMHasManyFinancingActivities) Where(conds ...field.Expr) *cashFlowStatementsORMHasManyFinancingActivities {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cashFlowStatementsORMHasManyFinancingActivities) WithContext(ctx context.Context) *cashFlowStatementsORMHasManyFinancingActivities {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cashFlowStatementsORMHasManyFinancingActivities) Session(session *gorm.Session) *cashFlowStatementsORMHasManyFinancingActivities {
	a.db = a.db.Session(session)
	return &a
}

func (a cashFlowStatementsORMHasManyFinancingActivities) Model(m *accounting_servicev1.CashFlowStatementsORM) *cashFlowStatementsORMHasManyFinancingActivitiesTx {
	return &cashFlowStatementsORMHasManyFinancingActivitiesTx{a.db.Model(m).Association(a.Name())}
}

type cashFlowStatementsORMHasManyFinancingActivitiesTx struct{ tx *gorm.Association }

func (a cashFlowStatementsORMHasManyFinancingActivitiesTx) Find() (result []*accounting_servicev1.ReportItemORM, err error) {
	return result, a.tx.Find(&result)
}

func (a cashFlowStatementsORMHasManyFinancingActivitiesTx) Append(values ...*accounting_servicev1.ReportItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cashFlowStatementsORMHasManyFinancingActivitiesTx) Replace(values ...*accounting_servicev1.ReportItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cashFlowStatementsORMHasManyFinancingActivitiesTx) Delete(values ...*accounting_servicev1.ReportItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cashFlowStatementsORMHasManyFinancingActivitiesTx) Clear() error {
	return a.tx.Clear()
}

func (a cashFlowStatementsORMHasManyFinancingActivitiesTx) Count() int64 {
	return a.tx.Count()
}

type cashFlowStatementsORMHasManyInvestingActivities struct {
	db *gorm.DB

	field.RelationField
}

func (a cashFlowStatementsORMHasManyInvestingActivities) Where(conds ...field.Expr) *cashFlowStatementsORMHasManyInvestingActivities {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cashFlowStatementsORMHasManyInvestingActivities) WithContext(ctx context.Context) *cashFlowStatementsORMHasManyInvestingActivities {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cashFlowStatementsORMHasManyInvestingActivities) Session(session *gorm.Session) *cashFlowStatementsORMHasManyInvestingActivities {
	a.db = a.db.Session(session)
	return &a
}

func (a cashFlowStatementsORMHasManyInvestingActivities) Model(m *accounting_servicev1.CashFlowStatementsORM) *cashFlowStatementsORMHasManyInvestingActivitiesTx {
	return &cashFlowStatementsORMHasManyInvestingActivitiesTx{a.db.Model(m).Association(a.Name())}
}

type cashFlowStatementsORMHasManyInvestingActivitiesTx struct{ tx *gorm.Association }

func (a cashFlowStatementsORMHasManyInvestingActivitiesTx) Find() (result []*accounting_servicev1.ReportItemORM, err error) {
	return result, a.tx.Find(&result)
}

func (a cashFlowStatementsORMHasManyInvestingActivitiesTx) Append(values ...*accounting_servicev1.ReportItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cashFlowStatementsORMHasManyInvestingActivitiesTx) Replace(values ...*accounting_servicev1.ReportItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cashFlowStatementsORMHasManyInvestingActivitiesTx) Delete(values ...*accounting_servicev1.ReportItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cashFlowStatementsORMHasManyInvestingActivitiesTx) Clear() error {
	return a.tx.Clear()
}

func (a cashFlowStatementsORMHasManyInvestingActivitiesTx) Count() int64 {
	return a.tx.Count()
}

type cashFlowStatementsORMHasManyOperatingActivities struct {
	db *gorm.DB

	field.RelationField
}

func (a cashFlowStatementsORMHasManyOperatingActivities) Where(conds ...field.Expr) *cashFlowStatementsORMHasManyOperatingActivities {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cashFlowStatementsORMHasManyOperatingActivities) WithContext(ctx context.Context) *cashFlowStatementsORMHasManyOperatingActivities {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cashFlowStatementsORMHasManyOperatingActivities) Session(session *gorm.Session) *cashFlowStatementsORMHasManyOperatingActivities {
	a.db = a.db.Session(session)
	return &a
}

func (a cashFlowStatementsORMHasManyOperatingActivities) Model(m *accounting_servicev1.CashFlowStatementsORM) *cashFlowStatementsORMHasManyOperatingActivitiesTx {
	return &cashFlowStatementsORMHasManyOperatingActivitiesTx{a.db.Model(m).Association(a.Name())}
}

type cashFlowStatementsORMHasManyOperatingActivitiesTx struct{ tx *gorm.Association }

func (a cashFlowStatementsORMHasManyOperatingActivitiesTx) Find() (result []*accounting_servicev1.ReportItemORM, err error) {
	return result, a.tx.Find(&result)
}

func (a cashFlowStatementsORMHasManyOperatingActivitiesTx) Append(values ...*accounting_servicev1.ReportItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cashFlowStatementsORMHasManyOperatingActivitiesTx) Replace(values ...*accounting_servicev1.ReportItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cashFlowStatementsORMHasManyOperatingActivitiesTx) Delete(values ...*accounting_servicev1.ReportItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cashFlowStatementsORMHasManyOperatingActivitiesTx) Clear() error {
	return a.tx.Clear()
}

func (a cashFlowStatementsORMHasManyOperatingActivitiesTx) Count() int64 {
	return a.tx.Count()
}

type cashFlowStatementsORMDo struct{ gen.DO }

type ICashFlowStatementsORMDo interface {
	gen.SubQuery
	Debug() ICashFlowStatementsORMDo
	WithContext(ctx context.Context) ICashFlowStatementsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICashFlowStatementsORMDo
	WriteDB() ICashFlowStatementsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICashFlowStatementsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICashFlowStatementsORMDo
	Not(conds ...gen.Condition) ICashFlowStatementsORMDo
	Or(conds ...gen.Condition) ICashFlowStatementsORMDo
	Select(conds ...field.Expr) ICashFlowStatementsORMDo
	Where(conds ...gen.Condition) ICashFlowStatementsORMDo
	Order(conds ...field.Expr) ICashFlowStatementsORMDo
	Distinct(cols ...field.Expr) ICashFlowStatementsORMDo
	Omit(cols ...field.Expr) ICashFlowStatementsORMDo
	Join(table schema.Tabler, on ...field.Expr) ICashFlowStatementsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICashFlowStatementsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICashFlowStatementsORMDo
	Group(cols ...field.Expr) ICashFlowStatementsORMDo
	Having(conds ...gen.Condition) ICashFlowStatementsORMDo
	Limit(limit int) ICashFlowStatementsORMDo
	Offset(offset int) ICashFlowStatementsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICashFlowStatementsORMDo
	Unscoped() ICashFlowStatementsORMDo
	Create(values ...*accounting_servicev1.CashFlowStatementsORM) error
	CreateInBatches(values []*accounting_servicev1.CashFlowStatementsORM, batchSize int) error
	Save(values ...*accounting_servicev1.CashFlowStatementsORM) error
	First() (*accounting_servicev1.CashFlowStatementsORM, error)
	Take() (*accounting_servicev1.CashFlowStatementsORM, error)
	Last() (*accounting_servicev1.CashFlowStatementsORM, error)
	Find() ([]*accounting_servicev1.CashFlowStatementsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.CashFlowStatementsORM, err error)
	FindInBatches(result *[]*accounting_servicev1.CashFlowStatementsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.CashFlowStatementsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICashFlowStatementsORMDo
	Assign(attrs ...field.AssignExpr) ICashFlowStatementsORMDo
	Joins(fields ...field.RelationField) ICashFlowStatementsORMDo
	Preload(fields ...field.RelationField) ICashFlowStatementsORMDo
	FirstOrInit() (*accounting_servicev1.CashFlowStatementsORM, error)
	FirstOrCreate() (*accounting_servicev1.CashFlowStatementsORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.CashFlowStatementsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICashFlowStatementsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.CashFlowStatementsORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.CashFlowStatementsORM, err error)
	CreateRecord(item accounting_servicev1.CashFlowStatementsORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.CashFlowStatementsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.CashFlowStatementsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.CashFlowStatementsORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.CashFlowStatementsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c cashFlowStatementsORMDo) GetRecordByID(id int) (result accounting_servicev1.CashFlowStatementsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM cash_flow_statements ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c cashFlowStatementsORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.CashFlowStatementsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM cash_flow_statements ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (c cashFlowStatementsORMDo) CreateRecord(item accounting_servicev1.CashFlowStatementsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO cash_flow_statements (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (c cashFlowStatementsORMDo) UpdateRecordByID(id int, item accounting_servicev1.CashFlowStatementsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE cash_flow_statements SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c cashFlowStatementsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM cash_flow_statements ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (c cashFlowStatementsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.CashFlowStatementsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM cash_flow_statements ORDER BY " + c.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (c cashFlowStatementsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM cash_flow_statements ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c cashFlowStatementsORMDo) GetByID(id uint64) (result accounting_servicev1.CashFlowStatementsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM cash_flow_statements ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c cashFlowStatementsORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.CashFlowStatementsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM cash_flow_statements ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c cashFlowStatementsORMDo) Debug() ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Debug())
}

func (c cashFlowStatementsORMDo) WithContext(ctx context.Context) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cashFlowStatementsORMDo) ReadDB() ICashFlowStatementsORMDo {
	return c.Clauses(dbresolver.Read)
}

func (c cashFlowStatementsORMDo) WriteDB() ICashFlowStatementsORMDo {
	return c.Clauses(dbresolver.Write)
}

func (c cashFlowStatementsORMDo) Session(config *gorm.Session) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Session(config))
}

func (c cashFlowStatementsORMDo) Clauses(conds ...clause.Expression) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cashFlowStatementsORMDo) Returning(value interface{}, columns ...string) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cashFlowStatementsORMDo) Not(conds ...gen.Condition) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cashFlowStatementsORMDo) Or(conds ...gen.Condition) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cashFlowStatementsORMDo) Select(conds ...field.Expr) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cashFlowStatementsORMDo) Where(conds ...gen.Condition) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cashFlowStatementsORMDo) Order(conds ...field.Expr) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cashFlowStatementsORMDo) Distinct(cols ...field.Expr) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cashFlowStatementsORMDo) Omit(cols ...field.Expr) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cashFlowStatementsORMDo) Join(table schema.Tabler, on ...field.Expr) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cashFlowStatementsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cashFlowStatementsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cashFlowStatementsORMDo) Group(cols ...field.Expr) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cashFlowStatementsORMDo) Having(conds ...gen.Condition) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cashFlowStatementsORMDo) Limit(limit int) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cashFlowStatementsORMDo) Offset(offset int) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cashFlowStatementsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cashFlowStatementsORMDo) Unscoped() ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cashFlowStatementsORMDo) Create(values ...*accounting_servicev1.CashFlowStatementsORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cashFlowStatementsORMDo) CreateInBatches(values []*accounting_servicev1.CashFlowStatementsORM, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cashFlowStatementsORMDo) Save(values ...*accounting_servicev1.CashFlowStatementsORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cashFlowStatementsORMDo) First() (*accounting_servicev1.CashFlowStatementsORM, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.CashFlowStatementsORM), nil
	}
}

func (c cashFlowStatementsORMDo) Take() (*accounting_servicev1.CashFlowStatementsORM, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.CashFlowStatementsORM), nil
	}
}

func (c cashFlowStatementsORMDo) Last() (*accounting_servicev1.CashFlowStatementsORM, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.CashFlowStatementsORM), nil
	}
}

func (c cashFlowStatementsORMDo) Find() ([]*accounting_servicev1.CashFlowStatementsORM, error) {
	result, err := c.DO.Find()
	return result.([]*accounting_servicev1.CashFlowStatementsORM), err
}

func (c cashFlowStatementsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.CashFlowStatementsORM, err error) {
	buf := make([]*accounting_servicev1.CashFlowStatementsORM, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cashFlowStatementsORMDo) FindInBatches(result *[]*accounting_servicev1.CashFlowStatementsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cashFlowStatementsORMDo) Attrs(attrs ...field.AssignExpr) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cashFlowStatementsORMDo) Assign(attrs ...field.AssignExpr) ICashFlowStatementsORMDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cashFlowStatementsORMDo) Joins(fields ...field.RelationField) ICashFlowStatementsORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cashFlowStatementsORMDo) Preload(fields ...field.RelationField) ICashFlowStatementsORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cashFlowStatementsORMDo) FirstOrInit() (*accounting_servicev1.CashFlowStatementsORM, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.CashFlowStatementsORM), nil
	}
}

func (c cashFlowStatementsORMDo) FirstOrCreate() (*accounting_servicev1.CashFlowStatementsORM, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.CashFlowStatementsORM), nil
	}
}

func (c cashFlowStatementsORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.CashFlowStatementsORM, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cashFlowStatementsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cashFlowStatementsORMDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cashFlowStatementsORMDo) Delete(models ...*accounting_servicev1.CashFlowStatementsORM) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cashFlowStatementsORMDo) withDO(do gen.Dao) *cashFlowStatementsORMDo {
	c.DO = *do.(*gen.DO)
	return c
}
