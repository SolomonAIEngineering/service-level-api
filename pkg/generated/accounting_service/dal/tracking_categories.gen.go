// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
)

func newTrackingCategoryORM(db *gorm.DB, opts ...gen.DOOption) trackingCategoryORM {
	_trackingCategoryORM := trackingCategoryORM{}

	_trackingCategoryORM.trackingCategoryORMDo.UseDB(db, opts...)
	_trackingCategoryORM.trackingCategoryORMDo.UseModel(&accounting_servicev1.TrackingCategoryORM{})

	tableName := _trackingCategoryORM.trackingCategoryORMDo.TableName()
	_trackingCategoryORM.ALL = field.NewAsterisk(tableName)
	_trackingCategoryORM.CategoryType = field.NewString(tableName, "category_type")
	_trackingCategoryORM.Company = field.NewString(tableName, "company")
	_trackingCategoryORM.Id = field.NewUint64(tableName, "id")
	_trackingCategoryORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_trackingCategoryORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_trackingCategoryORM.ParentCategory = field.NewString(tableName, "parent_category")
	_trackingCategoryORM.RemoteId = field.NewString(tableName, "remote_id")
	_trackingCategoryORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")

	_trackingCategoryORM.fillFieldMap()

	return _trackingCategoryORM
}

type trackingCategoryORM struct {
	trackingCategoryORMDo

	ALL              field.Asterisk
	CategoryType     field.String
	Company          field.String
	Id               field.Uint64
	MergeAccountId   field.String
	ModifiedAt       field.Time
	ParentCategory   field.String
	RemoteId         field.String
	RemoteWasDeleted field.Bool

	fieldMap map[string]field.Expr
}

func (t trackingCategoryORM) Table(newTableName string) *trackingCategoryORM {
	t.trackingCategoryORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t trackingCategoryORM) As(alias string) *trackingCategoryORM {
	t.trackingCategoryORMDo.DO = *(t.trackingCategoryORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *trackingCategoryORM) updateTableName(table string) *trackingCategoryORM {
	t.ALL = field.NewAsterisk(table)
	t.CategoryType = field.NewString(table, "category_type")
	t.Company = field.NewString(table, "company")
	t.Id = field.NewUint64(table, "id")
	t.MergeAccountId = field.NewString(table, "merge_account_id")
	t.ModifiedAt = field.NewTime(table, "modified_at")
	t.ParentCategory = field.NewString(table, "parent_category")
	t.RemoteId = field.NewString(table, "remote_id")
	t.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")

	t.fillFieldMap()

	return t
}

func (t *trackingCategoryORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *trackingCategoryORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["category_type"] = t.CategoryType
	t.fieldMap["company"] = t.Company
	t.fieldMap["id"] = t.Id
	t.fieldMap["merge_account_id"] = t.MergeAccountId
	t.fieldMap["modified_at"] = t.ModifiedAt
	t.fieldMap["parent_category"] = t.ParentCategory
	t.fieldMap["remote_id"] = t.RemoteId
	t.fieldMap["remote_was_deleted"] = t.RemoteWasDeleted
}

func (t trackingCategoryORM) clone(db *gorm.DB) trackingCategoryORM {
	t.trackingCategoryORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t trackingCategoryORM) replaceDB(db *gorm.DB) trackingCategoryORM {
	t.trackingCategoryORMDo.ReplaceDB(db)
	return t
}

type trackingCategoryORMDo struct{ gen.DO }

type ITrackingCategoryORMDo interface {
	gen.SubQuery
	Debug() ITrackingCategoryORMDo
	WithContext(ctx context.Context) ITrackingCategoryORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITrackingCategoryORMDo
	WriteDB() ITrackingCategoryORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITrackingCategoryORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITrackingCategoryORMDo
	Not(conds ...gen.Condition) ITrackingCategoryORMDo
	Or(conds ...gen.Condition) ITrackingCategoryORMDo
	Select(conds ...field.Expr) ITrackingCategoryORMDo
	Where(conds ...gen.Condition) ITrackingCategoryORMDo
	Order(conds ...field.Expr) ITrackingCategoryORMDo
	Distinct(cols ...field.Expr) ITrackingCategoryORMDo
	Omit(cols ...field.Expr) ITrackingCategoryORMDo
	Join(table schema.Tabler, on ...field.Expr) ITrackingCategoryORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITrackingCategoryORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITrackingCategoryORMDo
	Group(cols ...field.Expr) ITrackingCategoryORMDo
	Having(conds ...gen.Condition) ITrackingCategoryORMDo
	Limit(limit int) ITrackingCategoryORMDo
	Offset(offset int) ITrackingCategoryORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITrackingCategoryORMDo
	Unscoped() ITrackingCategoryORMDo
	Create(values ...*accounting_servicev1.TrackingCategoryORM) error
	CreateInBatches(values []*accounting_servicev1.TrackingCategoryORM, batchSize int) error
	Save(values ...*accounting_servicev1.TrackingCategoryORM) error
	First() (*accounting_servicev1.TrackingCategoryORM, error)
	Take() (*accounting_servicev1.TrackingCategoryORM, error)
	Last() (*accounting_servicev1.TrackingCategoryORM, error)
	Find() ([]*accounting_servicev1.TrackingCategoryORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.TrackingCategoryORM, err error)
	FindInBatches(result *[]*accounting_servicev1.TrackingCategoryORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.TrackingCategoryORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITrackingCategoryORMDo
	Assign(attrs ...field.AssignExpr) ITrackingCategoryORMDo
	Joins(fields ...field.RelationField) ITrackingCategoryORMDo
	Preload(fields ...field.RelationField) ITrackingCategoryORMDo
	FirstOrInit() (*accounting_servicev1.TrackingCategoryORM, error)
	FirstOrCreate() (*accounting_servicev1.TrackingCategoryORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.TrackingCategoryORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITrackingCategoryORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.TrackingCategoryORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.TrackingCategoryORM, err error)
	CreateRecord(item accounting_servicev1.TrackingCategoryORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.TrackingCategoryORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.TrackingCategoryORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.TrackingCategoryORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.TrackingCategoryORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t trackingCategoryORMDo) GetRecordByID(id int) (result accounting_servicev1.TrackingCategoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tracking_categories ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t trackingCategoryORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.TrackingCategoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tracking_categories ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (t trackingCategoryORMDo) CreateRecord(item accounting_servicev1.TrackingCategoryORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO tracking_categories (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (t trackingCategoryORMDo) UpdateRecordByID(id int, item accounting_servicev1.TrackingCategoryORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE tracking_categories SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t trackingCategoryORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM tracking_categories ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (t trackingCategoryORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.TrackingCategoryORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tracking_categories ORDER BY " + t.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t trackingCategoryORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM tracking_categories ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t trackingCategoryORMDo) GetByID(id uint64) (result accounting_servicev1.TrackingCategoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tracking_categories ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t trackingCategoryORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.TrackingCategoryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tracking_categories ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t trackingCategoryORMDo) Debug() ITrackingCategoryORMDo {
	return t.withDO(t.DO.Debug())
}

func (t trackingCategoryORMDo) WithContext(ctx context.Context) ITrackingCategoryORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trackingCategoryORMDo) ReadDB() ITrackingCategoryORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t trackingCategoryORMDo) WriteDB() ITrackingCategoryORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t trackingCategoryORMDo) Session(config *gorm.Session) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t trackingCategoryORMDo) Clauses(conds ...clause.Expression) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trackingCategoryORMDo) Returning(value interface{}, columns ...string) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trackingCategoryORMDo) Not(conds ...gen.Condition) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trackingCategoryORMDo) Or(conds ...gen.Condition) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trackingCategoryORMDo) Select(conds ...field.Expr) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trackingCategoryORMDo) Where(conds ...gen.Condition) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trackingCategoryORMDo) Order(conds ...field.Expr) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trackingCategoryORMDo) Distinct(cols ...field.Expr) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trackingCategoryORMDo) Omit(cols ...field.Expr) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trackingCategoryORMDo) Join(table schema.Tabler, on ...field.Expr) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trackingCategoryORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITrackingCategoryORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trackingCategoryORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITrackingCategoryORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trackingCategoryORMDo) Group(cols ...field.Expr) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trackingCategoryORMDo) Having(conds ...gen.Condition) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trackingCategoryORMDo) Limit(limit int) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trackingCategoryORMDo) Offset(offset int) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trackingCategoryORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trackingCategoryORMDo) Unscoped() ITrackingCategoryORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trackingCategoryORMDo) Create(values ...*accounting_servicev1.TrackingCategoryORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trackingCategoryORMDo) CreateInBatches(values []*accounting_servicev1.TrackingCategoryORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trackingCategoryORMDo) Save(values ...*accounting_servicev1.TrackingCategoryORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trackingCategoryORMDo) First() (*accounting_servicev1.TrackingCategoryORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TrackingCategoryORM), nil
	}
}

func (t trackingCategoryORMDo) Take() (*accounting_servicev1.TrackingCategoryORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TrackingCategoryORM), nil
	}
}

func (t trackingCategoryORMDo) Last() (*accounting_servicev1.TrackingCategoryORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TrackingCategoryORM), nil
	}
}

func (t trackingCategoryORMDo) Find() ([]*accounting_servicev1.TrackingCategoryORM, error) {
	result, err := t.DO.Find()
	return result.([]*accounting_servicev1.TrackingCategoryORM), err
}

func (t trackingCategoryORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.TrackingCategoryORM, err error) {
	buf := make([]*accounting_servicev1.TrackingCategoryORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trackingCategoryORMDo) FindInBatches(result *[]*accounting_servicev1.TrackingCategoryORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trackingCategoryORMDo) Attrs(attrs ...field.AssignExpr) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trackingCategoryORMDo) Assign(attrs ...field.AssignExpr) ITrackingCategoryORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trackingCategoryORMDo) Joins(fields ...field.RelationField) ITrackingCategoryORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trackingCategoryORMDo) Preload(fields ...field.RelationField) ITrackingCategoryORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trackingCategoryORMDo) FirstOrInit() (*accounting_servicev1.TrackingCategoryORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TrackingCategoryORM), nil
	}
}

func (t trackingCategoryORMDo) FirstOrCreate() (*accounting_servicev1.TrackingCategoryORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TrackingCategoryORM), nil
	}
}

func (t trackingCategoryORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.TrackingCategoryORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trackingCategoryORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trackingCategoryORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trackingCategoryORMDo) Delete(models ...*accounting_servicev1.TrackingCategoryORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trackingCategoryORMDo) withDO(do gen.Dao) *trackingCategoryORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
