// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newItemORM(db *gorm.DB, opts ...gen.DOOption) itemORM {
	_itemORM := itemORM{}

	_itemORM.itemORMDo.UseDB(db, opts...)
	_itemORM.itemORMDo.UseModel(&accounting_servicev1.ItemORM{})

	tableName := _itemORM.itemORMDo.TableName()
	_itemORM.ALL = field.NewAsterisk(tableName)
	_itemORM.Company = field.NewString(tableName, "company")
	_itemORM.CreatedAt = field.NewTime(tableName, "created_at")
	_itemORM.Id = field.NewUint64(tableName, "id")
	_itemORM.LinkedAccountingAccountId = field.NewUint64(tableName, "linked_accounting_account_id")
	_itemORM.MergeRecordId = field.NewString(tableName, "merge_record_id")
	_itemORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_itemORM.Name = field.NewString(tableName, "name")
	_itemORM.PurchaseAccount = field.NewString(tableName, "purchase_account")
	_itemORM.PurchasePrice = field.NewFloat32(tableName, "purchase_price")
	_itemORM.RemoteId = field.NewString(tableName, "remote_id")
	_itemORM.RemoteUpdatedAt = field.NewTime(tableName, "remote_updated_at")
	_itemORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_itemORM.SalesAccount = field.NewString(tableName, "sales_account")
	_itemORM.Status = field.NewString(tableName, "status")
	_itemORM.UnitPrice = field.NewFloat32(tableName, "unit_price")

	_itemORM.fillFieldMap()

	return _itemORM
}

type itemORM struct {
	itemORMDo

	ALL                       field.Asterisk
	Company                   field.String
	CreatedAt                 field.Time
	Id                        field.Uint64
	LinkedAccountingAccountId field.Uint64
	MergeRecordId             field.String
	ModifiedAt                field.Time
	Name                      field.String
	PurchaseAccount           field.String
	PurchasePrice             field.Float32
	RemoteId                  field.String
	RemoteUpdatedAt           field.Time
	RemoteWasDeleted          field.Bool
	SalesAccount              field.String
	Status                    field.String
	UnitPrice                 field.Float32

	fieldMap map[string]field.Expr
}

func (i itemORM) Table(newTableName string) *itemORM {
	i.itemORMDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemORM) As(alias string) *itemORM {
	i.itemORMDo.DO = *(i.itemORMDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemORM) updateTableName(table string) *itemORM {
	i.ALL = field.NewAsterisk(table)
	i.Company = field.NewString(table, "company")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.Id = field.NewUint64(table, "id")
	i.LinkedAccountingAccountId = field.NewUint64(table, "linked_accounting_account_id")
	i.MergeRecordId = field.NewString(table, "merge_record_id")
	i.ModifiedAt = field.NewTime(table, "modified_at")
	i.Name = field.NewString(table, "name")
	i.PurchaseAccount = field.NewString(table, "purchase_account")
	i.PurchasePrice = field.NewFloat32(table, "purchase_price")
	i.RemoteId = field.NewString(table, "remote_id")
	i.RemoteUpdatedAt = field.NewTime(table, "remote_updated_at")
	i.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	i.SalesAccount = field.NewString(table, "sales_account")
	i.Status = field.NewString(table, "status")
	i.UnitPrice = field.NewFloat32(table, "unit_price")

	i.fillFieldMap()

	return i
}

func (i *itemORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemORM) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 15)
	i.fieldMap["company"] = i.Company
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["id"] = i.Id
	i.fieldMap["linked_accounting_account_id"] = i.LinkedAccountingAccountId
	i.fieldMap["merge_record_id"] = i.MergeRecordId
	i.fieldMap["modified_at"] = i.ModifiedAt
	i.fieldMap["name"] = i.Name
	i.fieldMap["purchase_account"] = i.PurchaseAccount
	i.fieldMap["purchase_price"] = i.PurchasePrice
	i.fieldMap["remote_id"] = i.RemoteId
	i.fieldMap["remote_updated_at"] = i.RemoteUpdatedAt
	i.fieldMap["remote_was_deleted"] = i.RemoteWasDeleted
	i.fieldMap["sales_account"] = i.SalesAccount
	i.fieldMap["status"] = i.Status
	i.fieldMap["unit_price"] = i.UnitPrice
}

func (i itemORM) clone(db *gorm.DB) itemORM {
	i.itemORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemORM) replaceDB(db *gorm.DB) itemORM {
	i.itemORMDo.ReplaceDB(db)
	return i
}

type itemORMDo struct{ gen.DO }

type IItemORMDo interface {
	gen.SubQuery
	Debug() IItemORMDo
	WithContext(ctx context.Context) IItemORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IItemORMDo
	WriteDB() IItemORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IItemORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IItemORMDo
	Not(conds ...gen.Condition) IItemORMDo
	Or(conds ...gen.Condition) IItemORMDo
	Select(conds ...field.Expr) IItemORMDo
	Where(conds ...gen.Condition) IItemORMDo
	Order(conds ...field.Expr) IItemORMDo
	Distinct(cols ...field.Expr) IItemORMDo
	Omit(cols ...field.Expr) IItemORMDo
	Join(table schema.Tabler, on ...field.Expr) IItemORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IItemORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IItemORMDo
	Group(cols ...field.Expr) IItemORMDo
	Having(conds ...gen.Condition) IItemORMDo
	Limit(limit int) IItemORMDo
	Offset(offset int) IItemORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IItemORMDo
	Unscoped() IItemORMDo
	Create(values ...*accounting_servicev1.ItemORM) error
	CreateInBatches(values []*accounting_servicev1.ItemORM, batchSize int) error
	Save(values ...*accounting_servicev1.ItemORM) error
	First() (*accounting_servicev1.ItemORM, error)
	Take() (*accounting_servicev1.ItemORM, error)
	Last() (*accounting_servicev1.ItemORM, error)
	Find() ([]*accounting_servicev1.ItemORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.ItemORM, err error)
	FindInBatches(result *[]*accounting_servicev1.ItemORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.ItemORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IItemORMDo
	Assign(attrs ...field.AssignExpr) IItemORMDo
	Joins(fields ...field.RelationField) IItemORMDo
	Preload(fields ...field.RelationField) IItemORMDo
	FirstOrInit() (*accounting_servicev1.ItemORM, error)
	FirstOrCreate() (*accounting_servicev1.ItemORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.ItemORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IItemORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.ItemORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.ItemORM, err error)
	CreateRecord(item accounting_servicev1.ItemORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.ItemORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.ItemORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.ItemORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.ItemORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (i itemORMDo) GetRecordByID(id int) (result accounting_servicev1.ItemORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM items ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (i itemORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.ItemORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM items ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (i itemORMDo) CreateRecord(item accounting_servicev1.ItemORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO items (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (i itemORMDo) UpdateRecordByID(id int, item accounting_servicev1.ItemORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE items SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (i itemORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM items ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (i itemORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.ItemORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM items ORDER BY " + i.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (i itemORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM items ")

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (i itemORMDo) GetByID(id uint64) (result accounting_servicev1.ItemORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM items ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (i itemORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.ItemORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM items ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (i itemORMDo) Debug() IItemORMDo {
	return i.withDO(i.DO.Debug())
}

func (i itemORMDo) WithContext(ctx context.Context) IItemORMDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemORMDo) ReadDB() IItemORMDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemORMDo) WriteDB() IItemORMDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemORMDo) Session(config *gorm.Session) IItemORMDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemORMDo) Clauses(conds ...clause.Expression) IItemORMDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemORMDo) Returning(value interface{}, columns ...string) IItemORMDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemORMDo) Not(conds ...gen.Condition) IItemORMDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemORMDo) Or(conds ...gen.Condition) IItemORMDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemORMDo) Select(conds ...field.Expr) IItemORMDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemORMDo) Where(conds ...gen.Condition) IItemORMDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemORMDo) Order(conds ...field.Expr) IItemORMDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemORMDo) Distinct(cols ...field.Expr) IItemORMDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemORMDo) Omit(cols ...field.Expr) IItemORMDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemORMDo) Join(table schema.Tabler, on ...field.Expr) IItemORMDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IItemORMDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IItemORMDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemORMDo) Group(cols ...field.Expr) IItemORMDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemORMDo) Having(conds ...gen.Condition) IItemORMDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemORMDo) Limit(limit int) IItemORMDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemORMDo) Offset(offset int) IItemORMDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IItemORMDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemORMDo) Unscoped() IItemORMDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemORMDo) Create(values ...*accounting_servicev1.ItemORM) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemORMDo) CreateInBatches(values []*accounting_servicev1.ItemORM, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemORMDo) Save(values ...*accounting_servicev1.ItemORM) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemORMDo) First() (*accounting_servicev1.ItemORM, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.ItemORM), nil
	}
}

func (i itemORMDo) Take() (*accounting_servicev1.ItemORM, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.ItemORM), nil
	}
}

func (i itemORMDo) Last() (*accounting_servicev1.ItemORM, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.ItemORM), nil
	}
}

func (i itemORMDo) Find() ([]*accounting_servicev1.ItemORM, error) {
	result, err := i.DO.Find()
	return result.([]*accounting_servicev1.ItemORM), err
}

func (i itemORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.ItemORM, err error) {
	buf := make([]*accounting_servicev1.ItemORM, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemORMDo) FindInBatches(result *[]*accounting_servicev1.ItemORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemORMDo) Attrs(attrs ...field.AssignExpr) IItemORMDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemORMDo) Assign(attrs ...field.AssignExpr) IItemORMDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemORMDo) Joins(fields ...field.RelationField) IItemORMDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemORMDo) Preload(fields ...field.RelationField) IItemORMDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemORMDo) FirstOrInit() (*accounting_servicev1.ItemORM, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.ItemORM), nil
	}
}

func (i itemORMDo) FirstOrCreate() (*accounting_servicev1.ItemORM, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.ItemORM), nil
	}
}

func (i itemORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.ItemORM, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemORMDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemORMDo) Delete(models ...*accounting_servicev1.ItemORM) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemORMDo) withDO(do gen.Dao) *itemORMDo {
	i.DO = *do.(*gen.DO)
	return i
}
