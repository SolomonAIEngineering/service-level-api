// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
)

func newBusinessAccountingProfileORM(db *gorm.DB, opts ...gen.DOOption) businessAccountingProfileORM {
	_businessAccountingProfileORM := businessAccountingProfileORM{}

	_businessAccountingProfileORM.businessAccountingProfileORMDo.UseDB(db, opts...)
	_businessAccountingProfileORM.businessAccountingProfileORMDo.UseModel(&accounting_servicev1.BusinessAccountingProfileORM{})

	tableName := _businessAccountingProfileORM.businessAccountingProfileORMDo.TableName()
	_businessAccountingProfileORM.ALL = field.NewAsterisk(tableName)
	_businessAccountingProfileORM.CompanyName = field.NewString(tableName, "company_name")
	_businessAccountingProfileORM.Email = field.NewString(tableName, "email")
	_businessAccountingProfileORM.Id = field.NewUint64(tableName, "id")
	_businessAccountingProfileORM.UserId = field.NewUint64(tableName, "user_id")
	_businessAccountingProfileORM.ActionablePersonalInsights = businessAccountingProfileORMHasManyActionablePersonalInsights{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ActionablePersonalInsights", "accounting_servicev1.BusinessActionableInsightORM"),
	}

	_businessAccountingProfileORM.MergeLiink = businessAccountingProfileORMHasManyMergeLiink{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MergeLiink", "accounting_servicev1.MergeLinkORM"),
		Token: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("MergeLiink.Token", "accounting_servicev1.MergeLinkedAccountTokenORM"),
		},
		Account: struct {
			field.RelationField
			ReferenceDetails struct {
				field.RelationField
				ChartOfAccounts struct {
					field.RelationField
				}
				Contacts struct {
					field.RelationField
				}
				Items struct {
					field.RelationField
				}
				TaxRates struct {
					field.RelationField
				}
			}
			ReportDetails struct {
				field.RelationField
				BalanceSheets struct {
					field.RelationField
					Assets struct {
						field.RelationField
					}
					Equity struct {
						field.RelationField
					}
					Liabilities struct {
						field.RelationField
					}
				}
				CashFlowStatements struct {
					field.RelationField
					FinancingActivities struct {
						field.RelationField
					}
					InvestingActivities struct {
						field.RelationField
					}
					OperatingActivities struct {
						field.RelationField
					}
				}
				IncomeStatements struct {
					field.RelationField
					CostOfSales struct {
						field.RelationField
					}
					Income struct {
						field.RelationField
					}
					NonOperatingExpenses struct {
						field.RelationField
					}
					OperatingExpenses struct {
						field.RelationField
					}
				}
			}
			TransactionsDetails struct {
				field.RelationField
				CreditNotes struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				Expenses struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
				Invoices struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				JournalEntries struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
				Payments struct {
					field.RelationField
				}
				Transactions struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				VendorCredits struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
			}
			Attachments struct {
				field.RelationField
			}
			CompanyInfo struct {
				field.RelationField
				Addresses struct {
					field.RelationField
				}
			}
			PurchaseOrders struct {
				field.RelationField
				DeliveryAddress struct {
					field.RelationField
				}
				LineItems struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("MergeLiink.Account", "accounting_servicev1.LinkedAccountingAccountORM"),
			ReferenceDetails: struct {
				field.RelationField
				ChartOfAccounts struct {
					field.RelationField
				}
				Contacts struct {
					field.RelationField
				}
				Items struct {
					field.RelationField
				}
				TaxRates struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("MergeLiink.Account.ReferenceDetails", "accounting_servicev1.ReferenceDetailsORM"),
				ChartOfAccounts: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReferenceDetails.ChartOfAccounts", "accounting_servicev1.BusinessChartOfAccountsORM"),
				},
				Contacts: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReferenceDetails.Contacts", "accounting_servicev1.ContactsORM"),
				},
				Items: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReferenceDetails.Items", "accounting_servicev1.ItemORM"),
				},
				TaxRates: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReferenceDetails.TaxRates", "accounting_servicev1.TaxRateORM"),
				},
			},
			ReportDetails: struct {
				field.RelationField
				BalanceSheets struct {
					field.RelationField
					Assets struct {
						field.RelationField
					}
					Equity struct {
						field.RelationField
					}
					Liabilities struct {
						field.RelationField
					}
				}
				CashFlowStatements struct {
					field.RelationField
					FinancingActivities struct {
						field.RelationField
					}
					InvestingActivities struct {
						field.RelationField
					}
					OperatingActivities struct {
						field.RelationField
					}
				}
				IncomeStatements struct {
					field.RelationField
					CostOfSales struct {
						field.RelationField
					}
					Income struct {
						field.RelationField
					}
					NonOperatingExpenses struct {
						field.RelationField
					}
					OperatingExpenses struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("MergeLiink.Account.ReportDetails", "accounting_servicev1.ReportDetailsORM"),
				BalanceSheets: struct {
					field.RelationField
					Assets struct {
						field.RelationField
					}
					Equity struct {
						field.RelationField
					}
					Liabilities struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.BalanceSheets", "accounting_servicev1.BalanceSheetORM"),
					Assets: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.BalanceSheets.Assets", "accounting_servicev1.ReportItemORM"),
					},
					Equity: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.BalanceSheets.Equity", "accounting_servicev1.ReportItemORM"),
					},
					Liabilities: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.BalanceSheets.Liabilities", "accounting_servicev1.ReportItemORM"),
					},
				},
				CashFlowStatements: struct {
					field.RelationField
					FinancingActivities struct {
						field.RelationField
					}
					InvestingActivities struct {
						field.RelationField
					}
					OperatingActivities struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.CashFlowStatements", "accounting_servicev1.CashFlowStatementsORM"),
					FinancingActivities: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.CashFlowStatements.FinancingActivities", "accounting_servicev1.ReportItemORM"),
					},
					InvestingActivities: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.CashFlowStatements.InvestingActivities", "accounting_servicev1.ReportItemORM"),
					},
					OperatingActivities: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.CashFlowStatements.OperatingActivities", "accounting_servicev1.ReportItemORM"),
					},
				},
				IncomeStatements: struct {
					field.RelationField
					CostOfSales struct {
						field.RelationField
					}
					Income struct {
						field.RelationField
					}
					NonOperatingExpenses struct {
						field.RelationField
					}
					OperatingExpenses struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.IncomeStatements", "accounting_servicev1.IncomeStatementORM"),
					CostOfSales: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.IncomeStatements.CostOfSales", "accounting_servicev1.ReportItemORM"),
					},
					Income: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.IncomeStatements.Income", "accounting_servicev1.ReportItemORM"),
					},
					NonOperatingExpenses: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.IncomeStatements.NonOperatingExpenses", "accounting_servicev1.ReportItemORM"),
					},
					OperatingExpenses: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.IncomeStatements.OperatingExpenses", "accounting_servicev1.ReportItemORM"),
					},
				},
			},
			TransactionsDetails: struct {
				field.RelationField
				CreditNotes struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				Expenses struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
				Invoices struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				JournalEntries struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
				Payments struct {
					field.RelationField
				}
				Transactions struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				VendorCredits struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails", "accounting_servicev1.TransactionDetailsORM"),
				CreditNotes: struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.CreditNotes", "accounting_servicev1.CreditNoteORM"),
					LineItems: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.CreditNotes.LineItems", "accounting_servicev1.CreditNoteLineItemORM"),
					},
				},
				Expenses: struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Expenses", "accounting_servicev1.ExpenseORM"),
					Lines: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Expenses.Lines", "accounting_servicev1.ExpenseLineORM"),
					},
				},
				Invoices: struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Invoices", "accounting_servicev1.InvoiceORM"),
					LineItems: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Invoices.LineItems", "accounting_servicev1.InvoiceLineItemORM"),
					},
				},
				JournalEntries: struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.JournalEntries", "accounting_servicev1.JournalEntryORM"),
					Lines: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.JournalEntries.Lines", "accounting_servicev1.JournalLineORM"),
					},
				},
				Payments: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Payments", "accounting_servicev1.PaymentORM"),
				},
				Transactions: struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Transactions", "accounting_servicev1.BusinessTransactionORM"),
					LineItems: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Transactions.LineItems", "accounting_servicev1.TransactionLineItemORM"),
					},
				},
				VendorCredits: struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.VendorCredits", "accounting_servicev1.VendorCreditORM"),
					Lines: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.VendorCredits.Lines", "accounting_servicev1.VendorCreditLineORM"),
					},
				},
			},
			Attachments: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("MergeLiink.Account.Attachments", "accounting_servicev1.AttachmentsORM"),
			},
			CompanyInfo: struct {
				field.RelationField
				Addresses struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("MergeLiink.Account.CompanyInfo", "accounting_servicev1.CompanyInfoORM"),
				Addresses: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.CompanyInfo.Addresses", "accounting_servicev1.CompanyAddressORM"),
				},
			},
			PurchaseOrders: struct {
				field.RelationField
				DeliveryAddress struct {
					field.RelationField
				}
				LineItems struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("MergeLiink.Account.PurchaseOrders", "accounting_servicev1.PurchaseOrderORM"),
				DeliveryAddress: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.PurchaseOrders.DeliveryAddress", "accounting_servicev1.CompanyAddressORM"),
				},
				LineItems: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.PurchaseOrders.LineItems", "accounting_servicev1.PurchaseOrderLineItemORM"),
				},
			},
		},
	}

	_businessAccountingProfileORM.fillFieldMap()

	return _businessAccountingProfileORM
}

type businessAccountingProfileORM struct {
	businessAccountingProfileORMDo

	ALL                        field.Asterisk
	CompanyName                field.String
	Email                      field.String
	Id                         field.Uint64
	UserId                     field.Uint64
	ActionablePersonalInsights businessAccountingProfileORMHasManyActionablePersonalInsights

	MergeLiink businessAccountingProfileORMHasManyMergeLiink

	fieldMap map[string]field.Expr
}

func (b businessAccountingProfileORM) Table(newTableName string) *businessAccountingProfileORM {
	b.businessAccountingProfileORMDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b businessAccountingProfileORM) As(alias string) *businessAccountingProfileORM {
	b.businessAccountingProfileORMDo.DO = *(b.businessAccountingProfileORMDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *businessAccountingProfileORM) updateTableName(table string) *businessAccountingProfileORM {
	b.ALL = field.NewAsterisk(table)
	b.CompanyName = field.NewString(table, "company_name")
	b.Email = field.NewString(table, "email")
	b.Id = field.NewUint64(table, "id")
	b.UserId = field.NewUint64(table, "user_id")

	b.fillFieldMap()

	return b
}

func (b *businessAccountingProfileORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *businessAccountingProfileORM) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 6)
	b.fieldMap["company_name"] = b.CompanyName
	b.fieldMap["email"] = b.Email
	b.fieldMap["id"] = b.Id
	b.fieldMap["user_id"] = b.UserId

}

func (b businessAccountingProfileORM) clone(db *gorm.DB) businessAccountingProfileORM {
	b.businessAccountingProfileORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b businessAccountingProfileORM) replaceDB(db *gorm.DB) businessAccountingProfileORM {
	b.businessAccountingProfileORMDo.ReplaceDB(db)
	return b
}

type businessAccountingProfileORMHasManyActionablePersonalInsights struct {
	db *gorm.DB

	field.RelationField
}

func (a businessAccountingProfileORMHasManyActionablePersonalInsights) Where(conds ...field.Expr) *businessAccountingProfileORMHasManyActionablePersonalInsights {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a businessAccountingProfileORMHasManyActionablePersonalInsights) WithContext(ctx context.Context) *businessAccountingProfileORMHasManyActionablePersonalInsights {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a businessAccountingProfileORMHasManyActionablePersonalInsights) Session(session *gorm.Session) *businessAccountingProfileORMHasManyActionablePersonalInsights {
	a.db = a.db.Session(session)
	return &a
}

func (a businessAccountingProfileORMHasManyActionablePersonalInsights) Model(m *accounting_servicev1.BusinessAccountingProfileORM) *businessAccountingProfileORMHasManyActionablePersonalInsightsTx {
	return &businessAccountingProfileORMHasManyActionablePersonalInsightsTx{a.db.Model(m).Association(a.Name())}
}

type businessAccountingProfileORMHasManyActionablePersonalInsightsTx struct{ tx *gorm.Association }

func (a businessAccountingProfileORMHasManyActionablePersonalInsightsTx) Find() (result []*accounting_servicev1.BusinessActionableInsightORM, err error) {
	return result, a.tx.Find(&result)
}

func (a businessAccountingProfileORMHasManyActionablePersonalInsightsTx) Append(values ...*accounting_servicev1.BusinessActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a businessAccountingProfileORMHasManyActionablePersonalInsightsTx) Replace(values ...*accounting_servicev1.BusinessActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a businessAccountingProfileORMHasManyActionablePersonalInsightsTx) Delete(values ...*accounting_servicev1.BusinessActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a businessAccountingProfileORMHasManyActionablePersonalInsightsTx) Clear() error {
	return a.tx.Clear()
}

func (a businessAccountingProfileORMHasManyActionablePersonalInsightsTx) Count() int64 {
	return a.tx.Count()
}

type businessAccountingProfileORMHasManyMergeLiink struct {
	db *gorm.DB

	field.RelationField

	Token struct {
		field.RelationField
	}
	Account struct {
		field.RelationField
		ReferenceDetails struct {
			field.RelationField
			ChartOfAccounts struct {
				field.RelationField
			}
			Contacts struct {
				field.RelationField
			}
			Items struct {
				field.RelationField
			}
			TaxRates struct {
				field.RelationField
			}
		}
		ReportDetails struct {
			field.RelationField
			BalanceSheets struct {
				field.RelationField
				Assets struct {
					field.RelationField
				}
				Equity struct {
					field.RelationField
				}
				Liabilities struct {
					field.RelationField
				}
			}
			CashFlowStatements struct {
				field.RelationField
				FinancingActivities struct {
					field.RelationField
				}
				InvestingActivities struct {
					field.RelationField
				}
				OperatingActivities struct {
					field.RelationField
				}
			}
			IncomeStatements struct {
				field.RelationField
				CostOfSales struct {
					field.RelationField
				}
				Income struct {
					field.RelationField
				}
				NonOperatingExpenses struct {
					field.RelationField
				}
				OperatingExpenses struct {
					field.RelationField
				}
			}
		}
		TransactionsDetails struct {
			field.RelationField
			CreditNotes struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			Expenses struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
			Invoices struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			JournalEntries struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
			Payments struct {
				field.RelationField
			}
			Transactions struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			VendorCredits struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
		}
		Attachments struct {
			field.RelationField
		}
		CompanyInfo struct {
			field.RelationField
			Addresses struct {
				field.RelationField
			}
		}
		PurchaseOrders struct {
			field.RelationField
			DeliveryAddress struct {
				field.RelationField
			}
			LineItems struct {
				field.RelationField
			}
		}
	}
}

func (a businessAccountingProfileORMHasManyMergeLiink) Where(conds ...field.Expr) *businessAccountingProfileORMHasManyMergeLiink {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a businessAccountingProfileORMHasManyMergeLiink) WithContext(ctx context.Context) *businessAccountingProfileORMHasManyMergeLiink {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a businessAccountingProfileORMHasManyMergeLiink) Session(session *gorm.Session) *businessAccountingProfileORMHasManyMergeLiink {
	a.db = a.db.Session(session)
	return &a
}

func (a businessAccountingProfileORMHasManyMergeLiink) Model(m *accounting_servicev1.BusinessAccountingProfileORM) *businessAccountingProfileORMHasManyMergeLiinkTx {
	return &businessAccountingProfileORMHasManyMergeLiinkTx{a.db.Model(m).Association(a.Name())}
}

type businessAccountingProfileORMHasManyMergeLiinkTx struct{ tx *gorm.Association }

func (a businessAccountingProfileORMHasManyMergeLiinkTx) Find() (result []*accounting_servicev1.MergeLinkORM, err error) {
	return result, a.tx.Find(&result)
}

func (a businessAccountingProfileORMHasManyMergeLiinkTx) Append(values ...*accounting_servicev1.MergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a businessAccountingProfileORMHasManyMergeLiinkTx) Replace(values ...*accounting_servicev1.MergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a businessAccountingProfileORMHasManyMergeLiinkTx) Delete(values ...*accounting_servicev1.MergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a businessAccountingProfileORMHasManyMergeLiinkTx) Clear() error {
	return a.tx.Clear()
}

func (a businessAccountingProfileORMHasManyMergeLiinkTx) Count() int64 {
	return a.tx.Count()
}

type businessAccountingProfileORMDo struct{ gen.DO }

type IBusinessAccountingProfileORMDo interface {
	gen.SubQuery
	Debug() IBusinessAccountingProfileORMDo
	WithContext(ctx context.Context) IBusinessAccountingProfileORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBusinessAccountingProfileORMDo
	WriteDB() IBusinessAccountingProfileORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBusinessAccountingProfileORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBusinessAccountingProfileORMDo
	Not(conds ...gen.Condition) IBusinessAccountingProfileORMDo
	Or(conds ...gen.Condition) IBusinessAccountingProfileORMDo
	Select(conds ...field.Expr) IBusinessAccountingProfileORMDo
	Where(conds ...gen.Condition) IBusinessAccountingProfileORMDo
	Order(conds ...field.Expr) IBusinessAccountingProfileORMDo
	Distinct(cols ...field.Expr) IBusinessAccountingProfileORMDo
	Omit(cols ...field.Expr) IBusinessAccountingProfileORMDo
	Join(table schema.Tabler, on ...field.Expr) IBusinessAccountingProfileORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBusinessAccountingProfileORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBusinessAccountingProfileORMDo
	Group(cols ...field.Expr) IBusinessAccountingProfileORMDo
	Having(conds ...gen.Condition) IBusinessAccountingProfileORMDo
	Limit(limit int) IBusinessAccountingProfileORMDo
	Offset(offset int) IBusinessAccountingProfileORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBusinessAccountingProfileORMDo
	Unscoped() IBusinessAccountingProfileORMDo
	Create(values ...*accounting_servicev1.BusinessAccountingProfileORM) error
	CreateInBatches(values []*accounting_servicev1.BusinessAccountingProfileORM, batchSize int) error
	Save(values ...*accounting_servicev1.BusinessAccountingProfileORM) error
	First() (*accounting_servicev1.BusinessAccountingProfileORM, error)
	Take() (*accounting_servicev1.BusinessAccountingProfileORM, error)
	Last() (*accounting_servicev1.BusinessAccountingProfileORM, error)
	Find() ([]*accounting_servicev1.BusinessAccountingProfileORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.BusinessAccountingProfileORM, err error)
	FindInBatches(result *[]*accounting_servicev1.BusinessAccountingProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.BusinessAccountingProfileORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBusinessAccountingProfileORMDo
	Assign(attrs ...field.AssignExpr) IBusinessAccountingProfileORMDo
	Joins(fields ...field.RelationField) IBusinessAccountingProfileORMDo
	Preload(fields ...field.RelationField) IBusinessAccountingProfileORMDo
	FirstOrInit() (*accounting_servicev1.BusinessAccountingProfileORM, error)
	FirstOrCreate() (*accounting_servicev1.BusinessAccountingProfileORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.BusinessAccountingProfileORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBusinessAccountingProfileORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.BusinessAccountingProfileORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.BusinessAccountingProfileORM, err error)
	CreateRecord(item accounting_servicev1.BusinessAccountingProfileORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.BusinessAccountingProfileORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.BusinessAccountingProfileORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.BusinessAccountingProfileORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.BusinessAccountingProfileORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessAccountingProfileORMDo) GetRecordByID(id int) (result accounting_servicev1.BusinessAccountingProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_accounting_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b businessAccountingProfileORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.BusinessAccountingProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_accounting_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (b businessAccountingProfileORMDo) CreateRecord(item accounting_servicev1.BusinessAccountingProfileORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO business_accounting_profiles (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessAccountingProfileORMDo) UpdateRecordByID(id int, item accounting_servicev1.BusinessAccountingProfileORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE business_accounting_profiles SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessAccountingProfileORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM business_accounting_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (b businessAccountingProfileORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.BusinessAccountingProfileORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_accounting_profiles ORDER BY " + b.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (b businessAccountingProfileORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM business_accounting_profiles ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessAccountingProfileORMDo) GetByID(id uint64) (result accounting_servicev1.BusinessAccountingProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_accounting_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b businessAccountingProfileORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.BusinessAccountingProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_accounting_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b businessAccountingProfileORMDo) Debug() IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Debug())
}

func (b businessAccountingProfileORMDo) WithContext(ctx context.Context) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b businessAccountingProfileORMDo) ReadDB() IBusinessAccountingProfileORMDo {
	return b.Clauses(dbresolver.Read)
}

func (b businessAccountingProfileORMDo) WriteDB() IBusinessAccountingProfileORMDo {
	return b.Clauses(dbresolver.Write)
}

func (b businessAccountingProfileORMDo) Session(config *gorm.Session) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Session(config))
}

func (b businessAccountingProfileORMDo) Clauses(conds ...clause.Expression) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b businessAccountingProfileORMDo) Returning(value interface{}, columns ...string) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b businessAccountingProfileORMDo) Not(conds ...gen.Condition) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b businessAccountingProfileORMDo) Or(conds ...gen.Condition) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b businessAccountingProfileORMDo) Select(conds ...field.Expr) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b businessAccountingProfileORMDo) Where(conds ...gen.Condition) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b businessAccountingProfileORMDo) Order(conds ...field.Expr) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b businessAccountingProfileORMDo) Distinct(cols ...field.Expr) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b businessAccountingProfileORMDo) Omit(cols ...field.Expr) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b businessAccountingProfileORMDo) Join(table schema.Tabler, on ...field.Expr) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b businessAccountingProfileORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b businessAccountingProfileORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b businessAccountingProfileORMDo) Group(cols ...field.Expr) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b businessAccountingProfileORMDo) Having(conds ...gen.Condition) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b businessAccountingProfileORMDo) Limit(limit int) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b businessAccountingProfileORMDo) Offset(offset int) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b businessAccountingProfileORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b businessAccountingProfileORMDo) Unscoped() IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Unscoped())
}

func (b businessAccountingProfileORMDo) Create(values ...*accounting_servicev1.BusinessAccountingProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b businessAccountingProfileORMDo) CreateInBatches(values []*accounting_servicev1.BusinessAccountingProfileORM, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b businessAccountingProfileORMDo) Save(values ...*accounting_servicev1.BusinessAccountingProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b businessAccountingProfileORMDo) First() (*accounting_servicev1.BusinessAccountingProfileORM, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessAccountingProfileORM), nil
	}
}

func (b businessAccountingProfileORMDo) Take() (*accounting_servicev1.BusinessAccountingProfileORM, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessAccountingProfileORM), nil
	}
}

func (b businessAccountingProfileORMDo) Last() (*accounting_servicev1.BusinessAccountingProfileORM, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessAccountingProfileORM), nil
	}
}

func (b businessAccountingProfileORMDo) Find() ([]*accounting_servicev1.BusinessAccountingProfileORM, error) {
	result, err := b.DO.Find()
	return result.([]*accounting_servicev1.BusinessAccountingProfileORM), err
}

func (b businessAccountingProfileORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.BusinessAccountingProfileORM, err error) {
	buf := make([]*accounting_servicev1.BusinessAccountingProfileORM, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b businessAccountingProfileORMDo) FindInBatches(result *[]*accounting_servicev1.BusinessAccountingProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b businessAccountingProfileORMDo) Attrs(attrs ...field.AssignExpr) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b businessAccountingProfileORMDo) Assign(attrs ...field.AssignExpr) IBusinessAccountingProfileORMDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b businessAccountingProfileORMDo) Joins(fields ...field.RelationField) IBusinessAccountingProfileORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b businessAccountingProfileORMDo) Preload(fields ...field.RelationField) IBusinessAccountingProfileORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b businessAccountingProfileORMDo) FirstOrInit() (*accounting_servicev1.BusinessAccountingProfileORM, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessAccountingProfileORM), nil
	}
}

func (b businessAccountingProfileORMDo) FirstOrCreate() (*accounting_servicev1.BusinessAccountingProfileORM, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessAccountingProfileORM), nil
	}
}

func (b businessAccountingProfileORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.BusinessAccountingProfileORM, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b businessAccountingProfileORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b businessAccountingProfileORMDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b businessAccountingProfileORMDo) Delete(models ...*accounting_servicev1.BusinessAccountingProfileORM) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *businessAccountingProfileORMDo) withDO(do gen.Dao) *businessAccountingProfileORMDo {
	b.DO = *do.(*gen.DO)
	return b
}
