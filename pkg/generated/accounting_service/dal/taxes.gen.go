// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newTaxORM(db *gorm.DB, opts ...gen.DOOption) taxORM {
	_taxORM := taxORM{}

	_taxORM.taxORMDo.UseDB(db, opts...)
	_taxORM.taxORMDo.UseModel(&accounting_servicev1.TaxORM{})

	tableName := _taxORM.taxORMDo.TableName()
	_taxORM.ALL = field.NewAsterisk(tableName)
	_taxORM.Amount = field.NewFloat64(tableName, "amount")
	_taxORM.CreatedAt = field.NewTime(tableName, "created_at")
	_taxORM.EmployeePayrollRunId = field.NewUint64(tableName, "employee_payroll_run_id")
	_taxORM.EmployerTax = field.NewBool(tableName, "employer_tax")
	_taxORM.Id = field.NewUint64(tableName, "id")
	_taxORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_taxORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_taxORM.Name = field.NewString(tableName, "name")
	_taxORM.PayrollRunMergeAccountId = field.NewString(tableName, "payroll_run_merge_account_id")
	_taxORM.RemoteId = field.NewString(tableName, "remote_id")
	_taxORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")

	_taxORM.fillFieldMap()

	return _taxORM
}

type taxORM struct {
	taxORMDo

	ALL                      field.Asterisk
	Amount                   field.Float64
	CreatedAt                field.Time
	EmployeePayrollRunId     field.Uint64
	EmployerTax              field.Bool
	Id                       field.Uint64
	MergeAccountId           field.String
	ModifiedAt               field.Time
	Name                     field.String
	PayrollRunMergeAccountId field.String
	RemoteId                 field.String
	RemoteWasDeleted         field.Bool

	fieldMap map[string]field.Expr
}

func (t taxORM) Table(newTableName string) *taxORM {
	t.taxORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taxORM) As(alias string) *taxORM {
	t.taxORMDo.DO = *(t.taxORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taxORM) updateTableName(table string) *taxORM {
	t.ALL = field.NewAsterisk(table)
	t.Amount = field.NewFloat64(table, "amount")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.EmployeePayrollRunId = field.NewUint64(table, "employee_payroll_run_id")
	t.EmployerTax = field.NewBool(table, "employer_tax")
	t.Id = field.NewUint64(table, "id")
	t.MergeAccountId = field.NewString(table, "merge_account_id")
	t.ModifiedAt = field.NewTime(table, "modified_at")
	t.Name = field.NewString(table, "name")
	t.PayrollRunMergeAccountId = field.NewString(table, "payroll_run_merge_account_id")
	t.RemoteId = field.NewString(table, "remote_id")
	t.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")

	t.fillFieldMap()

	return t
}

func (t *taxORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taxORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["employee_payroll_run_id"] = t.EmployeePayrollRunId
	t.fieldMap["employer_tax"] = t.EmployerTax
	t.fieldMap["id"] = t.Id
	t.fieldMap["merge_account_id"] = t.MergeAccountId
	t.fieldMap["modified_at"] = t.ModifiedAt
	t.fieldMap["name"] = t.Name
	t.fieldMap["payroll_run_merge_account_id"] = t.PayrollRunMergeAccountId
	t.fieldMap["remote_id"] = t.RemoteId
	t.fieldMap["remote_was_deleted"] = t.RemoteWasDeleted
}

func (t taxORM) clone(db *gorm.DB) taxORM {
	t.taxORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taxORM) replaceDB(db *gorm.DB) taxORM {
	t.taxORMDo.ReplaceDB(db)
	return t
}

type taxORMDo struct{ gen.DO }

type ITaxORMDo interface {
	gen.SubQuery
	Debug() ITaxORMDo
	WithContext(ctx context.Context) ITaxORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaxORMDo
	WriteDB() ITaxORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaxORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaxORMDo
	Not(conds ...gen.Condition) ITaxORMDo
	Or(conds ...gen.Condition) ITaxORMDo
	Select(conds ...field.Expr) ITaxORMDo
	Where(conds ...gen.Condition) ITaxORMDo
	Order(conds ...field.Expr) ITaxORMDo
	Distinct(cols ...field.Expr) ITaxORMDo
	Omit(cols ...field.Expr) ITaxORMDo
	Join(table schema.Tabler, on ...field.Expr) ITaxORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaxORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaxORMDo
	Group(cols ...field.Expr) ITaxORMDo
	Having(conds ...gen.Condition) ITaxORMDo
	Limit(limit int) ITaxORMDo
	Offset(offset int) ITaxORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaxORMDo
	Unscoped() ITaxORMDo
	Create(values ...*accounting_servicev1.TaxORM) error
	CreateInBatches(values []*accounting_servicev1.TaxORM, batchSize int) error
	Save(values ...*accounting_servicev1.TaxORM) error
	First() (*accounting_servicev1.TaxORM, error)
	Take() (*accounting_servicev1.TaxORM, error)
	Last() (*accounting_servicev1.TaxORM, error)
	Find() ([]*accounting_servicev1.TaxORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.TaxORM, err error)
	FindInBatches(result *[]*accounting_servicev1.TaxORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.TaxORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaxORMDo
	Assign(attrs ...field.AssignExpr) ITaxORMDo
	Joins(fields ...field.RelationField) ITaxORMDo
	Preload(fields ...field.RelationField) ITaxORMDo
	FirstOrInit() (*accounting_servicev1.TaxORM, error)
	FirstOrCreate() (*accounting_servicev1.TaxORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.TaxORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaxORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.TaxORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.TaxORM, err error)
	CreateRecord(item accounting_servicev1.TaxORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.TaxORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.TaxORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.TaxORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.TaxORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxORMDo) GetRecordByID(id int) (result accounting_servicev1.TaxORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM taxes ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t taxORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.TaxORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM taxes ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (t taxORMDo) CreateRecord(item accounting_servicev1.TaxORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO taxes (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxORMDo) UpdateRecordByID(id int, item accounting_servicev1.TaxORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE taxes SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM taxes ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (t taxORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.TaxORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM taxes ORDER BY " + t.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t taxORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM taxes ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxORMDo) GetByID(id uint64) (result accounting_servicev1.TaxORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM taxes ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t taxORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.TaxORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM taxes ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t taxORMDo) Debug() ITaxORMDo {
	return t.withDO(t.DO.Debug())
}

func (t taxORMDo) WithContext(ctx context.Context) ITaxORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taxORMDo) ReadDB() ITaxORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t taxORMDo) WriteDB() ITaxORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t taxORMDo) Session(config *gorm.Session) ITaxORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t taxORMDo) Clauses(conds ...clause.Expression) ITaxORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taxORMDo) Returning(value interface{}, columns ...string) ITaxORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taxORMDo) Not(conds ...gen.Condition) ITaxORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taxORMDo) Or(conds ...gen.Condition) ITaxORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taxORMDo) Select(conds ...field.Expr) ITaxORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taxORMDo) Where(conds ...gen.Condition) ITaxORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taxORMDo) Order(conds ...field.Expr) ITaxORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taxORMDo) Distinct(cols ...field.Expr) ITaxORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taxORMDo) Omit(cols ...field.Expr) ITaxORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taxORMDo) Join(table schema.Tabler, on ...field.Expr) ITaxORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taxORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaxORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taxORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaxORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taxORMDo) Group(cols ...field.Expr) ITaxORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taxORMDo) Having(conds ...gen.Condition) ITaxORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taxORMDo) Limit(limit int) ITaxORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taxORMDo) Offset(offset int) ITaxORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taxORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaxORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taxORMDo) Unscoped() ITaxORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taxORMDo) Create(values ...*accounting_servicev1.TaxORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taxORMDo) CreateInBatches(values []*accounting_servicev1.TaxORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taxORMDo) Save(values ...*accounting_servicev1.TaxORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taxORMDo) First() (*accounting_servicev1.TaxORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TaxORM), nil
	}
}

func (t taxORMDo) Take() (*accounting_servicev1.TaxORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TaxORM), nil
	}
}

func (t taxORMDo) Last() (*accounting_servicev1.TaxORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TaxORM), nil
	}
}

func (t taxORMDo) Find() ([]*accounting_servicev1.TaxORM, error) {
	result, err := t.DO.Find()
	return result.([]*accounting_servicev1.TaxORM), err
}

func (t taxORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.TaxORM, err error) {
	buf := make([]*accounting_servicev1.TaxORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taxORMDo) FindInBatches(result *[]*accounting_servicev1.TaxORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taxORMDo) Attrs(attrs ...field.AssignExpr) ITaxORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taxORMDo) Assign(attrs ...field.AssignExpr) ITaxORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taxORMDo) Joins(fields ...field.RelationField) ITaxORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taxORMDo) Preload(fields ...field.RelationField) ITaxORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taxORMDo) FirstOrInit() (*accounting_servicev1.TaxORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TaxORM), nil
	}
}

func (t taxORMDo) FirstOrCreate() (*accounting_servicev1.TaxORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TaxORM), nil
	}
}

func (t taxORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.TaxORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taxORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taxORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taxORMDo) Delete(models ...*accounting_servicev1.TaxORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taxORMDo) withDO(do gen.Dao) *taxORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
