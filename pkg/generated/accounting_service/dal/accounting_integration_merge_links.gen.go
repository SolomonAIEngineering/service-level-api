// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newAccountingIntegrationMergeLinkORM(db *gorm.DB, opts ...gen.DOOption) accountingIntegrationMergeLinkORM {
	_accountingIntegrationMergeLinkORM := accountingIntegrationMergeLinkORM{}

	_accountingIntegrationMergeLinkORM.accountingIntegrationMergeLinkORMDo.UseDB(db, opts...)
	_accountingIntegrationMergeLinkORM.accountingIntegrationMergeLinkORMDo.UseModel(&accounting_servicev1.AccountingIntegrationMergeLinkORM{})

	tableName := _accountingIntegrationMergeLinkORM.accountingIntegrationMergeLinkORMDo.TableName()
	_accountingIntegrationMergeLinkORM.ALL = field.NewAsterisk(tableName)
	_accountingIntegrationMergeLinkORM.Category = field.NewString(tableName, "category")
	_accountingIntegrationMergeLinkORM.EndUserEmailAddress = field.NewString(tableName, "end_user_email_address")
	_accountingIntegrationMergeLinkORM.EndUserOrganizationName = field.NewString(tableName, "end_user_organization_name")
	_accountingIntegrationMergeLinkORM.EndUserOriginId = field.NewString(tableName, "end_user_origin_id")
	_accountingIntegrationMergeLinkORM.Id = field.NewUint64(tableName, "id")
	_accountingIntegrationMergeLinkORM.Integration = field.NewString(tableName, "integration")
	_accountingIntegrationMergeLinkORM.IntegrationImage = field.NewString(tableName, "integration_image")
	_accountingIntegrationMergeLinkORM.IntegrationName = field.NewString(tableName, "integration_name")
	_accountingIntegrationMergeLinkORM.IntegrationSlug = field.NewString(tableName, "integration_slug")
	_accountingIntegrationMergeLinkORM.IntegrationSquareImage = field.NewString(tableName, "integration_square_image")
	_accountingIntegrationMergeLinkORM.IsDuplicate = field.NewBool(tableName, "is_duplicate")
	_accountingIntegrationMergeLinkORM.LastModifiedAt = field.NewTime(tableName, "last_modified_at")
	_accountingIntegrationMergeLinkORM.MergeBusinessProfileId = field.NewUint64(tableName, "merge_business_profile_id")
	_accountingIntegrationMergeLinkORM.MergeLinkedAccountId = field.NewString(tableName, "merge_linked_account_id")
	_accountingIntegrationMergeLinkORM.Status = field.NewString(tableName, "status")
	_accountingIntegrationMergeLinkORM.WebhookListenerUrl = field.NewString(tableName, "webhook_listener_url")
	_accountingIntegrationMergeLinkORM.Account = accountingIntegrationMergeLinkORMHasOneAccount{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Account", "accounting_servicev1.LinkedAccountingAccountORM"),
		Attachments: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.Attachments", "accounting_servicev1.AccountingAttachmentORM"),
		},
		BalanceSheets: struct {
			field.RelationField
			Assets struct {
				field.RelationField
			}
			Equity struct {
				field.RelationField
			}
			Liabilities struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.BalanceSheets", "accounting_servicev1.BalanceSheetORM"),
			Assets: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.BalanceSheets.Assets", "accounting_servicev1.ReportItemORM"),
			},
			Equity: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.BalanceSheets.Equity", "accounting_servicev1.ReportItemORM"),
			},
			Liabilities: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.BalanceSheets.Liabilities", "accounting_servicev1.ReportItemORM"),
			},
		},
		CashFlowStatements: struct {
			field.RelationField
			FinancingActivities struct {
				field.RelationField
			}
			InvestingActivities struct {
				field.RelationField
			}
			OperatingActivities struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.CashFlowStatements", "accounting_servicev1.CashFlowStatementORM"),
			FinancingActivities: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.CashFlowStatements.FinancingActivities", "accounting_servicev1.ReportItemORM"),
			},
			InvestingActivities: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.CashFlowStatements.InvestingActivities", "accounting_servicev1.ReportItemORM"),
			},
			OperatingActivities: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.CashFlowStatements.OperatingActivities", "accounting_servicev1.ReportItemORM"),
			},
		},
		ChartOfAccounts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.ChartOfAccounts", "accounting_servicev1.BusinessChartOfAccountsORM"),
		},
		CompanyInfo: struct {
			field.RelationField
			Addresses struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.CompanyInfo", "accounting_servicev1.CompanyInfoORM"),
			Addresses: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.CompanyInfo.Addresses", "accounting_servicev1.CompanyAddressORM"),
			},
		},
		Contacts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.Contacts", "accounting_servicev1.ContactsORM"),
		},
		CreditNotes: struct {
			field.RelationField
			LineItems struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.CreditNotes", "accounting_servicev1.CreditNoteORM"),
			LineItems: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.CreditNotes.LineItems", "accounting_servicev1.CreditNoteLineItemORM"),
			},
		},
		Expenses: struct {
			field.RelationField
			Lines struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.Expenses", "accounting_servicev1.ExpenseORM"),
			Lines: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Expenses.Lines", "accounting_servicev1.ExpenseLineORM"),
			},
		},
		IncomeStatements: struct {
			field.RelationField
			CostOfSales struct {
				field.RelationField
			}
			Income struct {
				field.RelationField
			}
			NonOperatingExpenses struct {
				field.RelationField
			}
			OperatingExpenses struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.IncomeStatements", "accounting_servicev1.IncomeStatementORM"),
			CostOfSales: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.IncomeStatements.CostOfSales", "accounting_servicev1.ReportItemORM"),
			},
			Income: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.IncomeStatements.Income", "accounting_servicev1.ReportItemORM"),
			},
			NonOperatingExpenses: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.IncomeStatements.NonOperatingExpenses", "accounting_servicev1.ReportItemORM"),
			},
			OperatingExpenses: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.IncomeStatements.OperatingExpenses", "accounting_servicev1.ReportItemORM"),
			},
		},
		Invoices: struct {
			field.RelationField
			LineItems struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.Invoices", "accounting_servicev1.InvoiceORM"),
			LineItems: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Invoices.LineItems", "accounting_servicev1.InvoiceLineItemORM"),
			},
		},
		Items: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.Items", "accounting_servicev1.ItemORM"),
		},
		JournalEntries: struct {
			field.RelationField
			Lines struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.JournalEntries", "accounting_servicev1.JournalEntryORM"),
			Lines: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.JournalEntries.Lines", "accounting_servicev1.JournalLineORM"),
			},
		},
		Payments: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.Payments", "accounting_servicev1.PaymentORM"),
		},
		PurchaseOrders: struct {
			field.RelationField
			DeliveryAddress struct {
				field.RelationField
			}
			LineItems struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.PurchaseOrders", "accounting_servicev1.PurchaseOrderORM"),
			DeliveryAddress: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.PurchaseOrders.DeliveryAddress", "accounting_servicev1.CompanyAddressORM"),
			},
			LineItems: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.PurchaseOrders.LineItems", "accounting_servicev1.PurchaseOrderLineItemORM"),
			},
		},
		TaxRates: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.TaxRates", "accounting_servicev1.TaxRateORM"),
		},
		Transactions: struct {
			field.RelationField
			LineItems struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.Transactions", "accounting_servicev1.BusinessTransactionORM"),
			LineItems: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Transactions.LineItems", "accounting_servicev1.TransactionLineItemORM"),
			},
		},
		VendorCredits: struct {
			field.RelationField
			Lines struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.VendorCredits", "accounting_servicev1.VendorCreditORM"),
			Lines: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.VendorCredits.Lines", "accounting_servicev1.VendorCreditLineORM"),
			},
		},
	}

	_accountingIntegrationMergeLinkORM.Token = accountingIntegrationMergeLinkORMHasOneToken{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Token", "accounting_servicev1.MergeLinkedAccountTokenORM"),
	}

	_accountingIntegrationMergeLinkORM.fillFieldMap()

	return _accountingIntegrationMergeLinkORM
}

type accountingIntegrationMergeLinkORM struct {
	accountingIntegrationMergeLinkORMDo

	ALL                     field.Asterisk
	Category                field.String
	EndUserEmailAddress     field.String
	EndUserOrganizationName field.String
	EndUserOriginId         field.String
	Id                      field.Uint64
	Integration             field.String
	IntegrationImage        field.String
	IntegrationName         field.String
	IntegrationSlug         field.String
	IntegrationSquareImage  field.String
	IsDuplicate             field.Bool
	LastModifiedAt          field.Time
	MergeBusinessProfileId  field.Uint64
	MergeLinkedAccountId    field.String
	Status                  field.String
	WebhookListenerUrl      field.String
	Account                 accountingIntegrationMergeLinkORMHasOneAccount

	Token accountingIntegrationMergeLinkORMHasOneToken

	fieldMap map[string]field.Expr
}

func (a accountingIntegrationMergeLinkORM) Table(newTableName string) *accountingIntegrationMergeLinkORM {
	a.accountingIntegrationMergeLinkORMDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountingIntegrationMergeLinkORM) As(alias string) *accountingIntegrationMergeLinkORM {
	a.accountingIntegrationMergeLinkORMDo.DO = *(a.accountingIntegrationMergeLinkORMDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountingIntegrationMergeLinkORM) updateTableName(table string) *accountingIntegrationMergeLinkORM {
	a.ALL = field.NewAsterisk(table)
	a.Category = field.NewString(table, "category")
	a.EndUserEmailAddress = field.NewString(table, "end_user_email_address")
	a.EndUserOrganizationName = field.NewString(table, "end_user_organization_name")
	a.EndUserOriginId = field.NewString(table, "end_user_origin_id")
	a.Id = field.NewUint64(table, "id")
	a.Integration = field.NewString(table, "integration")
	a.IntegrationImage = field.NewString(table, "integration_image")
	a.IntegrationName = field.NewString(table, "integration_name")
	a.IntegrationSlug = field.NewString(table, "integration_slug")
	a.IntegrationSquareImage = field.NewString(table, "integration_square_image")
	a.IsDuplicate = field.NewBool(table, "is_duplicate")
	a.LastModifiedAt = field.NewTime(table, "last_modified_at")
	a.MergeBusinessProfileId = field.NewUint64(table, "merge_business_profile_id")
	a.MergeLinkedAccountId = field.NewString(table, "merge_linked_account_id")
	a.Status = field.NewString(table, "status")
	a.WebhookListenerUrl = field.NewString(table, "webhook_listener_url")

	a.fillFieldMap()

	return a
}

func (a *accountingIntegrationMergeLinkORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountingIntegrationMergeLinkORM) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 18)
	a.fieldMap["category"] = a.Category
	a.fieldMap["end_user_email_address"] = a.EndUserEmailAddress
	a.fieldMap["end_user_organization_name"] = a.EndUserOrganizationName
	a.fieldMap["end_user_origin_id"] = a.EndUserOriginId
	a.fieldMap["id"] = a.Id
	a.fieldMap["integration"] = a.Integration
	a.fieldMap["integration_image"] = a.IntegrationImage
	a.fieldMap["integration_name"] = a.IntegrationName
	a.fieldMap["integration_slug"] = a.IntegrationSlug
	a.fieldMap["integration_square_image"] = a.IntegrationSquareImage
	a.fieldMap["is_duplicate"] = a.IsDuplicate
	a.fieldMap["last_modified_at"] = a.LastModifiedAt
	a.fieldMap["merge_business_profile_id"] = a.MergeBusinessProfileId
	a.fieldMap["merge_linked_account_id"] = a.MergeLinkedAccountId
	a.fieldMap["status"] = a.Status
	a.fieldMap["webhook_listener_url"] = a.WebhookListenerUrl

}

func (a accountingIntegrationMergeLinkORM) clone(db *gorm.DB) accountingIntegrationMergeLinkORM {
	a.accountingIntegrationMergeLinkORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountingIntegrationMergeLinkORM) replaceDB(db *gorm.DB) accountingIntegrationMergeLinkORM {
	a.accountingIntegrationMergeLinkORMDo.ReplaceDB(db)
	return a
}

type accountingIntegrationMergeLinkORMHasOneAccount struct {
	db *gorm.DB

	field.RelationField

	Attachments struct {
		field.RelationField
	}
	BalanceSheets struct {
		field.RelationField
		Assets struct {
			field.RelationField
		}
		Equity struct {
			field.RelationField
		}
		Liabilities struct {
			field.RelationField
		}
	}
	CashFlowStatements struct {
		field.RelationField
		FinancingActivities struct {
			field.RelationField
		}
		InvestingActivities struct {
			field.RelationField
		}
		OperatingActivities struct {
			field.RelationField
		}
	}
	ChartOfAccounts struct {
		field.RelationField
	}
	CompanyInfo struct {
		field.RelationField
		Addresses struct {
			field.RelationField
		}
	}
	Contacts struct {
		field.RelationField
	}
	CreditNotes struct {
		field.RelationField
		LineItems struct {
			field.RelationField
		}
	}
	Expenses struct {
		field.RelationField
		Lines struct {
			field.RelationField
		}
	}
	IncomeStatements struct {
		field.RelationField
		CostOfSales struct {
			field.RelationField
		}
		Income struct {
			field.RelationField
		}
		NonOperatingExpenses struct {
			field.RelationField
		}
		OperatingExpenses struct {
			field.RelationField
		}
	}
	Invoices struct {
		field.RelationField
		LineItems struct {
			field.RelationField
		}
	}
	Items struct {
		field.RelationField
	}
	JournalEntries struct {
		field.RelationField
		Lines struct {
			field.RelationField
		}
	}
	Payments struct {
		field.RelationField
	}
	PurchaseOrders struct {
		field.RelationField
		DeliveryAddress struct {
			field.RelationField
		}
		LineItems struct {
			field.RelationField
		}
	}
	TaxRates struct {
		field.RelationField
	}
	Transactions struct {
		field.RelationField
		LineItems struct {
			field.RelationField
		}
	}
	VendorCredits struct {
		field.RelationField
		Lines struct {
			field.RelationField
		}
	}
}

func (a accountingIntegrationMergeLinkORMHasOneAccount) Where(conds ...field.Expr) *accountingIntegrationMergeLinkORMHasOneAccount {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a accountingIntegrationMergeLinkORMHasOneAccount) WithContext(ctx context.Context) *accountingIntegrationMergeLinkORMHasOneAccount {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a accountingIntegrationMergeLinkORMHasOneAccount) Session(session *gorm.Session) *accountingIntegrationMergeLinkORMHasOneAccount {
	a.db = a.db.Session(session)
	return &a
}

func (a accountingIntegrationMergeLinkORMHasOneAccount) Model(m *accounting_servicev1.AccountingIntegrationMergeLinkORM) *accountingIntegrationMergeLinkORMHasOneAccountTx {
	return &accountingIntegrationMergeLinkORMHasOneAccountTx{a.db.Model(m).Association(a.Name())}
}

type accountingIntegrationMergeLinkORMHasOneAccountTx struct{ tx *gorm.Association }

func (a accountingIntegrationMergeLinkORMHasOneAccountTx) Find() (result *accounting_servicev1.LinkedAccountingAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a accountingIntegrationMergeLinkORMHasOneAccountTx) Append(values ...*accounting_servicev1.LinkedAccountingAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a accountingIntegrationMergeLinkORMHasOneAccountTx) Replace(values ...*accounting_servicev1.LinkedAccountingAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a accountingIntegrationMergeLinkORMHasOneAccountTx) Delete(values ...*accounting_servicev1.LinkedAccountingAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a accountingIntegrationMergeLinkORMHasOneAccountTx) Clear() error {
	return a.tx.Clear()
}

func (a accountingIntegrationMergeLinkORMHasOneAccountTx) Count() int64 {
	return a.tx.Count()
}

type accountingIntegrationMergeLinkORMHasOneToken struct {
	db *gorm.DB

	field.RelationField
}

func (a accountingIntegrationMergeLinkORMHasOneToken) Where(conds ...field.Expr) *accountingIntegrationMergeLinkORMHasOneToken {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a accountingIntegrationMergeLinkORMHasOneToken) WithContext(ctx context.Context) *accountingIntegrationMergeLinkORMHasOneToken {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a accountingIntegrationMergeLinkORMHasOneToken) Session(session *gorm.Session) *accountingIntegrationMergeLinkORMHasOneToken {
	a.db = a.db.Session(session)
	return &a
}

func (a accountingIntegrationMergeLinkORMHasOneToken) Model(m *accounting_servicev1.AccountingIntegrationMergeLinkORM) *accountingIntegrationMergeLinkORMHasOneTokenTx {
	return &accountingIntegrationMergeLinkORMHasOneTokenTx{a.db.Model(m).Association(a.Name())}
}

type accountingIntegrationMergeLinkORMHasOneTokenTx struct{ tx *gorm.Association }

func (a accountingIntegrationMergeLinkORMHasOneTokenTx) Find() (result *accounting_servicev1.MergeLinkedAccountTokenORM, err error) {
	return result, a.tx.Find(&result)
}

func (a accountingIntegrationMergeLinkORMHasOneTokenTx) Append(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a accountingIntegrationMergeLinkORMHasOneTokenTx) Replace(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a accountingIntegrationMergeLinkORMHasOneTokenTx) Delete(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a accountingIntegrationMergeLinkORMHasOneTokenTx) Clear() error {
	return a.tx.Clear()
}

func (a accountingIntegrationMergeLinkORMHasOneTokenTx) Count() int64 {
	return a.tx.Count()
}

type accountingIntegrationMergeLinkORMDo struct{ gen.DO }

type IAccountingIntegrationMergeLinkORMDo interface {
	gen.SubQuery
	Debug() IAccountingIntegrationMergeLinkORMDo
	WithContext(ctx context.Context) IAccountingIntegrationMergeLinkORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAccountingIntegrationMergeLinkORMDo
	WriteDB() IAccountingIntegrationMergeLinkORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAccountingIntegrationMergeLinkORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAccountingIntegrationMergeLinkORMDo
	Not(conds ...gen.Condition) IAccountingIntegrationMergeLinkORMDo
	Or(conds ...gen.Condition) IAccountingIntegrationMergeLinkORMDo
	Select(conds ...field.Expr) IAccountingIntegrationMergeLinkORMDo
	Where(conds ...gen.Condition) IAccountingIntegrationMergeLinkORMDo
	Order(conds ...field.Expr) IAccountingIntegrationMergeLinkORMDo
	Distinct(cols ...field.Expr) IAccountingIntegrationMergeLinkORMDo
	Omit(cols ...field.Expr) IAccountingIntegrationMergeLinkORMDo
	Join(table schema.Tabler, on ...field.Expr) IAccountingIntegrationMergeLinkORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAccountingIntegrationMergeLinkORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAccountingIntegrationMergeLinkORMDo
	Group(cols ...field.Expr) IAccountingIntegrationMergeLinkORMDo
	Having(conds ...gen.Condition) IAccountingIntegrationMergeLinkORMDo
	Limit(limit int) IAccountingIntegrationMergeLinkORMDo
	Offset(offset int) IAccountingIntegrationMergeLinkORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountingIntegrationMergeLinkORMDo
	Unscoped() IAccountingIntegrationMergeLinkORMDo
	Create(values ...*accounting_servicev1.AccountingIntegrationMergeLinkORM) error
	CreateInBatches(values []*accounting_servicev1.AccountingIntegrationMergeLinkORM, batchSize int) error
	Save(values ...*accounting_servicev1.AccountingIntegrationMergeLinkORM) error
	First() (*accounting_servicev1.AccountingIntegrationMergeLinkORM, error)
	Take() (*accounting_servicev1.AccountingIntegrationMergeLinkORM, error)
	Last() (*accounting_servicev1.AccountingIntegrationMergeLinkORM, error)
	Find() ([]*accounting_servicev1.AccountingIntegrationMergeLinkORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.AccountingIntegrationMergeLinkORM, err error)
	FindInBatches(result *[]*accounting_servicev1.AccountingIntegrationMergeLinkORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.AccountingIntegrationMergeLinkORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAccountingIntegrationMergeLinkORMDo
	Assign(attrs ...field.AssignExpr) IAccountingIntegrationMergeLinkORMDo
	Joins(fields ...field.RelationField) IAccountingIntegrationMergeLinkORMDo
	Preload(fields ...field.RelationField) IAccountingIntegrationMergeLinkORMDo
	FirstOrInit() (*accounting_servicev1.AccountingIntegrationMergeLinkORM, error)
	FirstOrCreate() (*accounting_servicev1.AccountingIntegrationMergeLinkORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.AccountingIntegrationMergeLinkORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAccountingIntegrationMergeLinkORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.AccountingIntegrationMergeLinkORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.AccountingIntegrationMergeLinkORM, err error)
	CreateRecord(item accounting_servicev1.AccountingIntegrationMergeLinkORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.AccountingIntegrationMergeLinkORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.AccountingIntegrationMergeLinkORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.AccountingIntegrationMergeLinkORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.AccountingIntegrationMergeLinkORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountingIntegrationMergeLinkORMDo) GetRecordByID(id int) (result accounting_servicev1.AccountingIntegrationMergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounting_integration_merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a accountingIntegrationMergeLinkORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.AccountingIntegrationMergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounting_integration_merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (a accountingIntegrationMergeLinkORMDo) CreateRecord(item accounting_servicev1.AccountingIntegrationMergeLinkORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO accounting_integration_merge_links (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountingIntegrationMergeLinkORMDo) UpdateRecordByID(id int, item accounting_servicev1.AccountingIntegrationMergeLinkORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE accounting_integration_merge_links SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountingIntegrationMergeLinkORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM accounting_integration_merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (a accountingIntegrationMergeLinkORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.AccountingIntegrationMergeLinkORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounting_integration_merge_links ORDER BY " + a.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (a accountingIntegrationMergeLinkORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM accounting_integration_merge_links ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountingIntegrationMergeLinkORMDo) GetByID(id uint64) (result accounting_servicev1.AccountingIntegrationMergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounting_integration_merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a accountingIntegrationMergeLinkORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.AccountingIntegrationMergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM accounting_integration_merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a accountingIntegrationMergeLinkORMDo) Debug() IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Debug())
}

func (a accountingIntegrationMergeLinkORMDo) WithContext(ctx context.Context) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountingIntegrationMergeLinkORMDo) ReadDB() IAccountingIntegrationMergeLinkORMDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountingIntegrationMergeLinkORMDo) WriteDB() IAccountingIntegrationMergeLinkORMDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountingIntegrationMergeLinkORMDo) Session(config *gorm.Session) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountingIntegrationMergeLinkORMDo) Clauses(conds ...clause.Expression) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountingIntegrationMergeLinkORMDo) Returning(value interface{}, columns ...string) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountingIntegrationMergeLinkORMDo) Not(conds ...gen.Condition) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountingIntegrationMergeLinkORMDo) Or(conds ...gen.Condition) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountingIntegrationMergeLinkORMDo) Select(conds ...field.Expr) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountingIntegrationMergeLinkORMDo) Where(conds ...gen.Condition) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountingIntegrationMergeLinkORMDo) Order(conds ...field.Expr) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountingIntegrationMergeLinkORMDo) Distinct(cols ...field.Expr) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountingIntegrationMergeLinkORMDo) Omit(cols ...field.Expr) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountingIntegrationMergeLinkORMDo) Join(table schema.Tabler, on ...field.Expr) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountingIntegrationMergeLinkORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountingIntegrationMergeLinkORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountingIntegrationMergeLinkORMDo) Group(cols ...field.Expr) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountingIntegrationMergeLinkORMDo) Having(conds ...gen.Condition) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountingIntegrationMergeLinkORMDo) Limit(limit int) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountingIntegrationMergeLinkORMDo) Offset(offset int) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountingIntegrationMergeLinkORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountingIntegrationMergeLinkORMDo) Unscoped() IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountingIntegrationMergeLinkORMDo) Create(values ...*accounting_servicev1.AccountingIntegrationMergeLinkORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountingIntegrationMergeLinkORMDo) CreateInBatches(values []*accounting_servicev1.AccountingIntegrationMergeLinkORM, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountingIntegrationMergeLinkORMDo) Save(values ...*accounting_servicev1.AccountingIntegrationMergeLinkORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountingIntegrationMergeLinkORMDo) First() (*accounting_servicev1.AccountingIntegrationMergeLinkORM, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.AccountingIntegrationMergeLinkORM), nil
	}
}

func (a accountingIntegrationMergeLinkORMDo) Take() (*accounting_servicev1.AccountingIntegrationMergeLinkORM, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.AccountingIntegrationMergeLinkORM), nil
	}
}

func (a accountingIntegrationMergeLinkORMDo) Last() (*accounting_servicev1.AccountingIntegrationMergeLinkORM, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.AccountingIntegrationMergeLinkORM), nil
	}
}

func (a accountingIntegrationMergeLinkORMDo) Find() ([]*accounting_servicev1.AccountingIntegrationMergeLinkORM, error) {
	result, err := a.DO.Find()
	return result.([]*accounting_servicev1.AccountingIntegrationMergeLinkORM), err
}

func (a accountingIntegrationMergeLinkORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.AccountingIntegrationMergeLinkORM, err error) {
	buf := make([]*accounting_servicev1.AccountingIntegrationMergeLinkORM, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountingIntegrationMergeLinkORMDo) FindInBatches(result *[]*accounting_servicev1.AccountingIntegrationMergeLinkORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountingIntegrationMergeLinkORMDo) Attrs(attrs ...field.AssignExpr) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountingIntegrationMergeLinkORMDo) Assign(attrs ...field.AssignExpr) IAccountingIntegrationMergeLinkORMDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountingIntegrationMergeLinkORMDo) Joins(fields ...field.RelationField) IAccountingIntegrationMergeLinkORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountingIntegrationMergeLinkORMDo) Preload(fields ...field.RelationField) IAccountingIntegrationMergeLinkORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountingIntegrationMergeLinkORMDo) FirstOrInit() (*accounting_servicev1.AccountingIntegrationMergeLinkORM, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.AccountingIntegrationMergeLinkORM), nil
	}
}

func (a accountingIntegrationMergeLinkORMDo) FirstOrCreate() (*accounting_servicev1.AccountingIntegrationMergeLinkORM, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.AccountingIntegrationMergeLinkORM), nil
	}
}

func (a accountingIntegrationMergeLinkORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.AccountingIntegrationMergeLinkORM, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountingIntegrationMergeLinkORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountingIntegrationMergeLinkORMDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountingIntegrationMergeLinkORMDo) Delete(models ...*accounting_servicev1.AccountingIntegrationMergeLinkORM) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountingIntegrationMergeLinkORMDo) withDO(do gen.Dao) *accountingIntegrationMergeLinkORMDo {
	a.DO = *do.(*gen.DO)
	return a
}
