// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                                 = new(Query)
	AccountingAttachmentORM           *accountingAttachmentORM
	AccountingIntegrationMergeLinkORM *accountingIntegrationMergeLinkORM
	BalanceSheetORM                   *balanceSheetORM
	BusinessActionableInsightORM      *businessActionableInsightORM
	BusinessChartOfAccountORM         *businessChartOfAccountORM
	BusinessTransactionORM            *businessTransactionORM
	CashFlowStatementORM              *cashFlowStatementORM
	CompanyAddressORM                 *companyAddressORM
	CompanyInfoORM                    *companyInfoORM
	ContactsORM                       *contactsORM
	CreditNoteLineItemORM             *creditNoteLineItemORM
	CreditNoteORM                     *creditNoteORM
	ExpenseLineORM                    *expenseLineORM
	ExpenseORM                        *expenseORM
	IncomeStatementORM                *incomeStatementORM
	InvoiceLineItemORM                *invoiceLineItemORM
	InvoiceORM                        *invoiceORM
	ItemORM                           *itemORM
	JournalEntryORM                   *journalEntryORM
	JournalLineORM                    *journalLineORM
	LinkedAccountingAccountORM        *linkedAccountingAccountORM
	MergeBusinessProfileORM           *mergeBusinessProfileORM
	MergeLinkedAccountTokenORM        *mergeLinkedAccountTokenORM
	PaymentORM                        *paymentORM
	PurchaseOrderLineItemORM          *purchaseOrderLineItemORM
	PurchaseOrderORM                  *purchaseOrderORM
	ReportItemORM                     *reportItemORM
	TaxRateORM                        *taxRateORM
	TrackingCategoryORM               *trackingCategoryORM
	TransactionLineItemORM            *transactionLineItemORM
	VendorCreditLineORM               *vendorCreditLineORM
	VendorCreditORM                   *vendorCreditORM
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AccountingAttachmentORM = &Q.AccountingAttachmentORM
	AccountingIntegrationMergeLinkORM = &Q.AccountingIntegrationMergeLinkORM
	BalanceSheetORM = &Q.BalanceSheetORM
	BusinessActionableInsightORM = &Q.BusinessActionableInsightORM
	BusinessChartOfAccountORM = &Q.BusinessChartOfAccountORM
	BusinessTransactionORM = &Q.BusinessTransactionORM
	CashFlowStatementORM = &Q.CashFlowStatementORM
	CompanyAddressORM = &Q.CompanyAddressORM
	CompanyInfoORM = &Q.CompanyInfoORM
	ContactsORM = &Q.ContactsORM
	CreditNoteLineItemORM = &Q.CreditNoteLineItemORM
	CreditNoteORM = &Q.CreditNoteORM
	ExpenseLineORM = &Q.ExpenseLineORM
	ExpenseORM = &Q.ExpenseORM
	IncomeStatementORM = &Q.IncomeStatementORM
	InvoiceLineItemORM = &Q.InvoiceLineItemORM
	InvoiceORM = &Q.InvoiceORM
	ItemORM = &Q.ItemORM
	JournalEntryORM = &Q.JournalEntryORM
	JournalLineORM = &Q.JournalLineORM
	LinkedAccountingAccountORM = &Q.LinkedAccountingAccountORM
	MergeBusinessProfileORM = &Q.MergeBusinessProfileORM
	MergeLinkedAccountTokenORM = &Q.MergeLinkedAccountTokenORM
	PaymentORM = &Q.PaymentORM
	PurchaseOrderLineItemORM = &Q.PurchaseOrderLineItemORM
	PurchaseOrderORM = &Q.PurchaseOrderORM
	ReportItemORM = &Q.ReportItemORM
	TaxRateORM = &Q.TaxRateORM
	TrackingCategoryORM = &Q.TrackingCategoryORM
	TransactionLineItemORM = &Q.TransactionLineItemORM
	VendorCreditLineORM = &Q.VendorCreditLineORM
	VendorCreditORM = &Q.VendorCreditORM
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                                db,
		AccountingAttachmentORM:           newAccountingAttachmentORM(db, opts...),
		AccountingIntegrationMergeLinkORM: newAccountingIntegrationMergeLinkORM(db, opts...),
		BalanceSheetORM:                   newBalanceSheetORM(db, opts...),
		BusinessActionableInsightORM:      newBusinessActionableInsightORM(db, opts...),
		BusinessChartOfAccountORM:         newBusinessChartOfAccountORM(db, opts...),
		BusinessTransactionORM:            newBusinessTransactionORM(db, opts...),
		CashFlowStatementORM:              newCashFlowStatementORM(db, opts...),
		CompanyAddressORM:                 newCompanyAddressORM(db, opts...),
		CompanyInfoORM:                    newCompanyInfoORM(db, opts...),
		ContactsORM:                       newContactsORM(db, opts...),
		CreditNoteLineItemORM:             newCreditNoteLineItemORM(db, opts...),
		CreditNoteORM:                     newCreditNoteORM(db, opts...),
		ExpenseLineORM:                    newExpenseLineORM(db, opts...),
		ExpenseORM:                        newExpenseORM(db, opts...),
		IncomeStatementORM:                newIncomeStatementORM(db, opts...),
		InvoiceLineItemORM:                newInvoiceLineItemORM(db, opts...),
		InvoiceORM:                        newInvoiceORM(db, opts...),
		ItemORM:                           newItemORM(db, opts...),
		JournalEntryORM:                   newJournalEntryORM(db, opts...),
		JournalLineORM:                    newJournalLineORM(db, opts...),
		LinkedAccountingAccountORM:        newLinkedAccountingAccountORM(db, opts...),
		MergeBusinessProfileORM:           newMergeBusinessProfileORM(db, opts...),
		MergeLinkedAccountTokenORM:        newMergeLinkedAccountTokenORM(db, opts...),
		PaymentORM:                        newPaymentORM(db, opts...),
		PurchaseOrderLineItemORM:          newPurchaseOrderLineItemORM(db, opts...),
		PurchaseOrderORM:                  newPurchaseOrderORM(db, opts...),
		ReportItemORM:                     newReportItemORM(db, opts...),
		TaxRateORM:                        newTaxRateORM(db, opts...),
		TrackingCategoryORM:               newTrackingCategoryORM(db, opts...),
		TransactionLineItemORM:            newTransactionLineItemORM(db, opts...),
		VendorCreditLineORM:               newVendorCreditLineORM(db, opts...),
		VendorCreditORM:                   newVendorCreditORM(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AccountingAttachmentORM           accountingAttachmentORM
	AccountingIntegrationMergeLinkORM accountingIntegrationMergeLinkORM
	BalanceSheetORM                   balanceSheetORM
	BusinessActionableInsightORM      businessActionableInsightORM
	BusinessChartOfAccountORM         businessChartOfAccountORM
	BusinessTransactionORM            businessTransactionORM
	CashFlowStatementORM              cashFlowStatementORM
	CompanyAddressORM                 companyAddressORM
	CompanyInfoORM                    companyInfoORM
	ContactsORM                       contactsORM
	CreditNoteLineItemORM             creditNoteLineItemORM
	CreditNoteORM                     creditNoteORM
	ExpenseLineORM                    expenseLineORM
	ExpenseORM                        expenseORM
	IncomeStatementORM                incomeStatementORM
	InvoiceLineItemORM                invoiceLineItemORM
	InvoiceORM                        invoiceORM
	ItemORM                           itemORM
	JournalEntryORM                   journalEntryORM
	JournalLineORM                    journalLineORM
	LinkedAccountingAccountORM        linkedAccountingAccountORM
	MergeBusinessProfileORM           mergeBusinessProfileORM
	MergeLinkedAccountTokenORM        mergeLinkedAccountTokenORM
	PaymentORM                        paymentORM
	PurchaseOrderLineItemORM          purchaseOrderLineItemORM
	PurchaseOrderORM                  purchaseOrderORM
	ReportItemORM                     reportItemORM
	TaxRateORM                        taxRateORM
	TrackingCategoryORM               trackingCategoryORM
	TransactionLineItemORM            transactionLineItemORM
	VendorCreditLineORM               vendorCreditLineORM
	VendorCreditORM                   vendorCreditORM
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                                db,
		AccountingAttachmentORM:           q.AccountingAttachmentORM.clone(db),
		AccountingIntegrationMergeLinkORM: q.AccountingIntegrationMergeLinkORM.clone(db),
		BalanceSheetORM:                   q.BalanceSheetORM.clone(db),
		BusinessActionableInsightORM:      q.BusinessActionableInsightORM.clone(db),
		BusinessChartOfAccountORM:         q.BusinessChartOfAccountORM.clone(db),
		BusinessTransactionORM:            q.BusinessTransactionORM.clone(db),
		CashFlowStatementORM:              q.CashFlowStatementORM.clone(db),
		CompanyAddressORM:                 q.CompanyAddressORM.clone(db),
		CompanyInfoORM:                    q.CompanyInfoORM.clone(db),
		ContactsORM:                       q.ContactsORM.clone(db),
		CreditNoteLineItemORM:             q.CreditNoteLineItemORM.clone(db),
		CreditNoteORM:                     q.CreditNoteORM.clone(db),
		ExpenseLineORM:                    q.ExpenseLineORM.clone(db),
		ExpenseORM:                        q.ExpenseORM.clone(db),
		IncomeStatementORM:                q.IncomeStatementORM.clone(db),
		InvoiceLineItemORM:                q.InvoiceLineItemORM.clone(db),
		InvoiceORM:                        q.InvoiceORM.clone(db),
		ItemORM:                           q.ItemORM.clone(db),
		JournalEntryORM:                   q.JournalEntryORM.clone(db),
		JournalLineORM:                    q.JournalLineORM.clone(db),
		LinkedAccountingAccountORM:        q.LinkedAccountingAccountORM.clone(db),
		MergeBusinessProfileORM:           q.MergeBusinessProfileORM.clone(db),
		MergeLinkedAccountTokenORM:        q.MergeLinkedAccountTokenORM.clone(db),
		PaymentORM:                        q.PaymentORM.clone(db),
		PurchaseOrderLineItemORM:          q.PurchaseOrderLineItemORM.clone(db),
		PurchaseOrderORM:                  q.PurchaseOrderORM.clone(db),
		ReportItemORM:                     q.ReportItemORM.clone(db),
		TaxRateORM:                        q.TaxRateORM.clone(db),
		TrackingCategoryORM:               q.TrackingCategoryORM.clone(db),
		TransactionLineItemORM:            q.TransactionLineItemORM.clone(db),
		VendorCreditLineORM:               q.VendorCreditLineORM.clone(db),
		VendorCreditORM:                   q.VendorCreditORM.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                                db,
		AccountingAttachmentORM:           q.AccountingAttachmentORM.replaceDB(db),
		AccountingIntegrationMergeLinkORM: q.AccountingIntegrationMergeLinkORM.replaceDB(db),
		BalanceSheetORM:                   q.BalanceSheetORM.replaceDB(db),
		BusinessActionableInsightORM:      q.BusinessActionableInsightORM.replaceDB(db),
		BusinessChartOfAccountORM:         q.BusinessChartOfAccountORM.replaceDB(db),
		BusinessTransactionORM:            q.BusinessTransactionORM.replaceDB(db),
		CashFlowStatementORM:              q.CashFlowStatementORM.replaceDB(db),
		CompanyAddressORM:                 q.CompanyAddressORM.replaceDB(db),
		CompanyInfoORM:                    q.CompanyInfoORM.replaceDB(db),
		ContactsORM:                       q.ContactsORM.replaceDB(db),
		CreditNoteLineItemORM:             q.CreditNoteLineItemORM.replaceDB(db),
		CreditNoteORM:                     q.CreditNoteORM.replaceDB(db),
		ExpenseLineORM:                    q.ExpenseLineORM.replaceDB(db),
		ExpenseORM:                        q.ExpenseORM.replaceDB(db),
		IncomeStatementORM:                q.IncomeStatementORM.replaceDB(db),
		InvoiceLineItemORM:                q.InvoiceLineItemORM.replaceDB(db),
		InvoiceORM:                        q.InvoiceORM.replaceDB(db),
		ItemORM:                           q.ItemORM.replaceDB(db),
		JournalEntryORM:                   q.JournalEntryORM.replaceDB(db),
		JournalLineORM:                    q.JournalLineORM.replaceDB(db),
		LinkedAccountingAccountORM:        q.LinkedAccountingAccountORM.replaceDB(db),
		MergeBusinessProfileORM:           q.MergeBusinessProfileORM.replaceDB(db),
		MergeLinkedAccountTokenORM:        q.MergeLinkedAccountTokenORM.replaceDB(db),
		PaymentORM:                        q.PaymentORM.replaceDB(db),
		PurchaseOrderLineItemORM:          q.PurchaseOrderLineItemORM.replaceDB(db),
		PurchaseOrderORM:                  q.PurchaseOrderORM.replaceDB(db),
		ReportItemORM:                     q.ReportItemORM.replaceDB(db),
		TaxRateORM:                        q.TaxRateORM.replaceDB(db),
		TrackingCategoryORM:               q.TrackingCategoryORM.replaceDB(db),
		TransactionLineItemORM:            q.TransactionLineItemORM.replaceDB(db),
		VendorCreditLineORM:               q.VendorCreditLineORM.replaceDB(db),
		VendorCreditORM:                   q.VendorCreditORM.replaceDB(db),
	}
}

type queryCtx struct {
	AccountingAttachmentORM           IAccountingAttachmentORMDo
	AccountingIntegrationMergeLinkORM IAccountingIntegrationMergeLinkORMDo
	BalanceSheetORM                   IBalanceSheetORMDo
	BusinessActionableInsightORM      IBusinessActionableInsightORMDo
	BusinessChartOfAccountORM         IBusinessChartOfAccountORMDo
	BusinessTransactionORM            IBusinessTransactionORMDo
	CashFlowStatementORM              ICashFlowStatementORMDo
	CompanyAddressORM                 ICompanyAddressORMDo
	CompanyInfoORM                    ICompanyInfoORMDo
	ContactsORM                       IContactsORMDo
	CreditNoteLineItemORM             ICreditNoteLineItemORMDo
	CreditNoteORM                     ICreditNoteORMDo
	ExpenseLineORM                    IExpenseLineORMDo
	ExpenseORM                        IExpenseORMDo
	IncomeStatementORM                IIncomeStatementORMDo
	InvoiceLineItemORM                IInvoiceLineItemORMDo
	InvoiceORM                        IInvoiceORMDo
	ItemORM                           IItemORMDo
	JournalEntryORM                   IJournalEntryORMDo
	JournalLineORM                    IJournalLineORMDo
	LinkedAccountingAccountORM        ILinkedAccountingAccountORMDo
	MergeBusinessProfileORM           IMergeBusinessProfileORMDo
	MergeLinkedAccountTokenORM        IMergeLinkedAccountTokenORMDo
	PaymentORM                        IPaymentORMDo
	PurchaseOrderLineItemORM          IPurchaseOrderLineItemORMDo
	PurchaseOrderORM                  IPurchaseOrderORMDo
	ReportItemORM                     IReportItemORMDo
	TaxRateORM                        ITaxRateORMDo
	TrackingCategoryORM               ITrackingCategoryORMDo
	TransactionLineItemORM            ITransactionLineItemORMDo
	VendorCreditLineORM               IVendorCreditLineORMDo
	VendorCreditORM                   IVendorCreditORMDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AccountingAttachmentORM:           q.AccountingAttachmentORM.WithContext(ctx),
		AccountingIntegrationMergeLinkORM: q.AccountingIntegrationMergeLinkORM.WithContext(ctx),
		BalanceSheetORM:                   q.BalanceSheetORM.WithContext(ctx),
		BusinessActionableInsightORM:      q.BusinessActionableInsightORM.WithContext(ctx),
		BusinessChartOfAccountORM:         q.BusinessChartOfAccountORM.WithContext(ctx),
		BusinessTransactionORM:            q.BusinessTransactionORM.WithContext(ctx),
		CashFlowStatementORM:              q.CashFlowStatementORM.WithContext(ctx),
		CompanyAddressORM:                 q.CompanyAddressORM.WithContext(ctx),
		CompanyInfoORM:                    q.CompanyInfoORM.WithContext(ctx),
		ContactsORM:                       q.ContactsORM.WithContext(ctx),
		CreditNoteLineItemORM:             q.CreditNoteLineItemORM.WithContext(ctx),
		CreditNoteORM:                     q.CreditNoteORM.WithContext(ctx),
		ExpenseLineORM:                    q.ExpenseLineORM.WithContext(ctx),
		ExpenseORM:                        q.ExpenseORM.WithContext(ctx),
		IncomeStatementORM:                q.IncomeStatementORM.WithContext(ctx),
		InvoiceLineItemORM:                q.InvoiceLineItemORM.WithContext(ctx),
		InvoiceORM:                        q.InvoiceORM.WithContext(ctx),
		ItemORM:                           q.ItemORM.WithContext(ctx),
		JournalEntryORM:                   q.JournalEntryORM.WithContext(ctx),
		JournalLineORM:                    q.JournalLineORM.WithContext(ctx),
		LinkedAccountingAccountORM:        q.LinkedAccountingAccountORM.WithContext(ctx),
		MergeBusinessProfileORM:           q.MergeBusinessProfileORM.WithContext(ctx),
		MergeLinkedAccountTokenORM:        q.MergeLinkedAccountTokenORM.WithContext(ctx),
		PaymentORM:                        q.PaymentORM.WithContext(ctx),
		PurchaseOrderLineItemORM:          q.PurchaseOrderLineItemORM.WithContext(ctx),
		PurchaseOrderORM:                  q.PurchaseOrderORM.WithContext(ctx),
		ReportItemORM:                     q.ReportItemORM.WithContext(ctx),
		TaxRateORM:                        q.TaxRateORM.WithContext(ctx),
		TrackingCategoryORM:               q.TrackingCategoryORM.WithContext(ctx),
		TransactionLineItemORM:            q.TransactionLineItemORM.WithContext(ctx),
		VendorCreditLineORM:               q.VendorCreditLineORM.WithContext(ctx),
		VendorCreditORM:                   q.VendorCreditORM.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
