// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newEarningORM(db *gorm.DB, opts ...gen.DOOption) earningORM {
	_earningORM := earningORM{}

	_earningORM.earningORMDo.UseDB(db, opts...)
	_earningORM.earningORMDo.UseModel(&accounting_servicev1.EarningORM{})

	tableName := _earningORM.earningORMDo.TableName()
	_earningORM.ALL = field.NewAsterisk(tableName)
	_earningORM.Amount = field.NewFloat64(tableName, "amount")
	_earningORM.CreatedAt = field.NewTime(tableName, "created_at")
	_earningORM.EmployeePayrollRunId = field.NewUint64(tableName, "employee_payroll_run_id")
	_earningORM.Id = field.NewUint64(tableName, "id")
	_earningORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_earningORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_earningORM.PayrollRunMergeAccountId = field.NewString(tableName, "payroll_run_merge_account_id")
	_earningORM.RemoteId = field.NewString(tableName, "remote_id")
	_earningORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_earningORM.Type = field.NewString(tableName, "type")

	_earningORM.fillFieldMap()

	return _earningORM
}

type earningORM struct {
	earningORMDo

	ALL                      field.Asterisk
	Amount                   field.Float64
	CreatedAt                field.Time
	EmployeePayrollRunId     field.Uint64
	Id                       field.Uint64
	MergeAccountId           field.String
	ModifiedAt               field.Time
	PayrollRunMergeAccountId field.String
	RemoteId                 field.String
	RemoteWasDeleted         field.Bool
	Type                     field.String

	fieldMap map[string]field.Expr
}

func (e earningORM) Table(newTableName string) *earningORM {
	e.earningORMDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e earningORM) As(alias string) *earningORM {
	e.earningORMDo.DO = *(e.earningORMDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *earningORM) updateTableName(table string) *earningORM {
	e.ALL = field.NewAsterisk(table)
	e.Amount = field.NewFloat64(table, "amount")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.EmployeePayrollRunId = field.NewUint64(table, "employee_payroll_run_id")
	e.Id = field.NewUint64(table, "id")
	e.MergeAccountId = field.NewString(table, "merge_account_id")
	e.ModifiedAt = field.NewTime(table, "modified_at")
	e.PayrollRunMergeAccountId = field.NewString(table, "payroll_run_merge_account_id")
	e.RemoteId = field.NewString(table, "remote_id")
	e.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	e.Type = field.NewString(table, "type")

	e.fillFieldMap()

	return e
}

func (e *earningORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *earningORM) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["amount"] = e.Amount
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["employee_payroll_run_id"] = e.EmployeePayrollRunId
	e.fieldMap["id"] = e.Id
	e.fieldMap["merge_account_id"] = e.MergeAccountId
	e.fieldMap["modified_at"] = e.ModifiedAt
	e.fieldMap["payroll_run_merge_account_id"] = e.PayrollRunMergeAccountId
	e.fieldMap["remote_id"] = e.RemoteId
	e.fieldMap["remote_was_deleted"] = e.RemoteWasDeleted
	e.fieldMap["type"] = e.Type
}

func (e earningORM) clone(db *gorm.DB) earningORM {
	e.earningORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e earningORM) replaceDB(db *gorm.DB) earningORM {
	e.earningORMDo.ReplaceDB(db)
	return e
}

type earningORMDo struct{ gen.DO }

type IEarningORMDo interface {
	gen.SubQuery
	Debug() IEarningORMDo
	WithContext(ctx context.Context) IEarningORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEarningORMDo
	WriteDB() IEarningORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEarningORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEarningORMDo
	Not(conds ...gen.Condition) IEarningORMDo
	Or(conds ...gen.Condition) IEarningORMDo
	Select(conds ...field.Expr) IEarningORMDo
	Where(conds ...gen.Condition) IEarningORMDo
	Order(conds ...field.Expr) IEarningORMDo
	Distinct(cols ...field.Expr) IEarningORMDo
	Omit(cols ...field.Expr) IEarningORMDo
	Join(table schema.Tabler, on ...field.Expr) IEarningORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEarningORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEarningORMDo
	Group(cols ...field.Expr) IEarningORMDo
	Having(conds ...gen.Condition) IEarningORMDo
	Limit(limit int) IEarningORMDo
	Offset(offset int) IEarningORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEarningORMDo
	Unscoped() IEarningORMDo
	Create(values ...*accounting_servicev1.EarningORM) error
	CreateInBatches(values []*accounting_servicev1.EarningORM, batchSize int) error
	Save(values ...*accounting_servicev1.EarningORM) error
	First() (*accounting_servicev1.EarningORM, error)
	Take() (*accounting_servicev1.EarningORM, error)
	Last() (*accounting_servicev1.EarningORM, error)
	Find() ([]*accounting_servicev1.EarningORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.EarningORM, err error)
	FindInBatches(result *[]*accounting_servicev1.EarningORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.EarningORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEarningORMDo
	Assign(attrs ...field.AssignExpr) IEarningORMDo
	Joins(fields ...field.RelationField) IEarningORMDo
	Preload(fields ...field.RelationField) IEarningORMDo
	FirstOrInit() (*accounting_servicev1.EarningORM, error)
	FirstOrCreate() (*accounting_servicev1.EarningORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.EarningORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEarningORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.EarningORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.EarningORM, err error)
	CreateRecord(item accounting_servicev1.EarningORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.EarningORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.EarningORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.EarningORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.EarningORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e earningORMDo) GetRecordByID(id int) (result accounting_servicev1.EarningORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM earnings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e earningORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.EarningORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM earnings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (e earningORMDo) CreateRecord(item accounting_servicev1.EarningORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO earnings (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (e earningORMDo) UpdateRecordByID(id int, item accounting_servicev1.EarningORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE earnings SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e earningORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM earnings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (e earningORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.EarningORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM earnings ORDER BY " + e.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (e earningORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM earnings ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e earningORMDo) GetByID(id uint64) (result accounting_servicev1.EarningORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM earnings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e earningORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.EarningORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM earnings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e earningORMDo) Debug() IEarningORMDo {
	return e.withDO(e.DO.Debug())
}

func (e earningORMDo) WithContext(ctx context.Context) IEarningORMDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e earningORMDo) ReadDB() IEarningORMDo {
	return e.Clauses(dbresolver.Read)
}

func (e earningORMDo) WriteDB() IEarningORMDo {
	return e.Clauses(dbresolver.Write)
}

func (e earningORMDo) Session(config *gorm.Session) IEarningORMDo {
	return e.withDO(e.DO.Session(config))
}

func (e earningORMDo) Clauses(conds ...clause.Expression) IEarningORMDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e earningORMDo) Returning(value interface{}, columns ...string) IEarningORMDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e earningORMDo) Not(conds ...gen.Condition) IEarningORMDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e earningORMDo) Or(conds ...gen.Condition) IEarningORMDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e earningORMDo) Select(conds ...field.Expr) IEarningORMDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e earningORMDo) Where(conds ...gen.Condition) IEarningORMDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e earningORMDo) Order(conds ...field.Expr) IEarningORMDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e earningORMDo) Distinct(cols ...field.Expr) IEarningORMDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e earningORMDo) Omit(cols ...field.Expr) IEarningORMDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e earningORMDo) Join(table schema.Tabler, on ...field.Expr) IEarningORMDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e earningORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEarningORMDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e earningORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IEarningORMDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e earningORMDo) Group(cols ...field.Expr) IEarningORMDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e earningORMDo) Having(conds ...gen.Condition) IEarningORMDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e earningORMDo) Limit(limit int) IEarningORMDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e earningORMDo) Offset(offset int) IEarningORMDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e earningORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEarningORMDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e earningORMDo) Unscoped() IEarningORMDo {
	return e.withDO(e.DO.Unscoped())
}

func (e earningORMDo) Create(values ...*accounting_servicev1.EarningORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e earningORMDo) CreateInBatches(values []*accounting_servicev1.EarningORM, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e earningORMDo) Save(values ...*accounting_servicev1.EarningORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e earningORMDo) First() (*accounting_servicev1.EarningORM, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EarningORM), nil
	}
}

func (e earningORMDo) Take() (*accounting_servicev1.EarningORM, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EarningORM), nil
	}
}

func (e earningORMDo) Last() (*accounting_servicev1.EarningORM, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EarningORM), nil
	}
}

func (e earningORMDo) Find() ([]*accounting_servicev1.EarningORM, error) {
	result, err := e.DO.Find()
	return result.([]*accounting_servicev1.EarningORM), err
}

func (e earningORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.EarningORM, err error) {
	buf := make([]*accounting_servicev1.EarningORM, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e earningORMDo) FindInBatches(result *[]*accounting_servicev1.EarningORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e earningORMDo) Attrs(attrs ...field.AssignExpr) IEarningORMDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e earningORMDo) Assign(attrs ...field.AssignExpr) IEarningORMDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e earningORMDo) Joins(fields ...field.RelationField) IEarningORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e earningORMDo) Preload(fields ...field.RelationField) IEarningORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e earningORMDo) FirstOrInit() (*accounting_servicev1.EarningORM, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EarningORM), nil
	}
}

func (e earningORMDo) FirstOrCreate() (*accounting_servicev1.EarningORM, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EarningORM), nil
	}
}

func (e earningORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.EarningORM, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e earningORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e earningORMDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e earningORMDo) Delete(models ...*accounting_servicev1.EarningORM) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *earningORMDo) withDO(do gen.Dao) *earningORMDo {
	e.DO = *do.(*gen.DO)
	return e
}
