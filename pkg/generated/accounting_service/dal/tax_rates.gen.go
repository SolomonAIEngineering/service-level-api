// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newTaxRateORM(db *gorm.DB, opts ...gen.DOOption) taxRateORM {
	_taxRateORM := taxRateORM{}

	_taxRateORM.taxRateORMDo.UseDB(db, opts...)
	_taxRateORM.taxRateORMDo.UseModel(&accounting_servicev1.TaxRateORM{})

	tableName := _taxRateORM.taxRateORMDo.TableName()
	_taxRateORM.ALL = field.NewAsterisk(tableName)
	_taxRateORM.Company = field.NewString(tableName, "company")
	_taxRateORM.CreatedAt = field.NewTime(tableName, "created_at")
	_taxRateORM.Description = field.NewString(tableName, "description")
	_taxRateORM.EffectiveTaxRate = field.NewFloat64(tableName, "effective_tax_rate")
	_taxRateORM.Id = field.NewUint64(tableName, "id")
	_taxRateORM.LinkedAccountingAccountId = field.NewUint64(tableName, "linked_accounting_account_id")
	_taxRateORM.MergeRecordId = field.NewString(tableName, "merge_record_id")
	_taxRateORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_taxRateORM.RemoteId = field.NewString(tableName, "remote_id")
	_taxRateORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_taxRateORM.TotalTaxRate = field.NewFloat64(tableName, "total_tax_rate")

	_taxRateORM.fillFieldMap()

	return _taxRateORM
}

type taxRateORM struct {
	taxRateORMDo

	ALL                       field.Asterisk
	Company                   field.String
	CreatedAt                 field.Time
	Description               field.String
	EffectiveTaxRate          field.Float64
	Id                        field.Uint64
	LinkedAccountingAccountId field.Uint64
	MergeRecordId             field.String
	ModifiedAt                field.Time
	RemoteId                  field.String
	RemoteWasDeleted          field.Bool
	TotalTaxRate              field.Float64

	fieldMap map[string]field.Expr
}

func (t taxRateORM) Table(newTableName string) *taxRateORM {
	t.taxRateORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taxRateORM) As(alias string) *taxRateORM {
	t.taxRateORMDo.DO = *(t.taxRateORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taxRateORM) updateTableName(table string) *taxRateORM {
	t.ALL = field.NewAsterisk(table)
	t.Company = field.NewString(table, "company")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.Description = field.NewString(table, "description")
	t.EffectiveTaxRate = field.NewFloat64(table, "effective_tax_rate")
	t.Id = field.NewUint64(table, "id")
	t.LinkedAccountingAccountId = field.NewUint64(table, "linked_accounting_account_id")
	t.MergeRecordId = field.NewString(table, "merge_record_id")
	t.ModifiedAt = field.NewTime(table, "modified_at")
	t.RemoteId = field.NewString(table, "remote_id")
	t.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	t.TotalTaxRate = field.NewFloat64(table, "total_tax_rate")

	t.fillFieldMap()

	return t
}

func (t *taxRateORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taxRateORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["company"] = t.Company
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["description"] = t.Description
	t.fieldMap["effective_tax_rate"] = t.EffectiveTaxRate
	t.fieldMap["id"] = t.Id
	t.fieldMap["linked_accounting_account_id"] = t.LinkedAccountingAccountId
	t.fieldMap["merge_record_id"] = t.MergeRecordId
	t.fieldMap["modified_at"] = t.ModifiedAt
	t.fieldMap["remote_id"] = t.RemoteId
	t.fieldMap["remote_was_deleted"] = t.RemoteWasDeleted
	t.fieldMap["total_tax_rate"] = t.TotalTaxRate
}

func (t taxRateORM) clone(db *gorm.DB) taxRateORM {
	t.taxRateORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taxRateORM) replaceDB(db *gorm.DB) taxRateORM {
	t.taxRateORMDo.ReplaceDB(db)
	return t
}

type taxRateORMDo struct{ gen.DO }

type ITaxRateORMDo interface {
	gen.SubQuery
	Debug() ITaxRateORMDo
	WithContext(ctx context.Context) ITaxRateORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaxRateORMDo
	WriteDB() ITaxRateORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaxRateORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaxRateORMDo
	Not(conds ...gen.Condition) ITaxRateORMDo
	Or(conds ...gen.Condition) ITaxRateORMDo
	Select(conds ...field.Expr) ITaxRateORMDo
	Where(conds ...gen.Condition) ITaxRateORMDo
	Order(conds ...field.Expr) ITaxRateORMDo
	Distinct(cols ...field.Expr) ITaxRateORMDo
	Omit(cols ...field.Expr) ITaxRateORMDo
	Join(table schema.Tabler, on ...field.Expr) ITaxRateORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaxRateORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaxRateORMDo
	Group(cols ...field.Expr) ITaxRateORMDo
	Having(conds ...gen.Condition) ITaxRateORMDo
	Limit(limit int) ITaxRateORMDo
	Offset(offset int) ITaxRateORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaxRateORMDo
	Unscoped() ITaxRateORMDo
	Create(values ...*accounting_servicev1.TaxRateORM) error
	CreateInBatches(values []*accounting_servicev1.TaxRateORM, batchSize int) error
	Save(values ...*accounting_servicev1.TaxRateORM) error
	First() (*accounting_servicev1.TaxRateORM, error)
	Take() (*accounting_servicev1.TaxRateORM, error)
	Last() (*accounting_servicev1.TaxRateORM, error)
	Find() ([]*accounting_servicev1.TaxRateORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.TaxRateORM, err error)
	FindInBatches(result *[]*accounting_servicev1.TaxRateORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.TaxRateORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaxRateORMDo
	Assign(attrs ...field.AssignExpr) ITaxRateORMDo
	Joins(fields ...field.RelationField) ITaxRateORMDo
	Preload(fields ...field.RelationField) ITaxRateORMDo
	FirstOrInit() (*accounting_servicev1.TaxRateORM, error)
	FirstOrCreate() (*accounting_servicev1.TaxRateORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.TaxRateORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaxRateORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.TaxRateORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.TaxRateORM, err error)
	CreateRecord(item accounting_servicev1.TaxRateORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.TaxRateORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.TaxRateORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.TaxRateORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.TaxRateORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxRateORMDo) GetRecordByID(id int) (result accounting_servicev1.TaxRateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tax_rates ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t taxRateORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.TaxRateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tax_rates ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (t taxRateORMDo) CreateRecord(item accounting_servicev1.TaxRateORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO tax_rates (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxRateORMDo) UpdateRecordByID(id int, item accounting_servicev1.TaxRateORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE tax_rates SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxRateORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM tax_rates ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (t taxRateORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.TaxRateORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tax_rates ORDER BY " + t.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t taxRateORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM tax_rates ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxRateORMDo) GetByID(id uint64) (result accounting_servicev1.TaxRateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tax_rates ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t taxRateORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.TaxRateORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tax_rates ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t taxRateORMDo) Debug() ITaxRateORMDo {
	return t.withDO(t.DO.Debug())
}

func (t taxRateORMDo) WithContext(ctx context.Context) ITaxRateORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taxRateORMDo) ReadDB() ITaxRateORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t taxRateORMDo) WriteDB() ITaxRateORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t taxRateORMDo) Session(config *gorm.Session) ITaxRateORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t taxRateORMDo) Clauses(conds ...clause.Expression) ITaxRateORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taxRateORMDo) Returning(value interface{}, columns ...string) ITaxRateORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taxRateORMDo) Not(conds ...gen.Condition) ITaxRateORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taxRateORMDo) Or(conds ...gen.Condition) ITaxRateORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taxRateORMDo) Select(conds ...field.Expr) ITaxRateORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taxRateORMDo) Where(conds ...gen.Condition) ITaxRateORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taxRateORMDo) Order(conds ...field.Expr) ITaxRateORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taxRateORMDo) Distinct(cols ...field.Expr) ITaxRateORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taxRateORMDo) Omit(cols ...field.Expr) ITaxRateORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taxRateORMDo) Join(table schema.Tabler, on ...field.Expr) ITaxRateORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taxRateORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaxRateORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taxRateORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaxRateORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taxRateORMDo) Group(cols ...field.Expr) ITaxRateORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taxRateORMDo) Having(conds ...gen.Condition) ITaxRateORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taxRateORMDo) Limit(limit int) ITaxRateORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taxRateORMDo) Offset(offset int) ITaxRateORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taxRateORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaxRateORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taxRateORMDo) Unscoped() ITaxRateORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taxRateORMDo) Create(values ...*accounting_servicev1.TaxRateORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taxRateORMDo) CreateInBatches(values []*accounting_servicev1.TaxRateORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taxRateORMDo) Save(values ...*accounting_servicev1.TaxRateORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taxRateORMDo) First() (*accounting_servicev1.TaxRateORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TaxRateORM), nil
	}
}

func (t taxRateORMDo) Take() (*accounting_servicev1.TaxRateORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TaxRateORM), nil
	}
}

func (t taxRateORMDo) Last() (*accounting_servicev1.TaxRateORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TaxRateORM), nil
	}
}

func (t taxRateORMDo) Find() ([]*accounting_servicev1.TaxRateORM, error) {
	result, err := t.DO.Find()
	return result.([]*accounting_servicev1.TaxRateORM), err
}

func (t taxRateORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.TaxRateORM, err error) {
	buf := make([]*accounting_servicev1.TaxRateORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taxRateORMDo) FindInBatches(result *[]*accounting_servicev1.TaxRateORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taxRateORMDo) Attrs(attrs ...field.AssignExpr) ITaxRateORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taxRateORMDo) Assign(attrs ...field.AssignExpr) ITaxRateORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taxRateORMDo) Joins(fields ...field.RelationField) ITaxRateORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taxRateORMDo) Preload(fields ...field.RelationField) ITaxRateORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taxRateORMDo) FirstOrInit() (*accounting_servicev1.TaxRateORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TaxRateORM), nil
	}
}

func (t taxRateORMDo) FirstOrCreate() (*accounting_servicev1.TaxRateORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.TaxRateORM), nil
	}
}

func (t taxRateORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.TaxRateORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taxRateORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taxRateORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taxRateORMDo) Delete(models ...*accounting_servicev1.TaxRateORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taxRateORMDo) withDO(do gen.Dao) *taxRateORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
