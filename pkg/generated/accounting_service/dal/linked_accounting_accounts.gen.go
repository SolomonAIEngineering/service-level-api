// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newLinkedAccountingAccountORM(db *gorm.DB, opts ...gen.DOOption) linkedAccountingAccountORM {
	_linkedAccountingAccountORM := linkedAccountingAccountORM{}

	_linkedAccountingAccountORM.linkedAccountingAccountORMDo.UseDB(db, opts...)
	_linkedAccountingAccountORM.linkedAccountingAccountORMDo.UseModel(&accounting_servicev1.LinkedAccountingAccountORM{})

	tableName := _linkedAccountingAccountORM.linkedAccountingAccountORMDo.TableName()
	_linkedAccountingAccountORM.ALL = field.NewAsterisk(tableName)
	_linkedAccountingAccountORM.AccountingIntegrationMergeLinkId = field.NewUint64(tableName, "accounting_integration_merge_link_id")
	_linkedAccountingAccountORM.Id = field.NewUint64(tableName, "id")
	_linkedAccountingAccountORM.Attachments = linkedAccountingAccountORMHasManyAttachments{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Attachments", "accounting_servicev1.AccountingAttachmentORM"),
	}

	_linkedAccountingAccountORM.BalanceSheets = linkedAccountingAccountORMHasManyBalanceSheets{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BalanceSheets", "accounting_servicev1.BalanceSheetORM"),
		Assets: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("BalanceSheets.Assets", "accounting_servicev1.ReportItemORM"),
		},
		Equity: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("BalanceSheets.Equity", "accounting_servicev1.ReportItemORM"),
		},
		Liabilities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("BalanceSheets.Liabilities", "accounting_servicev1.ReportItemORM"),
		},
	}

	_linkedAccountingAccountORM.CashFlowStatements = linkedAccountingAccountORMHasManyCashFlowStatements{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CashFlowStatements", "accounting_servicev1.CashFlowStatementORM"),
		FinancingActivities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CashFlowStatements.FinancingActivities", "accounting_servicev1.ReportItemORM"),
		},
		InvestingActivities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CashFlowStatements.InvestingActivities", "accounting_servicev1.ReportItemORM"),
		},
		OperatingActivities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CashFlowStatements.OperatingActivities", "accounting_servicev1.ReportItemORM"),
		},
	}

	_linkedAccountingAccountORM.ChartOfAccounts = linkedAccountingAccountORMHasManyChartOfAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ChartOfAccounts", "accounting_servicev1.BusinessChartOfAccountORM"),
	}

	_linkedAccountingAccountORM.CompanyInfo = linkedAccountingAccountORMHasManyCompanyInfo{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CompanyInfo", "accounting_servicev1.CompanyInfoORM"),
		Addresses: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CompanyInfo.Addresses", "accounting_servicev1.CompanyAddressORM"),
		},
	}

	_linkedAccountingAccountORM.Contacts = linkedAccountingAccountORMHasManyContacts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Contacts", "accounting_servicev1.ContactsORM"),
	}

	_linkedAccountingAccountORM.CreditNotes = linkedAccountingAccountORMHasManyCreditNotes{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CreditNotes", "accounting_servicev1.CreditNoteORM"),
		LineItems: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CreditNotes.LineItems", "accounting_servicev1.CreditNoteLineItemORM"),
		},
	}

	_linkedAccountingAccountORM.Expenses = linkedAccountingAccountORMHasManyExpenses{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Expenses", "accounting_servicev1.ExpenseORM"),
		Lines: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Expenses.Lines", "accounting_servicev1.ExpenseLineORM"),
		},
	}

	_linkedAccountingAccountORM.IncomeStatements = linkedAccountingAccountORMHasManyIncomeStatements{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("IncomeStatements", "accounting_servicev1.IncomeStatementORM"),
		CostOfSales: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("IncomeStatements.CostOfSales", "accounting_servicev1.ReportItemORM"),
		},
		Income: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("IncomeStatements.Income", "accounting_servicev1.ReportItemORM"),
		},
		NonOperatingExpenses: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("IncomeStatements.NonOperatingExpenses", "accounting_servicev1.ReportItemORM"),
		},
		OperatingExpenses: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("IncomeStatements.OperatingExpenses", "accounting_servicev1.ReportItemORM"),
		},
	}

	_linkedAccountingAccountORM.Invoices = linkedAccountingAccountORMHasManyInvoices{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Invoices", "accounting_servicev1.InvoiceORM"),
		LineItems: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Invoices.LineItems", "accounting_servicev1.InvoiceLineItemORM"),
		},
	}

	_linkedAccountingAccountORM.Items = linkedAccountingAccountORMHasManyItems{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Items", "accounting_servicev1.ItemORM"),
	}

	_linkedAccountingAccountORM.JournalEntries = linkedAccountingAccountORMHasManyJournalEntries{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("JournalEntries", "accounting_servicev1.JournalEntryORM"),
		Lines: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("JournalEntries.Lines", "accounting_servicev1.JournalLineORM"),
		},
	}

	_linkedAccountingAccountORM.Payments = linkedAccountingAccountORMHasManyPayments{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Payments", "accounting_servicev1.PaymentORM"),
	}

	_linkedAccountingAccountORM.PurchaseOrders = linkedAccountingAccountORMHasManyPurchaseOrders{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PurchaseOrders", "accounting_servicev1.PurchaseOrderORM"),
		DeliveryAddress: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("PurchaseOrders.DeliveryAddress", "accounting_servicev1.CompanyAddressORM"),
		},
		LineItems: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("PurchaseOrders.LineItems", "accounting_servicev1.PurchaseOrderLineItemORM"),
		},
	}

	_linkedAccountingAccountORM.TaxRates = linkedAccountingAccountORMHasManyTaxRates{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("TaxRates", "accounting_servicev1.TaxRateORM"),
	}

	_linkedAccountingAccountORM.Transactions = linkedAccountingAccountORMHasManyTransactions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Transactions", "accounting_servicev1.BusinessTransactionORM"),
		LineItems: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Transactions.LineItems", "accounting_servicev1.TransactionLineItemORM"),
		},
	}

	_linkedAccountingAccountORM.VendorCredits = linkedAccountingAccountORMHasManyVendorCredits{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("VendorCredits", "accounting_servicev1.VendorCreditORM"),
		Lines: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("VendorCredits.Lines", "accounting_servicev1.VendorCreditLineORM"),
		},
	}

	_linkedAccountingAccountORM.fillFieldMap()

	return _linkedAccountingAccountORM
}

type linkedAccountingAccountORM struct {
	linkedAccountingAccountORMDo

	ALL                              field.Asterisk
	AccountingIntegrationMergeLinkId field.Uint64
	Id                               field.Uint64
	Attachments                      linkedAccountingAccountORMHasManyAttachments

	BalanceSheets linkedAccountingAccountORMHasManyBalanceSheets

	CashFlowStatements linkedAccountingAccountORMHasManyCashFlowStatements

	ChartOfAccounts linkedAccountingAccountORMHasManyChartOfAccounts

	CompanyInfo linkedAccountingAccountORMHasManyCompanyInfo

	Contacts linkedAccountingAccountORMHasManyContacts

	CreditNotes linkedAccountingAccountORMHasManyCreditNotes

	Expenses linkedAccountingAccountORMHasManyExpenses

	IncomeStatements linkedAccountingAccountORMHasManyIncomeStatements

	Invoices linkedAccountingAccountORMHasManyInvoices

	Items linkedAccountingAccountORMHasManyItems

	JournalEntries linkedAccountingAccountORMHasManyJournalEntries

	Payments linkedAccountingAccountORMHasManyPayments

	PurchaseOrders linkedAccountingAccountORMHasManyPurchaseOrders

	TaxRates linkedAccountingAccountORMHasManyTaxRates

	Transactions linkedAccountingAccountORMHasManyTransactions

	VendorCredits linkedAccountingAccountORMHasManyVendorCredits

	fieldMap map[string]field.Expr
}

func (l linkedAccountingAccountORM) Table(newTableName string) *linkedAccountingAccountORM {
	l.linkedAccountingAccountORMDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l linkedAccountingAccountORM) As(alias string) *linkedAccountingAccountORM {
	l.linkedAccountingAccountORMDo.DO = *(l.linkedAccountingAccountORMDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *linkedAccountingAccountORM) updateTableName(table string) *linkedAccountingAccountORM {
	l.ALL = field.NewAsterisk(table)
	l.AccountingIntegrationMergeLinkId = field.NewUint64(table, "accounting_integration_merge_link_id")
	l.Id = field.NewUint64(table, "id")

	l.fillFieldMap()

	return l
}

func (l *linkedAccountingAccountORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *linkedAccountingAccountORM) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 19)
	l.fieldMap["accounting_integration_merge_link_id"] = l.AccountingIntegrationMergeLinkId
	l.fieldMap["id"] = l.Id

}

func (l linkedAccountingAccountORM) clone(db *gorm.DB) linkedAccountingAccountORM {
	l.linkedAccountingAccountORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l linkedAccountingAccountORM) replaceDB(db *gorm.DB) linkedAccountingAccountORM {
	l.linkedAccountingAccountORMDo.ReplaceDB(db)
	return l
}

type linkedAccountingAccountORMHasManyAttachments struct {
	db *gorm.DB

	field.RelationField
}

func (a linkedAccountingAccountORMHasManyAttachments) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyAttachments {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyAttachments) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyAttachments {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyAttachments) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyAttachments {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyAttachments) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyAttachmentsTx {
	return &linkedAccountingAccountORMHasManyAttachmentsTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyAttachmentsTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyAttachmentsTx) Find() (result []*accounting_servicev1.AccountingAttachmentORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyAttachmentsTx) Append(values ...*accounting_servicev1.AccountingAttachmentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyAttachmentsTx) Replace(values ...*accounting_servicev1.AccountingAttachmentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyAttachmentsTx) Delete(values ...*accounting_servicev1.AccountingAttachmentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyAttachmentsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyAttachmentsTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyBalanceSheets struct {
	db *gorm.DB

	field.RelationField

	Assets struct {
		field.RelationField
	}
	Equity struct {
		field.RelationField
	}
	Liabilities struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyBalanceSheets) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyBalanceSheets {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyBalanceSheets) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyBalanceSheets {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyBalanceSheets) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyBalanceSheets {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyBalanceSheets) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyBalanceSheetsTx {
	return &linkedAccountingAccountORMHasManyBalanceSheetsTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyBalanceSheetsTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyBalanceSheetsTx) Find() (result []*accounting_servicev1.BalanceSheetORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyBalanceSheetsTx) Append(values ...*accounting_servicev1.BalanceSheetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyBalanceSheetsTx) Replace(values ...*accounting_servicev1.BalanceSheetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyBalanceSheetsTx) Delete(values ...*accounting_servicev1.BalanceSheetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyBalanceSheetsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyBalanceSheetsTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyCashFlowStatements struct {
	db *gorm.DB

	field.RelationField

	FinancingActivities struct {
		field.RelationField
	}
	InvestingActivities struct {
		field.RelationField
	}
	OperatingActivities struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyCashFlowStatements) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyCashFlowStatements {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyCashFlowStatements) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyCashFlowStatements {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyCashFlowStatements) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyCashFlowStatements {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyCashFlowStatements) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyCashFlowStatementsTx {
	return &linkedAccountingAccountORMHasManyCashFlowStatementsTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyCashFlowStatementsTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyCashFlowStatementsTx) Find() (result []*accounting_servicev1.CashFlowStatementORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyCashFlowStatementsTx) Append(values ...*accounting_servicev1.CashFlowStatementORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyCashFlowStatementsTx) Replace(values ...*accounting_servicev1.CashFlowStatementORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyCashFlowStatementsTx) Delete(values ...*accounting_servicev1.CashFlowStatementORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyCashFlowStatementsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyCashFlowStatementsTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyChartOfAccounts struct {
	db *gorm.DB

	field.RelationField
}

func (a linkedAccountingAccountORMHasManyChartOfAccounts) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyChartOfAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyChartOfAccounts) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyChartOfAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyChartOfAccounts) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyChartOfAccounts {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyChartOfAccounts) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyChartOfAccountsTx {
	return &linkedAccountingAccountORMHasManyChartOfAccountsTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyChartOfAccountsTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyChartOfAccountsTx) Find() (result []*accounting_servicev1.BusinessChartOfAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyChartOfAccountsTx) Append(values ...*accounting_servicev1.BusinessChartOfAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyChartOfAccountsTx) Replace(values ...*accounting_servicev1.BusinessChartOfAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyChartOfAccountsTx) Delete(values ...*accounting_servicev1.BusinessChartOfAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyChartOfAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyChartOfAccountsTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyCompanyInfo struct {
	db *gorm.DB

	field.RelationField

	Addresses struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyCompanyInfo) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyCompanyInfo {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyCompanyInfo) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyCompanyInfo {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyCompanyInfo) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyCompanyInfo {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyCompanyInfo) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyCompanyInfoTx {
	return &linkedAccountingAccountORMHasManyCompanyInfoTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyCompanyInfoTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyCompanyInfoTx) Find() (result []*accounting_servicev1.CompanyInfoORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyCompanyInfoTx) Append(values ...*accounting_servicev1.CompanyInfoORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyCompanyInfoTx) Replace(values ...*accounting_servicev1.CompanyInfoORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyCompanyInfoTx) Delete(values ...*accounting_servicev1.CompanyInfoORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyCompanyInfoTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyCompanyInfoTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyContacts struct {
	db *gorm.DB

	field.RelationField
}

func (a linkedAccountingAccountORMHasManyContacts) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyContacts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyContacts) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyContacts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyContacts) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyContacts {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyContacts) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyContactsTx {
	return &linkedAccountingAccountORMHasManyContactsTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyContactsTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyContactsTx) Find() (result []*accounting_servicev1.ContactsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyContactsTx) Append(values ...*accounting_servicev1.ContactsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyContactsTx) Replace(values ...*accounting_servicev1.ContactsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyContactsTx) Delete(values ...*accounting_servicev1.ContactsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyContactsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyContactsTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyCreditNotes struct {
	db *gorm.DB

	field.RelationField

	LineItems struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyCreditNotes) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyCreditNotes {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyCreditNotes) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyCreditNotes {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyCreditNotes) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyCreditNotes {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyCreditNotes) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyCreditNotesTx {
	return &linkedAccountingAccountORMHasManyCreditNotesTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyCreditNotesTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyCreditNotesTx) Find() (result []*accounting_servicev1.CreditNoteORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyCreditNotesTx) Append(values ...*accounting_servicev1.CreditNoteORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyCreditNotesTx) Replace(values ...*accounting_servicev1.CreditNoteORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyCreditNotesTx) Delete(values ...*accounting_servicev1.CreditNoteORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyCreditNotesTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyCreditNotesTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyExpenses struct {
	db *gorm.DB

	field.RelationField

	Lines struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyExpenses) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyExpenses {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyExpenses) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyExpenses {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyExpenses) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyExpenses {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyExpenses) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyExpensesTx {
	return &linkedAccountingAccountORMHasManyExpensesTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyExpensesTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyExpensesTx) Find() (result []*accounting_servicev1.ExpenseORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyExpensesTx) Append(values ...*accounting_servicev1.ExpenseORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyExpensesTx) Replace(values ...*accounting_servicev1.ExpenseORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyExpensesTx) Delete(values ...*accounting_servicev1.ExpenseORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyExpensesTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyExpensesTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyIncomeStatements struct {
	db *gorm.DB

	field.RelationField

	CostOfSales struct {
		field.RelationField
	}
	Income struct {
		field.RelationField
	}
	NonOperatingExpenses struct {
		field.RelationField
	}
	OperatingExpenses struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyIncomeStatements) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyIncomeStatements {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyIncomeStatements) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyIncomeStatements {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyIncomeStatements) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyIncomeStatements {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyIncomeStatements) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyIncomeStatementsTx {
	return &linkedAccountingAccountORMHasManyIncomeStatementsTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyIncomeStatementsTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyIncomeStatementsTx) Find() (result []*accounting_servicev1.IncomeStatementORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyIncomeStatementsTx) Append(values ...*accounting_servicev1.IncomeStatementORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyIncomeStatementsTx) Replace(values ...*accounting_servicev1.IncomeStatementORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyIncomeStatementsTx) Delete(values ...*accounting_servicev1.IncomeStatementORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyIncomeStatementsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyIncomeStatementsTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyInvoices struct {
	db *gorm.DB

	field.RelationField

	LineItems struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyInvoices) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyInvoices {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyInvoices) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyInvoices {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyInvoices) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyInvoices {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyInvoices) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyInvoicesTx {
	return &linkedAccountingAccountORMHasManyInvoicesTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyInvoicesTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyInvoicesTx) Find() (result []*accounting_servicev1.InvoiceORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyInvoicesTx) Append(values ...*accounting_servicev1.InvoiceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyInvoicesTx) Replace(values ...*accounting_servicev1.InvoiceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyInvoicesTx) Delete(values ...*accounting_servicev1.InvoiceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyInvoicesTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyInvoicesTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyItems struct {
	db *gorm.DB

	field.RelationField
}

func (a linkedAccountingAccountORMHasManyItems) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyItems {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyItems) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyItems {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyItems) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyItems {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyItems) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyItemsTx {
	return &linkedAccountingAccountORMHasManyItemsTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyItemsTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyItemsTx) Find() (result []*accounting_servicev1.ItemORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyItemsTx) Append(values ...*accounting_servicev1.ItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyItemsTx) Replace(values ...*accounting_servicev1.ItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyItemsTx) Delete(values ...*accounting_servicev1.ItemORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyItemsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyItemsTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyJournalEntries struct {
	db *gorm.DB

	field.RelationField

	Lines struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyJournalEntries) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyJournalEntries {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyJournalEntries) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyJournalEntries {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyJournalEntries) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyJournalEntries {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyJournalEntries) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyJournalEntriesTx {
	return &linkedAccountingAccountORMHasManyJournalEntriesTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyJournalEntriesTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyJournalEntriesTx) Find() (result []*accounting_servicev1.JournalEntryORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyJournalEntriesTx) Append(values ...*accounting_servicev1.JournalEntryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyJournalEntriesTx) Replace(values ...*accounting_servicev1.JournalEntryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyJournalEntriesTx) Delete(values ...*accounting_servicev1.JournalEntryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyJournalEntriesTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyJournalEntriesTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyPayments struct {
	db *gorm.DB

	field.RelationField
}

func (a linkedAccountingAccountORMHasManyPayments) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyPayments {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyPayments) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyPayments {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyPayments) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyPayments {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyPayments) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyPaymentsTx {
	return &linkedAccountingAccountORMHasManyPaymentsTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyPaymentsTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyPaymentsTx) Find() (result []*accounting_servicev1.PaymentORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyPaymentsTx) Append(values ...*accounting_servicev1.PaymentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyPaymentsTx) Replace(values ...*accounting_servicev1.PaymentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyPaymentsTx) Delete(values ...*accounting_servicev1.PaymentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyPaymentsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyPaymentsTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyPurchaseOrders struct {
	db *gorm.DB

	field.RelationField

	DeliveryAddress struct {
		field.RelationField
	}
	LineItems struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyPurchaseOrders) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyPurchaseOrders {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyPurchaseOrders) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyPurchaseOrders {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyPurchaseOrders) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyPurchaseOrders {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyPurchaseOrders) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyPurchaseOrdersTx {
	return &linkedAccountingAccountORMHasManyPurchaseOrdersTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyPurchaseOrdersTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyPurchaseOrdersTx) Find() (result []*accounting_servicev1.PurchaseOrderORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyPurchaseOrdersTx) Append(values ...*accounting_servicev1.PurchaseOrderORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyPurchaseOrdersTx) Replace(values ...*accounting_servicev1.PurchaseOrderORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyPurchaseOrdersTx) Delete(values ...*accounting_servicev1.PurchaseOrderORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyPurchaseOrdersTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyPurchaseOrdersTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyTaxRates struct {
	db *gorm.DB

	field.RelationField
}

func (a linkedAccountingAccountORMHasManyTaxRates) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyTaxRates {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyTaxRates) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyTaxRates {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyTaxRates) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyTaxRates {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyTaxRates) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyTaxRatesTx {
	return &linkedAccountingAccountORMHasManyTaxRatesTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyTaxRatesTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyTaxRatesTx) Find() (result []*accounting_servicev1.TaxRateORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyTaxRatesTx) Append(values ...*accounting_servicev1.TaxRateORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyTaxRatesTx) Replace(values ...*accounting_servicev1.TaxRateORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyTaxRatesTx) Delete(values ...*accounting_servicev1.TaxRateORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyTaxRatesTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyTaxRatesTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyTransactions struct {
	db *gorm.DB

	field.RelationField

	LineItems struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyTransactions) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyTransactions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyTransactions) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyTransactions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyTransactions) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyTransactions {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyTransactions) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyTransactionsTx {
	return &linkedAccountingAccountORMHasManyTransactionsTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyTransactionsTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyTransactionsTx) Find() (result []*accounting_servicev1.BusinessTransactionORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyTransactionsTx) Append(values ...*accounting_servicev1.BusinessTransactionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyTransactionsTx) Replace(values ...*accounting_servicev1.BusinessTransactionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyTransactionsTx) Delete(values ...*accounting_servicev1.BusinessTransactionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyTransactionsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyTransactionsTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMHasManyVendorCredits struct {
	db *gorm.DB

	field.RelationField

	Lines struct {
		field.RelationField
	}
}

func (a linkedAccountingAccountORMHasManyVendorCredits) Where(conds ...field.Expr) *linkedAccountingAccountORMHasManyVendorCredits {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkedAccountingAccountORMHasManyVendorCredits) WithContext(ctx context.Context) *linkedAccountingAccountORMHasManyVendorCredits {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkedAccountingAccountORMHasManyVendorCredits) Session(session *gorm.Session) *linkedAccountingAccountORMHasManyVendorCredits {
	a.db = a.db.Session(session)
	return &a
}

func (a linkedAccountingAccountORMHasManyVendorCredits) Model(m *accounting_servicev1.LinkedAccountingAccountORM) *linkedAccountingAccountORMHasManyVendorCreditsTx {
	return &linkedAccountingAccountORMHasManyVendorCreditsTx{a.db.Model(m).Association(a.Name())}
}

type linkedAccountingAccountORMHasManyVendorCreditsTx struct{ tx *gorm.Association }

func (a linkedAccountingAccountORMHasManyVendorCreditsTx) Find() (result []*accounting_servicev1.VendorCreditORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkedAccountingAccountORMHasManyVendorCreditsTx) Append(values ...*accounting_servicev1.VendorCreditORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkedAccountingAccountORMHasManyVendorCreditsTx) Replace(values ...*accounting_servicev1.VendorCreditORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkedAccountingAccountORMHasManyVendorCreditsTx) Delete(values ...*accounting_servicev1.VendorCreditORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkedAccountingAccountORMHasManyVendorCreditsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkedAccountingAccountORMHasManyVendorCreditsTx) Count() int64 {
	return a.tx.Count()
}

type linkedAccountingAccountORMDo struct{ gen.DO }

type ILinkedAccountingAccountORMDo interface {
	gen.SubQuery
	Debug() ILinkedAccountingAccountORMDo
	WithContext(ctx context.Context) ILinkedAccountingAccountORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILinkedAccountingAccountORMDo
	WriteDB() ILinkedAccountingAccountORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILinkedAccountingAccountORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILinkedAccountingAccountORMDo
	Not(conds ...gen.Condition) ILinkedAccountingAccountORMDo
	Or(conds ...gen.Condition) ILinkedAccountingAccountORMDo
	Select(conds ...field.Expr) ILinkedAccountingAccountORMDo
	Where(conds ...gen.Condition) ILinkedAccountingAccountORMDo
	Order(conds ...field.Expr) ILinkedAccountingAccountORMDo
	Distinct(cols ...field.Expr) ILinkedAccountingAccountORMDo
	Omit(cols ...field.Expr) ILinkedAccountingAccountORMDo
	Join(table schema.Tabler, on ...field.Expr) ILinkedAccountingAccountORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILinkedAccountingAccountORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILinkedAccountingAccountORMDo
	Group(cols ...field.Expr) ILinkedAccountingAccountORMDo
	Having(conds ...gen.Condition) ILinkedAccountingAccountORMDo
	Limit(limit int) ILinkedAccountingAccountORMDo
	Offset(offset int) ILinkedAccountingAccountORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkedAccountingAccountORMDo
	Unscoped() ILinkedAccountingAccountORMDo
	Create(values ...*accounting_servicev1.LinkedAccountingAccountORM) error
	CreateInBatches(values []*accounting_servicev1.LinkedAccountingAccountORM, batchSize int) error
	Save(values ...*accounting_servicev1.LinkedAccountingAccountORM) error
	First() (*accounting_servicev1.LinkedAccountingAccountORM, error)
	Take() (*accounting_servicev1.LinkedAccountingAccountORM, error)
	Last() (*accounting_servicev1.LinkedAccountingAccountORM, error)
	Find() ([]*accounting_servicev1.LinkedAccountingAccountORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.LinkedAccountingAccountORM, err error)
	FindInBatches(result *[]*accounting_servicev1.LinkedAccountingAccountORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.LinkedAccountingAccountORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILinkedAccountingAccountORMDo
	Assign(attrs ...field.AssignExpr) ILinkedAccountingAccountORMDo
	Joins(fields ...field.RelationField) ILinkedAccountingAccountORMDo
	Preload(fields ...field.RelationField) ILinkedAccountingAccountORMDo
	FirstOrInit() (*accounting_servicev1.LinkedAccountingAccountORM, error)
	FirstOrCreate() (*accounting_servicev1.LinkedAccountingAccountORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.LinkedAccountingAccountORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILinkedAccountingAccountORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.LinkedAccountingAccountORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.LinkedAccountingAccountORM, err error)
	CreateRecord(item accounting_servicev1.LinkedAccountingAccountORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.LinkedAccountingAccountORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.LinkedAccountingAccountORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.LinkedAccountingAccountORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.LinkedAccountingAccountORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l linkedAccountingAccountORMDo) GetRecordByID(id int) (result accounting_servicev1.LinkedAccountingAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM linked_accounting_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (l linkedAccountingAccountORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.LinkedAccountingAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM linked_accounting_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (l linkedAccountingAccountORMDo) CreateRecord(item accounting_servicev1.LinkedAccountingAccountORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO linked_accounting_accounts (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (l linkedAccountingAccountORMDo) UpdateRecordByID(id int, item accounting_servicev1.LinkedAccountingAccountORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE linked_accounting_accounts SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l linkedAccountingAccountORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM linked_accounting_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (l linkedAccountingAccountORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.LinkedAccountingAccountORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM linked_accounting_accounts ORDER BY " + l.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (l linkedAccountingAccountORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM linked_accounting_accounts ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l linkedAccountingAccountORMDo) GetByID(id uint64) (result accounting_servicev1.LinkedAccountingAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM linked_accounting_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (l linkedAccountingAccountORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.LinkedAccountingAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM linked_accounting_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l linkedAccountingAccountORMDo) Debug() ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Debug())
}

func (l linkedAccountingAccountORMDo) WithContext(ctx context.Context) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l linkedAccountingAccountORMDo) ReadDB() ILinkedAccountingAccountORMDo {
	return l.Clauses(dbresolver.Read)
}

func (l linkedAccountingAccountORMDo) WriteDB() ILinkedAccountingAccountORMDo {
	return l.Clauses(dbresolver.Write)
}

func (l linkedAccountingAccountORMDo) Session(config *gorm.Session) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Session(config))
}

func (l linkedAccountingAccountORMDo) Clauses(conds ...clause.Expression) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l linkedAccountingAccountORMDo) Returning(value interface{}, columns ...string) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l linkedAccountingAccountORMDo) Not(conds ...gen.Condition) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l linkedAccountingAccountORMDo) Or(conds ...gen.Condition) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l linkedAccountingAccountORMDo) Select(conds ...field.Expr) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l linkedAccountingAccountORMDo) Where(conds ...gen.Condition) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l linkedAccountingAccountORMDo) Order(conds ...field.Expr) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l linkedAccountingAccountORMDo) Distinct(cols ...field.Expr) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l linkedAccountingAccountORMDo) Omit(cols ...field.Expr) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l linkedAccountingAccountORMDo) Join(table schema.Tabler, on ...field.Expr) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l linkedAccountingAccountORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l linkedAccountingAccountORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l linkedAccountingAccountORMDo) Group(cols ...field.Expr) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l linkedAccountingAccountORMDo) Having(conds ...gen.Condition) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l linkedAccountingAccountORMDo) Limit(limit int) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l linkedAccountingAccountORMDo) Offset(offset int) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l linkedAccountingAccountORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l linkedAccountingAccountORMDo) Unscoped() ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Unscoped())
}

func (l linkedAccountingAccountORMDo) Create(values ...*accounting_servicev1.LinkedAccountingAccountORM) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l linkedAccountingAccountORMDo) CreateInBatches(values []*accounting_servicev1.LinkedAccountingAccountORM, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l linkedAccountingAccountORMDo) Save(values ...*accounting_servicev1.LinkedAccountingAccountORM) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l linkedAccountingAccountORMDo) First() (*accounting_servicev1.LinkedAccountingAccountORM, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.LinkedAccountingAccountORM), nil
	}
}

func (l linkedAccountingAccountORMDo) Take() (*accounting_servicev1.LinkedAccountingAccountORM, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.LinkedAccountingAccountORM), nil
	}
}

func (l linkedAccountingAccountORMDo) Last() (*accounting_servicev1.LinkedAccountingAccountORM, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.LinkedAccountingAccountORM), nil
	}
}

func (l linkedAccountingAccountORMDo) Find() ([]*accounting_servicev1.LinkedAccountingAccountORM, error) {
	result, err := l.DO.Find()
	return result.([]*accounting_servicev1.LinkedAccountingAccountORM), err
}

func (l linkedAccountingAccountORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.LinkedAccountingAccountORM, err error) {
	buf := make([]*accounting_servicev1.LinkedAccountingAccountORM, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l linkedAccountingAccountORMDo) FindInBatches(result *[]*accounting_servicev1.LinkedAccountingAccountORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l linkedAccountingAccountORMDo) Attrs(attrs ...field.AssignExpr) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l linkedAccountingAccountORMDo) Assign(attrs ...field.AssignExpr) ILinkedAccountingAccountORMDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l linkedAccountingAccountORMDo) Joins(fields ...field.RelationField) ILinkedAccountingAccountORMDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l linkedAccountingAccountORMDo) Preload(fields ...field.RelationField) ILinkedAccountingAccountORMDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l linkedAccountingAccountORMDo) FirstOrInit() (*accounting_servicev1.LinkedAccountingAccountORM, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.LinkedAccountingAccountORM), nil
	}
}

func (l linkedAccountingAccountORMDo) FirstOrCreate() (*accounting_servicev1.LinkedAccountingAccountORM, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.LinkedAccountingAccountORM), nil
	}
}

func (l linkedAccountingAccountORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.LinkedAccountingAccountORM, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l linkedAccountingAccountORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l linkedAccountingAccountORMDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l linkedAccountingAccountORMDo) Delete(models ...*accounting_servicev1.LinkedAccountingAccountORM) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *linkedAccountingAccountORMDo) withDO(do gen.Dao) *linkedAccountingAccountORMDo {
	l.DO = *do.(*gen.DO)
	return l
}
