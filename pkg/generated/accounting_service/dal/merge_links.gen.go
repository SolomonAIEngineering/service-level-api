// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newMergeLinkORM(db *gorm.DB, opts ...gen.DOOption) mergeLinkORM {
	_mergeLinkORM := mergeLinkORM{}

	_mergeLinkORM.mergeLinkORMDo.UseDB(db, opts...)
	_mergeLinkORM.mergeLinkORMDo.UseModel(&accounting_servicev1.MergeLinkORM{})

	tableName := _mergeLinkORM.mergeLinkORMDo.TableName()
	_mergeLinkORM.ALL = field.NewAsterisk(tableName)
	_mergeLinkORM.BusinessAccountingProfileId = field.NewUint64(tableName, "business_accounting_profile_id")
	_mergeLinkORM.Category = field.NewString(tableName, "category")
	_mergeLinkORM.EndUserEmailAddress = field.NewString(tableName, "end_user_email_address")
	_mergeLinkORM.EndUserOrganizationName = field.NewString(tableName, "end_user_organization_name")
	_mergeLinkORM.EndUserOriginId = field.NewString(tableName, "end_user_origin_id")
	_mergeLinkORM.Id = field.NewUint64(tableName, "id")
	_mergeLinkORM.Integration = field.NewString(tableName, "integration")
	_mergeLinkORM.IntegrationImage = field.NewString(tableName, "integration_image")
	_mergeLinkORM.IntegrationName = field.NewString(tableName, "integration_name")
	_mergeLinkORM.IntegrationSlug = field.NewString(tableName, "integration_slug")
	_mergeLinkORM.IntegrationSquareImage = field.NewString(tableName, "integration_square_image")
	_mergeLinkORM.IsDuplicate = field.NewBool(tableName, "is_duplicate")
	_mergeLinkORM.LastModifiedAt = field.NewTime(tableName, "last_modified_at")
	_mergeLinkORM.MergeLinkedAccountId = field.NewString(tableName, "merge_linked_account_id")
	_mergeLinkORM.Status = field.NewString(tableName, "status")
	_mergeLinkORM.WebhookListenerUrl = field.NewString(tableName, "webhook_listener_url")
	_mergeLinkORM.Account = mergeLinkORMHasOneAccount{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Account", "accounting_servicev1.LinkedAccountingAccountORM"),
		ReferenceDetails: struct {
			field.RelationField
			ChartOfAccounts struct {
				field.RelationField
			}
			Contacts struct {
				field.RelationField
			}
			Items struct {
				field.RelationField
			}
			TaxRates struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.ReferenceDetails", "accounting_servicev1.ReferenceDetailsORM"),
			ChartOfAccounts: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.ReferenceDetails.ChartOfAccounts", "accounting_servicev1.BusinessChartOfAccountsORM"),
			},
			Contacts: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.ReferenceDetails.Contacts", "accounting_servicev1.ContactsORM"),
			},
			Items: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.ReferenceDetails.Items", "accounting_servicev1.ItemORM"),
			},
			TaxRates: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.ReferenceDetails.TaxRates", "accounting_servicev1.TaxRateORM"),
			},
		},
		ReportDetails: struct {
			field.RelationField
			BalanceSheets struct {
				field.RelationField
				Assets struct {
					field.RelationField
				}
				Equity struct {
					field.RelationField
				}
				Liabilities struct {
					field.RelationField
				}
			}
			CashFlowStatements struct {
				field.RelationField
				FinancingActivities struct {
					field.RelationField
				}
				InvestingActivities struct {
					field.RelationField
				}
				OperatingActivities struct {
					field.RelationField
				}
			}
			IncomeStatements struct {
				field.RelationField
				CostOfSales struct {
					field.RelationField
				}
				Income struct {
					field.RelationField
				}
				NonOperatingExpenses struct {
					field.RelationField
				}
				OperatingExpenses struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Account.ReportDetails", "accounting_servicev1.ReportDetailsORM"),
			BalanceSheets: struct {
				field.RelationField
				Assets struct {
					field.RelationField
				}
				Equity struct {
					field.RelationField
				}
				Liabilities struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.ReportDetails.BalanceSheets", "accounting_servicev1.BalanceSheetORM"),
				Assets: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ReportDetails.BalanceSheets.Assets", "accounting_servicev1.ReportItemORM"),
				},
				Equity: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ReportDetails.BalanceSheets.Equity", "accounting_servicev1.ReportItemORM"),
				},
				Liabilities: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ReportDetails.BalanceSheets.Liabilities", "accounting_servicev1.ReportItemORM"),
				},
			},
			CashFlowStatements: struct {
				field.RelationField
				FinancingActivities struct {
					field.RelationField
				}
				InvestingActivities struct {
					field.RelationField
				}
				OperatingActivities struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.ReportDetails.CashFlowStatements", "accounting_servicev1.CashFlowStatementsORM"),
				FinancingActivities: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ReportDetails.CashFlowStatements.FinancingActivities", "accounting_servicev1.ReportItemORM"),
				},
				InvestingActivities: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ReportDetails.CashFlowStatements.InvestingActivities", "accounting_servicev1.ReportItemORM"),
				},
				OperatingActivities: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ReportDetails.CashFlowStatements.OperatingActivities", "accounting_servicev1.ReportItemORM"),
				},
			},
			IncomeStatements: struct {
				field.RelationField
				CostOfSales struct {
					field.RelationField
				}
				Income struct {
					field.RelationField
				}
				NonOperatingExpenses struct {
					field.RelationField
				}
				OperatingExpenses struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.ReportDetails.IncomeStatements", "accounting_servicev1.IncomeStatementORM"),
				CostOfSales: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ReportDetails.IncomeStatements.CostOfSales", "accounting_servicev1.ReportItemORM"),
				},
				Income: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ReportDetails.IncomeStatements.Income", "accounting_servicev1.ReportItemORM"),
				},
				NonOperatingExpenses: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ReportDetails.IncomeStatements.NonOperatingExpenses", "accounting_servicev1.ReportItemORM"),
				},
				OperatingExpenses: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.ReportDetails.IncomeStatements.OperatingExpenses", "accounting_servicev1.ReportItemORM"),
				},
			},
		},
		TransactionsDetails: struct {
			field.RelationField
			CreditNotes struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			Expenses struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
			Invoices struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			JournalEntries struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
			Payments struct {
				field.RelationField
			}
			Transactions struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			VendorCredits struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Account.TransactionsDetails", "accounting_servicev1.TransactionDetailsORM"),
			CreditNotes: struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.TransactionsDetails.CreditNotes", "accounting_servicev1.CreditNoteORM"),
				LineItems: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.TransactionsDetails.CreditNotes.LineItems", "accounting_servicev1.CreditNoteLineItemORM"),
				},
			},
			Expenses: struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.TransactionsDetails.Expenses", "accounting_servicev1.ExpenseORM"),
				Lines: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.TransactionsDetails.Expenses.Lines", "accounting_servicev1.ExpenseLineORM"),
				},
			},
			Invoices: struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.TransactionsDetails.Invoices", "accounting_servicev1.InvoiceORM"),
				LineItems: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.TransactionsDetails.Invoices.LineItems", "accounting_servicev1.InvoiceLineItemORM"),
				},
			},
			JournalEntries: struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.TransactionsDetails.JournalEntries", "accounting_servicev1.JournalEntryORM"),
				Lines: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.TransactionsDetails.JournalEntries.Lines", "accounting_servicev1.JournalLineORM"),
				},
			},
			Payments: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.TransactionsDetails.Payments", "accounting_servicev1.PaymentORM"),
			},
			Transactions: struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.TransactionsDetails.Transactions", "accounting_servicev1.BusinessTransactionORM"),
				LineItems: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.TransactionsDetails.Transactions.LineItems", "accounting_servicev1.TransactionLineItemORM"),
				},
			},
			VendorCredits: struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.TransactionsDetails.VendorCredits", "accounting_servicev1.VendorCreditORM"),
				Lines: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.TransactionsDetails.VendorCredits.Lines", "accounting_servicev1.VendorCreditLineORM"),
				},
			},
		},
		Attachments: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.Attachments", "accounting_servicev1.AttachmentsORM"),
		},
		CompanyInfo: struct {
			field.RelationField
			Addresses struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.CompanyInfo", "accounting_servicev1.CompanyInfoORM"),
			Addresses: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.CompanyInfo.Addresses", "accounting_servicev1.CompanyAddressORM"),
			},
		},
		PurchaseOrders: struct {
			field.RelationField
			DeliveryAddress struct {
				field.RelationField
			}
			LineItems struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.PurchaseOrders", "accounting_servicev1.PurchaseOrderORM"),
			DeliveryAddress: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.PurchaseOrders.DeliveryAddress", "accounting_servicev1.CompanyAddressORM"),
			},
			LineItems: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.PurchaseOrders.LineItems", "accounting_servicev1.PurchaseOrderLineItemORM"),
			},
		},
	}

	_mergeLinkORM.Token = mergeLinkORMHasOneToken{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Token", "accounting_servicev1.MergeLinkedAccountTokenORM"),
	}

	_mergeLinkORM.fillFieldMap()

	return _mergeLinkORM
}

type mergeLinkORM struct {
	mergeLinkORMDo

	ALL                         field.Asterisk
	BusinessAccountingProfileId field.Uint64
	Category                    field.String
	EndUserEmailAddress         field.String
	EndUserOrganizationName     field.String
	EndUserOriginId             field.String
	Id                          field.Uint64
	Integration                 field.String
	IntegrationImage            field.String
	IntegrationName             field.String
	IntegrationSlug             field.String
	IntegrationSquareImage      field.String
	IsDuplicate                 field.Bool
	LastModifiedAt              field.Time
	MergeLinkedAccountId        field.String
	Status                      field.String
	WebhookListenerUrl          field.String
	Account                     mergeLinkORMHasOneAccount

	Token mergeLinkORMHasOneToken

	fieldMap map[string]field.Expr
}

func (m mergeLinkORM) Table(newTableName string) *mergeLinkORM {
	m.mergeLinkORMDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mergeLinkORM) As(alias string) *mergeLinkORM {
	m.mergeLinkORMDo.DO = *(m.mergeLinkORMDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mergeLinkORM) updateTableName(table string) *mergeLinkORM {
	m.ALL = field.NewAsterisk(table)
	m.BusinessAccountingProfileId = field.NewUint64(table, "business_accounting_profile_id")
	m.Category = field.NewString(table, "category")
	m.EndUserEmailAddress = field.NewString(table, "end_user_email_address")
	m.EndUserOrganizationName = field.NewString(table, "end_user_organization_name")
	m.EndUserOriginId = field.NewString(table, "end_user_origin_id")
	m.Id = field.NewUint64(table, "id")
	m.Integration = field.NewString(table, "integration")
	m.IntegrationImage = field.NewString(table, "integration_image")
	m.IntegrationName = field.NewString(table, "integration_name")
	m.IntegrationSlug = field.NewString(table, "integration_slug")
	m.IntegrationSquareImage = field.NewString(table, "integration_square_image")
	m.IsDuplicate = field.NewBool(table, "is_duplicate")
	m.LastModifiedAt = field.NewTime(table, "last_modified_at")
	m.MergeLinkedAccountId = field.NewString(table, "merge_linked_account_id")
	m.Status = field.NewString(table, "status")
	m.WebhookListenerUrl = field.NewString(table, "webhook_listener_url")

	m.fillFieldMap()

	return m
}

func (m *mergeLinkORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mergeLinkORM) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 18)
	m.fieldMap["business_accounting_profile_id"] = m.BusinessAccountingProfileId
	m.fieldMap["category"] = m.Category
	m.fieldMap["end_user_email_address"] = m.EndUserEmailAddress
	m.fieldMap["end_user_organization_name"] = m.EndUserOrganizationName
	m.fieldMap["end_user_origin_id"] = m.EndUserOriginId
	m.fieldMap["id"] = m.Id
	m.fieldMap["integration"] = m.Integration
	m.fieldMap["integration_image"] = m.IntegrationImage
	m.fieldMap["integration_name"] = m.IntegrationName
	m.fieldMap["integration_slug"] = m.IntegrationSlug
	m.fieldMap["integration_square_image"] = m.IntegrationSquareImage
	m.fieldMap["is_duplicate"] = m.IsDuplicate
	m.fieldMap["last_modified_at"] = m.LastModifiedAt
	m.fieldMap["merge_linked_account_id"] = m.MergeLinkedAccountId
	m.fieldMap["status"] = m.Status
	m.fieldMap["webhook_listener_url"] = m.WebhookListenerUrl

}

func (m mergeLinkORM) clone(db *gorm.DB) mergeLinkORM {
	m.mergeLinkORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mergeLinkORM) replaceDB(db *gorm.DB) mergeLinkORM {
	m.mergeLinkORMDo.ReplaceDB(db)
	return m
}

type mergeLinkORMHasOneAccount struct {
	db *gorm.DB

	field.RelationField

	ReferenceDetails struct {
		field.RelationField
		ChartOfAccounts struct {
			field.RelationField
		}
		Contacts struct {
			field.RelationField
		}
		Items struct {
			field.RelationField
		}
		TaxRates struct {
			field.RelationField
		}
	}
	ReportDetails struct {
		field.RelationField
		BalanceSheets struct {
			field.RelationField
			Assets struct {
				field.RelationField
			}
			Equity struct {
				field.RelationField
			}
			Liabilities struct {
				field.RelationField
			}
		}
		CashFlowStatements struct {
			field.RelationField
			FinancingActivities struct {
				field.RelationField
			}
			InvestingActivities struct {
				field.RelationField
			}
			OperatingActivities struct {
				field.RelationField
			}
		}
		IncomeStatements struct {
			field.RelationField
			CostOfSales struct {
				field.RelationField
			}
			Income struct {
				field.RelationField
			}
			NonOperatingExpenses struct {
				field.RelationField
			}
			OperatingExpenses struct {
				field.RelationField
			}
		}
	}
	TransactionsDetails struct {
		field.RelationField
		CreditNotes struct {
			field.RelationField
			LineItems struct {
				field.RelationField
			}
		}
		Expenses struct {
			field.RelationField
			Lines struct {
				field.RelationField
			}
		}
		Invoices struct {
			field.RelationField
			LineItems struct {
				field.RelationField
			}
		}
		JournalEntries struct {
			field.RelationField
			Lines struct {
				field.RelationField
			}
		}
		Payments struct {
			field.RelationField
		}
		Transactions struct {
			field.RelationField
			LineItems struct {
				field.RelationField
			}
		}
		VendorCredits struct {
			field.RelationField
			Lines struct {
				field.RelationField
			}
		}
	}
	Attachments struct {
		field.RelationField
	}
	CompanyInfo struct {
		field.RelationField
		Addresses struct {
			field.RelationField
		}
	}
	PurchaseOrders struct {
		field.RelationField
		DeliveryAddress struct {
			field.RelationField
		}
		LineItems struct {
			field.RelationField
		}
	}
}

func (a mergeLinkORMHasOneAccount) Where(conds ...field.Expr) *mergeLinkORMHasOneAccount {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a mergeLinkORMHasOneAccount) WithContext(ctx context.Context) *mergeLinkORMHasOneAccount {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a mergeLinkORMHasOneAccount) Session(session *gorm.Session) *mergeLinkORMHasOneAccount {
	a.db = a.db.Session(session)
	return &a
}

func (a mergeLinkORMHasOneAccount) Model(m *accounting_servicev1.MergeLinkORM) *mergeLinkORMHasOneAccountTx {
	return &mergeLinkORMHasOneAccountTx{a.db.Model(m).Association(a.Name())}
}

type mergeLinkORMHasOneAccountTx struct{ tx *gorm.Association }

func (a mergeLinkORMHasOneAccountTx) Find() (result *accounting_servicev1.LinkedAccountingAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a mergeLinkORMHasOneAccountTx) Append(values ...*accounting_servicev1.LinkedAccountingAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a mergeLinkORMHasOneAccountTx) Replace(values ...*accounting_servicev1.LinkedAccountingAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a mergeLinkORMHasOneAccountTx) Delete(values ...*accounting_servicev1.LinkedAccountingAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a mergeLinkORMHasOneAccountTx) Clear() error {
	return a.tx.Clear()
}

func (a mergeLinkORMHasOneAccountTx) Count() int64 {
	return a.tx.Count()
}

type mergeLinkORMHasOneToken struct {
	db *gorm.DB

	field.RelationField
}

func (a mergeLinkORMHasOneToken) Where(conds ...field.Expr) *mergeLinkORMHasOneToken {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a mergeLinkORMHasOneToken) WithContext(ctx context.Context) *mergeLinkORMHasOneToken {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a mergeLinkORMHasOneToken) Session(session *gorm.Session) *mergeLinkORMHasOneToken {
	a.db = a.db.Session(session)
	return &a
}

func (a mergeLinkORMHasOneToken) Model(m *accounting_servicev1.MergeLinkORM) *mergeLinkORMHasOneTokenTx {
	return &mergeLinkORMHasOneTokenTx{a.db.Model(m).Association(a.Name())}
}

type mergeLinkORMHasOneTokenTx struct{ tx *gorm.Association }

func (a mergeLinkORMHasOneTokenTx) Find() (result *accounting_servicev1.MergeLinkedAccountTokenORM, err error) {
	return result, a.tx.Find(&result)
}

func (a mergeLinkORMHasOneTokenTx) Append(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a mergeLinkORMHasOneTokenTx) Replace(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a mergeLinkORMHasOneTokenTx) Delete(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a mergeLinkORMHasOneTokenTx) Clear() error {
	return a.tx.Clear()
}

func (a mergeLinkORMHasOneTokenTx) Count() int64 {
	return a.tx.Count()
}

type mergeLinkORMDo struct{ gen.DO }

type IMergeLinkORMDo interface {
	gen.SubQuery
	Debug() IMergeLinkORMDo
	WithContext(ctx context.Context) IMergeLinkORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMergeLinkORMDo
	WriteDB() IMergeLinkORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMergeLinkORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMergeLinkORMDo
	Not(conds ...gen.Condition) IMergeLinkORMDo
	Or(conds ...gen.Condition) IMergeLinkORMDo
	Select(conds ...field.Expr) IMergeLinkORMDo
	Where(conds ...gen.Condition) IMergeLinkORMDo
	Order(conds ...field.Expr) IMergeLinkORMDo
	Distinct(cols ...field.Expr) IMergeLinkORMDo
	Omit(cols ...field.Expr) IMergeLinkORMDo
	Join(table schema.Tabler, on ...field.Expr) IMergeLinkORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMergeLinkORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMergeLinkORMDo
	Group(cols ...field.Expr) IMergeLinkORMDo
	Having(conds ...gen.Condition) IMergeLinkORMDo
	Limit(limit int) IMergeLinkORMDo
	Offset(offset int) IMergeLinkORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMergeLinkORMDo
	Unscoped() IMergeLinkORMDo
	Create(values ...*accounting_servicev1.MergeLinkORM) error
	CreateInBatches(values []*accounting_servicev1.MergeLinkORM, batchSize int) error
	Save(values ...*accounting_servicev1.MergeLinkORM) error
	First() (*accounting_servicev1.MergeLinkORM, error)
	Take() (*accounting_servicev1.MergeLinkORM, error)
	Last() (*accounting_servicev1.MergeLinkORM, error)
	Find() ([]*accounting_servicev1.MergeLinkORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.MergeLinkORM, err error)
	FindInBatches(result *[]*accounting_servicev1.MergeLinkORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.MergeLinkORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMergeLinkORMDo
	Assign(attrs ...field.AssignExpr) IMergeLinkORMDo
	Joins(fields ...field.RelationField) IMergeLinkORMDo
	Preload(fields ...field.RelationField) IMergeLinkORMDo
	FirstOrInit() (*accounting_servicev1.MergeLinkORM, error)
	FirstOrCreate() (*accounting_servicev1.MergeLinkORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.MergeLinkORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMergeLinkORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.MergeLinkORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.MergeLinkORM, err error)
	CreateRecord(item accounting_servicev1.MergeLinkORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.MergeLinkORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.MergeLinkORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.MergeLinkORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.MergeLinkORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeLinkORMDo) GetRecordByID(id int) (result accounting_servicev1.MergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mergeLinkORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.MergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (m mergeLinkORMDo) CreateRecord(item accounting_servicev1.MergeLinkORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO merge_links (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeLinkORMDo) UpdateRecordByID(id int, item accounting_servicev1.MergeLinkORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE merge_links SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeLinkORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (m mergeLinkORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.MergeLinkORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_links ORDER BY " + m.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (m mergeLinkORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM merge_links ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeLinkORMDo) GetByID(id uint64) (result accounting_servicev1.MergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mergeLinkORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.MergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m mergeLinkORMDo) Debug() IMergeLinkORMDo {
	return m.withDO(m.DO.Debug())
}

func (m mergeLinkORMDo) WithContext(ctx context.Context) IMergeLinkORMDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mergeLinkORMDo) ReadDB() IMergeLinkORMDo {
	return m.Clauses(dbresolver.Read)
}

func (m mergeLinkORMDo) WriteDB() IMergeLinkORMDo {
	return m.Clauses(dbresolver.Write)
}

func (m mergeLinkORMDo) Session(config *gorm.Session) IMergeLinkORMDo {
	return m.withDO(m.DO.Session(config))
}

func (m mergeLinkORMDo) Clauses(conds ...clause.Expression) IMergeLinkORMDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mergeLinkORMDo) Returning(value interface{}, columns ...string) IMergeLinkORMDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mergeLinkORMDo) Not(conds ...gen.Condition) IMergeLinkORMDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mergeLinkORMDo) Or(conds ...gen.Condition) IMergeLinkORMDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mergeLinkORMDo) Select(conds ...field.Expr) IMergeLinkORMDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mergeLinkORMDo) Where(conds ...gen.Condition) IMergeLinkORMDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mergeLinkORMDo) Order(conds ...field.Expr) IMergeLinkORMDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mergeLinkORMDo) Distinct(cols ...field.Expr) IMergeLinkORMDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mergeLinkORMDo) Omit(cols ...field.Expr) IMergeLinkORMDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mergeLinkORMDo) Join(table schema.Tabler, on ...field.Expr) IMergeLinkORMDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mergeLinkORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMergeLinkORMDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mergeLinkORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IMergeLinkORMDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mergeLinkORMDo) Group(cols ...field.Expr) IMergeLinkORMDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mergeLinkORMDo) Having(conds ...gen.Condition) IMergeLinkORMDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mergeLinkORMDo) Limit(limit int) IMergeLinkORMDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mergeLinkORMDo) Offset(offset int) IMergeLinkORMDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mergeLinkORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMergeLinkORMDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mergeLinkORMDo) Unscoped() IMergeLinkORMDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mergeLinkORMDo) Create(values ...*accounting_servicev1.MergeLinkORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mergeLinkORMDo) CreateInBatches(values []*accounting_servicev1.MergeLinkORM, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mergeLinkORMDo) Save(values ...*accounting_servicev1.MergeLinkORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mergeLinkORMDo) First() (*accounting_servicev1.MergeLinkORM, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeLinkORM), nil
	}
}

func (m mergeLinkORMDo) Take() (*accounting_servicev1.MergeLinkORM, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeLinkORM), nil
	}
}

func (m mergeLinkORMDo) Last() (*accounting_servicev1.MergeLinkORM, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeLinkORM), nil
	}
}

func (m mergeLinkORMDo) Find() ([]*accounting_servicev1.MergeLinkORM, error) {
	result, err := m.DO.Find()
	return result.([]*accounting_servicev1.MergeLinkORM), err
}

func (m mergeLinkORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.MergeLinkORM, err error) {
	buf := make([]*accounting_servicev1.MergeLinkORM, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mergeLinkORMDo) FindInBatches(result *[]*accounting_servicev1.MergeLinkORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mergeLinkORMDo) Attrs(attrs ...field.AssignExpr) IMergeLinkORMDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mergeLinkORMDo) Assign(attrs ...field.AssignExpr) IMergeLinkORMDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mergeLinkORMDo) Joins(fields ...field.RelationField) IMergeLinkORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mergeLinkORMDo) Preload(fields ...field.RelationField) IMergeLinkORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mergeLinkORMDo) FirstOrInit() (*accounting_servicev1.MergeLinkORM, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeLinkORM), nil
	}
}

func (m mergeLinkORMDo) FirstOrCreate() (*accounting_servicev1.MergeLinkORM, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeLinkORM), nil
	}
}

func (m mergeLinkORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.MergeLinkORM, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mergeLinkORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mergeLinkORMDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mergeLinkORMDo) Delete(models ...*accounting_servicev1.MergeLinkORM) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mergeLinkORMDo) withDO(do gen.Dao) *mergeLinkORMDo {
	m.DO = *do.(*gen.DO)
	return m
}
