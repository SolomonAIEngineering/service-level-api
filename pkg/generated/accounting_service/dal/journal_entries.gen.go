// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newJournalEntryORM(db *gorm.DB, opts ...gen.DOOption) journalEntryORM {
	_journalEntryORM := journalEntryORM{}

	_journalEntryORM.journalEntryORMDo.UseDB(db, opts...)
	_journalEntryORM.journalEntryORMDo.UseModel(&accounting_servicev1.JournalEntryORM{})

	tableName := _journalEntryORM.journalEntryORMDo.TableName()
	_journalEntryORM.ALL = field.NewAsterisk(tableName)
	_journalEntryORM.AccountingPeriod = field.NewString(tableName, "accounting_period")
	_journalEntryORM.Company = field.NewString(tableName, "company")
	_journalEntryORM.Currency = field.NewString(tableName, "currency")
	_journalEntryORM.ExchangeRate = field.NewString(tableName, "exchange_rate")
	_journalEntryORM.Id = field.NewUint64(tableName, "id")
	_journalEntryORM.JournalNumber = field.NewString(tableName, "journal_number")
	_journalEntryORM.Memo = field.NewString(tableName, "memo")
	_journalEntryORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_journalEntryORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_journalEntryORM.PaymentIds = field.NewField(tableName, "payment_ids")
	_journalEntryORM.PostingStatus = field.NewString(tableName, "posting_status")
	_journalEntryORM.RemoteCreatedAt = field.NewTime(tableName, "remote_created_at")
	_journalEntryORM.RemoteId = field.NewString(tableName, "remote_id")
	_journalEntryORM.RemoteUpdatedAt = field.NewTime(tableName, "remote_updated_at")
	_journalEntryORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_journalEntryORM.TrackingCategories = field.NewField(tableName, "tracking_categories")
	_journalEntryORM.TransactionDate = field.NewTime(tableName, "transaction_date")
	_journalEntryORM.TransactionDetailsId = field.NewUint64(tableName, "transaction_details_id")
	_journalEntryORM.Lines = journalEntryORMHasManyLines{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Lines", "accounting_servicev1.JournalLineORM"),
	}

	_journalEntryORM.fillFieldMap()

	return _journalEntryORM
}

type journalEntryORM struct {
	journalEntryORMDo

	ALL                  field.Asterisk
	AccountingPeriod     field.String
	Company              field.String
	Currency             field.String
	ExchangeRate         field.String
	Id                   field.Uint64
	JournalNumber        field.String
	Memo                 field.String
	MergeAccountId       field.String
	ModifiedAt           field.Time
	PaymentIds           field.Field
	PostingStatus        field.String
	RemoteCreatedAt      field.Time
	RemoteId             field.String
	RemoteUpdatedAt      field.Time
	RemoteWasDeleted     field.Bool
	TrackingCategories   field.Field
	TransactionDate      field.Time
	TransactionDetailsId field.Uint64
	Lines                journalEntryORMHasManyLines

	fieldMap map[string]field.Expr
}

func (j journalEntryORM) Table(newTableName string) *journalEntryORM {
	j.journalEntryORMDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j journalEntryORM) As(alias string) *journalEntryORM {
	j.journalEntryORMDo.DO = *(j.journalEntryORMDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *journalEntryORM) updateTableName(table string) *journalEntryORM {
	j.ALL = field.NewAsterisk(table)
	j.AccountingPeriod = field.NewString(table, "accounting_period")
	j.Company = field.NewString(table, "company")
	j.Currency = field.NewString(table, "currency")
	j.ExchangeRate = field.NewString(table, "exchange_rate")
	j.Id = field.NewUint64(table, "id")
	j.JournalNumber = field.NewString(table, "journal_number")
	j.Memo = field.NewString(table, "memo")
	j.MergeAccountId = field.NewString(table, "merge_account_id")
	j.ModifiedAt = field.NewTime(table, "modified_at")
	j.PaymentIds = field.NewField(table, "payment_ids")
	j.PostingStatus = field.NewString(table, "posting_status")
	j.RemoteCreatedAt = field.NewTime(table, "remote_created_at")
	j.RemoteId = field.NewString(table, "remote_id")
	j.RemoteUpdatedAt = field.NewTime(table, "remote_updated_at")
	j.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	j.TrackingCategories = field.NewField(table, "tracking_categories")
	j.TransactionDate = field.NewTime(table, "transaction_date")
	j.TransactionDetailsId = field.NewUint64(table, "transaction_details_id")

	j.fillFieldMap()

	return j
}

func (j *journalEntryORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *journalEntryORM) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 19)
	j.fieldMap["accounting_period"] = j.AccountingPeriod
	j.fieldMap["company"] = j.Company
	j.fieldMap["currency"] = j.Currency
	j.fieldMap["exchange_rate"] = j.ExchangeRate
	j.fieldMap["id"] = j.Id
	j.fieldMap["journal_number"] = j.JournalNumber
	j.fieldMap["memo"] = j.Memo
	j.fieldMap["merge_account_id"] = j.MergeAccountId
	j.fieldMap["modified_at"] = j.ModifiedAt
	j.fieldMap["payment_ids"] = j.PaymentIds
	j.fieldMap["posting_status"] = j.PostingStatus
	j.fieldMap["remote_created_at"] = j.RemoteCreatedAt
	j.fieldMap["remote_id"] = j.RemoteId
	j.fieldMap["remote_updated_at"] = j.RemoteUpdatedAt
	j.fieldMap["remote_was_deleted"] = j.RemoteWasDeleted
	j.fieldMap["tracking_categories"] = j.TrackingCategories
	j.fieldMap["transaction_date"] = j.TransactionDate
	j.fieldMap["transaction_details_id"] = j.TransactionDetailsId

}

func (j journalEntryORM) clone(db *gorm.DB) journalEntryORM {
	j.journalEntryORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j journalEntryORM) replaceDB(db *gorm.DB) journalEntryORM {
	j.journalEntryORMDo.ReplaceDB(db)
	return j
}

type journalEntryORMHasManyLines struct {
	db *gorm.DB

	field.RelationField
}

func (a journalEntryORMHasManyLines) Where(conds ...field.Expr) *journalEntryORMHasManyLines {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a journalEntryORMHasManyLines) WithContext(ctx context.Context) *journalEntryORMHasManyLines {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a journalEntryORMHasManyLines) Session(session *gorm.Session) *journalEntryORMHasManyLines {
	a.db = a.db.Session(session)
	return &a
}

func (a journalEntryORMHasManyLines) Model(m *accounting_servicev1.JournalEntryORM) *journalEntryORMHasManyLinesTx {
	return &journalEntryORMHasManyLinesTx{a.db.Model(m).Association(a.Name())}
}

type journalEntryORMHasManyLinesTx struct{ tx *gorm.Association }

func (a journalEntryORMHasManyLinesTx) Find() (result []*accounting_servicev1.JournalLineORM, err error) {
	return result, a.tx.Find(&result)
}

func (a journalEntryORMHasManyLinesTx) Append(values ...*accounting_servicev1.JournalLineORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a journalEntryORMHasManyLinesTx) Replace(values ...*accounting_servicev1.JournalLineORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a journalEntryORMHasManyLinesTx) Delete(values ...*accounting_servicev1.JournalLineORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a journalEntryORMHasManyLinesTx) Clear() error {
	return a.tx.Clear()
}

func (a journalEntryORMHasManyLinesTx) Count() int64 {
	return a.tx.Count()
}

type journalEntryORMDo struct{ gen.DO }

type IJournalEntryORMDo interface {
	gen.SubQuery
	Debug() IJournalEntryORMDo
	WithContext(ctx context.Context) IJournalEntryORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJournalEntryORMDo
	WriteDB() IJournalEntryORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJournalEntryORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJournalEntryORMDo
	Not(conds ...gen.Condition) IJournalEntryORMDo
	Or(conds ...gen.Condition) IJournalEntryORMDo
	Select(conds ...field.Expr) IJournalEntryORMDo
	Where(conds ...gen.Condition) IJournalEntryORMDo
	Order(conds ...field.Expr) IJournalEntryORMDo
	Distinct(cols ...field.Expr) IJournalEntryORMDo
	Omit(cols ...field.Expr) IJournalEntryORMDo
	Join(table schema.Tabler, on ...field.Expr) IJournalEntryORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJournalEntryORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJournalEntryORMDo
	Group(cols ...field.Expr) IJournalEntryORMDo
	Having(conds ...gen.Condition) IJournalEntryORMDo
	Limit(limit int) IJournalEntryORMDo
	Offset(offset int) IJournalEntryORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJournalEntryORMDo
	Unscoped() IJournalEntryORMDo
	Create(values ...*accounting_servicev1.JournalEntryORM) error
	CreateInBatches(values []*accounting_servicev1.JournalEntryORM, batchSize int) error
	Save(values ...*accounting_servicev1.JournalEntryORM) error
	First() (*accounting_servicev1.JournalEntryORM, error)
	Take() (*accounting_servicev1.JournalEntryORM, error)
	Last() (*accounting_servicev1.JournalEntryORM, error)
	Find() ([]*accounting_servicev1.JournalEntryORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.JournalEntryORM, err error)
	FindInBatches(result *[]*accounting_servicev1.JournalEntryORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.JournalEntryORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJournalEntryORMDo
	Assign(attrs ...field.AssignExpr) IJournalEntryORMDo
	Joins(fields ...field.RelationField) IJournalEntryORMDo
	Preload(fields ...field.RelationField) IJournalEntryORMDo
	FirstOrInit() (*accounting_servicev1.JournalEntryORM, error)
	FirstOrCreate() (*accounting_servicev1.JournalEntryORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.JournalEntryORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJournalEntryORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.JournalEntryORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.JournalEntryORM, err error)
	CreateRecord(item accounting_servicev1.JournalEntryORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.JournalEntryORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.JournalEntryORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.JournalEntryORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.JournalEntryORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (j journalEntryORMDo) GetRecordByID(id int) (result accounting_servicev1.JournalEntryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM journal_entries ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (j journalEntryORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.JournalEntryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM journal_entries ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (j journalEntryORMDo) CreateRecord(item accounting_servicev1.JournalEntryORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO journal_entries (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (j journalEntryORMDo) UpdateRecordByID(id int, item accounting_servicev1.JournalEntryORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE journal_entries SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (j journalEntryORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM journal_entries ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (j journalEntryORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.JournalEntryORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM journal_entries ORDER BY " + j.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (j journalEntryORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM journal_entries ")

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (j journalEntryORMDo) GetByID(id uint64) (result accounting_servicev1.JournalEntryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM journal_entries ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (j journalEntryORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.JournalEntryORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM journal_entries ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = j.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (j journalEntryORMDo) Debug() IJournalEntryORMDo {
	return j.withDO(j.DO.Debug())
}

func (j journalEntryORMDo) WithContext(ctx context.Context) IJournalEntryORMDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j journalEntryORMDo) ReadDB() IJournalEntryORMDo {
	return j.Clauses(dbresolver.Read)
}

func (j journalEntryORMDo) WriteDB() IJournalEntryORMDo {
	return j.Clauses(dbresolver.Write)
}

func (j journalEntryORMDo) Session(config *gorm.Session) IJournalEntryORMDo {
	return j.withDO(j.DO.Session(config))
}

func (j journalEntryORMDo) Clauses(conds ...clause.Expression) IJournalEntryORMDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j journalEntryORMDo) Returning(value interface{}, columns ...string) IJournalEntryORMDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j journalEntryORMDo) Not(conds ...gen.Condition) IJournalEntryORMDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j journalEntryORMDo) Or(conds ...gen.Condition) IJournalEntryORMDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j journalEntryORMDo) Select(conds ...field.Expr) IJournalEntryORMDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j journalEntryORMDo) Where(conds ...gen.Condition) IJournalEntryORMDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j journalEntryORMDo) Order(conds ...field.Expr) IJournalEntryORMDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j journalEntryORMDo) Distinct(cols ...field.Expr) IJournalEntryORMDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j journalEntryORMDo) Omit(cols ...field.Expr) IJournalEntryORMDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j journalEntryORMDo) Join(table schema.Tabler, on ...field.Expr) IJournalEntryORMDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j journalEntryORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJournalEntryORMDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j journalEntryORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IJournalEntryORMDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j journalEntryORMDo) Group(cols ...field.Expr) IJournalEntryORMDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j journalEntryORMDo) Having(conds ...gen.Condition) IJournalEntryORMDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j journalEntryORMDo) Limit(limit int) IJournalEntryORMDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j journalEntryORMDo) Offset(offset int) IJournalEntryORMDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j journalEntryORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJournalEntryORMDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j journalEntryORMDo) Unscoped() IJournalEntryORMDo {
	return j.withDO(j.DO.Unscoped())
}

func (j journalEntryORMDo) Create(values ...*accounting_servicev1.JournalEntryORM) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j journalEntryORMDo) CreateInBatches(values []*accounting_servicev1.JournalEntryORM, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j journalEntryORMDo) Save(values ...*accounting_servicev1.JournalEntryORM) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j journalEntryORMDo) First() (*accounting_servicev1.JournalEntryORM, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.JournalEntryORM), nil
	}
}

func (j journalEntryORMDo) Take() (*accounting_servicev1.JournalEntryORM, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.JournalEntryORM), nil
	}
}

func (j journalEntryORMDo) Last() (*accounting_servicev1.JournalEntryORM, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.JournalEntryORM), nil
	}
}

func (j journalEntryORMDo) Find() ([]*accounting_servicev1.JournalEntryORM, error) {
	result, err := j.DO.Find()
	return result.([]*accounting_servicev1.JournalEntryORM), err
}

func (j journalEntryORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.JournalEntryORM, err error) {
	buf := make([]*accounting_servicev1.JournalEntryORM, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j journalEntryORMDo) FindInBatches(result *[]*accounting_servicev1.JournalEntryORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j journalEntryORMDo) Attrs(attrs ...field.AssignExpr) IJournalEntryORMDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j journalEntryORMDo) Assign(attrs ...field.AssignExpr) IJournalEntryORMDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j journalEntryORMDo) Joins(fields ...field.RelationField) IJournalEntryORMDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j journalEntryORMDo) Preload(fields ...field.RelationField) IJournalEntryORMDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j journalEntryORMDo) FirstOrInit() (*accounting_servicev1.JournalEntryORM, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.JournalEntryORM), nil
	}
}

func (j journalEntryORMDo) FirstOrCreate() (*accounting_servicev1.JournalEntryORM, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.JournalEntryORM), nil
	}
}

func (j journalEntryORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.JournalEntryORM, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j journalEntryORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j journalEntryORMDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j journalEntryORMDo) Delete(models ...*accounting_servicev1.JournalEntryORM) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *journalEntryORMDo) withDO(do gen.Dao) *journalEntryORMDo {
	j.DO = *do.(*gen.DO)
	return j
}
