// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newMergeLinkedAccountTokenORM(db *gorm.DB, opts ...gen.DOOption) mergeLinkedAccountTokenORM {
	_mergeLinkedAccountTokenORM := mergeLinkedAccountTokenORM{}

	_mergeLinkedAccountTokenORM.mergeLinkedAccountTokenORMDo.UseDB(db, opts...)
	_mergeLinkedAccountTokenORM.mergeLinkedAccountTokenORMDo.UseModel(&accounting_servicev1.MergeLinkedAccountTokenORM{})

	tableName := _mergeLinkedAccountTokenORM.mergeLinkedAccountTokenORMDo.TableName()
	_mergeLinkedAccountTokenORM.ALL = field.NewAsterisk(tableName)
	_mergeLinkedAccountTokenORM.AccessToken = field.NewString(tableName, "access_token")
	_mergeLinkedAccountTokenORM.AccountingIntegrationMergeLinkId = field.NewUint64(tableName, "accounting_integration_merge_link_id")
	_mergeLinkedAccountTokenORM.Id = field.NewUint64(tableName, "id")
	_mergeLinkedAccountTokenORM.ItemId = field.NewString(tableName, "item_id")
	_mergeLinkedAccountTokenORM.KeyId = field.NewString(tableName, "key_id")
	_mergeLinkedAccountTokenORM.MergeEndUserOriginId = field.NewString(tableName, "merge_end_user_origin_id")
	_mergeLinkedAccountTokenORM.MergeIntegrationSlug = field.NewString(tableName, "merge_integration_slug")
	_mergeLinkedAccountTokenORM.Version = field.NewString(tableName, "version")

	_mergeLinkedAccountTokenORM.fillFieldMap()

	return _mergeLinkedAccountTokenORM
}

type mergeLinkedAccountTokenORM struct {
	mergeLinkedAccountTokenORMDo

	ALL                              field.Asterisk
	AccessToken                      field.String
	AccountingIntegrationMergeLinkId field.Uint64
	Id                               field.Uint64
	ItemId                           field.String
	KeyId                            field.String
	MergeEndUserOriginId             field.String
	MergeIntegrationSlug             field.String
	Version                          field.String

	fieldMap map[string]field.Expr
}

func (m mergeLinkedAccountTokenORM) Table(newTableName string) *mergeLinkedAccountTokenORM {
	m.mergeLinkedAccountTokenORMDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mergeLinkedAccountTokenORM) As(alias string) *mergeLinkedAccountTokenORM {
	m.mergeLinkedAccountTokenORMDo.DO = *(m.mergeLinkedAccountTokenORMDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mergeLinkedAccountTokenORM) updateTableName(table string) *mergeLinkedAccountTokenORM {
	m.ALL = field.NewAsterisk(table)
	m.AccessToken = field.NewString(table, "access_token")
	m.AccountingIntegrationMergeLinkId = field.NewUint64(table, "accounting_integration_merge_link_id")
	m.Id = field.NewUint64(table, "id")
	m.ItemId = field.NewString(table, "item_id")
	m.KeyId = field.NewString(table, "key_id")
	m.MergeEndUserOriginId = field.NewString(table, "merge_end_user_origin_id")
	m.MergeIntegrationSlug = field.NewString(table, "merge_integration_slug")
	m.Version = field.NewString(table, "version")

	m.fillFieldMap()

	return m
}

func (m *mergeLinkedAccountTokenORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mergeLinkedAccountTokenORM) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["access_token"] = m.AccessToken
	m.fieldMap["accounting_integration_merge_link_id"] = m.AccountingIntegrationMergeLinkId
	m.fieldMap["id"] = m.Id
	m.fieldMap["item_id"] = m.ItemId
	m.fieldMap["key_id"] = m.KeyId
	m.fieldMap["merge_end_user_origin_id"] = m.MergeEndUserOriginId
	m.fieldMap["merge_integration_slug"] = m.MergeIntegrationSlug
	m.fieldMap["version"] = m.Version
}

func (m mergeLinkedAccountTokenORM) clone(db *gorm.DB) mergeLinkedAccountTokenORM {
	m.mergeLinkedAccountTokenORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mergeLinkedAccountTokenORM) replaceDB(db *gorm.DB) mergeLinkedAccountTokenORM {
	m.mergeLinkedAccountTokenORMDo.ReplaceDB(db)
	return m
}

type mergeLinkedAccountTokenORMDo struct{ gen.DO }

type IMergeLinkedAccountTokenORMDo interface {
	gen.SubQuery
	Debug() IMergeLinkedAccountTokenORMDo
	WithContext(ctx context.Context) IMergeLinkedAccountTokenORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMergeLinkedAccountTokenORMDo
	WriteDB() IMergeLinkedAccountTokenORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMergeLinkedAccountTokenORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMergeLinkedAccountTokenORMDo
	Not(conds ...gen.Condition) IMergeLinkedAccountTokenORMDo
	Or(conds ...gen.Condition) IMergeLinkedAccountTokenORMDo
	Select(conds ...field.Expr) IMergeLinkedAccountTokenORMDo
	Where(conds ...gen.Condition) IMergeLinkedAccountTokenORMDo
	Order(conds ...field.Expr) IMergeLinkedAccountTokenORMDo
	Distinct(cols ...field.Expr) IMergeLinkedAccountTokenORMDo
	Omit(cols ...field.Expr) IMergeLinkedAccountTokenORMDo
	Join(table schema.Tabler, on ...field.Expr) IMergeLinkedAccountTokenORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMergeLinkedAccountTokenORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMergeLinkedAccountTokenORMDo
	Group(cols ...field.Expr) IMergeLinkedAccountTokenORMDo
	Having(conds ...gen.Condition) IMergeLinkedAccountTokenORMDo
	Limit(limit int) IMergeLinkedAccountTokenORMDo
	Offset(offset int) IMergeLinkedAccountTokenORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMergeLinkedAccountTokenORMDo
	Unscoped() IMergeLinkedAccountTokenORMDo
	Create(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) error
	CreateInBatches(values []*accounting_servicev1.MergeLinkedAccountTokenORM, batchSize int) error
	Save(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) error
	First() (*accounting_servicev1.MergeLinkedAccountTokenORM, error)
	Take() (*accounting_servicev1.MergeLinkedAccountTokenORM, error)
	Last() (*accounting_servicev1.MergeLinkedAccountTokenORM, error)
	Find() ([]*accounting_servicev1.MergeLinkedAccountTokenORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.MergeLinkedAccountTokenORM, err error)
	FindInBatches(result *[]*accounting_servicev1.MergeLinkedAccountTokenORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.MergeLinkedAccountTokenORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMergeLinkedAccountTokenORMDo
	Assign(attrs ...field.AssignExpr) IMergeLinkedAccountTokenORMDo
	Joins(fields ...field.RelationField) IMergeLinkedAccountTokenORMDo
	Preload(fields ...field.RelationField) IMergeLinkedAccountTokenORMDo
	FirstOrInit() (*accounting_servicev1.MergeLinkedAccountTokenORM, error)
	FirstOrCreate() (*accounting_servicev1.MergeLinkedAccountTokenORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.MergeLinkedAccountTokenORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMergeLinkedAccountTokenORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.MergeLinkedAccountTokenORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.MergeLinkedAccountTokenORM, err error)
	CreateRecord(item accounting_servicev1.MergeLinkedAccountTokenORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.MergeLinkedAccountTokenORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.MergeLinkedAccountTokenORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.MergeLinkedAccountTokenORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.MergeLinkedAccountTokenORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeLinkedAccountTokenORMDo) GetRecordByID(id int) (result accounting_servicev1.MergeLinkedAccountTokenORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_linked_account_tokens ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mergeLinkedAccountTokenORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.MergeLinkedAccountTokenORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_linked_account_tokens ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (m mergeLinkedAccountTokenORMDo) CreateRecord(item accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO merge_linked_account_tokens (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeLinkedAccountTokenORMDo) UpdateRecordByID(id int, item accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE merge_linked_account_tokens SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeLinkedAccountTokenORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM merge_linked_account_tokens ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (m mergeLinkedAccountTokenORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.MergeLinkedAccountTokenORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_linked_account_tokens ORDER BY " + m.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (m mergeLinkedAccountTokenORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM merge_linked_account_tokens ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mergeLinkedAccountTokenORMDo) GetByID(id uint64) (result accounting_servicev1.MergeLinkedAccountTokenORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_linked_account_tokens ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mergeLinkedAccountTokenORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.MergeLinkedAccountTokenORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM merge_linked_account_tokens ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m mergeLinkedAccountTokenORMDo) Debug() IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Debug())
}

func (m mergeLinkedAccountTokenORMDo) WithContext(ctx context.Context) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mergeLinkedAccountTokenORMDo) ReadDB() IMergeLinkedAccountTokenORMDo {
	return m.Clauses(dbresolver.Read)
}

func (m mergeLinkedAccountTokenORMDo) WriteDB() IMergeLinkedAccountTokenORMDo {
	return m.Clauses(dbresolver.Write)
}

func (m mergeLinkedAccountTokenORMDo) Session(config *gorm.Session) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Session(config))
}

func (m mergeLinkedAccountTokenORMDo) Clauses(conds ...clause.Expression) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mergeLinkedAccountTokenORMDo) Returning(value interface{}, columns ...string) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mergeLinkedAccountTokenORMDo) Not(conds ...gen.Condition) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mergeLinkedAccountTokenORMDo) Or(conds ...gen.Condition) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mergeLinkedAccountTokenORMDo) Select(conds ...field.Expr) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mergeLinkedAccountTokenORMDo) Where(conds ...gen.Condition) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mergeLinkedAccountTokenORMDo) Order(conds ...field.Expr) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mergeLinkedAccountTokenORMDo) Distinct(cols ...field.Expr) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mergeLinkedAccountTokenORMDo) Omit(cols ...field.Expr) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mergeLinkedAccountTokenORMDo) Join(table schema.Tabler, on ...field.Expr) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mergeLinkedAccountTokenORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mergeLinkedAccountTokenORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mergeLinkedAccountTokenORMDo) Group(cols ...field.Expr) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mergeLinkedAccountTokenORMDo) Having(conds ...gen.Condition) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mergeLinkedAccountTokenORMDo) Limit(limit int) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mergeLinkedAccountTokenORMDo) Offset(offset int) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mergeLinkedAccountTokenORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mergeLinkedAccountTokenORMDo) Unscoped() IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mergeLinkedAccountTokenORMDo) Create(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mergeLinkedAccountTokenORMDo) CreateInBatches(values []*accounting_servicev1.MergeLinkedAccountTokenORM, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mergeLinkedAccountTokenORMDo) Save(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mergeLinkedAccountTokenORMDo) First() (*accounting_servicev1.MergeLinkedAccountTokenORM, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeLinkedAccountTokenORM), nil
	}
}

func (m mergeLinkedAccountTokenORMDo) Take() (*accounting_servicev1.MergeLinkedAccountTokenORM, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeLinkedAccountTokenORM), nil
	}
}

func (m mergeLinkedAccountTokenORMDo) Last() (*accounting_servicev1.MergeLinkedAccountTokenORM, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeLinkedAccountTokenORM), nil
	}
}

func (m mergeLinkedAccountTokenORMDo) Find() ([]*accounting_servicev1.MergeLinkedAccountTokenORM, error) {
	result, err := m.DO.Find()
	return result.([]*accounting_servicev1.MergeLinkedAccountTokenORM), err
}

func (m mergeLinkedAccountTokenORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.MergeLinkedAccountTokenORM, err error) {
	buf := make([]*accounting_servicev1.MergeLinkedAccountTokenORM, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mergeLinkedAccountTokenORMDo) FindInBatches(result *[]*accounting_servicev1.MergeLinkedAccountTokenORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mergeLinkedAccountTokenORMDo) Attrs(attrs ...field.AssignExpr) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mergeLinkedAccountTokenORMDo) Assign(attrs ...field.AssignExpr) IMergeLinkedAccountTokenORMDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mergeLinkedAccountTokenORMDo) Joins(fields ...field.RelationField) IMergeLinkedAccountTokenORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mergeLinkedAccountTokenORMDo) Preload(fields ...field.RelationField) IMergeLinkedAccountTokenORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mergeLinkedAccountTokenORMDo) FirstOrInit() (*accounting_servicev1.MergeLinkedAccountTokenORM, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeLinkedAccountTokenORM), nil
	}
}

func (m mergeLinkedAccountTokenORMDo) FirstOrCreate() (*accounting_servicev1.MergeLinkedAccountTokenORM, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.MergeLinkedAccountTokenORM), nil
	}
}

func (m mergeLinkedAccountTokenORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.MergeLinkedAccountTokenORM, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mergeLinkedAccountTokenORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mergeLinkedAccountTokenORMDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mergeLinkedAccountTokenORMDo) Delete(models ...*accounting_servicev1.MergeLinkedAccountTokenORM) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mergeLinkedAccountTokenORMDo) withDO(do gen.Dao) *mergeLinkedAccountTokenORMDo {
	m.DO = *do.(*gen.DO)
	return m
}
