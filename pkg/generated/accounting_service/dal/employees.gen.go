// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newEmployeeORM(db *gorm.DB, opts ...gen.DOOption) employeeORM {
	_employeeORM := employeeORM{}

	_employeeORM.employeeORMDo.UseDB(db, opts...)
	_employeeORM.employeeORMDo.UseModel(&accounting_servicev1.EmployeeORM{})

	tableName := _employeeORM.employeeORMDo.TableName()
	_employeeORM.ALL = field.NewAsterisk(tableName)
	_employeeORM.ApproverTimeOffId = field.NewUint64(tableName, "approver_time_off_id")
	_employeeORM.Avatar = field.NewString(tableName, "avatar")
	_employeeORM.CompanyId = field.NewString(tableName, "company_id")
	_employeeORM.CreatedAt = field.NewTime(tableName, "created_at")
	_employeeORM.DateOfBirth = field.NewString(tableName, "date_of_birth")
	_employeeORM.DisplayFullName = field.NewString(tableName, "display_full_name")
	_employeeORM.EmployeeId = field.NewUint64(tableName, "employee_id")
	_employeeORM.EmployeeNumber = field.NewString(tableName, "employee_number")
	_employeeORM.EmployeeTimeOffId = field.NewUint64(tableName, "employee_time_off_id")
	_employeeORM.EmployeeUserNameAsSeenInRemoteUi = field.NewString(tableName, "employee_user_name_as_seen_in_remote_ui")
	_employeeORM.EmployeesPreferredName = field.NewString(tableName, "employees_preferred_name")
	_employeeORM.EmploymentStatus = field.NewString(tableName, "employment_status")
	_employeeORM.EmploymentType = field.NewString(tableName, "employment_type")
	_employeeORM.Ethnicity = field.NewString(tableName, "ethnicity")
	_employeeORM.FirstName = field.NewString(tableName, "first_name")
	_employeeORM.Gender = field.NewString(tableName, "gender")
	_employeeORM.HrisLinkedAccountId = field.NewUint64(tableName, "hris_linked_account_id")
	_employeeORM.Id = field.NewUint64(tableName, "id")
	_employeeORM.LastName = field.NewString(tableName, "last_name")
	_employeeORM.MaritalStatus = field.NewString(tableName, "marital_status")
	_employeeORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_employeeORM.MobilePhoneNumber = field.NewString(tableName, "mobile_phone_number")
	_employeeORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_employeeORM.PersonalEmail = field.NewString(tableName, "personal_email")
	_employeeORM.RemoteCreatedAt = field.NewTime(tableName, "remote_created_at")
	_employeeORM.RemoteId = field.NewString(tableName, "remote_id")
	_employeeORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_employeeORM.Ssn = field.NewString(tableName, "ssn")
	_employeeORM.StartDate = field.NewTime(tableName, "start_date")
	_employeeORM.TerminationDate = field.NewTime(tableName, "termination_date")
	_employeeORM.WorkEmail = field.NewString(tableName, "work_email")
	_employeeORM.Group = employeeORMHasOneGroup{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Group", "accounting_servicev1.GroupORM"),
	}

	_employeeORM.HomeLocation = employeeORMHasOneHomeLocation{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("HomeLocation", "accounting_servicev1.LocationAddressORM"),
	}

	_employeeORM.PayTimeOffBalance = employeeORMHasOnePayTimeOffBalance{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PayTimeOffBalance", "accounting_servicev1.EmployeTimeOffBalanceORM"),
	}

	_employeeORM.WorkLocation = employeeORMHasOneWorkLocation{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("WorkLocation", "accounting_servicev1.LocationAddressORM"),
	}

	_employeeORM.BankAccounts = employeeORMHasManyBankAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BankAccounts", "accounting_servicev1.BankInfoORM"),
	}

	_employeeORM.Benefits = employeeORMHasManyBenefits{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Benefits", "accounting_servicev1.EmployeeBenefitsORM"),
	}

	_employeeORM.Dependents = employeeORMHasManyDependents{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Dependents", "accounting_servicev1.DependentsORM"),
		HomeLocation: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Dependents.HomeLocation", "accounting_servicev1.LocationAddressORM"),
		},
	}

	_employeeORM.Employments = employeeORMHasManyEmployments{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Employments", "accounting_servicev1.EmployeeJobPositionAtCompanyORM"),
	}

	_employeeORM.PayrollRuns = employeeORMHasManyPayrollRuns{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PayrollRuns", "accounting_servicev1.EmployeePayrollRunORM"),
		Deductions: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("PayrollRuns.Deductions", "accounting_servicev1.DeductionORM"),
		},
		Earnings: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("PayrollRuns.Earnings", "accounting_servicev1.EarningORM"),
		},
		Taxes: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("PayrollRuns.Taxes", "accounting_servicev1.TaxORM"),
		},
	}

	_employeeORM.Manager = employeeORMBelongsToManager{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Manager", "accounting_servicev1.EmployeeORM"),
		Manager: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Manager.Manager", "accounting_servicev1.EmployeeORM"),
		},
		Group: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Manager.Group", "accounting_servicev1.GroupORM"),
		},
		HomeLocation: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Manager.HomeLocation", "accounting_servicev1.LocationAddressORM"),
		},
		PayTimeOffBalance: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Manager.PayTimeOffBalance", "accounting_servicev1.EmployeTimeOffBalanceORM"),
		},
		WorkLocation: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Manager.WorkLocation", "accounting_servicev1.LocationAddressORM"),
		},
		BankAccounts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Manager.BankAccounts", "accounting_servicev1.BankInfoORM"),
		},
		Benefits: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Manager.Benefits", "accounting_servicev1.EmployeeBenefitsORM"),
		},
		Dependents: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Manager.Dependents", "accounting_servicev1.DependentsORM"),
		},
		Employments: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Manager.Employments", "accounting_servicev1.EmployeeJobPositionAtCompanyORM"),
		},
		PayrollRuns: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Manager.PayrollRuns", "accounting_servicev1.EmployeePayrollRunORM"),
		},
	}

	_employeeORM.fillFieldMap()

	return _employeeORM
}

type employeeORM struct {
	employeeORMDo

	ALL                              field.Asterisk
	ApproverTimeOffId                field.Uint64
	Avatar                           field.String
	CompanyId                        field.String
	CreatedAt                        field.Time
	DateOfBirth                      field.String
	DisplayFullName                  field.String
	EmployeeId                       field.Uint64
	EmployeeNumber                   field.String
	EmployeeTimeOffId                field.Uint64
	EmployeeUserNameAsSeenInRemoteUi field.String
	EmployeesPreferredName           field.String
	EmploymentStatus                 field.String
	EmploymentType                   field.String
	Ethnicity                        field.String
	FirstName                        field.String
	Gender                           field.String
	HrisLinkedAccountId              field.Uint64
	Id                               field.Uint64
	LastName                         field.String
	MaritalStatus                    field.String
	MergeAccountId                   field.String
	MobilePhoneNumber                field.String
	ModifiedAt                       field.Time
	PersonalEmail                    field.String
	RemoteCreatedAt                  field.Time
	RemoteId                         field.String
	RemoteWasDeleted                 field.Bool
	Ssn                              field.String
	StartDate                        field.Time
	TerminationDate                  field.Time
	WorkEmail                        field.String
	Group                            employeeORMHasOneGroup

	HomeLocation employeeORMHasOneHomeLocation

	PayTimeOffBalance employeeORMHasOnePayTimeOffBalance

	WorkLocation employeeORMHasOneWorkLocation

	BankAccounts employeeORMHasManyBankAccounts

	Benefits employeeORMHasManyBenefits

	Dependents employeeORMHasManyDependents

	Employments employeeORMHasManyEmployments

	PayrollRuns employeeORMHasManyPayrollRuns

	Manager employeeORMBelongsToManager

	fieldMap map[string]field.Expr
}

func (e employeeORM) Table(newTableName string) *employeeORM {
	e.employeeORMDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e employeeORM) As(alias string) *employeeORM {
	e.employeeORMDo.DO = *(e.employeeORMDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *employeeORM) updateTableName(table string) *employeeORM {
	e.ALL = field.NewAsterisk(table)
	e.ApproverTimeOffId = field.NewUint64(table, "approver_time_off_id")
	e.Avatar = field.NewString(table, "avatar")
	e.CompanyId = field.NewString(table, "company_id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.DateOfBirth = field.NewString(table, "date_of_birth")
	e.DisplayFullName = field.NewString(table, "display_full_name")
	e.EmployeeId = field.NewUint64(table, "employee_id")
	e.EmployeeNumber = field.NewString(table, "employee_number")
	e.EmployeeTimeOffId = field.NewUint64(table, "employee_time_off_id")
	e.EmployeeUserNameAsSeenInRemoteUi = field.NewString(table, "employee_user_name_as_seen_in_remote_ui")
	e.EmployeesPreferredName = field.NewString(table, "employees_preferred_name")
	e.EmploymentStatus = field.NewString(table, "employment_status")
	e.EmploymentType = field.NewString(table, "employment_type")
	e.Ethnicity = field.NewString(table, "ethnicity")
	e.FirstName = field.NewString(table, "first_name")
	e.Gender = field.NewString(table, "gender")
	e.HrisLinkedAccountId = field.NewUint64(table, "hris_linked_account_id")
	e.Id = field.NewUint64(table, "id")
	e.LastName = field.NewString(table, "last_name")
	e.MaritalStatus = field.NewString(table, "marital_status")
	e.MergeAccountId = field.NewString(table, "merge_account_id")
	e.MobilePhoneNumber = field.NewString(table, "mobile_phone_number")
	e.ModifiedAt = field.NewTime(table, "modified_at")
	e.PersonalEmail = field.NewString(table, "personal_email")
	e.RemoteCreatedAt = field.NewTime(table, "remote_created_at")
	e.RemoteId = field.NewString(table, "remote_id")
	e.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	e.Ssn = field.NewString(table, "ssn")
	e.StartDate = field.NewTime(table, "start_date")
	e.TerminationDate = field.NewTime(table, "termination_date")
	e.WorkEmail = field.NewString(table, "work_email")

	e.fillFieldMap()

	return e
}

func (e *employeeORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *employeeORM) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 41)
	e.fieldMap["approver_time_off_id"] = e.ApproverTimeOffId
	e.fieldMap["avatar"] = e.Avatar
	e.fieldMap["company_id"] = e.CompanyId
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["date_of_birth"] = e.DateOfBirth
	e.fieldMap["display_full_name"] = e.DisplayFullName
	e.fieldMap["employee_id"] = e.EmployeeId
	e.fieldMap["employee_number"] = e.EmployeeNumber
	e.fieldMap["employee_time_off_id"] = e.EmployeeTimeOffId
	e.fieldMap["employee_user_name_as_seen_in_remote_ui"] = e.EmployeeUserNameAsSeenInRemoteUi
	e.fieldMap["employees_preferred_name"] = e.EmployeesPreferredName
	e.fieldMap["employment_status"] = e.EmploymentStatus
	e.fieldMap["employment_type"] = e.EmploymentType
	e.fieldMap["ethnicity"] = e.Ethnicity
	e.fieldMap["first_name"] = e.FirstName
	e.fieldMap["gender"] = e.Gender
	e.fieldMap["hris_linked_account_id"] = e.HrisLinkedAccountId
	e.fieldMap["id"] = e.Id
	e.fieldMap["last_name"] = e.LastName
	e.fieldMap["marital_status"] = e.MaritalStatus
	e.fieldMap["merge_account_id"] = e.MergeAccountId
	e.fieldMap["mobile_phone_number"] = e.MobilePhoneNumber
	e.fieldMap["modified_at"] = e.ModifiedAt
	e.fieldMap["personal_email"] = e.PersonalEmail
	e.fieldMap["remote_created_at"] = e.RemoteCreatedAt
	e.fieldMap["remote_id"] = e.RemoteId
	e.fieldMap["remote_was_deleted"] = e.RemoteWasDeleted
	e.fieldMap["ssn"] = e.Ssn
	e.fieldMap["start_date"] = e.StartDate
	e.fieldMap["termination_date"] = e.TerminationDate
	e.fieldMap["work_email"] = e.WorkEmail

}

func (e employeeORM) clone(db *gorm.DB) employeeORM {
	e.employeeORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e employeeORM) replaceDB(db *gorm.DB) employeeORM {
	e.employeeORMDo.ReplaceDB(db)
	return e
}

type employeeORMHasOneGroup struct {
	db *gorm.DB

	field.RelationField
}

func (a employeeORMHasOneGroup) Where(conds ...field.Expr) *employeeORMHasOneGroup {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeeORMHasOneGroup) WithContext(ctx context.Context) *employeeORMHasOneGroup {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeeORMHasOneGroup) Session(session *gorm.Session) *employeeORMHasOneGroup {
	a.db = a.db.Session(session)
	return &a
}

func (a employeeORMHasOneGroup) Model(m *accounting_servicev1.EmployeeORM) *employeeORMHasOneGroupTx {
	return &employeeORMHasOneGroupTx{a.db.Model(m).Association(a.Name())}
}

type employeeORMHasOneGroupTx struct{ tx *gorm.Association }

func (a employeeORMHasOneGroupTx) Find() (result *accounting_servicev1.GroupORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeeORMHasOneGroupTx) Append(values ...*accounting_servicev1.GroupORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeeORMHasOneGroupTx) Replace(values ...*accounting_servicev1.GroupORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeeORMHasOneGroupTx) Delete(values ...*accounting_servicev1.GroupORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeeORMHasOneGroupTx) Clear() error {
	return a.tx.Clear()
}

func (a employeeORMHasOneGroupTx) Count() int64 {
	return a.tx.Count()
}

type employeeORMHasOneHomeLocation struct {
	db *gorm.DB

	field.RelationField
}

func (a employeeORMHasOneHomeLocation) Where(conds ...field.Expr) *employeeORMHasOneHomeLocation {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeeORMHasOneHomeLocation) WithContext(ctx context.Context) *employeeORMHasOneHomeLocation {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeeORMHasOneHomeLocation) Session(session *gorm.Session) *employeeORMHasOneHomeLocation {
	a.db = a.db.Session(session)
	return &a
}

func (a employeeORMHasOneHomeLocation) Model(m *accounting_servicev1.EmployeeORM) *employeeORMHasOneHomeLocationTx {
	return &employeeORMHasOneHomeLocationTx{a.db.Model(m).Association(a.Name())}
}

type employeeORMHasOneHomeLocationTx struct{ tx *gorm.Association }

func (a employeeORMHasOneHomeLocationTx) Find() (result *accounting_servicev1.LocationAddressORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeeORMHasOneHomeLocationTx) Append(values ...*accounting_servicev1.LocationAddressORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeeORMHasOneHomeLocationTx) Replace(values ...*accounting_servicev1.LocationAddressORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeeORMHasOneHomeLocationTx) Delete(values ...*accounting_servicev1.LocationAddressORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeeORMHasOneHomeLocationTx) Clear() error {
	return a.tx.Clear()
}

func (a employeeORMHasOneHomeLocationTx) Count() int64 {
	return a.tx.Count()
}

type employeeORMHasOnePayTimeOffBalance struct {
	db *gorm.DB

	field.RelationField
}

func (a employeeORMHasOnePayTimeOffBalance) Where(conds ...field.Expr) *employeeORMHasOnePayTimeOffBalance {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeeORMHasOnePayTimeOffBalance) WithContext(ctx context.Context) *employeeORMHasOnePayTimeOffBalance {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeeORMHasOnePayTimeOffBalance) Session(session *gorm.Session) *employeeORMHasOnePayTimeOffBalance {
	a.db = a.db.Session(session)
	return &a
}

func (a employeeORMHasOnePayTimeOffBalance) Model(m *accounting_servicev1.EmployeeORM) *employeeORMHasOnePayTimeOffBalanceTx {
	return &employeeORMHasOnePayTimeOffBalanceTx{a.db.Model(m).Association(a.Name())}
}

type employeeORMHasOnePayTimeOffBalanceTx struct{ tx *gorm.Association }

func (a employeeORMHasOnePayTimeOffBalanceTx) Find() (result *accounting_servicev1.EmployeTimeOffBalanceORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeeORMHasOnePayTimeOffBalanceTx) Append(values ...*accounting_servicev1.EmployeTimeOffBalanceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeeORMHasOnePayTimeOffBalanceTx) Replace(values ...*accounting_servicev1.EmployeTimeOffBalanceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeeORMHasOnePayTimeOffBalanceTx) Delete(values ...*accounting_servicev1.EmployeTimeOffBalanceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeeORMHasOnePayTimeOffBalanceTx) Clear() error {
	return a.tx.Clear()
}

func (a employeeORMHasOnePayTimeOffBalanceTx) Count() int64 {
	return a.tx.Count()
}

type employeeORMHasOneWorkLocation struct {
	db *gorm.DB

	field.RelationField
}

func (a employeeORMHasOneWorkLocation) Where(conds ...field.Expr) *employeeORMHasOneWorkLocation {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeeORMHasOneWorkLocation) WithContext(ctx context.Context) *employeeORMHasOneWorkLocation {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeeORMHasOneWorkLocation) Session(session *gorm.Session) *employeeORMHasOneWorkLocation {
	a.db = a.db.Session(session)
	return &a
}

func (a employeeORMHasOneWorkLocation) Model(m *accounting_servicev1.EmployeeORM) *employeeORMHasOneWorkLocationTx {
	return &employeeORMHasOneWorkLocationTx{a.db.Model(m).Association(a.Name())}
}

type employeeORMHasOneWorkLocationTx struct{ tx *gorm.Association }

func (a employeeORMHasOneWorkLocationTx) Find() (result *accounting_servicev1.LocationAddressORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeeORMHasOneWorkLocationTx) Append(values ...*accounting_servicev1.LocationAddressORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeeORMHasOneWorkLocationTx) Replace(values ...*accounting_servicev1.LocationAddressORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeeORMHasOneWorkLocationTx) Delete(values ...*accounting_servicev1.LocationAddressORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeeORMHasOneWorkLocationTx) Clear() error {
	return a.tx.Clear()
}

func (a employeeORMHasOneWorkLocationTx) Count() int64 {
	return a.tx.Count()
}

type employeeORMHasManyBankAccounts struct {
	db *gorm.DB

	field.RelationField
}

func (a employeeORMHasManyBankAccounts) Where(conds ...field.Expr) *employeeORMHasManyBankAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeeORMHasManyBankAccounts) WithContext(ctx context.Context) *employeeORMHasManyBankAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeeORMHasManyBankAccounts) Session(session *gorm.Session) *employeeORMHasManyBankAccounts {
	a.db = a.db.Session(session)
	return &a
}

func (a employeeORMHasManyBankAccounts) Model(m *accounting_servicev1.EmployeeORM) *employeeORMHasManyBankAccountsTx {
	return &employeeORMHasManyBankAccountsTx{a.db.Model(m).Association(a.Name())}
}

type employeeORMHasManyBankAccountsTx struct{ tx *gorm.Association }

func (a employeeORMHasManyBankAccountsTx) Find() (result []*accounting_servicev1.BankInfoORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeeORMHasManyBankAccountsTx) Append(values ...*accounting_servicev1.BankInfoORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeeORMHasManyBankAccountsTx) Replace(values ...*accounting_servicev1.BankInfoORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeeORMHasManyBankAccountsTx) Delete(values ...*accounting_servicev1.BankInfoORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeeORMHasManyBankAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a employeeORMHasManyBankAccountsTx) Count() int64 {
	return a.tx.Count()
}

type employeeORMHasManyBenefits struct {
	db *gorm.DB

	field.RelationField
}

func (a employeeORMHasManyBenefits) Where(conds ...field.Expr) *employeeORMHasManyBenefits {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeeORMHasManyBenefits) WithContext(ctx context.Context) *employeeORMHasManyBenefits {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeeORMHasManyBenefits) Session(session *gorm.Session) *employeeORMHasManyBenefits {
	a.db = a.db.Session(session)
	return &a
}

func (a employeeORMHasManyBenefits) Model(m *accounting_servicev1.EmployeeORM) *employeeORMHasManyBenefitsTx {
	return &employeeORMHasManyBenefitsTx{a.db.Model(m).Association(a.Name())}
}

type employeeORMHasManyBenefitsTx struct{ tx *gorm.Association }

func (a employeeORMHasManyBenefitsTx) Find() (result []*accounting_servicev1.EmployeeBenefitsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeeORMHasManyBenefitsTx) Append(values ...*accounting_servicev1.EmployeeBenefitsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeeORMHasManyBenefitsTx) Replace(values ...*accounting_servicev1.EmployeeBenefitsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeeORMHasManyBenefitsTx) Delete(values ...*accounting_servicev1.EmployeeBenefitsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeeORMHasManyBenefitsTx) Clear() error {
	return a.tx.Clear()
}

func (a employeeORMHasManyBenefitsTx) Count() int64 {
	return a.tx.Count()
}

type employeeORMHasManyDependents struct {
	db *gorm.DB

	field.RelationField

	HomeLocation struct {
		field.RelationField
	}
}

func (a employeeORMHasManyDependents) Where(conds ...field.Expr) *employeeORMHasManyDependents {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeeORMHasManyDependents) WithContext(ctx context.Context) *employeeORMHasManyDependents {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeeORMHasManyDependents) Session(session *gorm.Session) *employeeORMHasManyDependents {
	a.db = a.db.Session(session)
	return &a
}

func (a employeeORMHasManyDependents) Model(m *accounting_servicev1.EmployeeORM) *employeeORMHasManyDependentsTx {
	return &employeeORMHasManyDependentsTx{a.db.Model(m).Association(a.Name())}
}

type employeeORMHasManyDependentsTx struct{ tx *gorm.Association }

func (a employeeORMHasManyDependentsTx) Find() (result []*accounting_servicev1.DependentsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeeORMHasManyDependentsTx) Append(values ...*accounting_servicev1.DependentsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeeORMHasManyDependentsTx) Replace(values ...*accounting_servicev1.DependentsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeeORMHasManyDependentsTx) Delete(values ...*accounting_servicev1.DependentsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeeORMHasManyDependentsTx) Clear() error {
	return a.tx.Clear()
}

func (a employeeORMHasManyDependentsTx) Count() int64 {
	return a.tx.Count()
}

type employeeORMHasManyEmployments struct {
	db *gorm.DB

	field.RelationField
}

func (a employeeORMHasManyEmployments) Where(conds ...field.Expr) *employeeORMHasManyEmployments {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeeORMHasManyEmployments) WithContext(ctx context.Context) *employeeORMHasManyEmployments {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeeORMHasManyEmployments) Session(session *gorm.Session) *employeeORMHasManyEmployments {
	a.db = a.db.Session(session)
	return &a
}

func (a employeeORMHasManyEmployments) Model(m *accounting_servicev1.EmployeeORM) *employeeORMHasManyEmploymentsTx {
	return &employeeORMHasManyEmploymentsTx{a.db.Model(m).Association(a.Name())}
}

type employeeORMHasManyEmploymentsTx struct{ tx *gorm.Association }

func (a employeeORMHasManyEmploymentsTx) Find() (result []*accounting_servicev1.EmployeeJobPositionAtCompanyORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeeORMHasManyEmploymentsTx) Append(values ...*accounting_servicev1.EmployeeJobPositionAtCompanyORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeeORMHasManyEmploymentsTx) Replace(values ...*accounting_servicev1.EmployeeJobPositionAtCompanyORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeeORMHasManyEmploymentsTx) Delete(values ...*accounting_servicev1.EmployeeJobPositionAtCompanyORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeeORMHasManyEmploymentsTx) Clear() error {
	return a.tx.Clear()
}

func (a employeeORMHasManyEmploymentsTx) Count() int64 {
	return a.tx.Count()
}

type employeeORMHasManyPayrollRuns struct {
	db *gorm.DB

	field.RelationField

	Deductions struct {
		field.RelationField
	}
	Earnings struct {
		field.RelationField
	}
	Taxes struct {
		field.RelationField
	}
}

func (a employeeORMHasManyPayrollRuns) Where(conds ...field.Expr) *employeeORMHasManyPayrollRuns {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeeORMHasManyPayrollRuns) WithContext(ctx context.Context) *employeeORMHasManyPayrollRuns {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeeORMHasManyPayrollRuns) Session(session *gorm.Session) *employeeORMHasManyPayrollRuns {
	a.db = a.db.Session(session)
	return &a
}

func (a employeeORMHasManyPayrollRuns) Model(m *accounting_servicev1.EmployeeORM) *employeeORMHasManyPayrollRunsTx {
	return &employeeORMHasManyPayrollRunsTx{a.db.Model(m).Association(a.Name())}
}

type employeeORMHasManyPayrollRunsTx struct{ tx *gorm.Association }

func (a employeeORMHasManyPayrollRunsTx) Find() (result []*accounting_servicev1.EmployeePayrollRunORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeeORMHasManyPayrollRunsTx) Append(values ...*accounting_servicev1.EmployeePayrollRunORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeeORMHasManyPayrollRunsTx) Replace(values ...*accounting_servicev1.EmployeePayrollRunORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeeORMHasManyPayrollRunsTx) Delete(values ...*accounting_servicev1.EmployeePayrollRunORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeeORMHasManyPayrollRunsTx) Clear() error {
	return a.tx.Clear()
}

func (a employeeORMHasManyPayrollRunsTx) Count() int64 {
	return a.tx.Count()
}

type employeeORMBelongsToManager struct {
	db *gorm.DB

	field.RelationField

	Manager struct {
		field.RelationField
	}
	Group struct {
		field.RelationField
	}
	HomeLocation struct {
		field.RelationField
	}
	PayTimeOffBalance struct {
		field.RelationField
	}
	WorkLocation struct {
		field.RelationField
	}
	BankAccounts struct {
		field.RelationField
	}
	Benefits struct {
		field.RelationField
	}
	Dependents struct {
		field.RelationField
	}
	Employments struct {
		field.RelationField
	}
	PayrollRuns struct {
		field.RelationField
	}
}

func (a employeeORMBelongsToManager) Where(conds ...field.Expr) *employeeORMBelongsToManager {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a employeeORMBelongsToManager) WithContext(ctx context.Context) *employeeORMBelongsToManager {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a employeeORMBelongsToManager) Session(session *gorm.Session) *employeeORMBelongsToManager {
	a.db = a.db.Session(session)
	return &a
}

func (a employeeORMBelongsToManager) Model(m *accounting_servicev1.EmployeeORM) *employeeORMBelongsToManagerTx {
	return &employeeORMBelongsToManagerTx{a.db.Model(m).Association(a.Name())}
}

type employeeORMBelongsToManagerTx struct{ tx *gorm.Association }

func (a employeeORMBelongsToManagerTx) Find() (result *accounting_servicev1.EmployeeORM, err error) {
	return result, a.tx.Find(&result)
}

func (a employeeORMBelongsToManagerTx) Append(values ...*accounting_servicev1.EmployeeORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a employeeORMBelongsToManagerTx) Replace(values ...*accounting_servicev1.EmployeeORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a employeeORMBelongsToManagerTx) Delete(values ...*accounting_servicev1.EmployeeORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a employeeORMBelongsToManagerTx) Clear() error {
	return a.tx.Clear()
}

func (a employeeORMBelongsToManagerTx) Count() int64 {
	return a.tx.Count()
}

type employeeORMDo struct{ gen.DO }

type IEmployeeORMDo interface {
	gen.SubQuery
	Debug() IEmployeeORMDo
	WithContext(ctx context.Context) IEmployeeORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmployeeORMDo
	WriteDB() IEmployeeORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmployeeORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmployeeORMDo
	Not(conds ...gen.Condition) IEmployeeORMDo
	Or(conds ...gen.Condition) IEmployeeORMDo
	Select(conds ...field.Expr) IEmployeeORMDo
	Where(conds ...gen.Condition) IEmployeeORMDo
	Order(conds ...field.Expr) IEmployeeORMDo
	Distinct(cols ...field.Expr) IEmployeeORMDo
	Omit(cols ...field.Expr) IEmployeeORMDo
	Join(table schema.Tabler, on ...field.Expr) IEmployeeORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmployeeORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmployeeORMDo
	Group(cols ...field.Expr) IEmployeeORMDo
	Having(conds ...gen.Condition) IEmployeeORMDo
	Limit(limit int) IEmployeeORMDo
	Offset(offset int) IEmployeeORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployeeORMDo
	Unscoped() IEmployeeORMDo
	Create(values ...*accounting_servicev1.EmployeeORM) error
	CreateInBatches(values []*accounting_servicev1.EmployeeORM, batchSize int) error
	Save(values ...*accounting_servicev1.EmployeeORM) error
	First() (*accounting_servicev1.EmployeeORM, error)
	Take() (*accounting_servicev1.EmployeeORM, error)
	Last() (*accounting_servicev1.EmployeeORM, error)
	Find() ([]*accounting_servicev1.EmployeeORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.EmployeeORM, err error)
	FindInBatches(result *[]*accounting_servicev1.EmployeeORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.EmployeeORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmployeeORMDo
	Assign(attrs ...field.AssignExpr) IEmployeeORMDo
	Joins(fields ...field.RelationField) IEmployeeORMDo
	Preload(fields ...field.RelationField) IEmployeeORMDo
	FirstOrInit() (*accounting_servicev1.EmployeeORM, error)
	FirstOrCreate() (*accounting_servicev1.EmployeeORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.EmployeeORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmployeeORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.EmployeeORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.EmployeeORM, err error)
	CreateRecord(item accounting_servicev1.EmployeeORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.EmployeeORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.EmployeeORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.EmployeeORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.EmployeeORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeeORMDo) GetRecordByID(id int) (result accounting_servicev1.EmployeeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employees ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e employeeORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.EmployeeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employees ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (e employeeORMDo) CreateRecord(item accounting_servicev1.EmployeeORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO employees (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeeORMDo) UpdateRecordByID(id int, item accounting_servicev1.EmployeeORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE employees SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeeORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM employees ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (e employeeORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.EmployeeORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employees ORDER BY " + e.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (e employeeORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM employees ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e employeeORMDo) GetByID(id uint64) (result accounting_servicev1.EmployeeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employees ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e employeeORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.EmployeeORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM employees ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e employeeORMDo) Debug() IEmployeeORMDo {
	return e.withDO(e.DO.Debug())
}

func (e employeeORMDo) WithContext(ctx context.Context) IEmployeeORMDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e employeeORMDo) ReadDB() IEmployeeORMDo {
	return e.Clauses(dbresolver.Read)
}

func (e employeeORMDo) WriteDB() IEmployeeORMDo {
	return e.Clauses(dbresolver.Write)
}

func (e employeeORMDo) Session(config *gorm.Session) IEmployeeORMDo {
	return e.withDO(e.DO.Session(config))
}

func (e employeeORMDo) Clauses(conds ...clause.Expression) IEmployeeORMDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e employeeORMDo) Returning(value interface{}, columns ...string) IEmployeeORMDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e employeeORMDo) Not(conds ...gen.Condition) IEmployeeORMDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e employeeORMDo) Or(conds ...gen.Condition) IEmployeeORMDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e employeeORMDo) Select(conds ...field.Expr) IEmployeeORMDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e employeeORMDo) Where(conds ...gen.Condition) IEmployeeORMDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e employeeORMDo) Order(conds ...field.Expr) IEmployeeORMDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e employeeORMDo) Distinct(cols ...field.Expr) IEmployeeORMDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e employeeORMDo) Omit(cols ...field.Expr) IEmployeeORMDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e employeeORMDo) Join(table schema.Tabler, on ...field.Expr) IEmployeeORMDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e employeeORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmployeeORMDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e employeeORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmployeeORMDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e employeeORMDo) Group(cols ...field.Expr) IEmployeeORMDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e employeeORMDo) Having(conds ...gen.Condition) IEmployeeORMDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e employeeORMDo) Limit(limit int) IEmployeeORMDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e employeeORMDo) Offset(offset int) IEmployeeORMDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e employeeORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployeeORMDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e employeeORMDo) Unscoped() IEmployeeORMDo {
	return e.withDO(e.DO.Unscoped())
}

func (e employeeORMDo) Create(values ...*accounting_servicev1.EmployeeORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e employeeORMDo) CreateInBatches(values []*accounting_servicev1.EmployeeORM, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e employeeORMDo) Save(values ...*accounting_servicev1.EmployeeORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e employeeORMDo) First() (*accounting_servicev1.EmployeeORM, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeeORM), nil
	}
}

func (e employeeORMDo) Take() (*accounting_servicev1.EmployeeORM, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeeORM), nil
	}
}

func (e employeeORMDo) Last() (*accounting_servicev1.EmployeeORM, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeeORM), nil
	}
}

func (e employeeORMDo) Find() ([]*accounting_servicev1.EmployeeORM, error) {
	result, err := e.DO.Find()
	return result.([]*accounting_servicev1.EmployeeORM), err
}

func (e employeeORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.EmployeeORM, err error) {
	buf := make([]*accounting_servicev1.EmployeeORM, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e employeeORMDo) FindInBatches(result *[]*accounting_servicev1.EmployeeORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e employeeORMDo) Attrs(attrs ...field.AssignExpr) IEmployeeORMDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e employeeORMDo) Assign(attrs ...field.AssignExpr) IEmployeeORMDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e employeeORMDo) Joins(fields ...field.RelationField) IEmployeeORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e employeeORMDo) Preload(fields ...field.RelationField) IEmployeeORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e employeeORMDo) FirstOrInit() (*accounting_servicev1.EmployeeORM, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeeORM), nil
	}
}

func (e employeeORMDo) FirstOrCreate() (*accounting_servicev1.EmployeeORM, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.EmployeeORM), nil
	}
}

func (e employeeORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.EmployeeORM, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e employeeORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e employeeORMDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e employeeORMDo) Delete(models ...*accounting_servicev1.EmployeeORM) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *employeeORMDo) withDO(do gen.Dao) *employeeORMDo {
	e.DO = *do.(*gen.DO)
	return e
}
