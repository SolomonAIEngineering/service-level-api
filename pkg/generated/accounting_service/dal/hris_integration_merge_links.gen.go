// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newHrisIntegrationMergeLinkORM(db *gorm.DB, opts ...gen.DOOption) hrisIntegrationMergeLinkORM {
	_hrisIntegrationMergeLinkORM := hrisIntegrationMergeLinkORM{}

	_hrisIntegrationMergeLinkORM.hrisIntegrationMergeLinkORMDo.UseDB(db, opts...)
	_hrisIntegrationMergeLinkORM.hrisIntegrationMergeLinkORMDo.UseModel(&accounting_servicev1.HrisIntegrationMergeLinkORM{})

	tableName := _hrisIntegrationMergeLinkORM.hrisIntegrationMergeLinkORMDo.TableName()
	_hrisIntegrationMergeLinkORM.ALL = field.NewAsterisk(tableName)
	_hrisIntegrationMergeLinkORM.Category = field.NewString(tableName, "category")
	_hrisIntegrationMergeLinkORM.EndUserEmailAddress = field.NewString(tableName, "end_user_email_address")
	_hrisIntegrationMergeLinkORM.EndUserOrganizationName = field.NewString(tableName, "end_user_organization_name")
	_hrisIntegrationMergeLinkORM.EndUserOriginId = field.NewString(tableName, "end_user_origin_id")
	_hrisIntegrationMergeLinkORM.Id = field.NewUint64(tableName, "id")
	_hrisIntegrationMergeLinkORM.Integration = field.NewString(tableName, "integration")
	_hrisIntegrationMergeLinkORM.IntegrationImage = field.NewString(tableName, "integration_image")
	_hrisIntegrationMergeLinkORM.IntegrationName = field.NewString(tableName, "integration_name")
	_hrisIntegrationMergeLinkORM.IntegrationSlug = field.NewString(tableName, "integration_slug")
	_hrisIntegrationMergeLinkORM.IntegrationSquareImage = field.NewString(tableName, "integration_square_image")
	_hrisIntegrationMergeLinkORM.IsDuplicate = field.NewBool(tableName, "is_duplicate")
	_hrisIntegrationMergeLinkORM.LastModifiedAt = field.NewTime(tableName, "last_modified_at")
	_hrisIntegrationMergeLinkORM.MergeBusinessProfileId = field.NewUint64(tableName, "merge_business_profile_id")
	_hrisIntegrationMergeLinkORM.MergeLinkedAccountId = field.NewString(tableName, "merge_linked_account_id")
	_hrisIntegrationMergeLinkORM.Status = field.NewString(tableName, "status")
	_hrisIntegrationMergeLinkORM.WebhookListenerUrl = field.NewString(tableName, "webhook_listener_url")
	_hrisIntegrationMergeLinkORM.Account = hrisIntegrationMergeLinkORMHasOneAccount{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Account", "accounting_servicev1.HrisLinkedAccountORM"),
		Profile: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.Profile", "accounting_servicev1.CompanyProfileORM"),
		},
		BenefitPlans: struct {
			field.RelationField
			EmployeeBenefits struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.BenefitPlans", "accounting_servicev1.EmployerBenefitsORM"),
			EmployeeBenefits: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.BenefitPlans.EmployeeBenefits", "accounting_servicev1.EmployeeBenefitsORM"),
			},
		},
		Employees: struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
			Group struct {
				field.RelationField
			}
			HomeLocation struct {
				field.RelationField
			}
			PayTimeOffBalance struct {
				field.RelationField
			}
			WorkLocation struct {
				field.RelationField
			}
			BankAccounts struct {
				field.RelationField
			}
			Benefits struct {
				field.RelationField
			}
			Dependents struct {
				field.RelationField
				HomeLocation struct {
					field.RelationField
				}
			}
			Employments struct {
				field.RelationField
			}
			PayrollRuns struct {
				field.RelationField
				Deductions struct {
					field.RelationField
				}
				Earnings struct {
					field.RelationField
				}
				Taxes struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Account.Employees", "accounting_servicev1.EmployeeORM"),
			Manager: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Employees.Manager", "accounting_servicev1.EmployeeORM"),
			},
			Group: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Employees.Group", "accounting_servicev1.GroupORM"),
			},
			HomeLocation: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Employees.HomeLocation", "accounting_servicev1.LocationAddressORM"),
			},
			PayTimeOffBalance: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Employees.PayTimeOffBalance", "accounting_servicev1.EmployeTimeOffBalanceORM"),
			},
			WorkLocation: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Employees.WorkLocation", "accounting_servicev1.LocationAddressORM"),
			},
			BankAccounts: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Employees.BankAccounts", "accounting_servicev1.BankInfoORM"),
			},
			Benefits: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Employees.Benefits", "accounting_servicev1.EmployeeBenefitsORM"),
			},
			Dependents: struct {
				field.RelationField
				HomeLocation struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.Employees.Dependents", "accounting_servicev1.DependentsORM"),
				HomeLocation: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.Employees.Dependents.HomeLocation", "accounting_servicev1.LocationAddressORM"),
				},
			},
			Employments: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.Employees.Employments", "accounting_servicev1.EmployeeJobPositionAtCompanyORM"),
			},
			PayrollRuns: struct {
				field.RelationField
				Deductions struct {
					field.RelationField
				}
				Earnings struct {
					field.RelationField
				}
				Taxes struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Account.Employees.PayrollRuns", "accounting_servicev1.EmployeePayrollRunORM"),
				Deductions: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.Employees.PayrollRuns.Deductions", "accounting_servicev1.DeductionORM"),
				},
				Earnings: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.Employees.PayrollRuns.Earnings", "accounting_servicev1.EarningORM"),
				},
				Taxes: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Account.Employees.PayrollRuns.Taxes", "accounting_servicev1.TaxORM"),
				},
			},
		},
		PayrollRuns: struct {
			field.RelationField
			PayrollRuns struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Account.PayrollRuns", "accounting_servicev1.EmployerPayrollRunORM"),
			PayrollRuns: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Account.PayrollRuns.PayrollRuns", "accounting_servicev1.EmployeePayrollRunORM"),
			},
		},
	}

	_hrisIntegrationMergeLinkORM.Token = hrisIntegrationMergeLinkORMHasOneToken{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Token", "accounting_servicev1.MergeLinkedAccountTokenORM"),
	}

	_hrisIntegrationMergeLinkORM.fillFieldMap()

	return _hrisIntegrationMergeLinkORM
}

type hrisIntegrationMergeLinkORM struct {
	hrisIntegrationMergeLinkORMDo

	ALL                     field.Asterisk
	Category                field.String
	EndUserEmailAddress     field.String
	EndUserOrganizationName field.String
	EndUserOriginId         field.String
	Id                      field.Uint64
	Integration             field.String
	IntegrationImage        field.String
	IntegrationName         field.String
	IntegrationSlug         field.String
	IntegrationSquareImage  field.String
	IsDuplicate             field.Bool
	LastModifiedAt          field.Time
	MergeBusinessProfileId  field.Uint64
	MergeLinkedAccountId    field.String
	Status                  field.String
	WebhookListenerUrl      field.String
	Account                 hrisIntegrationMergeLinkORMHasOneAccount

	Token hrisIntegrationMergeLinkORMHasOneToken

	fieldMap map[string]field.Expr
}

func (h hrisIntegrationMergeLinkORM) Table(newTableName string) *hrisIntegrationMergeLinkORM {
	h.hrisIntegrationMergeLinkORMDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hrisIntegrationMergeLinkORM) As(alias string) *hrisIntegrationMergeLinkORM {
	h.hrisIntegrationMergeLinkORMDo.DO = *(h.hrisIntegrationMergeLinkORMDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hrisIntegrationMergeLinkORM) updateTableName(table string) *hrisIntegrationMergeLinkORM {
	h.ALL = field.NewAsterisk(table)
	h.Category = field.NewString(table, "category")
	h.EndUserEmailAddress = field.NewString(table, "end_user_email_address")
	h.EndUserOrganizationName = field.NewString(table, "end_user_organization_name")
	h.EndUserOriginId = field.NewString(table, "end_user_origin_id")
	h.Id = field.NewUint64(table, "id")
	h.Integration = field.NewString(table, "integration")
	h.IntegrationImage = field.NewString(table, "integration_image")
	h.IntegrationName = field.NewString(table, "integration_name")
	h.IntegrationSlug = field.NewString(table, "integration_slug")
	h.IntegrationSquareImage = field.NewString(table, "integration_square_image")
	h.IsDuplicate = field.NewBool(table, "is_duplicate")
	h.LastModifiedAt = field.NewTime(table, "last_modified_at")
	h.MergeBusinessProfileId = field.NewUint64(table, "merge_business_profile_id")
	h.MergeLinkedAccountId = field.NewString(table, "merge_linked_account_id")
	h.Status = field.NewString(table, "status")
	h.WebhookListenerUrl = field.NewString(table, "webhook_listener_url")

	h.fillFieldMap()

	return h
}

func (h *hrisIntegrationMergeLinkORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hrisIntegrationMergeLinkORM) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 18)
	h.fieldMap["category"] = h.Category
	h.fieldMap["end_user_email_address"] = h.EndUserEmailAddress
	h.fieldMap["end_user_organization_name"] = h.EndUserOrganizationName
	h.fieldMap["end_user_origin_id"] = h.EndUserOriginId
	h.fieldMap["id"] = h.Id
	h.fieldMap["integration"] = h.Integration
	h.fieldMap["integration_image"] = h.IntegrationImage
	h.fieldMap["integration_name"] = h.IntegrationName
	h.fieldMap["integration_slug"] = h.IntegrationSlug
	h.fieldMap["integration_square_image"] = h.IntegrationSquareImage
	h.fieldMap["is_duplicate"] = h.IsDuplicate
	h.fieldMap["last_modified_at"] = h.LastModifiedAt
	h.fieldMap["merge_business_profile_id"] = h.MergeBusinessProfileId
	h.fieldMap["merge_linked_account_id"] = h.MergeLinkedAccountId
	h.fieldMap["status"] = h.Status
	h.fieldMap["webhook_listener_url"] = h.WebhookListenerUrl

}

func (h hrisIntegrationMergeLinkORM) clone(db *gorm.DB) hrisIntegrationMergeLinkORM {
	h.hrisIntegrationMergeLinkORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hrisIntegrationMergeLinkORM) replaceDB(db *gorm.DB) hrisIntegrationMergeLinkORM {
	h.hrisIntegrationMergeLinkORMDo.ReplaceDB(db)
	return h
}

type hrisIntegrationMergeLinkORMHasOneAccount struct {
	db *gorm.DB

	field.RelationField

	Profile struct {
		field.RelationField
	}
	BenefitPlans struct {
		field.RelationField
		EmployeeBenefits struct {
			field.RelationField
		}
	}
	Employees struct {
		field.RelationField
		Manager struct {
			field.RelationField
		}
		Group struct {
			field.RelationField
		}
		HomeLocation struct {
			field.RelationField
		}
		PayTimeOffBalance struct {
			field.RelationField
		}
		WorkLocation struct {
			field.RelationField
		}
		BankAccounts struct {
			field.RelationField
		}
		Benefits struct {
			field.RelationField
		}
		Dependents struct {
			field.RelationField
			HomeLocation struct {
				field.RelationField
			}
		}
		Employments struct {
			field.RelationField
		}
		PayrollRuns struct {
			field.RelationField
			Deductions struct {
				field.RelationField
			}
			Earnings struct {
				field.RelationField
			}
			Taxes struct {
				field.RelationField
			}
		}
	}
	PayrollRuns struct {
		field.RelationField
		PayrollRuns struct {
			field.RelationField
		}
	}
}

func (a hrisIntegrationMergeLinkORMHasOneAccount) Where(conds ...field.Expr) *hrisIntegrationMergeLinkORMHasOneAccount {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a hrisIntegrationMergeLinkORMHasOneAccount) WithContext(ctx context.Context) *hrisIntegrationMergeLinkORMHasOneAccount {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a hrisIntegrationMergeLinkORMHasOneAccount) Session(session *gorm.Session) *hrisIntegrationMergeLinkORMHasOneAccount {
	a.db = a.db.Session(session)
	return &a
}

func (a hrisIntegrationMergeLinkORMHasOneAccount) Model(m *accounting_servicev1.HrisIntegrationMergeLinkORM) *hrisIntegrationMergeLinkORMHasOneAccountTx {
	return &hrisIntegrationMergeLinkORMHasOneAccountTx{a.db.Model(m).Association(a.Name())}
}

type hrisIntegrationMergeLinkORMHasOneAccountTx struct{ tx *gorm.Association }

func (a hrisIntegrationMergeLinkORMHasOneAccountTx) Find() (result *accounting_servicev1.HrisLinkedAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a hrisIntegrationMergeLinkORMHasOneAccountTx) Append(values ...*accounting_servicev1.HrisLinkedAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a hrisIntegrationMergeLinkORMHasOneAccountTx) Replace(values ...*accounting_servicev1.HrisLinkedAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a hrisIntegrationMergeLinkORMHasOneAccountTx) Delete(values ...*accounting_servicev1.HrisLinkedAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a hrisIntegrationMergeLinkORMHasOneAccountTx) Clear() error {
	return a.tx.Clear()
}

func (a hrisIntegrationMergeLinkORMHasOneAccountTx) Count() int64 {
	return a.tx.Count()
}

type hrisIntegrationMergeLinkORMHasOneToken struct {
	db *gorm.DB

	field.RelationField
}

func (a hrisIntegrationMergeLinkORMHasOneToken) Where(conds ...field.Expr) *hrisIntegrationMergeLinkORMHasOneToken {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a hrisIntegrationMergeLinkORMHasOneToken) WithContext(ctx context.Context) *hrisIntegrationMergeLinkORMHasOneToken {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a hrisIntegrationMergeLinkORMHasOneToken) Session(session *gorm.Session) *hrisIntegrationMergeLinkORMHasOneToken {
	a.db = a.db.Session(session)
	return &a
}

func (a hrisIntegrationMergeLinkORMHasOneToken) Model(m *accounting_servicev1.HrisIntegrationMergeLinkORM) *hrisIntegrationMergeLinkORMHasOneTokenTx {
	return &hrisIntegrationMergeLinkORMHasOneTokenTx{a.db.Model(m).Association(a.Name())}
}

type hrisIntegrationMergeLinkORMHasOneTokenTx struct{ tx *gorm.Association }

func (a hrisIntegrationMergeLinkORMHasOneTokenTx) Find() (result *accounting_servicev1.MergeLinkedAccountTokenORM, err error) {
	return result, a.tx.Find(&result)
}

func (a hrisIntegrationMergeLinkORMHasOneTokenTx) Append(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a hrisIntegrationMergeLinkORMHasOneTokenTx) Replace(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a hrisIntegrationMergeLinkORMHasOneTokenTx) Delete(values ...*accounting_servicev1.MergeLinkedAccountTokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a hrisIntegrationMergeLinkORMHasOneTokenTx) Clear() error {
	return a.tx.Clear()
}

func (a hrisIntegrationMergeLinkORMHasOneTokenTx) Count() int64 {
	return a.tx.Count()
}

type hrisIntegrationMergeLinkORMDo struct{ gen.DO }

type IHrisIntegrationMergeLinkORMDo interface {
	gen.SubQuery
	Debug() IHrisIntegrationMergeLinkORMDo
	WithContext(ctx context.Context) IHrisIntegrationMergeLinkORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHrisIntegrationMergeLinkORMDo
	WriteDB() IHrisIntegrationMergeLinkORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHrisIntegrationMergeLinkORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHrisIntegrationMergeLinkORMDo
	Not(conds ...gen.Condition) IHrisIntegrationMergeLinkORMDo
	Or(conds ...gen.Condition) IHrisIntegrationMergeLinkORMDo
	Select(conds ...field.Expr) IHrisIntegrationMergeLinkORMDo
	Where(conds ...gen.Condition) IHrisIntegrationMergeLinkORMDo
	Order(conds ...field.Expr) IHrisIntegrationMergeLinkORMDo
	Distinct(cols ...field.Expr) IHrisIntegrationMergeLinkORMDo
	Omit(cols ...field.Expr) IHrisIntegrationMergeLinkORMDo
	Join(table schema.Tabler, on ...field.Expr) IHrisIntegrationMergeLinkORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHrisIntegrationMergeLinkORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHrisIntegrationMergeLinkORMDo
	Group(cols ...field.Expr) IHrisIntegrationMergeLinkORMDo
	Having(conds ...gen.Condition) IHrisIntegrationMergeLinkORMDo
	Limit(limit int) IHrisIntegrationMergeLinkORMDo
	Offset(offset int) IHrisIntegrationMergeLinkORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHrisIntegrationMergeLinkORMDo
	Unscoped() IHrisIntegrationMergeLinkORMDo
	Create(values ...*accounting_servicev1.HrisIntegrationMergeLinkORM) error
	CreateInBatches(values []*accounting_servicev1.HrisIntegrationMergeLinkORM, batchSize int) error
	Save(values ...*accounting_servicev1.HrisIntegrationMergeLinkORM) error
	First() (*accounting_servicev1.HrisIntegrationMergeLinkORM, error)
	Take() (*accounting_servicev1.HrisIntegrationMergeLinkORM, error)
	Last() (*accounting_servicev1.HrisIntegrationMergeLinkORM, error)
	Find() ([]*accounting_servicev1.HrisIntegrationMergeLinkORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.HrisIntegrationMergeLinkORM, err error)
	FindInBatches(result *[]*accounting_servicev1.HrisIntegrationMergeLinkORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.HrisIntegrationMergeLinkORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHrisIntegrationMergeLinkORMDo
	Assign(attrs ...field.AssignExpr) IHrisIntegrationMergeLinkORMDo
	Joins(fields ...field.RelationField) IHrisIntegrationMergeLinkORMDo
	Preload(fields ...field.RelationField) IHrisIntegrationMergeLinkORMDo
	FirstOrInit() (*accounting_servicev1.HrisIntegrationMergeLinkORM, error)
	FirstOrCreate() (*accounting_servicev1.HrisIntegrationMergeLinkORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.HrisIntegrationMergeLinkORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHrisIntegrationMergeLinkORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.HrisIntegrationMergeLinkORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.HrisIntegrationMergeLinkORM, err error)
	CreateRecord(item accounting_servicev1.HrisIntegrationMergeLinkORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.HrisIntegrationMergeLinkORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.HrisIntegrationMergeLinkORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.HrisIntegrationMergeLinkORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.HrisIntegrationMergeLinkORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (h hrisIntegrationMergeLinkORMDo) GetRecordByID(id int) (result accounting_servicev1.HrisIntegrationMergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM hris_integration_merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (h hrisIntegrationMergeLinkORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.HrisIntegrationMergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM hris_integration_merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (h hrisIntegrationMergeLinkORMDo) CreateRecord(item accounting_servicev1.HrisIntegrationMergeLinkORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO hris_integration_merge_links (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (h hrisIntegrationMergeLinkORMDo) UpdateRecordByID(id int, item accounting_servicev1.HrisIntegrationMergeLinkORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE hris_integration_merge_links SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (h hrisIntegrationMergeLinkORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM hris_integration_merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (h hrisIntegrationMergeLinkORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.HrisIntegrationMergeLinkORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM hris_integration_merge_links ORDER BY " + h.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (h hrisIntegrationMergeLinkORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM hris_integration_merge_links ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (h hrisIntegrationMergeLinkORMDo) GetByID(id uint64) (result accounting_servicev1.HrisIntegrationMergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM hris_integration_merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (h hrisIntegrationMergeLinkORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.HrisIntegrationMergeLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM hris_integration_merge_links ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (h hrisIntegrationMergeLinkORMDo) Debug() IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Debug())
}

func (h hrisIntegrationMergeLinkORMDo) WithContext(ctx context.Context) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hrisIntegrationMergeLinkORMDo) ReadDB() IHrisIntegrationMergeLinkORMDo {
	return h.Clauses(dbresolver.Read)
}

func (h hrisIntegrationMergeLinkORMDo) WriteDB() IHrisIntegrationMergeLinkORMDo {
	return h.Clauses(dbresolver.Write)
}

func (h hrisIntegrationMergeLinkORMDo) Session(config *gorm.Session) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Session(config))
}

func (h hrisIntegrationMergeLinkORMDo) Clauses(conds ...clause.Expression) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hrisIntegrationMergeLinkORMDo) Returning(value interface{}, columns ...string) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hrisIntegrationMergeLinkORMDo) Not(conds ...gen.Condition) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hrisIntegrationMergeLinkORMDo) Or(conds ...gen.Condition) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hrisIntegrationMergeLinkORMDo) Select(conds ...field.Expr) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hrisIntegrationMergeLinkORMDo) Where(conds ...gen.Condition) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hrisIntegrationMergeLinkORMDo) Order(conds ...field.Expr) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hrisIntegrationMergeLinkORMDo) Distinct(cols ...field.Expr) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hrisIntegrationMergeLinkORMDo) Omit(cols ...field.Expr) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hrisIntegrationMergeLinkORMDo) Join(table schema.Tabler, on ...field.Expr) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hrisIntegrationMergeLinkORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hrisIntegrationMergeLinkORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hrisIntegrationMergeLinkORMDo) Group(cols ...field.Expr) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hrisIntegrationMergeLinkORMDo) Having(conds ...gen.Condition) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hrisIntegrationMergeLinkORMDo) Limit(limit int) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hrisIntegrationMergeLinkORMDo) Offset(offset int) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hrisIntegrationMergeLinkORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hrisIntegrationMergeLinkORMDo) Unscoped() IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hrisIntegrationMergeLinkORMDo) Create(values ...*accounting_servicev1.HrisIntegrationMergeLinkORM) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hrisIntegrationMergeLinkORMDo) CreateInBatches(values []*accounting_servicev1.HrisIntegrationMergeLinkORM, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hrisIntegrationMergeLinkORMDo) Save(values ...*accounting_servicev1.HrisIntegrationMergeLinkORM) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hrisIntegrationMergeLinkORMDo) First() (*accounting_servicev1.HrisIntegrationMergeLinkORM, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.HrisIntegrationMergeLinkORM), nil
	}
}

func (h hrisIntegrationMergeLinkORMDo) Take() (*accounting_servicev1.HrisIntegrationMergeLinkORM, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.HrisIntegrationMergeLinkORM), nil
	}
}

func (h hrisIntegrationMergeLinkORMDo) Last() (*accounting_servicev1.HrisIntegrationMergeLinkORM, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.HrisIntegrationMergeLinkORM), nil
	}
}

func (h hrisIntegrationMergeLinkORMDo) Find() ([]*accounting_servicev1.HrisIntegrationMergeLinkORM, error) {
	result, err := h.DO.Find()
	return result.([]*accounting_servicev1.HrisIntegrationMergeLinkORM), err
}

func (h hrisIntegrationMergeLinkORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.HrisIntegrationMergeLinkORM, err error) {
	buf := make([]*accounting_servicev1.HrisIntegrationMergeLinkORM, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hrisIntegrationMergeLinkORMDo) FindInBatches(result *[]*accounting_servicev1.HrisIntegrationMergeLinkORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hrisIntegrationMergeLinkORMDo) Attrs(attrs ...field.AssignExpr) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hrisIntegrationMergeLinkORMDo) Assign(attrs ...field.AssignExpr) IHrisIntegrationMergeLinkORMDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hrisIntegrationMergeLinkORMDo) Joins(fields ...field.RelationField) IHrisIntegrationMergeLinkORMDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hrisIntegrationMergeLinkORMDo) Preload(fields ...field.RelationField) IHrisIntegrationMergeLinkORMDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hrisIntegrationMergeLinkORMDo) FirstOrInit() (*accounting_servicev1.HrisIntegrationMergeLinkORM, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.HrisIntegrationMergeLinkORM), nil
	}
}

func (h hrisIntegrationMergeLinkORMDo) FirstOrCreate() (*accounting_servicev1.HrisIntegrationMergeLinkORM, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.HrisIntegrationMergeLinkORM), nil
	}
}

func (h hrisIntegrationMergeLinkORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.HrisIntegrationMergeLinkORM, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hrisIntegrationMergeLinkORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hrisIntegrationMergeLinkORMDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hrisIntegrationMergeLinkORMDo) Delete(models ...*accounting_servicev1.HrisIntegrationMergeLinkORM) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hrisIntegrationMergeLinkORMDo) withDO(do gen.Dao) *hrisIntegrationMergeLinkORMDo {
	h.DO = *do.(*gen.DO)
	return h
}
