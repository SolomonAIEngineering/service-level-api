// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newLocationAddressORM(db *gorm.DB, opts ...gen.DOOption) locationAddressORM {
	_locationAddressORM := locationAddressORM{}

	_locationAddressORM.locationAddressORMDo.UseDB(db, opts...)
	_locationAddressORM.locationAddressORMDo.UseModel(&accounting_servicev1.LocationAddressORM{})

	tableName := _locationAddressORM.locationAddressORMDo.TableName()
	_locationAddressORM.ALL = field.NewAsterisk(tableName)
	_locationAddressORM.City = field.NewString(tableName, "city")
	_locationAddressORM.Country = field.NewString(tableName, "country")
	_locationAddressORM.CreatedAt = field.NewTime(tableName, "created_at")
	_locationAddressORM.DependentsId = field.NewUint64(tableName, "dependents_id")
	_locationAddressORM.HomeLocationEmployeeId = field.NewUint64(tableName, "home_location_employee_id")
	_locationAddressORM.Id = field.NewUint64(tableName, "id")
	_locationAddressORM.LocationType = field.NewString(tableName, "location_type")
	_locationAddressORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_locationAddressORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_locationAddressORM.Name = field.NewString(tableName, "name")
	_locationAddressORM.PhoneNumber = field.NewString(tableName, "phone_number")
	_locationAddressORM.RemoteId = field.NewString(tableName, "remote_id")
	_locationAddressORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_locationAddressORM.State = field.NewString(tableName, "state")
	_locationAddressORM.Street_1 = field.NewString(tableName, "street_1")
	_locationAddressORM.Street_2 = field.NewString(tableName, "street_2")
	_locationAddressORM.WorkLocationEmployeeId = field.NewUint64(tableName, "work_location_employee_id")
	_locationAddressORM.ZipCode = field.NewString(tableName, "zip_code")

	_locationAddressORM.fillFieldMap()

	return _locationAddressORM
}

type locationAddressORM struct {
	locationAddressORMDo

	ALL                    field.Asterisk
	City                   field.String
	Country                field.String
	CreatedAt              field.Time
	DependentsId           field.Uint64
	HomeLocationEmployeeId field.Uint64
	Id                     field.Uint64
	LocationType           field.String
	MergeAccountId         field.String
	ModifiedAt             field.Time
	Name                   field.String
	PhoneNumber            field.String
	RemoteId               field.String
	RemoteWasDeleted       field.Bool
	State                  field.String
	Street_1               field.String
	Street_2               field.String
	WorkLocationEmployeeId field.Uint64
	ZipCode                field.String

	fieldMap map[string]field.Expr
}

func (l locationAddressORM) Table(newTableName string) *locationAddressORM {
	l.locationAddressORMDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l locationAddressORM) As(alias string) *locationAddressORM {
	l.locationAddressORMDo.DO = *(l.locationAddressORMDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *locationAddressORM) updateTableName(table string) *locationAddressORM {
	l.ALL = field.NewAsterisk(table)
	l.City = field.NewString(table, "city")
	l.Country = field.NewString(table, "country")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.DependentsId = field.NewUint64(table, "dependents_id")
	l.HomeLocationEmployeeId = field.NewUint64(table, "home_location_employee_id")
	l.Id = field.NewUint64(table, "id")
	l.LocationType = field.NewString(table, "location_type")
	l.MergeAccountId = field.NewString(table, "merge_account_id")
	l.ModifiedAt = field.NewTime(table, "modified_at")
	l.Name = field.NewString(table, "name")
	l.PhoneNumber = field.NewString(table, "phone_number")
	l.RemoteId = field.NewString(table, "remote_id")
	l.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	l.State = field.NewString(table, "state")
	l.Street_1 = field.NewString(table, "street_1")
	l.Street_2 = field.NewString(table, "street_2")
	l.WorkLocationEmployeeId = field.NewUint64(table, "work_location_employee_id")
	l.ZipCode = field.NewString(table, "zip_code")

	l.fillFieldMap()

	return l
}

func (l *locationAddressORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *locationAddressORM) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 18)
	l.fieldMap["city"] = l.City
	l.fieldMap["country"] = l.Country
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["dependents_id"] = l.DependentsId
	l.fieldMap["home_location_employee_id"] = l.HomeLocationEmployeeId
	l.fieldMap["id"] = l.Id
	l.fieldMap["location_type"] = l.LocationType
	l.fieldMap["merge_account_id"] = l.MergeAccountId
	l.fieldMap["modified_at"] = l.ModifiedAt
	l.fieldMap["name"] = l.Name
	l.fieldMap["phone_number"] = l.PhoneNumber
	l.fieldMap["remote_id"] = l.RemoteId
	l.fieldMap["remote_was_deleted"] = l.RemoteWasDeleted
	l.fieldMap["state"] = l.State
	l.fieldMap["street_1"] = l.Street_1
	l.fieldMap["street_2"] = l.Street_2
	l.fieldMap["work_location_employee_id"] = l.WorkLocationEmployeeId
	l.fieldMap["zip_code"] = l.ZipCode
}

func (l locationAddressORM) clone(db *gorm.DB) locationAddressORM {
	l.locationAddressORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l locationAddressORM) replaceDB(db *gorm.DB) locationAddressORM {
	l.locationAddressORMDo.ReplaceDB(db)
	return l
}

type locationAddressORMDo struct{ gen.DO }

type ILocationAddressORMDo interface {
	gen.SubQuery
	Debug() ILocationAddressORMDo
	WithContext(ctx context.Context) ILocationAddressORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILocationAddressORMDo
	WriteDB() ILocationAddressORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILocationAddressORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILocationAddressORMDo
	Not(conds ...gen.Condition) ILocationAddressORMDo
	Or(conds ...gen.Condition) ILocationAddressORMDo
	Select(conds ...field.Expr) ILocationAddressORMDo
	Where(conds ...gen.Condition) ILocationAddressORMDo
	Order(conds ...field.Expr) ILocationAddressORMDo
	Distinct(cols ...field.Expr) ILocationAddressORMDo
	Omit(cols ...field.Expr) ILocationAddressORMDo
	Join(table schema.Tabler, on ...field.Expr) ILocationAddressORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILocationAddressORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILocationAddressORMDo
	Group(cols ...field.Expr) ILocationAddressORMDo
	Having(conds ...gen.Condition) ILocationAddressORMDo
	Limit(limit int) ILocationAddressORMDo
	Offset(offset int) ILocationAddressORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILocationAddressORMDo
	Unscoped() ILocationAddressORMDo
	Create(values ...*accounting_servicev1.LocationAddressORM) error
	CreateInBatches(values []*accounting_servicev1.LocationAddressORM, batchSize int) error
	Save(values ...*accounting_servicev1.LocationAddressORM) error
	First() (*accounting_servicev1.LocationAddressORM, error)
	Take() (*accounting_servicev1.LocationAddressORM, error)
	Last() (*accounting_servicev1.LocationAddressORM, error)
	Find() ([]*accounting_servicev1.LocationAddressORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.LocationAddressORM, err error)
	FindInBatches(result *[]*accounting_servicev1.LocationAddressORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.LocationAddressORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILocationAddressORMDo
	Assign(attrs ...field.AssignExpr) ILocationAddressORMDo
	Joins(fields ...field.RelationField) ILocationAddressORMDo
	Preload(fields ...field.RelationField) ILocationAddressORMDo
	FirstOrInit() (*accounting_servicev1.LocationAddressORM, error)
	FirstOrCreate() (*accounting_servicev1.LocationAddressORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.LocationAddressORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILocationAddressORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.LocationAddressORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.LocationAddressORM, err error)
	CreateRecord(item accounting_servicev1.LocationAddressORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.LocationAddressORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.LocationAddressORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.LocationAddressORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.LocationAddressORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l locationAddressORMDo) GetRecordByID(id int) (result accounting_servicev1.LocationAddressORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM location_addresses ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (l locationAddressORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.LocationAddressORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM location_addresses ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (l locationAddressORMDo) CreateRecord(item accounting_servicev1.LocationAddressORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO location_addresses (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (l locationAddressORMDo) UpdateRecordByID(id int, item accounting_servicev1.LocationAddressORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE location_addresses SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l locationAddressORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM location_addresses ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (l locationAddressORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.LocationAddressORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM location_addresses ORDER BY " + l.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (l locationAddressORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM location_addresses ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l locationAddressORMDo) GetByID(id uint64) (result accounting_servicev1.LocationAddressORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM location_addresses ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (l locationAddressORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.LocationAddressORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM location_addresses ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l locationAddressORMDo) Debug() ILocationAddressORMDo {
	return l.withDO(l.DO.Debug())
}

func (l locationAddressORMDo) WithContext(ctx context.Context) ILocationAddressORMDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l locationAddressORMDo) ReadDB() ILocationAddressORMDo {
	return l.Clauses(dbresolver.Read)
}

func (l locationAddressORMDo) WriteDB() ILocationAddressORMDo {
	return l.Clauses(dbresolver.Write)
}

func (l locationAddressORMDo) Session(config *gorm.Session) ILocationAddressORMDo {
	return l.withDO(l.DO.Session(config))
}

func (l locationAddressORMDo) Clauses(conds ...clause.Expression) ILocationAddressORMDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l locationAddressORMDo) Returning(value interface{}, columns ...string) ILocationAddressORMDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l locationAddressORMDo) Not(conds ...gen.Condition) ILocationAddressORMDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l locationAddressORMDo) Or(conds ...gen.Condition) ILocationAddressORMDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l locationAddressORMDo) Select(conds ...field.Expr) ILocationAddressORMDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l locationAddressORMDo) Where(conds ...gen.Condition) ILocationAddressORMDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l locationAddressORMDo) Order(conds ...field.Expr) ILocationAddressORMDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l locationAddressORMDo) Distinct(cols ...field.Expr) ILocationAddressORMDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l locationAddressORMDo) Omit(cols ...field.Expr) ILocationAddressORMDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l locationAddressORMDo) Join(table schema.Tabler, on ...field.Expr) ILocationAddressORMDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l locationAddressORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILocationAddressORMDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l locationAddressORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ILocationAddressORMDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l locationAddressORMDo) Group(cols ...field.Expr) ILocationAddressORMDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l locationAddressORMDo) Having(conds ...gen.Condition) ILocationAddressORMDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l locationAddressORMDo) Limit(limit int) ILocationAddressORMDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l locationAddressORMDo) Offset(offset int) ILocationAddressORMDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l locationAddressORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILocationAddressORMDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l locationAddressORMDo) Unscoped() ILocationAddressORMDo {
	return l.withDO(l.DO.Unscoped())
}

func (l locationAddressORMDo) Create(values ...*accounting_servicev1.LocationAddressORM) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l locationAddressORMDo) CreateInBatches(values []*accounting_servicev1.LocationAddressORM, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l locationAddressORMDo) Save(values ...*accounting_servicev1.LocationAddressORM) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l locationAddressORMDo) First() (*accounting_servicev1.LocationAddressORM, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.LocationAddressORM), nil
	}
}

func (l locationAddressORMDo) Take() (*accounting_servicev1.LocationAddressORM, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.LocationAddressORM), nil
	}
}

func (l locationAddressORMDo) Last() (*accounting_servicev1.LocationAddressORM, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.LocationAddressORM), nil
	}
}

func (l locationAddressORMDo) Find() ([]*accounting_servicev1.LocationAddressORM, error) {
	result, err := l.DO.Find()
	return result.([]*accounting_servicev1.LocationAddressORM), err
}

func (l locationAddressORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.LocationAddressORM, err error) {
	buf := make([]*accounting_servicev1.LocationAddressORM, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l locationAddressORMDo) FindInBatches(result *[]*accounting_servicev1.LocationAddressORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l locationAddressORMDo) Attrs(attrs ...field.AssignExpr) ILocationAddressORMDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l locationAddressORMDo) Assign(attrs ...field.AssignExpr) ILocationAddressORMDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l locationAddressORMDo) Joins(fields ...field.RelationField) ILocationAddressORMDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l locationAddressORMDo) Preload(fields ...field.RelationField) ILocationAddressORMDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l locationAddressORMDo) FirstOrInit() (*accounting_servicev1.LocationAddressORM, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.LocationAddressORM), nil
	}
}

func (l locationAddressORMDo) FirstOrCreate() (*accounting_servicev1.LocationAddressORM, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.LocationAddressORM), nil
	}
}

func (l locationAddressORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.LocationAddressORM, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l locationAddressORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l locationAddressORMDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l locationAddressORMDo) Delete(models ...*accounting_servicev1.LocationAddressORM) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *locationAddressORMDo) withDO(do gen.Dao) *locationAddressORMDo {
	l.DO = *do.(*gen.DO)
	return l
}
