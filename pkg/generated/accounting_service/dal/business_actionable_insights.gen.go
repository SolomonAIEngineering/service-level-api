// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newBusinessActionableInsightORM(db *gorm.DB, opts ...gen.DOOption) businessActionableInsightORM {
	_businessActionableInsightORM := businessActionableInsightORM{}

	_businessActionableInsightORM.businessActionableInsightORMDo.UseDB(db, opts...)
	_businessActionableInsightORM.businessActionableInsightORMDo.UseModel(&accounting_servicev1.BusinessActionableInsightORM{})

	tableName := _businessActionableInsightORM.businessActionableInsightORMDo.TableName()
	_businessActionableInsightORM.ALL = field.NewAsterisk(tableName)
	_businessActionableInsightORM.Action = field.NewString(tableName, "action")
	_businessActionableInsightORM.BusinessAccountingProfileId = field.NewUint64(tableName, "business_accounting_profile_id")
	_businessActionableInsightORM.Description = field.NewString(tableName, "description")
	_businessActionableInsightORM.ExpectedBenefit = field.NewString(tableName, "expected_benefit")
	_businessActionableInsightORM.GeneratedTime = field.NewTime(tableName, "generated_time")
	_businessActionableInsightORM.Id = field.NewUint64(tableName, "id")
	_businessActionableInsightORM.InsightName = field.NewString(tableName, "insight_name")
	_businessActionableInsightORM.MetricsToOptimizeFor = field.NewField(tableName, "metrics_to_optimize_for")
	_businessActionableInsightORM.Tags = field.NewField(tableName, "tags")
	_businessActionableInsightORM.Takeaway = field.NewString(tableName, "takeaway")

	_businessActionableInsightORM.fillFieldMap()

	return _businessActionableInsightORM
}

type businessActionableInsightORM struct {
	businessActionableInsightORMDo

	ALL                         field.Asterisk
	Action                      field.String
	BusinessAccountingProfileId field.Uint64
	Description                 field.String
	ExpectedBenefit             field.String
	GeneratedTime               field.Time
	Id                          field.Uint64
	InsightName                 field.String
	MetricsToOptimizeFor        field.Field
	Tags                        field.Field
	Takeaway                    field.String

	fieldMap map[string]field.Expr
}

func (b businessActionableInsightORM) Table(newTableName string) *businessActionableInsightORM {
	b.businessActionableInsightORMDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b businessActionableInsightORM) As(alias string) *businessActionableInsightORM {
	b.businessActionableInsightORMDo.DO = *(b.businessActionableInsightORMDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *businessActionableInsightORM) updateTableName(table string) *businessActionableInsightORM {
	b.ALL = field.NewAsterisk(table)
	b.Action = field.NewString(table, "action")
	b.BusinessAccountingProfileId = field.NewUint64(table, "business_accounting_profile_id")
	b.Description = field.NewString(table, "description")
	b.ExpectedBenefit = field.NewString(table, "expected_benefit")
	b.GeneratedTime = field.NewTime(table, "generated_time")
	b.Id = field.NewUint64(table, "id")
	b.InsightName = field.NewString(table, "insight_name")
	b.MetricsToOptimizeFor = field.NewField(table, "metrics_to_optimize_for")
	b.Tags = field.NewField(table, "tags")
	b.Takeaway = field.NewString(table, "takeaway")

	b.fillFieldMap()

	return b
}

func (b *businessActionableInsightORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *businessActionableInsightORM) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 10)
	b.fieldMap["action"] = b.Action
	b.fieldMap["business_accounting_profile_id"] = b.BusinessAccountingProfileId
	b.fieldMap["description"] = b.Description
	b.fieldMap["expected_benefit"] = b.ExpectedBenefit
	b.fieldMap["generated_time"] = b.GeneratedTime
	b.fieldMap["id"] = b.Id
	b.fieldMap["insight_name"] = b.InsightName
	b.fieldMap["metrics_to_optimize_for"] = b.MetricsToOptimizeFor
	b.fieldMap["tags"] = b.Tags
	b.fieldMap["takeaway"] = b.Takeaway
}

func (b businessActionableInsightORM) clone(db *gorm.DB) businessActionableInsightORM {
	b.businessActionableInsightORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b businessActionableInsightORM) replaceDB(db *gorm.DB) businessActionableInsightORM {
	b.businessActionableInsightORMDo.ReplaceDB(db)
	return b
}

type businessActionableInsightORMDo struct{ gen.DO }

type IBusinessActionableInsightORMDo interface {
	gen.SubQuery
	Debug() IBusinessActionableInsightORMDo
	WithContext(ctx context.Context) IBusinessActionableInsightORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBusinessActionableInsightORMDo
	WriteDB() IBusinessActionableInsightORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBusinessActionableInsightORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBusinessActionableInsightORMDo
	Not(conds ...gen.Condition) IBusinessActionableInsightORMDo
	Or(conds ...gen.Condition) IBusinessActionableInsightORMDo
	Select(conds ...field.Expr) IBusinessActionableInsightORMDo
	Where(conds ...gen.Condition) IBusinessActionableInsightORMDo
	Order(conds ...field.Expr) IBusinessActionableInsightORMDo
	Distinct(cols ...field.Expr) IBusinessActionableInsightORMDo
	Omit(cols ...field.Expr) IBusinessActionableInsightORMDo
	Join(table schema.Tabler, on ...field.Expr) IBusinessActionableInsightORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBusinessActionableInsightORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBusinessActionableInsightORMDo
	Group(cols ...field.Expr) IBusinessActionableInsightORMDo
	Having(conds ...gen.Condition) IBusinessActionableInsightORMDo
	Limit(limit int) IBusinessActionableInsightORMDo
	Offset(offset int) IBusinessActionableInsightORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBusinessActionableInsightORMDo
	Unscoped() IBusinessActionableInsightORMDo
	Create(values ...*accounting_servicev1.BusinessActionableInsightORM) error
	CreateInBatches(values []*accounting_servicev1.BusinessActionableInsightORM, batchSize int) error
	Save(values ...*accounting_servicev1.BusinessActionableInsightORM) error
	First() (*accounting_servicev1.BusinessActionableInsightORM, error)
	Take() (*accounting_servicev1.BusinessActionableInsightORM, error)
	Last() (*accounting_servicev1.BusinessActionableInsightORM, error)
	Find() ([]*accounting_servicev1.BusinessActionableInsightORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.BusinessActionableInsightORM, err error)
	FindInBatches(result *[]*accounting_servicev1.BusinessActionableInsightORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.BusinessActionableInsightORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBusinessActionableInsightORMDo
	Assign(attrs ...field.AssignExpr) IBusinessActionableInsightORMDo
	Joins(fields ...field.RelationField) IBusinessActionableInsightORMDo
	Preload(fields ...field.RelationField) IBusinessActionableInsightORMDo
	FirstOrInit() (*accounting_servicev1.BusinessActionableInsightORM, error)
	FirstOrCreate() (*accounting_servicev1.BusinessActionableInsightORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.BusinessActionableInsightORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBusinessActionableInsightORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.BusinessActionableInsightORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.BusinessActionableInsightORM, err error)
	CreateRecord(item accounting_servicev1.BusinessActionableInsightORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.BusinessActionableInsightORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.BusinessActionableInsightORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.BusinessActionableInsightORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.BusinessActionableInsightORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessActionableInsightORMDo) GetRecordByID(id int) (result accounting_servicev1.BusinessActionableInsightORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_actionable_insights ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b businessActionableInsightORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.BusinessActionableInsightORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_actionable_insights ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (b businessActionableInsightORMDo) CreateRecord(item accounting_servicev1.BusinessActionableInsightORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO business_actionable_insights (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessActionableInsightORMDo) UpdateRecordByID(id int, item accounting_servicev1.BusinessActionableInsightORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE business_actionable_insights SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessActionableInsightORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM business_actionable_insights ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (b businessActionableInsightORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.BusinessActionableInsightORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_actionable_insights ORDER BY " + b.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (b businessActionableInsightORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM business_actionable_insights ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessActionableInsightORMDo) GetByID(id uint64) (result accounting_servicev1.BusinessActionableInsightORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_actionable_insights ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b businessActionableInsightORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.BusinessActionableInsightORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_actionable_insights ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b businessActionableInsightORMDo) Debug() IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Debug())
}

func (b businessActionableInsightORMDo) WithContext(ctx context.Context) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b businessActionableInsightORMDo) ReadDB() IBusinessActionableInsightORMDo {
	return b.Clauses(dbresolver.Read)
}

func (b businessActionableInsightORMDo) WriteDB() IBusinessActionableInsightORMDo {
	return b.Clauses(dbresolver.Write)
}

func (b businessActionableInsightORMDo) Session(config *gorm.Session) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Session(config))
}

func (b businessActionableInsightORMDo) Clauses(conds ...clause.Expression) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b businessActionableInsightORMDo) Returning(value interface{}, columns ...string) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b businessActionableInsightORMDo) Not(conds ...gen.Condition) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b businessActionableInsightORMDo) Or(conds ...gen.Condition) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b businessActionableInsightORMDo) Select(conds ...field.Expr) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b businessActionableInsightORMDo) Where(conds ...gen.Condition) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b businessActionableInsightORMDo) Order(conds ...field.Expr) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b businessActionableInsightORMDo) Distinct(cols ...field.Expr) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b businessActionableInsightORMDo) Omit(cols ...field.Expr) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b businessActionableInsightORMDo) Join(table schema.Tabler, on ...field.Expr) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b businessActionableInsightORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b businessActionableInsightORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b businessActionableInsightORMDo) Group(cols ...field.Expr) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b businessActionableInsightORMDo) Having(conds ...gen.Condition) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b businessActionableInsightORMDo) Limit(limit int) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b businessActionableInsightORMDo) Offset(offset int) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b businessActionableInsightORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b businessActionableInsightORMDo) Unscoped() IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Unscoped())
}

func (b businessActionableInsightORMDo) Create(values ...*accounting_servicev1.BusinessActionableInsightORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b businessActionableInsightORMDo) CreateInBatches(values []*accounting_servicev1.BusinessActionableInsightORM, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b businessActionableInsightORMDo) Save(values ...*accounting_servicev1.BusinessActionableInsightORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b businessActionableInsightORMDo) First() (*accounting_servicev1.BusinessActionableInsightORM, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessActionableInsightORM), nil
	}
}

func (b businessActionableInsightORMDo) Take() (*accounting_servicev1.BusinessActionableInsightORM, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessActionableInsightORM), nil
	}
}

func (b businessActionableInsightORMDo) Last() (*accounting_servicev1.BusinessActionableInsightORM, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessActionableInsightORM), nil
	}
}

func (b businessActionableInsightORMDo) Find() ([]*accounting_servicev1.BusinessActionableInsightORM, error) {
	result, err := b.DO.Find()
	return result.([]*accounting_servicev1.BusinessActionableInsightORM), err
}

func (b businessActionableInsightORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.BusinessActionableInsightORM, err error) {
	buf := make([]*accounting_servicev1.BusinessActionableInsightORM, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b businessActionableInsightORMDo) FindInBatches(result *[]*accounting_servicev1.BusinessActionableInsightORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b businessActionableInsightORMDo) Attrs(attrs ...field.AssignExpr) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b businessActionableInsightORMDo) Assign(attrs ...field.AssignExpr) IBusinessActionableInsightORMDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b businessActionableInsightORMDo) Joins(fields ...field.RelationField) IBusinessActionableInsightORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b businessActionableInsightORMDo) Preload(fields ...field.RelationField) IBusinessActionableInsightORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b businessActionableInsightORMDo) FirstOrInit() (*accounting_servicev1.BusinessActionableInsightORM, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessActionableInsightORM), nil
	}
}

func (b businessActionableInsightORMDo) FirstOrCreate() (*accounting_servicev1.BusinessActionableInsightORM, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessActionableInsightORM), nil
	}
}

func (b businessActionableInsightORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.BusinessActionableInsightORM, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b businessActionableInsightORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b businessActionableInsightORMDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b businessActionableInsightORMDo) Delete(models ...*accounting_servicev1.BusinessActionableInsightORM) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *businessActionableInsightORMDo) withDO(do gen.Dao) *businessActionableInsightORMDo {
	b.DO = *do.(*gen.DO)
	return b
}
