// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newBusinessChartOfAccountORM(db *gorm.DB, opts ...gen.DOOption) businessChartOfAccountORM {
	_businessChartOfAccountORM := businessChartOfAccountORM{}

	_businessChartOfAccountORM.businessChartOfAccountORMDo.UseDB(db, opts...)
	_businessChartOfAccountORM.businessChartOfAccountORMDo.UseModel(&accounting_servicev1.BusinessChartOfAccountORM{})

	tableName := _businessChartOfAccountORM.businessChartOfAccountORMDo.TableName()
	_businessChartOfAccountORM.ALL = field.NewAsterisk(tableName)
	_businessChartOfAccountORM.AccountNumber = field.NewString(tableName, "account_number")
	_businessChartOfAccountORM.Classification = field.NewString(tableName, "classification")
	_businessChartOfAccountORM.Company = field.NewString(tableName, "company")
	_businessChartOfAccountORM.CreatedAt = field.NewTime(tableName, "created_at")
	_businessChartOfAccountORM.Currency = field.NewString(tableName, "currency")
	_businessChartOfAccountORM.CurrentBalance = field.NewFloat64(tableName, "current_balance")
	_businessChartOfAccountORM.Description = field.NewString(tableName, "description")
	_businessChartOfAccountORM.Id = field.NewUint64(tableName, "id")
	_businessChartOfAccountORM.LinkedAccountingAccountId = field.NewUint64(tableName, "linked_accounting_account_id")
	_businessChartOfAccountORM.MergeRecordId = field.NewString(tableName, "merge_record_id")
	_businessChartOfAccountORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_businessChartOfAccountORM.Name = field.NewString(tableName, "name")
	_businessChartOfAccountORM.ParentAccountId = field.NewString(tableName, "parent_account_id")
	_businessChartOfAccountORM.RemoteId = field.NewString(tableName, "remote_id")
	_businessChartOfAccountORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_businessChartOfAccountORM.Status = field.NewString(tableName, "status")
	_businessChartOfAccountORM.Type = field.NewString(tableName, "type")

	_businessChartOfAccountORM.fillFieldMap()

	return _businessChartOfAccountORM
}

type businessChartOfAccountORM struct {
	businessChartOfAccountORMDo

	ALL                       field.Asterisk
	AccountNumber             field.String
	Classification            field.String
	Company                   field.String
	CreatedAt                 field.Time
	Currency                  field.String
	CurrentBalance            field.Float64
	Description               field.String
	Id                        field.Uint64
	LinkedAccountingAccountId field.Uint64
	MergeRecordId             field.String
	ModifiedAt                field.Time
	Name                      field.String
	ParentAccountId           field.String
	RemoteId                  field.String
	RemoteWasDeleted          field.Bool
	Status                    field.String
	Type                      field.String

	fieldMap map[string]field.Expr
}

func (b businessChartOfAccountORM) Table(newTableName string) *businessChartOfAccountORM {
	b.businessChartOfAccountORMDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b businessChartOfAccountORM) As(alias string) *businessChartOfAccountORM {
	b.businessChartOfAccountORMDo.DO = *(b.businessChartOfAccountORMDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *businessChartOfAccountORM) updateTableName(table string) *businessChartOfAccountORM {
	b.ALL = field.NewAsterisk(table)
	b.AccountNumber = field.NewString(table, "account_number")
	b.Classification = field.NewString(table, "classification")
	b.Company = field.NewString(table, "company")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.Currency = field.NewString(table, "currency")
	b.CurrentBalance = field.NewFloat64(table, "current_balance")
	b.Description = field.NewString(table, "description")
	b.Id = field.NewUint64(table, "id")
	b.LinkedAccountingAccountId = field.NewUint64(table, "linked_accounting_account_id")
	b.MergeRecordId = field.NewString(table, "merge_record_id")
	b.ModifiedAt = field.NewTime(table, "modified_at")
	b.Name = field.NewString(table, "name")
	b.ParentAccountId = field.NewString(table, "parent_account_id")
	b.RemoteId = field.NewString(table, "remote_id")
	b.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	b.Status = field.NewString(table, "status")
	b.Type = field.NewString(table, "type")

	b.fillFieldMap()

	return b
}

func (b *businessChartOfAccountORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *businessChartOfAccountORM) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 17)
	b.fieldMap["account_number"] = b.AccountNumber
	b.fieldMap["classification"] = b.Classification
	b.fieldMap["company"] = b.Company
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["currency"] = b.Currency
	b.fieldMap["current_balance"] = b.CurrentBalance
	b.fieldMap["description"] = b.Description
	b.fieldMap["id"] = b.Id
	b.fieldMap["linked_accounting_account_id"] = b.LinkedAccountingAccountId
	b.fieldMap["merge_record_id"] = b.MergeRecordId
	b.fieldMap["modified_at"] = b.ModifiedAt
	b.fieldMap["name"] = b.Name
	b.fieldMap["parent_account_id"] = b.ParentAccountId
	b.fieldMap["remote_id"] = b.RemoteId
	b.fieldMap["remote_was_deleted"] = b.RemoteWasDeleted
	b.fieldMap["status"] = b.Status
	b.fieldMap["type"] = b.Type
}

func (b businessChartOfAccountORM) clone(db *gorm.DB) businessChartOfAccountORM {
	b.businessChartOfAccountORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b businessChartOfAccountORM) replaceDB(db *gorm.DB) businessChartOfAccountORM {
	b.businessChartOfAccountORMDo.ReplaceDB(db)
	return b
}

type businessChartOfAccountORMDo struct{ gen.DO }

type IBusinessChartOfAccountORMDo interface {
	gen.SubQuery
	Debug() IBusinessChartOfAccountORMDo
	WithContext(ctx context.Context) IBusinessChartOfAccountORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBusinessChartOfAccountORMDo
	WriteDB() IBusinessChartOfAccountORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBusinessChartOfAccountORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBusinessChartOfAccountORMDo
	Not(conds ...gen.Condition) IBusinessChartOfAccountORMDo
	Or(conds ...gen.Condition) IBusinessChartOfAccountORMDo
	Select(conds ...field.Expr) IBusinessChartOfAccountORMDo
	Where(conds ...gen.Condition) IBusinessChartOfAccountORMDo
	Order(conds ...field.Expr) IBusinessChartOfAccountORMDo
	Distinct(cols ...field.Expr) IBusinessChartOfAccountORMDo
	Omit(cols ...field.Expr) IBusinessChartOfAccountORMDo
	Join(table schema.Tabler, on ...field.Expr) IBusinessChartOfAccountORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBusinessChartOfAccountORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBusinessChartOfAccountORMDo
	Group(cols ...field.Expr) IBusinessChartOfAccountORMDo
	Having(conds ...gen.Condition) IBusinessChartOfAccountORMDo
	Limit(limit int) IBusinessChartOfAccountORMDo
	Offset(offset int) IBusinessChartOfAccountORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBusinessChartOfAccountORMDo
	Unscoped() IBusinessChartOfAccountORMDo
	Create(values ...*accounting_servicev1.BusinessChartOfAccountORM) error
	CreateInBatches(values []*accounting_servicev1.BusinessChartOfAccountORM, batchSize int) error
	Save(values ...*accounting_servicev1.BusinessChartOfAccountORM) error
	First() (*accounting_servicev1.BusinessChartOfAccountORM, error)
	Take() (*accounting_servicev1.BusinessChartOfAccountORM, error)
	Last() (*accounting_servicev1.BusinessChartOfAccountORM, error)
	Find() ([]*accounting_servicev1.BusinessChartOfAccountORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.BusinessChartOfAccountORM, err error)
	FindInBatches(result *[]*accounting_servicev1.BusinessChartOfAccountORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.BusinessChartOfAccountORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBusinessChartOfAccountORMDo
	Assign(attrs ...field.AssignExpr) IBusinessChartOfAccountORMDo
	Joins(fields ...field.RelationField) IBusinessChartOfAccountORMDo
	Preload(fields ...field.RelationField) IBusinessChartOfAccountORMDo
	FirstOrInit() (*accounting_servicev1.BusinessChartOfAccountORM, error)
	FirstOrCreate() (*accounting_servicev1.BusinessChartOfAccountORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.BusinessChartOfAccountORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBusinessChartOfAccountORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.BusinessChartOfAccountORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.BusinessChartOfAccountORM, err error)
	CreateRecord(item accounting_servicev1.BusinessChartOfAccountORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.BusinessChartOfAccountORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.BusinessChartOfAccountORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.BusinessChartOfAccountORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.BusinessChartOfAccountORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessChartOfAccountORMDo) GetRecordByID(id int) (result accounting_servicev1.BusinessChartOfAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_chart_of_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b businessChartOfAccountORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.BusinessChartOfAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_chart_of_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (b businessChartOfAccountORMDo) CreateRecord(item accounting_servicev1.BusinessChartOfAccountORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO business_chart_of_accounts (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessChartOfAccountORMDo) UpdateRecordByID(id int, item accounting_servicev1.BusinessChartOfAccountORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE business_chart_of_accounts SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessChartOfAccountORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM business_chart_of_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (b businessChartOfAccountORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.BusinessChartOfAccountORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_chart_of_accounts ORDER BY " + b.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (b businessChartOfAccountORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM business_chart_of_accounts ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessChartOfAccountORMDo) GetByID(id uint64) (result accounting_servicev1.BusinessChartOfAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_chart_of_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b businessChartOfAccountORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.BusinessChartOfAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_chart_of_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b businessChartOfAccountORMDo) Debug() IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Debug())
}

func (b businessChartOfAccountORMDo) WithContext(ctx context.Context) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b businessChartOfAccountORMDo) ReadDB() IBusinessChartOfAccountORMDo {
	return b.Clauses(dbresolver.Read)
}

func (b businessChartOfAccountORMDo) WriteDB() IBusinessChartOfAccountORMDo {
	return b.Clauses(dbresolver.Write)
}

func (b businessChartOfAccountORMDo) Session(config *gorm.Session) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Session(config))
}

func (b businessChartOfAccountORMDo) Clauses(conds ...clause.Expression) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b businessChartOfAccountORMDo) Returning(value interface{}, columns ...string) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b businessChartOfAccountORMDo) Not(conds ...gen.Condition) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b businessChartOfAccountORMDo) Or(conds ...gen.Condition) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b businessChartOfAccountORMDo) Select(conds ...field.Expr) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b businessChartOfAccountORMDo) Where(conds ...gen.Condition) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b businessChartOfAccountORMDo) Order(conds ...field.Expr) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b businessChartOfAccountORMDo) Distinct(cols ...field.Expr) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b businessChartOfAccountORMDo) Omit(cols ...field.Expr) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b businessChartOfAccountORMDo) Join(table schema.Tabler, on ...field.Expr) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b businessChartOfAccountORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b businessChartOfAccountORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b businessChartOfAccountORMDo) Group(cols ...field.Expr) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b businessChartOfAccountORMDo) Having(conds ...gen.Condition) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b businessChartOfAccountORMDo) Limit(limit int) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b businessChartOfAccountORMDo) Offset(offset int) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b businessChartOfAccountORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b businessChartOfAccountORMDo) Unscoped() IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Unscoped())
}

func (b businessChartOfAccountORMDo) Create(values ...*accounting_servicev1.BusinessChartOfAccountORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b businessChartOfAccountORMDo) CreateInBatches(values []*accounting_servicev1.BusinessChartOfAccountORM, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b businessChartOfAccountORMDo) Save(values ...*accounting_servicev1.BusinessChartOfAccountORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b businessChartOfAccountORMDo) First() (*accounting_servicev1.BusinessChartOfAccountORM, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessChartOfAccountORM), nil
	}
}

func (b businessChartOfAccountORMDo) Take() (*accounting_servicev1.BusinessChartOfAccountORM, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessChartOfAccountORM), nil
	}
}

func (b businessChartOfAccountORMDo) Last() (*accounting_servicev1.BusinessChartOfAccountORM, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessChartOfAccountORM), nil
	}
}

func (b businessChartOfAccountORMDo) Find() ([]*accounting_servicev1.BusinessChartOfAccountORM, error) {
	result, err := b.DO.Find()
	return result.([]*accounting_servicev1.BusinessChartOfAccountORM), err
}

func (b businessChartOfAccountORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.BusinessChartOfAccountORM, err error) {
	buf := make([]*accounting_servicev1.BusinessChartOfAccountORM, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b businessChartOfAccountORMDo) FindInBatches(result *[]*accounting_servicev1.BusinessChartOfAccountORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b businessChartOfAccountORMDo) Attrs(attrs ...field.AssignExpr) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b businessChartOfAccountORMDo) Assign(attrs ...field.AssignExpr) IBusinessChartOfAccountORMDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b businessChartOfAccountORMDo) Joins(fields ...field.RelationField) IBusinessChartOfAccountORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b businessChartOfAccountORMDo) Preload(fields ...field.RelationField) IBusinessChartOfAccountORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b businessChartOfAccountORMDo) FirstOrInit() (*accounting_servicev1.BusinessChartOfAccountORM, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessChartOfAccountORM), nil
	}
}

func (b businessChartOfAccountORMDo) FirstOrCreate() (*accounting_servicev1.BusinessChartOfAccountORM, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.BusinessChartOfAccountORM), nil
	}
}

func (b businessChartOfAccountORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.BusinessChartOfAccountORM, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b businessChartOfAccountORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b businessChartOfAccountORMDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b businessChartOfAccountORMDo) Delete(models ...*accounting_servicev1.BusinessChartOfAccountORM) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *businessChartOfAccountORMDo) withDO(do gen.Dao) *businessChartOfAccountORMDo {
	b.DO = *do.(*gen.DO)
	return b
}
