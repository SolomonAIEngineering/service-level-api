// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newAttachmentsORM(db *gorm.DB, opts ...gen.DOOption) attachmentsORM {
	_attachmentsORM := attachmentsORM{}

	_attachmentsORM.attachmentsORMDo.UseDB(db, opts...)
	_attachmentsORM.attachmentsORMDo.UseModel(&accounting_servicev1.AttachmentsORM{})

	tableName := _attachmentsORM.attachmentsORMDo.TableName()
	_attachmentsORM.ALL = field.NewAsterisk(tableName)
	_attachmentsORM.Company = field.NewString(tableName, "company")
	_attachmentsORM.FileName = field.NewString(tableName, "file_name")
	_attachmentsORM.FileUrl = field.NewString(tableName, "file_url")
	_attachmentsORM.Id = field.NewUint64(tableName, "id")
	_attachmentsORM.LinkedAccountingAccountId = field.NewUint64(tableName, "linked_accounting_account_id")
	_attachmentsORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_attachmentsORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_attachmentsORM.RemoteId = field.NewString(tableName, "remote_id")
	_attachmentsORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")

	_attachmentsORM.fillFieldMap()

	return _attachmentsORM
}

type attachmentsORM struct {
	attachmentsORMDo

	ALL                       field.Asterisk
	Company                   field.String
	FileName                  field.String
	FileUrl                   field.String
	Id                        field.Uint64
	LinkedAccountingAccountId field.Uint64
	MergeAccountId            field.String
	ModifiedAt                field.Time
	RemoteId                  field.String
	RemoteWasDeleted          field.Bool

	fieldMap map[string]field.Expr
}

func (a attachmentsORM) Table(newTableName string) *attachmentsORM {
	a.attachmentsORMDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attachmentsORM) As(alias string) *attachmentsORM {
	a.attachmentsORMDo.DO = *(a.attachmentsORMDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attachmentsORM) updateTableName(table string) *attachmentsORM {
	a.ALL = field.NewAsterisk(table)
	a.Company = field.NewString(table, "company")
	a.FileName = field.NewString(table, "file_name")
	a.FileUrl = field.NewString(table, "file_url")
	a.Id = field.NewUint64(table, "id")
	a.LinkedAccountingAccountId = field.NewUint64(table, "linked_accounting_account_id")
	a.MergeAccountId = field.NewString(table, "merge_account_id")
	a.ModifiedAt = field.NewTime(table, "modified_at")
	a.RemoteId = field.NewString(table, "remote_id")
	a.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")

	a.fillFieldMap()

	return a
}

func (a *attachmentsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attachmentsORM) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["company"] = a.Company
	a.fieldMap["file_name"] = a.FileName
	a.fieldMap["file_url"] = a.FileUrl
	a.fieldMap["id"] = a.Id
	a.fieldMap["linked_accounting_account_id"] = a.LinkedAccountingAccountId
	a.fieldMap["merge_account_id"] = a.MergeAccountId
	a.fieldMap["modified_at"] = a.ModifiedAt
	a.fieldMap["remote_id"] = a.RemoteId
	a.fieldMap["remote_was_deleted"] = a.RemoteWasDeleted
}

func (a attachmentsORM) clone(db *gorm.DB) attachmentsORM {
	a.attachmentsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attachmentsORM) replaceDB(db *gorm.DB) attachmentsORM {
	a.attachmentsORMDo.ReplaceDB(db)
	return a
}

type attachmentsORMDo struct{ gen.DO }

type IAttachmentsORMDo interface {
	gen.SubQuery
	Debug() IAttachmentsORMDo
	WithContext(ctx context.Context) IAttachmentsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttachmentsORMDo
	WriteDB() IAttachmentsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttachmentsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttachmentsORMDo
	Not(conds ...gen.Condition) IAttachmentsORMDo
	Or(conds ...gen.Condition) IAttachmentsORMDo
	Select(conds ...field.Expr) IAttachmentsORMDo
	Where(conds ...gen.Condition) IAttachmentsORMDo
	Order(conds ...field.Expr) IAttachmentsORMDo
	Distinct(cols ...field.Expr) IAttachmentsORMDo
	Omit(cols ...field.Expr) IAttachmentsORMDo
	Join(table schema.Tabler, on ...field.Expr) IAttachmentsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentsORMDo
	Group(cols ...field.Expr) IAttachmentsORMDo
	Having(conds ...gen.Condition) IAttachmentsORMDo
	Limit(limit int) IAttachmentsORMDo
	Offset(offset int) IAttachmentsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentsORMDo
	Unscoped() IAttachmentsORMDo
	Create(values ...*accounting_servicev1.AttachmentsORM) error
	CreateInBatches(values []*accounting_servicev1.AttachmentsORM, batchSize int) error
	Save(values ...*accounting_servicev1.AttachmentsORM) error
	First() (*accounting_servicev1.AttachmentsORM, error)
	Take() (*accounting_servicev1.AttachmentsORM, error)
	Last() (*accounting_servicev1.AttachmentsORM, error)
	Find() ([]*accounting_servicev1.AttachmentsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.AttachmentsORM, err error)
	FindInBatches(result *[]*accounting_servicev1.AttachmentsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.AttachmentsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttachmentsORMDo
	Assign(attrs ...field.AssignExpr) IAttachmentsORMDo
	Joins(fields ...field.RelationField) IAttachmentsORMDo
	Preload(fields ...field.RelationField) IAttachmentsORMDo
	FirstOrInit() (*accounting_servicev1.AttachmentsORM, error)
	FirstOrCreate() (*accounting_servicev1.AttachmentsORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.AttachmentsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttachmentsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.AttachmentsORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.AttachmentsORM, err error)
	CreateRecord(item accounting_servicev1.AttachmentsORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.AttachmentsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.AttachmentsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.AttachmentsORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.AttachmentsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a attachmentsORMDo) GetRecordByID(id int) (result accounting_servicev1.AttachmentsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM attachments ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a attachmentsORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.AttachmentsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM attachments ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (a attachmentsORMDo) CreateRecord(item accounting_servicev1.AttachmentsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO attachments (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (a attachmentsORMDo) UpdateRecordByID(id int, item accounting_servicev1.AttachmentsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE attachments SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a attachmentsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM attachments ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (a attachmentsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.AttachmentsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM attachments ORDER BY " + a.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (a attachmentsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM attachments ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a attachmentsORMDo) GetByID(id uint64) (result accounting_servicev1.AttachmentsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM attachments ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a attachmentsORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.AttachmentsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM attachments ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a attachmentsORMDo) Debug() IAttachmentsORMDo {
	return a.withDO(a.DO.Debug())
}

func (a attachmentsORMDo) WithContext(ctx context.Context) IAttachmentsORMDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attachmentsORMDo) ReadDB() IAttachmentsORMDo {
	return a.Clauses(dbresolver.Read)
}

func (a attachmentsORMDo) WriteDB() IAttachmentsORMDo {
	return a.Clauses(dbresolver.Write)
}

func (a attachmentsORMDo) Session(config *gorm.Session) IAttachmentsORMDo {
	return a.withDO(a.DO.Session(config))
}

func (a attachmentsORMDo) Clauses(conds ...clause.Expression) IAttachmentsORMDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attachmentsORMDo) Returning(value interface{}, columns ...string) IAttachmentsORMDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attachmentsORMDo) Not(conds ...gen.Condition) IAttachmentsORMDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attachmentsORMDo) Or(conds ...gen.Condition) IAttachmentsORMDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attachmentsORMDo) Select(conds ...field.Expr) IAttachmentsORMDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attachmentsORMDo) Where(conds ...gen.Condition) IAttachmentsORMDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attachmentsORMDo) Order(conds ...field.Expr) IAttachmentsORMDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attachmentsORMDo) Distinct(cols ...field.Expr) IAttachmentsORMDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attachmentsORMDo) Omit(cols ...field.Expr) IAttachmentsORMDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attachmentsORMDo) Join(table schema.Tabler, on ...field.Expr) IAttachmentsORMDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attachmentsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentsORMDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attachmentsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentsORMDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attachmentsORMDo) Group(cols ...field.Expr) IAttachmentsORMDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attachmentsORMDo) Having(conds ...gen.Condition) IAttachmentsORMDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attachmentsORMDo) Limit(limit int) IAttachmentsORMDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attachmentsORMDo) Offset(offset int) IAttachmentsORMDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attachmentsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentsORMDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attachmentsORMDo) Unscoped() IAttachmentsORMDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attachmentsORMDo) Create(values ...*accounting_servicev1.AttachmentsORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attachmentsORMDo) CreateInBatches(values []*accounting_servicev1.AttachmentsORM, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attachmentsORMDo) Save(values ...*accounting_servicev1.AttachmentsORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attachmentsORMDo) First() (*accounting_servicev1.AttachmentsORM, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.AttachmentsORM), nil
	}
}

func (a attachmentsORMDo) Take() (*accounting_servicev1.AttachmentsORM, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.AttachmentsORM), nil
	}
}

func (a attachmentsORMDo) Last() (*accounting_servicev1.AttachmentsORM, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.AttachmentsORM), nil
	}
}

func (a attachmentsORMDo) Find() ([]*accounting_servicev1.AttachmentsORM, error) {
	result, err := a.DO.Find()
	return result.([]*accounting_servicev1.AttachmentsORM), err
}

func (a attachmentsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.AttachmentsORM, err error) {
	buf := make([]*accounting_servicev1.AttachmentsORM, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attachmentsORMDo) FindInBatches(result *[]*accounting_servicev1.AttachmentsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attachmentsORMDo) Attrs(attrs ...field.AssignExpr) IAttachmentsORMDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attachmentsORMDo) Assign(attrs ...field.AssignExpr) IAttachmentsORMDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attachmentsORMDo) Joins(fields ...field.RelationField) IAttachmentsORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attachmentsORMDo) Preload(fields ...field.RelationField) IAttachmentsORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attachmentsORMDo) FirstOrInit() (*accounting_servicev1.AttachmentsORM, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.AttachmentsORM), nil
	}
}

func (a attachmentsORMDo) FirstOrCreate() (*accounting_servicev1.AttachmentsORM, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.AttachmentsORM), nil
	}
}

func (a attachmentsORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.AttachmentsORM, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attachmentsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attachmentsORMDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attachmentsORMDo) Delete(models ...*accounting_servicev1.AttachmentsORM) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attachmentsORMDo) withDO(do gen.Dao) *attachmentsORMDo {
	a.DO = *do.(*gen.DO)
	return a
}
