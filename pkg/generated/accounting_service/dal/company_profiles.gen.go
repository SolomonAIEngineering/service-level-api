// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	accounting_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newCompanyProfileORM(db *gorm.DB, opts ...gen.DOOption) companyProfileORM {
	_companyProfileORM := companyProfileORM{}

	_companyProfileORM.companyProfileORMDo.UseDB(db, opts...)
	_companyProfileORM.companyProfileORMDo.UseModel(&accounting_servicev1.CompanyProfileORM{})

	tableName := _companyProfileORM.companyProfileORMDo.TableName()
	_companyProfileORM.ALL = field.NewAsterisk(tableName)
	_companyProfileORM.DisplayName = field.NewString(tableName, "display_name")
	_companyProfileORM.EinNumbers = field.NewField(tableName, "ein_numbers")
	_companyProfileORM.HrisLinkedAccountId = field.NewUint64(tableName, "hris_linked_account_id")
	_companyProfileORM.Id = field.NewUint64(tableName, "id")
	_companyProfileORM.LastUpdatedAt = field.NewTime(tableName, "last_updated_at")
	_companyProfileORM.LegalName = field.NewString(tableName, "legal_name")
	_companyProfileORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_companyProfileORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_companyProfileORM.RemoteId = field.NewString(tableName, "remote_id")
	_companyProfileORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")

	_companyProfileORM.fillFieldMap()

	return _companyProfileORM
}

type companyProfileORM struct {
	companyProfileORMDo

	ALL                 field.Asterisk
	DisplayName         field.String
	EinNumbers          field.Field
	HrisLinkedAccountId field.Uint64
	Id                  field.Uint64
	LastUpdatedAt       field.Time
	LegalName           field.String
	MergeAccountId      field.String
	ModifiedAt          field.Time
	RemoteId            field.String
	RemoteWasDeleted    field.Bool

	fieldMap map[string]field.Expr
}

func (c companyProfileORM) Table(newTableName string) *companyProfileORM {
	c.companyProfileORMDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c companyProfileORM) As(alias string) *companyProfileORM {
	c.companyProfileORMDo.DO = *(c.companyProfileORMDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *companyProfileORM) updateTableName(table string) *companyProfileORM {
	c.ALL = field.NewAsterisk(table)
	c.DisplayName = field.NewString(table, "display_name")
	c.EinNumbers = field.NewField(table, "ein_numbers")
	c.HrisLinkedAccountId = field.NewUint64(table, "hris_linked_account_id")
	c.Id = field.NewUint64(table, "id")
	c.LastUpdatedAt = field.NewTime(table, "last_updated_at")
	c.LegalName = field.NewString(table, "legal_name")
	c.MergeAccountId = field.NewString(table, "merge_account_id")
	c.ModifiedAt = field.NewTime(table, "modified_at")
	c.RemoteId = field.NewString(table, "remote_id")
	c.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")

	c.fillFieldMap()

	return c
}

func (c *companyProfileORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *companyProfileORM) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["display_name"] = c.DisplayName
	c.fieldMap["ein_numbers"] = c.EinNumbers
	c.fieldMap["hris_linked_account_id"] = c.HrisLinkedAccountId
	c.fieldMap["id"] = c.Id
	c.fieldMap["last_updated_at"] = c.LastUpdatedAt
	c.fieldMap["legal_name"] = c.LegalName
	c.fieldMap["merge_account_id"] = c.MergeAccountId
	c.fieldMap["modified_at"] = c.ModifiedAt
	c.fieldMap["remote_id"] = c.RemoteId
	c.fieldMap["remote_was_deleted"] = c.RemoteWasDeleted
}

func (c companyProfileORM) clone(db *gorm.DB) companyProfileORM {
	c.companyProfileORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c companyProfileORM) replaceDB(db *gorm.DB) companyProfileORM {
	c.companyProfileORMDo.ReplaceDB(db)
	return c
}

type companyProfileORMDo struct{ gen.DO }

type ICompanyProfileORMDo interface {
	gen.SubQuery
	Debug() ICompanyProfileORMDo
	WithContext(ctx context.Context) ICompanyProfileORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICompanyProfileORMDo
	WriteDB() ICompanyProfileORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICompanyProfileORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICompanyProfileORMDo
	Not(conds ...gen.Condition) ICompanyProfileORMDo
	Or(conds ...gen.Condition) ICompanyProfileORMDo
	Select(conds ...field.Expr) ICompanyProfileORMDo
	Where(conds ...gen.Condition) ICompanyProfileORMDo
	Order(conds ...field.Expr) ICompanyProfileORMDo
	Distinct(cols ...field.Expr) ICompanyProfileORMDo
	Omit(cols ...field.Expr) ICompanyProfileORMDo
	Join(table schema.Tabler, on ...field.Expr) ICompanyProfileORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICompanyProfileORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICompanyProfileORMDo
	Group(cols ...field.Expr) ICompanyProfileORMDo
	Having(conds ...gen.Condition) ICompanyProfileORMDo
	Limit(limit int) ICompanyProfileORMDo
	Offset(offset int) ICompanyProfileORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICompanyProfileORMDo
	Unscoped() ICompanyProfileORMDo
	Create(values ...*accounting_servicev1.CompanyProfileORM) error
	CreateInBatches(values []*accounting_servicev1.CompanyProfileORM, batchSize int) error
	Save(values ...*accounting_servicev1.CompanyProfileORM) error
	First() (*accounting_servicev1.CompanyProfileORM, error)
	Take() (*accounting_servicev1.CompanyProfileORM, error)
	Last() (*accounting_servicev1.CompanyProfileORM, error)
	Find() ([]*accounting_servicev1.CompanyProfileORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.CompanyProfileORM, err error)
	FindInBatches(result *[]*accounting_servicev1.CompanyProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*accounting_servicev1.CompanyProfileORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICompanyProfileORMDo
	Assign(attrs ...field.AssignExpr) ICompanyProfileORMDo
	Joins(fields ...field.RelationField) ICompanyProfileORMDo
	Preload(fields ...field.RelationField) ICompanyProfileORMDo
	FirstOrInit() (*accounting_servicev1.CompanyProfileORM, error)
	FirstOrCreate() (*accounting_servicev1.CompanyProfileORM, error)
	FindByPage(offset int, limit int) (result []*accounting_servicev1.CompanyProfileORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICompanyProfileORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result accounting_servicev1.CompanyProfileORM, err error)
	GetRecordByIDs(ids []int) (result []accounting_servicev1.CompanyProfileORM, err error)
	CreateRecord(item accounting_servicev1.CompanyProfileORM) (err error)
	UpdateRecordByID(id int, item accounting_servicev1.CompanyProfileORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.CompanyProfileORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result accounting_servicev1.CompanyProfileORM, err error)
	GetByIDs(ids []uint64) (result []accounting_servicev1.CompanyProfileORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c companyProfileORMDo) GetRecordByID(id int) (result accounting_servicev1.CompanyProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM company_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c companyProfileORMDo) GetRecordByIDs(ids []int) (result []accounting_servicev1.CompanyProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM company_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (c companyProfileORMDo) CreateRecord(item accounting_servicev1.CompanyProfileORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO company_profiles (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (c companyProfileORMDo) UpdateRecordByID(id int, item accounting_servicev1.CompanyProfileORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE company_profiles SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c companyProfileORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM company_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (c companyProfileORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []accounting_servicev1.CompanyProfileORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM company_profiles ORDER BY " + c.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (c companyProfileORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM company_profiles ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c companyProfileORMDo) GetByID(id uint64) (result accounting_servicev1.CompanyProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM company_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c companyProfileORMDo) GetByIDs(ids []uint64) (result []accounting_servicev1.CompanyProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM company_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c companyProfileORMDo) Debug() ICompanyProfileORMDo {
	return c.withDO(c.DO.Debug())
}

func (c companyProfileORMDo) WithContext(ctx context.Context) ICompanyProfileORMDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c companyProfileORMDo) ReadDB() ICompanyProfileORMDo {
	return c.Clauses(dbresolver.Read)
}

func (c companyProfileORMDo) WriteDB() ICompanyProfileORMDo {
	return c.Clauses(dbresolver.Write)
}

func (c companyProfileORMDo) Session(config *gorm.Session) ICompanyProfileORMDo {
	return c.withDO(c.DO.Session(config))
}

func (c companyProfileORMDo) Clauses(conds ...clause.Expression) ICompanyProfileORMDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c companyProfileORMDo) Returning(value interface{}, columns ...string) ICompanyProfileORMDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c companyProfileORMDo) Not(conds ...gen.Condition) ICompanyProfileORMDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c companyProfileORMDo) Or(conds ...gen.Condition) ICompanyProfileORMDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c companyProfileORMDo) Select(conds ...field.Expr) ICompanyProfileORMDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c companyProfileORMDo) Where(conds ...gen.Condition) ICompanyProfileORMDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c companyProfileORMDo) Order(conds ...field.Expr) ICompanyProfileORMDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c companyProfileORMDo) Distinct(cols ...field.Expr) ICompanyProfileORMDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c companyProfileORMDo) Omit(cols ...field.Expr) ICompanyProfileORMDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c companyProfileORMDo) Join(table schema.Tabler, on ...field.Expr) ICompanyProfileORMDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c companyProfileORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICompanyProfileORMDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c companyProfileORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ICompanyProfileORMDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c companyProfileORMDo) Group(cols ...field.Expr) ICompanyProfileORMDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c companyProfileORMDo) Having(conds ...gen.Condition) ICompanyProfileORMDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c companyProfileORMDo) Limit(limit int) ICompanyProfileORMDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c companyProfileORMDo) Offset(offset int) ICompanyProfileORMDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c companyProfileORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICompanyProfileORMDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c companyProfileORMDo) Unscoped() ICompanyProfileORMDo {
	return c.withDO(c.DO.Unscoped())
}

func (c companyProfileORMDo) Create(values ...*accounting_servicev1.CompanyProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c companyProfileORMDo) CreateInBatches(values []*accounting_servicev1.CompanyProfileORM, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c companyProfileORMDo) Save(values ...*accounting_servicev1.CompanyProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c companyProfileORMDo) First() (*accounting_servicev1.CompanyProfileORM, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.CompanyProfileORM), nil
	}
}

func (c companyProfileORMDo) Take() (*accounting_servicev1.CompanyProfileORM, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.CompanyProfileORM), nil
	}
}

func (c companyProfileORMDo) Last() (*accounting_servicev1.CompanyProfileORM, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.CompanyProfileORM), nil
	}
}

func (c companyProfileORMDo) Find() ([]*accounting_servicev1.CompanyProfileORM, error) {
	result, err := c.DO.Find()
	return result.([]*accounting_servicev1.CompanyProfileORM), err
}

func (c companyProfileORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*accounting_servicev1.CompanyProfileORM, err error) {
	buf := make([]*accounting_servicev1.CompanyProfileORM, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c companyProfileORMDo) FindInBatches(result *[]*accounting_servicev1.CompanyProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c companyProfileORMDo) Attrs(attrs ...field.AssignExpr) ICompanyProfileORMDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c companyProfileORMDo) Assign(attrs ...field.AssignExpr) ICompanyProfileORMDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c companyProfileORMDo) Joins(fields ...field.RelationField) ICompanyProfileORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c companyProfileORMDo) Preload(fields ...field.RelationField) ICompanyProfileORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c companyProfileORMDo) FirstOrInit() (*accounting_servicev1.CompanyProfileORM, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.CompanyProfileORM), nil
	}
}

func (c companyProfileORMDo) FirstOrCreate() (*accounting_servicev1.CompanyProfileORM, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*accounting_servicev1.CompanyProfileORM), nil
	}
}

func (c companyProfileORMDo) FindByPage(offset int, limit int) (result []*accounting_servicev1.CompanyProfileORM, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c companyProfileORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c companyProfileORMDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c companyProfileORMDo) Delete(models ...*accounting_servicev1.CompanyProfileORM) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *companyProfileORMDo) withDO(do gen.Dao) *companyProfileORMDo {
	c.DO = *do.(*gen.DO)
	return c
}
