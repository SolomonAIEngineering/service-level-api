// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	user_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/user_service/v1"
)

func newContactInformationORM(db *gorm.DB, opts ...gen.DOOption) contactInformationORM {
	_contactInformationORM := contactInformationORM{}

	_contactInformationORM.contactInformationORMDo.UseDB(db, opts...)
	_contactInformationORM.contactInformationORMDo.UseModel(&user_servicev1.ContactInformationORM{})

	tableName := _contactInformationORM.contactInformationORMDo.TableName()
	_contactInformationORM.ALL = field.NewAsterisk(tableName)
	_contactInformationORM.AccountInformationId = field.NewUint64(tableName, "account_information_id")
	_contactInformationORM.Address = field.NewString(tableName, "address")
	_contactInformationORM.Email = field.NewString(tableName, "email")
	_contactInformationORM.Id = field.NewUint64(tableName, "id")
	_contactInformationORM.PhoneNumber = field.NewString(tableName, "phone_number")

	_contactInformationORM.fillFieldMap()

	return _contactInformationORM
}

type contactInformationORM struct {
	contactInformationORMDo

	ALL                  field.Asterisk
	AccountInformationId field.Uint64
	Address              field.String
	Email                field.String
	Id                   field.Uint64
	PhoneNumber          field.String

	fieldMap map[string]field.Expr
}

func (c contactInformationORM) Table(newTableName string) *contactInformationORM {
	c.contactInformationORMDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contactInformationORM) As(alias string) *contactInformationORM {
	c.contactInformationORMDo.DO = *(c.contactInformationORMDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contactInformationORM) updateTableName(table string) *contactInformationORM {
	c.ALL = field.NewAsterisk(table)
	c.AccountInformationId = field.NewUint64(table, "account_information_id")
	c.Address = field.NewString(table, "address")
	c.Email = field.NewString(table, "email")
	c.Id = field.NewUint64(table, "id")
	c.PhoneNumber = field.NewString(table, "phone_number")

	c.fillFieldMap()

	return c
}

func (c *contactInformationORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contactInformationORM) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["account_information_id"] = c.AccountInformationId
	c.fieldMap["address"] = c.Address
	c.fieldMap["email"] = c.Email
	c.fieldMap["id"] = c.Id
	c.fieldMap["phone_number"] = c.PhoneNumber
}

func (c contactInformationORM) clone(db *gorm.DB) contactInformationORM {
	c.contactInformationORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contactInformationORM) replaceDB(db *gorm.DB) contactInformationORM {
	c.contactInformationORMDo.ReplaceDB(db)
	return c
}

type contactInformationORMDo struct{ gen.DO }

type IContactInformationORMDo interface {
	gen.SubQuery
	Debug() IContactInformationORMDo
	WithContext(ctx context.Context) IContactInformationORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IContactInformationORMDo
	WriteDB() IContactInformationORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IContactInformationORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IContactInformationORMDo
	Not(conds ...gen.Condition) IContactInformationORMDo
	Or(conds ...gen.Condition) IContactInformationORMDo
	Select(conds ...field.Expr) IContactInformationORMDo
	Where(conds ...gen.Condition) IContactInformationORMDo
	Order(conds ...field.Expr) IContactInformationORMDo
	Distinct(cols ...field.Expr) IContactInformationORMDo
	Omit(cols ...field.Expr) IContactInformationORMDo
	Join(table schema.Tabler, on ...field.Expr) IContactInformationORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IContactInformationORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IContactInformationORMDo
	Group(cols ...field.Expr) IContactInformationORMDo
	Having(conds ...gen.Condition) IContactInformationORMDo
	Limit(limit int) IContactInformationORMDo
	Offset(offset int) IContactInformationORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IContactInformationORMDo
	Unscoped() IContactInformationORMDo
	Create(values ...*user_servicev1.ContactInformationORM) error
	CreateInBatches(values []*user_servicev1.ContactInformationORM, batchSize int) error
	Save(values ...*user_servicev1.ContactInformationORM) error
	First() (*user_servicev1.ContactInformationORM, error)
	Take() (*user_servicev1.ContactInformationORM, error)
	Last() (*user_servicev1.ContactInformationORM, error)
	Find() ([]*user_servicev1.ContactInformationORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.ContactInformationORM, err error)
	FindInBatches(result *[]*user_servicev1.ContactInformationORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*user_servicev1.ContactInformationORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IContactInformationORMDo
	Assign(attrs ...field.AssignExpr) IContactInformationORMDo
	Joins(fields ...field.RelationField) IContactInformationORMDo
	Preload(fields ...field.RelationField) IContactInformationORMDo
	FirstOrInit() (*user_servicev1.ContactInformationORM, error)
	FirstOrCreate() (*user_servicev1.ContactInformationORM, error)
	FindByPage(offset int, limit int) (result []*user_servicev1.ContactInformationORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IContactInformationORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result user_servicev1.ContactInformationORM, err error)
	GetRecordByIDs(ids []int) (result []user_servicev1.ContactInformationORM, err error)
	CreateRecord(item user_servicev1.ContactInformationORM) (err error)
	UpdateRecordByID(id int, item user_servicev1.ContactInformationORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.ContactInformationORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contactInformationORMDo) GetRecordByID(id int) (result user_servicev1.ContactInformationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contact_informations ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c contactInformationORMDo) GetRecordByIDs(ids []int) (result []user_servicev1.ContactInformationORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contact_informations ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (c contactInformationORMDo) CreateRecord(item user_servicev1.ContactInformationORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO contact_informations (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contactInformationORMDo) UpdateRecordByID(id int, item user_servicev1.ContactInformationORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE contact_informations SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c contactInformationORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM contact_informations ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (c contactInformationORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.ContactInformationORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM contact_informations ORDER BY " + c.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (c contactInformationORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM contact_informations ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c contactInformationORMDo) Debug() IContactInformationORMDo {
	return c.withDO(c.DO.Debug())
}

func (c contactInformationORMDo) WithContext(ctx context.Context) IContactInformationORMDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contactInformationORMDo) ReadDB() IContactInformationORMDo {
	return c.Clauses(dbresolver.Read)
}

func (c contactInformationORMDo) WriteDB() IContactInformationORMDo {
	return c.Clauses(dbresolver.Write)
}

func (c contactInformationORMDo) Session(config *gorm.Session) IContactInformationORMDo {
	return c.withDO(c.DO.Session(config))
}

func (c contactInformationORMDo) Clauses(conds ...clause.Expression) IContactInformationORMDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contactInformationORMDo) Returning(value interface{}, columns ...string) IContactInformationORMDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contactInformationORMDo) Not(conds ...gen.Condition) IContactInformationORMDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contactInformationORMDo) Or(conds ...gen.Condition) IContactInformationORMDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contactInformationORMDo) Select(conds ...field.Expr) IContactInformationORMDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contactInformationORMDo) Where(conds ...gen.Condition) IContactInformationORMDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contactInformationORMDo) Order(conds ...field.Expr) IContactInformationORMDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contactInformationORMDo) Distinct(cols ...field.Expr) IContactInformationORMDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contactInformationORMDo) Omit(cols ...field.Expr) IContactInformationORMDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contactInformationORMDo) Join(table schema.Tabler, on ...field.Expr) IContactInformationORMDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contactInformationORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IContactInformationORMDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contactInformationORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IContactInformationORMDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contactInformationORMDo) Group(cols ...field.Expr) IContactInformationORMDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contactInformationORMDo) Having(conds ...gen.Condition) IContactInformationORMDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contactInformationORMDo) Limit(limit int) IContactInformationORMDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contactInformationORMDo) Offset(offset int) IContactInformationORMDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contactInformationORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IContactInformationORMDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contactInformationORMDo) Unscoped() IContactInformationORMDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contactInformationORMDo) Create(values ...*user_servicev1.ContactInformationORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contactInformationORMDo) CreateInBatches(values []*user_servicev1.ContactInformationORM, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contactInformationORMDo) Save(values ...*user_servicev1.ContactInformationORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contactInformationORMDo) First() (*user_servicev1.ContactInformationORM, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.ContactInformationORM), nil
	}
}

func (c contactInformationORMDo) Take() (*user_servicev1.ContactInformationORM, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.ContactInformationORM), nil
	}
}

func (c contactInformationORMDo) Last() (*user_servicev1.ContactInformationORM, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.ContactInformationORM), nil
	}
}

func (c contactInformationORMDo) Find() ([]*user_servicev1.ContactInformationORM, error) {
	result, err := c.DO.Find()
	return result.([]*user_servicev1.ContactInformationORM), err
}

func (c contactInformationORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.ContactInformationORM, err error) {
	buf := make([]*user_servicev1.ContactInformationORM, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contactInformationORMDo) FindInBatches(result *[]*user_servicev1.ContactInformationORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contactInformationORMDo) Attrs(attrs ...field.AssignExpr) IContactInformationORMDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contactInformationORMDo) Assign(attrs ...field.AssignExpr) IContactInformationORMDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contactInformationORMDo) Joins(fields ...field.RelationField) IContactInformationORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contactInformationORMDo) Preload(fields ...field.RelationField) IContactInformationORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contactInformationORMDo) FirstOrInit() (*user_servicev1.ContactInformationORM, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.ContactInformationORM), nil
	}
}

func (c contactInformationORMDo) FirstOrCreate() (*user_servicev1.ContactInformationORM, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.ContactInformationORM), nil
	}
}

func (c contactInformationORMDo) FindByPage(offset int, limit int) (result []*user_servicev1.ContactInformationORM, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contactInformationORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contactInformationORMDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contactInformationORMDo) Delete(models ...*user_servicev1.ContactInformationORM) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contactInformationORMDo) withDO(do gen.Dao) *contactInformationORMDo {
	c.DO = *do.(*gen.DO)
	return c
}
