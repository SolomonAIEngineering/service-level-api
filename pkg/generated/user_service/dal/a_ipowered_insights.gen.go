// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	user_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/user_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newAIPoweredInsightsORM(db *gorm.DB, opts ...gen.DOOption) aIPoweredInsightsORM {
	_aIPoweredInsightsORM := aIPoweredInsightsORM{}

	_aIPoweredInsightsORM.aIPoweredInsightsORMDo.UseDB(db, opts...)
	_aIPoweredInsightsORM.aIPoweredInsightsORMDo.UseModel(&user_servicev1.AIPoweredInsightsORM{})

	tableName := _aIPoweredInsightsORM.aIPoweredInsightsORMDo.TableName()
	_aIPoweredInsightsORM.ALL = field.NewAsterisk(tableName)
	_aIPoweredInsightsORM.AreasOfInterest = field.NewField(tableName, "areas_of_interest")
	_aIPoweredInsightsORM.BusinessAccountSettingsId = field.NewUint64(tableName, "business_account_settings_id")
	_aIPoweredInsightsORM.DataSharing = field.NewBool(tableName, "data_sharing")
	_aIPoweredInsightsORM.Id = field.NewUint64(tableName, "id")
	_aIPoweredInsightsORM.InsightFrequency = field.NewString(tableName, "insight_frequency")

	_aIPoweredInsightsORM.fillFieldMap()

	return _aIPoweredInsightsORM
}

type aIPoweredInsightsORM struct {
	aIPoweredInsightsORMDo

	ALL                       field.Asterisk
	AreasOfInterest           field.Field
	BusinessAccountSettingsId field.Uint64
	DataSharing               field.Bool
	Id                        field.Uint64
	InsightFrequency          field.String

	fieldMap map[string]field.Expr
}

func (a aIPoweredInsightsORM) Table(newTableName string) *aIPoweredInsightsORM {
	a.aIPoweredInsightsORMDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aIPoweredInsightsORM) As(alias string) *aIPoweredInsightsORM {
	a.aIPoweredInsightsORMDo.DO = *(a.aIPoweredInsightsORMDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aIPoweredInsightsORM) updateTableName(table string) *aIPoweredInsightsORM {
	a.ALL = field.NewAsterisk(table)
	a.AreasOfInterest = field.NewField(table, "areas_of_interest")
	a.BusinessAccountSettingsId = field.NewUint64(table, "business_account_settings_id")
	a.DataSharing = field.NewBool(table, "data_sharing")
	a.Id = field.NewUint64(table, "id")
	a.InsightFrequency = field.NewString(table, "insight_frequency")

	a.fillFieldMap()

	return a
}

func (a *aIPoweredInsightsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aIPoweredInsightsORM) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["areas_of_interest"] = a.AreasOfInterest
	a.fieldMap["business_account_settings_id"] = a.BusinessAccountSettingsId
	a.fieldMap["data_sharing"] = a.DataSharing
	a.fieldMap["id"] = a.Id
	a.fieldMap["insight_frequency"] = a.InsightFrequency
}

func (a aIPoweredInsightsORM) clone(db *gorm.DB) aIPoweredInsightsORM {
	a.aIPoweredInsightsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aIPoweredInsightsORM) replaceDB(db *gorm.DB) aIPoweredInsightsORM {
	a.aIPoweredInsightsORMDo.ReplaceDB(db)
	return a
}

type aIPoweredInsightsORMDo struct{ gen.DO }

type IAIPoweredInsightsORMDo interface {
	gen.SubQuery
	Debug() IAIPoweredInsightsORMDo
	WithContext(ctx context.Context) IAIPoweredInsightsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAIPoweredInsightsORMDo
	WriteDB() IAIPoweredInsightsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAIPoweredInsightsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAIPoweredInsightsORMDo
	Not(conds ...gen.Condition) IAIPoweredInsightsORMDo
	Or(conds ...gen.Condition) IAIPoweredInsightsORMDo
	Select(conds ...field.Expr) IAIPoweredInsightsORMDo
	Where(conds ...gen.Condition) IAIPoweredInsightsORMDo
	Order(conds ...field.Expr) IAIPoweredInsightsORMDo
	Distinct(cols ...field.Expr) IAIPoweredInsightsORMDo
	Omit(cols ...field.Expr) IAIPoweredInsightsORMDo
	Join(table schema.Tabler, on ...field.Expr) IAIPoweredInsightsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAIPoweredInsightsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAIPoweredInsightsORMDo
	Group(cols ...field.Expr) IAIPoweredInsightsORMDo
	Having(conds ...gen.Condition) IAIPoweredInsightsORMDo
	Limit(limit int) IAIPoweredInsightsORMDo
	Offset(offset int) IAIPoweredInsightsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAIPoweredInsightsORMDo
	Unscoped() IAIPoweredInsightsORMDo
	Create(values ...*user_servicev1.AIPoweredInsightsORM) error
	CreateInBatches(values []*user_servicev1.AIPoweredInsightsORM, batchSize int) error
	Save(values ...*user_servicev1.AIPoweredInsightsORM) error
	First() (*user_servicev1.AIPoweredInsightsORM, error)
	Take() (*user_servicev1.AIPoweredInsightsORM, error)
	Last() (*user_servicev1.AIPoweredInsightsORM, error)
	Find() ([]*user_servicev1.AIPoweredInsightsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.AIPoweredInsightsORM, err error)
	FindInBatches(result *[]*user_servicev1.AIPoweredInsightsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*user_servicev1.AIPoweredInsightsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAIPoweredInsightsORMDo
	Assign(attrs ...field.AssignExpr) IAIPoweredInsightsORMDo
	Joins(fields ...field.RelationField) IAIPoweredInsightsORMDo
	Preload(fields ...field.RelationField) IAIPoweredInsightsORMDo
	FirstOrInit() (*user_servicev1.AIPoweredInsightsORM, error)
	FirstOrCreate() (*user_servicev1.AIPoweredInsightsORM, error)
	FindByPage(offset int, limit int) (result []*user_servicev1.AIPoweredInsightsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAIPoweredInsightsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result user_servicev1.AIPoweredInsightsORM, err error)
	GetRecordByIDs(ids []int) (result []user_servicev1.AIPoweredInsightsORM, err error)
	CreateRecord(item user_servicev1.AIPoweredInsightsORM) (err error)
	UpdateRecordByID(id int, item user_servicev1.AIPoweredInsightsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.AIPoweredInsightsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result user_servicev1.AIPoweredInsightsORM, err error)
	GetByIDs(ids []uint64) (result []user_servicev1.AIPoweredInsightsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aIPoweredInsightsORMDo) GetRecordByID(id int) (result user_servicev1.AIPoweredInsightsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM a_ipowered_insights ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a aIPoweredInsightsORMDo) GetRecordByIDs(ids []int) (result []user_servicev1.AIPoweredInsightsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM a_ipowered_insights ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (a aIPoweredInsightsORMDo) CreateRecord(item user_servicev1.AIPoweredInsightsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO a_ipowered_insights (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aIPoweredInsightsORMDo) UpdateRecordByID(id int, item user_servicev1.AIPoweredInsightsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE a_ipowered_insights SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aIPoweredInsightsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM a_ipowered_insights ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (a aIPoweredInsightsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.AIPoweredInsightsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM a_ipowered_insights ORDER BY " + a.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (a aIPoweredInsightsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM a_ipowered_insights ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a aIPoweredInsightsORMDo) GetByID(id uint64) (result user_servicev1.AIPoweredInsightsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM a_ipowered_insights ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a aIPoweredInsightsORMDo) GetByIDs(ids []uint64) (result []user_servicev1.AIPoweredInsightsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM a_ipowered_insights ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a aIPoweredInsightsORMDo) Debug() IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Debug())
}

func (a aIPoweredInsightsORMDo) WithContext(ctx context.Context) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aIPoweredInsightsORMDo) ReadDB() IAIPoweredInsightsORMDo {
	return a.Clauses(dbresolver.Read)
}

func (a aIPoweredInsightsORMDo) WriteDB() IAIPoweredInsightsORMDo {
	return a.Clauses(dbresolver.Write)
}

func (a aIPoweredInsightsORMDo) Session(config *gorm.Session) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Session(config))
}

func (a aIPoweredInsightsORMDo) Clauses(conds ...clause.Expression) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aIPoweredInsightsORMDo) Returning(value interface{}, columns ...string) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aIPoweredInsightsORMDo) Not(conds ...gen.Condition) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aIPoweredInsightsORMDo) Or(conds ...gen.Condition) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aIPoweredInsightsORMDo) Select(conds ...field.Expr) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aIPoweredInsightsORMDo) Where(conds ...gen.Condition) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aIPoweredInsightsORMDo) Order(conds ...field.Expr) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aIPoweredInsightsORMDo) Distinct(cols ...field.Expr) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aIPoweredInsightsORMDo) Omit(cols ...field.Expr) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aIPoweredInsightsORMDo) Join(table schema.Tabler, on ...field.Expr) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aIPoweredInsightsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aIPoweredInsightsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aIPoweredInsightsORMDo) Group(cols ...field.Expr) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aIPoweredInsightsORMDo) Having(conds ...gen.Condition) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aIPoweredInsightsORMDo) Limit(limit int) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aIPoweredInsightsORMDo) Offset(offset int) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aIPoweredInsightsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aIPoweredInsightsORMDo) Unscoped() IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aIPoweredInsightsORMDo) Create(values ...*user_servicev1.AIPoweredInsightsORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aIPoweredInsightsORMDo) CreateInBatches(values []*user_servicev1.AIPoweredInsightsORM, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aIPoweredInsightsORMDo) Save(values ...*user_servicev1.AIPoweredInsightsORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aIPoweredInsightsORMDo) First() (*user_servicev1.AIPoweredInsightsORM, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.AIPoweredInsightsORM), nil
	}
}

func (a aIPoweredInsightsORMDo) Take() (*user_servicev1.AIPoweredInsightsORM, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.AIPoweredInsightsORM), nil
	}
}

func (a aIPoweredInsightsORMDo) Last() (*user_servicev1.AIPoweredInsightsORM, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.AIPoweredInsightsORM), nil
	}
}

func (a aIPoweredInsightsORMDo) Find() ([]*user_servicev1.AIPoweredInsightsORM, error) {
	result, err := a.DO.Find()
	return result.([]*user_servicev1.AIPoweredInsightsORM), err
}

func (a aIPoweredInsightsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.AIPoweredInsightsORM, err error) {
	buf := make([]*user_servicev1.AIPoweredInsightsORM, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aIPoweredInsightsORMDo) FindInBatches(result *[]*user_servicev1.AIPoweredInsightsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aIPoweredInsightsORMDo) Attrs(attrs ...field.AssignExpr) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aIPoweredInsightsORMDo) Assign(attrs ...field.AssignExpr) IAIPoweredInsightsORMDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aIPoweredInsightsORMDo) Joins(fields ...field.RelationField) IAIPoweredInsightsORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aIPoweredInsightsORMDo) Preload(fields ...field.RelationField) IAIPoweredInsightsORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aIPoweredInsightsORMDo) FirstOrInit() (*user_servicev1.AIPoweredInsightsORM, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.AIPoweredInsightsORM), nil
	}
}

func (a aIPoweredInsightsORMDo) FirstOrCreate() (*user_servicev1.AIPoweredInsightsORM, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.AIPoweredInsightsORM), nil
	}
}

func (a aIPoweredInsightsORMDo) FindByPage(offset int, limit int) (result []*user_servicev1.AIPoweredInsightsORM, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aIPoweredInsightsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aIPoweredInsightsORMDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aIPoweredInsightsORMDo) Delete(models ...*user_servicev1.AIPoweredInsightsORM) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aIPoweredInsightsORMDo) withDO(do gen.Dao) *aIPoweredInsightsORMDo {
	a.DO = *do.(*gen.DO)
	return a
}
