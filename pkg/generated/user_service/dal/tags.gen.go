// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	user_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/user_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newTagsORM(db *gorm.DB, opts ...gen.DOOption) tagsORM {
	_tagsORM := tagsORM{}

	_tagsORM.tagsORMDo.UseDB(db, opts...)
	_tagsORM.tagsORMDo.UseModel(&user_servicev1.TagsORM{})

	tableName := _tagsORM.tagsORMDo.TableName()
	_tagsORM.ALL = field.NewAsterisk(tableName)
	_tagsORM.Id = field.NewUint64(tableName, "id")
	_tagsORM.Metadata = field.NewField(tableName, "metadata")
	_tagsORM.TagDescription = field.NewString(tableName, "tag_description")
	_tagsORM.TagName = field.NewString(tableName, "tag_name")
	_tagsORM.UserAccountId = field.NewUint64(tableName, "user_account_id")

	_tagsORM.fillFieldMap()

	return _tagsORM
}

type tagsORM struct {
	tagsORMDo

	ALL            field.Asterisk
	Id             field.Uint64
	Metadata       field.Field
	TagDescription field.String
	TagName        field.String
	UserAccountId  field.Uint64

	fieldMap map[string]field.Expr
}

func (t tagsORM) Table(newTableName string) *tagsORM {
	t.tagsORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tagsORM) As(alias string) *tagsORM {
	t.tagsORMDo.DO = *(t.tagsORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tagsORM) updateTableName(table string) *tagsORM {
	t.ALL = field.NewAsterisk(table)
	t.Id = field.NewUint64(table, "id")
	t.Metadata = field.NewField(table, "metadata")
	t.TagDescription = field.NewString(table, "tag_description")
	t.TagName = field.NewString(table, "tag_name")
	t.UserAccountId = field.NewUint64(table, "user_account_id")

	t.fillFieldMap()

	return t
}

func (t *tagsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tagsORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id"] = t.Id
	t.fieldMap["metadata"] = t.Metadata
	t.fieldMap["tag_description"] = t.TagDescription
	t.fieldMap["tag_name"] = t.TagName
	t.fieldMap["user_account_id"] = t.UserAccountId
}

func (t tagsORM) clone(db *gorm.DB) tagsORM {
	t.tagsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tagsORM) replaceDB(db *gorm.DB) tagsORM {
	t.tagsORMDo.ReplaceDB(db)
	return t
}

type tagsORMDo struct{ gen.DO }

type ITagsORMDo interface {
	gen.SubQuery
	Debug() ITagsORMDo
	WithContext(ctx context.Context) ITagsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITagsORMDo
	WriteDB() ITagsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITagsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITagsORMDo
	Not(conds ...gen.Condition) ITagsORMDo
	Or(conds ...gen.Condition) ITagsORMDo
	Select(conds ...field.Expr) ITagsORMDo
	Where(conds ...gen.Condition) ITagsORMDo
	Order(conds ...field.Expr) ITagsORMDo
	Distinct(cols ...field.Expr) ITagsORMDo
	Omit(cols ...field.Expr) ITagsORMDo
	Join(table schema.Tabler, on ...field.Expr) ITagsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITagsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITagsORMDo
	Group(cols ...field.Expr) ITagsORMDo
	Having(conds ...gen.Condition) ITagsORMDo
	Limit(limit int) ITagsORMDo
	Offset(offset int) ITagsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITagsORMDo
	Unscoped() ITagsORMDo
	Create(values ...*user_servicev1.TagsORM) error
	CreateInBatches(values []*user_servicev1.TagsORM, batchSize int) error
	Save(values ...*user_servicev1.TagsORM) error
	First() (*user_servicev1.TagsORM, error)
	Take() (*user_servicev1.TagsORM, error)
	Last() (*user_servicev1.TagsORM, error)
	Find() ([]*user_servicev1.TagsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.TagsORM, err error)
	FindInBatches(result *[]*user_servicev1.TagsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*user_servicev1.TagsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITagsORMDo
	Assign(attrs ...field.AssignExpr) ITagsORMDo
	Joins(fields ...field.RelationField) ITagsORMDo
	Preload(fields ...field.RelationField) ITagsORMDo
	FirstOrInit() (*user_servicev1.TagsORM, error)
	FirstOrCreate() (*user_servicev1.TagsORM, error)
	FindByPage(offset int, limit int) (result []*user_servicev1.TagsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITagsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result user_servicev1.TagsORM, err error)
	GetRecordByIDs(ids []int) (result []user_servicev1.TagsORM, err error)
	CreateRecord(item user_servicev1.TagsORM) (err error)
	UpdateRecordByID(id int, item user_servicev1.TagsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.TagsORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tagsORMDo) GetRecordByID(id int) (result user_servicev1.TagsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tags ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t tagsORMDo) GetRecordByIDs(ids []int) (result []user_servicev1.TagsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tags ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (t tagsORMDo) CreateRecord(item user_servicev1.TagsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO tags (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tagsORMDo) UpdateRecordByID(id int, item user_servicev1.TagsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE tags SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tagsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM tags ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (t tagsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.TagsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tags ORDER BY " + t.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t tagsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM tags ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t tagsORMDo) Debug() ITagsORMDo {
	return t.withDO(t.DO.Debug())
}

func (t tagsORMDo) WithContext(ctx context.Context) ITagsORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tagsORMDo) ReadDB() ITagsORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t tagsORMDo) WriteDB() ITagsORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t tagsORMDo) Session(config *gorm.Session) ITagsORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t tagsORMDo) Clauses(conds ...clause.Expression) ITagsORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tagsORMDo) Returning(value interface{}, columns ...string) ITagsORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tagsORMDo) Not(conds ...gen.Condition) ITagsORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tagsORMDo) Or(conds ...gen.Condition) ITagsORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tagsORMDo) Select(conds ...field.Expr) ITagsORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tagsORMDo) Where(conds ...gen.Condition) ITagsORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tagsORMDo) Order(conds ...field.Expr) ITagsORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tagsORMDo) Distinct(cols ...field.Expr) ITagsORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tagsORMDo) Omit(cols ...field.Expr) ITagsORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tagsORMDo) Join(table schema.Tabler, on ...field.Expr) ITagsORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tagsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITagsORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tagsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITagsORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tagsORMDo) Group(cols ...field.Expr) ITagsORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tagsORMDo) Having(conds ...gen.Condition) ITagsORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tagsORMDo) Limit(limit int) ITagsORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tagsORMDo) Offset(offset int) ITagsORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tagsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITagsORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tagsORMDo) Unscoped() ITagsORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tagsORMDo) Create(values ...*user_servicev1.TagsORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tagsORMDo) CreateInBatches(values []*user_servicev1.TagsORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tagsORMDo) Save(values ...*user_servicev1.TagsORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tagsORMDo) First() (*user_servicev1.TagsORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.TagsORM), nil
	}
}

func (t tagsORMDo) Take() (*user_servicev1.TagsORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.TagsORM), nil
	}
}

func (t tagsORMDo) Last() (*user_servicev1.TagsORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.TagsORM), nil
	}
}

func (t tagsORMDo) Find() ([]*user_servicev1.TagsORM, error) {
	result, err := t.DO.Find()
	return result.([]*user_servicev1.TagsORM), err
}

func (t tagsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.TagsORM, err error) {
	buf := make([]*user_servicev1.TagsORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tagsORMDo) FindInBatches(result *[]*user_servicev1.TagsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tagsORMDo) Attrs(attrs ...field.AssignExpr) ITagsORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tagsORMDo) Assign(attrs ...field.AssignExpr) ITagsORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tagsORMDo) Joins(fields ...field.RelationField) ITagsORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tagsORMDo) Preload(fields ...field.RelationField) ITagsORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tagsORMDo) FirstOrInit() (*user_servicev1.TagsORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.TagsORM), nil
	}
}

func (t tagsORMDo) FirstOrCreate() (*user_servicev1.TagsORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.TagsORM), nil
	}
}

func (t tagsORMDo) FindByPage(offset int, limit int) (result []*user_servicev1.TagsORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tagsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tagsORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tagsORMDo) Delete(models ...*user_servicev1.TagsORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tagsORMDo) withDO(do gen.Dao) *tagsORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
