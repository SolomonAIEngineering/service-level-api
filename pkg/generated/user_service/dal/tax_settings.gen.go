// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	user_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/user_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newTaxSettingsORM(db *gorm.DB, opts ...gen.DOOption) taxSettingsORM {
	_taxSettingsORM := taxSettingsORM{}

	_taxSettingsORM.taxSettingsORMDo.UseDB(db, opts...)
	_taxSettingsORM.taxSettingsORMDo.UseModel(&user_servicev1.TaxSettingsORM{})

	tableName := _taxSettingsORM.taxSettingsORMDo.TableName()
	_taxSettingsORM.ALL = field.NewAsterisk(tableName)
	_taxSettingsORM.FinancialPreferencesId = field.NewUint64(tableName, "financial_preferences_id")
	_taxSettingsORM.Id = field.NewUint64(tableName, "id")
	_taxSettingsORM.TaxCode = field.NewString(tableName, "tax_code")
	_taxSettingsORM.TaxPercentage = field.NewFloat64(tableName, "tax_percentage")

	_taxSettingsORM.fillFieldMap()

	return _taxSettingsORM
}

type taxSettingsORM struct {
	taxSettingsORMDo

	ALL                    field.Asterisk
	FinancialPreferencesId field.Uint64
	Id                     field.Uint64
	TaxCode                field.String
	TaxPercentage          field.Float64

	fieldMap map[string]field.Expr
}

func (t taxSettingsORM) Table(newTableName string) *taxSettingsORM {
	t.taxSettingsORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taxSettingsORM) As(alias string) *taxSettingsORM {
	t.taxSettingsORMDo.DO = *(t.taxSettingsORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taxSettingsORM) updateTableName(table string) *taxSettingsORM {
	t.ALL = field.NewAsterisk(table)
	t.FinancialPreferencesId = field.NewUint64(table, "financial_preferences_id")
	t.Id = field.NewUint64(table, "id")
	t.TaxCode = field.NewString(table, "tax_code")
	t.TaxPercentage = field.NewFloat64(table, "tax_percentage")

	t.fillFieldMap()

	return t
}

func (t *taxSettingsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taxSettingsORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["financial_preferences_id"] = t.FinancialPreferencesId
	t.fieldMap["id"] = t.Id
	t.fieldMap["tax_code"] = t.TaxCode
	t.fieldMap["tax_percentage"] = t.TaxPercentage
}

func (t taxSettingsORM) clone(db *gorm.DB) taxSettingsORM {
	t.taxSettingsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taxSettingsORM) replaceDB(db *gorm.DB) taxSettingsORM {
	t.taxSettingsORMDo.ReplaceDB(db)
	return t
}

type taxSettingsORMDo struct{ gen.DO }

type ITaxSettingsORMDo interface {
	gen.SubQuery
	Debug() ITaxSettingsORMDo
	WithContext(ctx context.Context) ITaxSettingsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaxSettingsORMDo
	WriteDB() ITaxSettingsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaxSettingsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaxSettingsORMDo
	Not(conds ...gen.Condition) ITaxSettingsORMDo
	Or(conds ...gen.Condition) ITaxSettingsORMDo
	Select(conds ...field.Expr) ITaxSettingsORMDo
	Where(conds ...gen.Condition) ITaxSettingsORMDo
	Order(conds ...field.Expr) ITaxSettingsORMDo
	Distinct(cols ...field.Expr) ITaxSettingsORMDo
	Omit(cols ...field.Expr) ITaxSettingsORMDo
	Join(table schema.Tabler, on ...field.Expr) ITaxSettingsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaxSettingsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaxSettingsORMDo
	Group(cols ...field.Expr) ITaxSettingsORMDo
	Having(conds ...gen.Condition) ITaxSettingsORMDo
	Limit(limit int) ITaxSettingsORMDo
	Offset(offset int) ITaxSettingsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaxSettingsORMDo
	Unscoped() ITaxSettingsORMDo
	Create(values ...*user_servicev1.TaxSettingsORM) error
	CreateInBatches(values []*user_servicev1.TaxSettingsORM, batchSize int) error
	Save(values ...*user_servicev1.TaxSettingsORM) error
	First() (*user_servicev1.TaxSettingsORM, error)
	Take() (*user_servicev1.TaxSettingsORM, error)
	Last() (*user_servicev1.TaxSettingsORM, error)
	Find() ([]*user_servicev1.TaxSettingsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.TaxSettingsORM, err error)
	FindInBatches(result *[]*user_servicev1.TaxSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*user_servicev1.TaxSettingsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaxSettingsORMDo
	Assign(attrs ...field.AssignExpr) ITaxSettingsORMDo
	Joins(fields ...field.RelationField) ITaxSettingsORMDo
	Preload(fields ...field.RelationField) ITaxSettingsORMDo
	FirstOrInit() (*user_servicev1.TaxSettingsORM, error)
	FirstOrCreate() (*user_servicev1.TaxSettingsORM, error)
	FindByPage(offset int, limit int) (result []*user_servicev1.TaxSettingsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaxSettingsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result user_servicev1.TaxSettingsORM, err error)
	GetRecordByIDs(ids []int) (result []user_servicev1.TaxSettingsORM, err error)
	CreateRecord(item user_servicev1.TaxSettingsORM) (err error)
	UpdateRecordByID(id int, item user_servicev1.TaxSettingsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.TaxSettingsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result user_servicev1.TaxSettingsORM, err error)
	GetByIDs(ids []uint64) (result []user_servicev1.TaxSettingsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxSettingsORMDo) GetRecordByID(id int) (result user_servicev1.TaxSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tax_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t taxSettingsORMDo) GetRecordByIDs(ids []int) (result []user_servicev1.TaxSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tax_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (t taxSettingsORMDo) CreateRecord(item user_servicev1.TaxSettingsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO tax_settings (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxSettingsORMDo) UpdateRecordByID(id int, item user_servicev1.TaxSettingsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE tax_settings SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxSettingsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM tax_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (t taxSettingsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.TaxSettingsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tax_settings ORDER BY " + t.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t taxSettingsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM tax_settings ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t taxSettingsORMDo) GetByID(id uint64) (result user_servicev1.TaxSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tax_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t taxSettingsORMDo) GetByIDs(ids []uint64) (result []user_servicev1.TaxSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tax_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t taxSettingsORMDo) Debug() ITaxSettingsORMDo {
	return t.withDO(t.DO.Debug())
}

func (t taxSettingsORMDo) WithContext(ctx context.Context) ITaxSettingsORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taxSettingsORMDo) ReadDB() ITaxSettingsORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t taxSettingsORMDo) WriteDB() ITaxSettingsORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t taxSettingsORMDo) Session(config *gorm.Session) ITaxSettingsORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t taxSettingsORMDo) Clauses(conds ...clause.Expression) ITaxSettingsORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taxSettingsORMDo) Returning(value interface{}, columns ...string) ITaxSettingsORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taxSettingsORMDo) Not(conds ...gen.Condition) ITaxSettingsORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taxSettingsORMDo) Or(conds ...gen.Condition) ITaxSettingsORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taxSettingsORMDo) Select(conds ...field.Expr) ITaxSettingsORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taxSettingsORMDo) Where(conds ...gen.Condition) ITaxSettingsORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taxSettingsORMDo) Order(conds ...field.Expr) ITaxSettingsORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taxSettingsORMDo) Distinct(cols ...field.Expr) ITaxSettingsORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taxSettingsORMDo) Omit(cols ...field.Expr) ITaxSettingsORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taxSettingsORMDo) Join(table schema.Tabler, on ...field.Expr) ITaxSettingsORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taxSettingsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaxSettingsORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taxSettingsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaxSettingsORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taxSettingsORMDo) Group(cols ...field.Expr) ITaxSettingsORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taxSettingsORMDo) Having(conds ...gen.Condition) ITaxSettingsORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taxSettingsORMDo) Limit(limit int) ITaxSettingsORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taxSettingsORMDo) Offset(offset int) ITaxSettingsORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taxSettingsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaxSettingsORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taxSettingsORMDo) Unscoped() ITaxSettingsORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taxSettingsORMDo) Create(values ...*user_servicev1.TaxSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taxSettingsORMDo) CreateInBatches(values []*user_servicev1.TaxSettingsORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taxSettingsORMDo) Save(values ...*user_servicev1.TaxSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taxSettingsORMDo) First() (*user_servicev1.TaxSettingsORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.TaxSettingsORM), nil
	}
}

func (t taxSettingsORMDo) Take() (*user_servicev1.TaxSettingsORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.TaxSettingsORM), nil
	}
}

func (t taxSettingsORMDo) Last() (*user_servicev1.TaxSettingsORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.TaxSettingsORM), nil
	}
}

func (t taxSettingsORMDo) Find() ([]*user_servicev1.TaxSettingsORM, error) {
	result, err := t.DO.Find()
	return result.([]*user_servicev1.TaxSettingsORM), err
}

func (t taxSettingsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.TaxSettingsORM, err error) {
	buf := make([]*user_servicev1.TaxSettingsORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taxSettingsORMDo) FindInBatches(result *[]*user_servicev1.TaxSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taxSettingsORMDo) Attrs(attrs ...field.AssignExpr) ITaxSettingsORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taxSettingsORMDo) Assign(attrs ...field.AssignExpr) ITaxSettingsORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taxSettingsORMDo) Joins(fields ...field.RelationField) ITaxSettingsORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taxSettingsORMDo) Preload(fields ...field.RelationField) ITaxSettingsORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taxSettingsORMDo) FirstOrInit() (*user_servicev1.TaxSettingsORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.TaxSettingsORM), nil
	}
}

func (t taxSettingsORMDo) FirstOrCreate() (*user_servicev1.TaxSettingsORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.TaxSettingsORM), nil
	}
}

func (t taxSettingsORMDo) FindByPage(offset int, limit int) (result []*user_servicev1.TaxSettingsORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taxSettingsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taxSettingsORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taxSettingsORMDo) Delete(models ...*user_servicev1.TaxSettingsORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taxSettingsORMDo) withDO(do gen.Dao) *taxSettingsORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
