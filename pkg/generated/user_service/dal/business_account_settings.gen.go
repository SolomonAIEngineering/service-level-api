// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	user_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/user_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newBusinessAccountSettingsORM(db *gorm.DB, opts ...gen.DOOption) businessAccountSettingsORM {
	_businessAccountSettingsORM := businessAccountSettingsORM{}

	_businessAccountSettingsORM.businessAccountSettingsORMDo.UseDB(db, opts...)
	_businessAccountSettingsORM.businessAccountSettingsORMDo.UseModel(&user_servicev1.BusinessAccountSettingsORM{})

	tableName := _businessAccountSettingsORM.businessAccountSettingsORMDo.TableName()
	_businessAccountSettingsORM.ALL = field.NewAsterisk(tableName)
	_businessAccountSettingsORM.BusinessAccountId = field.NewUint64(tableName, "business_account_id")
	_businessAccountSettingsORM.Id = field.NewUint64(tableName, "id")
	_businessAccountSettingsORM.AccountInformation = businessAccountSettingsORMHasOneAccountInformation{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AccountInformation", "user_servicev1.AccountInformationORM"),
		ContactInfo: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AccountInformation.ContactInfo", "user_servicev1.ContactInformationORM"),
		},
	}

	_businessAccountSettingsORM.AiPoweredInsights = businessAccountSettingsORMHasOneAiPoweredInsights{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AiPoweredInsights", "user_servicev1.AIPoweredInsightsORM"),
	}

	_businessAccountSettingsORM.FinancialPreferences = businessAccountSettingsORMHasOneFinancialPreferences{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("FinancialPreferences", "user_servicev1.FinancialPreferencesORM"),
		TaxSettings: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FinancialPreferences.TaxSettings", "user_servicev1.TaxSettingsORM"),
		},
	}

	_businessAccountSettingsORM.IntegrationSettings = businessAccountSettingsORMHasOneIntegrationSettings{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("IntegrationSettings", "user_servicev1.IntegrationSettingsORM"),
	}

	_businessAccountSettingsORM.NotificationSettings = businessAccountSettingsORMHasOneNotificationSettings{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("NotificationSettings", "user_servicev1.NotificationSettingsORM"),
	}

	_businessAccountSettingsORM.fillFieldMap()

	return _businessAccountSettingsORM
}

type businessAccountSettingsORM struct {
	businessAccountSettingsORMDo

	ALL                field.Asterisk
	BusinessAccountId  field.Uint64
	Id                 field.Uint64
	AccountInformation businessAccountSettingsORMHasOneAccountInformation

	AiPoweredInsights businessAccountSettingsORMHasOneAiPoweredInsights

	FinancialPreferences businessAccountSettingsORMHasOneFinancialPreferences

	IntegrationSettings businessAccountSettingsORMHasOneIntegrationSettings

	NotificationSettings businessAccountSettingsORMHasOneNotificationSettings

	fieldMap map[string]field.Expr
}

func (b businessAccountSettingsORM) Table(newTableName string) *businessAccountSettingsORM {
	b.businessAccountSettingsORMDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b businessAccountSettingsORM) As(alias string) *businessAccountSettingsORM {
	b.businessAccountSettingsORMDo.DO = *(b.businessAccountSettingsORMDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *businessAccountSettingsORM) updateTableName(table string) *businessAccountSettingsORM {
	b.ALL = field.NewAsterisk(table)
	b.BusinessAccountId = field.NewUint64(table, "business_account_id")
	b.Id = field.NewUint64(table, "id")

	b.fillFieldMap()

	return b
}

func (b *businessAccountSettingsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *businessAccountSettingsORM) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["business_account_id"] = b.BusinessAccountId
	b.fieldMap["id"] = b.Id

}

func (b businessAccountSettingsORM) clone(db *gorm.DB) businessAccountSettingsORM {
	b.businessAccountSettingsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b businessAccountSettingsORM) replaceDB(db *gorm.DB) businessAccountSettingsORM {
	b.businessAccountSettingsORMDo.ReplaceDB(db)
	return b
}

type businessAccountSettingsORMHasOneAccountInformation struct {
	db *gorm.DB

	field.RelationField

	ContactInfo struct {
		field.RelationField
	}
}

func (a businessAccountSettingsORMHasOneAccountInformation) Where(conds ...field.Expr) *businessAccountSettingsORMHasOneAccountInformation {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a businessAccountSettingsORMHasOneAccountInformation) WithContext(ctx context.Context) *businessAccountSettingsORMHasOneAccountInformation {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a businessAccountSettingsORMHasOneAccountInformation) Session(session *gorm.Session) *businessAccountSettingsORMHasOneAccountInformation {
	a.db = a.db.Session(session)
	return &a
}

func (a businessAccountSettingsORMHasOneAccountInformation) Model(m *user_servicev1.BusinessAccountSettingsORM) *businessAccountSettingsORMHasOneAccountInformationTx {
	return &businessAccountSettingsORMHasOneAccountInformationTx{a.db.Model(m).Association(a.Name())}
}

type businessAccountSettingsORMHasOneAccountInformationTx struct{ tx *gorm.Association }

func (a businessAccountSettingsORMHasOneAccountInformationTx) Find() (result *user_servicev1.AccountInformationORM, err error) {
	return result, a.tx.Find(&result)
}

func (a businessAccountSettingsORMHasOneAccountInformationTx) Append(values ...*user_servicev1.AccountInformationORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a businessAccountSettingsORMHasOneAccountInformationTx) Replace(values ...*user_servicev1.AccountInformationORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a businessAccountSettingsORMHasOneAccountInformationTx) Delete(values ...*user_servicev1.AccountInformationORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a businessAccountSettingsORMHasOneAccountInformationTx) Clear() error {
	return a.tx.Clear()
}

func (a businessAccountSettingsORMHasOneAccountInformationTx) Count() int64 {
	return a.tx.Count()
}

type businessAccountSettingsORMHasOneAiPoweredInsights struct {
	db *gorm.DB

	field.RelationField
}

func (a businessAccountSettingsORMHasOneAiPoweredInsights) Where(conds ...field.Expr) *businessAccountSettingsORMHasOneAiPoweredInsights {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a businessAccountSettingsORMHasOneAiPoweredInsights) WithContext(ctx context.Context) *businessAccountSettingsORMHasOneAiPoweredInsights {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a businessAccountSettingsORMHasOneAiPoweredInsights) Session(session *gorm.Session) *businessAccountSettingsORMHasOneAiPoweredInsights {
	a.db = a.db.Session(session)
	return &a
}

func (a businessAccountSettingsORMHasOneAiPoweredInsights) Model(m *user_servicev1.BusinessAccountSettingsORM) *businessAccountSettingsORMHasOneAiPoweredInsightsTx {
	return &businessAccountSettingsORMHasOneAiPoweredInsightsTx{a.db.Model(m).Association(a.Name())}
}

type businessAccountSettingsORMHasOneAiPoweredInsightsTx struct{ tx *gorm.Association }

func (a businessAccountSettingsORMHasOneAiPoweredInsightsTx) Find() (result *user_servicev1.AIPoweredInsightsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a businessAccountSettingsORMHasOneAiPoweredInsightsTx) Append(values ...*user_servicev1.AIPoweredInsightsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a businessAccountSettingsORMHasOneAiPoweredInsightsTx) Replace(values ...*user_servicev1.AIPoweredInsightsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a businessAccountSettingsORMHasOneAiPoweredInsightsTx) Delete(values ...*user_servicev1.AIPoweredInsightsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a businessAccountSettingsORMHasOneAiPoweredInsightsTx) Clear() error {
	return a.tx.Clear()
}

func (a businessAccountSettingsORMHasOneAiPoweredInsightsTx) Count() int64 {
	return a.tx.Count()
}

type businessAccountSettingsORMHasOneFinancialPreferences struct {
	db *gorm.DB

	field.RelationField

	TaxSettings struct {
		field.RelationField
	}
}

func (a businessAccountSettingsORMHasOneFinancialPreferences) Where(conds ...field.Expr) *businessAccountSettingsORMHasOneFinancialPreferences {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a businessAccountSettingsORMHasOneFinancialPreferences) WithContext(ctx context.Context) *businessAccountSettingsORMHasOneFinancialPreferences {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a businessAccountSettingsORMHasOneFinancialPreferences) Session(session *gorm.Session) *businessAccountSettingsORMHasOneFinancialPreferences {
	a.db = a.db.Session(session)
	return &a
}

func (a businessAccountSettingsORMHasOneFinancialPreferences) Model(m *user_servicev1.BusinessAccountSettingsORM) *businessAccountSettingsORMHasOneFinancialPreferencesTx {
	return &businessAccountSettingsORMHasOneFinancialPreferencesTx{a.db.Model(m).Association(a.Name())}
}

type businessAccountSettingsORMHasOneFinancialPreferencesTx struct{ tx *gorm.Association }

func (a businessAccountSettingsORMHasOneFinancialPreferencesTx) Find() (result *user_servicev1.FinancialPreferencesORM, err error) {
	return result, a.tx.Find(&result)
}

func (a businessAccountSettingsORMHasOneFinancialPreferencesTx) Append(values ...*user_servicev1.FinancialPreferencesORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a businessAccountSettingsORMHasOneFinancialPreferencesTx) Replace(values ...*user_servicev1.FinancialPreferencesORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a businessAccountSettingsORMHasOneFinancialPreferencesTx) Delete(values ...*user_servicev1.FinancialPreferencesORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a businessAccountSettingsORMHasOneFinancialPreferencesTx) Clear() error {
	return a.tx.Clear()
}

func (a businessAccountSettingsORMHasOneFinancialPreferencesTx) Count() int64 {
	return a.tx.Count()
}

type businessAccountSettingsORMHasOneIntegrationSettings struct {
	db *gorm.DB

	field.RelationField
}

func (a businessAccountSettingsORMHasOneIntegrationSettings) Where(conds ...field.Expr) *businessAccountSettingsORMHasOneIntegrationSettings {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a businessAccountSettingsORMHasOneIntegrationSettings) WithContext(ctx context.Context) *businessAccountSettingsORMHasOneIntegrationSettings {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a businessAccountSettingsORMHasOneIntegrationSettings) Session(session *gorm.Session) *businessAccountSettingsORMHasOneIntegrationSettings {
	a.db = a.db.Session(session)
	return &a
}

func (a businessAccountSettingsORMHasOneIntegrationSettings) Model(m *user_servicev1.BusinessAccountSettingsORM) *businessAccountSettingsORMHasOneIntegrationSettingsTx {
	return &businessAccountSettingsORMHasOneIntegrationSettingsTx{a.db.Model(m).Association(a.Name())}
}

type businessAccountSettingsORMHasOneIntegrationSettingsTx struct{ tx *gorm.Association }

func (a businessAccountSettingsORMHasOneIntegrationSettingsTx) Find() (result *user_servicev1.IntegrationSettingsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a businessAccountSettingsORMHasOneIntegrationSettingsTx) Append(values ...*user_servicev1.IntegrationSettingsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a businessAccountSettingsORMHasOneIntegrationSettingsTx) Replace(values ...*user_servicev1.IntegrationSettingsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a businessAccountSettingsORMHasOneIntegrationSettingsTx) Delete(values ...*user_servicev1.IntegrationSettingsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a businessAccountSettingsORMHasOneIntegrationSettingsTx) Clear() error {
	return a.tx.Clear()
}

func (a businessAccountSettingsORMHasOneIntegrationSettingsTx) Count() int64 {
	return a.tx.Count()
}

type businessAccountSettingsORMHasOneNotificationSettings struct {
	db *gorm.DB

	field.RelationField
}

func (a businessAccountSettingsORMHasOneNotificationSettings) Where(conds ...field.Expr) *businessAccountSettingsORMHasOneNotificationSettings {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a businessAccountSettingsORMHasOneNotificationSettings) WithContext(ctx context.Context) *businessAccountSettingsORMHasOneNotificationSettings {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a businessAccountSettingsORMHasOneNotificationSettings) Session(session *gorm.Session) *businessAccountSettingsORMHasOneNotificationSettings {
	a.db = a.db.Session(session)
	return &a
}

func (a businessAccountSettingsORMHasOneNotificationSettings) Model(m *user_servicev1.BusinessAccountSettingsORM) *businessAccountSettingsORMHasOneNotificationSettingsTx {
	return &businessAccountSettingsORMHasOneNotificationSettingsTx{a.db.Model(m).Association(a.Name())}
}

type businessAccountSettingsORMHasOneNotificationSettingsTx struct{ tx *gorm.Association }

func (a businessAccountSettingsORMHasOneNotificationSettingsTx) Find() (result *user_servicev1.NotificationSettingsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a businessAccountSettingsORMHasOneNotificationSettingsTx) Append(values ...*user_servicev1.NotificationSettingsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a businessAccountSettingsORMHasOneNotificationSettingsTx) Replace(values ...*user_servicev1.NotificationSettingsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a businessAccountSettingsORMHasOneNotificationSettingsTx) Delete(values ...*user_servicev1.NotificationSettingsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a businessAccountSettingsORMHasOneNotificationSettingsTx) Clear() error {
	return a.tx.Clear()
}

func (a businessAccountSettingsORMHasOneNotificationSettingsTx) Count() int64 {
	return a.tx.Count()
}

type businessAccountSettingsORMDo struct{ gen.DO }

type IBusinessAccountSettingsORMDo interface {
	gen.SubQuery
	Debug() IBusinessAccountSettingsORMDo
	WithContext(ctx context.Context) IBusinessAccountSettingsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBusinessAccountSettingsORMDo
	WriteDB() IBusinessAccountSettingsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBusinessAccountSettingsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBusinessAccountSettingsORMDo
	Not(conds ...gen.Condition) IBusinessAccountSettingsORMDo
	Or(conds ...gen.Condition) IBusinessAccountSettingsORMDo
	Select(conds ...field.Expr) IBusinessAccountSettingsORMDo
	Where(conds ...gen.Condition) IBusinessAccountSettingsORMDo
	Order(conds ...field.Expr) IBusinessAccountSettingsORMDo
	Distinct(cols ...field.Expr) IBusinessAccountSettingsORMDo
	Omit(cols ...field.Expr) IBusinessAccountSettingsORMDo
	Join(table schema.Tabler, on ...field.Expr) IBusinessAccountSettingsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBusinessAccountSettingsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBusinessAccountSettingsORMDo
	Group(cols ...field.Expr) IBusinessAccountSettingsORMDo
	Having(conds ...gen.Condition) IBusinessAccountSettingsORMDo
	Limit(limit int) IBusinessAccountSettingsORMDo
	Offset(offset int) IBusinessAccountSettingsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBusinessAccountSettingsORMDo
	Unscoped() IBusinessAccountSettingsORMDo
	Create(values ...*user_servicev1.BusinessAccountSettingsORM) error
	CreateInBatches(values []*user_servicev1.BusinessAccountSettingsORM, batchSize int) error
	Save(values ...*user_servicev1.BusinessAccountSettingsORM) error
	First() (*user_servicev1.BusinessAccountSettingsORM, error)
	Take() (*user_servicev1.BusinessAccountSettingsORM, error)
	Last() (*user_servicev1.BusinessAccountSettingsORM, error)
	Find() ([]*user_servicev1.BusinessAccountSettingsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.BusinessAccountSettingsORM, err error)
	FindInBatches(result *[]*user_servicev1.BusinessAccountSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*user_servicev1.BusinessAccountSettingsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBusinessAccountSettingsORMDo
	Assign(attrs ...field.AssignExpr) IBusinessAccountSettingsORMDo
	Joins(fields ...field.RelationField) IBusinessAccountSettingsORMDo
	Preload(fields ...field.RelationField) IBusinessAccountSettingsORMDo
	FirstOrInit() (*user_servicev1.BusinessAccountSettingsORM, error)
	FirstOrCreate() (*user_servicev1.BusinessAccountSettingsORM, error)
	FindByPage(offset int, limit int) (result []*user_servicev1.BusinessAccountSettingsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBusinessAccountSettingsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result user_servicev1.BusinessAccountSettingsORM, err error)
	GetRecordByIDs(ids []int) (result []user_servicev1.BusinessAccountSettingsORM, err error)
	CreateRecord(item user_servicev1.BusinessAccountSettingsORM) (err error)
	UpdateRecordByID(id int, item user_servicev1.BusinessAccountSettingsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.BusinessAccountSettingsORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessAccountSettingsORMDo) GetRecordByID(id int) (result user_servicev1.BusinessAccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (b businessAccountSettingsORMDo) GetRecordByIDs(ids []int) (result []user_servicev1.BusinessAccountSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (b businessAccountSettingsORMDo) CreateRecord(item user_servicev1.BusinessAccountSettingsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO business_account_settings (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessAccountSettingsORMDo) UpdateRecordByID(id int, item user_servicev1.BusinessAccountSettingsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE business_account_settings SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (b businessAccountSettingsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM business_account_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (b businessAccountSettingsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.BusinessAccountSettingsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM business_account_settings ORDER BY " + b.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (b businessAccountSettingsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM business_account_settings ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b businessAccountSettingsORMDo) Debug() IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Debug())
}

func (b businessAccountSettingsORMDo) WithContext(ctx context.Context) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b businessAccountSettingsORMDo) ReadDB() IBusinessAccountSettingsORMDo {
	return b.Clauses(dbresolver.Read)
}

func (b businessAccountSettingsORMDo) WriteDB() IBusinessAccountSettingsORMDo {
	return b.Clauses(dbresolver.Write)
}

func (b businessAccountSettingsORMDo) Session(config *gorm.Session) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Session(config))
}

func (b businessAccountSettingsORMDo) Clauses(conds ...clause.Expression) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b businessAccountSettingsORMDo) Returning(value interface{}, columns ...string) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b businessAccountSettingsORMDo) Not(conds ...gen.Condition) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b businessAccountSettingsORMDo) Or(conds ...gen.Condition) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b businessAccountSettingsORMDo) Select(conds ...field.Expr) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b businessAccountSettingsORMDo) Where(conds ...gen.Condition) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b businessAccountSettingsORMDo) Order(conds ...field.Expr) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b businessAccountSettingsORMDo) Distinct(cols ...field.Expr) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b businessAccountSettingsORMDo) Omit(cols ...field.Expr) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b businessAccountSettingsORMDo) Join(table schema.Tabler, on ...field.Expr) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b businessAccountSettingsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b businessAccountSettingsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b businessAccountSettingsORMDo) Group(cols ...field.Expr) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b businessAccountSettingsORMDo) Having(conds ...gen.Condition) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b businessAccountSettingsORMDo) Limit(limit int) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b businessAccountSettingsORMDo) Offset(offset int) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b businessAccountSettingsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b businessAccountSettingsORMDo) Unscoped() IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Unscoped())
}

func (b businessAccountSettingsORMDo) Create(values ...*user_servicev1.BusinessAccountSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b businessAccountSettingsORMDo) CreateInBatches(values []*user_servicev1.BusinessAccountSettingsORM, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b businessAccountSettingsORMDo) Save(values ...*user_servicev1.BusinessAccountSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b businessAccountSettingsORMDo) First() (*user_servicev1.BusinessAccountSettingsORM, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.BusinessAccountSettingsORM), nil
	}
}

func (b businessAccountSettingsORMDo) Take() (*user_servicev1.BusinessAccountSettingsORM, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.BusinessAccountSettingsORM), nil
	}
}

func (b businessAccountSettingsORMDo) Last() (*user_servicev1.BusinessAccountSettingsORM, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.BusinessAccountSettingsORM), nil
	}
}

func (b businessAccountSettingsORMDo) Find() ([]*user_servicev1.BusinessAccountSettingsORM, error) {
	result, err := b.DO.Find()
	return result.([]*user_servicev1.BusinessAccountSettingsORM), err
}

func (b businessAccountSettingsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.BusinessAccountSettingsORM, err error) {
	buf := make([]*user_servicev1.BusinessAccountSettingsORM, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b businessAccountSettingsORMDo) FindInBatches(result *[]*user_servicev1.BusinessAccountSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b businessAccountSettingsORMDo) Attrs(attrs ...field.AssignExpr) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b businessAccountSettingsORMDo) Assign(attrs ...field.AssignExpr) IBusinessAccountSettingsORMDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b businessAccountSettingsORMDo) Joins(fields ...field.RelationField) IBusinessAccountSettingsORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b businessAccountSettingsORMDo) Preload(fields ...field.RelationField) IBusinessAccountSettingsORMDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b businessAccountSettingsORMDo) FirstOrInit() (*user_servicev1.BusinessAccountSettingsORM, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.BusinessAccountSettingsORM), nil
	}
}

func (b businessAccountSettingsORMDo) FirstOrCreate() (*user_servicev1.BusinessAccountSettingsORM, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.BusinessAccountSettingsORM), nil
	}
}

func (b businessAccountSettingsORMDo) FindByPage(offset int, limit int) (result []*user_servicev1.BusinessAccountSettingsORM, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b businessAccountSettingsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b businessAccountSettingsORMDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b businessAccountSettingsORMDo) Delete(models ...*user_servicev1.BusinessAccountSettingsORM) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *businessAccountSettingsORMDo) withDO(do gen.Dao) *businessAccountSettingsORMDo {
	b.DO = *do.(*gen.DO)
	return b
}
