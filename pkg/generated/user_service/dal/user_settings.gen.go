// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	user_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/user_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newUserSettingsORM(db *gorm.DB, opts ...gen.DOOption) userSettingsORM {
	_userSettingsORM := userSettingsORM{}

	_userSettingsORM.userSettingsORMDo.UseDB(db, opts...)
	_userSettingsORM.userSettingsORMDo.UseModel(&user_servicev1.UserSettingsORM{})

	tableName := _userSettingsORM.userSettingsORMDo.TableName()
	_userSettingsORM.ALL = field.NewAsterisk(tableName)
	_userSettingsORM.AppTheme = field.NewString(tableName, "app_theme")
	_userSettingsORM.DatetimeFormat = field.NewString(tableName, "datetime_format")
	_userSettingsORM.DefaultCurrency = field.NewString(tableName, "default_currency")
	_userSettingsORM.EnableGoalJournal = field.NewBool(tableName, "enable_goal_journal")
	_userSettingsORM.Id = field.NewUint64(tableName, "id")
	_userSettingsORM.InvestmentRiskTolerance = field.NewString(tableName, "investment_risk_tolerance")
	_userSettingsORM.NotificationType = field.NewString(tableName, "notification_type")
	_userSettingsORM.PreferredLanguage = field.NewString(tableName, "preferred_language")
	_userSettingsORM.PublicProfile = field.NewBool(tableName, "public_profile")
	_userSettingsORM.TwoFactorAuthenticationEnabled = field.NewBool(tableName, "two_factor_authentication_enabled")
	_userSettingsORM.UserAccountId = field.NewUint64(tableName, "user_account_id")

	_userSettingsORM.fillFieldMap()

	return _userSettingsORM
}

type userSettingsORM struct {
	userSettingsORMDo

	ALL                            field.Asterisk
	AppTheme                       field.String
	DatetimeFormat                 field.String
	DefaultCurrency                field.String
	EnableGoalJournal              field.Bool
	Id                             field.Uint64
	InvestmentRiskTolerance        field.String
	NotificationType               field.String
	PreferredLanguage              field.String
	PublicProfile                  field.Bool
	TwoFactorAuthenticationEnabled field.Bool
	UserAccountId                  field.Uint64

	fieldMap map[string]field.Expr
}

func (u userSettingsORM) Table(newTableName string) *userSettingsORM {
	u.userSettingsORMDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSettingsORM) As(alias string) *userSettingsORM {
	u.userSettingsORMDo.DO = *(u.userSettingsORMDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSettingsORM) updateTableName(table string) *userSettingsORM {
	u.ALL = field.NewAsterisk(table)
	u.AppTheme = field.NewString(table, "app_theme")
	u.DatetimeFormat = field.NewString(table, "datetime_format")
	u.DefaultCurrency = field.NewString(table, "default_currency")
	u.EnableGoalJournal = field.NewBool(table, "enable_goal_journal")
	u.Id = field.NewUint64(table, "id")
	u.InvestmentRiskTolerance = field.NewString(table, "investment_risk_tolerance")
	u.NotificationType = field.NewString(table, "notification_type")
	u.PreferredLanguage = field.NewString(table, "preferred_language")
	u.PublicProfile = field.NewBool(table, "public_profile")
	u.TwoFactorAuthenticationEnabled = field.NewBool(table, "two_factor_authentication_enabled")
	u.UserAccountId = field.NewUint64(table, "user_account_id")

	u.fillFieldMap()

	return u
}

func (u *userSettingsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSettingsORM) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["app_theme"] = u.AppTheme
	u.fieldMap["datetime_format"] = u.DatetimeFormat
	u.fieldMap["default_currency"] = u.DefaultCurrency
	u.fieldMap["enable_goal_journal"] = u.EnableGoalJournal
	u.fieldMap["id"] = u.Id
	u.fieldMap["investment_risk_tolerance"] = u.InvestmentRiskTolerance
	u.fieldMap["notification_type"] = u.NotificationType
	u.fieldMap["preferred_language"] = u.PreferredLanguage
	u.fieldMap["public_profile"] = u.PublicProfile
	u.fieldMap["two_factor_authentication_enabled"] = u.TwoFactorAuthenticationEnabled
	u.fieldMap["user_account_id"] = u.UserAccountId
}

func (u userSettingsORM) clone(db *gorm.DB) userSettingsORM {
	u.userSettingsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSettingsORM) replaceDB(db *gorm.DB) userSettingsORM {
	u.userSettingsORMDo.ReplaceDB(db)
	return u
}

type userSettingsORMDo struct{ gen.DO }

type IUserSettingsORMDo interface {
	gen.SubQuery
	Debug() IUserSettingsORMDo
	WithContext(ctx context.Context) IUserSettingsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSettingsORMDo
	WriteDB() IUserSettingsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserSettingsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserSettingsORMDo
	Not(conds ...gen.Condition) IUserSettingsORMDo
	Or(conds ...gen.Condition) IUserSettingsORMDo
	Select(conds ...field.Expr) IUserSettingsORMDo
	Where(conds ...gen.Condition) IUserSettingsORMDo
	Order(conds ...field.Expr) IUserSettingsORMDo
	Distinct(cols ...field.Expr) IUserSettingsORMDo
	Omit(cols ...field.Expr) IUserSettingsORMDo
	Join(table schema.Tabler, on ...field.Expr) IUserSettingsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSettingsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSettingsORMDo
	Group(cols ...field.Expr) IUserSettingsORMDo
	Having(conds ...gen.Condition) IUserSettingsORMDo
	Limit(limit int) IUserSettingsORMDo
	Offset(offset int) IUserSettingsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSettingsORMDo
	Unscoped() IUserSettingsORMDo
	Create(values ...*user_servicev1.UserSettingsORM) error
	CreateInBatches(values []*user_servicev1.UserSettingsORM, batchSize int) error
	Save(values ...*user_servicev1.UserSettingsORM) error
	First() (*user_servicev1.UserSettingsORM, error)
	Take() (*user_servicev1.UserSettingsORM, error)
	Last() (*user_servicev1.UserSettingsORM, error)
	Find() ([]*user_servicev1.UserSettingsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.UserSettingsORM, err error)
	FindInBatches(result *[]*user_servicev1.UserSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*user_servicev1.UserSettingsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSettingsORMDo
	Assign(attrs ...field.AssignExpr) IUserSettingsORMDo
	Joins(fields ...field.RelationField) IUserSettingsORMDo
	Preload(fields ...field.RelationField) IUserSettingsORMDo
	FirstOrInit() (*user_servicev1.UserSettingsORM, error)
	FirstOrCreate() (*user_servicev1.UserSettingsORM, error)
	FindByPage(offset int, limit int) (result []*user_servicev1.UserSettingsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSettingsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result user_servicev1.UserSettingsORM, err error)
	GetRecordByIDs(ids []int) (result []user_servicev1.UserSettingsORM, err error)
	CreateRecord(item user_servicev1.UserSettingsORM) (err error)
	UpdateRecordByID(id int, item user_servicev1.UserSettingsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.UserSettingsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result user_servicev1.UserSettingsORM, err error)
	GetByIDs(ids []uint64) (result []user_servicev1.UserSettingsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (u userSettingsORMDo) GetRecordByID(id int) (result user_servicev1.UserSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (u userSettingsORMDo) GetRecordByIDs(ids []int) (result []user_servicev1.UserSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (u userSettingsORMDo) CreateRecord(item user_servicev1.UserSettingsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO user_settings (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (u userSettingsORMDo) UpdateRecordByID(id int, item user_servicev1.UserSettingsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE user_settings SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (u userSettingsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM user_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (u userSettingsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.UserSettingsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_settings ORDER BY " + u.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (u userSettingsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM user_settings ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (u userSettingsORMDo) GetByID(id uint64) (result user_servicev1.UserSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (u userSettingsORMDo) GetByIDs(ids []uint64) (result []user_servicev1.UserSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userSettingsORMDo) Debug() IUserSettingsORMDo {
	return u.withDO(u.DO.Debug())
}

func (u userSettingsORMDo) WithContext(ctx context.Context) IUserSettingsORMDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSettingsORMDo) ReadDB() IUserSettingsORMDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSettingsORMDo) WriteDB() IUserSettingsORMDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSettingsORMDo) Session(config *gorm.Session) IUserSettingsORMDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSettingsORMDo) Clauses(conds ...clause.Expression) IUserSettingsORMDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSettingsORMDo) Returning(value interface{}, columns ...string) IUserSettingsORMDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSettingsORMDo) Not(conds ...gen.Condition) IUserSettingsORMDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSettingsORMDo) Or(conds ...gen.Condition) IUserSettingsORMDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSettingsORMDo) Select(conds ...field.Expr) IUserSettingsORMDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSettingsORMDo) Where(conds ...gen.Condition) IUserSettingsORMDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSettingsORMDo) Order(conds ...field.Expr) IUserSettingsORMDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSettingsORMDo) Distinct(cols ...field.Expr) IUserSettingsORMDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSettingsORMDo) Omit(cols ...field.Expr) IUserSettingsORMDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSettingsORMDo) Join(table schema.Tabler, on ...field.Expr) IUserSettingsORMDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSettingsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSettingsORMDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSettingsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserSettingsORMDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSettingsORMDo) Group(cols ...field.Expr) IUserSettingsORMDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSettingsORMDo) Having(conds ...gen.Condition) IUserSettingsORMDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSettingsORMDo) Limit(limit int) IUserSettingsORMDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSettingsORMDo) Offset(offset int) IUserSettingsORMDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSettingsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSettingsORMDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSettingsORMDo) Unscoped() IUserSettingsORMDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSettingsORMDo) Create(values ...*user_servicev1.UserSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSettingsORMDo) CreateInBatches(values []*user_servicev1.UserSettingsORM, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSettingsORMDo) Save(values ...*user_servicev1.UserSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSettingsORMDo) First() (*user_servicev1.UserSettingsORM, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.UserSettingsORM), nil
	}
}

func (u userSettingsORMDo) Take() (*user_servicev1.UserSettingsORM, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.UserSettingsORM), nil
	}
}

func (u userSettingsORMDo) Last() (*user_servicev1.UserSettingsORM, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.UserSettingsORM), nil
	}
}

func (u userSettingsORMDo) Find() ([]*user_servicev1.UserSettingsORM, error) {
	result, err := u.DO.Find()
	return result.([]*user_servicev1.UserSettingsORM), err
}

func (u userSettingsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.UserSettingsORM, err error) {
	buf := make([]*user_servicev1.UserSettingsORM, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSettingsORMDo) FindInBatches(result *[]*user_servicev1.UserSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSettingsORMDo) Attrs(attrs ...field.AssignExpr) IUserSettingsORMDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSettingsORMDo) Assign(attrs ...field.AssignExpr) IUserSettingsORMDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSettingsORMDo) Joins(fields ...field.RelationField) IUserSettingsORMDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSettingsORMDo) Preload(fields ...field.RelationField) IUserSettingsORMDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSettingsORMDo) FirstOrInit() (*user_servicev1.UserSettingsORM, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.UserSettingsORM), nil
	}
}

func (u userSettingsORMDo) FirstOrCreate() (*user_servicev1.UserSettingsORM, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.UserSettingsORM), nil
	}
}

func (u userSettingsORMDo) FindByPage(offset int, limit int) (result []*user_servicev1.UserSettingsORM, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSettingsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSettingsORMDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSettingsORMDo) Delete(models ...*user_servicev1.UserSettingsORM) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSettingsORMDo) withDO(do gen.Dao) *userSettingsORMDo {
	u.DO = *do.(*gen.DO)
	return u
}
