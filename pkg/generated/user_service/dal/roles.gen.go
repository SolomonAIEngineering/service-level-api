// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	user_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/user_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newRoleORM(db *gorm.DB, opts ...gen.DOOption) roleORM {
	_roleORM := roleORM{}

	_roleORM.roleORMDo.UseDB(db, opts...)
	_roleORM.roleORMDo.UseModel(&user_servicev1.RoleORM{})

	tableName := _roleORM.roleORMDo.TableName()
	_roleORM.ALL = field.NewAsterisk(tableName)
	_roleORM.BusinessAccountId = field.NewUint64(tableName, "business_account_id")
	_roleORM.CanCreateProjects = field.NewBool(tableName, "can_create_projects")
	_roleORM.CanCreateReports = field.NewBool(tableName, "can_create_reports")
	_roleORM.CanCreateUsers = field.NewBool(tableName, "can_create_users")
	_roleORM.CanDeleteProjects = field.NewBool(tableName, "can_delete_projects")
	_roleORM.CanDeleteReports = field.NewBool(tableName, "can_delete_reports")
	_roleORM.CanDeleteUsers = field.NewBool(tableName, "can_delete_users")
	_roleORM.CanReadProjects = field.NewBool(tableName, "can_read_projects")
	_roleORM.CanReadReports = field.NewBool(tableName, "can_read_reports")
	_roleORM.CanReadUsers = field.NewBool(tableName, "can_read_users")
	_roleORM.CanUpdateProjects = field.NewBool(tableName, "can_update_projects")
	_roleORM.CanUpdateReports = field.NewBool(tableName, "can_update_reports")
	_roleORM.CanUpdateUsers = field.NewBool(tableName, "can_update_users")
	_roleORM.CreatedAt = field.NewTime(tableName, "created_at")
	_roleORM.Id = field.NewInt64(tableName, "id")
	_roleORM.Name = field.NewString(tableName, "name")
	_roleORM.Type = field.NewString(tableName, "type")
	_roleORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_roleORM.UserAccountId = field.NewUint64(tableName, "user_account_id")
	_roleORM.AuditLog = roleORMHasManyAuditLog{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AuditLog", "user_servicev1.RoleAuditEventsORM"),
	}

	_roleORM.fillFieldMap()

	return _roleORM
}

type roleORM struct {
	roleORMDo

	ALL               field.Asterisk
	BusinessAccountId field.Uint64
	CanCreateProjects field.Bool
	CanCreateReports  field.Bool
	CanCreateUsers    field.Bool
	CanDeleteProjects field.Bool
	CanDeleteReports  field.Bool
	CanDeleteUsers    field.Bool
	CanReadProjects   field.Bool
	CanReadReports    field.Bool
	CanReadUsers      field.Bool
	CanUpdateProjects field.Bool
	CanUpdateReports  field.Bool
	CanUpdateUsers    field.Bool
	CreatedAt         field.Time
	Id                field.Int64
	Name              field.String
	Type              field.String
	UpdatedAt         field.Time
	UserAccountId     field.Uint64
	AuditLog          roleORMHasManyAuditLog

	fieldMap map[string]field.Expr
}

func (r roleORM) Table(newTableName string) *roleORM {
	r.roleORMDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleORM) As(alias string) *roleORM {
	r.roleORMDo.DO = *(r.roleORMDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleORM) updateTableName(table string) *roleORM {
	r.ALL = field.NewAsterisk(table)
	r.BusinessAccountId = field.NewUint64(table, "business_account_id")
	r.CanCreateProjects = field.NewBool(table, "can_create_projects")
	r.CanCreateReports = field.NewBool(table, "can_create_reports")
	r.CanCreateUsers = field.NewBool(table, "can_create_users")
	r.CanDeleteProjects = field.NewBool(table, "can_delete_projects")
	r.CanDeleteReports = field.NewBool(table, "can_delete_reports")
	r.CanDeleteUsers = field.NewBool(table, "can_delete_users")
	r.CanReadProjects = field.NewBool(table, "can_read_projects")
	r.CanReadReports = field.NewBool(table, "can_read_reports")
	r.CanReadUsers = field.NewBool(table, "can_read_users")
	r.CanUpdateProjects = field.NewBool(table, "can_update_projects")
	r.CanUpdateReports = field.NewBool(table, "can_update_reports")
	r.CanUpdateUsers = field.NewBool(table, "can_update_users")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.Id = field.NewInt64(table, "id")
	r.Name = field.NewString(table, "name")
	r.Type = field.NewString(table, "type")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.UserAccountId = field.NewUint64(table, "user_account_id")

	r.fillFieldMap()

	return r
}

func (r *roleORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleORM) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 20)
	r.fieldMap["business_account_id"] = r.BusinessAccountId
	r.fieldMap["can_create_projects"] = r.CanCreateProjects
	r.fieldMap["can_create_reports"] = r.CanCreateReports
	r.fieldMap["can_create_users"] = r.CanCreateUsers
	r.fieldMap["can_delete_projects"] = r.CanDeleteProjects
	r.fieldMap["can_delete_reports"] = r.CanDeleteReports
	r.fieldMap["can_delete_users"] = r.CanDeleteUsers
	r.fieldMap["can_read_projects"] = r.CanReadProjects
	r.fieldMap["can_read_reports"] = r.CanReadReports
	r.fieldMap["can_read_users"] = r.CanReadUsers
	r.fieldMap["can_update_projects"] = r.CanUpdateProjects
	r.fieldMap["can_update_reports"] = r.CanUpdateReports
	r.fieldMap["can_update_users"] = r.CanUpdateUsers
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["id"] = r.Id
	r.fieldMap["name"] = r.Name
	r.fieldMap["type"] = r.Type
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["user_account_id"] = r.UserAccountId

}

func (r roleORM) clone(db *gorm.DB) roleORM {
	r.roleORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleORM) replaceDB(db *gorm.DB) roleORM {
	r.roleORMDo.ReplaceDB(db)
	return r
}

type roleORMHasManyAuditLog struct {
	db *gorm.DB

	field.RelationField
}

func (a roleORMHasManyAuditLog) Where(conds ...field.Expr) *roleORMHasManyAuditLog {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roleORMHasManyAuditLog) WithContext(ctx context.Context) *roleORMHasManyAuditLog {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roleORMHasManyAuditLog) Session(session *gorm.Session) *roleORMHasManyAuditLog {
	a.db = a.db.Session(session)
	return &a
}

func (a roleORMHasManyAuditLog) Model(m *user_servicev1.RoleORM) *roleORMHasManyAuditLogTx {
	return &roleORMHasManyAuditLogTx{a.db.Model(m).Association(a.Name())}
}

type roleORMHasManyAuditLogTx struct{ tx *gorm.Association }

func (a roleORMHasManyAuditLogTx) Find() (result []*user_servicev1.RoleAuditEventsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a roleORMHasManyAuditLogTx) Append(values ...*user_servicev1.RoleAuditEventsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roleORMHasManyAuditLogTx) Replace(values ...*user_servicev1.RoleAuditEventsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roleORMHasManyAuditLogTx) Delete(values ...*user_servicev1.RoleAuditEventsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roleORMHasManyAuditLogTx) Clear() error {
	return a.tx.Clear()
}

func (a roleORMHasManyAuditLogTx) Count() int64 {
	return a.tx.Count()
}

type roleORMDo struct{ gen.DO }

type IRoleORMDo interface {
	gen.SubQuery
	Debug() IRoleORMDo
	WithContext(ctx context.Context) IRoleORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoleORMDo
	WriteDB() IRoleORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoleORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoleORMDo
	Not(conds ...gen.Condition) IRoleORMDo
	Or(conds ...gen.Condition) IRoleORMDo
	Select(conds ...field.Expr) IRoleORMDo
	Where(conds ...gen.Condition) IRoleORMDo
	Order(conds ...field.Expr) IRoleORMDo
	Distinct(cols ...field.Expr) IRoleORMDo
	Omit(cols ...field.Expr) IRoleORMDo
	Join(table schema.Tabler, on ...field.Expr) IRoleORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoleORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoleORMDo
	Group(cols ...field.Expr) IRoleORMDo
	Having(conds ...gen.Condition) IRoleORMDo
	Limit(limit int) IRoleORMDo
	Offset(offset int) IRoleORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleORMDo
	Unscoped() IRoleORMDo
	Create(values ...*user_servicev1.RoleORM) error
	CreateInBatches(values []*user_servicev1.RoleORM, batchSize int) error
	Save(values ...*user_servicev1.RoleORM) error
	First() (*user_servicev1.RoleORM, error)
	Take() (*user_servicev1.RoleORM, error)
	Last() (*user_servicev1.RoleORM, error)
	Find() ([]*user_servicev1.RoleORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.RoleORM, err error)
	FindInBatches(result *[]*user_servicev1.RoleORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*user_servicev1.RoleORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoleORMDo
	Assign(attrs ...field.AssignExpr) IRoleORMDo
	Joins(fields ...field.RelationField) IRoleORMDo
	Preload(fields ...field.RelationField) IRoleORMDo
	FirstOrInit() (*user_servicev1.RoleORM, error)
	FirstOrCreate() (*user_servicev1.RoleORM, error)
	FindByPage(offset int, limit int) (result []*user_servicev1.RoleORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoleORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result user_servicev1.RoleORM, err error)
	GetRecordByIDs(ids []int) (result []user_servicev1.RoleORM, err error)
	CreateRecord(item user_servicev1.RoleORM) (err error)
	UpdateRecordByID(id int, item user_servicev1.RoleORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.RoleORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result user_servicev1.RoleORM, err error)
	GetByIDs(ids []uint64) (result []user_servicev1.RoleORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r roleORMDo) GetRecordByID(id int) (result user_servicev1.RoleORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM roles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (r roleORMDo) GetRecordByIDs(ids []int) (result []user_servicev1.RoleORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM roles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (r roleORMDo) CreateRecord(item user_servicev1.RoleORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO roles (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (r roleORMDo) UpdateRecordByID(id int, item user_servicev1.RoleORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE roles SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r roleORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM roles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (r roleORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.RoleORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM roles ORDER BY " + r.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (r roleORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM roles ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r roleORMDo) GetByID(id uint64) (result user_servicev1.RoleORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM roles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (r roleORMDo) GetByIDs(ids []uint64) (result []user_servicev1.RoleORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM roles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (r roleORMDo) Debug() IRoleORMDo {
	return r.withDO(r.DO.Debug())
}

func (r roleORMDo) WithContext(ctx context.Context) IRoleORMDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleORMDo) ReadDB() IRoleORMDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleORMDo) WriteDB() IRoleORMDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleORMDo) Session(config *gorm.Session) IRoleORMDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleORMDo) Clauses(conds ...clause.Expression) IRoleORMDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleORMDo) Returning(value interface{}, columns ...string) IRoleORMDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleORMDo) Not(conds ...gen.Condition) IRoleORMDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleORMDo) Or(conds ...gen.Condition) IRoleORMDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleORMDo) Select(conds ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleORMDo) Where(conds ...gen.Condition) IRoleORMDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleORMDo) Order(conds ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleORMDo) Distinct(cols ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleORMDo) Omit(cols ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleORMDo) Join(table schema.Tabler, on ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleORMDo) Group(cols ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleORMDo) Having(conds ...gen.Condition) IRoleORMDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleORMDo) Limit(limit int) IRoleORMDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleORMDo) Offset(offset int) IRoleORMDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleORMDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleORMDo) Unscoped() IRoleORMDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleORMDo) Create(values ...*user_servicev1.RoleORM) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleORMDo) CreateInBatches(values []*user_servicev1.RoleORM, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleORMDo) Save(values ...*user_servicev1.RoleORM) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleORMDo) First() (*user_servicev1.RoleORM, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.RoleORM), nil
	}
}

func (r roleORMDo) Take() (*user_servicev1.RoleORM, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.RoleORM), nil
	}
}

func (r roleORMDo) Last() (*user_servicev1.RoleORM, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.RoleORM), nil
	}
}

func (r roleORMDo) Find() ([]*user_servicev1.RoleORM, error) {
	result, err := r.DO.Find()
	return result.([]*user_servicev1.RoleORM), err
}

func (r roleORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.RoleORM, err error) {
	buf := make([]*user_servicev1.RoleORM, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleORMDo) FindInBatches(result *[]*user_servicev1.RoleORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleORMDo) Attrs(attrs ...field.AssignExpr) IRoleORMDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleORMDo) Assign(attrs ...field.AssignExpr) IRoleORMDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleORMDo) Joins(fields ...field.RelationField) IRoleORMDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleORMDo) Preload(fields ...field.RelationField) IRoleORMDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleORMDo) FirstOrInit() (*user_servicev1.RoleORM, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.RoleORM), nil
	}
}

func (r roleORMDo) FirstOrCreate() (*user_servicev1.RoleORM, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.RoleORM), nil
	}
}

func (r roleORMDo) FindByPage(offset int, limit int) (result []*user_servicev1.RoleORM, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleORMDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleORMDo) Delete(models ...*user_servicev1.RoleORM) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleORMDo) withDO(do gen.Dao) *roleORMDo {
	r.DO = *do.(*gen.DO)
	return r
}
