// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	user_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/user_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newIntegrationSettingsORM(db *gorm.DB, opts ...gen.DOOption) integrationSettingsORM {
	_integrationSettingsORM := integrationSettingsORM{}

	_integrationSettingsORM.integrationSettingsORMDo.UseDB(db, opts...)
	_integrationSettingsORM.integrationSettingsORMDo.UseModel(&user_servicev1.IntegrationSettingsORM{})

	tableName := _integrationSettingsORM.integrationSettingsORMDo.TableName()
	_integrationSettingsORM.ALL = field.NewAsterisk(tableName)
	_integrationSettingsORM.BankAccountLinking = field.NewBool(tableName, "bank_account_linking")
	_integrationSettingsORM.BusinessAccountSettingsId = field.NewUint64(tableName, "business_account_settings_id")
	_integrationSettingsORM.Id = field.NewUint64(tableName, "id")
	_integrationSettingsORM.ThirdPartyApps = field.NewField(tableName, "third_party_apps")

	_integrationSettingsORM.fillFieldMap()

	return _integrationSettingsORM
}

type integrationSettingsORM struct {
	integrationSettingsORMDo

	ALL                       field.Asterisk
	BankAccountLinking        field.Bool
	BusinessAccountSettingsId field.Uint64
	Id                        field.Uint64
	ThirdPartyApps            field.Field

	fieldMap map[string]field.Expr
}

func (i integrationSettingsORM) Table(newTableName string) *integrationSettingsORM {
	i.integrationSettingsORMDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i integrationSettingsORM) As(alias string) *integrationSettingsORM {
	i.integrationSettingsORMDo.DO = *(i.integrationSettingsORMDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *integrationSettingsORM) updateTableName(table string) *integrationSettingsORM {
	i.ALL = field.NewAsterisk(table)
	i.BankAccountLinking = field.NewBool(table, "bank_account_linking")
	i.BusinessAccountSettingsId = field.NewUint64(table, "business_account_settings_id")
	i.Id = field.NewUint64(table, "id")
	i.ThirdPartyApps = field.NewField(table, "third_party_apps")

	i.fillFieldMap()

	return i
}

func (i *integrationSettingsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *integrationSettingsORM) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["bank_account_linking"] = i.BankAccountLinking
	i.fieldMap["business_account_settings_id"] = i.BusinessAccountSettingsId
	i.fieldMap["id"] = i.Id
	i.fieldMap["third_party_apps"] = i.ThirdPartyApps
}

func (i integrationSettingsORM) clone(db *gorm.DB) integrationSettingsORM {
	i.integrationSettingsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i integrationSettingsORM) replaceDB(db *gorm.DB) integrationSettingsORM {
	i.integrationSettingsORMDo.ReplaceDB(db)
	return i
}

type integrationSettingsORMDo struct{ gen.DO }

type IIntegrationSettingsORMDo interface {
	gen.SubQuery
	Debug() IIntegrationSettingsORMDo
	WithContext(ctx context.Context) IIntegrationSettingsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIntegrationSettingsORMDo
	WriteDB() IIntegrationSettingsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIntegrationSettingsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIntegrationSettingsORMDo
	Not(conds ...gen.Condition) IIntegrationSettingsORMDo
	Or(conds ...gen.Condition) IIntegrationSettingsORMDo
	Select(conds ...field.Expr) IIntegrationSettingsORMDo
	Where(conds ...gen.Condition) IIntegrationSettingsORMDo
	Order(conds ...field.Expr) IIntegrationSettingsORMDo
	Distinct(cols ...field.Expr) IIntegrationSettingsORMDo
	Omit(cols ...field.Expr) IIntegrationSettingsORMDo
	Join(table schema.Tabler, on ...field.Expr) IIntegrationSettingsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIntegrationSettingsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIntegrationSettingsORMDo
	Group(cols ...field.Expr) IIntegrationSettingsORMDo
	Having(conds ...gen.Condition) IIntegrationSettingsORMDo
	Limit(limit int) IIntegrationSettingsORMDo
	Offset(offset int) IIntegrationSettingsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIntegrationSettingsORMDo
	Unscoped() IIntegrationSettingsORMDo
	Create(values ...*user_servicev1.IntegrationSettingsORM) error
	CreateInBatches(values []*user_servicev1.IntegrationSettingsORM, batchSize int) error
	Save(values ...*user_servicev1.IntegrationSettingsORM) error
	First() (*user_servicev1.IntegrationSettingsORM, error)
	Take() (*user_servicev1.IntegrationSettingsORM, error)
	Last() (*user_servicev1.IntegrationSettingsORM, error)
	Find() ([]*user_servicev1.IntegrationSettingsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.IntegrationSettingsORM, err error)
	FindInBatches(result *[]*user_servicev1.IntegrationSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*user_servicev1.IntegrationSettingsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIntegrationSettingsORMDo
	Assign(attrs ...field.AssignExpr) IIntegrationSettingsORMDo
	Joins(fields ...field.RelationField) IIntegrationSettingsORMDo
	Preload(fields ...field.RelationField) IIntegrationSettingsORMDo
	FirstOrInit() (*user_servicev1.IntegrationSettingsORM, error)
	FirstOrCreate() (*user_servicev1.IntegrationSettingsORM, error)
	FindByPage(offset int, limit int) (result []*user_servicev1.IntegrationSettingsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIntegrationSettingsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result user_servicev1.IntegrationSettingsORM, err error)
	GetRecordByIDs(ids []int) (result []user_servicev1.IntegrationSettingsORM, err error)
	CreateRecord(item user_servicev1.IntegrationSettingsORM) (err error)
	UpdateRecordByID(id int, item user_servicev1.IntegrationSettingsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.IntegrationSettingsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result user_servicev1.IntegrationSettingsORM, err error)
	GetByIDs(ids []uint64) (result []user_servicev1.IntegrationSettingsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (i integrationSettingsORMDo) GetRecordByID(id int) (result user_servicev1.IntegrationSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM integration_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (i integrationSettingsORMDo) GetRecordByIDs(ids []int) (result []user_servicev1.IntegrationSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM integration_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (i integrationSettingsORMDo) CreateRecord(item user_servicev1.IntegrationSettingsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO integration_settings (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (i integrationSettingsORMDo) UpdateRecordByID(id int, item user_servicev1.IntegrationSettingsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE integration_settings SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (i integrationSettingsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM integration_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (i integrationSettingsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.IntegrationSettingsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM integration_settings ORDER BY " + i.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (i integrationSettingsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM integration_settings ")

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (i integrationSettingsORMDo) GetByID(id uint64) (result user_servicev1.IntegrationSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM integration_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (i integrationSettingsORMDo) GetByIDs(ids []uint64) (result []user_servicev1.IntegrationSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM integration_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (i integrationSettingsORMDo) Debug() IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Debug())
}

func (i integrationSettingsORMDo) WithContext(ctx context.Context) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i integrationSettingsORMDo) ReadDB() IIntegrationSettingsORMDo {
	return i.Clauses(dbresolver.Read)
}

func (i integrationSettingsORMDo) WriteDB() IIntegrationSettingsORMDo {
	return i.Clauses(dbresolver.Write)
}

func (i integrationSettingsORMDo) Session(config *gorm.Session) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Session(config))
}

func (i integrationSettingsORMDo) Clauses(conds ...clause.Expression) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i integrationSettingsORMDo) Returning(value interface{}, columns ...string) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i integrationSettingsORMDo) Not(conds ...gen.Condition) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i integrationSettingsORMDo) Or(conds ...gen.Condition) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i integrationSettingsORMDo) Select(conds ...field.Expr) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i integrationSettingsORMDo) Where(conds ...gen.Condition) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i integrationSettingsORMDo) Order(conds ...field.Expr) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i integrationSettingsORMDo) Distinct(cols ...field.Expr) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i integrationSettingsORMDo) Omit(cols ...field.Expr) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i integrationSettingsORMDo) Join(table schema.Tabler, on ...field.Expr) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i integrationSettingsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i integrationSettingsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i integrationSettingsORMDo) Group(cols ...field.Expr) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i integrationSettingsORMDo) Having(conds ...gen.Condition) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i integrationSettingsORMDo) Limit(limit int) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i integrationSettingsORMDo) Offset(offset int) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i integrationSettingsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i integrationSettingsORMDo) Unscoped() IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Unscoped())
}

func (i integrationSettingsORMDo) Create(values ...*user_servicev1.IntegrationSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i integrationSettingsORMDo) CreateInBatches(values []*user_servicev1.IntegrationSettingsORM, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i integrationSettingsORMDo) Save(values ...*user_servicev1.IntegrationSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i integrationSettingsORMDo) First() (*user_servicev1.IntegrationSettingsORM, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.IntegrationSettingsORM), nil
	}
}

func (i integrationSettingsORMDo) Take() (*user_servicev1.IntegrationSettingsORM, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.IntegrationSettingsORM), nil
	}
}

func (i integrationSettingsORMDo) Last() (*user_servicev1.IntegrationSettingsORM, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.IntegrationSettingsORM), nil
	}
}

func (i integrationSettingsORMDo) Find() ([]*user_servicev1.IntegrationSettingsORM, error) {
	result, err := i.DO.Find()
	return result.([]*user_servicev1.IntegrationSettingsORM), err
}

func (i integrationSettingsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.IntegrationSettingsORM, err error) {
	buf := make([]*user_servicev1.IntegrationSettingsORM, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i integrationSettingsORMDo) FindInBatches(result *[]*user_servicev1.IntegrationSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i integrationSettingsORMDo) Attrs(attrs ...field.AssignExpr) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i integrationSettingsORMDo) Assign(attrs ...field.AssignExpr) IIntegrationSettingsORMDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i integrationSettingsORMDo) Joins(fields ...field.RelationField) IIntegrationSettingsORMDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i integrationSettingsORMDo) Preload(fields ...field.RelationField) IIntegrationSettingsORMDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i integrationSettingsORMDo) FirstOrInit() (*user_servicev1.IntegrationSettingsORM, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.IntegrationSettingsORM), nil
	}
}

func (i integrationSettingsORMDo) FirstOrCreate() (*user_servicev1.IntegrationSettingsORM, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.IntegrationSettingsORM), nil
	}
}

func (i integrationSettingsORMDo) FindByPage(offset int, limit int) (result []*user_servicev1.IntegrationSettingsORM, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i integrationSettingsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i integrationSettingsORMDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i integrationSettingsORMDo) Delete(models ...*user_servicev1.IntegrationSettingsORM) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *integrationSettingsORMDo) withDO(do gen.Dao) *integrationSettingsORMDo {
	i.DO = *do.(*gen.DO)
	return i
}
