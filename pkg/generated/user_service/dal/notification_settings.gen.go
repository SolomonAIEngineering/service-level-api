// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	user_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/user_service/v1"
)

func newNotificationSettingsORM(db *gorm.DB, opts ...gen.DOOption) notificationSettingsORM {
	_notificationSettingsORM := notificationSettingsORM{}

	_notificationSettingsORM.notificationSettingsORMDo.UseDB(db, opts...)
	_notificationSettingsORM.notificationSettingsORMDo.UseModel(&user_servicev1.NotificationSettingsORM{})

	tableName := _notificationSettingsORM.notificationSettingsORMDo.TableName()
	_notificationSettingsORM.ALL = field.NewAsterisk(tableName)
	_notificationSettingsORM.Alerts = field.NewBool(tableName, "alerts")
	_notificationSettingsORM.BusinessAccountSettingsId = field.NewUint64(tableName, "business_account_settings_id")
	_notificationSettingsORM.Id = field.NewUint64(tableName, "id")
	_notificationSettingsORM.NotificationType = field.NewString(tableName, "notification_type")

	_notificationSettingsORM.fillFieldMap()

	return _notificationSettingsORM
}

type notificationSettingsORM struct {
	notificationSettingsORMDo

	ALL                       field.Asterisk
	Alerts                    field.Bool
	BusinessAccountSettingsId field.Uint64
	Id                        field.Uint64
	NotificationType          field.String

	fieldMap map[string]field.Expr
}

func (n notificationSettingsORM) Table(newTableName string) *notificationSettingsORM {
	n.notificationSettingsORMDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notificationSettingsORM) As(alias string) *notificationSettingsORM {
	n.notificationSettingsORMDo.DO = *(n.notificationSettingsORMDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notificationSettingsORM) updateTableName(table string) *notificationSettingsORM {
	n.ALL = field.NewAsterisk(table)
	n.Alerts = field.NewBool(table, "alerts")
	n.BusinessAccountSettingsId = field.NewUint64(table, "business_account_settings_id")
	n.Id = field.NewUint64(table, "id")
	n.NotificationType = field.NewString(table, "notification_type")

	n.fillFieldMap()

	return n
}

func (n *notificationSettingsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notificationSettingsORM) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 4)
	n.fieldMap["alerts"] = n.Alerts
	n.fieldMap["business_account_settings_id"] = n.BusinessAccountSettingsId
	n.fieldMap["id"] = n.Id
	n.fieldMap["notification_type"] = n.NotificationType
}

func (n notificationSettingsORM) clone(db *gorm.DB) notificationSettingsORM {
	n.notificationSettingsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n notificationSettingsORM) replaceDB(db *gorm.DB) notificationSettingsORM {
	n.notificationSettingsORMDo.ReplaceDB(db)
	return n
}

type notificationSettingsORMDo struct{ gen.DO }

type INotificationSettingsORMDo interface {
	gen.SubQuery
	Debug() INotificationSettingsORMDo
	WithContext(ctx context.Context) INotificationSettingsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INotificationSettingsORMDo
	WriteDB() INotificationSettingsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INotificationSettingsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INotificationSettingsORMDo
	Not(conds ...gen.Condition) INotificationSettingsORMDo
	Or(conds ...gen.Condition) INotificationSettingsORMDo
	Select(conds ...field.Expr) INotificationSettingsORMDo
	Where(conds ...gen.Condition) INotificationSettingsORMDo
	Order(conds ...field.Expr) INotificationSettingsORMDo
	Distinct(cols ...field.Expr) INotificationSettingsORMDo
	Omit(cols ...field.Expr) INotificationSettingsORMDo
	Join(table schema.Tabler, on ...field.Expr) INotificationSettingsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INotificationSettingsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) INotificationSettingsORMDo
	Group(cols ...field.Expr) INotificationSettingsORMDo
	Having(conds ...gen.Condition) INotificationSettingsORMDo
	Limit(limit int) INotificationSettingsORMDo
	Offset(offset int) INotificationSettingsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationSettingsORMDo
	Unscoped() INotificationSettingsORMDo
	Create(values ...*user_servicev1.NotificationSettingsORM) error
	CreateInBatches(values []*user_servicev1.NotificationSettingsORM, batchSize int) error
	Save(values ...*user_servicev1.NotificationSettingsORM) error
	First() (*user_servicev1.NotificationSettingsORM, error)
	Take() (*user_servicev1.NotificationSettingsORM, error)
	Last() (*user_servicev1.NotificationSettingsORM, error)
	Find() ([]*user_servicev1.NotificationSettingsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.NotificationSettingsORM, err error)
	FindInBatches(result *[]*user_servicev1.NotificationSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*user_servicev1.NotificationSettingsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INotificationSettingsORMDo
	Assign(attrs ...field.AssignExpr) INotificationSettingsORMDo
	Joins(fields ...field.RelationField) INotificationSettingsORMDo
	Preload(fields ...field.RelationField) INotificationSettingsORMDo
	FirstOrInit() (*user_servicev1.NotificationSettingsORM, error)
	FirstOrCreate() (*user_servicev1.NotificationSettingsORM, error)
	FindByPage(offset int, limit int) (result []*user_servicev1.NotificationSettingsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INotificationSettingsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result user_servicev1.NotificationSettingsORM, err error)
	GetRecordByIDs(ids []int) (result []user_servicev1.NotificationSettingsORM, err error)
	CreateRecord(item user_servicev1.NotificationSettingsORM) (err error)
	UpdateRecordByID(id int, item user_servicev1.NotificationSettingsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.NotificationSettingsORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (n notificationSettingsORMDo) GetRecordByID(id int) (result user_servicev1.NotificationSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM notification_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (n notificationSettingsORMDo) GetRecordByIDs(ids []int) (result []user_servicev1.NotificationSettingsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM notification_settings ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (n notificationSettingsORMDo) CreateRecord(item user_servicev1.NotificationSettingsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO notification_settings (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (n notificationSettingsORMDo) UpdateRecordByID(id int, item user_servicev1.NotificationSettingsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE notification_settings SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (n notificationSettingsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM notification_settings ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (n notificationSettingsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []user_servicev1.NotificationSettingsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM notification_settings ORDER BY " + n.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (n notificationSettingsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM notification_settings ")

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (n notificationSettingsORMDo) Debug() INotificationSettingsORMDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationSettingsORMDo) WithContext(ctx context.Context) INotificationSettingsORMDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationSettingsORMDo) ReadDB() INotificationSettingsORMDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationSettingsORMDo) WriteDB() INotificationSettingsORMDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationSettingsORMDo) Session(config *gorm.Session) INotificationSettingsORMDo {
	return n.withDO(n.DO.Session(config))
}

func (n notificationSettingsORMDo) Clauses(conds ...clause.Expression) INotificationSettingsORMDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationSettingsORMDo) Returning(value interface{}, columns ...string) INotificationSettingsORMDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationSettingsORMDo) Not(conds ...gen.Condition) INotificationSettingsORMDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationSettingsORMDo) Or(conds ...gen.Condition) INotificationSettingsORMDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationSettingsORMDo) Select(conds ...field.Expr) INotificationSettingsORMDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationSettingsORMDo) Where(conds ...gen.Condition) INotificationSettingsORMDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationSettingsORMDo) Order(conds ...field.Expr) INotificationSettingsORMDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationSettingsORMDo) Distinct(cols ...field.Expr) INotificationSettingsORMDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationSettingsORMDo) Omit(cols ...field.Expr) INotificationSettingsORMDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationSettingsORMDo) Join(table schema.Tabler, on ...field.Expr) INotificationSettingsORMDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationSettingsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) INotificationSettingsORMDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationSettingsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) INotificationSettingsORMDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationSettingsORMDo) Group(cols ...field.Expr) INotificationSettingsORMDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationSettingsORMDo) Having(conds ...gen.Condition) INotificationSettingsORMDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationSettingsORMDo) Limit(limit int) INotificationSettingsORMDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationSettingsORMDo) Offset(offset int) INotificationSettingsORMDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationSettingsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationSettingsORMDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationSettingsORMDo) Unscoped() INotificationSettingsORMDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationSettingsORMDo) Create(values ...*user_servicev1.NotificationSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationSettingsORMDo) CreateInBatches(values []*user_servicev1.NotificationSettingsORM, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationSettingsORMDo) Save(values ...*user_servicev1.NotificationSettingsORM) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationSettingsORMDo) First() (*user_servicev1.NotificationSettingsORM, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.NotificationSettingsORM), nil
	}
}

func (n notificationSettingsORMDo) Take() (*user_servicev1.NotificationSettingsORM, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.NotificationSettingsORM), nil
	}
}

func (n notificationSettingsORMDo) Last() (*user_servicev1.NotificationSettingsORM, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.NotificationSettingsORM), nil
	}
}

func (n notificationSettingsORMDo) Find() ([]*user_servicev1.NotificationSettingsORM, error) {
	result, err := n.DO.Find()
	return result.([]*user_servicev1.NotificationSettingsORM), err
}

func (n notificationSettingsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_servicev1.NotificationSettingsORM, err error) {
	buf := make([]*user_servicev1.NotificationSettingsORM, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationSettingsORMDo) FindInBatches(result *[]*user_servicev1.NotificationSettingsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationSettingsORMDo) Attrs(attrs ...field.AssignExpr) INotificationSettingsORMDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationSettingsORMDo) Assign(attrs ...field.AssignExpr) INotificationSettingsORMDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationSettingsORMDo) Joins(fields ...field.RelationField) INotificationSettingsORMDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationSettingsORMDo) Preload(fields ...field.RelationField) INotificationSettingsORMDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationSettingsORMDo) FirstOrInit() (*user_servicev1.NotificationSettingsORM, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.NotificationSettingsORM), nil
	}
}

func (n notificationSettingsORMDo) FirstOrCreate() (*user_servicev1.NotificationSettingsORM, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_servicev1.NotificationSettingsORM), nil
	}
}

func (n notificationSettingsORMDo) FindByPage(offset int, limit int) (result []*user_servicev1.NotificationSettingsORM, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationSettingsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationSettingsORMDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n notificationSettingsORMDo) Delete(models ...*user_servicev1.NotificationSettingsORM) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *notificationSettingsORMDo) withDO(do gen.Dao) *notificationSettingsORMDo {
	n.DO = *do.(*gen.DO)
	return n
}
