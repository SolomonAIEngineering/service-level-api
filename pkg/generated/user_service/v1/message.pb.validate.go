// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_service/v1/message.proto

package user_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAccountMultiError, or
// nil if none found.
func (m *UserAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserAccountValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAccountValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAccountValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAccountValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetBio()) < 0 {
		err := UserAccountValidationError{
			field:  "Bio",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHeadline()) < 0 {
		err := UserAccountValidationError{
			field:  "Headline",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhoneNumber()) < 0 {
		err := UserAccountValidationError{
			field:  "PhoneNumber",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetTags()); l < 1 || l > 10 {
		err := UserAccountValidationError{
			field:  "Tags",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserAccountValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserAccountValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserAccountValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AuthnAccountId

	// no validation rules for IsActive

	if utf8.RuneCountInString(m.GetFirstname()) < 0 {
		err := UserAccountValidationError{
			field:  "Firstname",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLastname()) < 0 {
		err := UserAccountValidationError{
			field:  "Lastname",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 10 {
		err := UserAccountValidationError{
			field:  "Username",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsPrivate

	// no validation rules for IsEmailVerified

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAccountValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAccountValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAccountValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVerifiedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAccountValidationError{
					field:  "VerifiedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAccountValidationError{
					field:  "VerifiedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVerifiedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAccountValidationError{
				field:  "VerifiedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsBusinessAccount

	// no validation rules for CompanyEstablishedDate

	if utf8.RuneCountInString(m.GetCompanyIndustryType()) < 0 {
		err := UserAccountValidationError{
			field:  "CompanyIndustryType",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCompanyWebsiteUrl()) < 0 {
		err := UserAccountValidationError{
			field:  "CompanyWebsiteUrl",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCompanyDescription()) < 0 {
		err := UserAccountValidationError{
			field:  "CompanyDescription",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCompanyName()) < 0 {
		err := UserAccountValidationError{
			field:  "CompanyName",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAccountValidationError{
					field:  "UserSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAccountValidationError{
					field:  "UserSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAccountValidationError{
				field:  "UserSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBusinessAccountSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAccountValidationError{
					field:  "BusinessAccountSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAccountValidationError{
					field:  "BusinessAccountSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessAccountSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAccountValidationError{
				field:  "BusinessAccountSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserAccountMultiError(errors)
	}

	return nil
}

func (m *UserAccount) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserAccount) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserAccountMultiError is an error wrapping multiple validation errors
// returned by UserAccount.ValidateAll() if the designated constraints aren't met.
type UserAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAccountMultiError) AllErrors() []error { return m }

// UserAccountValidationError is the validation error returned by
// UserAccount.Validate if the designated constraints aren't met.
type UserAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAccountValidationError) ErrorName() string { return "UserAccountValidationError" }

// Error satisfies the builtin error interface
func (e UserAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAccountValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetAddress()) < 0 {
		err := AddressValidationError{
			field:  "Address",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUnit()) < 0 {
		err := AddressValidationError{
			field:  "Unit",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetZipcode()) != 0 {
		err := AddressValidationError{
			field:  "Zipcode",
			reason: "value length must be 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetCity()) < 0 {
		err := AddressValidationError{
			field:  "City",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) < 0 {
		err := AddressValidationError{
			field:  "State",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Longitude

	// no validation rules for Lattitude

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}

	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on Tags with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tags) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tags with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagsMultiError, or nil if none found.
func (m *Tags) ValidateAll() error {
	return m.validate(true)
}

func (m *Tags) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetTagName()) < 3 {
		err := TagsValidationError{
			field:  "TagName",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTagDescription()) < 10 {
		err := TagsValidationError{
			field:  "TagDescription",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetMetadata()); l < 1 || l > 10 {
		err := TagsValidationError{
			field:  "Metadata",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TagsMultiError(errors)
	}

	return nil
}

// TagsMultiError is an error wrapping multiple validation errors returned by
// Tags.ValidateAll() if the designated constraints aren't met.
type TagsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagsMultiError) AllErrors() []error { return m }

// TagsValidationError is the validation error returned by Tags.Validate if the
// designated constraints aren't met.
type TagsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagsValidationError) ErrorName() string { return "TagsValidationError" }

// Error satisfies the builtin error interface
func (e TagsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTags.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagsValidationError{}

// Validate checks the field values on UserSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserSettingsMultiError, or
// nil if none found.
func (m *UserSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AppTheme

	// no validation rules for EmailNotifications

	// no validation rules for PushNotifications

	// no validation rules for SmsNotifications

	// no validation rules for DefaultCurrency

	// no validation rules for DatetimeFormat

	// no validation rules for TwoFactorAuthenticationEnabled

	// no validation rules for PreferredLanguage

	// no validation rules for PublicProfile

	// no validation rules for EnableGoalJournal

	// no validation rules for InvestmentRiskTolerance

	if len(errors) > 0 {
		return UserSettingsMultiError(errors)
	}

	return nil
}

// UserSettingsMultiError is an error wrapping multiple validation errors
// returned by UserSettings.ValidateAll() if the designated constraints aren't met.
type UserSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSettingsMultiError) AllErrors() []error { return m }

// UserSettingsValidationError is the validation error returned by
// UserSettings.Validate if the designated constraints aren't met.
type UserSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSettingsValidationError) ErrorName() string { return "UserSettingsValidationError" }

// Error satisfies the builtin error interface
func (e UserSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSettingsValidationError{}

// Validate checks the field values on BusinessAccountSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessAccountSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessAccountSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessAccountSettingsMultiError, or nil if none found.
func (m *BusinessAccountSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAccountSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetAccountInformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessAccountSettingsValidationError{
					field:  "AccountInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessAccountSettingsValidationError{
					field:  "AccountInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountInformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessAccountSettingsValidationError{
				field:  "AccountInformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFinancialPreferences()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessAccountSettingsValidationError{
					field:  "FinancialPreferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessAccountSettingsValidationError{
					field:  "FinancialPreferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinancialPreferences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessAccountSettingsValidationError{
				field:  "FinancialPreferences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAiPoweredInsights()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessAccountSettingsValidationError{
					field:  "AiPoweredInsights",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessAccountSettingsValidationError{
					field:  "AiPoweredInsights",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAiPoweredInsights()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessAccountSettingsValidationError{
				field:  "AiPoweredInsights",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIntegrationSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessAccountSettingsValidationError{
					field:  "IntegrationSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessAccountSettingsValidationError{
					field:  "IntegrationSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntegrationSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessAccountSettingsValidationError{
				field:  "IntegrationSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotifications()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessAccountSettingsValidationError{
					field:  "Notifications",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessAccountSettingsValidationError{
					field:  "Notifications",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifications()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessAccountSettingsValidationError{
				field:  "Notifications",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessAccountSettingsMultiError(errors)
	}

	return nil
}

// BusinessAccountSettingsMultiError is an error wrapping multiple validation
// errors returned by BusinessAccountSettings.ValidateAll() if the designated
// constraints aren't met.
type BusinessAccountSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAccountSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAccountSettingsMultiError) AllErrors() []error { return m }

// BusinessAccountSettingsValidationError is the validation error returned by
// BusinessAccountSettings.Validate if the designated constraints aren't met.
type BusinessAccountSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAccountSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessAccountSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessAccountSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessAccountSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessAccountSettingsValidationError) ErrorName() string {
	return "BusinessAccountSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAccountSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAccountSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAccountSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAccountSettingsValidationError{}

// Validate checks the field values on
// BusinessAccountSettings_AccountInformation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessAccountSettings_AccountInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessAccountSettings_AccountInformation with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BusinessAccountSettings_AccountInformationMultiError, or nil if none found.
func (m *BusinessAccountSettings_AccountInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAccountSettings_AccountInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BusinessName

	// no validation rules for BusinessType

	// no validation rules for BusinessRegistrationNumber

	if all {
		switch v := interface{}(m.GetContactInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessAccountSettings_AccountInformationValidationError{
					field:  "ContactInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessAccountSettings_AccountInformationValidationError{
					field:  "ContactInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessAccountSettings_AccountInformationValidationError{
				field:  "ContactInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessAccountSettings_AccountInformationMultiError(errors)
	}

	return nil
}

// BusinessAccountSettings_AccountInformationMultiError is an error wrapping
// multiple validation errors returned by
// BusinessAccountSettings_AccountInformation.ValidateAll() if the designated
// constraints aren't met.
type BusinessAccountSettings_AccountInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAccountSettings_AccountInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAccountSettings_AccountInformationMultiError) AllErrors() []error { return m }

// BusinessAccountSettings_AccountInformationValidationError is the validation
// error returned by BusinessAccountSettings_AccountInformation.Validate if
// the designated constraints aren't met.
type BusinessAccountSettings_AccountInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAccountSettings_AccountInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessAccountSettings_AccountInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessAccountSettings_AccountInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessAccountSettings_AccountInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessAccountSettings_AccountInformationValidationError) ErrorName() string {
	return "BusinessAccountSettings_AccountInformationValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAccountSettings_AccountInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAccountSettings_AccountInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAccountSettings_AccountInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAccountSettings_AccountInformationValidationError{}

// Validate checks the field values on
// BusinessAccountSettings_FinancialPreferences with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessAccountSettings_FinancialPreferences) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessAccountSettings_FinancialPreferences with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BusinessAccountSettings_FinancialPreferencesMultiError, or nil if none found.
func (m *BusinessAccountSettings_FinancialPreferences) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAccountSettings_FinancialPreferences) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CurrencyPreference

	if all {
		switch v := interface{}(m.GetTaxSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessAccountSettings_FinancialPreferencesValidationError{
					field:  "TaxSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessAccountSettings_FinancialPreferencesValidationError{
					field:  "TaxSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaxSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessAccountSettings_FinancialPreferencesValidationError{
				field:  "TaxSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FinancialYearStart

	if len(errors) > 0 {
		return BusinessAccountSettings_FinancialPreferencesMultiError(errors)
	}

	return nil
}

// BusinessAccountSettings_FinancialPreferencesMultiError is an error wrapping
// multiple validation errors returned by
// BusinessAccountSettings_FinancialPreferences.ValidateAll() if the
// designated constraints aren't met.
type BusinessAccountSettings_FinancialPreferencesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAccountSettings_FinancialPreferencesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAccountSettings_FinancialPreferencesMultiError) AllErrors() []error { return m }

// BusinessAccountSettings_FinancialPreferencesValidationError is the
// validation error returned by
// BusinessAccountSettings_FinancialPreferences.Validate if the designated
// constraints aren't met.
type BusinessAccountSettings_FinancialPreferencesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAccountSettings_FinancialPreferencesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessAccountSettings_FinancialPreferencesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessAccountSettings_FinancialPreferencesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessAccountSettings_FinancialPreferencesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessAccountSettings_FinancialPreferencesValidationError) ErrorName() string {
	return "BusinessAccountSettings_FinancialPreferencesValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAccountSettings_FinancialPreferencesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAccountSettings_FinancialPreferences.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAccountSettings_FinancialPreferencesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAccountSettings_FinancialPreferencesValidationError{}

// Validate checks the field values on
// BusinessAccountSettings_AIPoweredInsights with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessAccountSettings_AIPoweredInsights) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessAccountSettings_AIPoweredInsights with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BusinessAccountSettings_AIPoweredInsightsMultiError, or nil if none found.
func (m *BusinessAccountSettings_AIPoweredInsights) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAccountSettings_AIPoweredInsights) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for InsightFrequency

	// no validation rules for DataSharing

	if len(errors) > 0 {
		return BusinessAccountSettings_AIPoweredInsightsMultiError(errors)
	}

	return nil
}

// BusinessAccountSettings_AIPoweredInsightsMultiError is an error wrapping
// multiple validation errors returned by
// BusinessAccountSettings_AIPoweredInsights.ValidateAll() if the designated
// constraints aren't met.
type BusinessAccountSettings_AIPoweredInsightsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAccountSettings_AIPoweredInsightsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAccountSettings_AIPoweredInsightsMultiError) AllErrors() []error { return m }

// BusinessAccountSettings_AIPoweredInsightsValidationError is the validation
// error returned by BusinessAccountSettings_AIPoweredInsights.Validate if the
// designated constraints aren't met.
type BusinessAccountSettings_AIPoweredInsightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAccountSettings_AIPoweredInsightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessAccountSettings_AIPoweredInsightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessAccountSettings_AIPoweredInsightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessAccountSettings_AIPoweredInsightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessAccountSettings_AIPoweredInsightsValidationError) ErrorName() string {
	return "BusinessAccountSettings_AIPoweredInsightsValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAccountSettings_AIPoweredInsightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAccountSettings_AIPoweredInsights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAccountSettings_AIPoweredInsightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAccountSettings_AIPoweredInsightsValidationError{}

// Validate checks the field values on
// BusinessAccountSettings_IntegrationSettings with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessAccountSettings_IntegrationSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessAccountSettings_IntegrationSettings with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BusinessAccountSettings_IntegrationSettingsMultiError, or nil if none found.
func (m *BusinessAccountSettings_IntegrationSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAccountSettings_IntegrationSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BankAccountLinking

	if len(errors) > 0 {
		return BusinessAccountSettings_IntegrationSettingsMultiError(errors)
	}

	return nil
}

// BusinessAccountSettings_IntegrationSettingsMultiError is an error wrapping
// multiple validation errors returned by
// BusinessAccountSettings_IntegrationSettings.ValidateAll() if the designated
// constraints aren't met.
type BusinessAccountSettings_IntegrationSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAccountSettings_IntegrationSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAccountSettings_IntegrationSettingsMultiError) AllErrors() []error { return m }

// BusinessAccountSettings_IntegrationSettingsValidationError is the validation
// error returned by BusinessAccountSettings_IntegrationSettings.Validate if
// the designated constraints aren't met.
type BusinessAccountSettings_IntegrationSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAccountSettings_IntegrationSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessAccountSettings_IntegrationSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessAccountSettings_IntegrationSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessAccountSettings_IntegrationSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessAccountSettings_IntegrationSettingsValidationError) ErrorName() string {
	return "BusinessAccountSettings_IntegrationSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAccountSettings_IntegrationSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAccountSettings_IntegrationSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAccountSettings_IntegrationSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAccountSettings_IntegrationSettingsValidationError{}

// Validate checks the field values on BusinessAccountSettings_Notifications
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessAccountSettings_Notifications) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessAccountSettings_Notifications
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessAccountSettings_NotificationsMultiError, or nil if none found.
func (m *BusinessAccountSettings_Notifications) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAccountSettings_Notifications) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NotificationType

	// no validation rules for Alerts

	if len(errors) > 0 {
		return BusinessAccountSettings_NotificationsMultiError(errors)
	}

	return nil
}

// BusinessAccountSettings_NotificationsMultiError is an error wrapping
// multiple validation errors returned by
// BusinessAccountSettings_Notifications.ValidateAll() if the designated
// constraints aren't met.
type BusinessAccountSettings_NotificationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAccountSettings_NotificationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAccountSettings_NotificationsMultiError) AllErrors() []error { return m }

// BusinessAccountSettings_NotificationsValidationError is the validation error
// returned by BusinessAccountSettings_Notifications.Validate if the
// designated constraints aren't met.
type BusinessAccountSettings_NotificationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAccountSettings_NotificationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessAccountSettings_NotificationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessAccountSettings_NotificationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessAccountSettings_NotificationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessAccountSettings_NotificationsValidationError) ErrorName() string {
	return "BusinessAccountSettings_NotificationsValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAccountSettings_NotificationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAccountSettings_Notifications.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAccountSettings_NotificationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAccountSettings_NotificationsValidationError{}

// Validate checks the field values on
// BusinessAccountSettings_AccountInformation_ContactInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessAccountSettings_AccountInformation_ContactInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessAccountSettings_AccountInformation_ContactInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessAccountSettings_AccountInformation_ContactInformationMultiError, or
// nil if none found.
func (m *BusinessAccountSettings_AccountInformation_ContactInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAccountSettings_AccountInformation_ContactInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for PhoneNumber

	// no validation rules for Address

	if len(errors) > 0 {
		return BusinessAccountSettings_AccountInformation_ContactInformationMultiError(errors)
	}

	return nil
}

// BusinessAccountSettings_AccountInformation_ContactInformationMultiError is
// an error wrapping multiple validation errors returned by
// BusinessAccountSettings_AccountInformation_ContactInformation.ValidateAll()
// if the designated constraints aren't met.
type BusinessAccountSettings_AccountInformation_ContactInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAccountSettings_AccountInformation_ContactInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAccountSettings_AccountInformation_ContactInformationMultiError) AllErrors() []error {
	return m
}

// BusinessAccountSettings_AccountInformation_ContactInformationValidationError
// is the validation error returned by
// BusinessAccountSettings_AccountInformation_ContactInformation.Validate if
// the designated constraints aren't met.
type BusinessAccountSettings_AccountInformation_ContactInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAccountSettings_AccountInformation_ContactInformationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e BusinessAccountSettings_AccountInformation_ContactInformationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e BusinessAccountSettings_AccountInformation_ContactInformationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e BusinessAccountSettings_AccountInformation_ContactInformationValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e BusinessAccountSettings_AccountInformation_ContactInformationValidationError) ErrorName() string {
	return "BusinessAccountSettings_AccountInformation_ContactInformationValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAccountSettings_AccountInformation_ContactInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAccountSettings_AccountInformation_ContactInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAccountSettings_AccountInformation_ContactInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAccountSettings_AccountInformation_ContactInformationValidationError{}

// Validate checks the field values on
// BusinessAccountSettings_FinancialPreferences_TaxSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessAccountSettings_FinancialPreferences_TaxSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BusinessAccountSettings_FinancialPreferences_TaxSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessAccountSettings_FinancialPreferences_TaxSettingsMultiError, or nil
// if none found.
func (m *BusinessAccountSettings_FinancialPreferences_TaxSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessAccountSettings_FinancialPreferences_TaxSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TaxPercentage

	// no validation rules for TaxCode

	if len(errors) > 0 {
		return BusinessAccountSettings_FinancialPreferences_TaxSettingsMultiError(errors)
	}

	return nil
}

// BusinessAccountSettings_FinancialPreferences_TaxSettingsMultiError is an
// error wrapping multiple validation errors returned by
// BusinessAccountSettings_FinancialPreferences_TaxSettings.ValidateAll() if
// the designated constraints aren't met.
type BusinessAccountSettings_FinancialPreferences_TaxSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessAccountSettings_FinancialPreferences_TaxSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessAccountSettings_FinancialPreferences_TaxSettingsMultiError) AllErrors() []error {
	return m
}

// BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError is
// the validation error returned by
// BusinessAccountSettings_FinancialPreferences_TaxSettings.Validate if the
// designated constraints aren't met.
type BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError) ErrorName() string {
	return "BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessAccountSettings_FinancialPreferences_TaxSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessAccountSettings_FinancialPreferences_TaxSettingsValidationError{}
