// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: user_service/v1/settings.proto

package user_servicev1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_UNSPECIFIED NotificationType = 0
	// email based notification
	NotificationType_NOTIFICATION_TYPE_EMAIL NotificationType = 1
	// sms based notification
	NotificationType_NOTIFICATION_TYPE_SMS NotificationType = 2
	// app based notification
	NotificationType_NOTIFICATION_TYPE_IN_APP NotificationType = 3
	// slack based notification
	NotificationType_NOTIFICATION_TYPE_SLACK NotificationType = 4
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0: "NOTIFICATION_TYPE_UNSPECIFIED",
		1: "NOTIFICATION_TYPE_EMAIL",
		2: "NOTIFICATION_TYPE_SMS",
		3: "NOTIFICATION_TYPE_IN_APP",
		4: "NOTIFICATION_TYPE_SLACK",
	}
	NotificationType_value = map[string]int32{
		"NOTIFICATION_TYPE_UNSPECIFIED": 0,
		"NOTIFICATION_TYPE_EMAIL":       1,
		"NOTIFICATION_TYPE_SMS":         2,
		"NOTIFICATION_TYPE_IN_APP":      3,
		"NOTIFICATION_TYPE_SLACK":       4,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_settings_proto_enumTypes[0].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_user_service_v1_settings_proto_enumTypes[0]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_settings_proto_rawDescGZIP(), []int{0}
}

// Display and interaction preferences.
type ApplicationTheme int32

const (
	ApplicationTheme_APPLICATION_THEME_UNSPECIFIED ApplicationTheme = 0
	ApplicationTheme_APPLICATION_THEME_LIGHT       ApplicationTheme = 1
	ApplicationTheme_APPLICATION_THEME_DARK        ApplicationTheme = 2
)

// Enum value maps for ApplicationTheme.
var (
	ApplicationTheme_name = map[int32]string{
		0: "APPLICATION_THEME_UNSPECIFIED",
		1: "APPLICATION_THEME_LIGHT",
		2: "APPLICATION_THEME_DARK",
	}
	ApplicationTheme_value = map[string]int32{
		"APPLICATION_THEME_UNSPECIFIED": 0,
		"APPLICATION_THEME_LIGHT":       1,
		"APPLICATION_THEME_DARK":        2,
	}
)

func (x ApplicationTheme) Enum() *ApplicationTheme {
	p := new(ApplicationTheme)
	*p = x
	return p
}

func (x ApplicationTheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationTheme) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_settings_proto_enumTypes[1].Descriptor()
}

func (ApplicationTheme) Type() protoreflect.EnumType {
	return &file_user_service_v1_settings_proto_enumTypes[1]
}

func (x ApplicationTheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationTheme.Descriptor instead.
func (ApplicationTheme) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_settings_proto_rawDescGZIP(), []int{1}
}

type LikedDashboardPanels int32

const (
	LikedDashboardPanels_LIKED_DASHBOARD_PANELS_TRANSACTIONS_UNSPECIFIED LikedDashboardPanels = 0
	LikedDashboardPanels_LIKED_DASHBOARD_PANELS_TRANSACTIONS_OVERVIEW    LikedDashboardPanels = 1
	LikedDashboardPanels_LIKED_DASHBOARD_PANELS_INVESTMENT_SUMMARY       LikedDashboardPanels = 2
	LikedDashboardPanels_LIKED_DASHBOARD_PANELS_MONTHLY_SPENDING_REPORT  LikedDashboardPanels = 3
	LikedDashboardPanels_LIKED_DASHBOARD_PANELS_SAVINGS_TRACKER          LikedDashboardPanels = 4
	LikedDashboardPanels_LIKED_DASHBOARD_PANELS_CREDIT_SCORE_MONITOR     LikedDashboardPanels = 5
)

// Enum value maps for LikedDashboardPanels.
var (
	LikedDashboardPanels_name = map[int32]string{
		0: "LIKED_DASHBOARD_PANELS_TRANSACTIONS_UNSPECIFIED",
		1: "LIKED_DASHBOARD_PANELS_TRANSACTIONS_OVERVIEW",
		2: "LIKED_DASHBOARD_PANELS_INVESTMENT_SUMMARY",
		3: "LIKED_DASHBOARD_PANELS_MONTHLY_SPENDING_REPORT",
		4: "LIKED_DASHBOARD_PANELS_SAVINGS_TRACKER",
		5: "LIKED_DASHBOARD_PANELS_CREDIT_SCORE_MONITOR",
	}
	LikedDashboardPanels_value = map[string]int32{
		"LIKED_DASHBOARD_PANELS_TRANSACTIONS_UNSPECIFIED": 0,
		"LIKED_DASHBOARD_PANELS_TRANSACTIONS_OVERVIEW":    1,
		"LIKED_DASHBOARD_PANELS_INVESTMENT_SUMMARY":       2,
		"LIKED_DASHBOARD_PANELS_MONTHLY_SPENDING_REPORT":  3,
		"LIKED_DASHBOARD_PANELS_SAVINGS_TRACKER":          4,
		"LIKED_DASHBOARD_PANELS_CREDIT_SCORE_MONITOR":     5,
	}
)

func (x LikedDashboardPanels) Enum() *LikedDashboardPanels {
	p := new(LikedDashboardPanels)
	*p = x
	return p
}

func (x LikedDashboardPanels) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LikedDashboardPanels) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_settings_proto_enumTypes[2].Descriptor()
}

func (LikedDashboardPanels) Type() protoreflect.EnumType {
	return &file_user_service_v1_settings_proto_enumTypes[2]
}

func (x LikedDashboardPanels) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LikedDashboardPanels.Descriptor instead.
func (LikedDashboardPanels) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_settings_proto_rawDescGZIP(), []int{2}
}

// Risk Tolerance Investment preferences.
type RiskToleranceSettings int32

const (
	RiskToleranceSettings_RISK_TOLERANCE_SETTINGS_UNSPECIFIED RiskToleranceSettings = 0
	RiskToleranceSettings_RISK_TOLERANCE_SETTINGS_LOW         RiskToleranceSettings = 1
	RiskToleranceSettings_RISK_TOLERANCE_SETTINGS_MEDIUM      RiskToleranceSettings = 2
	RiskToleranceSettings_RISK_TOLERANCE_SETTINGS_HIGH        RiskToleranceSettings = 3
)

// Enum value maps for RiskToleranceSettings.
var (
	RiskToleranceSettings_name = map[int32]string{
		0: "RISK_TOLERANCE_SETTINGS_UNSPECIFIED",
		1: "RISK_TOLERANCE_SETTINGS_LOW",
		2: "RISK_TOLERANCE_SETTINGS_MEDIUM",
		3: "RISK_TOLERANCE_SETTINGS_HIGH",
	}
	RiskToleranceSettings_value = map[string]int32{
		"RISK_TOLERANCE_SETTINGS_UNSPECIFIED": 0,
		"RISK_TOLERANCE_SETTINGS_LOW":         1,
		"RISK_TOLERANCE_SETTINGS_MEDIUM":      2,
		"RISK_TOLERANCE_SETTINGS_HIGH":        3,
	}
)

func (x RiskToleranceSettings) Enum() *RiskToleranceSettings {
	p := new(RiskToleranceSettings)
	*p = x
	return p
}

func (x RiskToleranceSettings) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskToleranceSettings) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_settings_proto_enumTypes[3].Descriptor()
}

func (RiskToleranceSettings) Type() protoreflect.EnumType {
	return &file_user_service_v1_settings_proto_enumTypes[3]
}

func (x RiskToleranceSettings) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskToleranceSettings.Descriptor instead.
func (RiskToleranceSettings) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_settings_proto_rawDescGZIP(), []int{3}
}

type BusinessType int32

const (
	BusinessType_BUSINESS_TYPE_UNSPECIFIED         BusinessType = 0
	BusinessType_BUSINESS_TYPE_SOLE_PROPRIETORSHIP BusinessType = 1
	BusinessType_BUSINESS_TYPE_PARTNERSHIP         BusinessType = 2
	BusinessType_BUSINESS_TYPE_LLC                 BusinessType = 3
	BusinessType_BUSINESS_TYPE_CORPORATION         BusinessType = 4
	BusinessType_BUSINESS_TYPE_OTHER               BusinessType = 5
)

// Enum value maps for BusinessType.
var (
	BusinessType_name = map[int32]string{
		0: "BUSINESS_TYPE_UNSPECIFIED",
		1: "BUSINESS_TYPE_SOLE_PROPRIETORSHIP",
		2: "BUSINESS_TYPE_PARTNERSHIP",
		3: "BUSINESS_TYPE_LLC",
		4: "BUSINESS_TYPE_CORPORATION",
		5: "BUSINESS_TYPE_OTHER",
	}
	BusinessType_value = map[string]int32{
		"BUSINESS_TYPE_UNSPECIFIED":         0,
		"BUSINESS_TYPE_SOLE_PROPRIETORSHIP": 1,
		"BUSINESS_TYPE_PARTNERSHIP":         2,
		"BUSINESS_TYPE_LLC":                 3,
		"BUSINESS_TYPE_CORPORATION":         4,
		"BUSINESS_TYPE_OTHER":               5,
	}
)

func (x BusinessType) Enum() *BusinessType {
	p := new(BusinessType)
	*p = x
	return p
}

func (x BusinessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_settings_proto_enumTypes[4].Descriptor()
}

func (BusinessType) Type() protoreflect.EnumType {
	return &file_user_service_v1_settings_proto_enumTypes[4]
}

func (x BusinessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessType.Descriptor instead.
func (BusinessType) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_settings_proto_rawDescGZIP(), []int{4}
}

type NotificationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id               uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NotificationType NotificationType `protobuf:"varint,2,opt,name=notification_type,json=notificationType,proto3,enum=user_service.v1.NotificationType" json:"notification_type,omitempty"`
	Alerts           bool             `protobuf:"varint,3,opt,name=alerts,proto3" json:"alerts,omitempty"` // True if user wants to be alerted for anomalies
}

func (x *NotificationSettings) Reset() {
	*x = NotificationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationSettings) ProtoMessage() {}

func (x *NotificationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationSettings.ProtoReflect.Descriptor instead.
func (*NotificationSettings) Descriptor() ([]byte, []int) {
	return file_user_service_v1_settings_proto_rawDescGZIP(), []int{0}
}

func (x *NotificationSettings) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NotificationSettings) GetNotificationType() NotificationType {
	if x != nil {
		return x.NotificationType
	}
	return NotificationType_NOTIFICATION_TYPE_UNSPECIFIED
}

func (x *NotificationSettings) GetAlerts() bool {
	if x != nil {
		return x.Alerts
	}
	return false
}

// DigitalWorkerToolChainConfiguration defines the overall settings for a digital worker.
type DigitalWorkerSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier for the toolchain configuration.
	WorkerName    string `protobuf:"bytes,2,opt,name=worker_name,json=workerName,proto3" json:"worker_name,omitempty"`
	WorkerVersion string `protobuf:"bytes,3,opt,name=worker_version,json=workerVersion,proto3" json:"worker_version,omitempty"`
	EnableLogging bool   `protobuf:"varint,4,opt,name=enable_logging,json=enableLogging,proto3" json:"enable_logging,omitempty"`
}

func (x *DigitalWorkerSettings) Reset() {
	*x = DigitalWorkerSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalWorkerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalWorkerSettings) ProtoMessage() {}

func (x *DigitalWorkerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalWorkerSettings.ProtoReflect.Descriptor instead.
func (*DigitalWorkerSettings) Descriptor() ([]byte, []int) {
	return file_user_service_v1_settings_proto_rawDescGZIP(), []int{1}
}

func (x *DigitalWorkerSettings) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DigitalWorkerSettings) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *DigitalWorkerSettings) GetWorkerVersion() string {
	if x != nil {
		return x.WorkerVersion
	}
	return ""
}

func (x *DigitalWorkerSettings) GetEnableLogging() bool {
	if x != nil {
		return x.EnableLogging
	}
	return false
}

type FinancialPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id                 uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CurrencyPreference string  `protobuf:"bytes,2,opt,name=currency_preference,json=currencyPreference,proto3" json:"currency_preference,omitempty"`
	FinancialYearStart string  `protobuf:"bytes,3,opt,name=financial_year_start,json=financialYearStart,proto3" json:"financial_year_start,omitempty"`
	TaxPercentage      float64 `protobuf:"fixed64,4,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`
	TaxCode            string  `protobuf:"bytes,5,opt,name=tax_code,json=taxCode,proto3" json:"tax_code,omitempty"`
}

func (x *FinancialPreferences) Reset() {
	*x = FinancialPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_settings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialPreferences) ProtoMessage() {}

func (x *FinancialPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_settings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialPreferences.ProtoReflect.Descriptor instead.
func (*FinancialPreferences) Descriptor() ([]byte, []int) {
	return file_user_service_v1_settings_proto_rawDescGZIP(), []int{2}
}

func (x *FinancialPreferences) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialPreferences) GetCurrencyPreference() string {
	if x != nil {
		return x.CurrencyPreference
	}
	return ""
}

func (x *FinancialPreferences) GetFinancialYearStart() string {
	if x != nil {
		return x.FinancialYearStart
	}
	return ""
}

func (x *FinancialPreferences) GetTaxPercentage() float64 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

func (x *FinancialPreferences) GetTaxCode() string {
	if x != nil {
		return x.TaxCode
	}
	return ""
}

// User settings for the fintech application.
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Display and interaction preferences.
	AppTheme ApplicationTheme `protobuf:"varint,2,opt,name=app_theme,json=appTheme,proto3,enum=user_service.v1.ApplicationTheme" json:"app_theme,omitempty"`
	// Notification preferences.
	NotificationSettings *NotificationSettings `protobuf:"bytes,3,opt,name=notification_settings,json=notificationSettings,proto3" json:"notification_settings,omitempty"`
	// Language preference.
	PreferredLanguage string `protobuf:"bytes,4,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	// Risk tolerance settings defined for user settings.
	RiskTolerance RiskToleranceSettings `protobuf:"varint,5,opt,name=risk_tolerance,json=riskTolerance,proto3,enum=user_service.v1.RiskToleranceSettings" json:"risk_tolerance,omitempty"`
	// Dashboard customization, e.g., specific widgets or reports.
	LikedDashboardPanels []LikedDashboardPanels `protobuf:"varint,13,rep,packed,name=liked_dashboard_panels,json=likedDashboardPanels,proto3,enum=user_service.v1.LikedDashboardPanels" json:"liked_dashboard_panels,omitempty"`
	// Settings specific to the user's digital worker.
	DigitalWorkerSettings *DigitalWorkerSettings `protobuf:"bytes,14,opt,name=digital_worker_settings,json=digitalWorkerSettings,proto3" json:"digital_worker_settings,omitempty"`
	FinancialPreferences  *FinancialPreferences  `protobuf:"bytes,15,opt,name=financial_preferences,json=financialPreferences,proto3" json:"financial_preferences,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_settings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_settings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_user_service_v1_settings_proto_rawDescGZIP(), []int{3}
}

func (x *Settings) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Settings) GetAppTheme() ApplicationTheme {
	if x != nil {
		return x.AppTheme
	}
	return ApplicationTheme_APPLICATION_THEME_UNSPECIFIED
}

func (x *Settings) GetNotificationSettings() *NotificationSettings {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

func (x *Settings) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *Settings) GetRiskTolerance() RiskToleranceSettings {
	if x != nil {
		return x.RiskTolerance
	}
	return RiskToleranceSettings_RISK_TOLERANCE_SETTINGS_UNSPECIFIED
}

func (x *Settings) GetLikedDashboardPanels() []LikedDashboardPanels {
	if x != nil {
		return x.LikedDashboardPanels
	}
	return nil
}

func (x *Settings) GetDigitalWorkerSettings() *DigitalWorkerSettings {
	if x != nil {
		return x.DigitalWorkerSettings
	}
	return nil
}

func (x *Settings) GetFinancialPreferences() *FinancialPreferences {
	if x != nil {
		return x.FinancialPreferences
	}
	return nil
}

var File_user_service_v1_settings_proto protoreflect.FileDescriptor

var file_user_service_v1_settings_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f,
	0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x27, 0x92, 0x41, 0x00, 0xba,
	0xb9, 0x19, 0x20, 0x0a, 0x1e, 0x5a, 0x1c, 0x69, 0x64, 0x78, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x29, 0x92,
	0x41, 0x00, 0xba, 0xb9, 0x19, 0x22, 0x0a, 0x20, 0x5a, 0x1e, 0x69, 0x64, 0x78, 0x5f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0xfc, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x27, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19,
	0x20, 0x0a, 0x1e, 0x5a, 0x1c, 0x69, 0x64, 0x78, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x59,
	0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x74, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0x85, 0x05, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1a, 0x92, 0x41, 0x00,
	0xba, 0xb9, 0x19, 0x13, 0x0a, 0x11, 0x5a, 0x0f, 0x69, 0x64, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x61,
	0x70, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x52, 0x08, 0x61, 0x70, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x14, 0x6c, 0x69,
	0x6b, 0x65, 0x64, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x68, 0x0a, 0x17, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x15, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x15,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x14, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x2a, 0xa8, 0x01, 0x0a, 0x10, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c,
	0x41, 0x43, 0x4b, 0x10, 0x04, 0x2a, 0x6e, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x4d,
	0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x44,
	0x41, 0x52, 0x4b, 0x10, 0x02, 0x2a, 0xbd, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x33,
	0x0a, 0x2f, 0x4c, 0x49, 0x4b, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4c, 0x49, 0x4b, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x53,
	0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x4c, 0x49, 0x4b, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41,
	0x52, 0x59, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x4c, 0x49, 0x4b, 0x45, 0x44, 0x5f, 0x44, 0x41,
	0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x4c, 0x49, 0x4b, 0x45,
	0x44, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x4e, 0x45,
	0x4c, 0x53, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x4c, 0x49, 0x4b, 0x45, 0x44, 0x5f, 0x44, 0x41,
	0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x10, 0x05, 0x2a, 0xa7, 0x01, 0x0a, 0x15, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x27, 0x0a, 0x23, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x2a,
	0xc2, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x52, 0x49, 0x45, 0x54, 0x4f, 0x52,
	0x53, 0x48, 0x49, 0x50, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x53,
	0x48, 0x49, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4c, 0x43, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x05, 0x42, 0xed, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f,
	0x6e, 0x41, 0x49, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x55, 0x58, 0x58, 0xaa, 0x02, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_service_v1_settings_proto_rawDescOnce sync.Once
	file_user_service_v1_settings_proto_rawDescData = file_user_service_v1_settings_proto_rawDesc
)

func file_user_service_v1_settings_proto_rawDescGZIP() []byte {
	file_user_service_v1_settings_proto_rawDescOnce.Do(func() {
		file_user_service_v1_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_service_v1_settings_proto_rawDescData)
	})
	return file_user_service_v1_settings_proto_rawDescData
}

var file_user_service_v1_settings_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_user_service_v1_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_user_service_v1_settings_proto_goTypes = []interface{}{
	(NotificationType)(0),         // 0: user_service.v1.NotificationType
	(ApplicationTheme)(0),         // 1: user_service.v1.ApplicationTheme
	(LikedDashboardPanels)(0),     // 2: user_service.v1.LikedDashboardPanels
	(RiskToleranceSettings)(0),    // 3: user_service.v1.RiskToleranceSettings
	(BusinessType)(0),             // 4: user_service.v1.BusinessType
	(*NotificationSettings)(nil),  // 5: user_service.v1.NotificationSettings
	(*DigitalWorkerSettings)(nil), // 6: user_service.v1.DigitalWorkerSettings
	(*FinancialPreferences)(nil),  // 7: user_service.v1.FinancialPreferences
	(*Settings)(nil),              // 8: user_service.v1.Settings
}
var file_user_service_v1_settings_proto_depIdxs = []int32{
	0, // 0: user_service.v1.NotificationSettings.notification_type:type_name -> user_service.v1.NotificationType
	1, // 1: user_service.v1.Settings.app_theme:type_name -> user_service.v1.ApplicationTheme
	5, // 2: user_service.v1.Settings.notification_settings:type_name -> user_service.v1.NotificationSettings
	3, // 3: user_service.v1.Settings.risk_tolerance:type_name -> user_service.v1.RiskToleranceSettings
	2, // 4: user_service.v1.Settings.liked_dashboard_panels:type_name -> user_service.v1.LikedDashboardPanels
	6, // 5: user_service.v1.Settings.digital_worker_settings:type_name -> user_service.v1.DigitalWorkerSettings
	7, // 6: user_service.v1.Settings.financial_preferences:type_name -> user_service.v1.FinancialPreferences
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_user_service_v1_settings_proto_init() }
func file_user_service_v1_settings_proto_init() {
	if File_user_service_v1_settings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_service_v1_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_settings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalWorkerSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_settings_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_settings_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_service_v1_settings_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_service_v1_settings_proto_goTypes,
		DependencyIndexes: file_user_service_v1_settings_proto_depIdxs,
		EnumInfos:         file_user_service_v1_settings_proto_enumTypes,
		MessageInfos:      file_user_service_v1_settings_proto_msgTypes,
	}.Build()
	File_user_service_v1_settings_proto = out.File
	file_user_service_v1_settings_proto_rawDesc = nil
	file_user_service_v1_settings_proto_goTypes = nil
	file_user_service_v1_settings_proto_depIdxs = nil
}
