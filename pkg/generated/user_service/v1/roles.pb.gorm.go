package user_servicev1

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	pq "github.com/lib/pq"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type RoleORM struct {
	AuditLog          []*RoleAuditEventsORM `gorm:"foreignkey:RoleId;association_foreignkey:Id;preload:true"`
	BusinessAccountId *uint64
	CanCreateProjects bool
	CanCreateReports  bool
	CanCreateUsers    bool
	CanDeleteProjects bool
	CanDeleteReports  bool
	CanDeleteUsers    bool
	CanReadProjects   bool
	CanReadReports    bool
	CanReadUsers      bool
	CanUpdateProjects bool
	CanUpdateReports  bool
	CanUpdateUsers    bool
	CreatedAt         *time.Time
	Id                int64  `gorm:"unique_index:idx_role_id"`
	Name              string `gorm:"unique_index:idx_role_name"`
	Type              string
	UpdatedAt         *time.Time
	UserAccountId     *uint64
}

// TableName overrides the default tablename generated by GORM
func (RoleORM) TableName() string {
	return "roles"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Role) ToORM(ctx context.Context) (RoleORM, error) {
	to := RoleORM{}
	var err error
	if prehook, ok := interface{}(m).(RoleWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Type = RoleType_name[int32(m.Type)]
	to.CanCreateUsers = m.CanCreateUsers
	to.CanReadUsers = m.CanReadUsers
	to.CanUpdateUsers = m.CanUpdateUsers
	to.CanDeleteUsers = m.CanDeleteUsers
	to.CanCreateProjects = m.CanCreateProjects
	to.CanReadProjects = m.CanReadProjects
	to.CanUpdateProjects = m.CanUpdateProjects
	to.CanDeleteProjects = m.CanDeleteProjects
	to.CanCreateReports = m.CanCreateReports
	to.CanReadReports = m.CanReadReports
	to.CanUpdateReports = m.CanUpdateReports
	to.CanDeleteReports = m.CanDeleteReports
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	for _, v := range m.AuditLog {
		if v != nil {
			if tempAuditLog, cErr := v.ToORM(ctx); cErr == nil {
				to.AuditLog = append(to.AuditLog, &tempAuditLog)
			} else {
				return to, cErr
			}
		} else {
			to.AuditLog = append(to.AuditLog, nil)
		}
	}
	if posthook, ok := interface{}(m).(RoleWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RoleORM) ToPB(ctx context.Context) (Role, error) {
	to := Role{}
	var err error
	if prehook, ok := interface{}(m).(RoleWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Type = RoleType(RoleType_value[m.Type])
	to.CanCreateUsers = m.CanCreateUsers
	to.CanReadUsers = m.CanReadUsers
	to.CanUpdateUsers = m.CanUpdateUsers
	to.CanDeleteUsers = m.CanDeleteUsers
	to.CanCreateProjects = m.CanCreateProjects
	to.CanReadProjects = m.CanReadProjects
	to.CanUpdateProjects = m.CanUpdateProjects
	to.CanDeleteProjects = m.CanDeleteProjects
	to.CanCreateReports = m.CanCreateReports
	to.CanReadReports = m.CanReadReports
	to.CanUpdateReports = m.CanUpdateReports
	to.CanDeleteReports = m.CanDeleteReports
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	for _, v := range m.AuditLog {
		if v != nil {
			if tempAuditLog, cErr := v.ToPB(ctx); cErr == nil {
				to.AuditLog = append(to.AuditLog, &tempAuditLog)
			} else {
				return to, cErr
			}
		} else {
			to.AuditLog = append(to.AuditLog, nil)
		}
	}
	if posthook, ok := interface{}(m).(RoleWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Role the arg will be the target, the caller the one being converted from

// RoleBeforeToORM called before default ToORM code
type RoleWithBeforeToORM interface {
	BeforeToORM(context.Context, *RoleORM) error
}

// RoleAfterToORM called after default ToORM code
type RoleWithAfterToORM interface {
	AfterToORM(context.Context, *RoleORM) error
}

// RoleBeforeToPB called before default ToPB code
type RoleWithBeforeToPB interface {
	BeforeToPB(context.Context, *Role) error
}

// RoleAfterToPB called after default ToPB code
type RoleWithAfterToPB interface {
	AfterToPB(context.Context, *Role) error
}

type RoleAuditEventsORM struct {
	Action         string         `gorm:"index:idx_role_audit_events_action"`
	AffectedFields pq.StringArray `gorm:"type:text[]"`
	ClientIp       string
	Context        string
	Id             int64          `gorm:"unique_index:idx_role_audit_events_id"`
	PerformedBy    string         `gorm:"index:idx_role_audit_events_performed_by"`
	PreviousValues pq.StringArray `gorm:"type:text[]"`
	RoleId         *int64
	Timestamp      *time.Time `gorm:"index:idx_role_audit_events_timestamp"`
	UserAgent      string
}

// TableName overrides the default tablename generated by GORM
func (RoleAuditEventsORM) TableName() string {
	return "role_audit_events"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *RoleAuditEvents) ToORM(ctx context.Context) (RoleAuditEventsORM, error) {
	to := RoleAuditEventsORM{}
	var err error
	if prehook, ok := interface{}(m).(RoleAuditEventsWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Action = AuditAction_name[int32(m.Action)]
	to.PerformedBy = m.PerformedBy
	if m.Timestamp != nil {
		t := m.Timestamp.AsTime()
		to.Timestamp = &t
	}
	if m.AffectedFields != nil {
		to.AffectedFields = make(pq.StringArray, len(m.AffectedFields))
		copy(to.AffectedFields, m.AffectedFields)
	}
	if m.PreviousValues != nil {
		to.PreviousValues = make(pq.StringArray, len(m.PreviousValues))
		copy(to.PreviousValues, m.PreviousValues)
	}
	to.ClientIp = m.ClientIp
	to.UserAgent = m.UserAgent
	to.Context = m.Context
	if posthook, ok := interface{}(m).(RoleAuditEventsWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RoleAuditEventsORM) ToPB(ctx context.Context) (RoleAuditEvents, error) {
	to := RoleAuditEvents{}
	var err error
	if prehook, ok := interface{}(m).(RoleAuditEventsWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Action = AuditAction(AuditAction_value[m.Action])
	to.PerformedBy = m.PerformedBy
	if m.Timestamp != nil {
		to.Timestamp = timestamppb.New(*m.Timestamp)
	}
	if m.AffectedFields != nil {
		to.AffectedFields = make(pq.StringArray, len(m.AffectedFields))
		copy(to.AffectedFields, m.AffectedFields)
	}
	if m.PreviousValues != nil {
		to.PreviousValues = make(pq.StringArray, len(m.PreviousValues))
		copy(to.PreviousValues, m.PreviousValues)
	}
	to.ClientIp = m.ClientIp
	to.UserAgent = m.UserAgent
	to.Context = m.Context
	if posthook, ok := interface{}(m).(RoleAuditEventsWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type RoleAuditEvents the arg will be the target, the caller the one being converted from

// RoleAuditEventsBeforeToORM called before default ToORM code
type RoleAuditEventsWithBeforeToORM interface {
	BeforeToORM(context.Context, *RoleAuditEventsORM) error
}

// RoleAuditEventsAfterToORM called after default ToORM code
type RoleAuditEventsWithAfterToORM interface {
	AfterToORM(context.Context, *RoleAuditEventsORM) error
}

// RoleAuditEventsBeforeToPB called before default ToPB code
type RoleAuditEventsWithBeforeToPB interface {
	BeforeToPB(context.Context, *RoleAuditEvents) error
}

// RoleAuditEventsAfterToPB called after default ToPB code
type RoleAuditEventsWithAfterToPB interface {
	AfterToPB(context.Context, *RoleAuditEvents) error
}

// DefaultCreateRole executes a basic gorm create call
func DefaultCreateRole(ctx context.Context, in *Role, db *gorm.DB) (*Role, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type RoleORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadRole(ctx context.Context, in *Role, db *gorm.DB) (*Role, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &RoleORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := RoleORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(RoleORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type RoleORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteRole(ctx context.Context, in *Role, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&RoleORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type RoleORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteRoleSet(ctx context.Context, in []*Role, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&RoleORM{})).(RoleORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&RoleORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&RoleORM{})).(RoleORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type RoleORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Role, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Role, *gorm.DB) error
}

// DefaultStrictUpdateRole clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateRole(ctx context.Context, in *Role, db *gorm.DB) (*Role, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateRole")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &RoleORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterAuditLog := RoleAuditEventsORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterAuditLog.RoleId = new(int64)
	*filterAuditLog.RoleId = ormObj.Id
	if err = db.Where(filterAuditLog).Delete(RoleAuditEventsORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type RoleORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchRole executes a basic gorm update call with patch behavior
func DefaultPatchRole(ctx context.Context, in *Role, updateMask *field_mask.FieldMask, db *gorm.DB) (*Role, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Role
	var err error
	if hook, ok := interface{}(&pbObj).(RoleWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadRole(ctx, &Role{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(RoleWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskRole(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(RoleWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateRole(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(RoleWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type RoleWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Role, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Role, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Role, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Role, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetRole executes a bulk gorm update call with patch behavior
func DefaultPatchSetRole(ctx context.Context, objects []*Role, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Role, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Role, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchRole(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskRole patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskRole(ctx context.Context, patchee *Role, patcher *Role, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Role, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
		if f == prefix+"CanCreateUsers" {
			patchee.CanCreateUsers = patcher.CanCreateUsers
			continue
		}
		if f == prefix+"CanReadUsers" {
			patchee.CanReadUsers = patcher.CanReadUsers
			continue
		}
		if f == prefix+"CanUpdateUsers" {
			patchee.CanUpdateUsers = patcher.CanUpdateUsers
			continue
		}
		if f == prefix+"CanDeleteUsers" {
			patchee.CanDeleteUsers = patcher.CanDeleteUsers
			continue
		}
		if f == prefix+"CanCreateProjects" {
			patchee.CanCreateProjects = patcher.CanCreateProjects
			continue
		}
		if f == prefix+"CanReadProjects" {
			patchee.CanReadProjects = patcher.CanReadProjects
			continue
		}
		if f == prefix+"CanUpdateProjects" {
			patchee.CanUpdateProjects = patcher.CanUpdateProjects
			continue
		}
		if f == prefix+"CanDeleteProjects" {
			patchee.CanDeleteProjects = patcher.CanDeleteProjects
			continue
		}
		if f == prefix+"CanCreateReports" {
			patchee.CanCreateReports = patcher.CanCreateReports
			continue
		}
		if f == prefix+"CanReadReports" {
			patchee.CanReadReports = patcher.CanReadReports
			continue
		}
		if f == prefix+"CanUpdateReports" {
			patchee.CanUpdateReports = patcher.CanUpdateReports
			continue
		}
		if f == prefix+"CanDeleteReports" {
			patchee.CanDeleteReports = patcher.CanDeleteReports
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"AuditLog" {
			patchee.AuditLog = patcher.AuditLog
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListRole executes a gorm list call
func DefaultListRole(ctx context.Context, db *gorm.DB) ([]*Role, error) {
	in := Role{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &RoleORM{}, &Role{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []RoleORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Role{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type RoleORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]RoleORM) error
}

// DefaultCreateRoleAuditEvents executes a basic gorm create call
func DefaultCreateRoleAuditEvents(ctx context.Context, in *RoleAuditEvents, db *gorm.DB) (*RoleAuditEvents, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type RoleAuditEventsORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadRoleAuditEvents(ctx context.Context, in *RoleAuditEvents, db *gorm.DB) (*RoleAuditEvents, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &RoleAuditEventsORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := RoleAuditEventsORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(RoleAuditEventsORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type RoleAuditEventsORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteRoleAuditEvents(ctx context.Context, in *RoleAuditEvents, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&RoleAuditEventsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type RoleAuditEventsORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteRoleAuditEventsSet(ctx context.Context, in []*RoleAuditEvents, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&RoleAuditEventsORM{})).(RoleAuditEventsORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&RoleAuditEventsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&RoleAuditEventsORM{})).(RoleAuditEventsORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type RoleAuditEventsORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*RoleAuditEvents, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*RoleAuditEvents, *gorm.DB) error
}

// DefaultStrictUpdateRoleAuditEvents clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateRoleAuditEvents(ctx context.Context, in *RoleAuditEvents, db *gorm.DB) (*RoleAuditEvents, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateRoleAuditEvents")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &RoleAuditEventsORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type RoleAuditEventsORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchRoleAuditEvents executes a basic gorm update call with patch behavior
func DefaultPatchRoleAuditEvents(ctx context.Context, in *RoleAuditEvents, updateMask *field_mask.FieldMask, db *gorm.DB) (*RoleAuditEvents, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj RoleAuditEvents
	var err error
	if hook, ok := interface{}(&pbObj).(RoleAuditEventsWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadRoleAuditEvents(ctx, &RoleAuditEvents{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(RoleAuditEventsWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskRoleAuditEvents(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(RoleAuditEventsWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateRoleAuditEvents(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(RoleAuditEventsWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type RoleAuditEventsWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *RoleAuditEvents, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *RoleAuditEvents, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *RoleAuditEvents, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *RoleAuditEvents, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetRoleAuditEvents executes a bulk gorm update call with patch behavior
func DefaultPatchSetRoleAuditEvents(ctx context.Context, objects []*RoleAuditEvents, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*RoleAuditEvents, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*RoleAuditEvents, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchRoleAuditEvents(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskRoleAuditEvents patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskRoleAuditEvents(ctx context.Context, patchee *RoleAuditEvents, patcher *RoleAuditEvents, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*RoleAuditEvents, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedTimestamp bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Action" {
			patchee.Action = patcher.Action
			continue
		}
		if f == prefix+"PerformedBy" {
			patchee.PerformedBy = patcher.PerformedBy
			continue
		}
		if !updatedTimestamp && strings.HasPrefix(f, prefix+"Timestamp.") {
			if patcher.Timestamp == nil {
				patchee.Timestamp = nil
				continue
			}
			if patchee.Timestamp == nil {
				patchee.Timestamp = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Timestamp."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Timestamp, patchee.Timestamp, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Timestamp" {
			updatedTimestamp = true
			patchee.Timestamp = patcher.Timestamp
			continue
		}
		if f == prefix+"AffectedFields" {
			patchee.AffectedFields = patcher.AffectedFields
			continue
		}
		if f == prefix+"PreviousValues" {
			patchee.PreviousValues = patcher.PreviousValues
			continue
		}
		if f == prefix+"ClientIp" {
			patchee.ClientIp = patcher.ClientIp
			continue
		}
		if f == prefix+"UserAgent" {
			patchee.UserAgent = patcher.UserAgent
			continue
		}
		if f == prefix+"Context" {
			patchee.Context = patcher.Context
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListRoleAuditEvents executes a gorm list call
func DefaultListRoleAuditEvents(ctx context.Context, db *gorm.DB) ([]*RoleAuditEvents, error) {
	in := RoleAuditEvents{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &RoleAuditEventsORM{}, &RoleAuditEvents{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []RoleAuditEventsORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoleAuditEventsORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*RoleAuditEvents{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type RoleAuditEventsORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoleAuditEventsORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]RoleAuditEventsORM) error
}
