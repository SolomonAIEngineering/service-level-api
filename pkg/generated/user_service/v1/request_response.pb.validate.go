// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_service/v1/request_response.proto

package user_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DeleteUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountDeleted

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccount() == nil {
		err := UpdateUserRequestValidationError{
			field:  "Account",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountUpdated

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccount() == nil {
		err := CreateUserRequestValidationError{
			field:  "Account",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetCommunityIdsToFollow()) > 20 {
		err := CreateUserRequestValidationError{
			field:  "CommunityIdsToFollow",
			reason: "value must contain no more than 20 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, err := url.Parse(m.GetProfileImage()); err != nil {
		err = CreateUserRequestValidationError{
			field:  "ProfileImage",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPassword()) < 10 {
		err := CreateUserRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 10 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on GetUserIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserIdRequestMultiError, or nil if none found.
func (m *GetUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetEmail()) < 0 {
		err := GetUserIdRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 0 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUsername()) < 0 {
		err := GetUserIdRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 0 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserIdRequestMultiError(errors)
	}

	return nil
}

// GetUserIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdRequestMultiError) AllErrors() []error { return m }

// GetUserIdRequestValidationError is the validation error returned by
// GetUserIdRequest.Validate if the designated constraints aren't met.
type GetUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdRequestValidationError) ErrorName() string { return "GetUserIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdRequestValidationError{}

// Validate checks the field values on GetUserIdResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserIdResponseMultiError, or nil if none found.
func (m *GetUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserIdResponseMultiError(errors)
	}

	return nil
}

// GetUserIdResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserIdResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdResponseMultiError) AllErrors() []error { return m }

// GetUserIdResponseValidationError is the validation error returned by
// GetUserIdResponse.Validate if the designated constraints aren't met.
type GetUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdResponseValidationError) ErrorName() string {
	return "GetUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdResponseValidationError{}

// Validate checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckRequestMultiError, or nil if none found.
func (m *HealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthCheckRequestMultiError(errors)
	}

	return nil
}

// HealthCheckRequestMultiError is an error wrapping multiple validation errors
// returned by HealthCheckRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckRequestMultiError) AllErrors() []error { return m }

// HealthCheckRequestValidationError is the validation error returned by
// HealthCheckRequest.Validate if the designated constraints aren't met.
type HealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckRequestValidationError) ErrorName() string {
	return "HealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckRequestValidationError{}

// Validate checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckResponseMultiError, or nil if none found.
func (m *HealthCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Healthy

	if len(errors) > 0 {
		return HealthCheckResponseMultiError(errors)
	}

	return nil
}

// HealthCheckResponseMultiError is an error wrapping multiple validation
// errors returned by HealthCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type HealthCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckResponseMultiError) AllErrors() []error { return m }

// HealthCheckResponseValidationError is the validation error returned by
// HealthCheckResponse.Validate if the designated constraints aren't met.
type HealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckResponseValidationError) ErrorName() string {
	return "HealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckResponseValidationError{}

// Validate checks the field values on ReadynessCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadynessCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadynessCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadynessCheckRequestMultiError, or nil if none found.
func (m *ReadynessCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadynessCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadynessCheckRequestMultiError(errors)
	}

	return nil
}

// ReadynessCheckRequestMultiError is an error wrapping multiple validation
// errors returned by ReadynessCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadynessCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadynessCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadynessCheckRequestMultiError) AllErrors() []error { return m }

// ReadynessCheckRequestValidationError is the validation error returned by
// ReadynessCheckRequest.Validate if the designated constraints aren't met.
type ReadynessCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadynessCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadynessCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadynessCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadynessCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadynessCheckRequestValidationError) ErrorName() string {
	return "ReadynessCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadynessCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadynessCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadynessCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadynessCheckRequestValidationError{}

// Validate checks the field values on ReadynessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadynessCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadynessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadynessCheckResponseMultiError, or nil if none found.
func (m *ReadynessCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadynessCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Healthy

	if len(errors) > 0 {
		return ReadynessCheckResponseMultiError(errors)
	}

	return nil
}

// ReadynessCheckResponseMultiError is an error wrapping multiple validation
// errors returned by ReadynessCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadynessCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadynessCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadynessCheckResponseMultiError) AllErrors() []error { return m }

// ReadynessCheckResponseValidationError is the validation error returned by
// ReadynessCheckResponse.Validate if the designated constraints aren't met.
type ReadynessCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadynessCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadynessCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadynessCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadynessCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadynessCheckResponseValidationError) ErrorName() string {
	return "ReadynessCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadynessCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadynessCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadynessCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadynessCheckResponseValidationError{}

// Validate checks the field values on GetUserByEmailOrUsernameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByEmailOrUsernameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailOrUsernameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserByEmailOrUsernameRequestMultiError, or nil if none found.
func (m *GetUserByEmailOrUsernameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailOrUsernameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserByEmailOrUsernameRequestMultiError(errors)
	}

	return nil
}

// GetUserByEmailOrUsernameRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserByEmailOrUsernameRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUserByEmailOrUsernameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailOrUsernameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailOrUsernameRequestMultiError) AllErrors() []error { return m }

// GetUserByEmailOrUsernameRequestValidationError is the validation error
// returned by GetUserByEmailOrUsernameRequest.Validate if the designated
// constraints aren't met.
type GetUserByEmailOrUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailOrUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailOrUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailOrUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailOrUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailOrUsernameRequestValidationError) ErrorName() string {
	return "GetUserByEmailOrUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailOrUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailOrUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailOrUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailOrUsernameRequestValidationError{}

// Validate checks the field values on GetUserByEmailOrUsernameResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserByEmailOrUsernameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailOrUsernameResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserByEmailOrUsernameResponseMultiError, or nil if none found.
func (m *GetUserByEmailOrUsernameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailOrUsernameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserByEmailOrUsernameResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserByEmailOrUsernameResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByEmailOrUsernameResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserByEmailOrUsernameResponseMultiError(errors)
	}

	return nil
}

// GetUserByEmailOrUsernameResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserByEmailOrUsernameResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserByEmailOrUsernameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailOrUsernameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailOrUsernameResponseMultiError) AllErrors() []error { return m }

// GetUserByEmailOrUsernameResponseValidationError is the validation error
// returned by GetUserByEmailOrUsernameResponse.Validate if the designated
// constraints aren't met.
type GetUserByEmailOrUsernameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailOrUsernameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailOrUsernameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailOrUsernameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailOrUsernameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailOrUsernameResponseValidationError) ErrorName() string {
	return "GetUserByEmailOrUsernameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailOrUsernameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailOrUsernameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailOrUsernameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailOrUsernameResponseValidationError{}

// Validate checks the field values on VerifyUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyUserRequestMultiError, or nil if none found.
func (m *VerifyUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := VerifyUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyUserRequestMultiError(errors)
	}

	return nil
}

// VerifyUserRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyUserRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyUserRequestMultiError) AllErrors() []error { return m }

// VerifyUserRequestValidationError is the validation error returned by
// VerifyUserRequest.Validate if the designated constraints aren't met.
type VerifyUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyUserRequestValidationError) ErrorName() string {
	return "VerifyUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyUserRequestValidationError{}

// Validate checks the field values on VerifyUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyUserResponseMultiError, or nil if none found.
func (m *VerifyUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountVerified

	if len(errors) > 0 {
		return VerifyUserResponseMultiError(errors)
	}

	return nil
}

// VerifyUserResponseMultiError is an error wrapping multiple validation errors
// returned by VerifyUserResponse.ValidateAll() if the designated constraints
// aren't met.
type VerifyUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyUserResponseMultiError) AllErrors() []error { return m }

// VerifyUserResponseValidationError is the validation error returned by
// VerifyUserResponse.Validate if the designated constraints aren't met.
type VerifyUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyUserResponseValidationError) ErrorName() string {
	return "VerifyUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyUserResponseValidationError{}

// Validate checks the field values on GetUserByUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUsernameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUsernameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUsernameRequestMultiError, or nil if none found.
func (m *GetUserByUsernameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUsernameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserByUsernameRequestMultiError(errors)
	}

	return nil
}

// GetUserByUsernameRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserByUsernameRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserByUsernameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUsernameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUsernameRequestMultiError) AllErrors() []error { return m }

// GetUserByUsernameRequestValidationError is the validation error returned by
// GetUserByUsernameRequest.Validate if the designated constraints aren't met.
type GetUserByUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUsernameRequestValidationError) ErrorName() string {
	return "GetUserByUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUsernameRequestValidationError{}

// Validate checks the field values on GetUserByUsernameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUsernameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUsernameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUsernameResponseMultiError, or nil if none found.
func (m *GetUserByUsernameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUsernameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserByUsernameResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserByUsernameResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByUsernameResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserByUsernameResponseMultiError(errors)
	}

	return nil
}

// GetUserByUsernameResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserByUsernameResponse.ValidateAll() if the
// designated constraints aren't met.
type GetUserByUsernameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUsernameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUsernameResponseMultiError) AllErrors() []error { return m }

// GetUserByUsernameResponseValidationError is the validation error returned by
// GetUserByUsernameResponse.Validate if the designated constraints aren't met.
type GetUserByUsernameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUsernameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUsernameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUsernameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUsernameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUsernameResponseValidationError) ErrorName() string {
	return "GetUserByUsernameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUsernameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUsernameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUsernameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUsernameResponseValidationError{}

// Validate checks the field values on CheckUsernameExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUsernameExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUsernameExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUsernameExistsRequestMultiError, or nil if none found.
func (m *CheckUsernameExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUsernameExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return CheckUsernameExistsRequestMultiError(errors)
	}

	return nil
}

// CheckUsernameExistsRequestMultiError is an error wrapping multiple
// validation errors returned by CheckUsernameExistsRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckUsernameExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUsernameExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUsernameExistsRequestMultiError) AllErrors() []error { return m }

// CheckUsernameExistsRequestValidationError is the validation error returned
// by CheckUsernameExistsRequest.Validate if the designated constraints aren't met.
type CheckUsernameExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUsernameExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUsernameExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUsernameExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUsernameExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUsernameExistsRequestValidationError) ErrorName() string {
	return "CheckUsernameExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUsernameExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUsernameExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUsernameExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUsernameExistsRequestValidationError{}

// Validate checks the field values on CheckUsernameExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUsernameExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUsernameExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUsernameExistsResponseMultiError, or nil if none found.
func (m *CheckUsernameExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUsernameExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckUsernameExistsResponseMultiError(errors)
	}

	return nil
}

// CheckUsernameExistsResponseMultiError is an error wrapping multiple
// validation errors returned by CheckUsernameExistsResponse.ValidateAll() if
// the designated constraints aren't met.
type CheckUsernameExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUsernameExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUsernameExistsResponseMultiError) AllErrors() []error { return m }

// CheckUsernameExistsResponseValidationError is the validation error returned
// by CheckUsernameExistsResponse.Validate if the designated constraints
// aren't met.
type CheckUsernameExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUsernameExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUsernameExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUsernameExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUsernameExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUsernameExistsResponseValidationError) ErrorName() string {
	return "CheckUsernameExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUsernameExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUsernameExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUsernameExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUsernameExistsResponseValidationError{}

// Validate checks the field values on CheckEmailExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEmailExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEmailExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEmailExistsRequestMultiError, or nil if none found.
func (m *CheckEmailExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEmailExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CheckEmailExistsRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckEmailExistsRequestMultiError(errors)
	}

	return nil
}

func (m *CheckEmailExistsRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CheckEmailExistsRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CheckEmailExistsRequestMultiError is an error wrapping multiple validation
// errors returned by CheckEmailExistsRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckEmailExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEmailExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEmailExistsRequestMultiError) AllErrors() []error { return m }

// CheckEmailExistsRequestValidationError is the validation error returned by
// CheckEmailExistsRequest.Validate if the designated constraints aren't met.
type CheckEmailExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEmailExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEmailExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEmailExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEmailExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEmailExistsRequestValidationError) ErrorName() string {
	return "CheckEmailExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEmailExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEmailExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEmailExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEmailExistsRequestValidationError{}

// Validate checks the field values on CheckEmailExistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEmailExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEmailExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEmailExistsResponseMultiError, or nil if none found.
func (m *CheckEmailExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEmailExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckEmailExistsResponseMultiError(errors)
	}

	return nil
}

// CheckEmailExistsResponseMultiError is an error wrapping multiple validation
// errors returned by CheckEmailExistsResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckEmailExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEmailExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEmailExistsResponseMultiError) AllErrors() []error { return m }

// CheckEmailExistsResponseValidationError is the validation error returned by
// CheckEmailExistsResponse.Validate if the designated constraints aren't met.
type CheckEmailExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEmailExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEmailExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEmailExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEmailExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEmailExistsResponseValidationError) ErrorName() string {
	return "CheckEmailExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEmailExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEmailExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEmailExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEmailExistsResponseValidationError{}

// Validate checks the field values on GetUserByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByEmailRequestMultiError, or nil if none found.
func (m *GetUserByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = GetUserByEmailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserByEmailRequestMultiError(errors)
	}

	return nil
}

func (m *GetUserByEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetUserByEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetUserByEmailRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserByEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailRequestMultiError) AllErrors() []error { return m }

// GetUserByEmailRequestValidationError is the validation error returned by
// GetUserByEmailRequest.Validate if the designated constraints aren't met.
type GetUserByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailRequestValidationError) ErrorName() string {
	return "GetUserByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailRequestValidationError{}

// Validate checks the field values on GetUserByEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByEmailResponseMultiError, or nil if none found.
func (m *GetUserByEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserByEmailResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserByEmailResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByEmailResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserByEmailResponseMultiError(errors)
	}

	return nil
}

// GetUserByEmailResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserByEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserByEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailResponseMultiError) AllErrors() []error { return m }

// GetUserByEmailResponseValidationError is the validation error returned by
// GetUserByEmailResponse.Validate if the designated constraints aren't met.
type GetUserByEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailResponseValidationError) ErrorName() string {
	return "GetUserByEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailResponseValidationError{}

// Validate checks the field values on PasswordResetWebhookRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordResetWebhookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordResetWebhookRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordResetWebhookRequestMultiError, or nil if none found.
func (m *PasswordResetWebhookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordResetWebhookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccountId() <= 0 {
		err := PasswordResetWebhookRequestValidationError{
			field:  "AccountId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return PasswordResetWebhookRequestMultiError(errors)
	}

	return nil
}

// PasswordResetWebhookRequestMultiError is an error wrapping multiple
// validation errors returned by PasswordResetWebhookRequest.ValidateAll() if
// the designated constraints aren't met.
type PasswordResetWebhookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordResetWebhookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordResetWebhookRequestMultiError) AllErrors() []error { return m }

// PasswordResetWebhookRequestValidationError is the validation error returned
// by PasswordResetWebhookRequest.Validate if the designated constraints
// aren't met.
type PasswordResetWebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordResetWebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordResetWebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordResetWebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordResetWebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordResetWebhookRequestValidationError) ErrorName() string {
	return "PasswordResetWebhookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordResetWebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordResetWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordResetWebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordResetWebhookRequestValidationError{}

// Validate checks the field values on PasswordResetWebhookResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordResetWebhookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordResetWebhookResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordResetWebhookResponseMultiError, or nil if none found.
func (m *PasswordResetWebhookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordResetWebhookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return PasswordResetWebhookResponseMultiError(errors)
	}

	return nil
}

// PasswordResetWebhookResponseMultiError is an error wrapping multiple
// validation errors returned by PasswordResetWebhookResponse.ValidateAll() if
// the designated constraints aren't met.
type PasswordResetWebhookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordResetWebhookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordResetWebhookResponseMultiError) AllErrors() []error { return m }

// PasswordResetWebhookResponseValidationError is the validation error returned
// by PasswordResetWebhookResponse.Validate if the designated constraints
// aren't met.
type PasswordResetWebhookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordResetWebhookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordResetWebhookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordResetWebhookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordResetWebhookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordResetWebhookResponseValidationError) ErrorName() string {
	return "PasswordResetWebhookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordResetWebhookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordResetWebhookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordResetWebhookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordResetWebhookResponseValidationError{}

// Validate checks the field values on GetBusinessSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessSettingsRequestMultiError, or nil if none found.
func (m *GetBusinessSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetBusinessSettingsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBusinessSettingsRequestMultiError(errors)
	}

	return nil
}

// GetBusinessSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessSettingsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetBusinessSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessSettingsRequestMultiError) AllErrors() []error { return m }

// GetBusinessSettingsRequestValidationError is the validation error returned
// by GetBusinessSettingsRequest.Validate if the designated constraints aren't met.
type GetBusinessSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessSettingsRequestValidationError) ErrorName() string {
	return "GetBusinessSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessSettingsRequestValidationError{}

// Validate checks the field values on GetBusinessSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessSettingsResponseMultiError, or nil if none found.
func (m *GetBusinessSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBusinessSettingsResponseValidationError{
					field:  "BusinessSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBusinessSettingsResponseValidationError{
					field:  "BusinessSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBusinessSettingsResponseValidationError{
				field:  "BusinessSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBusinessSettingsResponseMultiError(errors)
	}

	return nil
}

// GetBusinessSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by GetBusinessSettingsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBusinessSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessSettingsResponseMultiError) AllErrors() []error { return m }

// GetBusinessSettingsResponseValidationError is the validation error returned
// by GetBusinessSettingsResponse.Validate if the designated constraints
// aren't met.
type GetBusinessSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessSettingsResponseValidationError) ErrorName() string {
	return "GetBusinessSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessSettingsResponseValidationError{}

// Validate checks the field values on UpdateBusinessSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateBusinessSettingsRequestMultiError, or nil if none found.
func (m *UpdateBusinessSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessSettings() == nil {
		err := UpdateBusinessSettingsRequestValidationError{
			field:  "BusinessSettings",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessSettingsRequestValidationError{
					field:  "BusinessSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessSettingsRequestValidationError{
					field:  "BusinessSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessSettingsRequestValidationError{
				field:  "BusinessSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateBusinessSettingsRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateBusinessSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessSettingsRequestValidationError is the validation error
// returned by UpdateBusinessSettingsRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessSettingsRequestValidationError) ErrorName() string {
	return "UpdateBusinessSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessSettingsRequestValidationError{}

// Validate checks the field values on UpdateBusinessSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessSettingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateBusinessSettingsResponseMultiError, or nil if none found.
func (m *UpdateBusinessSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateBusinessSettingsResponseMultiError(errors)
	}

	return nil
}

// UpdateBusinessSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateBusinessSettingsResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateBusinessSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessSettingsResponseMultiError) AllErrors() []error { return m }

// UpdateBusinessSettingsResponseValidationError is the validation error
// returned by UpdateBusinessSettingsResponse.Validate if the designated
// constraints aren't met.
type UpdateBusinessSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessSettingsResponseValidationError) ErrorName() string {
	return "UpdateBusinessSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessSettingsResponseValidationError{}

// Validate checks the field values on GetUserV2Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserV2RequestMultiError, or nil if none found.
func (m *GetUserV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserV2RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProfileType

	if len(errors) > 0 {
		return GetUserV2RequestMultiError(errors)
	}

	return nil
}

// GetUserV2RequestMultiError is an error wrapping multiple validation errors
// returned by GetUserV2Request.ValidateAll() if the designated constraints
// aren't met.
type GetUserV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserV2RequestMultiError) AllErrors() []error { return m }

// GetUserV2RequestValidationError is the validation error returned by
// GetUserV2Request.Validate if the designated constraints aren't met.
type GetUserV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserV2RequestValidationError) ErrorName() string { return "GetUserV2RequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserV2RequestValidationError{}

// Validate checks the field values on GetUserV2Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserV2ResponseMultiError, or nil if none found.
func (m *GetUserV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Account.(type) {
	case *GetUserV2Response_UserAccount:
		if v == nil {
			err := GetUserV2ResponseValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserV2ResponseValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserV2ResponseValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserV2ResponseValidationError{
					field:  "UserAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetUserV2Response_BusinessAccount:
		if v == nil {
			err := GetUserV2ResponseValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBusinessAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserV2ResponseValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserV2ResponseValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBusinessAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserV2ResponseValidationError{
					field:  "BusinessAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetUserV2ResponseMultiError(errors)
	}

	return nil
}

// GetUserV2ResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserV2Response.ValidateAll() if the designated constraints
// aren't met.
type GetUserV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserV2ResponseMultiError) AllErrors() []error { return m }

// GetUserV2ResponseValidationError is the validation error returned by
// GetUserV2Response.Validate if the designated constraints aren't met.
type GetUserV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserV2ResponseValidationError) ErrorName() string {
	return "GetUserV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserV2ResponseValidationError{}

// Validate checks the field values on DeleteUserV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserV2RequestMultiError, or nil if none found.
func (m *DeleteUserV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DeleteUserV2RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProfileType

	if len(errors) > 0 {
		return DeleteUserV2RequestMultiError(errors)
	}

	return nil
}

// DeleteUserV2RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserV2Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserV2RequestMultiError) AllErrors() []error { return m }

// DeleteUserV2RequestValidationError is the validation error returned by
// DeleteUserV2Request.Validate if the designated constraints aren't met.
type DeleteUserV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserV2RequestValidationError) ErrorName() string {
	return "DeleteUserV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserV2RequestValidationError{}

// Validate checks the field values on DeleteUserV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserV2ResponseMultiError, or nil if none found.
func (m *DeleteUserV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountDeleted

	if len(errors) > 0 {
		return DeleteUserV2ResponseMultiError(errors)
	}

	return nil
}

// DeleteUserV2ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserV2Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserV2ResponseMultiError) AllErrors() []error { return m }

// DeleteUserV2ResponseValidationError is the validation error returned by
// DeleteUserV2Response.Validate if the designated constraints aren't met.
type DeleteUserV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserV2ResponseValidationError) ErrorName() string {
	return "DeleteUserV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserV2ResponseValidationError{}

// Validate checks the field values on UpdateUserV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserV2RequestMultiError, or nil if none found.
func (m *UpdateUserV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Account.(type) {
	case *UpdateUserV2Request_UserAccount:
		if v == nil {
			err := UpdateUserV2RequestValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUserV2RequestValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUserV2RequestValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserV2RequestValidationError{
					field:  "UserAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateUserV2Request_BusinessAccount:
		if v == nil {
			err := UpdateUserV2RequestValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBusinessAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUserV2RequestValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUserV2RequestValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBusinessAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserV2RequestValidationError{
					field:  "BusinessAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateUserV2RequestMultiError(errors)
	}

	return nil
}

// UpdateUserV2RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserV2Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserV2RequestMultiError) AllErrors() []error { return m }

// UpdateUserV2RequestValidationError is the validation error returned by
// UpdateUserV2Request.Validate if the designated constraints aren't met.
type UpdateUserV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserV2RequestValidationError) ErrorName() string {
	return "UpdateUserV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserV2RequestValidationError{}

// Validate checks the field values on UpdateUserV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserV2ResponseMultiError, or nil if none found.
func (m *UpdateUserV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountUpdated

	switch v := m.Account.(type) {
	case *UpdateUserV2Response_UserAccount:
		if v == nil {
			err := UpdateUserV2ResponseValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUserV2ResponseValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUserV2ResponseValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserV2ResponseValidationError{
					field:  "UserAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateUserV2Response_BusinessAccount:
		if v == nil {
			err := UpdateUserV2ResponseValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBusinessAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUserV2ResponseValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUserV2ResponseValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBusinessAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserV2ResponseValidationError{
					field:  "BusinessAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateUserV2ResponseMultiError(errors)
	}

	return nil
}

// UpdateUserV2ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserV2Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserV2ResponseMultiError) AllErrors() []error { return m }

// UpdateUserV2ResponseValidationError is the validation error returned by
// UpdateUserV2Response.Validate if the designated constraints aren't met.
type UpdateUserV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserV2ResponseValidationError) ErrorName() string {
	return "UpdateUserV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserV2ResponseValidationError{}

// Validate checks the field values on CreateUserV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserV2RequestMultiError, or nil if none found.
func (m *CreateUserV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetCommunityIdsToFollow()) > 20 {
		err := CreateUserV2RequestValidationError{
			field:  "CommunityIdsToFollow",
			reason: "value must contain no more than 20 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, err := url.Parse(m.GetProfileImage()); err != nil {
		err = CreateUserV2RequestValidationError{
			field:  "ProfileImage",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPassword()) < 10 {
		err := CreateUserV2RequestValidationError{
			field:  "Password",
			reason: "value length must be at least 10 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Account.(type) {
	case *CreateUserV2Request_UserAccount:
		if v == nil {
			err := CreateUserV2RequestValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUserV2RequestValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUserV2RequestValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserV2RequestValidationError{
					field:  "UserAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateUserV2Request_BusinessAccount:
		if v == nil {
			err := CreateUserV2RequestValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBusinessAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUserV2RequestValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUserV2RequestValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBusinessAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserV2RequestValidationError{
					field:  "BusinessAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateUserV2RequestMultiError(errors)
	}

	return nil
}

// CreateUserV2RequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserV2Request.ValidateAll() if the designated
// constraints aren't met.
type CreateUserV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserV2RequestMultiError) AllErrors() []error { return m }

// CreateUserV2RequestValidationError is the validation error returned by
// CreateUserV2Request.Validate if the designated constraints aren't met.
type CreateUserV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserV2RequestValidationError) ErrorName() string {
	return "CreateUserV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserV2RequestValidationError{}

// Validate checks the field values on CreateUserV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserV2ResponseMultiError, or nil if none found.
func (m *CreateUserV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateUserV2ResponseMultiError(errors)
	}

	return nil
}

// CreateUserV2ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateUserV2Response.ValidateAll() if the designated
// constraints aren't met.
type CreateUserV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserV2ResponseMultiError) AllErrors() []error { return m }

// CreateUserV2ResponseValidationError is the validation error returned by
// CreateUserV2Response.Validate if the designated constraints aren't met.
type CreateUserV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserV2ResponseValidationError) ErrorName() string {
	return "CreateUserV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserV2ResponseValidationError{}

// Validate checks the field values on GetUserIdV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserIdV2RequestMultiError, or nil if none found.
func (m *GetUserIdV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetEmail()) < 0 {
		err := GetUserIdV2RequestValidationError{
			field:  "Email",
			reason: "value length must be at least 0 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUsername()) < 0 {
		err := GetUserIdV2RequestValidationError{
			field:  "Username",
			reason: "value length must be at least 0 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProfileType

	if len(errors) > 0 {
		return GetUserIdV2RequestMultiError(errors)
	}

	return nil
}

// GetUserIdV2RequestMultiError is an error wrapping multiple validation errors
// returned by GetUserIdV2Request.ValidateAll() if the designated constraints
// aren't met.
type GetUserIdV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdV2RequestMultiError) AllErrors() []error { return m }

// GetUserIdV2RequestValidationError is the validation error returned by
// GetUserIdV2Request.Validate if the designated constraints aren't met.
type GetUserIdV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdV2RequestValidationError) ErrorName() string {
	return "GetUserIdV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdV2RequestValidationError{}

// Validate checks the field values on GetUserIdV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserIdV2ResponseMultiError, or nil if none found.
func (m *GetUserIdV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserIdV2ResponseMultiError(errors)
	}

	return nil
}

// GetUserIdV2ResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserIdV2Response.ValidateAll() if the designated
// constraints aren't met.
type GetUserIdV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdV2ResponseMultiError) AllErrors() []error { return m }

// GetUserIdV2ResponseValidationError is the validation error returned by
// GetUserIdV2Response.Validate if the designated constraints aren't met.
type GetUserIdV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdV2ResponseValidationError) ErrorName() string {
	return "GetUserIdV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdV2ResponseValidationError{}

// Validate checks the field values on GetUserByEmailOrUsernameV2Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserByEmailOrUsernameV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailOrUsernameV2Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserByEmailOrUsernameV2RequestMultiError, or nil if none found.
func (m *GetUserByEmailOrUsernameV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailOrUsernameV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Username

	// no validation rules for ProfileType

	if len(errors) > 0 {
		return GetUserByEmailOrUsernameV2RequestMultiError(errors)
	}

	return nil
}

// GetUserByEmailOrUsernameV2RequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserByEmailOrUsernameV2Request.ValidateAll() if the designated
// constraints aren't met.
type GetUserByEmailOrUsernameV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailOrUsernameV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailOrUsernameV2RequestMultiError) AllErrors() []error { return m }

// GetUserByEmailOrUsernameV2RequestValidationError is the validation error
// returned by GetUserByEmailOrUsernameV2Request.Validate if the designated
// constraints aren't met.
type GetUserByEmailOrUsernameV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailOrUsernameV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailOrUsernameV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailOrUsernameV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailOrUsernameV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailOrUsernameV2RequestValidationError) ErrorName() string {
	return "GetUserByEmailOrUsernameV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailOrUsernameV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailOrUsernameV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailOrUsernameV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailOrUsernameV2RequestValidationError{}

// Validate checks the field values on GetUserByEmailOrUsernameV2Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserByEmailOrUsernameV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailOrUsernameV2Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserByEmailOrUsernameV2ResponseMultiError, or nil if none found.
func (m *GetUserByEmailOrUsernameV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailOrUsernameV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Account.(type) {
	case *GetUserByEmailOrUsernameV2Response_UserAccount:
		if v == nil {
			err := GetUserByEmailOrUsernameV2ResponseValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserByEmailOrUsernameV2ResponseValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserByEmailOrUsernameV2ResponseValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserByEmailOrUsernameV2ResponseValidationError{
					field:  "UserAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetUserByEmailOrUsernameV2Response_BusinessAccount:
		if v == nil {
			err := GetUserByEmailOrUsernameV2ResponseValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBusinessAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserByEmailOrUsernameV2ResponseValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserByEmailOrUsernameV2ResponseValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBusinessAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserByEmailOrUsernameV2ResponseValidationError{
					field:  "BusinessAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetUserByEmailOrUsernameV2ResponseMultiError(errors)
	}

	return nil
}

// GetUserByEmailOrUsernameV2ResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserByEmailOrUsernameV2Response.ValidateAll() if the designated
// constraints aren't met.
type GetUserByEmailOrUsernameV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailOrUsernameV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailOrUsernameV2ResponseMultiError) AllErrors() []error { return m }

// GetUserByEmailOrUsernameV2ResponseValidationError is the validation error
// returned by GetUserByEmailOrUsernameV2Response.Validate if the designated
// constraints aren't met.
type GetUserByEmailOrUsernameV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailOrUsernameV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailOrUsernameV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailOrUsernameV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailOrUsernameV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailOrUsernameV2ResponseValidationError) ErrorName() string {
	return "GetUserByEmailOrUsernameV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailOrUsernameV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailOrUsernameV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailOrUsernameV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailOrUsernameV2ResponseValidationError{}

// Validate checks the field values on VerifyUserV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyUserV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyUserV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyUserV2RequestMultiError, or nil if none found.
func (m *VerifyUserV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyUserV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := VerifyUserV2RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProfileType

	if len(errors) > 0 {
		return VerifyUserV2RequestMultiError(errors)
	}

	return nil
}

// VerifyUserV2RequestMultiError is an error wrapping multiple validation
// errors returned by VerifyUserV2Request.ValidateAll() if the designated
// constraints aren't met.
type VerifyUserV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyUserV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyUserV2RequestMultiError) AllErrors() []error { return m }

// VerifyUserV2RequestValidationError is the validation error returned by
// VerifyUserV2Request.Validate if the designated constraints aren't met.
type VerifyUserV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyUserV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyUserV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyUserV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyUserV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyUserV2RequestValidationError) ErrorName() string {
	return "VerifyUserV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyUserV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyUserV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyUserV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyUserV2RequestValidationError{}

// Validate checks the field values on VerifyUserV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyUserV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyUserV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyUserV2ResponseMultiError, or nil if none found.
func (m *VerifyUserV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyUserV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountVerified

	if len(errors) > 0 {
		return VerifyUserV2ResponseMultiError(errors)
	}

	return nil
}

// VerifyUserV2ResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyUserV2Response.ValidateAll() if the designated
// constraints aren't met.
type VerifyUserV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyUserV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyUserV2ResponseMultiError) AllErrors() []error { return m }

// VerifyUserV2ResponseValidationError is the validation error returned by
// VerifyUserV2Response.Validate if the designated constraints aren't met.
type VerifyUserV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyUserV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyUserV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyUserV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyUserV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyUserV2ResponseValidationError) ErrorName() string {
	return "VerifyUserV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyUserV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyUserV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyUserV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyUserV2ResponseValidationError{}

// Validate checks the field values on GetUserByUsernameV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUsernameV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUsernameV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUsernameV2RequestMultiError, or nil if none found.
func (m *GetUserByUsernameV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUsernameV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for ProfileType

	if len(errors) > 0 {
		return GetUserByUsernameV2RequestMultiError(errors)
	}

	return nil
}

// GetUserByUsernameV2RequestMultiError is an error wrapping multiple
// validation errors returned by GetUserByUsernameV2Request.ValidateAll() if
// the designated constraints aren't met.
type GetUserByUsernameV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUsernameV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUsernameV2RequestMultiError) AllErrors() []error { return m }

// GetUserByUsernameV2RequestValidationError is the validation error returned
// by GetUserByUsernameV2Request.Validate if the designated constraints aren't met.
type GetUserByUsernameV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUsernameV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUsernameV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUsernameV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUsernameV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUsernameV2RequestValidationError) ErrorName() string {
	return "GetUserByUsernameV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUsernameV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUsernameV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUsernameV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUsernameV2RequestValidationError{}

// Validate checks the field values on GetUserByUsernameV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUsernameV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUsernameV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUsernameV2ResponseMultiError, or nil if none found.
func (m *GetUserByUsernameV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUsernameV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Account.(type) {
	case *GetUserByUsernameV2Response_UserAccount:
		if v == nil {
			err := GetUserByUsernameV2ResponseValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserByUsernameV2ResponseValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserByUsernameV2ResponseValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserByUsernameV2ResponseValidationError{
					field:  "UserAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetUserByUsernameV2Response_BusinessAccount:
		if v == nil {
			err := GetUserByUsernameV2ResponseValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBusinessAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserByUsernameV2ResponseValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserByUsernameV2ResponseValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBusinessAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserByUsernameV2ResponseValidationError{
					field:  "BusinessAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetUserByUsernameV2ResponseMultiError(errors)
	}

	return nil
}

// GetUserByUsernameV2ResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserByUsernameV2Response.ValidateAll() if
// the designated constraints aren't met.
type GetUserByUsernameV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUsernameV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUsernameV2ResponseMultiError) AllErrors() []error { return m }

// GetUserByUsernameV2ResponseValidationError is the validation error returned
// by GetUserByUsernameV2Response.Validate if the designated constraints
// aren't met.
type GetUserByUsernameV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUsernameV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUsernameV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUsernameV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUsernameV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUsernameV2ResponseValidationError) ErrorName() string {
	return "GetUserByUsernameV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUsernameV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUsernameV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUsernameV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUsernameV2ResponseValidationError{}

// Validate checks the field values on CheckUsernameExistsV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUsernameExistsV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUsernameExistsV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUsernameExistsV2RequestMultiError, or nil if none found.
func (m *CheckUsernameExistsV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUsernameExistsV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for ProfileType

	if len(errors) > 0 {
		return CheckUsernameExistsV2RequestMultiError(errors)
	}

	return nil
}

// CheckUsernameExistsV2RequestMultiError is an error wrapping multiple
// validation errors returned by CheckUsernameExistsV2Request.ValidateAll() if
// the designated constraints aren't met.
type CheckUsernameExistsV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUsernameExistsV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUsernameExistsV2RequestMultiError) AllErrors() []error { return m }

// CheckUsernameExistsV2RequestValidationError is the validation error returned
// by CheckUsernameExistsV2Request.Validate if the designated constraints
// aren't met.
type CheckUsernameExistsV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUsernameExistsV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUsernameExistsV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUsernameExistsV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUsernameExistsV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUsernameExistsV2RequestValidationError) ErrorName() string {
	return "CheckUsernameExistsV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUsernameExistsV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUsernameExistsV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUsernameExistsV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUsernameExistsV2RequestValidationError{}

// Validate checks the field values on CheckUsernameExistsV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUsernameExistsV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUsernameExistsV2Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckUsernameExistsV2ResponseMultiError, or nil if none found.
func (m *CheckUsernameExistsV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUsernameExistsV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckUsernameExistsV2ResponseMultiError(errors)
	}

	return nil
}

// CheckUsernameExistsV2ResponseMultiError is an error wrapping multiple
// validation errors returned by CheckUsernameExistsV2Response.ValidateAll()
// if the designated constraints aren't met.
type CheckUsernameExistsV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUsernameExistsV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUsernameExistsV2ResponseMultiError) AllErrors() []error { return m }

// CheckUsernameExistsV2ResponseValidationError is the validation error
// returned by CheckUsernameExistsV2Response.Validate if the designated
// constraints aren't met.
type CheckUsernameExistsV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUsernameExistsV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUsernameExistsV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUsernameExistsV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUsernameExistsV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUsernameExistsV2ResponseValidationError) ErrorName() string {
	return "CheckUsernameExistsV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUsernameExistsV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUsernameExistsV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUsernameExistsV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUsernameExistsV2ResponseValidationError{}

// Validate checks the field values on CheckEmailExistsV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEmailExistsV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEmailExistsV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEmailExistsV2RequestMultiError, or nil if none found.
func (m *CheckEmailExistsV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEmailExistsV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CheckEmailExistsV2RequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProfileType

	if len(errors) > 0 {
		return CheckEmailExistsV2RequestMultiError(errors)
	}

	return nil
}

func (m *CheckEmailExistsV2Request) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CheckEmailExistsV2Request) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CheckEmailExistsV2RequestMultiError is an error wrapping multiple validation
// errors returned by CheckEmailExistsV2Request.ValidateAll() if the
// designated constraints aren't met.
type CheckEmailExistsV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEmailExistsV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEmailExistsV2RequestMultiError) AllErrors() []error { return m }

// CheckEmailExistsV2RequestValidationError is the validation error returned by
// CheckEmailExistsV2Request.Validate if the designated constraints aren't met.
type CheckEmailExistsV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEmailExistsV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEmailExistsV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEmailExistsV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEmailExistsV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEmailExistsV2RequestValidationError) ErrorName() string {
	return "CheckEmailExistsV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEmailExistsV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEmailExistsV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEmailExistsV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEmailExistsV2RequestValidationError{}

// Validate checks the field values on CheckEmailExistsV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEmailExistsV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEmailExistsV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEmailExistsV2ResponseMultiError, or nil if none found.
func (m *CheckEmailExistsV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEmailExistsV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckEmailExistsV2ResponseMultiError(errors)
	}

	return nil
}

// CheckEmailExistsV2ResponseMultiError is an error wrapping multiple
// validation errors returned by CheckEmailExistsV2Response.ValidateAll() if
// the designated constraints aren't met.
type CheckEmailExistsV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEmailExistsV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEmailExistsV2ResponseMultiError) AllErrors() []error { return m }

// CheckEmailExistsV2ResponseValidationError is the validation error returned
// by CheckEmailExistsV2Response.Validate if the designated constraints aren't met.
type CheckEmailExistsV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEmailExistsV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEmailExistsV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEmailExistsV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEmailExistsV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEmailExistsV2ResponseValidationError) ErrorName() string {
	return "CheckEmailExistsV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEmailExistsV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEmailExistsV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEmailExistsV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEmailExistsV2ResponseValidationError{}

// Validate checks the field values on GetUserByEmailV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByEmailV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByEmailV2RequestMultiError, or nil if none found.
func (m *GetUserByEmailV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = GetUserByEmailV2RequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProfileType

	if len(errors) > 0 {
		return GetUserByEmailV2RequestMultiError(errors)
	}

	return nil
}

func (m *GetUserByEmailV2Request) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetUserByEmailV2Request) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetUserByEmailV2RequestMultiError is an error wrapping multiple validation
// errors returned by GetUserByEmailV2Request.ValidateAll() if the designated
// constraints aren't met.
type GetUserByEmailV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailV2RequestMultiError) AllErrors() []error { return m }

// GetUserByEmailV2RequestValidationError is the validation error returned by
// GetUserByEmailV2Request.Validate if the designated constraints aren't met.
type GetUserByEmailV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailV2RequestValidationError) ErrorName() string {
	return "GetUserByEmailV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailV2RequestValidationError{}

// Validate checks the field values on GetUserByEmailV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByEmailV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByEmailV2ResponseMultiError, or nil if none found.
func (m *GetUserByEmailV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Account.(type) {
	case *GetUserByEmailV2Response_UserAccount:
		if v == nil {
			err := GetUserByEmailV2ResponseValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserByEmailV2ResponseValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserByEmailV2ResponseValidationError{
						field:  "UserAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserByEmailV2ResponseValidationError{
					field:  "UserAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetUserByEmailV2Response_BusinessAccount:
		if v == nil {
			err := GetUserByEmailV2ResponseValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBusinessAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserByEmailV2ResponseValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserByEmailV2ResponseValidationError{
						field:  "BusinessAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBusinessAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserByEmailV2ResponseValidationError{
					field:  "BusinessAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetUserByEmailV2ResponseMultiError(errors)
	}

	return nil
}

// GetUserByEmailV2ResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserByEmailV2Response.ValidateAll() if the designated
// constraints aren't met.
type GetUserByEmailV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailV2ResponseMultiError) AllErrors() []error { return m }

// GetUserByEmailV2ResponseValidationError is the validation error returned by
// GetUserByEmailV2Response.Validate if the designated constraints aren't met.
type GetUserByEmailV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailV2ResponseValidationError) ErrorName() string {
	return "GetUserByEmailV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailV2ResponseValidationError{}

// Validate checks the field values on PasswordResetWebhookV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordResetWebhookV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordResetWebhookV2Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PasswordResetWebhookV2RequestMultiError, or nil if none found.
func (m *PasswordResetWebhookV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordResetWebhookV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccountId() <= 0 {
		err := PasswordResetWebhookV2RequestValidationError{
			field:  "AccountId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	// no validation rules for ProfileType

	if len(errors) > 0 {
		return PasswordResetWebhookV2RequestMultiError(errors)
	}

	return nil
}

// PasswordResetWebhookV2RequestMultiError is an error wrapping multiple
// validation errors returned by PasswordResetWebhookV2Request.ValidateAll()
// if the designated constraints aren't met.
type PasswordResetWebhookV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordResetWebhookV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordResetWebhookV2RequestMultiError) AllErrors() []error { return m }

// PasswordResetWebhookV2RequestValidationError is the validation error
// returned by PasswordResetWebhookV2Request.Validate if the designated
// constraints aren't met.
type PasswordResetWebhookV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordResetWebhookV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordResetWebhookV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordResetWebhookV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordResetWebhookV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordResetWebhookV2RequestValidationError) ErrorName() string {
	return "PasswordResetWebhookV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordResetWebhookV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordResetWebhookV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordResetWebhookV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordResetWebhookV2RequestValidationError{}

// Validate checks the field values on PasswordResetWebhookV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordResetWebhookV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordResetWebhookV2Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PasswordResetWebhookV2ResponseMultiError, or nil if none found.
func (m *PasswordResetWebhookV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordResetWebhookV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return PasswordResetWebhookV2ResponseMultiError(errors)
	}

	return nil
}

// PasswordResetWebhookV2ResponseMultiError is an error wrapping multiple
// validation errors returned by PasswordResetWebhookV2Response.ValidateAll()
// if the designated constraints aren't met.
type PasswordResetWebhookV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordResetWebhookV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordResetWebhookV2ResponseMultiError) AllErrors() []error { return m }

// PasswordResetWebhookV2ResponseValidationError is the validation error
// returned by PasswordResetWebhookV2Response.Validate if the designated
// constraints aren't met.
type PasswordResetWebhookV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordResetWebhookV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordResetWebhookV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordResetWebhookV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordResetWebhookV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordResetWebhookV2ResponseValidationError) ErrorName() string {
	return "PasswordResetWebhookV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordResetWebhookV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordResetWebhookV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordResetWebhookV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordResetWebhookV2ResponseValidationError{}
