// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: user_service/v1/message.proto

package user_servicev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProfileType: represents the type of account tied to a given profile
type ProfileType int32

const (
	ProfileType_PROFILE_TYPE_UNSPECIFIED ProfileType = 0
	ProfileType_PROFILE_TYPE_USER        ProfileType = 1
	ProfileType_PROFILE_TYPE_BUSINESS    ProfileType = 2
)

// Enum value maps for ProfileType.
var (
	ProfileType_name = map[int32]string{
		0: "PROFILE_TYPE_UNSPECIFIED",
		1: "PROFILE_TYPE_USER",
		2: "PROFILE_TYPE_BUSINESS",
	}
	ProfileType_value = map[string]int32{
		"PROFILE_TYPE_UNSPECIFIED": 0,
		"PROFILE_TYPE_USER":        1,
		"PROFILE_TYPE_BUSINESS":    2,
	}
)

func (x ProfileType) Enum() *ProfileType {
	p := new(ProfileType)
	*p = x
	return p
}

func (x ProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_message_proto_enumTypes[0].Descriptor()
}

func (ProfileType) Type() protoreflect.EnumType {
	return &file_user_service_v1_message_proto_enumTypes[0]
}

func (x ProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileType.Descriptor instead.
func (ProfileType) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{0}
}

// Display and interaction preferences.
type UserSettings_Theme int32

const (
	UserSettings_THEME_UNSPECIFIED UserSettings_Theme = 0
	UserSettings_THEME_LIGHT       UserSettings_Theme = 1
	UserSettings_THEME_DARK        UserSettings_Theme = 2
)

// Enum value maps for UserSettings_Theme.
var (
	UserSettings_Theme_name = map[int32]string{
		0: "THEME_UNSPECIFIED",
		1: "THEME_LIGHT",
		2: "THEME_DARK",
	}
	UserSettings_Theme_value = map[string]int32{
		"THEME_UNSPECIFIED": 0,
		"THEME_LIGHT":       1,
		"THEME_DARK":        2,
	}
)

func (x UserSettings_Theme) Enum() *UserSettings_Theme {
	p := new(UserSettings_Theme)
	*p = x
	return p
}

func (x UserSettings_Theme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSettings_Theme) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_message_proto_enumTypes[1].Descriptor()
}

func (UserSettings_Theme) Type() protoreflect.EnumType {
	return &file_user_service_v1_message_proto_enumTypes[1]
}

func (x UserSettings_Theme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSettings_Theme.Descriptor instead.
func (UserSettings_Theme) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{4, 0}
}

// Investment preferences.
type UserSettings_RiskTolerance int32

const (
	UserSettings_RISK_TOLERANCE_UNSPECIFIED UserSettings_RiskTolerance = 0
	UserSettings_RISK_TOLERANCE_LOW         UserSettings_RiskTolerance = 1
	UserSettings_RISK_TOLERANCE_MEDIUM      UserSettings_RiskTolerance = 2
	UserSettings_RISK_TOLERANCE_HIGH        UserSettings_RiskTolerance = 3
)

// Enum value maps for UserSettings_RiskTolerance.
var (
	UserSettings_RiskTolerance_name = map[int32]string{
		0: "RISK_TOLERANCE_UNSPECIFIED",
		1: "RISK_TOLERANCE_LOW",
		2: "RISK_TOLERANCE_MEDIUM",
		3: "RISK_TOLERANCE_HIGH",
	}
	UserSettings_RiskTolerance_value = map[string]int32{
		"RISK_TOLERANCE_UNSPECIFIED": 0,
		"RISK_TOLERANCE_LOW":         1,
		"RISK_TOLERANCE_MEDIUM":      2,
		"RISK_TOLERANCE_HIGH":        3,
	}
)

func (x UserSettings_RiskTolerance) Enum() *UserSettings_RiskTolerance {
	p := new(UserSettings_RiskTolerance)
	*p = x
	return p
}

func (x UserSettings_RiskTolerance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSettings_RiskTolerance) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_message_proto_enumTypes[2].Descriptor()
}

func (UserSettings_RiskTolerance) Type() protoreflect.EnumType {
	return &file_user_service_v1_message_proto_enumTypes[2]
}

func (x UserSettings_RiskTolerance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSettings_RiskTolerance.Descriptor instead.
func (UserSettings_RiskTolerance) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{4, 1}
}

type UserSettings_DashboardWidget int32

const (
	UserSettings_DASHBOARD_WIDGET_TRANSACTIONS_UNSPECIFIED UserSettings_DashboardWidget = 0
	UserSettings_DASHBOARD_WIDGET_TRANSACTIONS_OVERVIEW    UserSettings_DashboardWidget = 1
	UserSettings_DASHBOARD_WIDGET_INVESTMENT_SUMMARY       UserSettings_DashboardWidget = 2
	UserSettings_DASHBOARD_WIDGET_MONTHLY_SPENDING_REPORT  UserSettings_DashboardWidget = 3
	UserSettings_DASHBOARD_WIDGET_SAVINGS_TRACKER          UserSettings_DashboardWidget = 4
	UserSettings_DASHBOARD_WIDGET_CREDIT_SCORE_MONITOR     UserSettings_DashboardWidget = 5
)

// Enum value maps for UserSettings_DashboardWidget.
var (
	UserSettings_DashboardWidget_name = map[int32]string{
		0: "DASHBOARD_WIDGET_TRANSACTIONS_UNSPECIFIED",
		1: "DASHBOARD_WIDGET_TRANSACTIONS_OVERVIEW",
		2: "DASHBOARD_WIDGET_INVESTMENT_SUMMARY",
		3: "DASHBOARD_WIDGET_MONTHLY_SPENDING_REPORT",
		4: "DASHBOARD_WIDGET_SAVINGS_TRACKER",
		5: "DASHBOARD_WIDGET_CREDIT_SCORE_MONITOR",
	}
	UserSettings_DashboardWidget_value = map[string]int32{
		"DASHBOARD_WIDGET_TRANSACTIONS_UNSPECIFIED": 0,
		"DASHBOARD_WIDGET_TRANSACTIONS_OVERVIEW":    1,
		"DASHBOARD_WIDGET_INVESTMENT_SUMMARY":       2,
		"DASHBOARD_WIDGET_MONTHLY_SPENDING_REPORT":  3,
		"DASHBOARD_WIDGET_SAVINGS_TRACKER":          4,
		"DASHBOARD_WIDGET_CREDIT_SCORE_MONITOR":     5,
	}
)

func (x UserSettings_DashboardWidget) Enum() *UserSettings_DashboardWidget {
	p := new(UserSettings_DashboardWidget)
	*p = x
	return p
}

func (x UserSettings_DashboardWidget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSettings_DashboardWidget) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_message_proto_enumTypes[3].Descriptor()
}

func (UserSettings_DashboardWidget) Type() protoreflect.EnumType {
	return &file_user_service_v1_message_proto_enumTypes[3]
}

func (x UserSettings_DashboardWidget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSettings_DashboardWidget.Descriptor instead.
func (UserSettings_DashboardWidget) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{4, 2}
}

type AccountInformation_BusinessType int32

const (
	AccountInformation_BUSINESS_TYPE_UNSPECIFIED         AccountInformation_BusinessType = 0
	AccountInformation_BUSINESS_TYPE_SOLE_PROPRIETORSHIP AccountInformation_BusinessType = 1
	AccountInformation_BUSINESS_TYPE_PARTNERSHIP         AccountInformation_BusinessType = 2
	AccountInformation_BUSINESS_TYPE_LLC                 AccountInformation_BusinessType = 3
	AccountInformation_BUSINESS_TYPE_CORPORATION         AccountInformation_BusinessType = 4
	AccountInformation_BUSINESS_TYPE_OTHER               AccountInformation_BusinessType = 5
)

// Enum value maps for AccountInformation_BusinessType.
var (
	AccountInformation_BusinessType_name = map[int32]string{
		0: "BUSINESS_TYPE_UNSPECIFIED",
		1: "BUSINESS_TYPE_SOLE_PROPRIETORSHIP",
		2: "BUSINESS_TYPE_PARTNERSHIP",
		3: "BUSINESS_TYPE_LLC",
		4: "BUSINESS_TYPE_CORPORATION",
		5: "BUSINESS_TYPE_OTHER",
	}
	AccountInformation_BusinessType_value = map[string]int32{
		"BUSINESS_TYPE_UNSPECIFIED":         0,
		"BUSINESS_TYPE_SOLE_PROPRIETORSHIP": 1,
		"BUSINESS_TYPE_PARTNERSHIP":         2,
		"BUSINESS_TYPE_LLC":                 3,
		"BUSINESS_TYPE_CORPORATION":         4,
		"BUSINESS_TYPE_OTHER":               5,
	}
)

func (x AccountInformation_BusinessType) Enum() *AccountInformation_BusinessType {
	p := new(AccountInformation_BusinessType)
	*p = x
	return p
}

func (x AccountInformation_BusinessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountInformation_BusinessType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_message_proto_enumTypes[4].Descriptor()
}

func (AccountInformation_BusinessType) Type() protoreflect.EnumType {
	return &file_user_service_v1_message_proto_enumTypes[4]
}

func (x AccountInformation_BusinessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountInformation_BusinessType.Descriptor instead.
func (AccountInformation_BusinessType) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{6, 0}
}

// frequency by which insights should be generated
type AIPoweredInsights_Frequency int32

const (
	AIPoweredInsights_FREQUENCY_UNSPECIFIED AIPoweredInsights_Frequency = 0
	AIPoweredInsights_FREQUENCY_DAILY       AIPoweredInsights_Frequency = 1
	AIPoweredInsights_FREQUENCY_WEEKLY      AIPoweredInsights_Frequency = 2
	AIPoweredInsights_FREQUENCY_MONTHLY     AIPoweredInsights_Frequency = 3
)

// Enum value maps for AIPoweredInsights_Frequency.
var (
	AIPoweredInsights_Frequency_name = map[int32]string{
		0: "FREQUENCY_UNSPECIFIED",
		1: "FREQUENCY_DAILY",
		2: "FREQUENCY_WEEKLY",
		3: "FREQUENCY_MONTHLY",
	}
	AIPoweredInsights_Frequency_value = map[string]int32{
		"FREQUENCY_UNSPECIFIED": 0,
		"FREQUENCY_DAILY":       1,
		"FREQUENCY_WEEKLY":      2,
		"FREQUENCY_MONTHLY":     3,
	}
)

func (x AIPoweredInsights_Frequency) Enum() *AIPoweredInsights_Frequency {
	p := new(AIPoweredInsights_Frequency)
	*p = x
	return p
}

func (x AIPoweredInsights_Frequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AIPoweredInsights_Frequency) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_message_proto_enumTypes[5].Descriptor()
}

func (AIPoweredInsights_Frequency) Type() protoreflect.EnumType {
	return &file_user_service_v1_message_proto_enumTypes[5]
}

func (x AIPoweredInsights_Frequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AIPoweredInsights_Frequency.Descriptor instead.
func (AIPoweredInsights_Frequency) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{9, 0}
}

// type of enabled notification
type NotificationSettings_Type int32

const (
	NotificationSettings_TYPE_UNSPECIFIED NotificationSettings_Type = 0
	// email based notification
	NotificationSettings_TYPE_EMAIL NotificationSettings_Type = 1
	// sms based notification
	NotificationSettings_TYPE_SMS NotificationSettings_Type = 2
	// app based notification
	NotificationSettings_TYPE_IN_APP NotificationSettings_Type = 3
)

// Enum value maps for NotificationSettings_Type.
var (
	NotificationSettings_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_EMAIL",
		2: "TYPE_SMS",
		3: "TYPE_IN_APP",
	}
	NotificationSettings_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_EMAIL":       1,
		"TYPE_SMS":         2,
		"TYPE_IN_APP":      3,
	}
)

func (x NotificationSettings_Type) Enum() *NotificationSettings_Type {
	p := new(NotificationSettings_Type)
	*p = x
	return p
}

func (x NotificationSettings_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationSettings_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_message_proto_enumTypes[6].Descriptor()
}

func (NotificationSettings_Type) Type() protoreflect.EnumType {
	return &file_user_service_v1_message_proto_enumTypes[6]
}

func (x NotificationSettings_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationSettings_Type.Descriptor instead.
func (NotificationSettings_Type) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{11, 0}
}

// @brief Represents a user account in the context of simfinni.
type UserAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the account.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Email associated with the user account.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Physical address associated with the user.
	Address *Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// Brief description about the user, up to 200 characters.
	Bio string `protobuf:"bytes,12,opt,name=bio,proto3" json:"bio,omitempty"`
	// Short headline for the user's profile.
	Headline string `protobuf:"bytes,13,opt,name=headline,proto3" json:"headline,omitempty"`
	// Phone number associated with the account.
	PhoneNumber string `protobuf:"bytes,14,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Tags associated with the user account, between 1 and 10.
	Tags []*Tags `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	// ID for the authentication service linked to this account.
	AuthnAccountId uint64 `protobuf:"varint,18,opt,name=authn_account_id,json=authnAccountId,proto3" json:"authn_account_id,omitempty"`
	// Indicates if the account is currently active.
	IsActive bool `protobuf:"varint,22,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// User's first name.
	Firstname string `protobuf:"bytes,26,opt,name=firstname,proto3" json:"firstname,omitempty"`
	// User's last name.
	Lastname string `protobuf:"bytes,27,opt,name=lastname,proto3" json:"lastname,omitempty"`
	// Username associated with the account, minimum of 10 characters.
	Username string `protobuf:"bytes,28,opt,name=username,proto3" json:"username,omitempty"`
	// Indicates if the account is set to private.
	IsPrivate bool `protobuf:"varint,29,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// Indicates if the user's email has been verified.
	IsEmailVerified bool `protobuf:"varint,30,opt,name=is_email_verified,json=isEmailVerified,proto3" json:"is_email_verified,omitempty"`
	// Timestamp for when the account was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for when the email was verified.
	VerifiedAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
	// Settings specific to the user account.
	UserSettings *UserSettings `protobuf:"bytes,40,opt,name=user_settings,json=userSettings,proto3" json:"user_settings,omitempty"`
	// Enum indicating the type of profile (e.g., individual, corporate).
	AccountType ProfileType `protobuf:"varint,42,opt,name=account_type,json=accountType,proto3,enum=user_service.v1.ProfileType" json:"account_type,omitempty"`
}

func (x *UserAccount) Reset() {
	*x = UserAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccount) ProtoMessage() {}

func (x *UserAccount) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccount.ProtoReflect.Descriptor instead.
func (*UserAccount) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *UserAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserAccount) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UserAccount) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *UserAccount) GetHeadline() string {
	if x != nil {
		return x.Headline
	}
	return ""
}

func (x *UserAccount) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserAccount) GetTags() []*Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UserAccount) GetAuthnAccountId() uint64 {
	if x != nil {
		return x.AuthnAccountId
	}
	return 0
}

func (x *UserAccount) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *UserAccount) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *UserAccount) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *UserAccount) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserAccount) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *UserAccount) GetIsEmailVerified() bool {
	if x != nil {
		return x.IsEmailVerified
	}
	return false
}

func (x *UserAccount) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserAccount) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

func (x *UserAccount) GetUserSettings() *UserSettings {
	if x != nil {
		return x.UserSettings
	}
	return nil
}

func (x *UserAccount) GetAccountType() ProfileType {
	if x != nil {
		return x.AccountType
	}
	return ProfileType_PROFILE_TYPE_UNSPECIFIED
}

// BusinessAccount represents a business account within the context of solomon-ai.
type BusinessAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the business account.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Email associated with the business account.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Physical address associated with the business account.
	Address *Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// Short description of the business account. Maximum of 200 characters.
	Bio string `protobuf:"bytes,12,opt,name=bio,proto3" json:"bio,omitempty"`
	// Headline for the profile of the business account.
	Headline string `protobuf:"bytes,13,opt,name=headline,proto3" json:"headline,omitempty"`
	// Phone number associated with the business account.
	PhoneNumber string `protobuf:"bytes,14,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Tags associated with the business account. Between 1 and 10 tags are allowed.
	Tags []*Tags `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	// Identifier for the associated authentication service account.
	AuthnAccountId uint64 `protobuf:"varint,18,opt,name=authn_account_id,json=authnAccountId,proto3" json:"authn_account_id,omitempty"`
	// Indicates whether the business account is active.
	IsActive bool `protobuf:"varint,22,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Username for the business account. Must be at least 10 characters long.
	Username string `protobuf:"bytes,28,opt,name=username,proto3" json:"username,omitempty"`
	// Indicates whether the business account is private.
	IsPrivate bool `protobuf:"varint,29,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// Indicates whether the email associated with the business account has been verified.
	IsEmailVerified bool `protobuf:"varint,30,opt,name=is_email_verified,json=isEmailVerified,proto3" json:"is_email_verified,omitempty"`
	// Timestamp indicating when the business account was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp indicating when the email for the business account was verified.
	VerifiedAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
	// Date when the company associated with the business account was established.
	CompanyEstablishedDate string `protobuf:"bytes,35,opt,name=company_established_date,json=companyEstablishedDate,proto3" json:"company_established_date,omitempty"`
	// Industry type of the company associated with the business account.
	CompanyIndustryType string `protobuf:"bytes,36,opt,name=company_industry_type,json=companyIndustryType,proto3" json:"company_industry_type,omitempty"`
	// Website URL of the company associated with the business account.
	CompanyWebsiteUrl string `protobuf:"bytes,37,opt,name=company_website_url,json=companyWebsiteUrl,proto3" json:"company_website_url,omitempty"`
	// Description of the company associated with the business account.
	CompanyDescription string `protobuf:"bytes,38,opt,name=company_description,json=companyDescription,proto3" json:"company_description,omitempty"`
	// Name of the company associated with the business account.
	CompanyName string `protobuf:"bytes,39,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// Settings specific to the business account.
	BusinessAccountSettings *BusinessAccountSettings `protobuf:"bytes,41,opt,name=business_account_settings,json=businessAccountSettings,proto3" json:"business_account_settings,omitempty"`
	// The type of profile associated with the business account (e.g., individual, corporate).
	AccountType ProfileType `protobuf:"varint,42,opt,name=account_type,json=accountType,proto3,enum=user_service.v1.ProfileType" json:"account_type,omitempty"`
}

func (x *BusinessAccount) Reset() {
	*x = BusinessAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessAccount) ProtoMessage() {}

func (x *BusinessAccount) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessAccount.ProtoReflect.Descriptor instead.
func (*BusinessAccount) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *BusinessAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BusinessAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BusinessAccount) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *BusinessAccount) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *BusinessAccount) GetHeadline() string {
	if x != nil {
		return x.Headline
	}
	return ""
}

func (x *BusinessAccount) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *BusinessAccount) GetTags() []*Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *BusinessAccount) GetAuthnAccountId() uint64 {
	if x != nil {
		return x.AuthnAccountId
	}
	return 0
}

func (x *BusinessAccount) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *BusinessAccount) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BusinessAccount) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *BusinessAccount) GetIsEmailVerified() bool {
	if x != nil {
		return x.IsEmailVerified
	}
	return false
}

func (x *BusinessAccount) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BusinessAccount) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

func (x *BusinessAccount) GetCompanyEstablishedDate() string {
	if x != nil {
		return x.CompanyEstablishedDate
	}
	return ""
}

func (x *BusinessAccount) GetCompanyIndustryType() string {
	if x != nil {
		return x.CompanyIndustryType
	}
	return ""
}

func (x *BusinessAccount) GetCompanyWebsiteUrl() string {
	if x != nil {
		return x.CompanyWebsiteUrl
	}
	return ""
}

func (x *BusinessAccount) GetCompanyDescription() string {
	if x != nil {
		return x.CompanyDescription
	}
	return ""
}

func (x *BusinessAccount) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *BusinessAccount) GetBusinessAccountSettings() *BusinessAccountSettings {
	if x != nil {
		return x.BusinessAccountSettings
	}
	return nil
}

func (x *BusinessAccount) GetAccountType() ProfileType {
	if x != nil {
		return x.AccountType
	}
	return ProfileType_PROFILE_TYPE_UNSPECIFIED
}

// Address: represents an account's address
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the address field
	// Validations:
	// - must be at least 5 character long (meaning cannot be empty)
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// the unit if the address is an apartment
	// Validations:
	// - must be at least 1 character long (meaning cannot be empty)
	Unit string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	// the address zipcode
	// Validations:
	// - must be exactly 5 characters
	Zipcode string `protobuf:"bytes,4,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	// the city
	// Validations:
	// - must be at least 3 characters long (meaning cannot be empty)
	City string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	// the state/municipality
	// Validations
	// - must be at least 2 characters long
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// longitude
	// Validations: None - can be empty
	Longitude string `protobuf:"bytes,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// latittude
	// Validations: None - can be empty
	Lattitude string `protobuf:"bytes,8,opt,name=lattitude,proto3" json:"lattitude,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *Address) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Address) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Address) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Address) GetLattitude() string {
	if x != nil {
		return x.Lattitude
	}
	return ""
}

// Tags: represents metadata tags associated to an account
type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tag id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of tag
	// validations:
	// - cannot be empty
	// - must be at least 3 characters long
	TagName string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	// description of tag
	// validations:
	// - cannot be empty
	// - must be at least 10 characters long
	TagDescription string `protobuf:"bytes,3,opt,name=tag_description,json=tagDescription,proto3" json:"tag_description,omitempty"`
	// metadata associated with tag
	// validations:
	// - must provide between 1 and 10 metadata tags
	Metadata []string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *Tags) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tags) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *Tags) GetTagDescription() string {
	if x != nil {
		return x.TagDescription
	}
	return ""
}

func (x *Tags) GetMetadata() []string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// User settings for the fintech application.
type UserSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id       uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AppTheme UserSettings_Theme `protobuf:"varint,2,opt,name=app_theme,json=appTheme,proto3,enum=user_service.v1.UserSettings_Theme" json:"app_theme,omitempty"`
	// Notification preferences.
	EmailNotifications bool `protobuf:"varint,3,opt,name=email_notifications,json=emailNotifications,proto3" json:"email_notifications,omitempty"`
	PushNotifications  bool `protobuf:"varint,4,opt,name=push_notifications,json=pushNotifications,proto3" json:"push_notifications,omitempty"`
	SmsNotifications   bool `protobuf:"varint,5,opt,name=sms_notifications,json=smsNotifications,proto3" json:"sms_notifications,omitempty"`
	// Currency preference.
	DefaultCurrency string `protobuf:"bytes,6,opt,name=default_currency,json=defaultCurrency,proto3" json:"default_currency,omitempty"`
	// Preferred date-time format.
	DatetimeFormat string `protobuf:"bytes,7,opt,name=datetime_format,json=datetimeFormat,proto3" json:"datetime_format,omitempty"`
	// Two-factor authentication status.
	TwoFactorAuthenticationEnabled bool `protobuf:"varint,8,opt,name=two_factor_authentication_enabled,json=twoFactorAuthenticationEnabled,proto3" json:"two_factor_authentication_enabled,omitempty"`
	// Language preference.
	PreferredLanguage string `protobuf:"bytes,9,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	// Privacy settings.
	PublicProfile           bool                       `protobuf:"varint,10,opt,name=public_profile,json=publicProfile,proto3" json:"public_profile,omitempty"`               // Whether the user's profile is public.
	EnableGoalJournal       bool                       `protobuf:"varint,11,opt,name=enable_goal_journal,json=enableGoalJournal,proto3" json:"enable_goal_journal,omitempty"` // Option to share transaction history with friends/family.
	InvestmentRiskTolerance UserSettings_RiskTolerance `protobuf:"varint,12,opt,name=investment_risk_tolerance,json=investmentRiskTolerance,proto3,enum=user_service.v1.UserSettings_RiskTolerance" json:"investment_risk_tolerance,omitempty"`
	// Dashboard customization, e.g., specific widgets or reports.
	DashboardWidgets []UserSettings_DashboardWidget `protobuf:"varint,13,rep,packed,name=dashboard_widgets,json=dashboardWidgets,proto3,enum=user_service.v1.UserSettings_DashboardWidget" json:"dashboard_widgets,omitempty"`
}

func (x *UserSettings) Reset() {
	*x = UserSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettings) ProtoMessage() {}

func (x *UserSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettings.ProtoReflect.Descriptor instead.
func (*UserSettings) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *UserSettings) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserSettings) GetAppTheme() UserSettings_Theme {
	if x != nil {
		return x.AppTheme
	}
	return UserSettings_THEME_UNSPECIFIED
}

func (x *UserSettings) GetEmailNotifications() bool {
	if x != nil {
		return x.EmailNotifications
	}
	return false
}

func (x *UserSettings) GetPushNotifications() bool {
	if x != nil {
		return x.PushNotifications
	}
	return false
}

func (x *UserSettings) GetSmsNotifications() bool {
	if x != nil {
		return x.SmsNotifications
	}
	return false
}

func (x *UserSettings) GetDefaultCurrency() string {
	if x != nil {
		return x.DefaultCurrency
	}
	return ""
}

func (x *UserSettings) GetDatetimeFormat() string {
	if x != nil {
		return x.DatetimeFormat
	}
	return ""
}

func (x *UserSettings) GetTwoFactorAuthenticationEnabled() bool {
	if x != nil {
		return x.TwoFactorAuthenticationEnabled
	}
	return false
}

func (x *UserSettings) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *UserSettings) GetPublicProfile() bool {
	if x != nil {
		return x.PublicProfile
	}
	return false
}

func (x *UserSettings) GetEnableGoalJournal() bool {
	if x != nil {
		return x.EnableGoalJournal
	}
	return false
}

func (x *UserSettings) GetInvestmentRiskTolerance() UserSettings_RiskTolerance {
	if x != nil {
		return x.InvestmentRiskTolerance
	}
	return UserSettings_RISK_TOLERANCE_UNSPECIFIED
}

func (x *UserSettings) GetDashboardWidgets() []UserSettings_DashboardWidget {
	if x != nil {
		return x.DashboardWidgets
	}
	return nil
}

type ContactInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Email       string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Address     string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ContactInformation) Reset() {
	*x = ContactInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInformation) ProtoMessage() {}

func (x *ContactInformation) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInformation.ProtoReflect.Descriptor instead.
func (*ContactInformation) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *ContactInformation) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContactInformation) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ContactInformation) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ContactInformation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type AccountInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id                         uint64                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BusinessName               string                          `protobuf:"bytes,2,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	BusinessType               AccountInformation_BusinessType `protobuf:"varint,3,opt,name=business_type,json=businessType,proto3,enum=user_service.v1.AccountInformation_BusinessType" json:"business_type,omitempty"`
	BusinessRegistrationNumber string                          `protobuf:"bytes,4,opt,name=business_registration_number,json=businessRegistrationNumber,proto3" json:"business_registration_number,omitempty"`
	ContactInfo                *ContactInformation             `protobuf:"bytes,5,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
}

func (x *AccountInformation) Reset() {
	*x = AccountInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInformation) ProtoMessage() {}

func (x *AccountInformation) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInformation.ProtoReflect.Descriptor instead.
func (*AccountInformation) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *AccountInformation) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountInformation) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *AccountInformation) GetBusinessType() AccountInformation_BusinessType {
	if x != nil {
		return x.BusinessType
	}
	return AccountInformation_BUSINESS_TYPE_UNSPECIFIED
}

func (x *AccountInformation) GetBusinessRegistrationNumber() string {
	if x != nil {
		return x.BusinessRegistrationNumber
	}
	return ""
}

func (x *AccountInformation) GetContactInfo() *ContactInformation {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

type TaxSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id            uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TaxPercentage float64 `protobuf:"fixed64,2,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`
	TaxCode       string  `protobuf:"bytes,3,opt,name=tax_code,json=taxCode,proto3" json:"tax_code,omitempty"`
}

func (x *TaxSettings) Reset() {
	*x = TaxSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxSettings) ProtoMessage() {}

func (x *TaxSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxSettings.ProtoReflect.Descriptor instead.
func (*TaxSettings) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *TaxSettings) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxSettings) GetTaxPercentage() float64 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

func (x *TaxSettings) GetTaxCode() string {
	if x != nil {
		return x.TaxCode
	}
	return ""
}

type FinancialPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id                 uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CurrencyPreference string       `protobuf:"bytes,2,opt,name=currency_preference,json=currencyPreference,proto3" json:"currency_preference,omitempty"`
	TaxSettings        *TaxSettings `protobuf:"bytes,3,opt,name=tax_settings,json=taxSettings,proto3" json:"tax_settings,omitempty"`
	FinancialYearStart string       `protobuf:"bytes,4,opt,name=financial_year_start,json=financialYearStart,proto3" json:"financial_year_start,omitempty"`
}

func (x *FinancialPreferences) Reset() {
	*x = FinancialPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialPreferences) ProtoMessage() {}

func (x *FinancialPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialPreferences.ProtoReflect.Descriptor instead.
func (*FinancialPreferences) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *FinancialPreferences) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialPreferences) GetCurrencyPreference() string {
	if x != nil {
		return x.CurrencyPreference
	}
	return ""
}

func (x *FinancialPreferences) GetTaxSettings() *TaxSettings {
	if x != nil {
		return x.TaxSettings
	}
	return nil
}

func (x *FinancialPreferences) GetFinancialYearStart() string {
	if x != nil {
		return x.FinancialYearStart
	}
	return ""
}

type AIPoweredInsights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id               uint64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InsightFrequency AIPoweredInsights_Frequency `protobuf:"varint,2,opt,name=insight_frequency,json=insightFrequency,proto3,enum=user_service.v1.AIPoweredInsights_Frequency" json:"insight_frequency,omitempty"`
	// List of areas of interest for insights
	AreasOfInterest []string `protobuf:"bytes,3,rep,name=areas_of_interest,json=areasOfInterest,proto3" json:"areas_of_interest,omitempty"` // List of areas for insights
	DataSharing     bool     `protobuf:"varint,4,opt,name=data_sharing,json=dataSharing,proto3" json:"data_sharing,omitempty"`              // True if user agrees to share data for insights
}

func (x *AIPoweredInsights) Reset() {
	*x = AIPoweredInsights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIPoweredInsights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIPoweredInsights) ProtoMessage() {}

func (x *AIPoweredInsights) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIPoweredInsights.ProtoReflect.Descriptor instead.
func (*AIPoweredInsights) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *AIPoweredInsights) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AIPoweredInsights) GetInsightFrequency() AIPoweredInsights_Frequency {
	if x != nil {
		return x.InsightFrequency
	}
	return AIPoweredInsights_FREQUENCY_UNSPECIFIED
}

func (x *AIPoweredInsights) GetAreasOfInterest() []string {
	if x != nil {
		return x.AreasOfInterest
	}
	return nil
}

func (x *AIPoweredInsights) GetDataSharing() bool {
	if x != nil {
		return x.DataSharing
	}
	return false
}

type IntegrationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// wether to enable linking bank account for account
	BankAccountLinking bool `protobuf:"varint,2,opt,name=bank_account_linking,json=bankAccountLinking,proto3" json:"bank_account_linking,omitempty"`
	// list of supported third party apps of interest
	ThirdPartyApps []string `protobuf:"bytes,3,rep,name=third_party_apps,json=thirdPartyApps,proto3" json:"third_party_apps,omitempty"` // List of connected third-party apps
}

func (x *IntegrationSettings) Reset() {
	*x = IntegrationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationSettings) ProtoMessage() {}

func (x *IntegrationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationSettings.ProtoReflect.Descriptor instead.
func (*IntegrationSettings) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{10}
}

func (x *IntegrationSettings) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IntegrationSettings) GetBankAccountLinking() bool {
	if x != nil {
		return x.BankAccountLinking
	}
	return false
}

func (x *IntegrationSettings) GetThirdPartyApps() []string {
	if x != nil {
		return x.ThirdPartyApps
	}
	return nil
}

type NotificationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id               uint64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NotificationType NotificationSettings_Type `protobuf:"varint,2,opt,name=notification_type,json=notificationType,proto3,enum=user_service.v1.NotificationSettings_Type" json:"notification_type,omitempty"`
	Alerts           bool                      `protobuf:"varint,3,opt,name=alerts,proto3" json:"alerts,omitempty"` // True if user wants to be alerted for anomalies
}

func (x *NotificationSettings) Reset() {
	*x = NotificationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationSettings) ProtoMessage() {}

func (x *NotificationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationSettings.ProtoReflect.Descriptor instead.
func (*NotificationSettings) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{11}
}

func (x *NotificationSettings) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NotificationSettings) GetNotificationType() NotificationSettings_Type {
	if x != nil {
		return x.NotificationType
	}
	return NotificationSettings_TYPE_UNSPECIFIED
}

func (x *NotificationSettings) GetAlerts() bool {
	if x != nil {
		return x.Alerts
	}
	return false
}

// Business Account Settings
type BusinessAccountSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id                   uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountInformation   *AccountInformation   `protobuf:"bytes,2,opt,name=account_information,json=accountInformation,proto3" json:"account_information,omitempty"`
	FinancialPreferences *FinancialPreferences `protobuf:"bytes,3,opt,name=financial_preferences,json=financialPreferences,proto3" json:"financial_preferences,omitempty"`
	AiPoweredInsights    *AIPoweredInsights    `protobuf:"bytes,4,opt,name=ai_powered_insights,json=aiPoweredInsights,proto3" json:"ai_powered_insights,omitempty"`
	IntegrationSettings  *IntegrationSettings  `protobuf:"bytes,5,opt,name=integration_settings,json=integrationSettings,proto3" json:"integration_settings,omitempty"`
	NotificationSettings *NotificationSettings `protobuf:"bytes,6,opt,name=notification_settings,json=notificationSettings,proto3" json:"notification_settings,omitempty"`
}

func (x *BusinessAccountSettings) Reset() {
	*x = BusinessAccountSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessAccountSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessAccountSettings) ProtoMessage() {}

func (x *BusinessAccountSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessAccountSettings.ProtoReflect.Descriptor instead.
func (*BusinessAccountSettings) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{12}
}

func (x *BusinessAccountSettings) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BusinessAccountSettings) GetAccountInformation() *AccountInformation {
	if x != nil {
		return x.AccountInformation
	}
	return nil
}

func (x *BusinessAccountSettings) GetFinancialPreferences() *FinancialPreferences {
	if x != nil {
		return x.FinancialPreferences
	}
	return nil
}

func (x *BusinessAccountSettings) GetAiPoweredInsights() *AIPoweredInsights {
	if x != nil {
		return x.AiPoweredInsights
	}
	return nil
}

func (x *BusinessAccountSettings) GetIntegrationSettings() *IntegrationSettings {
	if x != nil {
		return x.IntegrationSettings
	}
	return nil
}

func (x *BusinessAccountSettings) GetNotificationSettings() *NotificationSettings {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

var File_user_service_v1_message_proto protoreflect.FileDescriptor

var file_user_service_v1_message_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72,
	0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a,
	0x06, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x16, 0x4a, 0x14, 0x22, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x40, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0a, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x74, 0x65, 0x73,
	0x74, 0x75, 0x73, 0x65, 0x72, 0x39, 0x36, 0x39, 0x36, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x0a, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa3, 0x0a, 0x0a, 0x0f,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x00,
	0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x32, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x16, 0x4a, 0x14, 0x22, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00,
	0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x13, 0x4a, 0x11, 0x22, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x36, 0x35,
	0x31, 0x33, 0x34, 0x32, 0x34, 0x31, 0x32, 0x34, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x42, 0x12, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0a, 0xba, 0xb9,
	0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x10,
	0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0e, 0x61, 0x75, 0x74,
	0x68, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09,
	0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x74, 0x65, 0x73,
	0x74, 0x75, 0x73, 0x65, 0x72, 0x39, 0x36, 0x39, 0x36, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x0a, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69,
	0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x49, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x66, 0x69, 0x6e, 0x74, 0x65, 0x63, 0x68, 0x22, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x4a, 0x17, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x2d,
	0x61, 0x69, 0x2e, 0x69, 0x6f, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92,
	0x41, 0x1e, 0x4a, 0x1c, 0x22, 0x57, 0x65, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x20, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x22,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e,
	0x20, 0x41, 0x49, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52,
	0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xf0, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x31, 0x32, 0x33, 0x34, 0x20,
	0x35, 0x74, 0x68, 0x20, 0x41, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x41, 0x70,
	0x74, 0x20, 0x31, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x2e, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x22,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x00, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b, 0x22,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41,
	0x0c, 0x4a, 0x0a, 0x22, 0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b, 0x22, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x2d, 0x37, 0x33, 0x2e, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34,
	0x22, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x6c, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x34, 0x30, 0x2e, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x22, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x22, 0xf3, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x22, 0x74, 0x65, 0x73, 0x74,
	0x74, 0x61, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x03, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x74, 0x61, 0x67, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x16, 0x4a, 0x14, 0x22, 0x74, 0x65, 0x73, 0x74, 0x74, 0x61, 0x67,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x0a, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x24, 0x4a, 0x22, 0x5b, 0x22, 0x74, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x74,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x5d, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0a, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xb9, 0x09, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x08, 0x61, 0x70, 0x70, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e,
	0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0x67, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a,
	0x11, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x10, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x05, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x48,
	0x45, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x22, 0x7b, 0x0a, 0x0d, 0x52, 0x69,
	0x73, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x4c, 0x45,
	0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x22, 0x94, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x29, 0x44,
	0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x41,
	0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12,
	0x2c, 0x0a, 0x28, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x49, 0x44,
	0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a,
	0x20, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x49, 0x44, 0x47, 0x45,
	0x54, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x41, 0x53, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x5f, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x05, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xfc, 0x03,
	0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55,
	0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xc2, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x52, 0x49, 0x45, 0x54, 0x4f, 0x52,
	0x53, 0x48, 0x49, 0x50, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x53,
	0x48, 0x49, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4c, 0x43, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x05, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x6c, 0x0a, 0x0b,
	0x54, 0x61, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x43, 0x6f,
	0x64, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x14, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x74, 0x61, 0x78,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x59, 0x65, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc4,
	0x02, 0x0a, 0x11, 0x41, 0x49, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x11, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x61, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x68, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x57, 0x45,
	0x45, 0x4b, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x03, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x73, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf1, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x10, 0x03, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x99, 0x04, 0x0a, 0x17, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x13, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x15, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x13, 0x61, 0x69, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x49, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02,
	0x38, 0x01, 0x52, 0x11, 0x61, 0x69, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a,
	0x02, 0x38, 0x01, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x08,
	0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x2a, 0x5d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x42, 0xec, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f,
	0x6e, 0x41, 0x49, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x55, 0x58, 0x58, 0xaa, 0x02, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_service_v1_message_proto_rawDescOnce sync.Once
	file_user_service_v1_message_proto_rawDescData = file_user_service_v1_message_proto_rawDesc
)

func file_user_service_v1_message_proto_rawDescGZIP() []byte {
	file_user_service_v1_message_proto_rawDescOnce.Do(func() {
		file_user_service_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_service_v1_message_proto_rawDescData)
	})
	return file_user_service_v1_message_proto_rawDescData
}

var file_user_service_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_user_service_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_user_service_v1_message_proto_goTypes = []interface{}{
	(ProfileType)(0),                     // 0: user_service.v1.ProfileType
	(UserSettings_Theme)(0),              // 1: user_service.v1.UserSettings.Theme
	(UserSettings_RiskTolerance)(0),      // 2: user_service.v1.UserSettings.RiskTolerance
	(UserSettings_DashboardWidget)(0),    // 3: user_service.v1.UserSettings.DashboardWidget
	(AccountInformation_BusinessType)(0), // 4: user_service.v1.AccountInformation.BusinessType
	(AIPoweredInsights_Frequency)(0),     // 5: user_service.v1.AIPoweredInsights.Frequency
	(NotificationSettings_Type)(0),       // 6: user_service.v1.NotificationSettings.Type
	(*UserAccount)(nil),                  // 7: user_service.v1.UserAccount
	(*BusinessAccount)(nil),              // 8: user_service.v1.BusinessAccount
	(*Address)(nil),                      // 9: user_service.v1.Address
	(*Tags)(nil),                         // 10: user_service.v1.Tags
	(*UserSettings)(nil),                 // 11: user_service.v1.UserSettings
	(*ContactInformation)(nil),           // 12: user_service.v1.ContactInformation
	(*AccountInformation)(nil),           // 13: user_service.v1.AccountInformation
	(*TaxSettings)(nil),                  // 14: user_service.v1.TaxSettings
	(*FinancialPreferences)(nil),         // 15: user_service.v1.FinancialPreferences
	(*AIPoweredInsights)(nil),            // 16: user_service.v1.AIPoweredInsights
	(*IntegrationSettings)(nil),          // 17: user_service.v1.IntegrationSettings
	(*NotificationSettings)(nil),         // 18: user_service.v1.NotificationSettings
	(*BusinessAccountSettings)(nil),      // 19: user_service.v1.BusinessAccountSettings
	(*timestamppb.Timestamp)(nil),        // 20: google.protobuf.Timestamp
}
var file_user_service_v1_message_proto_depIdxs = []int32{
	9,  // 0: user_service.v1.UserAccount.address:type_name -> user_service.v1.Address
	10, // 1: user_service.v1.UserAccount.tags:type_name -> user_service.v1.Tags
	20, // 2: user_service.v1.UserAccount.created_at:type_name -> google.protobuf.Timestamp
	20, // 3: user_service.v1.UserAccount.verified_at:type_name -> google.protobuf.Timestamp
	11, // 4: user_service.v1.UserAccount.user_settings:type_name -> user_service.v1.UserSettings
	0,  // 5: user_service.v1.UserAccount.account_type:type_name -> user_service.v1.ProfileType
	9,  // 6: user_service.v1.BusinessAccount.address:type_name -> user_service.v1.Address
	10, // 7: user_service.v1.BusinessAccount.tags:type_name -> user_service.v1.Tags
	20, // 8: user_service.v1.BusinessAccount.created_at:type_name -> google.protobuf.Timestamp
	20, // 9: user_service.v1.BusinessAccount.verified_at:type_name -> google.protobuf.Timestamp
	19, // 10: user_service.v1.BusinessAccount.business_account_settings:type_name -> user_service.v1.BusinessAccountSettings
	0,  // 11: user_service.v1.BusinessAccount.account_type:type_name -> user_service.v1.ProfileType
	1,  // 12: user_service.v1.UserSettings.app_theme:type_name -> user_service.v1.UserSettings.Theme
	2,  // 13: user_service.v1.UserSettings.investment_risk_tolerance:type_name -> user_service.v1.UserSettings.RiskTolerance
	3,  // 14: user_service.v1.UserSettings.dashboard_widgets:type_name -> user_service.v1.UserSettings.DashboardWidget
	4,  // 15: user_service.v1.AccountInformation.business_type:type_name -> user_service.v1.AccountInformation.BusinessType
	12, // 16: user_service.v1.AccountInformation.contact_info:type_name -> user_service.v1.ContactInformation
	14, // 17: user_service.v1.FinancialPreferences.tax_settings:type_name -> user_service.v1.TaxSettings
	5,  // 18: user_service.v1.AIPoweredInsights.insight_frequency:type_name -> user_service.v1.AIPoweredInsights.Frequency
	6,  // 19: user_service.v1.NotificationSettings.notification_type:type_name -> user_service.v1.NotificationSettings.Type
	13, // 20: user_service.v1.BusinessAccountSettings.account_information:type_name -> user_service.v1.AccountInformation
	15, // 21: user_service.v1.BusinessAccountSettings.financial_preferences:type_name -> user_service.v1.FinancialPreferences
	16, // 22: user_service.v1.BusinessAccountSettings.ai_powered_insights:type_name -> user_service.v1.AIPoweredInsights
	17, // 23: user_service.v1.BusinessAccountSettings.integration_settings:type_name -> user_service.v1.IntegrationSettings
	18, // 24: user_service.v1.BusinessAccountSettings.notification_settings:type_name -> user_service.v1.NotificationSettings
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_user_service_v1_message_proto_init() }
func file_user_service_v1_message_proto_init() {
	if File_user_service_v1_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_service_v1_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIPoweredInsights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessAccountSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_service_v1_message_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_service_v1_message_proto_goTypes,
		DependencyIndexes: file_user_service_v1_message_proto_depIdxs,
		EnumInfos:         file_user_service_v1_message_proto_enumTypes,
		MessageInfos:      file_user_service_v1_message_proto_msgTypes,
	}.Build()
	File_user_service_v1_message_proto = out.File
	file_user_service_v1_message_proto_rawDesc = nil
	file_user_service_v1_message_proto_goTypes = nil
	file_user_service_v1_message_proto_depIdxs = nil
}
