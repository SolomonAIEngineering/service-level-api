{
  "swagger": "2.0",
  "info": {
    "title": "Simfiny",
    "description": "With our AI-driven financial recommendations track your spending, create a budget, save for the future, all while connecting with others who are on the same financial journey as you !",
    "version": "0.1",
    "contact": {
      "name": "YoanYomba",
      "url": "https://solomon-ai.ip",
      "email": "yoanyomba@solomon-ai.co"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://github.com/openfga/openfga/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "FinancialService"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/account/{userId}/investment/{investmentAccountId}": {
      "get": {
        "summary": "get investment account by id",
        "description": "This endpoint returns the investment account if the investment account exists",
        "operationId": "GetInvestmentAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetInvestmentAccountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "investmentAccountId",
            "description": "The investment account id\nValidations:\n- investment_account_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "investment account"
        ]
      }
    },
    "/api/v1/account/{userId}/liability/{liabilityAccountId}": {
      "get": {
        "summary": "get liability account by id",
        "description": "This endpoint returns the liability account if the liability account exists",
        "operationId": "GetLiabilityAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetLiabilityAccountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "liabilityAccountId",
            "description": "The liability account id\nValidations:\n- liability_account_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "liability account"
        ]
      }
    },
    "/api/v1/account/{userId}/mortgage/{mortgageAccountId}": {
      "get": {
        "summary": "get mortgage account by id",
        "description": "This endpoint returns the mortgage account if the mortgage account exists",
        "operationId": "GetMortageAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetMortageAccountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "mortgageAccountId",
            "description": "The mortage account id\nValidations:\n- mortage_account_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "mortgage account"
        ]
      }
    },
    "/api/v1/account/{userId}/student-loan/{studentLoanAccountId}": {
      "get": {
        "summary": "get student loan account by id",
        "description": "This endpoint returns the student loan account if the student loan account exists",
        "operationId": "GetStudentLoanAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetStudentLoanAccountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "studentLoanAccountId",
            "description": "The student loan account id\nValidations:\n- student_loan_account_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "student loan account"
        ]
      }
    },
    "/api/v1/analytics/balance-history/account/{plaidAccountId}/pagenumber/{pageNumber}/pagesize/{pageSize}": {
      "get": {
        "summary": "Returns the account balance history for an account",
        "description": "This API could accept account_id as input parameters and return the account balance history for that account.",
        "operationId": "GetAccountBalanceHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetAccountBalanceHistoryResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "plaidAccountId",
            "description": "Account ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "analytics",
          "balance-history"
        ]
      }
    },
    "/api/v1/analytics/balance-history/user/{userId}/pagenumber/{pageNumber}/pagesize/{pageSize}": {
      "get": {
        "summary": "Returns the account balance history for a user",
        "description": "This API could accept user_id as input parameters and return the account balance history for that user.",
        "operationId": "GetUserAccountBalanceHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetUserAccountBalanceHistoryResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "User ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pageNumber",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "balance-history"
        ]
      }
    },
    "/api/v1/analytics/category-monthly-expenditure/user/{userId}": {
      "get": {
        "summary": "Returns the monthly category expenditure for a user",
        "description": "This API could accept user_id as an input parameter and return the monthly category expenditure for that user.",
        "operationId": "GetUserCategoryMonthlyExpenditure",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetUserCategoryMonthlyExpenditureResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "User ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "personalFinanceCategoryPrimary",
            "description": "Personal finance category",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "month",
            "description": "Month in the format of YYYYMM",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "category",
          "expense"
        ]
      }
    },
    "/api/v1/analytics/category-monthly-income/user/{userId}": {
      "get": {
        "summary": "Get monthly income by user for a specific category",
        "operationId": "GetUserCategoryMonthlyIncome",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetUserCategoryMonthlyIncomeResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "personalFinanceCategoryPrimary",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "month",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "category",
          "income"
        ]
      }
    },
    "/api/v1/analytics/category-monthly-transaction-count/user/{userId}": {
      "get": {
        "summary": "Get monthly transaction count by user, month, and category",
        "operationId": "GetCategoryMonthlyTransactionCount",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetCategoryMonthlyTransactionCountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "has to be present and defined",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "personalFinanceCategoryPrimary",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "category",
          "transactions"
        ]
      }
    },
    "/api/v1/analytics/debt-to-income-ratio/user/{userId}": {
      "get": {
        "summary": "Get Debt-to-Income ratio by user and month",
        "operationId": "GetDebtToIncomeRatio",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetDebtToIncomeRatioResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "debt"
        ]
      }
    },
    "/api/v1/analytics/expenses/user/{userId}": {
      "get": {
        "summary": "Get Expense Metrics by user, month and category",
        "operationId": "GetExpenseMetrics",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetExpenseMetricsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "description": "optonal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "personalFinanceCategoryPrimary",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "expense"
        ]
      }
    },
    "/api/v1/analytics/finance-profile/user/{userId}": {
      "get": {
        "summary": "Get Financial Profile by user and month",
        "operationId": "GetFinancialProfile",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetFinancialProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "finance-profile"
        ]
      }
    },
    "/api/v1/analytics/income-expense-ratio/user/{userId}": {
      "get": {
        "summary": "Get Income Expense Ratio by user and month",
        "operationId": "GetIncomeExpenseRatio",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetIncomeExpenseRatioResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "income"
        ]
      }
    },
    "/api/v1/analytics/income/user/{userId}": {
      "get": {
        "summary": "Get Income Metrics by user, month and category",
        "operationId": "GetIncomeMetrics",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetIncomeMetricsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "personalFinanceCategoryPrimary",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "income"
        ]
      }
    },
    "/api/v1/analytics/melody-financial-context/user/{userId}": {
      "get": {
        "summary": "Get Melody Financial Context",
        "operationId": "GetMelodyFinancialContext",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetMelodyFinancialContextResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "financial-context"
        ]
      }
    },
    "/api/v1/analytics/merchant-monthly-expenditure/user/{userId}": {
      "get": {
        "summary": "Get Merchant Monthly Expenditure by user, month and merchant name",
        "operationId": "GetMerchantMonthlyExpenditure",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetMerchantMonthlyExpenditureResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "merchantName",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "expense"
        ]
      }
    },
    "/api/v1/analytics/monthly-balance/user/{userId}": {
      "get": {
        "summary": "Get Monthly Balance by user and month",
        "operationId": "GetMonthlyBalance",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetMonthlyBalanceResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "balance"
        ]
      }
    },
    "/api/v1/analytics/monthly-expenditure/user/{userId}": {
      "get": {
        "summary": "Get Monthly Expenditure by user and month",
        "operationId": "GetMonthlyExpenditure",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetMonthlyExpenditureResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "expense"
        ]
      }
    },
    "/api/v1/analytics/monthly-income/user/{userId}": {
      "get": {
        "summary": "Get Monthly Income by user and month",
        "operationId": "GetMonthlyIncome",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetMonthlyIncomeResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "income"
        ]
      }
    },
    "/api/v1/analytics/monthly-savings/{userId}": {
      "get": {
        "summary": "Get Monthly Savings by user and month",
        "operationId": "GetMonthlySavings",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetMonthlySavingsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "savings"
        ]
      }
    },
    "/api/v1/analytics/monthly-total-quantity-by-security-and-user/user/{userId}": {
      "get": {
        "summary": "Get Monthly Total Quantity of Security by user, month and security",
        "operationId": "GetMonthlyTotalQuantityBySecurityAndUser",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetMonthlyTotalQuantityBySecurityAndUserResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "securityId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "securities"
        ]
      }
    },
    "/api/v1/analytics/monthly-transaction-count/user/{userId}": {
      "get": {
        "summary": "Get Monthly Transaction Count by user and month",
        "operationId": "GetMonthlyTransactionCount",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetMonthlyTransactionCountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "transaction"
        ]
      }
    },
    "/api/v1/analytics/payment-channel-expenditure/user/{userId}": {
      "get": {
        "summary": "Get Payment Channel Monthly Expenditure by user, month, and payment channel",
        "operationId": "GetPaymentChannelMonthlyExpenditure",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetPaymentChannelMonthlyExpenditureResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentChannel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "expense"
        ]
      }
    },
    "/api/v1/analytics/total-investment/user/{userId}": {
      "get": {
        "summary": "Get Total Investment by user and security",
        "operationId": "GetTotalInvestmentBySecurity",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": ".api.v1.GetTotalInvestmentBySecurityResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "securityId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "security"
        ]
      }
    },
    "/api/v1/analytics/transaction-aggregates/{userId}": {
      "get": {
        "summary": "Returns the aggregated transactions for a user and month",
        "description": "This API could accept user_id and month as input parameters and return the aggregated transactions for that user and month.",
        "operationId": "TransactionAggregates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetTransactionAggregatesResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "month",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "personalFinanceCategoryPrimary",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationCity",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentChannel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "merchantName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "description": "Number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "transaction",
          "category"
        ]
      }
    },
    "/api/v1/bank-account": {
      "put": {
        "summary": "update a bank account for a given user profile",
        "description": "This endpoint updates a bank account if the user record id and bank account id exists",
        "operationId": "UpdateBankAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.UpdateBankAccountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateBankAccountRequest"
            }
          }
        ],
        "tags": [
          "bank account"
        ]
      }
    },
    "/api/v1/bank-account/profile/{userId}": {
      "post": {
        "summary": "create a bank account for a given user profile",
        "description": "This endpoint creates a bank account for a given user profile",
        "operationId": "CreateBankAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.CreateUserResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The account ID associated with the user\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "bankAccount": {
                  "$ref": "#/definitions/BankAccount",
                  "title": "The bank account to create\nValidations:\n- cannot be nil hence required"
                },
                "profileType": {
                  "$ref": "#/definitions/FinancialUserProfileType"
                }
              },
              "title": "CreateBankAccountRequest: Represents the request object invoked against the financial\nservice to create a bank account for a given user",
              "required": [
                "bankAccount",
                "profileType"
              ]
            }
          }
        ],
        "tags": [
          "bank account"
        ]
      }
    },
    "/api/v1/bank-account/{bankAccountId}": {
      "get": {
        "summary": "get a bank account for a given user profile",
        "description": "This endpoint returns the bank account if the user record id and bank account id exists\nexample: /api/v1/bank-account?user_id=xxxxxx\u0026\u0026bank_account_id=xxxxxxx",
        "operationId": "GetBankAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetBankAccountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "bankAccountId",
            "description": "The bank account id\nValidations:\n- bank_account_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "bank account"
        ]
      },
      "delete": {
        "summary": "deletes a bank account for a given user profile",
        "description": "This endpoint performs a delete operation on a user profile based on the provided parametersThis deletion operation spans multiple services (plaid) as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.",
        "operationId": "DeleteUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.DeleteBankAccountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "bankAccountId",
            "description": "The bank account id\nValidations:\n- bank_account_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userId",
            "description": "The account ID associated with the user\nValidations:\n- user_id must be greater than 0",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "bank account"
        ]
      }
    },
    "/api/v1/budget": {
      "get": {
        "summary": "get all budgets",
        "description": "This endpoint returns all budgets",
        "operationId": "GetAllBudgets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetAllBudgetsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pocketId",
            "description": "The pocket account id\nValidations:\n- pocket_account_id must be greater than 0",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "smartGoalId",
            "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "milestoneId",
            "description": "The milestone id\nValidations:\n- milestone_id must be greater than 0",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "budget"
        ]
      },
      "post": {
        "summary": "create a budget",
        "description": "This endpoint creates a budget",
        "operationId": "CreateBudget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.CreateBudgetResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBudgetRequest"
            }
          }
        ],
        "tags": [
          "budget"
        ]
      },
      "put": {
        "summary": "updates a budget",
        "description": "This endpoint updates a budget",
        "operationId": "UpdatesBudget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.UpdateBudgetResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateBudgetRequest"
            }
          }
        ],
        "tags": [
          "budget"
        ]
      }
    },
    "/api/v1/budget/{budgetId}": {
      "get": {
        "summary": "get budget by id",
        "description": "This endpoint returns the budget if the budget exists",
        "operationId": "GetBudget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetBudgetResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "budgetId",
            "description": "The budget id\nValidations:\n- budget_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "budget"
        ]
      },
      "delete": {
        "summary": "delete a budget",
        "description": "This endpoint deletes a budget",
        "operationId": "DeleteBudget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.DeleteBudgetResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "budgetId",
            "description": "The budget id\nValidations:\n- budget_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "budget"
        ]
      }
    },
    "/api/v1/forecast/{smartGoalId}": {
      "get": {
        "summary": "get forecast by id",
        "description": "This endpoint returns the forecast if the forecast exists",
        "operationId": "GetForecast",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetForecastResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "smartGoalId",
            "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "forecast"
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "summary": "health check",
        "description": "This endpoint performs a healc check on the service",
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.HealthCheckResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "service health"
        ]
      }
    },
    "/api/v1/historical-account-balance/user/{userId}/plaid-account-id/{plaidAccountId}": {
      "get": {
        "summary": "gets account balance of an account",
        "description": "This endpoint returns the historical balance for a given account",
        "operationId": "GetAccountBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetAccountBalanceResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "plaidAccountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "account-balance"
        ]
      }
    },
    "/api/v1/link": {
      "post": {
        "summary": "create link",
        "description": "This endpoint creates a link",
        "operationId": "CreateLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.CreateLinkResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateManualLinkRequest"
            }
          }
        ],
        "tags": [
          "link"
        ]
      }
    },
    "/api/v1/link/{linkId}": {
      "get": {
        "summary": "get link by id",
        "description": "This endpoint returns the link if the link exists",
        "operationId": "GetLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetLinkResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "linkId",
            "description": "The link id\nValidations:\n- link_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "link"
        ]
      }
    },
    "/api/v1/link/{linkId}/user/{userId}": {
      "delete": {
        "summary": "delete link by id",
        "description": "This endpoint deletes the link if the link exists",
        "operationId": "DeleteLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.DeleteLinkResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "linkId",
            "description": "The link id\nValidations:\n- link_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "link"
        ]
      }
    },
    "/api/v1/links/{userId}": {
      "get": {
        "summary": "get links",
        "description": "This endpoint returns the links",
        "operationId": "GetLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetLinksResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "link"
        ]
      }
    },
    "/api/v1/merge/exchange-token": {
      "post": {
        "operationId": "MergeExchangePublicLinkTokenForAccountToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.MergeExchangePublicLinkTokenForAccountTokenResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MergeExchangePublicLinkTokenForAccountTokenRequest"
            }
          }
        ],
        "tags": [
          "merge"
        ]
      }
    },
    "/api/v1/merge/initiate-token-exchange": {
      "post": {
        "summary": "Link utilizes a series of token exchanges to securely authenticate your users' integrations.\n1. Get a link_token to initialize a Link session for your end user.\n2. Make Link appear in your frontend.\n3. Swap for an account_token, which authenticates future requests to the Unified API.",
        "description": "MergeGetPublicLinkToken enables the client to get a link_token to initialize a Link session for your end user.",
        "operationId": "MergeGetPublicLinkToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.MergeGetPublicLinkTokenResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MergeGetPublicLinkTokenRequest"
            }
          }
        ],
        "tags": [
          "merge"
        ]
      }
    },
    "/api/v1/milestone": {
      "post": {
        "summary": "create a milestone",
        "description": "This endpoint creates a milestone",
        "operationId": "CreateMilestone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.CreateMilestoneResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMilestoneRequest"
            }
          }
        ],
        "tags": [
          "milestone"
        ]
      },
      "put": {
        "summary": "updates a milestone",
        "description": "This endpoint updates a milestone",
        "operationId": "UpdatesMilestone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.UpdateMilestoneResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMilestoneRequest"
            }
          }
        ],
        "tags": [
          "milestone"
        ]
      }
    },
    "/api/v1/milestone/smart-goal/{smartGoalId}": {
      "get": {
        "summary": "get milestones by smart goal id",
        "description": "This endpoint returns the milestones if the smart goal exists",
        "operationId": "GetMilestones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetMilestonesBySmartGoalIdResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "smartGoalId",
            "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "milestone"
        ]
      }
    },
    "/api/v1/milestone/{milestoneId}": {
      "get": {
        "summary": "get milestone by id",
        "description": "This endpoint returns the milestone if the milestone exists",
        "operationId": "GetMilestone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetMilestoneByIdResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "milestoneId",
            "description": "The milestone id\nValidations:\n- milestone_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "milestone"
        ]
      },
      "delete": {
        "summary": "delete a milestone",
        "description": "This endpoint deletes a milestone",
        "operationId": "DeleteMilestone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.DeleteMilestoneResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "milestoneId",
            "description": "The milestone id\nValidations:\n- milestone_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "milestone"
        ]
      }
    },
    "/api/v1/plaid/exchange-token": {
      "post": {
        "summary": "exchange plaid token",
        "description": "This endpoint exchanges a plaid link token for a plaid access token",
        "operationId": "ExchangePlaidToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.PlaidExchangeTokenResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlaidExchangeTokenRequest"
            }
          }
        ],
        "tags": [
          "plaid link token"
        ]
      }
    },
    "/api/v1/plaid/initiate-token-exchange": {
      "post": {
        "summary": "initiate plaid setup",
        "description": "This endpoint initiates a plaid link token creation",
        "operationId": "InitiatePlaidSetup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.PlaidSetupResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlaidInitiateTokenExchangeRequest"
            }
          }
        ],
        "tags": [
          "plaid link token"
        ]
      }
    },
    "/api/v1/plaid/initiate-token-update": {
      "post": {
        "summary": "initiate plaid link token update",
        "description": "This endpoint initiates a plaid link token update",
        "operationId": "InitiatePlaidTokenUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.PlaidInitiateTokenUpdateResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlaidInitiateTokenUpdateRequest"
            }
          }
        ],
        "tags": [
          "plaid link token"
        ]
      }
    },
    "/api/v1/plaid/webhook": {
      "post": {
        "summary": "Processes a webhook obtained from plaid",
        "description": "This endpoint enabled simfiny to process triggered webhooks",
        "operationId": "ProcessWebhook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.ProcessWebhookResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessWebhookRequest"
            }
          }
        ],
        "tags": [
          "webhook"
        ]
      }
    },
    "/api/v1/pocket": {
      "put": {
        "summary": "updates a pocket",
        "description": "This endpoint updates a pocket",
        "operationId": "UpdatePocket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.UpdatePocketResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePocketRequest"
            }
          }
        ],
        "tags": [
          "pocket"
        ]
      }
    },
    "/api/v1/pocket/bank-account": {
      "post": {
        "summary": "adds a default set of pockets to a specific bank account of interest",
        "description": "This endpoint adds a default pocket to a specific bank account of interest",
        "operationId": "AddDefaultPocketsToBankAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.AddDefaultPocketsToBankAccountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddDefaultPocketsToBankAccountRequest"
            }
          }
        ],
        "tags": [
          "pocket"
        ]
      }
    },
    "/api/v1/pocket/{pocketId}": {
      "get": {
        "summary": "get a pocket",
        "description": "This endpoint returns the pocket if the pocket exists\nexample: /api/v1/pocket/xxxxxxx",
        "operationId": "GetPocket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetPocketResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pocketId",
            "description": "The pocket account id\nValidations:\n- pocket_account_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "pocket"
        ]
      },
      "delete": {
        "summary": "deletes a pocket",
        "description": "This endpoint deletes a pocket",
        "operationId": "DeletePocket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.DeletePocketResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pocketId",
            "description": "The pocket id\nValidations:\n- pocket_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "pocket"
        ]
      }
    },
    "/api/v1/profile": {
      "post": {
        "summary": "create a user profile",
        "description": "This endpoint performs an a creation operation of a user profile based on the provided parametersThis operation is implemented as a distributed transactions as this operation can span multiple services",
        "operationId": "CreateUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.CreateUserProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserProfileRequest"
            }
          }
        ],
        "tags": [
          "user profile"
        ]
      },
      "put": {
        "summary": "update a user profile",
        "description": "This endpoint performs an updates operation on a user profile based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state",
        "operationId": "UpdateUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.UpdateUserResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserProfileRequest"
            }
          }
        ],
        "tags": [
          "user profile"
        ]
      }
    },
    "/api/v1/profile/{userId}": {
      "get": {
        "summary": "Gets a user profile",
        "description": "Queries and obtains a user profile based on the provided parameters",
        "operationId": "GetUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetUserProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The account ID associated with the user.\nNOTE: This user_id is the simfiny backend platform wide user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "user profile"
        ]
      },
      "delete": {
        "summary": "deletes a user profile",
        "description": "This endpoint performs a delete operation on a user profile based on the provided parametersThis deletion operation spans multiple services (plaid) as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.",
        "operationId": "DeleteUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.DeleteUserProfileResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The account ID associated with the user.\nNOTE: This user_id is the simfiny backend platform wide user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "user profile"
        ]
      }
    },
    "/api/v1/ready": {
      "get": {
        "summary": "readyness check",
        "description": "This endpoint performs a readiness check on the service",
        "operationId": "ReadynessCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.ReadynessCheckResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "service readyness"
        ]
      }
    },
    "/api/v1/smart-goal": {
      "post": {
        "summary": "create a smart goal",
        "description": "This endpoint creates a smart goal",
        "operationId": "CreateSmartGoal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.CreateSmartGoalResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSmartGoalRequest"
            }
          }
        ],
        "tags": [
          "smart goals"
        ]
      },
      "put": {
        "summary": "update a smart goal",
        "description": "This endpoint updates a smart goal",
        "operationId": "UpdateSmartGoal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.UpdateSmartGoalResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSmartGoalRequest"
            }
          }
        ],
        "tags": [
          "smart goals"
        ]
      }
    },
    "/api/v1/smart-goal/note": {
      "post": {
        "summary": "adds a note to a smart goal",
        "description": "This endpoint adds a note to a smart goal",
        "operationId": "AddNoteToSmartGoal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.AddNoteToSmartGoalResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNoteToSmartGoalRequest"
            }
          }
        ],
        "tags": [
          "smart-goal"
        ]
      },
      "put": {
        "summary": "updates a note to a smart goal",
        "description": "This endpoint updates a note to a smart goal",
        "operationId": "UpdateNoteToSmartGoal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.UpdateNoteToSmartGoalResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateNoteToSmartGoalRequest"
            }
          }
        ],
        "tags": [
          "smart-goal"
        ]
      }
    },
    "/api/v1/smart-goal/note/{noteId}": {
      "get": {
        "summary": "gets a note from a smart goal",
        "description": "This endpoint gets a note from a smart goal",
        "operationId": "GetNoteFromSmartGoal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetNoteFromSmartGoalResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "noteId",
            "description": "The note id\nValidations:\n- note_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "smart-goal"
        ]
      },
      "delete": {
        "summary": "deletes a note from a smart goal",
        "description": "This endpoint deletes a note from a smart goal",
        "operationId": "DeleteNoteFromSmartGoal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.DeleteNoteFromSmartGoalResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "noteId",
            "description": "The note id\nValidations:\n- note_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "smartGoalId",
            "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "smart-goal"
        ]
      }
    },
    "/api/v1/smart-goal/note/{smartGoalId}": {
      "get": {
        "summary": "gets notes from a smart goal",
        "description": "This endpoint gets notes from a smart goal",
        "operationId": "GetNotesFromSmartGoal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetNotesFromSmartGoalResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "smartGoalId",
            "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "smart-goal"
        ]
      }
    },
    "/api/v1/smart-goal/pocket/{pocketId}": {
      "get": {
        "summary": "get smart goals by pocket id",
        "description": "This endpoint returns the smart goals if the pocket exists",
        "operationId": "GetSmartGoalsByPocketId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetSmartGoalsByPocketIdResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "pocketId",
            "description": "The pocket account id\nValidations:\n- pocket_account_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "smart goals"
        ]
      }
    },
    "/api/v1/smart-goal/{smartGoalId}": {
      "delete": {
        "summary": "delete a smart goal",
        "description": "This endpoint deletes a smart goal",
        "operationId": "DeleteSmartGoal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.DeleteSmartGoalResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "smartGoalId",
            "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "smart goals"
        ]
      }
    },
    "/api/v1/stripe/subscription": {
      "post": {
        "summary": "Creates a new subscription for a given customer against stripe",
        "description": "This endpoint enabled a user to create a new subscription against stripe",
        "operationId": "CreateSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.CreateSubscriptionResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSubscriptionRequest"
            }
          }
        ],
        "tags": [
          "payment"
        ]
      }
    },
    "/api/v1/stripe/webhook": {
      "post": {
        "summary": "Processes a webhook obtained from stripe",
        "description": "This endpoint enabled simfiny to process triggered webhooks from stripe",
        "operationId": "ProcessStripeWebhook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.StripeWebhookResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StripeWebhookRequest"
            }
          }
        ],
        "tags": [
          "webhook"
        ]
      }
    },
    "/api/v1/transactions/recurring-transactions/{userId}": {
      "get": {
        "summary": "get recurring transactions",
        "description": "This endpoint returns the recurring transactions for a given user id",
        "operationId": "GetRecurringTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetRecurringTransactionsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "recurring transactions"
        ]
      }
    },
    "/api/v1/transactions/user/{userId}/plaid-account-id/{plaidAccountId}/pageNumber/{pageNumber}/pageSize/{pageSize}": {
      "get": {
        "summary": "get transactions tied to a bank account and account id",
        "description": "This endpoint returns the transactions for a given user id and a business account id",
        "operationId": "GetTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetTransactionsForBankAccountResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "plaidAccountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "transactions"
        ]
      }
    },
    "/api/v1/transactions/{userId}/pageNumber/{pageNumber}/pageSize/{pageSize}": {
      "get": {
        "summary": "get transactions",
        "description": "This endpoint returns the transactions for a given user id",
        "operationId": "GetTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetTransactionsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pageNumber",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "transactions"
        ]
      }
    },
    "/api/v1/users/{userId}/accounts/{plaidAccountId}/transactions/month": {
      "get": {
        "summary": "Get transactions for the past month",
        "description": "This endpoint returns the transactions for a given user id over the past month\nexample: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions/month",
        "operationId": "GetTransactionsForPastMonth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetTransactionsForPastMonthResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "plaidAccountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Current page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Number of transactions per page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "transactions"
        ]
      }
    },
    "/api/v1/users/{userId}/accounts/{plaidAccountId}/transactions/range": {
      "get": {
        "summary": "get transactions by time",
        "description": "This endpoint returns the transactions for a given user id and time\nexample: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions?start_time={start_time}\u0026end_time={end_time}",
        "operationId": "GetTransactionsByTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetTransactionsByTimeResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "The user id\nValidations:\n- user_id must be greater than 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "plaidAccountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "NOTE: time ranges must follow the follownig semantic - 2023-01-01",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "endTime",
            "description": "NOTE: time ranges must follow the follownig semantic - 2023-01-03",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "page",
            "description": "Current page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Number of transactions per page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "transactions"
        ]
      }
    },
    "/api/v1/users/{userId}/accounts/{plaidAccountId}/transactions/week": {
      "get": {
        "summary": "get transactions for the past week",
        "description": "This endpoint returns the transactions for a given user id and time\nexample: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions/week",
        "operationId": "GetTransactionsForPastWeek",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".api.v1.GetTransactionsForPastWeekResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input.",
            "schema": {
              "$ref": ".api.v1.ValidationErrorMessageResponse"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path.",
            "schema": {
              "$ref": ".api.v1.PathUnknownErrorMessageResponse"
            }
          },
          "500": {
            "description": "Request failed due to internal server error.",
            "schema": {
              "$ref": ".api.v1.InternalErrorMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "plaidAccountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Current page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Number of transactions per page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "profileType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
              "FINANCIAL_USER_PROFILE_TYPE_USER",
              "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
            ],
            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "analytics",
          "transactions"
        ]
      }
    }
  },
  "definitions": {
    "AccountBalanceHistory": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "accountId": {
          "type": "string"
        },
        "isoCurrencyCode": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        },
        "sign": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "string"
        }
      },
      "description": "Account Balance History\nThis message is used to represent the balance history of an account."
    },
    "ActionableInsight": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "detailedAction": {
          "type": "string",
          "title": "for each user we generate a detailed actionable insights for them to see"
        },
        "summarizedAction": {
          "type": "string",
          "title": "for each user we generate a summarized insight targeted at optimizing a certain condition"
        },
        "generatedTime": {
          "type": "string",
          "format": "date-time",
          "title": "the time the insight was generated"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "associated tags with the generated insights"
        }
      },
      "title": "An actionable insight serves as a basic insight users \ncan leverage and act upon and is typically generated based off of their financial contexts"
    },
    "AddDefaultPocketsToBankAccountRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "The user id\nValidations:\n- user_id must be greater than 0"
        },
        "bankAccountId": {
          "type": "string",
          "format": "uint64",
          "title": "The bank account id\nValidations:\n- bank_account_id must be greater than 0"
        },
        "profileType": {
          "$ref": "#/definitions/FinancialUserProfileType"
        }
      },
      "required": [
        "userId",
        "bankAccountId",
        "profileType"
      ]
    },
    "AddDefaultPocketsToBankAccountResponse": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "$ref": "#/definitions/BankAccount",
          "title": "The bank account id"
        }
      }
    },
    "AddNoteToSmartGoalRequest": {
      "type": "object",
      "properties": {
        "smartGoalId": {
          "type": "string",
          "format": "uint64",
          "title": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0"
        },
        "note": {
          "$ref": "#/definitions/SmartNote",
          "title": "The note to add\nValidations:\n- cannot be nil hence required"
        }
      },
      "required": [
        "smartGoalId",
        "note"
      ]
    },
    "AddNoteToSmartGoalResponse": {
      "type": "object",
      "properties": {
        "goal": {
          "$ref": "#/definitions/SmartGoal",
          "title": "The smart goal id"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "the database record's id"
        },
        "type": {
          "type": "string"
        },
        "street1": {
          "type": "string",
          "description": "Line 1 of the address's street."
        },
        "street2": {
          "type": "string",
          "description": "Line 2 of the address's street."
        },
        "city": {
          "type": "string",
          "description": "The address's city."
        },
        "state": {
          "type": "string",
          "description": "The address's state or region."
        },
        "countrySubdivision": {
          "type": "string",
          "description": "Typically, this might just be 'state' but used your field name to keep it consistent with the JSON",
          "title": "country's subdivision"
        },
        "country": {
          "type": "string",
          "description": "The address's country."
        },
        "zipCode": {
          "type": "string",
          "description": "The address's zip code."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Consider using google.protobuf.Timestamp if precise time manipulation is required",
          "title": "This is the datetime that this object was last updated by Merge"
        }
      },
      "description": "The Address object is used to represent a contact's or company's address."
    },
    "Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "Apr": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "percentage": {
          "type": "number",
          "format": "double"
        },
        "type": {
          "type": "string"
        },
        "balanceSubjectToApr": {
          "type": "number",
          "format": "double"
        },
        "interestChargeAmount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Attachments": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "mergeAccountId": {
          "type": "string",
          "title": "the object's id as stored in merge"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "fileName": {
          "type": "string",
          "description": "The attachment's name."
        },
        "fileUrl": {
          "type": "string",
          "description": "The attachment's url."
        },
        "company": {
          "type": "string",
          "description": "The company the accounting attachment belongs to."
        },
        "remoteWasDeleted": {
          "type": "boolean",
          "description": "Indicates whether or not this object has been deleted by third party webhooks."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "title": "This is the datetime that this object was last updated by Merge"
        }
      },
      "description": "The AccountingAttachment object is used to represent a company's attachments."
    },
    "BalanceSheet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "name": {
          "type": "string",
          "description": "The balance sheet's name."
        },
        "currency": {
          "type": "string"
        },
        "company": {
          "type": "string",
          "title": "Company object for the given BalanceSheet object. May not necessarily be the compnay name but the \ncompany reference"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The balance sheet's date. The balance sheet data will\n reflect the company's financial position this point in time.\n\nConsider using google.protobuf.Timestamp"
        },
        "netAssets": {
          "type": "string",
          "format": "int64",
          "description": "The balance sheet's net assets."
        },
        "assets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          },
          "description": "The balance sheet's total assets."
        },
        "liabilities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          },
          "description": "The balance sheet's total liabilities."
        },
        "equity": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          },
          "description": "The balance sheet's total equity."
        },
        "remoteGeneratedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time that balance sheet was generated by the accounting system.\n\nConsider using google.protobuf.Timestamp"
        },
        "remoteWasDeleted": {
          "type": "boolean",
          "description": "Indicates whether or not this object has been deleted by third party webhooks."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Consider using google.protobuf.Timestamp",
          "title": "This is the datetime that this object was last updated by Merge"
        },
        "mergeAccountId": {
          "type": "string",
          "title": "the id as stored in merge"
        }
      },
      "description": "The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal\nto liability and equity combined.  This shows the company’s financial health at a specific point in time."
    },
    "BankAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "the user id to which this bank account is tied to"
        },
        "name": {
          "type": "string",
          "title": "the bank account name"
        },
        "number": {
          "type": "string",
          "title": "the bank account number"
        },
        "type": {
          "$ref": "#/definitions/BankAccountType",
          "title": "the bank account type"
        },
        "balance": {
          "type": "number",
          "format": "float",
          "title": "the bank account balance"
        },
        "currency": {
          "type": "string",
          "title": "the bank account currency"
        },
        "currentFunds": {
          "type": "number",
          "format": "double"
        },
        "balanceLimit": {
          "type": "string",
          "format": "uint64"
        },
        "pockets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Pocket"
          },
          "title": "the set of \"virtualized accounts this user witholds\"\nNOTE: these pockets are automatically created by the system\nwhen a user connects a bank account"
        },
        "plaidAccountId": {
          "type": "string",
          "title": "plaid account id mapped to this bank account"
        },
        "subtype": {
          "type": "string",
          "title": "account subtype"
        },
        "status": {
          "$ref": "#/definitions/BankAccountStatus",
          "title": "the bank account status"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PlaidAccountTransaction"
          },
          "title": "the set of transactions tied to this bank account"
        },
        "recurringTransactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PlaidAccountRecurringTransaction"
          }
        }
      },
      "required": [
        "name",
        "number",
        "type",
        "balance",
        "currency",
        "currentFunds"
      ]
    },
    "BankAccountStatus": {
      "type": "string",
      "enum": [
        "BANK_ACCOUNT_STATUS_UNSPECIFIED",
        "BANK_ACCOUNT_STATUS_ACTIVE",
        "BANK_ACCOUNT_STATUS_INACTIVE"
      ],
      "default": "BANK_ACCOUNT_STATUS_UNSPECIFIED"
    },
    "BankAccountType": {
      "type": "string",
      "enum": [
        "BANK_ACCOUNT_TYPE_UNSPECIFIED",
        "BANK_ACCOUNT_TYPE_PLAID",
        "BANK_ACCOUNT_TYPE_MANUAL"
      ],
      "default": "BANK_ACCOUNT_TYPE_UNSPECIFIED"
    },
    "Budget": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "name": {
          "type": "string",
          "example": "Buy a car",
          "title": "The name of the budget",
          "minLength": 10
        },
        "description": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "title": "the time the goal was created"
        },
        "endDate": {
          "type": "string",
          "title": "the time the goal was updated"
        },
        "category": {
          "$ref": "#/definitions/Category",
          "title": "category associated with the goal"
        }
      },
      "description": "The Budgets table stores information about each budget created by the user,\nincluding the name of the budget, the start and end dates, and the user ID."
    },
    "BusinessChartOfAccounts": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "the database record's id"
        },
        "mergeAccountId": {
          "type": "string",
          "title": "the account id as stored in merge-api. this is a required field"
        },
        "remoteId": {
          "type": "string",
          "title": "The third-party matching id for the object. For example, this field will be the id \nas seen in quickbooks for a sample remote connection against quickbookks"
        },
        "name": {
          "type": "string",
          "description": "The account's name."
        },
        "description": {
          "type": "string",
          "description": "The account's description."
        },
        "classification": {
          "type": "string",
          "description": "The account's broadest grouping. Possible values include: ASSET, EQUITY, EXPENSE, \nLIABILITY, REVENUE. In cases where there is no clear mapping, the original \nvalue passed through will be returned."
        },
        "type": {
          "type": "string",
          "description": "The account's type is a narrower and more specific grouping within the account's classification."
        },
        "status": {
          "type": "string",
          "description": "The account's status. Possible values include: ACTIVE, PENDING, INACTIVE. In cases where there is\n no clear mapping, the original value passed through will be returned."
        },
        "currentBalance": {
          "type": "number",
          "format": "double",
          "description": "The account's current balance."
        },
        "currency": {
          "type": "string"
        },
        "accountNumber": {
          "type": "string",
          "description": "The account's number."
        },
        "parentAccountId": {
          "type": "string",
          "description": "ID of the parent account."
        },
        "company": {
          "type": "string",
          "description": "The company the account belongs to."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "title": "This is the datetime that this object was last updated by Merge"
        },
        "remoteWasDeleted": {
          "type": "boolean",
          "description": "Indicates whether or not this object has been deleted by third party webhooks."
        }
      },
      "description": "The Account object is what companies use to track transactions. \nThey can be both bank accounts or a general ledger account (also called a chart of accounts).\n\nNote: a company can have a multitude of these accounts",
      "required": [
        "mergeAccountId"
      ]
    },
    "BusinessTransaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "transactionType": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "account": {
          "type": "string"
        },
        "contact": {
          "type": "string"
        },
        "totalAmount": {
          "type": "string",
          "description": "Might be better as double."
        },
        "currency": {
          "type": "string"
        },
        "exchangeRate": {
          "type": "string",
          "description": "Assuming string, but might be better as float or double."
        },
        "company": {
          "type": "string"
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lineItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/TransactionLineItem"
          }
        },
        "remoteWasDeleted": {
          "type": "boolean"
        },
        "accountingPeriod": {
          "type": "string"
        },
        "mergeAccountId": {
          "type": "string"
        },
        "remoteId": {
          "type": "string"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "The Transaction includes different types of transactions. The Transactions object does not cover expenses, credit notes,\nvendor credit, invoices, purchase orders, and journal entries. See the “transaction_type” field for more information."
    },
    "CashFlowStatements": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "name": {
          "type": "string",
          "description": "The cash flow statement's name."
        },
        "currency": {
          "type": "string",
          "title": "The cash flow statement's currency"
        },
        "company": {
          "type": "string",
          "description": "The company the cash flow statement belongs to."
        },
        "startPeriod": {
          "type": "string",
          "format": "date-time",
          "description": "The cash flow statement's start period.\n\nConsider using google.protobuf.Timestamp"
        },
        "endPeriod": {
          "type": "string",
          "format": "date-time",
          "description": "The cash flow statement's end period.\n\nConsider using google.protobuf.Timestamp"
        },
        "cashAtBeginningOfPeriod": {
          "type": "number",
          "format": "double",
          "description": "Cash and cash equivalents at the beginning of the cash flow statement's period."
        },
        "cashAtEndOfPeriod": {
          "type": "number",
          "format": "double",
          "description": "Cash and cash equivalents at the beginning of the cash flow statement's period."
        },
        "operatingActivities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          },
          "title": "Operating activities"
        },
        "investingActivities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          },
          "title": "Investing activities"
        },
        "financingActivities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          },
          "title": "Financing activities"
        },
        "remoteGeneratedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time that cash flow statement was generated by the accounting system.\n\nConsider using google.protobuf.Timestamp"
        },
        "remoteWasDeleted": {
          "type": "boolean",
          "description": "Indicates whether or not this object has been deleted by third party webhooks."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Consider using google.protobuf.Timestamp",
          "title": "This is the datetime that this object was last updated by Merge"
        },
        "mergeRecordId": {
          "type": "string",
          "title": "the cashflow statements id as stored in merge"
        }
      },
      "description": "The CashFlowStatement object shows operating activities, investing activities, and financing activities over a\nperiod of time (month, quarter, or year)."
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "name": {
          "type": "string",
          "example": "Housing",
          "title": "The name of the category",
          "minLength": 3
        },
        "description": {
          "type": "string",
          "example": "Housing is a category primarily for housing",
          "title": "The description of the category",
          "minLength": 10
        },
        "subcategories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the sub categories of the category"
        }
      },
      "description": "The Categories table stores information about the different categories of expenses or income,\nsuch as \"Housing\", \"Food\", \"Transportation\", and \"Entertainment\". Each category has one or more\nsubcategories, which are stored in the Subcategories table.\n\nFor example, the \"Housing\" category might have subcategories for \"Rent\", \"Utilities\", and \"Home Maintenance\"."
    },
    "CategoryMetricsFinancialSubProfile": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "personalFinanceCategoryPrimary": {
          "type": "string"
        },
        "transactionCount": {
          "type": "string",
          "format": "uint64"
        },
        "spentLastWeek": {
          "type": "number",
          "format": "double"
        },
        "spentLastTwoWeeks": {
          "type": "number",
          "format": "double"
        },
        "spentLastMonth": {
          "type": "number",
          "format": "double"
        },
        "spentLastSixMonths": {
          "type": "number",
          "format": "double"
        },
        "spentLastYear": {
          "type": "number",
          "format": "double"
        },
        "spentLastTwoYears": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "CategoryMetricsFinancialSubProfile\nThis message is used to represent the financial sub profile of a category."
    },
    "CategoryMonthlyExpenditure": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "personalFinanceCategoryPrimary": {
          "type": "string"
        },
        "totalSpending": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "CategoryMonthlyExpenditure represents the monthly expenditure of a category.\nThis message is used to represent the monthly expenditure of a category."
    },
    "CategoryMonthlyIncome": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "personalFinanceCategoryPrimary": {
          "type": "string"
        },
        "totalIncome": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "CategoryMonthlyIncome\nThis message is used to represent the monthly income of a category."
    },
    "CategoryMonthlyTransactionCount": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "personalFinanceCategoryPrimary": {
          "type": "string"
        },
        "transactionCount": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "CategoryMonthlyTransactionCount\nThis message is used to represent the monthly transaction count of a category."
    },
    "CompanyInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "the id of the record in our system"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "name": {
          "type": "string",
          "description": "The company's name."
        },
        "legalName": {
          "type": "string",
          "description": "The company's legal name."
        },
        "taxNumber": {
          "type": "string",
          "description": "The company's tax number."
        },
        "fiscalYearEndMonth": {
          "type": "integer",
          "format": "int32",
          "description": "The company's fiscal year end month."
        },
        "fiscalYearEndDay": {
          "type": "integer",
          "format": "int32",
          "description": "The company's fiscal year end day."
        },
        "currency": {
          "type": "string",
          "description": "The currency set in the company's accounting platform."
        },
        "remoteCreatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the third party's company was created.\n\nConsider using google.protobuf.Timestamp"
        },
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The company's urls."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Address"
          },
          "title": "the company's addresses"
        },
        "phoneNumbers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the company's phone numbers"
        },
        "remoteWasDeleted": {
          "type": "boolean",
          "description": "Indicates whether or not this object has been deleted by third party webhooks."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "title": "This is the datetime that this object was last updated by Merge"
        },
        "mergeAccountId": {
          "type": "string",
          "title": "the id of the record as stored in merge"
        }
      },
      "description": "The CompanyInfo object is used to represent a company's information."
    },
    "Contacts": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "name": {
          "type": "string",
          "description": "The contact's name."
        },
        "isSupplier": {
          "type": "boolean",
          "description": "Whether the contact is a supplier."
        },
        "isCustomer": {
          "type": "boolean",
          "description": "Whether the contact is a customer."
        },
        "emailAddress": {
          "type": "string",
          "description": "The contact's email address."
        },
        "taxNumber": {
          "type": "string",
          "description": "The contact's tax number."
        },
        "status": {
          "type": "string",
          "title": "The contact's status"
        },
        "currency": {
          "type": "string",
          "description": "The currency the contact's transactions are in."
        },
        "remoteUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the third party's contact was updated.\n\nConsider using google.protobuf.Timestamp"
        },
        "company": {
          "type": "string",
          "description": "The company the contact belongs to."
        },
        "addressesIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Address object IDs for the given Contacts object.\n\nThese are IDs, not the Address structure itself"
        },
        "phoneNumbers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Phone numbers of the contact"
        },
        "remoteWasDeleted": {
          "type": "boolean",
          "description": "Indicates whether or not this object has been deleted by third party webhooks."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Consider using google.protobuf.Timestamp",
          "title": "This is the datetime that this object was last updated by Merge"
        },
        "mergeAccountId": {
          "type": "string",
          "title": "The account id as seen in merge"
        }
      },
      "description": "The Contact object refers to either a supplier or a customer."
    },
    "CreateBankAccountResponse": {
      "type": "object",
      "properties": {
        "bankAccountId": {
          "type": "string",
          "format": "uint64",
          "title": "The bank account id"
        }
      },
      "title": "CreateBankAccountResponse: Represents the response object returned as a response to\nthe `create bank account` request"
    },
    "CreateBudgetRequest": {
      "type": "object",
      "properties": {
        "milestroneId": {
          "type": "string",
          "format": "uint64",
          "title": "The milestone to associate this budget with"
        },
        "budget": {
          "$ref": "#/definitions/Budget",
          "title": "The budget to create\nValidations:\n- cannot be nil hence required"
        }
      },
      "required": [
        "milestroneId",
        "budget"
      ]
    },
    "CreateBudgetResponse": {
      "type": "object",
      "properties": {
        "budgetId": {
          "type": "string",
          "format": "uint64",
          "title": "The budget id"
        }
      }
    },
    "CreateManualLinkRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "The user id\nValidations:\n- user_id must be greater than 0"
        },
        "manualAccountLink": {
          "$ref": "#/definitions/Link",
          "title": "The manual account link"
        },
        "profileType": {
          "$ref": "#/definitions/FinancialUserProfileType"
        }
      },
      "required": [
        "userId",
        "manualAccountLink",
        "profileType"
      ]
    },
    "CreateManualLinkResponse": {
      "type": "object",
      "properties": {
        "linkId": {
          "type": "string",
          "format": "uint64",
          "title": "The link's id"
        }
      }
    },
    "CreateMilestoneRequest": {
      "type": "object",
      "properties": {
        "smartGoalId": {
          "type": "string",
          "format": "uint64",
          "title": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone",
          "title": "The milestone to create\nValidations:\n- cannot be nil hence required"
        }
      },
      "required": [
        "smartGoalId",
        "milestone"
      ]
    },
    "CreateMilestoneResponse": {
      "type": "object",
      "properties": {
        "milestoneId": {
          "type": "string",
          "format": "uint64",
          "title": "The milestone id"
        }
      }
    },
    "CreateSmartGoalRequest": {
      "type": "object",
      "properties": {
        "pocketId": {
          "type": "string",
          "format": "uint64",
          "title": "The pocket account id\nValidations:\n- pocket_account_id must be greater than 0"
        },
        "smartGoal": {
          "$ref": "#/definitions/SmartGoal",
          "title": "The smart goal to create\nValidations:\n- cannot be nil hence required"
        }
      },
      "required": [
        "pocketId",
        "smartGoal"
      ]
    },
    "CreateSmartGoalResponse": {
      "type": "object",
      "properties": {
        "smartGoalId": {
          "type": "string",
          "format": "uint64",
          "title": "The smart goal id"
        }
      }
    },
    "CreateSubscriptionRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uint64"
        },
        "priceId": {
          "type": "string"
        },
        "profileType": {
          "$ref": "#/definitions/FinancialUserProfileType"
        }
      },
      "required": [
        "userId",
        "priceId",
        "profileType"
      ]
    },
    "CreateSubscriptionResponse": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string"
        },
        "paymentIntentClientSecret": {
          "type": "string"
        }
      }
    },
    "CreateUserProfileRequest": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/FinancialUserProfile",
          "title": "User profile to create\nValidations:\n- cannot be nil hence required"
        },
        "email": {
          "type": "string",
          "title": "the email of the account to create"
        }
      },
      "title": "CreateUserProfileRequest: Represents the request object invoked against the user\nservice to create a user profile",
      "required": [
        "profile",
        "email"
      ]
    },
    "CreateUserProfileResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "CreateUserProfileResponse: Represents the response object returned as a response to\nthe `create user profile` request"
    },
    "CreditAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "the user id to which this bank account is tied to"
        },
        "name": {
          "type": "string",
          "title": "the account name"
        },
        "number": {
          "type": "string",
          "title": "the bank account number"
        },
        "type": {
          "type": "string",
          "title": "the bank account type"
        },
        "balance": {
          "type": "number",
          "format": "float",
          "title": "the bank account balance"
        },
        "currentFunds": {
          "type": "number",
          "format": "double",
          "title": "current funds on the account"
        },
        "balanceLimit": {
          "type": "string",
          "format": "uint64",
          "title": "balance limit"
        },
        "plaidAccountId": {
          "type": "string",
          "title": "plaid account id mapped to this bank account"
        },
        "subtype": {
          "type": "string",
          "title": "accoint subtype"
        },
        "isOverdue": {
          "type": "boolean",
          "title": "wether the account is overdue"
        },
        "lastPaymentAmount": {
          "type": "number",
          "format": "double",
          "title": "the last payment amount"
        },
        "lastPaymentDate": {
          "type": "string",
          "title": "the last payment date"
        },
        "lastStatementIssueDate": {
          "type": "string",
          "title": "the last statement issue date"
        },
        "minimumAmountDueDate": {
          "type": "number",
          "format": "double",
          "title": "the minimum amount due date"
        },
        "nextPaymentDate": {
          "type": "string",
          "title": "the next payment date"
        },
        "aprs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Apr"
          },
          "title": "the aprs"
        },
        "lastStatementBalance": {
          "type": "number",
          "format": "double",
          "title": "the last statement balance"
        },
        "minimumPaymentAmount": {
          "type": "number",
          "format": "double",
          "title": "the minimum payment amount"
        },
        "nextPaymentDueDate": {
          "type": "string",
          "title": "the next payment due date"
        },
        "status": {
          "$ref": "#/definitions/BankAccountStatus",
          "title": "the bank account status"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PlaidAccountTransaction"
          }
        },
        "recurringTransactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PlaidAccountRecurringTransaction"
          }
        }
      }
    },
    "CreditNote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "the database record id as stored in our systems"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The credit note's transaction date.\n\nConsider using google.protobuf.Timestamp"
        },
        "status": {
          "type": "string",
          "description": "The credit note's status."
        },
        "number": {
          "type": "string",
          "description": "The credit note's number."
        },
        "contact": {
          "type": "string",
          "description": "The credit note's contact."
        },
        "company": {
          "type": "string",
          "description": "The company the credit note belongs to."
        },
        "exchangeRate": {
          "type": "string",
          "description": "The credit note's exchange rate.\n\nConsider using double or float if this represents a number"
        },
        "totalAmount": {
          "type": "number",
          "format": "double",
          "description": "The credit note's total amount."
        },
        "remainingCredit": {
          "type": "number",
          "format": "double",
          "description": "The amount of value remaining in the credit note that the customer can use."
        },
        "lineItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CreditNoteLineItem"
          }
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "These are IDs"
        },
        "currency": {
          "type": "string"
        },
        "remoteCreatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Consider using google.protobuf.Timestamp"
        },
        "remoteUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Consider using google.protobuf.Timestamp"
        },
        "paymentIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "These are IDs",
          "title": "Array of Payment object IDs"
        },
        "remoteWasDeleted": {
          "type": "boolean"
        },
        "accountingPeriod": {
          "type": "string",
          "description": "The accounting period that the CreditNote was generated in."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Consider using google.protobuf.Timestamp"
        },
        "mergeAccountId": {
          "type": "string",
          "title": "the id as stored in merge"
        }
      },
      "description": "The CreditNote object is an accounts payable transaction used when to represent a gift or refund to a customer. \nA credit note will contain information on the amount of credit owed, the customer, and the account."
    },
    "CreditNoteLineItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        },
        "unitPrice": {
          "type": "string",
          "title": "Consider using double or float if this represents a number"
        },
        "taxRate": {
          "type": "string",
          "title": "This seems to be an ID"
        },
        "totalLineAmount": {
          "type": "string",
          "title": "Consider using double or float"
        },
        "trackingCategory": {
          "type": "string",
          "title": "This seems to be an ID"
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "These are IDs"
        },
        "account": {
          "type": "string",
          "title": "This seems to be an ID"
        },
        "company": {
          "type": "string"
        },
        "remoteId": {
          "type": "string"
        },
        "item": {
          "type": "string"
        }
      }
    },
    "DebtToIncomeRatio": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "ratio": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "DebtToIncomeRatio\nThis message is used to represent the debt to income ratio of a user."
    },
    "DeleteBankAccountResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "example": "true",
          "title": "The bank account id"
        }
      }
    },
    "DeleteBudgetResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "title": "The budget id"
        }
      }
    },
    "DeleteLinkResponse": {
      "type": "object",
      "properties": {
        "linkId": {
          "type": "string",
          "format": "uint64",
          "title": "The link's id"
        }
      }
    },
    "DeleteMilestoneResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "title": "The milestone id"
        }
      }
    },
    "DeleteNoteFromSmartGoalResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "title": "The smart goal id"
        }
      }
    },
    "DeletePocketResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "title": "The pocket id"
        }
      }
    },
    "DeleteSmartGoalResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "title": "The smart goal id"
        }
      }
    },
    "DeleteUserProfileResponse": {
      "type": "object",
      "properties": {
        "profileDeleted": {
          "type": "boolean"
        }
      },
      "title": "DeleteUserProfileResponse: Represents the response object returned as a response to\nthe `delete user profile` request"
    },
    "Expense": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time",
          "description": "When the transaction occurred.\n\nConsider using google.protobuf.Timestamp"
        },
        "remoteCreatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the expense was created.\n\nConsider using google.protobuf.Timestamp"
        },
        "account": {
          "type": "string",
          "description": "The expense's payment account."
        },
        "contact": {
          "type": "string",
          "description": "The expense's contact."
        },
        "totalAmount": {
          "type": "number",
          "format": "double",
          "description": "The expense's total amount."
        },
        "subTotal": {
          "type": "number",
          "format": "double",
          "description": "The expense's total amount before tax."
        },
        "totalTaxAmount": {
          "type": "number",
          "format": "double",
          "description": "The expense's total tax amount."
        },
        "currency": {
          "type": "string",
          "title": "The expense's currency"
        },
        "exchangeRate": {
          "type": "string",
          "description": "The expense's exchange rate.\n\nConsider using double or float if this represents a number"
        },
        "company": {
          "type": "string",
          "description": "The company the expense belongs to."
        },
        "memo": {
          "type": "string",
          "description": "The expense's private note."
        },
        "lines": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ExpenseLine"
          },
          "description": "The ExpenseLine object is used to represent an expense's line items."
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "These are IDs"
        },
        "remoteWasDeleted": {
          "type": "boolean",
          "description": "Indicates whether or not this object has been deleted by third party webhooks."
        },
        "accountingPeriod": {
          "type": "string",
          "description": "The accounting period that the Expense was generated in."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Consider using google.protobuf.Timestamp",
          "title": "This is the datetime that this object was last updated by Merge"
        },
        "mergeAccountId": {
          "type": "string"
        }
      },
      "description": "The Expense object is used to represent a purchase made from a business which can be made with a check, credit card, or cash.\nEach expense object is dedicated to a grouping of expenses, with each expense recorded in the lines object."
    },
    "ExpenseLine": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "netAmount": {
          "type": "number",
          "format": "double",
          "description": "The line's net amount."
        },
        "trackingCategory": {
          "type": "string",
          "title": "This seems to be an ID"
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "These are IDs"
        },
        "company": {
          "type": "string",
          "description": "The company the line belongs to."
        },
        "item": {
          "type": "string",
          "description": "The line's item.\n\nThis seems to be an ID"
        },
        "account": {
          "type": "string",
          "description": "The expense's payment account."
        },
        "contact": {
          "type": "string",
          "description": "The expense's contact.\n\nOptional based on provided JSON"
        },
        "description": {
          "type": "string",
          "description": "The description of the item that was purchased by the company."
        },
        "exchangeRate": {
          "type": "string",
          "description": "The expense line item's exchange rate.\n\nConsider using double or float if this represents a number"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "currency": {
          "type": "string",
          "title": "The expense line item's currency"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Consider using google.protobuf.Timestamp",
          "title": "This is the datetime that this object was last updated by Merge"
        }
      },
      "description": "The ExpenseLine object is used to represent an expense's line items."
    },
    "ExpenseMetrics": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "personalFinanceCategoryPrimary": {
          "type": "string"
        },
        "transactionCount": {
          "type": "string",
          "format": "uint64"
        },
        "totalExpenses": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "ExpenseMetrics\nThis message is used to represent the expense metrics of a user."
    },
    "ExpenseMetricsFinancialSubProfileMetrics": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "spentLastWeek": {
          "type": "number",
          "format": "double"
        },
        "spentLastMonth": {
          "type": "number",
          "format": "double"
        },
        "spentLastSixMonths": {
          "type": "number",
          "format": "double"
        },
        "averageMonthlyDiscretionarySpending": {
          "type": "number",
          "format": "double"
        },
        "averageMonthlyRecurringSpending": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "ExpenseMetricsFinancialSubProfileMetrics\nThis message is used to represent the financial sub profile metrics of a user."
    },
    "FinancialProfile": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "totalIncome": {
          "type": "number",
          "format": "double"
        },
        "totalExpenses": {
          "type": "number",
          "format": "double"
        },
        "numberOfTransactions": {
          "type": "string",
          "format": "uint64"
        },
        "mostExpensiveCategory": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "FinancialProfile\nThis message is used to represent the financial profile of a user."
    },
    "FinancialUserProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "the user id tied to the profile"
        },
        "stripeCustomerId": {
          "type": "string"
        },
        "stripeSubscriptions": {
          "$ref": "#/definitions/StripeSubscription",
          "title": "the stripe subscriptions the user profile actively maintains"
        },
        "link": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Link"
          },
          "title": "a user profile can have many links (connected institutions) of which finanical accounts are tied to (checking, savings, etc)"
        },
        "actionableInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ActionableInsight"
          }
        },
        "email": {
          "type": "string"
        },
        "mergeLiink": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MergeLink"
          }
        },
        "actionablePersonalInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PersonalActionableInsight"
          }
        },
        "profileType": {
          "$ref": "#/definitions/FinancialUserProfileType"
        }
      },
      "title": "FinancialUserProfile stores high level user profile details\nsuch as the id, user_id tied to the profile, and many more"
    },
    "FinancialUserProfileType": {
      "type": "string",
      "enum": [
        "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
        "FINANCIAL_USER_PROFILE_TYPE_USER",
        "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
      ],
      "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
    },
    "Forecast": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "forecastedAmount": {
          "type": "string",
          "example": "Active",
          "title": "the forecasted amount of the goal"
        },
        "forecastedCompletionDate": {
          "type": "string",
          "example": "Active",
          "title": "the forecasted completion date of the goal"
        },
        "varianceAmount": {
          "type": "string",
          "example": "Active",
          "title": "the forecasted variance of the goal between the forecasted and target amounts"
        }
      },
      "description": "The Forecast table stores information about each forecast generated for a particular goal,\nincluding the forecast date, the forecasted amount of money saved or invested for the\ngoal by the target date, and the variance between the forecasted and target amounts.\nThis allows the user to track how well they are progressing towards their goal and make adjustments as needed."
    },
    "GetAccountBalanceHistoryResponse": {
      "type": "object",
      "properties": {
        "accountBalanceHistory": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccountBalanceHistory"
          },
          "title": "List of account balance history records for specific account"
        }
      }
    },
    "GetAllBudgetsResponse": {
      "type": "object",
      "properties": {
        "budgets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Budget"
          },
          "title": "The budgets"
        }
      }
    },
    "GetBankAccountResponse": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "$ref": "#/definitions/BankAccount",
          "title": "The bank account"
        }
      },
      "title": "GetBankAccountResponse: Represents the response object returned as a response to\nthe `get bank account` request"
    },
    "GetBudgetResponse": {
      "type": "object",
      "properties": {
        "budget": {
          "$ref": "#/definitions/Budget",
          "title": "The budget"
        }
      }
    },
    "GetCategoryMonthlyTransactionCountResponse": {
      "type": "object",
      "properties": {
        "categoryMonthlyTransactionCount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CategoryMonthlyTransactionCount"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetDebtToIncomeRatioResponse": {
      "type": "object",
      "properties": {
        "debtToIncomeRatios": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DebtToIncomeRatio"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetExpenseMetricsResponse": {
      "type": "object",
      "properties": {
        "expenseMetrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ExpenseMetrics"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetFinancialProfileResponse": {
      "type": "object",
      "properties": {
        "financialProfiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/FinancialProfile"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetForecastResponse": {
      "type": "object",
      "properties": {
        "forecast": {
          "$ref": "#/definitions/Forecast",
          "title": "The forecast"
        }
      }
    },
    "GetHistoricalAccountBalanceResponse": {
      "type": "object",
      "properties": {
        "historicalAccountBalance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccountBalanceHistory"
          }
        }
      }
    },
    "GetIncomeExpenseRatioResponse": {
      "type": "object",
      "properties": {
        "incomeExpenseRatios": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IncomeExpenseRatio"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetIncomeMetricsResponse": {
      "type": "object",
      "properties": {
        "incomeMetrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IncomeMetrics"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetInvestmentAcccountResponse": {
      "type": "object",
      "properties": {
        "investmentAccount": {
          "$ref": "#/definitions/InvestmentAccount",
          "title": "The investment account"
        }
      }
    },
    "GetLiabilityAccountResponse": {
      "type": "object",
      "properties": {
        "liabilityAccount": {
          "$ref": "#/definitions/CreditAccount",
          "title": "The liability account"
        }
      }
    },
    "GetLinkResponse": {
      "type": "object",
      "properties": {
        "link": {
          "$ref": "#/definitions/Link",
          "title": "The link"
        }
      }
    },
    "GetLinksResponse": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Link"
          },
          "title": "The links"
        }
      }
    },
    "GetMelodyFinancialContextResponse": {
      "type": "object",
      "properties": {
        "melodyFinancialContext": {
          "$ref": "#/definitions/MelodyFinancialContext"
        }
      }
    },
    "GetMerchantMonthlyExpenditureResponse": {
      "type": "object",
      "properties": {
        "merchantMonthlyExpenditures": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MerchantMonthlyExpenditure"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetMilestoneResponse": {
      "type": "object",
      "properties": {
        "milestone": {
          "$ref": "#/definitions/Milestone",
          "title": "The milestone"
        }
      }
    },
    "GetMilestonesBySmartGoalIdResponse": {
      "type": "object",
      "properties": {
        "milestones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Milestone"
          },
          "title": "The milestones"
        }
      }
    },
    "GetMonthlyBalanceResponse": {
      "type": "object",
      "properties": {
        "monthlyBalances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MonthlyBalance"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetMonthlyExpenditureResponse": {
      "type": "object",
      "properties": {
        "monthlyExpenditures": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MonthlyExpenditure"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetMonthlyIncomeResponse": {
      "type": "object",
      "properties": {
        "monthlyIncomes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MonthlyIncome"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetMonthlySavingsResponse": {
      "type": "object",
      "properties": {
        "monthlySavings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MonthlySavings"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetMonthlyTotalQuantityBySecurityAndUserResponse": {
      "type": "object",
      "properties": {
        "monthlyTotalQuantityBySecurityAndUser": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MonthlyTotalQuantityBySecurityAndUser"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetMonthlyTransactionCountResponse": {
      "type": "object",
      "properties": {
        "monthlyTransactionCounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MonthlyTransactionCount"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetMortgageAccountResponse": {
      "type": "object",
      "properties": {
        "mortageAccount": {
          "$ref": "#/definitions/MortgageAccount",
          "title": "The mortage account"
        }
      }
    },
    "GetNoteFromSmartGoalResponse": {
      "type": "object",
      "properties": {
        "note": {
          "$ref": "#/definitions/SmartNote",
          "title": "The note"
        }
      }
    },
    "GetNotesFromSmartGoalResponse": {
      "type": "object",
      "properties": {
        "notes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SmartNote"
          },
          "title": "The notes"
        }
      }
    },
    "GetPaymentChannelMonthlyExpenditureResponse": {
      "type": "object",
      "properties": {
        "paymentChannelMonthlyExpenditure": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PaymentChannelMonthlyExpenditure"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetPocketResponse": {
      "type": "object",
      "properties": {
        "pocket": {
          "$ref": "#/definitions/Pocket",
          "title": "The pocket account"
        }
      }
    },
    "GetReCurringTransactionsResponse": {
      "type": "object",
      "properties": {
        "reCcuringTransactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReOccuringTransaction"
          },
          "title": "The re-occuring transactions"
        }
      }
    },
    "GetSmartGoalsByPocketIdResponse": {
      "type": "object",
      "properties": {
        "smartGoals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SmartGoal"
          },
          "title": "The smart goals"
        }
      }
    },
    "GetStudentLoanAccountResponse": {
      "type": "object",
      "properties": {
        "studentLoanAccount": {
          "$ref": "#/definitions/StudentLoanAccount",
          "title": "The student loan account"
        }
      }
    },
    "GetTotalInvestmentBySecurityResponse": {
      "type": "object",
      "properties": {
        "totalInvestmentBySecurity": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/TotalInvestmentBySecurity"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetTransactionAggregatesResponse": {
      "type": "object",
      "properties": {
        "transactionAggregates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/TransactionAggregatesByMonth"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetTransactionsBetweenTimeRangesResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PlaidAccountTransaction"
          },
          "title": "The transactions"
        },
        "currentPage": {
          "type": "integer",
          "format": "int64",
          "title": "Current page number"
        },
        "totalAges": {
          "type": "integer",
          "format": "int64",
          "title": "Total number of pages"
        },
        "totalTransactions": {
          "type": "string",
          "format": "uint64",
          "title": "Total number of transactions in the month"
        }
      }
    },
    "GetTransactionsForBankAccountResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Transaction"
          },
          "title": "The transactions"
        },
        "nextPageNumber": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "GetTransactionsForPastMonthResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PlaidAccountTransaction"
          }
        },
        "currentPage": {
          "type": "integer",
          "format": "int64",
          "title": "Current page number"
        },
        "totalPages": {
          "type": "integer",
          "format": "int64",
          "title": "Total number of pages"
        },
        "totalTransactions": {
          "type": "string",
          "format": "uint64",
          "title": "Total number of transactions in the month"
        }
      }
    },
    "GetTransactionsForPastWeekResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PlaidAccountTransaction"
          }
        },
        "currentPage": {
          "type": "integer",
          "format": "int64",
          "title": "Current page number"
        },
        "totalPages": {
          "type": "integer",
          "format": "int64",
          "title": "Total number of pages"
        },
        "totalTransactions": {
          "type": "string",
          "format": "uint64",
          "title": "Total number of transactions in the week"
        }
      }
    },
    "GetTransactionsResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Transaction"
          },
          "title": "The transactions"
        },
        "nextPageNumber": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "GetUserAccountBalanceHistoryResponse": {
      "type": "object",
      "properties": {
        "accountBalanceHistory": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccountBalanceHistory"
          },
          "title": "List of account balance history records"
        }
      }
    },
    "GetUserCategoryMonthlyExpenditureResponse": {
      "type": "object",
      "properties": {
        "categoryMonthlyExpenditure": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CategoryMonthlyExpenditure"
          },
          "title": "List of CategoryMonthlyExpenditure records for the user"
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetUserCategoryMonthlyIncomeResponse": {
      "type": "object",
      "properties": {
        "categoryMonthlyIncome": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CategoryMonthlyIncome"
          }
        },
        "nextPageNumber": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GetUserProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/FinancialUserProfile"
        },
        "financialContext": {
          "$ref": "#/definitions/MelodyFinancialContext",
          "title": "financial context for the user"
        }
      },
      "title": "GetUserProfileResponse: Represents the response object returned as a response to\nthe `get user profile` request",
      "required": [
        "financialContext"
      ]
    },
    "GoalType": {
      "type": "string",
      "enum": [
        "GOAL_TYPE_UNSPECIFIED",
        "GOAL_TYPE_SAVINGS",
        "GOAL_TYPE_INVESTMENT",
        "GOAL_TYPE_DEBT",
        "GOAL_TYPE_EXPENSE"
      ],
      "default": "GOAL_TYPE_UNSPECIFIED"
    },
    "HealthCheckResponse": {
      "type": "object",
      "properties": {
        "healthy": {
          "type": "boolean"
        }
      }
    },
    "IncomeExpenseRatio": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "ratio": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "IncomeExpenseRatio\nThis message is used to represent the income expense ratio of a user."
    },
    "IncomeMetrics": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "personalFinanceCategoryPrimary": {
          "type": "string"
        },
        "transactionCount": {
          "type": "string",
          "format": "uint64"
        },
        "totalIncome": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "IncomeMetrics\nThis message is used to represent the income metrics of a user."
    },
    "IncomeMetricsFinancialSubProfile": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "incomeLastTwoWeeks": {
          "type": "number",
          "format": "double"
        },
        "incomeLastMonth": {
          "type": "number",
          "format": "double"
        },
        "incomeLastTwoMonths": {
          "type": "number",
          "format": "double"
        },
        "incomeLastSixMonths": {
          "type": "number",
          "format": "double"
        },
        "incomeLastYear": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "IncomeMetricsFinancialSubProfile\nThis message is used to represent the financial sub profile of a user."
    },
    "IncomeStatement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "name": {
          "type": "string",
          "description": "The income statement's name."
        },
        "currency": {
          "type": "string",
          "description": "The income statement's currency."
        },
        "company": {
          "type": "string",
          "description": "The company the income statement belongs to."
        },
        "startPeriod": {
          "type": "string",
          "format": "date-time",
          "description": "The income statement's start period."
        },
        "endPeriod": {
          "type": "string",
          "format": "date-time",
          "description": "The income statement's end period."
        },
        "income": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          },
          "title": "income"
        },
        "costOfSales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          },
          "title": "cost of sales"
        },
        "grossProfit": {
          "type": "integer",
          "format": "int32",
          "description": "The revenue minus the cost of sale."
        },
        "operatingExpenses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          },
          "title": "operating expenses"
        },
        "netOperatingIncome": {
          "type": "integer",
          "format": "int32",
          "description": "The revenue minus the operating expenses."
        },
        "nonOperatingExpenses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportItem"
          }
        },
        "netIncome": {
          "type": "integer",
          "format": "int32",
          "description": "The gross profit minus the total expenses."
        },
        "remoteWasDeleted": {
          "type": "boolean",
          "description": "Indicates whether or not this object has been deleted by third party webhooks."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "title": "This is the datetime that this object was last updated by Merge"
        }
      },
      "description": "The IncomeStatement object is used to represent a company’s income, the cost of sales, operating expenses,\nand other non-operating expenses. The object also includes other important values like gross profit, gross \noperating profit, and net income. This represents a period of time (month, quarter, or year)."
    },
    "InvesmentHolding": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "name": {
          "type": "string",
          "example": "nfdkjfjksdhjhfjsdhjgf",
          "title": "The name of the investment holding",
          "minLength": 3
        },
        "plaidAccountId": {
          "type": "string",
          "example": "k67E4xKvMlhmleEa4pg9hlwGGNnnEeixPolGm",
          "title": "plaid account id"
        },
        "costBasis": {
          "type": "number",
          "format": "double",
          "example": "15"
        },
        "institutionPrice": {
          "type": "number",
          "format": "double",
          "example": "13.73"
        },
        "institutionPriceAsOf": {
          "type": "string",
          "example": "2021-04-13"
        },
        "institutionPriceDatetime": {
          "type": "string",
          "example": "2022-06-07T23:01:00Z"
        },
        "institutionValue": {
          "type": "number",
          "format": "double",
          "example": "4437.35905"
        },
        "isoCurrencyCode": {
          "type": "string",
          "example": "USD"
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "example": "25000"
        },
        "securityId": {
          "type": "string",
          "example": "vLRMV3MvY1FYNP91on35CJD5QN5rw9Fpa9qOL"
        },
        "unofficialCurrencyCode": {
          "type": "string",
          "example": "USD"
        }
      }
    },
    "InvestmentAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "the user id to which this bank account is tied to"
        },
        "name": {
          "type": "string",
          "title": "the account name"
        },
        "number": {
          "type": "string",
          "title": "the bank account number"
        },
        "type": {
          "type": "string",
          "title": "the bank account type"
        },
        "balance": {
          "type": "number",
          "format": "float",
          "title": "the bank account balance"
        },
        "currentFunds": {
          "type": "number",
          "format": "double"
        },
        "balanceLimit": {
          "type": "string",
          "format": "uint64"
        },
        "plaidAccountId": {
          "type": "string",
          "title": "plaid account id mapped to this bank account"
        },
        "subtype": {
          "type": "string",
          "title": "accoint subtype"
        },
        "holdings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InvesmentHolding"
          },
          "title": "invesment holding is the set of securities this account witholds"
        },
        "securities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InvestmentSecurity"
          },
          "title": "the set of securities this account witholds"
        },
        "status": {
          "$ref": "#/definitions/BankAccountStatus",
          "title": "the bank account status"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PlaidAccountTransaction"
          }
        }
      }
    },
    "InvestmentSecurity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "closePrice": {
          "type": "number",
          "format": "double",
          "example": " 0.140034616"
        },
        "closePriceAsOf": {
          "type": "string",
          "example": "2022-01-24"
        },
        "cusip": {
          "type": "string",
          "example": "dfkjhdgjdhhgd"
        },
        "institutionId": {
          "type": "string",
          "example": "ins_3"
        },
        "institutionSecurityId": {
          "type": "string",
          "example": "dfkjhdgjdhhgd"
        },
        "isCashEquivalent": {
          "type": "boolean",
          "example": "true"
        },
        "isin": {
          "type": "string",
          "example": "dfkjhdgjdhhgd"
        },
        "isoCurrencyCode": {
          "type": "string",
          "example": "USD"
        },
        "name": {
          "type": "string",
          "example": "Dogecoin"
        },
        "proxySecurityId": {
          "type": "string",
          "example": "dfkjhdgjdhhgd"
        },
        "securityId": {
          "type": "string",
          "example": "vLRMV3MvY1FYNP91on35CJD5QN5rw9Fpa9qOL"
        },
        "sedol": {
          "type": "string",
          "example": "dfkjhdgjdhhgd"
        },
        "tickerSymbol": {
          "type": "string",
          "example": "DOGE"
        },
        "type": {
          "type": "string",
          "example": "cryptocurrency"
        },
        "unofficialCurrencyCode": {
          "type": "string",
          "example": "USD"
        },
        "updateDatetime": {
          "type": "string",
          "example": "2022-06-07T23:01:00Z"
        }
      }
    },
    "Invoice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "type": {
          "type": "string",
          "description": "Whether the invoice is an accounts receivable or accounts payable\n If type is accounts_payable, the invoice is a bill. If type is\n accounts_receivable, it is an invoice. Possible values include: ACCOUNTS_RECEIVABLE, ACCOUNTS_PAYABLE."
        },
        "contact": {
          "type": "string",
          "description": "The invoice's contact."
        },
        "number": {
          "type": "string",
          "description": "The invoice's number."
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "The invoice's issue date."
        },
        "dueDate": {
          "type": "string",
          "format": "date-time",
          "description": "The invoice's due date."
        },
        "paidOnDate": {
          "type": "string",
          "format": "date-time",
          "description": "The invoice's paid date."
        },
        "memo": {
          "type": "string",
          "description": "The invoice's private note."
        },
        "company": {
          "type": "string",
          "description": "The company the invoice belongs to."
        },
        "currency": {
          "type": "string",
          "title": "The invoice's currency"
        },
        "exchangeRate": {
          "type": "string",
          "description": "The invoice's exchange rate."
        },
        "totalDiscount": {
          "type": "number",
          "format": "float",
          "description": "The total discounts applied to the total cost."
        },
        "subTotal": {
          "type": "number",
          "format": "float",
          "description": "The total amount being paid before taxes."
        },
        "status": {
          "type": "string"
        },
        "totalTaxAmount": {
          "type": "number",
          "format": "float",
          "description": "The total amount being paid in taxes."
        },
        "totalAmount": {
          "type": "number",
          "format": "float",
          "description": "The invoice's total amount."
        },
        "balance": {
          "type": "number",
          "format": "float",
          "description": "The invoice's remaining balance."
        },
        "remoteUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the third party's invoice entry was updated."
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "payments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of Payment object IDs."
        },
        "lineItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InvoiceLineItem"
          }
        },
        "remoteWasDeleted": {
          "type": "boolean"
        },
        "accountingPeriod": {
          "type": "string",
          "description": "The accounting period that the Invoice was generated in."
        },
        "purchaseOrders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "mergeAccountId": {
          "type": "string",
          "title": "the account id as stored in merge"
        }
      },
      "description": "The Invoice object represents an itemized record of goods and/or services sold to a customer."
    },
    "InvoiceLineItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "description": {
          "type": "string",
          "description": "The line item's description."
        },
        "unitPrice": {
          "type": "number",
          "format": "float",
          "description": "The line item's unit price."
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "The line item's quantity."
        },
        "totalAmount": {
          "type": "number",
          "format": "float",
          "description": "The line item's total amount."
        },
        "currency": {
          "type": "string",
          "title": "The line item's currency"
        },
        "exchangeRate": {
          "type": "string",
          "description": "The line item's exchange rate."
        },
        "item": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "trackingCategory": {
          "type": "string"
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "company": {
          "type": "string",
          "description": "The company the line item belongs to."
        },
        "mergeAccountId": {
          "type": "string",
          "title": "the id of the record as stored in merge"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Consider using google.protobuf.Timestamp",
          "title": "This is the datetime that this object was last updated by Merge"
        }
      },
      "description": "The Invoice object represents an itemized record of goods and/or services sold to a customer."
    },
    "Item": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string",
          "description": "The third-party API ID of the matching object."
        },
        "name": {
          "type": "string",
          "description": "The item's name."
        },
        "status": {
          "type": "string"
        },
        "unitPrice": {
          "type": "number",
          "format": "float",
          "description": "The item's unit price."
        },
        "purchasePrice": {
          "type": "number",
          "format": "float",
          "description": "The price at which the item is purchased from a vendor."
        },
        "purchaseAccount": {
          "type": "string",
          "description": "References the default account used to record a purchase of the item."
        },
        "salesAccount": {
          "type": "string",
          "description": "References the default account used to record a sale."
        },
        "company": {
          "type": "string",
          "description": "The company the item belongs to."
        },
        "remoteUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the third party's item note was updated."
        },
        "remoteWasDeleted": {
          "type": "boolean",
          "description": "Indicates whether or not this object has been deleted by third party webhooks."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "title": "This is the datetime that this object was last updated by Merge"
        },
        "mergeAccountId": {
          "type": "string"
        }
      },
      "description": "The Item object refers to the goods involved in a transaction."
    },
    "JournalEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string"
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The journal entry's transaction date."
        },
        "remoteCreatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "When the third party's journal entry was created."
        },
        "remoteUpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "paymentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "memo": {
          "type": "string",
          "description": "The journal entry's private note."
        },
        "currency": {
          "type": "string"
        },
        "exchangeRate": {
          "type": "string",
          "description": "Assuming string due to the example provided, but could be float or double."
        },
        "company": {
          "type": "string"
        },
        "lines": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/JournalLine"
          }
        },
        "journalNumber": {
          "type": "string",
          "description": "Reference number for identifying journal entries."
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remoteWasDeleted": {
          "type": "boolean"
        },
        "postingStatus": {
          "type": "string"
        },
        "accountingPeriod": {
          "type": "string",
          "description": "The accounting period that the JournalEntry was generated in."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "mergeAccountId": {
          "type": "string",
          "title": "the id of the record as stored in merge"
        }
      },
      "description": "The JournalEntry object is used to get a record of all manually created entries made in a company’s general ledger.\nThe journal line items for each journal entry should sum to zero."
    },
    "JournalLine": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "netAmount": {
          "type": "number",
          "format": "float",
          "title": "Might want to use double or a more precise type"
        },
        "trackingCategory": {
          "type": "string"
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contact": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "exchangeRate": {
          "type": "string",
          "description": "Assuming string due to the example provided, but could be float or double."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "The JournalLine object is used to represent a journal entry's line items."
    },
    "Link": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "plaidSync": {
          "$ref": "#/definitions/PlaidSync"
        },
        "linkStatus": {
          "$ref": "#/definitions/LinkStatus"
        },
        "plaidLink": {
          "$ref": "#/definitions/PlaidLink"
        },
        "plaidNewAccountsAvailable": {
          "type": "boolean"
        },
        "expirationDate": {
          "type": "string"
        },
        "institutionName": {
          "type": "string"
        },
        "customInstitutionName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "lastManualSync": {
          "type": "string"
        },
        "lastSuccessfulUpdate": {
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/Token",
          "title": "token object witholds an access token which is a token used to make API requests related to a specific Item. You will typically obtain an access_token\nby calling /item/public_token/exchange. For more details, see the Token exchange flow. An access_token does not expire,\nalthough it may require updating, such as when a user changes their password, or when working with European institutions\nthat comply with PSD2's 90-day consent window. For more information, see When to use update mode. \nAccess tokens should always be stored securely, and associated with the user whose data they represent. \nIf compromised, an access_token can be rotated via /item/access_token/invalidate. If no longer needed, \nit can be revoked via /item/remove.(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];"
        },
        "bankAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/BankAccount"
          },
          "title": "a link event - or client login event can have many connected bank accounts\nfor example a log in link against one instition like chase can have many account (checking and savings)\nit is important though to ensure that if a link against an instition already exists, we dont fascilitate duplicated"
        },
        "investmentAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InvestmentAccount"
          },
          "title": "a link event - or client login event can have many connected investment accounts\nfor example a log in link against one instition like fidelity can have many accounts (401k and investment account)\nit is important though to ensure that if a link against an instition already exists, we dont fascilitate duplicated"
        },
        "creditAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CreditAccount"
          },
          "title": "credit accounts tied to a user"
        },
        "mortgageAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MortgageAccount"
          },
          "title": "mortgage accounts tied to a user"
        },
        "studentLoanAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StudentLoanAccount"
          },
          "title": "student loan accounts tied to a link"
        },
        "plaidInstitutionId": {
          "type": "string",
          "title": "the id of the institution this link is tied to and against"
        },
        "linkType": {
          "$ref": "#/definitions/LinkType",
          "title": "the type of link this is ... can be either a manual or plaid link type"
        },
        "errorCode": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "newAccountsAvailable": {
          "type": "boolean"
        },
        "shouldBeUpdated": {
          "type": "boolean"
        }
      },
      "description": "A Link represents a login at a financial institution. A single end-user of your application might have accounts at different financial\ninstitutions, which means they would have multiple different Items. An Item is not the same as a financial institution account,\nalthough every account will be associated with an Item. For example, if a user has one login at their bank that allows them to access\nboth their checking account and their savings account, a single Item would be associated with both of those accounts. Each Item \nlinked within your application will have a corresponding access_token, which is a token that you can use to make API requests related\nto that specific Item.\nTwo Items created for the same set of credentials at the same institution will be considered different and not share the same item_id."
    },
    "LinkStatus": {
      "type": "string",
      "enum": [
        "LINK_STATUS_UNSPECIFIED",
        "LINK_STATUS_SETUP",
        "LINK_STATUS_PENDING",
        "LINK_STATUS_ERROR",
        "LINK_STATUS_SUCCESS",
        "LINK_STATUS_PENDING_EXPIRATION",
        "LINK_STATUS_REVOKED",
        "LINK_STATUS_ITEM_LOGIN_REQUIRED"
      ],
      "default": "LINK_STATUS_UNSPECIFIED"
    },
    "LinkType": {
      "type": "string",
      "enum": [
        "LINK_TYPE_UNSPECIFIED",
        "LINK_TYPE_PLAID",
        "LINK_TYPE_MANUAL"
      ],
      "default": "LINK_TYPE_UNSPECIFIED"
    },
    "LinkedAccountingAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Attachments"
          },
          "title": "Represent a company's attachments. a business can have many attachments"
        },
        "companyInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CompanyInfo"
          },
          "description": "The CompanyInfo object is used to represent a company's information."
        },
        "purchaseOrders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PurchaseOrder"
          },
          "title": "a business can have many purchase orders"
        },
        "reportDetails": {
          "$ref": "#/definitions/ReportDetails",
          "title": "a business can have one report object"
        },
        "referenceDetails": {
          "$ref": "#/definitions/ReferenceDetails"
        },
        "transactionsDetails": {
          "$ref": "#/definitions/TransactionDetails"
        }
      }
    },
    "LocationFinancialSubProfile": {
      "type": "object",
      "properties": {
        "locationCity": {
          "type": "string"
        },
        "transactionCount": {
          "type": "string",
          "format": "uint64"
        },
        "spentLastWeek": {
          "type": "number",
          "format": "double"
        },
        "spentLastTwoWeeks": {
          "type": "number",
          "format": "double"
        },
        "spentLastMonth": {
          "type": "number",
          "format": "double"
        },
        "spentLastSixMonths": {
          "type": "number",
          "format": "double"
        },
        "spentLastYear": {
          "type": "number",
          "format": "double"
        },
        "spentLastTwoYears": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        },
        "month": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "LocationFinancialSubProfile\nThis message is used to represent the financial sub profile of a location."
    },
    "MelodyFinancialContext": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CategoryMetricsFinancialSubProfile"
          }
        },
        "expenses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ExpenseMetricsFinancialSubProfileMetrics"
          }
        },
        "income": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IncomeMetricsFinancialSubProfile"
          }
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/LocationFinancialSubProfile"
          }
        },
        "merchants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MerchantMetricsFinancialSubProfile"
          }
        },
        "paymentChannels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PaymentChannelMetricsFinancialSubProfile"
          }
        },
        "bankAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/BankAccount"
          }
        },
        "investmentAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InvestmentAccount"
          }
        },
        "creditAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CreditAccount"
          }
        },
        "mortgageLoanAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/MortgageAccount"
          }
        },
        "studentLoanAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StudentLoanAccount"
          }
        },
        "financialUserProfileType": {
          "$ref": "#/definitions/FinancialUserProfileType"
        }
      },
      "description": "MelodyFinancialContext represents the financial context of a user.\nThis message is used to represent the financial context of a user."
    },
    "MerchantMetricsFinancialSubProfile": {
      "type": "object",
      "properties": {
        "merchantName": {
          "type": "string"
        },
        "spentLastWeek": {
          "type": "number",
          "format": "double"
        },
        "spentLastTwoWeeks": {
          "type": "number",
          "format": "double"
        },
        "spentLastMonth": {
          "type": "number",
          "format": "double"
        },
        "spentLastSixMonths": {
          "type": "number",
          "format": "double"
        },
        "spentLastYear": {
          "type": "number",
          "format": "double"
        },
        "spentLastTwoYears": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        },
        "month": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "MerchantFinancialSubProfile\nThis message is used to represent the financial sub profile of a merchant."
    },
    "MerchantMonthlyExpenditure": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "merchantName": {
          "type": "string"
        },
        "totalSpending": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "MerchantMonthlyExpenditure\nThis message is used to represent the monthly expenditure of a merchant."
    },
    "MergeExchangePublicLinkTokenForAccountTokenRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "The user id\nValidations:\n- user_id must be greater than 0"
        },
        "publicToken": {
          "type": "string"
        },
        "endUserOriginId": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "profileType": {
          "$ref": "#/definitions/FinancialUserProfileType"
        }
      },
      "required": [
        "userId",
        "publicToken",
        "endUserOriginId",
        "organizationName",
        "profileType"
      ]
    },
    "MergeExchangePublicLinkTokenForAccountTokenResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "MergeGetPublicLinkTokenRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uint64",
          "description": "The user id\nValidations:\n- user_id must be greater than 0\nThis unique identifier typically represents the ID for your end user in your product's database. T\nhis value must be distinct from other Linked Accounts' unique identifiers."
        },
        "organizationName": {
          "type": "string",
          "description": "Your end user's organization."
        },
        "email": {
          "type": "string",
          "description": "Your end user's email address. This is purely for\nidentification purposes - setting this value will not cause any emails to be sent."
        },
        "profileType": {
          "$ref": "#/definitions/FinancialUserProfileType"
        }
      },
      "required": [
        "userId",
        "organizationName",
        "email",
        "profileType"
      ]
    },
    "MergeGetPublicLinkTokenResponse": {
      "type": "object",
      "properties": {
        "linkToken": {
          "type": "string"
        },
        "integrationName": {
          "type": "string"
        },
        "magicLinkUrl": {
          "type": "string"
        },
        "endUserOriginId": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        }
      }
    },
    "MergeLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "integration": {
          "type": "string"
        },
        "integrationSlug": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "endUserOriginId": {
          "type": "string"
        },
        "endUserOrganizationName": {
          "type": "string"
        },
        "endUserEmailAddress": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "webhookListenerUrl": {
          "type": "string"
        },
        "isDuplicate": {
          "type": "boolean"
        },
        "token": {
          "$ref": "#/definitions/Token"
        },
        "integrationName": {
          "type": "string"
        },
        "integrationImage": {
          "type": "string"
        },
        "integrationSquareImage": {
          "type": "string"
        },
        "account": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/LinkedAccountingAccount"
          },
          "description": "When you request a link token to initiate a Merge Link session, Merge determines whether to create a new linked account or modify\nan existing linked account based on a combination of the end_user_origin_id and the category. If you want to support multiple\nconnections, you simply need to provide a different end_user_origin_id for each company.\n\nThis approach enables you to link multiple instances of the same integration (like QuickBooks) for the same end user.\nIt also has the added security benefit of not exposing any internal end_user_origin_ids."
        },
        "mergeLinkedAccountId": {
          "type": "string"
        }
      },
      "title": "==============================="
    },
    "Milestone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "name": {
          "type": "string",
          "example": "Buy a car",
          "title": "The name of the milestone\nValidations:\n- must be at least 3 characters long"
        },
        "description": {
          "type": "string",
          "example": "Buy a car",
          "title": "The description of the miletone\nValidations:\n- must be at least 3 characters long"
        },
        "targetDate": {
          "type": "string",
          "example": "testtagdescription",
          "title": "the target date of the milestone\nValidations:\n- must be at least 3 characters long"
        },
        "targetAmount": {
          "type": "string",
          "example": "Active",
          "title": "the target amount of the milestone"
        },
        "isCompleted": {
          "type": "boolean",
          "example": true,
          "title": "wethe milestone is completed or not"
        },
        "budget": {
          "$ref": "#/definitions/Budget",
          "title": "the budget associated with the milestone"
        }
      },
      "title": "Milestone: represents a milestone in the context of simfinni. A financial milestone that is both smart\nand achievable. A milestone is a sub goal of a goal and is tied to a goal by the goal id"
    },
    "MonthlyBalance": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "netBalance": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "MonthlyBalance\nThis message is used to represent the monthly balance of a user."
    },
    "MonthlyExpenditure": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "totalSpending": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "MonthlyExpenditure\nThis message is used to represent the monthly expenditure of a user."
    },
    "MonthlyIncome": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "totalIncome": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "MonthlyIncome\nThis message is used to represent the monthly income of a user."
    },
    "MonthlySavings": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "netSavings": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "MonthlySavings\nThis message is used to represent the monthly savings of a user."
    },
    "MonthlyTotalQuantityBySecurityAndUser": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "securityId": {
          "type": "string"
        },
        "totalQuantity": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "MonthlyTotalQuantityBySecurityAndUser\nThis message is used to represent the monthly total quantity of a security."
    },
    "MonthlyTransactionCount": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "transactionCount": {
          "type": "string",
          "format": "uint64"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "MonthlyTransactionCount\nThis message is used to represent the monthly transaction count of a user."
    },
    "MortgageAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "plaidAccountId": {
          "type": "string"
        },
        "accountNumber": {
          "type": "string"
        },
        "currentLateFee": {
          "type": "number",
          "format": "double"
        },
        "escrowBalance": {
          "type": "number",
          "format": "double"
        },
        "hasPmi": {
          "type": "boolean"
        },
        "hasPrepaymentPenalty": {
          "type": "boolean"
        },
        "lastPaymentAmount": {
          "type": "number",
          "format": "double"
        },
        "lastPaymentDate": {
          "type": "string"
        },
        "loanTerm": {
          "type": "string"
        },
        "loanTypeDescription": {
          "type": "string"
        },
        "maturityDate": {
          "type": "string"
        },
        "nextMonthlyPayment": {
          "type": "number",
          "format": "double"
        },
        "nextPaymentDueDate": {
          "type": "string"
        },
        "originalPrincipalBalance": {
          "type": "number",
          "format": "double"
        },
        "originalPropertyValue": {
          "type": "number",
          "format": "double"
        },
        "outstandingPrincipalBalance": {
          "type": "number",
          "format": "double"
        },
        "paymentAmount": {
          "type": "number",
          "format": "double"
        },
        "paymentDate": {
          "type": "string"
        },
        "originationDate": {
          "type": "string"
        },
        "originationPrincipalAmount": {
          "type": "number",
          "format": "double"
        },
        "pastDueAmount": {
          "type": "number",
          "format": "double"
        },
        "ytdInterestPaid": {
          "type": "number",
          "format": "double"
        },
        "ytdPrincipalPaid": {
          "type": "number",
          "format": "double"
        },
        "propertyAddressCity": {
          "type": "string"
        },
        "propertyAddressState": {
          "type": "string"
        },
        "propertyAddressStreet": {
          "type": "string"
        },
        "propertyAddressPostalCode": {
          "type": "string"
        },
        "propertyRegion": {
          "type": "string"
        },
        "propertyCountry": {
          "type": "string"
        },
        "interestRatePercentage": {
          "type": "number",
          "format": "double"
        },
        "interestRateType": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/BankAccountStatus",
          "title": "the bank account status"
        }
      }
    },
    "Payment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string"
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "contact": {
          "type": "string"
        },
        "account": {
          "type": "string",
          "description": "The supplier’s or customer’s account in which the payment is made."
        },
        "currency": {
          "type": "string"
        },
        "exchangeRate": {
          "type": "string",
          "description": "Assuming string due to the example provided, but could be float or double."
        },
        "company": {
          "type": "string"
        },
        "totalAmount": {
          "type": "number",
          "format": "float",
          "description": "The total amount of money being paid to the supplier, or customer, after taxes.\n\nMight want to use double or a more precise type"
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remoteUpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "remoteWasDeleted": {
          "type": "boolean"
        },
        "accountingPeriod": {
          "type": "string",
          "description": "The accounting period that the Payment was generated in."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "title": "This is the datetime that this object was last updated by Merge"
        },
        "mergeAccountId": {
          "type": "string",
          "title": "the id as stored in merge"
        }
      },
      "description": "The Payment object represents general payments made towards a specific transaction."
    },
    "PaymentChannelMetricsFinancialSubProfile": {
      "type": "object",
      "properties": {
        "paymentChannel": {
          "type": "string"
        },
        "spentLastWeek": {
          "type": "number",
          "format": "double"
        },
        "spentLastTwoWeeks": {
          "type": "number",
          "format": "double"
        },
        "spentLastMonth": {
          "type": "number",
          "format": "double"
        },
        "spentLastSixMonths": {
          "type": "number",
          "format": "double"
        },
        "spentLastYear": {
          "type": "number",
          "format": "double"
        },
        "spentLastTwoYears": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        },
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "transactionCount": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "PaymentChannelMetricsFinancialSubProfile\nThis message is used to represent the financial sub profile of a payment channel."
    },
    "PaymentChannelMonthlyExpenditure": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "paymentChannel": {
          "type": "string"
        },
        "totalSpending": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "PaymentChannelMonthlyExpenditure\nThis message is used to represent the monthly expenditure of a payment channel."
    },
    "PersonalActionableInsight": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "insightName": {
          "$ref": "#/definitions/PersonalActionableInsightName",
          "title": "insight name"
        },
        "description": {
          "type": "string",
          "title": "insight description"
        },
        "takeaway": {
          "type": "string",
          "title": "insight takeaway"
        },
        "action": {
          "type": "string",
          "title": "insight action"
        },
        "expectedBenefit": {
          "type": "string",
          "title": "insight expected benefit"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "insight tags"
        },
        "generatedTime": {
          "type": "string",
          "format": "date-time",
          "title": "insight generated time"
        },
        "metricsToOptimizeFor": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "metrics to optimize for"
        }
      }
    },
    "PersonalActionableInsightName": {
      "type": "string",
      "enum": [
        "PERSONAL_ACTIONABLE_INSIGHT_NAME_UNSPECIFIED",
        "PERSONAL_ACTIONABLE_INSIGHT_NAME_EXPENSE",
        "PERSONAL_ACTIONABLE_INSIGHT_NAME_EMERGENCY_FUND",
        "PERSONAL_ACTIONABLE_INSIGHT_NAME_DEBT_PRIORITIZATION",
        "PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_ESSENTIAL_EXPENSES",
        "PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_SUBSCRIPTIONS",
        "PERSONAL_ACTIONABLE_INSIGHT_NAME_DISCRETIONARY_SPENDING"
      ],
      "default": "PERSONAL_ACTIONABLE_INSIGHT_NAME_UNSPECIFIED"
    },
    "PlaidAccountRecurringTransaction": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "title": "@gotag: ch:\"account_id\""
        },
        "streamId": {
          "type": "string",
          "title": "@gotag: ch:\"stream_id\""
        },
        "categoryId": {
          "type": "string",
          "title": "@gotag: ch:\"category_id\""
        },
        "description": {
          "type": "string",
          "title": "@gotag: ch:\"description\""
        },
        "merchantName": {
          "type": "string",
          "title": "@gotag: ch:\"merchant_name\""
        },
        "personalFinanceCategoryPrimary": {
          "type": "string",
          "title": "@gotag: ch:\"personal_finance_category_primary\""
        },
        "personalFinanceCategoryDetailed": {
          "type": "string",
          "title": "@gotag: ch:\"personal_finance_category_detailed\""
        },
        "firstDate": {
          "type": "string",
          "title": "@gotag: ch:\"first_date\""
        },
        "lastDate": {
          "type": "string",
          "title": "@gotag: ch:\"last_date\""
        },
        "frequency": {
          "type": "string",
          "title": "@gotag: ch:\"frequency\""
        },
        "transactionIds": {
          "type": "string",
          "title": "@gotag: ch:\"transaction_ids,array\""
        },
        "averageAmount": {
          "type": "string",
          "title": "@gotag: ch:\"average_amount\""
        },
        "averageAmountIsoCurrencyCode": {
          "type": "string",
          "title": "@gotag: ch:\"average_amount_iso_currency_code\""
        },
        "lastAmount": {
          "type": "string",
          "title": "@gotag: ch:\"last_amount\""
        },
        "lastAmountIsoCurrencyCode": {
          "type": "string",
          "title": "@gotag: ch:\"last_amount_iso_currency_code\""
        },
        "isActive": {
          "type": "boolean",
          "title": "@gotag: ch:\"is_active\""
        },
        "status": {
          "type": "string",
          "title": "@gotag: ch:\"status\""
        },
        "updatedTime": {
          "type": "string",
          "title": "@gotag: ch:\"updated_time\""
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "@gotag: ch:\"user_id\""
        },
        "linkId": {
          "type": "string",
          "format": "uint64",
          "title": "@gotag: ch:\"link_id\""
        },
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "@gotag: ch:\"id\""
        },
        "flow": {
          "type": "string",
          "title": "@gotag: ch:\"flow\""
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "additionalProperties": {
          "$ref": "#/definitions/Any"
        }
      }
    },
    "PlaidAccountTransaction": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "@gotag: ch:\"account_id\"",
          "title": "Basic transaction details"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "title": "@gotag: ch:\"amount\""
        },
        "isoCurrencyCode": {
          "type": "string",
          "title": "@gotag: ch:\"iso_currency_code\""
        },
        "unofficialCurrencyCode": {
          "type": "string",
          "title": "@gotag: ch:\"unofficial_currency_code\""
        },
        "transactionId": {
          "type": "string",
          "title": "@gotag: ch:\"transaction_id\""
        },
        "transactionCode": {
          "type": "string",
          "title": "@gotag: ch:\"transaction_code\""
        },
        "currentDate": {
          "type": "string",
          "description": "@gotag: ch:\"date\"",
          "title": "Date details"
        },
        "currentDatetime": {
          "type": "string",
          "title": "@gotag: ch:\"datetime\""
        },
        "authorizedDate": {
          "type": "string",
          "title": "@gotag: ch:\"authorized_date\""
        },
        "authorizedDatetime": {
          "type": "string",
          "title": "@gotag: ch:\"authorized_datetime\""
        },
        "categoryId": {
          "type": "string",
          "description": "@gotag: ch:\"category_id\"",
          "title": "Transaction categories"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "personalFinanceCategoryPrimary": {
          "type": "string",
          "title": "@gotag: ch:\"personal_finance_category_primary\""
        },
        "personalFinanceCategoryDetailed": {
          "type": "string",
          "title": "@gotag: ch:\"personal_finance_category_detailed\""
        },
        "name": {
          "type": "string",
          "description": "@gotag: ch:\"name\"",
          "title": "Merchant details"
        },
        "merchantName": {
          "type": "string",
          "title": "@gotag: ch:\"merchant_name\""
        },
        "checkNumber": {
          "type": "string",
          "description": "@gotag: ch:\"check_number\"",
          "title": "Payment details"
        },
        "paymentChannel": {
          "type": "string",
          "title": "@gotag: ch:\"payment_channel\""
        },
        "pending": {
          "type": "boolean",
          "title": "@gotag: ch:\"pending\""
        },
        "pendingTransactionId": {
          "type": "string",
          "title": "@gotag: ch:\"pending_transaction_id\""
        },
        "accountOwner": {
          "type": "string",
          "title": "@gotag: ch:\"account_owner\""
        },
        "paymentMetaByOrderOf": {
          "type": "string"
        },
        "paymentMetaPayee": {
          "type": "string"
        },
        "paymentMetaPayer": {
          "type": "string"
        },
        "paymentMetaPaymentMethod": {
          "type": "string"
        },
        "paymentMetaPaymentProcessor": {
          "type": "string"
        },
        "paymentMetaPpdId": {
          "type": "string"
        },
        "paymentMetaReason": {
          "type": "string"
        },
        "paymentMetaReferenceNumber": {
          "type": "string"
        },
        "locationAddress": {
          "type": "string",
          "title": "Location details"
        },
        "locationCity": {
          "type": "string"
        },
        "locationRegion": {
          "type": "string"
        },
        "locationPostalCode": {
          "type": "string"
        },
        "locationCountry": {
          "type": "string"
        },
        "locationLat": {
          "type": "number",
          "format": "double"
        },
        "locationLon": {
          "type": "number",
          "format": "double"
        },
        "locationStoreNumber": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "title": "Additional properties"
        },
        "additionalProperties": {
          "$ref": "#/definitions/Any"
        },
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "System generated fields"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        },
        "linkId": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "PlaidExchangeTokenRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "The user id\nValidations:\n- user_id must be greater than 0"
        },
        "publicToken": {
          "type": "string",
          "title": "The public token\nValidations:\n- cannot be nil hence required"
        },
        "institutionId": {
          "type": "string",
          "title": "The institution id"
        },
        "institutionName": {
          "type": "string",
          "title": "The institution name"
        },
        "profileType": {
          "$ref": "#/definitions/FinancialUserProfileType"
        }
      },
      "required": [
        "userId",
        "publicToken",
        "profileType"
      ]
    },
    "PlaidExchangeTokenResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "wether the operation was successful"
        }
      },
      "required": [
        "success"
      ]
    },
    "PlaidInitiateTokenExchangeRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "A unique ID representing the end user. Typically this will be a user ID number from your application.\nPersonally identifiable information, such as an email address or phone number, \nshould not be used in the `client_user_id`. It is currently used as a means of searching logs \nfor the given user in the Plaid Dashboard.\nValidations:\n- user_id must be greater than 0"
        },
        "fullName": {
          "type": "string",
          "description": "The user's full legal name. This is an optional field used in \nthe [returning user experience](https://plaid.com/docs/link/returning-user) to associate Items to the user."
        },
        "email": {
          "type": "string",
          "description": "The user's email address. This field is optional, but required to enable the \n[pre-authenticated returning user flow](https://plaid.com/docs/link/returning-user/#enabling-the-returning-user-experience)."
        },
        "phoneNumber": {
          "type": "string",
          "description": "The user's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.\nThis field is optional, but required to enable the [returning user experience](https://plaid.com/docs/link/returning-user)."
        },
        "profileType": {
          "$ref": "#/definitions/FinancialUserProfileType"
        }
      },
      "required": [
        "userId",
        "fullName",
        "email",
        "phoneNumber",
        "profileType"
      ]
    },
    "PlaidInitiateTokenExchangeResponse": {
      "type": "object",
      "properties": {
        "linkToken": {
          "type": "string"
        },
        "expiration": {
          "type": "string"
        },
        "plaidRequestId": {
          "type": "string"
        }
      }
    },
    "PlaidInitiateTokenUpdateRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "The user id\nValidations:\n- user_id must be greater than 0"
        },
        "linkId": {
          "type": "string",
          "format": "uint64",
          "title": "The link id we want to update for\nValidations:\n- cannot be nil hence required"
        },
        "profileType": {
          "$ref": "#/definitions/FinancialUserProfileType"
        }
      },
      "required": [
        "userId",
        "linkId",
        "profileType"
      ]
    },
    "PlaidInitiateTokenUpdateResponse": {
      "type": "object",
      "properties": {
        "linkToken": {
          "type": "string"
        },
        "expiration": {
          "type": "string"
        }
      }
    },
    "PlaidLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "webhookUrl": {
          "type": "string"
        },
        "institutionId": {
          "type": "string"
        },
        "institutionName": {
          "type": "string"
        },
        "usePlaidSync": {
          "type": "boolean"
        },
        "itemId": {
          "type": "string"
        }
      }
    },
    "PlaidSync": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "timeStamp": {
          "type": "string"
        },
        "trigger": {
          "type": "string"
        },
        "nextCursor": {
          "type": "string"
        },
        "added": {
          "type": "string",
          "format": "int64"
        },
        "removed": {
          "type": "string",
          "format": "int64"
        },
        "modified": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "Pocket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "goals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SmartGoal"
          },
          "title": "the set of smart goals this user witholds"
        },
        "type": {
          "$ref": "#/definitions/PocketType",
          "title": "The type of the pocket"
        }
      },
      "title": "Pocket is an abstraction of a over a bank account. A user can has at most 4 pockets per connected account\nNOTE: these pockets are automatically created by the system and should not be exposed for mutation\nby any client. The only operations that can be performed against a pocket are:\n1. Get the pocket\n2. Get the pocket's smart goals\n3. Adding a smart goal to the pocket"
    },
    "PocketType": {
      "type": "string",
      "enum": [
        "POCKET_TYPE_UNSPECIFIED",
        "POCKET_TYPE_DISCRETIONARY_SPENDING",
        "POCKET_TYPE_FUN_MONEY",
        "POCKET_TYPE_DEBT_REDUCTION",
        "POCKET_TYPE_EMERGENCY_FUND",
        "POCKET_TYPE_INVESTMENT",
        "POCKET_TYPE_SHORT_TERM_SAVINGS",
        "POCKET_TYPE_LONG_TERM_SAVINGS"
      ],
      "default": "POCKET_TYPE_UNSPECIFIED"
    },
    "ProcessWebhookRequest": {
      "type": "object",
      "properties": {
        "webhookType": {
          "type": "string"
        },
        "webhookCode": {
          "type": "string"
        },
        "itemId": {
          "type": "string",
          "title": "The item_id of the Item associated with this webhook, warning, or error"
        },
        "initialUpdateComplete": {
          "type": "boolean",
          "description": "Indicates if initial pull information is available."
        },
        "historicalUpdateComplete": {
          "type": "string",
          "description": "Indicates if historical pull information is available."
        },
        "environment": {
          "type": "string",
          "title": "The Plaid environment the webhook was sent from"
        },
        "newTransactions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The number of new, unfetched transactions available"
        },
        "removedTransactions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "An array of transaction_ids corresponding to the removed transactions"
        },
        "error": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Any"
          },
          "description": "We use standard HTTP response codes for success and failure notifications, \nand our errors are further classified by error_type. In general, 200 HTTP codes \ncorrespond to success, 40X codes are for developer- or user-related failures, and \n50X codes are for Plaid-related issues. An Item with a non-null error object will \nonly be part of an API response when calling /item/get to view Item status. Otherwise, \nerror fields will be null if no error has occurred; if an error has occurred, an error \ncode will be returned instead."
        },
        "accountIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of account_ids for accounts that have new or updated recurring transactions data."
        },
        "consentExpirationTime": {
          "type": "string",
          "title": "The time at which the user's access_token will expire. This field will only be present"
        },
        "accountIdsWithNewLiabilities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "An array of account_id's for accounts that contain new liabilities.'"
        },
        "accountIdsWithUpdatedLiabilities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An object with keys of account_id's that are mapped to their respective liabilities fields that changed."
        },
        "newHoldings": {
          "type": "string",
          "format": "uint64",
          "description": "The number of new holdings reported since the last time this webhook was fired."
        },
        "updatedHoldings": {
          "type": "string",
          "format": "uint64",
          "title": "The number of updated holdings reported since the last time this webhook was fired.\n@gotag: json:\"updated_holdings\""
        }
      },
      "required": [
        "webhookType",
        "webhookCode"
      ]
    },
    "ProcessWebhookResponse": {
      "type": "object"
    },
    "PurchaseOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "mergeAccountId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "The purchase order's issue date."
        },
        "purchaseOrderNumber": {
          "type": "string",
          "description": "The human-readable number of the purchase order."
        },
        "deliveryDate": {
          "type": "string",
          "format": "date-time",
          "description": "The purchase order's delivery date."
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address",
          "description": "The purchase order's delivery address."
        },
        "customer": {
          "type": "string",
          "description": "The contact making the purchase order."
        },
        "vendor": {
          "type": "string",
          "description": "The party fulfilling the purchase order."
        },
        "memo": {
          "type": "string",
          "description": "A memo attached to the purchase order."
        },
        "company": {
          "type": "string",
          "description": "The company the purchase order belongs to."
        },
        "totalAmount": {
          "type": "number",
          "format": "float",
          "description": "The purchase order's total amount.\n\nMight be better as double."
        },
        "currency": {
          "type": "string",
          "description": "The purchase order's currency."
        },
        "exchangeRate": {
          "type": "string",
          "description": "Assuming string, but might be better as float or double."
        },
        "lineItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PurchaseOrderLineItem"
          }
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remoteCreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "remoteUpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "remoteWasDeleted": {
          "type": "boolean"
        },
        "accountingPeriod": {
          "type": "string",
          "description": "The accounting period that the PurchaseOrder was generated in."
        },
        "remoteId": {
          "type": "string"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "The PurchaseOrder object is a record of request for a product or service between a buyer and seller."
    },
    "PurchaseOrderLineItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "unitPrice": {
          "type": "string",
          "description": "Assuming string, but might be better as float or double."
        },
        "item": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "trackingCategory": {
          "type": "string"
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "taxAmount": {
          "type": "string"
        },
        "totalLineAmount": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "exchangeRate": {
          "type": "string",
          "description": "Assuming string, but might be better as float or double."
        },
        "company": {
          "type": "string"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "The PurchaseOrderLineItem object is used to represent a purchase order's line item."
    },
    "ReCurringFlow": {
      "type": "string",
      "enum": [
        "RE_CURRING_FLOW_UNSPECIFIED",
        "RE_CURRING_FLOW_INFLOW",
        "RE_CURRING_FLOW_OUTFLOW"
      ],
      "default": "RE_CURRING_FLOW_UNSPECIFIED"
    },
    "ReOccuringTransaction": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "title": "@gotag: ch:\"account_id\""
        },
        "streamId": {
          "type": "string",
          "title": "@gotag: ch:\"stream_id\""
        },
        "categoryId": {
          "type": "string",
          "title": "@gotag: ch:\"category_id\""
        },
        "description": {
          "type": "string",
          "title": "@gotag: ch:\"description\""
        },
        "merchantName": {
          "type": "string",
          "title": "@gotag: ch:\"merchant_name\""
        },
        "personalFinanceCategoryPrimary": {
          "type": "string",
          "title": "@gotag: ch:\"personal_finance_category_primary\""
        },
        "personalFinanceCategoryDetailed": {
          "type": "string",
          "title": "@gotag: ch:\"personal_finance_category_detailed\""
        },
        "firstDate": {
          "type": "string",
          "title": "@gotag: ch:\"first_date\""
        },
        "lastDate": {
          "type": "string",
          "title": "@gotag: ch:\"last_date\""
        },
        "frequency": {
          "$ref": "#/definitions/ReOccuringTransactionsFrequency",
          "title": "@gotag: ch:\"frequency\""
        },
        "transactionIds": {
          "type": "string",
          "title": "@gotag: ch:\"transaction_ids,array\""
        },
        "averageAmount": {
          "type": "string",
          "title": "@gotag: ch:\"average_amount\""
        },
        "averageAmountIsoCurrencyCode": {
          "type": "string",
          "title": "@gotag: ch:\"average_amount_iso_currency_code\""
        },
        "lastAmount": {
          "type": "string",
          "title": "@gotag: ch:\"last_amount\""
        },
        "lastAmountIsoCurrencyCode": {
          "type": "string",
          "title": "@gotag: ch:\"last_amount_iso_currency_code\""
        },
        "isActive": {
          "type": "boolean",
          "title": "@gotag: ch:\"is_active\""
        },
        "status": {
          "$ref": "#/definitions/ReOccuringTransactionsStatus",
          "title": "@gotag: ch:\"status\""
        },
        "updatedTime": {
          "type": "string",
          "title": "@gotag: ch:\"updated_time\""
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "@gotag: ch:\"user_id\""
        },
        "linkId": {
          "type": "string",
          "format": "uint64",
          "title": "@gotag: ch:\"link_id\""
        },
        "id": {
          "type": "string",
          "title": "@gotag: ch:\"id\""
        },
        "flow": {
          "$ref": "#/definitions/ReCurringFlow",
          "title": "@gotag: ch:\"flow\""
        },
        "sign": {
          "type": "integer",
          "format": "int32"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "additionalProperties": {
          "$ref": "#/definitions/Any"
        }
      }
    },
    "ReOccuringTransactionsFrequency": {
      "type": "string",
      "enum": [
        "RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED",
        "RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY",
        "RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY",
        "RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY",
        "RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY",
        "RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY"
      ],
      "default": "RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED"
    },
    "ReOccuringTransactionsStatus": {
      "type": "string",
      "enum": [
        "RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED",
        "RE_OCCURING_TRANSACTIONS_STATUS_MATURE",
        "RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION",
        "RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED"
      ],
      "default": "RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED",
      "description": " - RE_OCCURING_TRANSACTIONS_STATUS_MATURE: A MATURE recurring stream should have at least 3 transactions and happen\n on a regular cadence (For Annual recurring stream, we will mark it MATURE after 2 instances).\n - RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION: When a recurring transaction first appears in the transaction history and before it fulfills\nthe requirement of a mature stream, the status will be EARLY_DETECTION.\n - RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED: A stream that was previously in the EARLY_DETECTION status will move to the TOMBSTONED\nstatus when no further transactions were found at the next expected date."
    },
    "ReadynessCheckResponse": {
      "type": "object",
      "properties": {
        "healthy": {
          "type": "boolean"
        }
      }
    },
    "ReferenceDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "chartOfAccounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/BusinessChartOfAccounts"
          },
          "description": "The Account object is what companies use to track transactions. They can be both bank accounts or a general ledger account (also called a chart of accounts)."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Item"
          },
          "title": "a business can have many items"
        },
        "taxRates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/TaxRate"
          },
          "title": "a business can have many tax rates"
        },
        "contacts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Contacts"
          },
          "description": "The Contact object refers to either a supplier or a customer."
        }
      },
      "description": "ReferenceDetails: These are the objects that provide additional context or information about the transactions.\nThey include things like Accounts, Contacts, Items, and Tax Rates."
    },
    "ReportDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "balanceSheets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/BalanceSheet"
          },
          "title": "The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal to liability and equity combined. This shows the company’s financial health at a specific point in time.\na business can have many balance sheets"
        },
        "cashFlowStatements": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CashFlowStatements"
          },
          "title": "The CashFlowStatement object shows operating activities, investing activities, and financing activities over a period of time (month, quarter, or year).\na company can have many cash flow statements"
        },
        "incomeStatements": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/IncomeStatement"
          },
          "title": "a business can have many income statements"
        }
      },
      "description": "ReportDetails: These are the summaries or overviews of the financial data. They include things\nlike Balance Sheets, Income Statements, and Cash Flow Statements."
    },
    "ReportItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string",
          "title": "the id as stored in the third-party system"
        },
        "name": {
          "type": "string",
          "description": "The report item's name."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "The report item's value."
        },
        "company": {
          "type": "string",
          "title": "The company the report item belongs to. may not necessarily be the company name but a reference instead"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Consider using google.protobuf.Timestamp",
          "title": "This is the datetime that this object was last updated by Merge"
        }
      },
      "description": "The ReportItem object is used to represent a report item for a Balance Sheet, \nCash Flow Statement or Profit and Loss Report."
    },
    "SmartGoal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "the user id to which this goal is tied to"
        },
        "name": {
          "type": "string",
          "example": "Buy a car",
          "title": "The name of the goal\nValidations:\n- must be at least 3 characters long"
        },
        "description": {
          "type": "string",
          "example": "Buy a car",
          "title": "The description of the goal\nValidations:\n- must be at least 3 characters long"
        },
        "isCompleted": {
          "type": "boolean",
          "example": true,
          "title": "wether the goal has been achieved or not"
        },
        "goalType": {
          "$ref": "#/definitions/GoalType",
          "title": "The type of the goal"
        },
        "duration": {
          "type": "string",
          "example": "Active",
          "title": "The duration of the goal"
        },
        "startDate": {
          "type": "string",
          "example": "Active",
          "title": "the start date of the goal"
        },
        "endDate": {
          "type": "string",
          "example": "Active",
          "title": "the end date of the goal"
        },
        "targetAmount": {
          "type": "string",
          "example": "Active",
          "title": "the target amount of the goal\namount of money the user wants to save or invest"
        },
        "currentAmount": {
          "type": "string",
          "example": "Active",
          "title": "the current amount of the goal\ncurrent amount of money saved or invested towards the goal"
        },
        "milestones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Milestone"
          },
          "title": "Milestones associated with the goal"
        },
        "forecasts": {
          "$ref": "#/definitions/Forecast",
          "title": "Forecasts associated with the goal"
        },
        "notes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SmartNote"
          },
          "title": "Notes associated with the goal"
        }
      },
      "description": "SmartGoal: The Goals table stores information about each financial goal, including the name of the goal,\nits description, the target amount of money the user wants to save or invest, and the expected date of completion.\n\nThe Goals table also includes columns for the start date of the goal, the current amount of money saved or\ninvested towards the goal, and a boolean flag indicating whether the goal has been achieved.\nThese additional columns allow the user to track their progress towards the goal and see how much\nmore they need to save or invest to reach their target amount."
    },
    "SmartNote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "Unique identifier for the note"
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "description": "The user id who created the note. This can be useful if in the future you allow multiple users to add notes to the same goal."
        },
        "content": {
          "type": "string",
          "example": "Note content here...",
          "title": "The content of the note\nValidations:\n- must be at least 3 characters long"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp indicating when the note was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp indicating when the note was last updated"
        }
      },
      "title": "Note schema"
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Any"
          }
        }
      }
    },
    "StripeSubscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "stripeSubscriptionId": {
          "type": "string",
          "title": "stripe subscription id tied to the customer"
        },
        "stripeSubscriptionStatus": {
          "$ref": "#/definitions/StripeSubscriptionStatus",
          "title": "stripe subscription status"
        },
        "stripeSubscriptionActiveUntil": {
          "type": "string",
          "title": "stripe subscription active until"
        },
        "stripeWebhookLatestTimestamp": {
          "type": "string",
          "title": "stripe webhook latest timestamp"
        },
        "isTrialing": {
          "type": "boolean",
          "title": "wether the subscription is trialing"
        }
      },
      "title": "StripeSubscription stores high level stripe subscription details of which the user profile has"
    },
    "StripeSubscriptionStatus": {
      "type": "string",
      "enum": [
        "STRIPE_SUBSCRIPTION_STATUS_UNSPECIFIED",
        "STRIPE_SUBSCRIPTION_STATUS_TRIALING",
        "STRIPE_SUBSCRIPTION_STATUS_ACTIVE",
        "STRIPE_SUBSCRIPTION_STATUS_PAST_DUE",
        "STRIPE_SUBSCRIPTION_STATUS_CANCELED",
        "STRIPE_SUBSCRIPTION_STATUS_UNPAID",
        "STRIPE_SUBSCRIPTION_STATUS_COMPLETE",
        "STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE",
        "STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE_EXPIRED",
        "STRIPE_SUBSCRIPTION_STATUS_CREATED",
        "STRIPE_SUBSCRIPTION_STATUS_PAUSED"
      ],
      "default": "STRIPE_SUBSCRIPTION_STATUS_UNSPECIFIED"
    },
    "StripeWebhookRequest": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "StripeWebhookResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "StudentLoanAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "plaidAccountId": {
          "type": "string"
        },
        "disbursementDates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expectedPayoffDate": {
          "type": "string"
        },
        "guarantor": {
          "type": "string"
        },
        "interestRatePercentage": {
          "type": "number",
          "format": "double"
        },
        "isOverdue": {
          "type": "boolean"
        },
        "lastPaymentAmount": {
          "type": "number",
          "format": "double"
        },
        "lastPaymentDate": {
          "type": "string"
        },
        "lastStatementIssueDate": {
          "type": "string"
        },
        "loanName": {
          "type": "string"
        },
        "loanEndDate": {
          "type": "string"
        },
        "minimumPaymentAmount": {
          "type": "number",
          "format": "double"
        },
        "nextPaymentDueDate": {
          "type": "string"
        },
        "originationDate": {
          "type": "string"
        },
        "originationPrincipalAmount": {
          "type": "number",
          "format": "double"
        },
        "outstandingInterestAmount": {
          "type": "number",
          "format": "double"
        },
        "paymentReferenceNumber": {
          "type": "string"
        },
        "sequenceNumber": {
          "type": "string"
        },
        "ytdInterestPaid": {
          "type": "number",
          "format": "double"
        },
        "ytdPrincipalPaid": {
          "type": "number",
          "format": "double"
        },
        "loanType": {
          "type": "string"
        },
        "pslfStatusEstimatedEligibilityDate": {
          "type": "string"
        },
        "pslfStatusPaymentsMade": {
          "type": "integer",
          "format": "int32"
        },
        "pslfStatusPaymentsRemaining": {
          "type": "integer",
          "format": "int32"
        },
        "repaymentPlanType": {
          "type": "string"
        },
        "repaymentPlanDescription": {
          "type": "string"
        },
        "servicerAddressCity": {
          "type": "string"
        },
        "servicerAddressPostalCode": {
          "type": "string"
        },
        "servicerAddressState": {
          "type": "string"
        },
        "servicerAddressStreet": {
          "type": "string"
        },
        "servicerAddressRegion": {
          "type": "string"
        },
        "servicerAddressCountry": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "the user id to which this bank account is tied to"
        },
        "name": {
          "type": "string",
          "title": "the account name"
        },
        "status": {
          "$ref": "#/definitions/BankAccountStatus",
          "title": "the bank account status"
        }
      }
    },
    "TaxRate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "totalTaxRate": {
          "type": "number",
          "format": "double"
        },
        "effectiveTaxRate": {
          "type": "number",
          "format": "double"
        },
        "company": {
          "type": "string"
        },
        "remoteWasDeleted": {
          "type": "boolean"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "mergeAccountId": {
          "type": "string"
        }
      },
      "description": "The TaxRate object is used to represent a tax rate."
    },
    "Token": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "itemId": {
          "type": "string",
          "title": "the id of the item the token is tied to"
        },
        "keyId": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "mergeEndUserOriginId": {
          "type": "string",
          "description": "This is what you'll pass to Merge as the end_user_origin_id."
        },
        "mergeIntegrationSlug": {
          "type": "string",
          "description": "The integration slug/identifier. This is returned at the end of the linking flow."
        },
        "lastMergeCreatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "last time you performed a merge fetch"
        }
      }
    },
    "TotalInvestmentBySecurity": {
      "type": "object",
      "properties": {
        "securityId": {
          "type": "string"
        },
        "totalInvestment": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "TotalInvestmentBySecurity\nThis message is used to represent the total investment of a security."
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "title": "@gotag: ch:\"account_id\""
        },
        "amount": {
          "type": "number",
          "format": "double",
          "title": "@gotag: ch:\"amount\""
        },
        "isoCurrencyCode": {
          "type": "string",
          "title": "@gotag: ch:\"iso_currency_code\""
        },
        "unofficialCurrencyCode": {
          "type": "string",
          "title": "@gotag: ch:\"unofficial_currency_code\""
        },
        "categoryId": {
          "type": "string",
          "title": "@gotag: ch:\"category_id\""
        },
        "checkNumber": {
          "type": "string",
          "title": "@gotag: ch:\"check_number\""
        },
        "currentDate": {
          "type": "string",
          "title": "@gotag: ch:\"date\""
        },
        "currentDatetime": {
          "type": "string",
          "title": "@gotag: ch:\"datetime\""
        },
        "authorizedDate": {
          "type": "string",
          "title": "@gotag: ch:\"authorized_date\""
        },
        "authorizedDatetime": {
          "type": "string",
          "title": "@gotag: ch:\"authorized_datetime\""
        },
        "name": {
          "type": "string",
          "title": "@gotag: ch:\"name\""
        },
        "merchantName": {
          "type": "string",
          "title": "@gotag: ch:\"merchant_name\""
        },
        "paymentChannel": {
          "type": "string",
          "title": "@gotag: ch:\"payment_channel\""
        },
        "pending": {
          "type": "boolean",
          "title": "@gotag: ch:\"pending\""
        },
        "pendingTransactionId": {
          "type": "string",
          "title": "@gotag: ch:\"pending_transaction_id\""
        },
        "accountOwner": {
          "type": "string",
          "title": "@gotag: ch:\"account_owner\""
        },
        "transactionId": {
          "type": "string",
          "title": "@gotag: ch:\"transaction_id\""
        },
        "transactionCode": {
          "type": "string",
          "title": "@gotag: ch:\"transaction_code\""
        },
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "format": "uint64",
          "title": "@gotag: ch:\"user_id\""
        },
        "linkId": {
          "type": "string",
          "format": "uint64",
          "title": "@gotag: ch:\"link_id\""
        },
        "sign": {
          "type": "integer",
          "format": "int32"
        },
        "personalFinanceCategoryPrimary": {
          "type": "string",
          "title": "@gotag: ch:\"personal_finance_category_primary\""
        },
        "personalFinanceCategoryDetailed": {
          "type": "string",
          "title": "@gotag: ch:\"personal_finance_category_detailed\""
        },
        "locationAddress": {
          "type": "string"
        },
        "locationCity": {
          "type": "string"
        },
        "locationRegion": {
          "type": "string"
        },
        "locationPostalCode": {
          "type": "string"
        },
        "locationCountry": {
          "type": "string"
        },
        "locationLat": {
          "type": "number",
          "format": "double"
        },
        "locationLon": {
          "type": "number",
          "format": "double"
        },
        "locationStoreNumber": {
          "type": "string"
        },
        "paymentMetaByOrderOf": {
          "type": "string"
        },
        "paymentMetaPayee": {
          "type": "string"
        },
        "paymentMetaPayer": {
          "type": "string"
        },
        "paymentMetaPaymentMethod": {
          "type": "string"
        },
        "paymentMetaPaymentProcessor": {
          "type": "string"
        },
        "paymentMetaPpdId": {
          "type": "string"
        },
        "paymentMetaReason": {
          "type": "string"
        },
        "paymentMetaReferenceNumber": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "additionalProperties": {
          "$ref": "#/definitions/Any"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TransactionAggregatesByMonth": {
      "type": "object",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int64"
        },
        "personalFinanceCategoryPrimary": {
          "type": "string"
        },
        "locationCity": {
          "type": "string"
        },
        "paymentChannel": {
          "type": "string"
        },
        "merchantName": {
          "type": "string"
        },
        "transactionCount": {
          "type": "string",
          "format": "uint64"
        },
        "totalAmount": {
          "type": "number",
          "format": "double"
        },
        "userId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "TransactionAggregatesByMonth\nThis message is used to represent the transaction aggregates of a user."
    },
    "TransactionDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "id"
        },
        "invoices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Invoice"
          },
          "title": "a business can have many invoices"
        },
        "payments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Payment"
          },
          "title": "a business can have many payments"
        },
        "expenses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Expense"
          },
          "title": "a business can have many expenses"
        },
        "journalEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/JournalEntry"
          },
          "title": "a business can have many journal entries"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/BusinessTransaction"
          },
          "title": "a business can have many transactions"
        },
        "vendorCredits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/VendorCredit"
          },
          "title": "a business can have many vendor credits"
        },
        "creditNotes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CreditNote"
          },
          "title": "a business can have many credit notes"
        }
      },
      "description": "TransactionDetails: These are the actual financial transactions that occur within an accounting system.\nThey include things like Invoices, Payments, Expenses, and Journal Entries."
    },
    "TransactionLineItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "remoteId": {
          "type": "string"
        },
        "memo": {
          "type": "string"
        },
        "unitPrice": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        },
        "item": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "trackingCategory": {
          "type": "string"
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "totalLineAmount": {
          "type": "string"
        },
        "taxRate": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "exchangeRate": {
          "type": "string",
          "description": "Assuming string, but might be better as float or double."
        },
        "company": {
          "type": "string"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UpdateBankAccountRequest": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "$ref": "#/definitions/BankAccount",
          "title": "The bank account to update\nValidations:\n- cannot be nil hence required"
        }
      },
      "required": [
        "bankAccount"
      ]
    },
    "UpdateBankAccountResponse": {
      "type": "object",
      "properties": {
        "updated": {
          "type": "boolean",
          "title": "The bank account id"
        },
        "bankAccount": {
          "$ref": "#/definitions/BankAccount",
          "title": "The bank account"
        }
      }
    },
    "UpdateBudgetRequest": {
      "type": "object",
      "properties": {
        "budget": {
          "$ref": "#/definitions/Budget",
          "title": "The budget to update\nValidations:\n- cannot be nil hence required"
        }
      },
      "required": [
        "budget"
      ]
    },
    "UpdateBudgetResponse": {
      "type": "object",
      "properties": {
        "budget": {
          "$ref": "#/definitions/Budget",
          "title": "The budget id"
        }
      }
    },
    "UpdateMilestoneRequest": {
      "type": "object",
      "properties": {
        "milestone": {
          "$ref": "#/definitions/Milestone",
          "title": "The milestone to update\nValidations:\n- cannot be nil hence required"
        }
      },
      "required": [
        "milestone"
      ]
    },
    "UpdateMilestoneResponse": {
      "type": "object",
      "properties": {
        "milestone": {
          "$ref": "#/definitions/Milestone",
          "title": "The milestone id"
        }
      }
    },
    "UpdateNoteToSmartGoalRequest": {
      "type": "object",
      "properties": {
        "note": {
          "$ref": "#/definitions/SmartNote",
          "title": "The note to update\nValidations:\n- cannot be nil hence required"
        }
      },
      "required": [
        "note"
      ]
    },
    "UpdateNoteToSmartGoalResponse": {
      "type": "object",
      "properties": {
        "note": {
          "$ref": "#/definitions/SmartNote",
          "title": "The smart goal id"
        }
      }
    },
    "UpdatePocketRequest": {
      "type": "object",
      "properties": {
        "pocket": {
          "$ref": "#/definitions/Pocket",
          "title": "The pocket to update\nValidations:\n- cannot be nil hence required"
        }
      },
      "required": [
        "pocket"
      ]
    },
    "UpdatePocketResponse": {
      "type": "object",
      "properties": {
        "pocket": {
          "$ref": "#/definitions/Pocket",
          "title": "The pocket id"
        }
      }
    },
    "UpdateSmartGoalRequest": {
      "type": "object",
      "properties": {
        "smartGoal": {
          "$ref": "#/definitions/SmartGoal",
          "title": "The smart goal to update\nValidations:\n- cannot be nil hence required"
        }
      },
      "required": [
        "smartGoal"
      ]
    },
    "UpdateSmartGoalResponse": {
      "type": "object",
      "properties": {
        "smartGoalId": {
          "type": "string",
          "format": "uint64",
          "title": "The smart goal id"
        }
      }
    },
    "UpdateUserProfileRequest": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/FinancialUserProfile",
          "title": "User profile to update\nValidation:\n- cannot nil hence required"
        }
      },
      "title": "UpdateUserProfileRequest: Represents the request object invoked against the user\nservice to update a user profile",
      "required": [
        "profile"
      ]
    },
    "UpdateUserProfileResponse": {
      "type": "object",
      "properties": {
        "profileUpdated": {
          "type": "boolean"
        },
        "profile": {
          "$ref": "#/definitions/FinancialUserProfile"
        }
      },
      "title": "UpdateUserProfileResponse: Represents the response object returned as a response to\nthe `update user profile` request"
    },
    "VendorCredit": {
      "type": "object",
      "properties": {
        "mergeAccountId": {
          "type": "string"
        },
        "remoteId": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "vendor": {
          "type": "string"
        },
        "totalAmount": {
          "type": "number",
          "format": "double",
          "description": "Using double for more precision."
        },
        "currency": {
          "type": "string"
        },
        "exchangeRate": {
          "type": "string",
          "description": "Assuming string, but might be better as float or double."
        },
        "company": {
          "type": "string"
        },
        "lines": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/VendorCreditLine"
          }
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remoteWasDeleted": {
          "type": "boolean"
        },
        "accountingPeriod": {
          "type": "string"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "The VendorCredit object is an accounts receivable transaction used to show that a customer is owed a gift or refund.\nA vendor credit will contain information on the amount of credit owed to the customer, the vendor that owes the credit,\nand the account."
    },
    "VendorCreditLine": {
      "type": "object",
      "properties": {
        "remoteId": {
          "type": "string"
        },
        "netAmount": {
          "type": "number",
          "format": "double",
          "description": "Using double for more precision."
        },
        "trackingCategory": {
          "type": "string"
        },
        "trackingCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "account": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "exchangeRate": {
          "type": "string",
          "description": "Assuming string, but might be better as float or double."
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Could use a specific Timestamp type for this if you need."
        },
        "id": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "The VendorCreditLine object is used to represent a vendor credit's line items."
    }
  }
}
