// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: financial_service/v1/service_financial_service.proto

package financial_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FinancialService_PlaidInitiateTokenExchange_FullMethodName               = "/financial_service.v1.FinancialService/PlaidInitiateTokenExchange"
	FinancialService_PlaidInitiateTokenUpdate_FullMethodName                 = "/financial_service.v1.FinancialService/PlaidInitiateTokenUpdate"
	FinancialService_PlaidExchangeToken_FullMethodName                       = "/financial_service.v1.FinancialService/PlaidExchangeToken"
	FinancialService_CreateUserProfile_FullMethodName                        = "/financial_service.v1.FinancialService/CreateUserProfile"
	FinancialService_GetUserProfile_FullMethodName                           = "/financial_service.v1.FinancialService/GetUserProfile"
	FinancialService_DeleteUserProfile_FullMethodName                        = "/financial_service.v1.FinancialService/DeleteUserProfile"
	FinancialService_UpdateUserProfile_FullMethodName                        = "/financial_service.v1.FinancialService/UpdateUserProfile"
	FinancialService_CreateBankAccount_FullMethodName                        = "/financial_service.v1.FinancialService/CreateBankAccount"
	FinancialService_GetBankAccount_FullMethodName                           = "/financial_service.v1.FinancialService/GetBankAccount"
	FinancialService_UpdateBankAccount_FullMethodName                        = "/financial_service.v1.FinancialService/UpdateBankAccount"
	FinancialService_DeleteBankAccount_FullMethodName                        = "/financial_service.v1.FinancialService/DeleteBankAccount"
	FinancialService_GetPocket_FullMethodName                                = "/financial_service.v1.FinancialService/GetPocket"
	FinancialService_GetSmartGoalsByPocketId_FullMethodName                  = "/financial_service.v1.FinancialService/GetSmartGoalsByPocketId"
	FinancialService_CreateSmartGoal_FullMethodName                          = "/financial_service.v1.FinancialService/CreateSmartGoal"
	FinancialService_UpdateSmartGoal_FullMethodName                          = "/financial_service.v1.FinancialService/UpdateSmartGoal"
	FinancialService_DeleteSmartGoal_FullMethodName                          = "/financial_service.v1.FinancialService/DeleteSmartGoal"
	FinancialService_CreateMilestone_FullMethodName                          = "/financial_service.v1.FinancialService/CreateMilestone"
	FinancialService_DeleteMilestone_FullMethodName                          = "/financial_service.v1.FinancialService/DeleteMilestone"
	FinancialService_UpdateMilestone_FullMethodName                          = "/financial_service.v1.FinancialService/UpdateMilestone"
	FinancialService_GetMilestone_FullMethodName                             = "/financial_service.v1.FinancialService/GetMilestone"
	FinancialService_GetMilestonesBySmartGoalId_FullMethodName               = "/financial_service.v1.FinancialService/GetMilestonesBySmartGoalId"
	FinancialService_GetForecast_FullMethodName                              = "/financial_service.v1.FinancialService/GetForecast"
	FinancialService_CreateBudget_FullMethodName                             = "/financial_service.v1.FinancialService/CreateBudget"
	FinancialService_UpdateBudget_FullMethodName                             = "/financial_service.v1.FinancialService/UpdateBudget"
	FinancialService_DeleteBudget_FullMethodName                             = "/financial_service.v1.FinancialService/DeleteBudget"
	FinancialService_GetBudget_FullMethodName                                = "/financial_service.v1.FinancialService/GetBudget"
	FinancialService_GetAllBudgets_FullMethodName                            = "/financial_service.v1.FinancialService/GetAllBudgets"
	FinancialService_HealthCheck_FullMethodName                              = "/financial_service.v1.FinancialService/HealthCheck"
	FinancialService_ReadynessCheck_FullMethodName                           = "/financial_service.v1.FinancialService/ReadynessCheck"
	FinancialService_GetInvestmentAcccount_FullMethodName                    = "/financial_service.v1.FinancialService/GetInvestmentAcccount"
	FinancialService_GetMortgageAccount_FullMethodName                       = "/financial_service.v1.FinancialService/GetMortgageAccount"
	FinancialService_GetLiabilityAccount_FullMethodName                      = "/financial_service.v1.FinancialService/GetLiabilityAccount"
	FinancialService_GetStudentLoanAccount_FullMethodName                    = "/financial_service.v1.FinancialService/GetStudentLoanAccount"
	FinancialService_CreateManualLink_FullMethodName                         = "/financial_service.v1.FinancialService/CreateManualLink"
	FinancialService_GetLink_FullMethodName                                  = "/financial_service.v1.FinancialService/GetLink"
	FinancialService_GetLinks_FullMethodName                                 = "/financial_service.v1.FinancialService/GetLinks"
	FinancialService_DeleteLink_FullMethodName                               = "/financial_service.v1.FinancialService/DeleteLink"
	FinancialService_GetReCurringTransactions_FullMethodName                 = "/financial_service.v1.FinancialService/GetReCurringTransactions"
	FinancialService_GetTransactions_FullMethodName                          = "/financial_service.v1.FinancialService/GetTransactions"
	FinancialService_CreateSubscription_FullMethodName                       = "/financial_service.v1.FinancialService/CreateSubscription"
	FinancialService_GetTransactionAggregates_FullMethodName                 = "/financial_service.v1.FinancialService/GetTransactionAggregates"
	FinancialService_GetUserAccountBalanceHistory_FullMethodName             = "/financial_service.v1.FinancialService/GetUserAccountBalanceHistory"
	FinancialService_GetAccountBalanceHistory_FullMethodName                 = "/financial_service.v1.FinancialService/GetAccountBalanceHistory"
	FinancialService_GetUserCategoryMonthlyExpenditure_FullMethodName        = "/financial_service.v1.FinancialService/GetUserCategoryMonthlyExpenditure"
	FinancialService_GetUserCategoryMonthlyIncome_FullMethodName             = "/financial_service.v1.FinancialService/GetUserCategoryMonthlyIncome"
	FinancialService_GetCategoryMonthlyTransactionCount_FullMethodName       = "/financial_service.v1.FinancialService/GetCategoryMonthlyTransactionCount"
	FinancialService_GetDebtToIncomeRatio_FullMethodName                     = "/financial_service.v1.FinancialService/GetDebtToIncomeRatio"
	FinancialService_GetExpenseMetrics_FullMethodName                        = "/financial_service.v1.FinancialService/GetExpenseMetrics"
	FinancialService_GetFinancialProfile_FullMethodName                      = "/financial_service.v1.FinancialService/GetFinancialProfile"
	FinancialService_GetIncomeExpenseRatio_FullMethodName                    = "/financial_service.v1.FinancialService/GetIncomeExpenseRatio"
	FinancialService_GetIncomeMetrics_FullMethodName                         = "/financial_service.v1.FinancialService/GetIncomeMetrics"
	FinancialService_GetMerchantMonthlyExpenditure_FullMethodName            = "/financial_service.v1.FinancialService/GetMerchantMonthlyExpenditure"
	FinancialService_GetMonthlyBalance_FullMethodName                        = "/financial_service.v1.FinancialService/GetMonthlyBalance"
	FinancialService_GetMonthlyExpenditure_FullMethodName                    = "/financial_service.v1.FinancialService/GetMonthlyExpenditure"
	FinancialService_GetMonthlyIncome_FullMethodName                         = "/financial_service.v1.FinancialService/GetMonthlyIncome"
	FinancialService_GetMonthlySavings_FullMethodName                        = "/financial_service.v1.FinancialService/GetMonthlySavings"
	FinancialService_GetMonthlyTotalQuantityBySecurityAndUser_FullMethodName = "/financial_service.v1.FinancialService/GetMonthlyTotalQuantityBySecurityAndUser"
	FinancialService_GetMonthlyTransactionCount_FullMethodName               = "/financial_service.v1.FinancialService/GetMonthlyTransactionCount"
	FinancialService_GetPaymentChannelMonthlyExpenditure_FullMethodName      = "/financial_service.v1.FinancialService/GetPaymentChannelMonthlyExpenditure"
	FinancialService_GetTotalInvestmentBySecurity_FullMethodName             = "/financial_service.v1.FinancialService/GetTotalInvestmentBySecurity"
	FinancialService_GetMelodyFinancialContext_FullMethodName                = "/financial_service.v1.FinancialService/GetMelodyFinancialContext"
	FinancialService_GetTransactionsForBankAccount_FullMethodName            = "/financial_service.v1.FinancialService/GetTransactionsForBankAccount"
	FinancialService_GetHistoricalAccountBalance_FullMethodName              = "/financial_service.v1.FinancialService/GetHistoricalAccountBalance"
	FinancialService_AddDefaultPocketsToBankAccount_FullMethodName           = "/financial_service.v1.FinancialService/AddDefaultPocketsToBankAccount"
	FinancialService_UpdatePocket_FullMethodName                             = "/financial_service.v1.FinancialService/UpdatePocket"
	FinancialService_DeletePocket_FullMethodName                             = "/financial_service.v1.FinancialService/DeletePocket"
	FinancialService_GetTransactionsBetweenTimeRanges_FullMethodName         = "/financial_service.v1.FinancialService/GetTransactionsBetweenTimeRanges"
	FinancialService_GetTransactionsForPastWeek_FullMethodName               = "/financial_service.v1.FinancialService/GetTransactionsForPastWeek"
	FinancialService_GetTransactionsForPastMonth_FullMethodName              = "/financial_service.v1.FinancialService/GetTransactionsForPastMonth"
	FinancialService_AddNoteToSmartGoal_FullMethodName                       = "/financial_service.v1.FinancialService/AddNoteToSmartGoal"
	FinancialService_UpdateNoteToSmartGoal_FullMethodName                    = "/financial_service.v1.FinancialService/UpdateNoteToSmartGoal"
	FinancialService_DeleteNoteFromSmartGoal_FullMethodName                  = "/financial_service.v1.FinancialService/DeleteNoteFromSmartGoal"
	FinancialService_GetNotesFromSmartGoal_FullMethodName                    = "/financial_service.v1.FinancialService/GetNotesFromSmartGoal"
	FinancialService_GetNoteFromSmartGoal_FullMethodName                     = "/financial_service.v1.FinancialService/GetNoteFromSmartGoal"
	FinancialService_ListTransactions_FullMethodName                         = "/financial_service.v1.FinancialService/ListTransactions"
	FinancialService_ListTransactionsAcrossAllAccounts_FullMethodName        = "/financial_service.v1.FinancialService/ListTransactionsAcrossAllAccounts"
	FinancialService_GetTransaction_FullMethodName                           = "/financial_service.v1.FinancialService/GetTransaction"
	FinancialService_UpdateTransaction_FullMethodName                        = "/financial_service.v1.FinancialService/UpdateTransaction"
	FinancialService_BulkUpdateTransaction_FullMethodName                    = "/financial_service.v1.FinancialService/BulkUpdateTransaction"
	FinancialService_DeleteTransaction_FullMethodName                        = "/financial_service.v1.FinancialService/DeleteTransaction"
	FinancialService_AddNoteToTransaction_FullMethodName                     = "/financial_service.v1.FinancialService/AddNoteToTransaction"
	FinancialService_UpdateNoteToTransaction_FullMethodName                  = "/financial_service.v1.FinancialService/UpdateNoteToTransaction"
	FinancialService_DeleteNoteFromTransaction_FullMethodName                = "/financial_service.v1.FinancialService/DeleteNoteFromTransaction"
	FinancialService_ListTransactionNotes_FullMethodName                     = "/financial_service.v1.FinancialService/ListTransactionNotes"
	FinancialService_GetNoteFromTransaction_FullMethodName                   = "/financial_service.v1.FinancialService/GetNoteFromTransaction"
	FinancialService_SplitTransaction_FullMethodName                         = "/financial_service.v1.FinancialService/SplitTransaction"
	FinancialService_UnSplitTransactions_FullMethodName                      = "/financial_service.v1.FinancialService/UnSplitTransactions"
	FinancialService_GetSplitTransaction_FullMethodName                      = "/financial_service.v1.FinancialService/GetSplitTransaction"
	FinancialService_SearchTransactions_FullMethodName                       = "/financial_service.v1.FinancialService/SearchTransactions"
	FinancialService_ListRecurringTransactions_FullMethodName                = "/financial_service.v1.FinancialService/ListRecurringTransactions"
	FinancialService_GetRecurringTransaction_FullMethodName                  = "/financial_service.v1.FinancialService/GetRecurringTransaction"
	FinancialService_UpdateRecurringTransaction_FullMethodName               = "/financial_service.v1.FinancialService/UpdateRecurringTransaction"
	FinancialService_BulkUpdateRecurringTransaction_FullMethodName           = "/financial_service.v1.FinancialService/BulkUpdateRecurringTransaction"
	FinancialService_DeleteRecurringTransaction_FullMethodName               = "/financial_service.v1.FinancialService/DeleteRecurringTransaction"
	FinancialService_AddNoteToRecurringTransaction_FullMethodName            = "/financial_service.v1.FinancialService/AddNoteToRecurringTransaction"
	FinancialService_UpdateNoteToRecurringTransaction_FullMethodName         = "/financial_service.v1.FinancialService/UpdateNoteToRecurringTransaction"
	FinancialService_DeleteNoteFromRecurringTransaction_FullMethodName       = "/financial_service.v1.FinancialService/DeleteNoteFromRecurringTransaction"
	FinancialService_ListRecurringTransactionNotes_FullMethodName            = "/financial_service.v1.FinancialService/ListRecurringTransactionNotes"
	FinancialService_PollAsyncTaskExecutionStatus_FullMethodName             = "/financial_service.v1.FinancialService/PollAsyncTaskExecutionStatus"
	FinancialService_RecordAskCopilotQuestion_FullMethodName                 = "/financial_service.v1.FinancialService/RecordAskCopilotQuestion"
	FinancialService_CheckIfQuotaExceeded_FullMethodName                     = "/financial_service.v1.FinancialService/CheckIfQuotaExceeded"
	FinancialService_TriggerSync_FullMethodName                              = "/financial_service.v1.FinancialService/TriggerSync"
	FinancialService_RefactorEmailAndAuth0UserIdExists_FullMethodName        = "/financial_service.v1.FinancialService/RefactorEmailAndAuth0UserIdExists"
)

// FinancialServiceClient is the client API for FinancialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinancialServiceClient interface {
	// PlaidInitiateTokenExchange enables the client to get a link_token to initialize a Link session for your end user.
	PlaidInitiateTokenExchange(ctx context.Context, in *PlaidInitiateTokenExchangeRequest, opts ...grpc.CallOption) (*PlaidInitiateTokenExchangeResponse, error)
	// PlaidInitiateTokenUpdate enables the cleint to initiate a plaid token update operation
	PlaidInitiateTokenUpdate(ctx context.Context, in *PlaidInitiateTokenUpdateRequest, opts ...grpc.CallOption) (*PlaidInitiateTokenUpdateResponse, error)
	// PlaidExchangeToken enables the client to exchange a plaid link token for an access token
	PlaidExchangeToken(ctx context.Context, in *PlaidExchangeTokenRequest, opts ...grpc.CallOption) (*PlaidExchangeTokenResponse, error)
	// CreateUserProfile performs an a creation operation of a user profile based on the provided parameters
	// This operation is implemented as a distributed transactions as this operation can span multiple services
	CreateUserProfile(ctx context.Context, in *CreateUserProfileRequest, opts ...grpc.CallOption) (*CreateUserProfileResponse, error)
	// GetUserProfile Queries and obtains a user profile based on the provided parameters
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// DeleteUserProfile performs a delete operation on a user profile based on the provided parameters
	DeleteUserProfile(ctx context.Context, in *DeleteUserProfileRequest, opts ...grpc.CallOption) (*DeleteUserProfileResponse, error)
	// UpdateUserProfile  performs an updates operation on a user profile based on the provided parameters
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	// CreateBankAccount creates a bank account for a given user profile
	CreateBankAccount(ctx context.Context, in *CreateBankAccountRequest, opts ...grpc.CallOption) (*CreateBankAccountResponse, error)
	// GetBankAccount gets a bank account for a given user
	GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...grpc.CallOption) (*GetBankAccountResponse, error)
	// UpdateBankAccount updates the bank account for a given user profile
	UpdateBankAccount(ctx context.Context, in *UpdateBankAccountRequest, opts ...grpc.CallOption) (*UpdateBankAccountResponse, error)
	// DeleteBankAccount deletes a bank account for a given user profile
	DeleteBankAccount(ctx context.Context, in *DeleteBankAccountRequest, opts ...grpc.CallOption) (*DeleteBankAccountResponse, error)
	// GetPocket get a pocket tied to a given users account
	GetPocket(ctx context.Context, in *GetPocketRequest, opts ...grpc.CallOption) (*GetPocketResponse, error)
	// GetSmartGoalsByPocketId gets a smart goal tied to a pocket
	GetSmartGoalsByPocketId(ctx context.Context, in *GetSmartGoalsByPocketIdRequest, opts ...grpc.CallOption) (*GetSmartGoalsByPocketIdResponse, error)
	// CreateSmartGoal creates a smart goal
	CreateSmartGoal(ctx context.Context, in *CreateSmartGoalRequest, opts ...grpc.CallOption) (*CreateSmartGoalResponse, error)
	// UpdateSmartGoal updates a smart goal
	UpdateSmartGoal(ctx context.Context, in *UpdateSmartGoalRequest, opts ...grpc.CallOption) (*UpdateSmartGoalResponse, error)
	// deletes a smart goal
	DeleteSmartGoal(ctx context.Context, in *DeleteSmartGoalRequest, opts ...grpc.CallOption) (*DeleteSmartGoalResponse, error)
	// creates a milestone
	CreateMilestone(ctx context.Context, in *CreateMilestoneRequest, opts ...grpc.CallOption) (*CreateMilestoneResponse, error)
	// deletes a milestone
	DeleteMilestone(ctx context.Context, in *DeleteMilestoneRequest, opts ...grpc.CallOption) (*DeleteMilestoneResponse, error)
	// updates a milestone
	UpdateMilestone(ctx context.Context, in *UpdateMilestoneRequest, opts ...grpc.CallOption) (*UpdateMilestoneResponse, error)
	// gets a milestone
	GetMilestone(ctx context.Context, in *GetMilestoneRequest, opts ...grpc.CallOption) (*GetMilestoneResponse, error)
	// gets milestones tied to a smart goal
	GetMilestonesBySmartGoalId(ctx context.Context, in *GetMilestonesBySmartGoalIdRequest, opts ...grpc.CallOption) (*GetMilestonesBySmartGoalIdResponse, error)
	// gets a forecast
	GetForecast(ctx context.Context, in *GetForecastRequest, opts ...grpc.CallOption) (*GetForecastResponse, error)
	// creates a budget
	CreateBudget(ctx context.Context, in *CreateBudgetRequest, opts ...grpc.CallOption) (*CreateBudgetResponse, error)
	// updates a budget
	UpdateBudget(ctx context.Context, in *UpdateBudgetRequest, opts ...grpc.CallOption) (*UpdateBudgetResponse, error)
	// deletes a budget
	DeleteBudget(ctx context.Context, in *DeleteBudgetRequest, opts ...grpc.CallOption) (*DeleteBudgetResponse, error)
	// gets a given budget for a given user
	GetBudget(ctx context.Context, in *GetBudgetRequest, opts ...grpc.CallOption) (*GetBudgetResponse, error)
	// Gets all budgets
	GetAllBudgets(ctx context.Context, in *GetAllBudgetsRequest, opts ...grpc.CallOption) (*GetAllBudgetsResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	ReadynessCheck(ctx context.Context, in *ReadynessCheckRequest, opts ...grpc.CallOption) (*ReadynessCheckResponse, error)
	// Gets an investment account
	GetInvestmentAcccount(ctx context.Context, in *GetInvestmentAcccountRequest, opts ...grpc.CallOption) (*GetInvestmentAcccountResponse, error)
	// Gets a mortgage account
	GetMortgageAccount(ctx context.Context, in *GetMortgageAccountRequest, opts ...grpc.CallOption) (*GetMortgageAccountResponse, error)
	// Get a liability account
	GetLiabilityAccount(ctx context.Context, in *GetLiabilityAccountRequest, opts ...grpc.CallOption) (*GetLiabilityAccountResponse, error)
	// Gets student loan account
	GetStudentLoanAccount(ctx context.Context, in *GetStudentLoanAccountRequest, opts ...grpc.CallOption) (*GetStudentLoanAccountResponse, error)
	// Creates a manual link
	CreateManualLink(ctx context.Context, in *CreateManualLinkRequest, opts ...grpc.CallOption) (*CreateManualLinkResponse, error)
	// Get a specific linked account
	GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error)
	// Gets all the links for a given user
	GetLinks(ctx context.Context, in *GetLinksRequest, opts ...grpc.CallOption) (*GetLinksResponse, error)
	// Deletes a linked account
	DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error)
	// This endpoint enables end users to get recurring transactions
	GetReCurringTransactions(ctx context.Context, in *GetReCurringTransactionsRequest, opts ...grpc.CallOption) (*GetReCurringTransactionsResponse, error)
	// This endpoint enables end users to get transactions in a paginated manner
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	// This endpoint enables end users to get transactions in a paginated manner
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
	// Transaction Aggregates By Various parameters
	GetTransactionAggregates(ctx context.Context, in *GetTransactionAggregatesRequest, opts ...grpc.CallOption) (*GetTransactionAggregatesResponse, error)
	// This endpoint enables end users to get the historical account balances for all accounts the user has
	GetUserAccountBalanceHistory(ctx context.Context, in *GetUserAccountBalanceHistoryRequest, opts ...grpc.CallOption) (*GetUserAccountBalanceHistoryResponse, error)
	// This endpoint enables end users to get the historical account balances for a given account the user has
	GetAccountBalanceHistory(ctx context.Context, in *GetAccountBalanceHistoryRequest, opts ...grpc.CallOption) (*GetAccountBalanceHistoryResponse, error)
	// enables end users to get their categorized monthly expenditures
	GetUserCategoryMonthlyExpenditure(ctx context.Context, in *GetUserCategoryMonthlyExpenditureRequest, opts ...grpc.CallOption) (*GetUserCategoryMonthlyExpenditureResponse, error)
	// returns all CategoryMonthlyIncome records for a specific user for a specific personal finance category
	GetUserCategoryMonthlyIncome(ctx context.Context, in *GetUserCategoryMonthlyIncomeRequest, opts ...grpc.CallOption) (*GetUserCategoryMonthlyIncomeResponse, error)
	// returns all CategoryMonthlyTransactionCount records for a specific user
	GetCategoryMonthlyTransactionCount(ctx context.Context, in *GetCategoryMonthlyTransactionCountRequest, opts ...grpc.CallOption) (*GetCategoryMonthlyTransactionCountResponse, error)
	// Get debt to income ratio
	GetDebtToIncomeRatio(ctx context.Context, in *GetDebtToIncomeRatioRequest, opts ...grpc.CallOption) (*GetDebtToIncomeRatioResponse, error)
	// Get expense metrics
	GetExpenseMetrics(ctx context.Context, in *GetExpenseMetricsRequest, opts ...grpc.CallOption) (*GetExpenseMetricsResponse, error)
	// Get financial profile
	GetFinancialProfile(ctx context.Context, in *GetFinancialProfileRequest, opts ...grpc.CallOption) (*GetFinancialProfileResponse, error)
	// Get income expense ratio
	GetIncomeExpenseRatio(ctx context.Context, in *GetIncomeExpenseRatioRequest, opts ...grpc.CallOption) (*GetIncomeExpenseRatioResponse, error)
	// Get income metrics
	GetIncomeMetrics(ctx context.Context, in *GetIncomeMetricsRequest, opts ...grpc.CallOption) (*GetIncomeMetricsResponse, error)
	// Get merchant monthly expenditures
	GetMerchantMonthlyExpenditure(ctx context.Context, in *GetMerchantMonthlyExpenditureRequest, opts ...grpc.CallOption) (*GetMerchantMonthlyExpenditureResponse, error)
	// Get monthly balance
	GetMonthlyBalance(ctx context.Context, in *GetMonthlyBalanceRequest, opts ...grpc.CallOption) (*GetMonthlyBalanceResponse, error)
	// Get monthly expenditures
	GetMonthlyExpenditure(ctx context.Context, in *GetMonthlyExpenditureRequest, opts ...grpc.CallOption) (*GetMonthlyExpenditureResponse, error)
	// Get monthly Income
	GetMonthlyIncome(ctx context.Context, in *GetMonthlyIncomeRequest, opts ...grpc.CallOption) (*GetMonthlyIncomeResponse, error)
	// Get monthly savings
	GetMonthlySavings(ctx context.Context, in *GetMonthlySavingsRequest, opts ...grpc.CallOption) (*GetMonthlySavingsResponse, error)
	// Get monthly total quantity by security and user
	GetMonthlyTotalQuantityBySecurityAndUser(ctx context.Context, in *GetMonthlyTotalQuantityBySecurityAndUserRequest, opts ...grpc.CallOption) (*GetMonthlyTotalQuantityBySecurityAndUserResponse, error)
	// Get monthly transaction
	GetMonthlyTransactionCount(ctx context.Context, in *GetMonthlyTransactionCountRequest, opts ...grpc.CallOption) (*GetMonthlyTransactionCountResponse, error)
	// Get monthly channel expenditure
	GetPaymentChannelMonthlyExpenditure(ctx context.Context, in *GetPaymentChannelMonthlyExpenditureRequest, opts ...grpc.CallOption) (*GetPaymentChannelMonthlyExpenditureResponse, error)
	// Get total investment security
	GetTotalInvestmentBySecurity(ctx context.Context, in *GetTotalInvestmentBySecurityRequest, opts ...grpc.CallOption) (*GetTotalInvestmentBySecurityResponse, error)
	// Get financial context
	GetMelodyFinancialContext(ctx context.Context, in *GetMelodyFinancialContextRequest, opts ...grpc.CallOption) (*GetMelodyFinancialContextResponse, error)
	// Gets transactions for a given bank account
	GetTransactionsForBankAccount(ctx context.Context, in *GetTransactionsForBankAccountRequest, opts ...grpc.CallOption) (*GetTransactionsForBankAccountResponse, error)
	// Gets the historical account balance of a given accout
	GetHistoricalAccountBalance(ctx context.Context, in *GetHistoricalAccountBalanceRequest, opts ...grpc.CallOption) (*GetHistoricalAccountBalanceResponse, error)
	// Adds default pocket to a bank account
	AddDefaultPocketsToBankAccount(ctx context.Context, in *AddDefaultPocketsToBankAccountRequest, opts ...grpc.CallOption) (*AddDefaultPocketsToBankAccountResponse, error)
	// Updates a pocket
	UpdatePocket(ctx context.Context, in *UpdatePocketRequest, opts ...grpc.CallOption) (*UpdatePocketResponse, error)
	// Deletes a pocket
	DeletePocket(ctx context.Context, in *DeletePocketRequest, opts ...grpc.CallOption) (*DeletePocketResponse, error)
	// Time Based Transaction Queries
	GetTransactionsBetweenTimeRanges(ctx context.Context, in *GetTransactionsBetweenTimeRangesRequest, opts ...grpc.CallOption) (*GetTransactionsBetweenTimeRangesResponse, error)
	// get transactions for the past week
	GetTransactionsForPastWeek(ctx context.Context, in *GetTransactionsForPastWeekRequest, opts ...grpc.CallOption) (*GetTransactionsForPastWeekResponse, error)
	// Get transactions for the past month
	GetTransactionsForPastMonth(ctx context.Context, in *GetTransactionsForPastMonthRequest, opts ...grpc.CallOption) (*GetTransactionsForPastMonthResponse, error)
	// Smart goal and note CRUD api
	AddNoteToSmartGoal(ctx context.Context, in *AddNoteToSmartGoalRequest, opts ...grpc.CallOption) (*AddNoteToSmartGoalResponse, error)
	// update the smart note tied to a goal
	UpdateNoteToSmartGoal(ctx context.Context, in *UpdateNoteToSmartGoalRequest, opts ...grpc.CallOption) (*UpdateNoteToSmartGoalResponse, error)
	// // delete a note from a smart goal
	DeleteNoteFromSmartGoal(ctx context.Context, in *DeleteNoteFromSmartGoalRequest, opts ...grpc.CallOption) (*DeleteNoteFromSmartGoalResponse, error)
	// get notes from a smart goal
	GetNotesFromSmartGoal(ctx context.Context, in *GetNotesFromSmartGoalRequest, opts ...grpc.CallOption) (*GetNotesFromSmartGoalResponse, error)
	// get a note from a smart goal
	GetNoteFromSmartGoal(ctx context.Context, in *GetNoteFromSmartGoalRequest, opts ...grpc.CallOption) (*GetNoteFromSmartGoalResponse, error)
	// ListTransactions lists a set of transactions against an account of interest
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	ListTransactionsAcrossAllAccounts(ctx context.Context, in *ListTransactionsAcrossAllAccountsRequest, opts ...grpc.CallOption) (*ListTransactionsAcrossAllAccountsResponse, error)
	// GetTransaction lists a set of transactions against an account of interest
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// updates a transaction
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error)
	// performs a bulk update of transactions
	BulkUpdateTransaction(ctx context.Context, in *BulkUpdateTransactionRequest, opts ...grpc.CallOption) (*BulkUpdateTransactionResponse, error)
	// deletes a transaction by id
	DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...grpc.CallOption) (*DeleteTransactionResponse, error)
	// adds a note to a transaction
	AddNoteToTransaction(ctx context.Context, in *AddNoteToTransactionRequest, opts ...grpc.CallOption) (*AddNoteToTransactionResponse, error)
	// updates a note on a transaction
	UpdateNoteToTransaction(ctx context.Context, in *UpdateNoteToTransactionRequest, opts ...grpc.CallOption) (*UpdateNoteToTransactionResponse, error)
	// deletes a note from a transaction
	DeleteNoteFromTransaction(ctx context.Context, in *DeleteNoteFromTransactionRequest, opts ...grpc.CallOption) (*DeleteNoteFromTransactionResponse, error)
	// list transaction notes
	ListTransactionNotes(ctx context.Context, in *ListTransactionNotesRequest, opts ...grpc.CallOption) (*ListTransactionNotesResponse, error)
	// gets a note from a transaction
	GetNoteFromTransaction(ctx context.Context, in *GetNoteFromTransactionRequest, opts ...grpc.CallOption) (*GetNoteFromTransactionResponse, error)
	// splits a transaction
	SplitTransaction(ctx context.Context, in *SplitTransactionRequest, opts ...grpc.CallOption) (*SplitTransactionResponse, error)
	// unsplits a transaction
	UnSplitTransactions(ctx context.Context, in *UnSplitTransactionsRequest, opts ...grpc.CallOption) (*UnSplitTransactionsResponse, error)
	// get all the split transactions for a given transaction
	GetSplitTransaction(ctx context.Context, in *GetSplitTransactionRequest, opts ...grpc.CallOption) (*GetSplitTransactionResponse, error)
	// searchs for a set of transactions that fit a given filter
	SearchTransactions(ctx context.Context, in *SearchTransactionsRequest, opts ...grpc.CallOption) (*SearchTransactionsResponse, error)
	// ListRecurringTransactions lists a set of transactions against an account of interest
	ListRecurringTransactions(ctx context.Context, in *ListRecurringTransactionsRequest, opts ...grpc.CallOption) (*ListRecurringTransactionsResponse, error)
	// GetRecurringTransaction lists a set of transactions against an account of interest
	GetRecurringTransaction(ctx context.Context, in *GetRecurringTransactionRequest, opts ...grpc.CallOption) (*GetRecurringTransactionResponse, error)
	// updates a transaction
	UpdateRecurringTransaction(ctx context.Context, in *UpdateRecurringTransactionRequest, opts ...grpc.CallOption) (*UpdateRecurringTransactionResponse, error)
	// performs a bulk update of transactions
	BulkUpdateRecurringTransaction(ctx context.Context, in *BulkUpdateRecurringTransactionRequest, opts ...grpc.CallOption) (*BulkUpdateRecurringTransactionResponse, error)
	// deletes a transaction by id
	DeleteRecurringTransaction(ctx context.Context, in *DeleteRecurringTransactionRequest, opts ...grpc.CallOption) (*DeleteRecurringTransactionResponse, error)
	// adds a note to a transaction
	AddNoteToRecurringTransaction(ctx context.Context, in *AddNoteToRecurringTransactionRequest, opts ...grpc.CallOption) (*AddNoteToRecurringTransactionResponse, error)
	// updates a note on a transaction
	UpdateNoteToRecurringTransaction(ctx context.Context, in *UpdateNoteToRecurringTransactionRequest, opts ...grpc.CallOption) (*UpdateNoteToRecurringTransactionResponse, error)
	// deletes a note from a transaction
	DeleteNoteFromRecurringTransaction(ctx context.Context, in *DeleteNoteFromRecurringTransactionRequest, opts ...grpc.CallOption) (*DeleteNoteFromRecurringTransactionResponse, error)
	// list transaction notes
	ListRecurringTransactionNotes(ctx context.Context, in *ListRecurringTransactionNotesRequest, opts ...grpc.CallOption) (*ListRecurringTransactionNotesResponse, error)
	PollAsyncTaskExecutionStatus(ctx context.Context, in *PollAsyncTaskExecutionStatusRequest, opts ...grpc.CallOption) (*PollAsyncTaskExecutionStatusResponse, error)
	// This checks if a user can ask the copilot a question
	RecordAskCopilotQuestion(ctx context.Context, in *RecordAskCopilotQuestionRequest, opts ...grpc.CallOption) (*RecordAskCopilotQuestionResponse, error)
	// This checks if a user can ask the copilot a question
	CheckIfQuotaExceeded(ctx context.Context, in *CheckIfQuotaExceededRequest, opts ...grpc.CallOption) (*CheckIfQuotaExceededResponse, error)
	TriggerSync(ctx context.Context, in *TriggerSyncRequest, opts ...grpc.CallOption) (*TriggerSyncResponse, error)
	RefactorEmailAndAuth0UserIdExists(ctx context.Context, in *RefactorEmailAndAuth0UserIdExistsRequest, opts ...grpc.CallOption) (*RefactorEmailAndAuth0UserIdExistsResponse, error)
}

type financialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancialServiceClient(cc grpc.ClientConnInterface) FinancialServiceClient {
	return &financialServiceClient{cc}
}

func (c *financialServiceClient) PlaidInitiateTokenExchange(ctx context.Context, in *PlaidInitiateTokenExchangeRequest, opts ...grpc.CallOption) (*PlaidInitiateTokenExchangeResponse, error) {
	out := new(PlaidInitiateTokenExchangeResponse)
	err := c.cc.Invoke(ctx, FinancialService_PlaidInitiateTokenExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) PlaidInitiateTokenUpdate(ctx context.Context, in *PlaidInitiateTokenUpdateRequest, opts ...grpc.CallOption) (*PlaidInitiateTokenUpdateResponse, error) {
	out := new(PlaidInitiateTokenUpdateResponse)
	err := c.cc.Invoke(ctx, FinancialService_PlaidInitiateTokenUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) PlaidExchangeToken(ctx context.Context, in *PlaidExchangeTokenRequest, opts ...grpc.CallOption) (*PlaidExchangeTokenResponse, error) {
	out := new(PlaidExchangeTokenResponse)
	err := c.cc.Invoke(ctx, FinancialService_PlaidExchangeToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateUserProfile(ctx context.Context, in *CreateUserProfileRequest, opts ...grpc.CallOption) (*CreateUserProfileResponse, error) {
	out := new(CreateUserProfileResponse)
	err := c.cc.Invoke(ctx, FinancialService_CreateUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteUserProfile(ctx context.Context, in *DeleteUserProfileRequest, opts ...grpc.CallOption) (*DeleteUserProfileResponse, error) {
	out := new(DeleteUserProfileResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateBankAccount(ctx context.Context, in *CreateBankAccountRequest, opts ...grpc.CallOption) (*CreateBankAccountResponse, error) {
	out := new(CreateBankAccountResponse)
	err := c.cc.Invoke(ctx, FinancialService_CreateBankAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...grpc.CallOption) (*GetBankAccountResponse, error) {
	out := new(GetBankAccountResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetBankAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateBankAccount(ctx context.Context, in *UpdateBankAccountRequest, opts ...grpc.CallOption) (*UpdateBankAccountResponse, error) {
	out := new(UpdateBankAccountResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateBankAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteBankAccount(ctx context.Context, in *DeleteBankAccountRequest, opts ...grpc.CallOption) (*DeleteBankAccountResponse, error) {
	out := new(DeleteBankAccountResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteBankAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetPocket(ctx context.Context, in *GetPocketRequest, opts ...grpc.CallOption) (*GetPocketResponse, error) {
	out := new(GetPocketResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetPocket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetSmartGoalsByPocketId(ctx context.Context, in *GetSmartGoalsByPocketIdRequest, opts ...grpc.CallOption) (*GetSmartGoalsByPocketIdResponse, error) {
	out := new(GetSmartGoalsByPocketIdResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetSmartGoalsByPocketId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateSmartGoal(ctx context.Context, in *CreateSmartGoalRequest, opts ...grpc.CallOption) (*CreateSmartGoalResponse, error) {
	out := new(CreateSmartGoalResponse)
	err := c.cc.Invoke(ctx, FinancialService_CreateSmartGoal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateSmartGoal(ctx context.Context, in *UpdateSmartGoalRequest, opts ...grpc.CallOption) (*UpdateSmartGoalResponse, error) {
	out := new(UpdateSmartGoalResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateSmartGoal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteSmartGoal(ctx context.Context, in *DeleteSmartGoalRequest, opts ...grpc.CallOption) (*DeleteSmartGoalResponse, error) {
	out := new(DeleteSmartGoalResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteSmartGoal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateMilestone(ctx context.Context, in *CreateMilestoneRequest, opts ...grpc.CallOption) (*CreateMilestoneResponse, error) {
	out := new(CreateMilestoneResponse)
	err := c.cc.Invoke(ctx, FinancialService_CreateMilestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteMilestone(ctx context.Context, in *DeleteMilestoneRequest, opts ...grpc.CallOption) (*DeleteMilestoneResponse, error) {
	out := new(DeleteMilestoneResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteMilestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateMilestone(ctx context.Context, in *UpdateMilestoneRequest, opts ...grpc.CallOption) (*UpdateMilestoneResponse, error) {
	out := new(UpdateMilestoneResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateMilestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMilestone(ctx context.Context, in *GetMilestoneRequest, opts ...grpc.CallOption) (*GetMilestoneResponse, error) {
	out := new(GetMilestoneResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMilestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMilestonesBySmartGoalId(ctx context.Context, in *GetMilestonesBySmartGoalIdRequest, opts ...grpc.CallOption) (*GetMilestonesBySmartGoalIdResponse, error) {
	out := new(GetMilestonesBySmartGoalIdResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMilestonesBySmartGoalId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetForecast(ctx context.Context, in *GetForecastRequest, opts ...grpc.CallOption) (*GetForecastResponse, error) {
	out := new(GetForecastResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetForecast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateBudget(ctx context.Context, in *CreateBudgetRequest, opts ...grpc.CallOption) (*CreateBudgetResponse, error) {
	out := new(CreateBudgetResponse)
	err := c.cc.Invoke(ctx, FinancialService_CreateBudget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateBudget(ctx context.Context, in *UpdateBudgetRequest, opts ...grpc.CallOption) (*UpdateBudgetResponse, error) {
	out := new(UpdateBudgetResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateBudget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteBudget(ctx context.Context, in *DeleteBudgetRequest, opts ...grpc.CallOption) (*DeleteBudgetResponse, error) {
	out := new(DeleteBudgetResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteBudget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetBudget(ctx context.Context, in *GetBudgetRequest, opts ...grpc.CallOption) (*GetBudgetResponse, error) {
	out := new(GetBudgetResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetBudget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetAllBudgets(ctx context.Context, in *GetAllBudgetsRequest, opts ...grpc.CallOption) (*GetAllBudgetsResponse, error) {
	out := new(GetAllBudgetsResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetAllBudgets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, FinancialService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ReadynessCheck(ctx context.Context, in *ReadynessCheckRequest, opts ...grpc.CallOption) (*ReadynessCheckResponse, error) {
	out := new(ReadynessCheckResponse)
	err := c.cc.Invoke(ctx, FinancialService_ReadynessCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetInvestmentAcccount(ctx context.Context, in *GetInvestmentAcccountRequest, opts ...grpc.CallOption) (*GetInvestmentAcccountResponse, error) {
	out := new(GetInvestmentAcccountResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetInvestmentAcccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMortgageAccount(ctx context.Context, in *GetMortgageAccountRequest, opts ...grpc.CallOption) (*GetMortgageAccountResponse, error) {
	out := new(GetMortgageAccountResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMortgageAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetLiabilityAccount(ctx context.Context, in *GetLiabilityAccountRequest, opts ...grpc.CallOption) (*GetLiabilityAccountResponse, error) {
	out := new(GetLiabilityAccountResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetLiabilityAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetStudentLoanAccount(ctx context.Context, in *GetStudentLoanAccountRequest, opts ...grpc.CallOption) (*GetStudentLoanAccountResponse, error) {
	out := new(GetStudentLoanAccountResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetStudentLoanAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateManualLink(ctx context.Context, in *CreateManualLinkRequest, opts ...grpc.CallOption) (*CreateManualLinkResponse, error) {
	out := new(CreateManualLinkResponse)
	err := c.cc.Invoke(ctx, FinancialService_CreateManualLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error) {
	out := new(GetLinkResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetLinks(ctx context.Context, in *GetLinksRequest, opts ...grpc.CallOption) (*GetLinksResponse, error) {
	out := new(GetLinksResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error) {
	out := new(DeleteLinkResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetReCurringTransactions(ctx context.Context, in *GetReCurringTransactionsRequest, opts ...grpc.CallOption) (*GetReCurringTransactionsResponse, error) {
	out := new(GetReCurringTransactionsResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetReCurringTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	out := new(CreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, FinancialService_CreateSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetTransactionAggregates(ctx context.Context, in *GetTransactionAggregatesRequest, opts ...grpc.CallOption) (*GetTransactionAggregatesResponse, error) {
	out := new(GetTransactionAggregatesResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetTransactionAggregates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetUserAccountBalanceHistory(ctx context.Context, in *GetUserAccountBalanceHistoryRequest, opts ...grpc.CallOption) (*GetUserAccountBalanceHistoryResponse, error) {
	out := new(GetUserAccountBalanceHistoryResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetUserAccountBalanceHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetAccountBalanceHistory(ctx context.Context, in *GetAccountBalanceHistoryRequest, opts ...grpc.CallOption) (*GetAccountBalanceHistoryResponse, error) {
	out := new(GetAccountBalanceHistoryResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetAccountBalanceHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetUserCategoryMonthlyExpenditure(ctx context.Context, in *GetUserCategoryMonthlyExpenditureRequest, opts ...grpc.CallOption) (*GetUserCategoryMonthlyExpenditureResponse, error) {
	out := new(GetUserCategoryMonthlyExpenditureResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetUserCategoryMonthlyExpenditure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetUserCategoryMonthlyIncome(ctx context.Context, in *GetUserCategoryMonthlyIncomeRequest, opts ...grpc.CallOption) (*GetUserCategoryMonthlyIncomeResponse, error) {
	out := new(GetUserCategoryMonthlyIncomeResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetUserCategoryMonthlyIncome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetCategoryMonthlyTransactionCount(ctx context.Context, in *GetCategoryMonthlyTransactionCountRequest, opts ...grpc.CallOption) (*GetCategoryMonthlyTransactionCountResponse, error) {
	out := new(GetCategoryMonthlyTransactionCountResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetCategoryMonthlyTransactionCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetDebtToIncomeRatio(ctx context.Context, in *GetDebtToIncomeRatioRequest, opts ...grpc.CallOption) (*GetDebtToIncomeRatioResponse, error) {
	out := new(GetDebtToIncomeRatioResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetDebtToIncomeRatio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetExpenseMetrics(ctx context.Context, in *GetExpenseMetricsRequest, opts ...grpc.CallOption) (*GetExpenseMetricsResponse, error) {
	out := new(GetExpenseMetricsResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetExpenseMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetFinancialProfile(ctx context.Context, in *GetFinancialProfileRequest, opts ...grpc.CallOption) (*GetFinancialProfileResponse, error) {
	out := new(GetFinancialProfileResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetFinancialProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetIncomeExpenseRatio(ctx context.Context, in *GetIncomeExpenseRatioRequest, opts ...grpc.CallOption) (*GetIncomeExpenseRatioResponse, error) {
	out := new(GetIncomeExpenseRatioResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetIncomeExpenseRatio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetIncomeMetrics(ctx context.Context, in *GetIncomeMetricsRequest, opts ...grpc.CallOption) (*GetIncomeMetricsResponse, error) {
	out := new(GetIncomeMetricsResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetIncomeMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMerchantMonthlyExpenditure(ctx context.Context, in *GetMerchantMonthlyExpenditureRequest, opts ...grpc.CallOption) (*GetMerchantMonthlyExpenditureResponse, error) {
	out := new(GetMerchantMonthlyExpenditureResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMerchantMonthlyExpenditure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMonthlyBalance(ctx context.Context, in *GetMonthlyBalanceRequest, opts ...grpc.CallOption) (*GetMonthlyBalanceResponse, error) {
	out := new(GetMonthlyBalanceResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMonthlyBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMonthlyExpenditure(ctx context.Context, in *GetMonthlyExpenditureRequest, opts ...grpc.CallOption) (*GetMonthlyExpenditureResponse, error) {
	out := new(GetMonthlyExpenditureResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMonthlyExpenditure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMonthlyIncome(ctx context.Context, in *GetMonthlyIncomeRequest, opts ...grpc.CallOption) (*GetMonthlyIncomeResponse, error) {
	out := new(GetMonthlyIncomeResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMonthlyIncome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMonthlySavings(ctx context.Context, in *GetMonthlySavingsRequest, opts ...grpc.CallOption) (*GetMonthlySavingsResponse, error) {
	out := new(GetMonthlySavingsResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMonthlySavings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMonthlyTotalQuantityBySecurityAndUser(ctx context.Context, in *GetMonthlyTotalQuantityBySecurityAndUserRequest, opts ...grpc.CallOption) (*GetMonthlyTotalQuantityBySecurityAndUserResponse, error) {
	out := new(GetMonthlyTotalQuantityBySecurityAndUserResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMonthlyTotalQuantityBySecurityAndUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMonthlyTransactionCount(ctx context.Context, in *GetMonthlyTransactionCountRequest, opts ...grpc.CallOption) (*GetMonthlyTransactionCountResponse, error) {
	out := new(GetMonthlyTransactionCountResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMonthlyTransactionCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetPaymentChannelMonthlyExpenditure(ctx context.Context, in *GetPaymentChannelMonthlyExpenditureRequest, opts ...grpc.CallOption) (*GetPaymentChannelMonthlyExpenditureResponse, error) {
	out := new(GetPaymentChannelMonthlyExpenditureResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetPaymentChannelMonthlyExpenditure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetTotalInvestmentBySecurity(ctx context.Context, in *GetTotalInvestmentBySecurityRequest, opts ...grpc.CallOption) (*GetTotalInvestmentBySecurityResponse, error) {
	out := new(GetTotalInvestmentBySecurityResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetTotalInvestmentBySecurity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMelodyFinancialContext(ctx context.Context, in *GetMelodyFinancialContextRequest, opts ...grpc.CallOption) (*GetMelodyFinancialContextResponse, error) {
	out := new(GetMelodyFinancialContextResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetMelodyFinancialContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetTransactionsForBankAccount(ctx context.Context, in *GetTransactionsForBankAccountRequest, opts ...grpc.CallOption) (*GetTransactionsForBankAccountResponse, error) {
	out := new(GetTransactionsForBankAccountResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetTransactionsForBankAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetHistoricalAccountBalance(ctx context.Context, in *GetHistoricalAccountBalanceRequest, opts ...grpc.CallOption) (*GetHistoricalAccountBalanceResponse, error) {
	out := new(GetHistoricalAccountBalanceResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetHistoricalAccountBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) AddDefaultPocketsToBankAccount(ctx context.Context, in *AddDefaultPocketsToBankAccountRequest, opts ...grpc.CallOption) (*AddDefaultPocketsToBankAccountResponse, error) {
	out := new(AddDefaultPocketsToBankAccountResponse)
	err := c.cc.Invoke(ctx, FinancialService_AddDefaultPocketsToBankAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdatePocket(ctx context.Context, in *UpdatePocketRequest, opts ...grpc.CallOption) (*UpdatePocketResponse, error) {
	out := new(UpdatePocketResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdatePocket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeletePocket(ctx context.Context, in *DeletePocketRequest, opts ...grpc.CallOption) (*DeletePocketResponse, error) {
	out := new(DeletePocketResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeletePocket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetTransactionsBetweenTimeRanges(ctx context.Context, in *GetTransactionsBetweenTimeRangesRequest, opts ...grpc.CallOption) (*GetTransactionsBetweenTimeRangesResponse, error) {
	out := new(GetTransactionsBetweenTimeRangesResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetTransactionsBetweenTimeRanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetTransactionsForPastWeek(ctx context.Context, in *GetTransactionsForPastWeekRequest, opts ...grpc.CallOption) (*GetTransactionsForPastWeekResponse, error) {
	out := new(GetTransactionsForPastWeekResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetTransactionsForPastWeek_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetTransactionsForPastMonth(ctx context.Context, in *GetTransactionsForPastMonthRequest, opts ...grpc.CallOption) (*GetTransactionsForPastMonthResponse, error) {
	out := new(GetTransactionsForPastMonthResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetTransactionsForPastMonth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) AddNoteToSmartGoal(ctx context.Context, in *AddNoteToSmartGoalRequest, opts ...grpc.CallOption) (*AddNoteToSmartGoalResponse, error) {
	out := new(AddNoteToSmartGoalResponse)
	err := c.cc.Invoke(ctx, FinancialService_AddNoteToSmartGoal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateNoteToSmartGoal(ctx context.Context, in *UpdateNoteToSmartGoalRequest, opts ...grpc.CallOption) (*UpdateNoteToSmartGoalResponse, error) {
	out := new(UpdateNoteToSmartGoalResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateNoteToSmartGoal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteNoteFromSmartGoal(ctx context.Context, in *DeleteNoteFromSmartGoalRequest, opts ...grpc.CallOption) (*DeleteNoteFromSmartGoalResponse, error) {
	out := new(DeleteNoteFromSmartGoalResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteNoteFromSmartGoal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetNotesFromSmartGoal(ctx context.Context, in *GetNotesFromSmartGoalRequest, opts ...grpc.CallOption) (*GetNotesFromSmartGoalResponse, error) {
	out := new(GetNotesFromSmartGoalResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetNotesFromSmartGoal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetNoteFromSmartGoal(ctx context.Context, in *GetNoteFromSmartGoalRequest, opts ...grpc.CallOption) (*GetNoteFromSmartGoalResponse, error) {
	out := new(GetNoteFromSmartGoalResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetNoteFromSmartGoal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, FinancialService_ListTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ListTransactionsAcrossAllAccounts(ctx context.Context, in *ListTransactionsAcrossAllAccountsRequest, opts ...grpc.CallOption) (*ListTransactionsAcrossAllAccountsResponse, error) {
	out := new(ListTransactionsAcrossAllAccountsResponse)
	err := c.cc.Invoke(ctx, FinancialService_ListTransactionsAcrossAllAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error) {
	out := new(UpdateTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) BulkUpdateTransaction(ctx context.Context, in *BulkUpdateTransactionRequest, opts ...grpc.CallOption) (*BulkUpdateTransactionResponse, error) {
	out := new(BulkUpdateTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_BulkUpdateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...grpc.CallOption) (*DeleteTransactionResponse, error) {
	out := new(DeleteTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) AddNoteToTransaction(ctx context.Context, in *AddNoteToTransactionRequest, opts ...grpc.CallOption) (*AddNoteToTransactionResponse, error) {
	out := new(AddNoteToTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_AddNoteToTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateNoteToTransaction(ctx context.Context, in *UpdateNoteToTransactionRequest, opts ...grpc.CallOption) (*UpdateNoteToTransactionResponse, error) {
	out := new(UpdateNoteToTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateNoteToTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteNoteFromTransaction(ctx context.Context, in *DeleteNoteFromTransactionRequest, opts ...grpc.CallOption) (*DeleteNoteFromTransactionResponse, error) {
	out := new(DeleteNoteFromTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteNoteFromTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ListTransactionNotes(ctx context.Context, in *ListTransactionNotesRequest, opts ...grpc.CallOption) (*ListTransactionNotesResponse, error) {
	out := new(ListTransactionNotesResponse)
	err := c.cc.Invoke(ctx, FinancialService_ListTransactionNotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetNoteFromTransaction(ctx context.Context, in *GetNoteFromTransactionRequest, opts ...grpc.CallOption) (*GetNoteFromTransactionResponse, error) {
	out := new(GetNoteFromTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetNoteFromTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) SplitTransaction(ctx context.Context, in *SplitTransactionRequest, opts ...grpc.CallOption) (*SplitTransactionResponse, error) {
	out := new(SplitTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_SplitTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UnSplitTransactions(ctx context.Context, in *UnSplitTransactionsRequest, opts ...grpc.CallOption) (*UnSplitTransactionsResponse, error) {
	out := new(UnSplitTransactionsResponse)
	err := c.cc.Invoke(ctx, FinancialService_UnSplitTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetSplitTransaction(ctx context.Context, in *GetSplitTransactionRequest, opts ...grpc.CallOption) (*GetSplitTransactionResponse, error) {
	out := new(GetSplitTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetSplitTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) SearchTransactions(ctx context.Context, in *SearchTransactionsRequest, opts ...grpc.CallOption) (*SearchTransactionsResponse, error) {
	out := new(SearchTransactionsResponse)
	err := c.cc.Invoke(ctx, FinancialService_SearchTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ListRecurringTransactions(ctx context.Context, in *ListRecurringTransactionsRequest, opts ...grpc.CallOption) (*ListRecurringTransactionsResponse, error) {
	out := new(ListRecurringTransactionsResponse)
	err := c.cc.Invoke(ctx, FinancialService_ListRecurringTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetRecurringTransaction(ctx context.Context, in *GetRecurringTransactionRequest, opts ...grpc.CallOption) (*GetRecurringTransactionResponse, error) {
	out := new(GetRecurringTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetRecurringTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateRecurringTransaction(ctx context.Context, in *UpdateRecurringTransactionRequest, opts ...grpc.CallOption) (*UpdateRecurringTransactionResponse, error) {
	out := new(UpdateRecurringTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateRecurringTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) BulkUpdateRecurringTransaction(ctx context.Context, in *BulkUpdateRecurringTransactionRequest, opts ...grpc.CallOption) (*BulkUpdateRecurringTransactionResponse, error) {
	out := new(BulkUpdateRecurringTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_BulkUpdateRecurringTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteRecurringTransaction(ctx context.Context, in *DeleteRecurringTransactionRequest, opts ...grpc.CallOption) (*DeleteRecurringTransactionResponse, error) {
	out := new(DeleteRecurringTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteRecurringTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) AddNoteToRecurringTransaction(ctx context.Context, in *AddNoteToRecurringTransactionRequest, opts ...grpc.CallOption) (*AddNoteToRecurringTransactionResponse, error) {
	out := new(AddNoteToRecurringTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_AddNoteToRecurringTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateNoteToRecurringTransaction(ctx context.Context, in *UpdateNoteToRecurringTransactionRequest, opts ...grpc.CallOption) (*UpdateNoteToRecurringTransactionResponse, error) {
	out := new(UpdateNoteToRecurringTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateNoteToRecurringTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteNoteFromRecurringTransaction(ctx context.Context, in *DeleteNoteFromRecurringTransactionRequest, opts ...grpc.CallOption) (*DeleteNoteFromRecurringTransactionResponse, error) {
	out := new(DeleteNoteFromRecurringTransactionResponse)
	err := c.cc.Invoke(ctx, FinancialService_DeleteNoteFromRecurringTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ListRecurringTransactionNotes(ctx context.Context, in *ListRecurringTransactionNotesRequest, opts ...grpc.CallOption) (*ListRecurringTransactionNotesResponse, error) {
	out := new(ListRecurringTransactionNotesResponse)
	err := c.cc.Invoke(ctx, FinancialService_ListRecurringTransactionNotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) PollAsyncTaskExecutionStatus(ctx context.Context, in *PollAsyncTaskExecutionStatusRequest, opts ...grpc.CallOption) (*PollAsyncTaskExecutionStatusResponse, error) {
	out := new(PollAsyncTaskExecutionStatusResponse)
	err := c.cc.Invoke(ctx, FinancialService_PollAsyncTaskExecutionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) RecordAskCopilotQuestion(ctx context.Context, in *RecordAskCopilotQuestionRequest, opts ...grpc.CallOption) (*RecordAskCopilotQuestionResponse, error) {
	out := new(RecordAskCopilotQuestionResponse)
	err := c.cc.Invoke(ctx, FinancialService_RecordAskCopilotQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CheckIfQuotaExceeded(ctx context.Context, in *CheckIfQuotaExceededRequest, opts ...grpc.CallOption) (*CheckIfQuotaExceededResponse, error) {
	out := new(CheckIfQuotaExceededResponse)
	err := c.cc.Invoke(ctx, FinancialService_CheckIfQuotaExceeded_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) TriggerSync(ctx context.Context, in *TriggerSyncRequest, opts ...grpc.CallOption) (*TriggerSyncResponse, error) {
	out := new(TriggerSyncResponse)
	err := c.cc.Invoke(ctx, FinancialService_TriggerSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) RefactorEmailAndAuth0UserIdExists(ctx context.Context, in *RefactorEmailAndAuth0UserIdExistsRequest, opts ...grpc.CallOption) (*RefactorEmailAndAuth0UserIdExistsResponse, error) {
	out := new(RefactorEmailAndAuth0UserIdExistsResponse)
	err := c.cc.Invoke(ctx, FinancialService_RefactorEmailAndAuth0UserIdExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancialServiceServer is the server API for FinancialService service.
// All implementations must embed UnimplementedFinancialServiceServer
// for forward compatibility
type FinancialServiceServer interface {
	// PlaidInitiateTokenExchange enables the client to get a link_token to initialize a Link session for your end user.
	PlaidInitiateTokenExchange(context.Context, *PlaidInitiateTokenExchangeRequest) (*PlaidInitiateTokenExchangeResponse, error)
	// PlaidInitiateTokenUpdate enables the cleint to initiate a plaid token update operation
	PlaidInitiateTokenUpdate(context.Context, *PlaidInitiateTokenUpdateRequest) (*PlaidInitiateTokenUpdateResponse, error)
	// PlaidExchangeToken enables the client to exchange a plaid link token for an access token
	PlaidExchangeToken(context.Context, *PlaidExchangeTokenRequest) (*PlaidExchangeTokenResponse, error)
	// CreateUserProfile performs an a creation operation of a user profile based on the provided parameters
	// This operation is implemented as a distributed transactions as this operation can span multiple services
	CreateUserProfile(context.Context, *CreateUserProfileRequest) (*CreateUserProfileResponse, error)
	// GetUserProfile Queries and obtains a user profile based on the provided parameters
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// DeleteUserProfile performs a delete operation on a user profile based on the provided parameters
	DeleteUserProfile(context.Context, *DeleteUserProfileRequest) (*DeleteUserProfileResponse, error)
	// UpdateUserProfile  performs an updates operation on a user profile based on the provided parameters
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	// CreateBankAccount creates a bank account for a given user profile
	CreateBankAccount(context.Context, *CreateBankAccountRequest) (*CreateBankAccountResponse, error)
	// GetBankAccount gets a bank account for a given user
	GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error)
	// UpdateBankAccount updates the bank account for a given user profile
	UpdateBankAccount(context.Context, *UpdateBankAccountRequest) (*UpdateBankAccountResponse, error)
	// DeleteBankAccount deletes a bank account for a given user profile
	DeleteBankAccount(context.Context, *DeleteBankAccountRequest) (*DeleteBankAccountResponse, error)
	// GetPocket get a pocket tied to a given users account
	GetPocket(context.Context, *GetPocketRequest) (*GetPocketResponse, error)
	// GetSmartGoalsByPocketId gets a smart goal tied to a pocket
	GetSmartGoalsByPocketId(context.Context, *GetSmartGoalsByPocketIdRequest) (*GetSmartGoalsByPocketIdResponse, error)
	// CreateSmartGoal creates a smart goal
	CreateSmartGoal(context.Context, *CreateSmartGoalRequest) (*CreateSmartGoalResponse, error)
	// UpdateSmartGoal updates a smart goal
	UpdateSmartGoal(context.Context, *UpdateSmartGoalRequest) (*UpdateSmartGoalResponse, error)
	// deletes a smart goal
	DeleteSmartGoal(context.Context, *DeleteSmartGoalRequest) (*DeleteSmartGoalResponse, error)
	// creates a milestone
	CreateMilestone(context.Context, *CreateMilestoneRequest) (*CreateMilestoneResponse, error)
	// deletes a milestone
	DeleteMilestone(context.Context, *DeleteMilestoneRequest) (*DeleteMilestoneResponse, error)
	// updates a milestone
	UpdateMilestone(context.Context, *UpdateMilestoneRequest) (*UpdateMilestoneResponse, error)
	// gets a milestone
	GetMilestone(context.Context, *GetMilestoneRequest) (*GetMilestoneResponse, error)
	// gets milestones tied to a smart goal
	GetMilestonesBySmartGoalId(context.Context, *GetMilestonesBySmartGoalIdRequest) (*GetMilestonesBySmartGoalIdResponse, error)
	// gets a forecast
	GetForecast(context.Context, *GetForecastRequest) (*GetForecastResponse, error)
	// creates a budget
	CreateBudget(context.Context, *CreateBudgetRequest) (*CreateBudgetResponse, error)
	// updates a budget
	UpdateBudget(context.Context, *UpdateBudgetRequest) (*UpdateBudgetResponse, error)
	// deletes a budget
	DeleteBudget(context.Context, *DeleteBudgetRequest) (*DeleteBudgetResponse, error)
	// gets a given budget for a given user
	GetBudget(context.Context, *GetBudgetRequest) (*GetBudgetResponse, error)
	// Gets all budgets
	GetAllBudgets(context.Context, *GetAllBudgetsRequest) (*GetAllBudgetsResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	ReadynessCheck(context.Context, *ReadynessCheckRequest) (*ReadynessCheckResponse, error)
	// Gets an investment account
	GetInvestmentAcccount(context.Context, *GetInvestmentAcccountRequest) (*GetInvestmentAcccountResponse, error)
	// Gets a mortgage account
	GetMortgageAccount(context.Context, *GetMortgageAccountRequest) (*GetMortgageAccountResponse, error)
	// Get a liability account
	GetLiabilityAccount(context.Context, *GetLiabilityAccountRequest) (*GetLiabilityAccountResponse, error)
	// Gets student loan account
	GetStudentLoanAccount(context.Context, *GetStudentLoanAccountRequest) (*GetStudentLoanAccountResponse, error)
	// Creates a manual link
	CreateManualLink(context.Context, *CreateManualLinkRequest) (*CreateManualLinkResponse, error)
	// Get a specific linked account
	GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error)
	// Gets all the links for a given user
	GetLinks(context.Context, *GetLinksRequest) (*GetLinksResponse, error)
	// Deletes a linked account
	DeleteLink(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error)
	// This endpoint enables end users to get recurring transactions
	GetReCurringTransactions(context.Context, *GetReCurringTransactionsRequest) (*GetReCurringTransactionsResponse, error)
	// This endpoint enables end users to get transactions in a paginated manner
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	// This endpoint enables end users to get transactions in a paginated manner
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error)
	// Transaction Aggregates By Various parameters
	GetTransactionAggregates(context.Context, *GetTransactionAggregatesRequest) (*GetTransactionAggregatesResponse, error)
	// This endpoint enables end users to get the historical account balances for all accounts the user has
	GetUserAccountBalanceHistory(context.Context, *GetUserAccountBalanceHistoryRequest) (*GetUserAccountBalanceHistoryResponse, error)
	// This endpoint enables end users to get the historical account balances for a given account the user has
	GetAccountBalanceHistory(context.Context, *GetAccountBalanceHistoryRequest) (*GetAccountBalanceHistoryResponse, error)
	// enables end users to get their categorized monthly expenditures
	GetUserCategoryMonthlyExpenditure(context.Context, *GetUserCategoryMonthlyExpenditureRequest) (*GetUserCategoryMonthlyExpenditureResponse, error)
	// returns all CategoryMonthlyIncome records for a specific user for a specific personal finance category
	GetUserCategoryMonthlyIncome(context.Context, *GetUserCategoryMonthlyIncomeRequest) (*GetUserCategoryMonthlyIncomeResponse, error)
	// returns all CategoryMonthlyTransactionCount records for a specific user
	GetCategoryMonthlyTransactionCount(context.Context, *GetCategoryMonthlyTransactionCountRequest) (*GetCategoryMonthlyTransactionCountResponse, error)
	// Get debt to income ratio
	GetDebtToIncomeRatio(context.Context, *GetDebtToIncomeRatioRequest) (*GetDebtToIncomeRatioResponse, error)
	// Get expense metrics
	GetExpenseMetrics(context.Context, *GetExpenseMetricsRequest) (*GetExpenseMetricsResponse, error)
	// Get financial profile
	GetFinancialProfile(context.Context, *GetFinancialProfileRequest) (*GetFinancialProfileResponse, error)
	// Get income expense ratio
	GetIncomeExpenseRatio(context.Context, *GetIncomeExpenseRatioRequest) (*GetIncomeExpenseRatioResponse, error)
	// Get income metrics
	GetIncomeMetrics(context.Context, *GetIncomeMetricsRequest) (*GetIncomeMetricsResponse, error)
	// Get merchant monthly expenditures
	GetMerchantMonthlyExpenditure(context.Context, *GetMerchantMonthlyExpenditureRequest) (*GetMerchantMonthlyExpenditureResponse, error)
	// Get monthly balance
	GetMonthlyBalance(context.Context, *GetMonthlyBalanceRequest) (*GetMonthlyBalanceResponse, error)
	// Get monthly expenditures
	GetMonthlyExpenditure(context.Context, *GetMonthlyExpenditureRequest) (*GetMonthlyExpenditureResponse, error)
	// Get monthly Income
	GetMonthlyIncome(context.Context, *GetMonthlyIncomeRequest) (*GetMonthlyIncomeResponse, error)
	// Get monthly savings
	GetMonthlySavings(context.Context, *GetMonthlySavingsRequest) (*GetMonthlySavingsResponse, error)
	// Get monthly total quantity by security and user
	GetMonthlyTotalQuantityBySecurityAndUser(context.Context, *GetMonthlyTotalQuantityBySecurityAndUserRequest) (*GetMonthlyTotalQuantityBySecurityAndUserResponse, error)
	// Get monthly transaction
	GetMonthlyTransactionCount(context.Context, *GetMonthlyTransactionCountRequest) (*GetMonthlyTransactionCountResponse, error)
	// Get monthly channel expenditure
	GetPaymentChannelMonthlyExpenditure(context.Context, *GetPaymentChannelMonthlyExpenditureRequest) (*GetPaymentChannelMonthlyExpenditureResponse, error)
	// Get total investment security
	GetTotalInvestmentBySecurity(context.Context, *GetTotalInvestmentBySecurityRequest) (*GetTotalInvestmentBySecurityResponse, error)
	// Get financial context
	GetMelodyFinancialContext(context.Context, *GetMelodyFinancialContextRequest) (*GetMelodyFinancialContextResponse, error)
	// Gets transactions for a given bank account
	GetTransactionsForBankAccount(context.Context, *GetTransactionsForBankAccountRequest) (*GetTransactionsForBankAccountResponse, error)
	// Gets the historical account balance of a given accout
	GetHistoricalAccountBalance(context.Context, *GetHistoricalAccountBalanceRequest) (*GetHistoricalAccountBalanceResponse, error)
	// Adds default pocket to a bank account
	AddDefaultPocketsToBankAccount(context.Context, *AddDefaultPocketsToBankAccountRequest) (*AddDefaultPocketsToBankAccountResponse, error)
	// Updates a pocket
	UpdatePocket(context.Context, *UpdatePocketRequest) (*UpdatePocketResponse, error)
	// Deletes a pocket
	DeletePocket(context.Context, *DeletePocketRequest) (*DeletePocketResponse, error)
	// Time Based Transaction Queries
	GetTransactionsBetweenTimeRanges(context.Context, *GetTransactionsBetweenTimeRangesRequest) (*GetTransactionsBetweenTimeRangesResponse, error)
	// get transactions for the past week
	GetTransactionsForPastWeek(context.Context, *GetTransactionsForPastWeekRequest) (*GetTransactionsForPastWeekResponse, error)
	// Get transactions for the past month
	GetTransactionsForPastMonth(context.Context, *GetTransactionsForPastMonthRequest) (*GetTransactionsForPastMonthResponse, error)
	// Smart goal and note CRUD api
	AddNoteToSmartGoal(context.Context, *AddNoteToSmartGoalRequest) (*AddNoteToSmartGoalResponse, error)
	// update the smart note tied to a goal
	UpdateNoteToSmartGoal(context.Context, *UpdateNoteToSmartGoalRequest) (*UpdateNoteToSmartGoalResponse, error)
	// // delete a note from a smart goal
	DeleteNoteFromSmartGoal(context.Context, *DeleteNoteFromSmartGoalRequest) (*DeleteNoteFromSmartGoalResponse, error)
	// get notes from a smart goal
	GetNotesFromSmartGoal(context.Context, *GetNotesFromSmartGoalRequest) (*GetNotesFromSmartGoalResponse, error)
	// get a note from a smart goal
	GetNoteFromSmartGoal(context.Context, *GetNoteFromSmartGoalRequest) (*GetNoteFromSmartGoalResponse, error)
	// ListTransactions lists a set of transactions against an account of interest
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	ListTransactionsAcrossAllAccounts(context.Context, *ListTransactionsAcrossAllAccountsRequest) (*ListTransactionsAcrossAllAccountsResponse, error)
	// GetTransaction lists a set of transactions against an account of interest
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	// updates a transaction
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error)
	// performs a bulk update of transactions
	BulkUpdateTransaction(context.Context, *BulkUpdateTransactionRequest) (*BulkUpdateTransactionResponse, error)
	// deletes a transaction by id
	DeleteTransaction(context.Context, *DeleteTransactionRequest) (*DeleteTransactionResponse, error)
	// adds a note to a transaction
	AddNoteToTransaction(context.Context, *AddNoteToTransactionRequest) (*AddNoteToTransactionResponse, error)
	// updates a note on a transaction
	UpdateNoteToTransaction(context.Context, *UpdateNoteToTransactionRequest) (*UpdateNoteToTransactionResponse, error)
	// deletes a note from a transaction
	DeleteNoteFromTransaction(context.Context, *DeleteNoteFromTransactionRequest) (*DeleteNoteFromTransactionResponse, error)
	// list transaction notes
	ListTransactionNotes(context.Context, *ListTransactionNotesRequest) (*ListTransactionNotesResponse, error)
	// gets a note from a transaction
	GetNoteFromTransaction(context.Context, *GetNoteFromTransactionRequest) (*GetNoteFromTransactionResponse, error)
	// splits a transaction
	SplitTransaction(context.Context, *SplitTransactionRequest) (*SplitTransactionResponse, error)
	// unsplits a transaction
	UnSplitTransactions(context.Context, *UnSplitTransactionsRequest) (*UnSplitTransactionsResponse, error)
	// get all the split transactions for a given transaction
	GetSplitTransaction(context.Context, *GetSplitTransactionRequest) (*GetSplitTransactionResponse, error)
	// searchs for a set of transactions that fit a given filter
	SearchTransactions(context.Context, *SearchTransactionsRequest) (*SearchTransactionsResponse, error)
	// ListRecurringTransactions lists a set of transactions against an account of interest
	ListRecurringTransactions(context.Context, *ListRecurringTransactionsRequest) (*ListRecurringTransactionsResponse, error)
	// GetRecurringTransaction lists a set of transactions against an account of interest
	GetRecurringTransaction(context.Context, *GetRecurringTransactionRequest) (*GetRecurringTransactionResponse, error)
	// updates a transaction
	UpdateRecurringTransaction(context.Context, *UpdateRecurringTransactionRequest) (*UpdateRecurringTransactionResponse, error)
	// performs a bulk update of transactions
	BulkUpdateRecurringTransaction(context.Context, *BulkUpdateRecurringTransactionRequest) (*BulkUpdateRecurringTransactionResponse, error)
	// deletes a transaction by id
	DeleteRecurringTransaction(context.Context, *DeleteRecurringTransactionRequest) (*DeleteRecurringTransactionResponse, error)
	// adds a note to a transaction
	AddNoteToRecurringTransaction(context.Context, *AddNoteToRecurringTransactionRequest) (*AddNoteToRecurringTransactionResponse, error)
	// updates a note on a transaction
	UpdateNoteToRecurringTransaction(context.Context, *UpdateNoteToRecurringTransactionRequest) (*UpdateNoteToRecurringTransactionResponse, error)
	// deletes a note from a transaction
	DeleteNoteFromRecurringTransaction(context.Context, *DeleteNoteFromRecurringTransactionRequest) (*DeleteNoteFromRecurringTransactionResponse, error)
	// list transaction notes
	ListRecurringTransactionNotes(context.Context, *ListRecurringTransactionNotesRequest) (*ListRecurringTransactionNotesResponse, error)
	PollAsyncTaskExecutionStatus(context.Context, *PollAsyncTaskExecutionStatusRequest) (*PollAsyncTaskExecutionStatusResponse, error)
	// This checks if a user can ask the copilot a question
	RecordAskCopilotQuestion(context.Context, *RecordAskCopilotQuestionRequest) (*RecordAskCopilotQuestionResponse, error)
	// This checks if a user can ask the copilot a question
	CheckIfQuotaExceeded(context.Context, *CheckIfQuotaExceededRequest) (*CheckIfQuotaExceededResponse, error)
	TriggerSync(context.Context, *TriggerSyncRequest) (*TriggerSyncResponse, error)
	RefactorEmailAndAuth0UserIdExists(context.Context, *RefactorEmailAndAuth0UserIdExistsRequest) (*RefactorEmailAndAuth0UserIdExistsResponse, error)
	mustEmbedUnimplementedFinancialServiceServer()
}

// UnimplementedFinancialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinancialServiceServer struct {
}

func (UnimplementedFinancialServiceServer) PlaidInitiateTokenExchange(context.Context, *PlaidInitiateTokenExchangeRequest) (*PlaidInitiateTokenExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaidInitiateTokenExchange not implemented")
}
func (UnimplementedFinancialServiceServer) PlaidInitiateTokenUpdate(context.Context, *PlaidInitiateTokenUpdateRequest) (*PlaidInitiateTokenUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaidInitiateTokenUpdate not implemented")
}
func (UnimplementedFinancialServiceServer) PlaidExchangeToken(context.Context, *PlaidExchangeTokenRequest) (*PlaidExchangeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaidExchangeToken not implemented")
}
func (UnimplementedFinancialServiceServer) CreateUserProfile(context.Context, *CreateUserProfileRequest) (*CreateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserProfile not implemented")
}
func (UnimplementedFinancialServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteUserProfile(context.Context, *DeleteUserProfileRequest) (*DeleteUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserProfile not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedFinancialServiceServer) CreateBankAccount(context.Context, *CreateBankAccountRequest) (*CreateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankAccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccount not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateBankAccount(context.Context, *UpdateBankAccountRequest) (*UpdateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankAccount not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteBankAccount(context.Context, *DeleteBankAccountRequest) (*DeleteBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankAccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetPocket(context.Context, *GetPocketRequest) (*GetPocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPocket not implemented")
}
func (UnimplementedFinancialServiceServer) GetSmartGoalsByPocketId(context.Context, *GetSmartGoalsByPocketIdRequest) (*GetSmartGoalsByPocketIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmartGoalsByPocketId not implemented")
}
func (UnimplementedFinancialServiceServer) CreateSmartGoal(context.Context, *CreateSmartGoalRequest) (*CreateSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateSmartGoal(context.Context, *UpdateSmartGoalRequest) (*UpdateSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteSmartGoal(context.Context, *DeleteSmartGoalRequest) (*DeleteSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) CreateMilestone(context.Context, *CreateMilestoneRequest) (*CreateMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMilestone not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteMilestone(context.Context, *DeleteMilestoneRequest) (*DeleteMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMilestone not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateMilestone(context.Context, *UpdateMilestoneRequest) (*UpdateMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMilestone not implemented")
}
func (UnimplementedFinancialServiceServer) GetMilestone(context.Context, *GetMilestoneRequest) (*GetMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMilestone not implemented")
}
func (UnimplementedFinancialServiceServer) GetMilestonesBySmartGoalId(context.Context, *GetMilestonesBySmartGoalIdRequest) (*GetMilestonesBySmartGoalIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMilestonesBySmartGoalId not implemented")
}
func (UnimplementedFinancialServiceServer) GetForecast(context.Context, *GetForecastRequest) (*GetForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecast not implemented")
}
func (UnimplementedFinancialServiceServer) CreateBudget(context.Context, *CreateBudgetRequest) (*CreateBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBudget not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateBudget(context.Context, *UpdateBudgetRequest) (*UpdateBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBudget not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteBudget(context.Context, *DeleteBudgetRequest) (*DeleteBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBudget not implemented")
}
func (UnimplementedFinancialServiceServer) GetBudget(context.Context, *GetBudgetRequest) (*GetBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudget not implemented")
}
func (UnimplementedFinancialServiceServer) GetAllBudgets(context.Context, *GetAllBudgetsRequest) (*GetAllBudgetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBudgets not implemented")
}
func (UnimplementedFinancialServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedFinancialServiceServer) ReadynessCheck(context.Context, *ReadynessCheckRequest) (*ReadynessCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadynessCheck not implemented")
}
func (UnimplementedFinancialServiceServer) GetInvestmentAcccount(context.Context, *GetInvestmentAcccountRequest) (*GetInvestmentAcccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestmentAcccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetMortgageAccount(context.Context, *GetMortgageAccountRequest) (*GetMortgageAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMortgageAccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetLiabilityAccount(context.Context, *GetLiabilityAccountRequest) (*GetLiabilityAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiabilityAccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetStudentLoanAccount(context.Context, *GetStudentLoanAccountRequest) (*GetStudentLoanAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentLoanAccount not implemented")
}
func (UnimplementedFinancialServiceServer) CreateManualLink(context.Context, *CreateManualLinkRequest) (*CreateManualLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManualLink not implemented")
}
func (UnimplementedFinancialServiceServer) GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedFinancialServiceServer) GetLinks(context.Context, *GetLinksRequest) (*GetLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinks not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteLink(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (UnimplementedFinancialServiceServer) GetReCurringTransactions(context.Context, *GetReCurringTransactionsRequest) (*GetReCurringTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReCurringTransactions not implemented")
}
func (UnimplementedFinancialServiceServer) GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedFinancialServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedFinancialServiceServer) GetTransactionAggregates(context.Context, *GetTransactionAggregatesRequest) (*GetTransactionAggregatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionAggregates not implemented")
}
func (UnimplementedFinancialServiceServer) GetUserAccountBalanceHistory(context.Context, *GetUserAccountBalanceHistoryRequest) (*GetUserAccountBalanceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccountBalanceHistory not implemented")
}
func (UnimplementedFinancialServiceServer) GetAccountBalanceHistory(context.Context, *GetAccountBalanceHistoryRequest) (*GetAccountBalanceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalanceHistory not implemented")
}
func (UnimplementedFinancialServiceServer) GetUserCategoryMonthlyExpenditure(context.Context, *GetUserCategoryMonthlyExpenditureRequest) (*GetUserCategoryMonthlyExpenditureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCategoryMonthlyExpenditure not implemented")
}
func (UnimplementedFinancialServiceServer) GetUserCategoryMonthlyIncome(context.Context, *GetUserCategoryMonthlyIncomeRequest) (*GetUserCategoryMonthlyIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCategoryMonthlyIncome not implemented")
}
func (UnimplementedFinancialServiceServer) GetCategoryMonthlyTransactionCount(context.Context, *GetCategoryMonthlyTransactionCountRequest) (*GetCategoryMonthlyTransactionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryMonthlyTransactionCount not implemented")
}
func (UnimplementedFinancialServiceServer) GetDebtToIncomeRatio(context.Context, *GetDebtToIncomeRatioRequest) (*GetDebtToIncomeRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebtToIncomeRatio not implemented")
}
func (UnimplementedFinancialServiceServer) GetExpenseMetrics(context.Context, *GetExpenseMetricsRequest) (*GetExpenseMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpenseMetrics not implemented")
}
func (UnimplementedFinancialServiceServer) GetFinancialProfile(context.Context, *GetFinancialProfileRequest) (*GetFinancialProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialProfile not implemented")
}
func (UnimplementedFinancialServiceServer) GetIncomeExpenseRatio(context.Context, *GetIncomeExpenseRatioRequest) (*GetIncomeExpenseRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeExpenseRatio not implemented")
}
func (UnimplementedFinancialServiceServer) GetIncomeMetrics(context.Context, *GetIncomeMetricsRequest) (*GetIncomeMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeMetrics not implemented")
}
func (UnimplementedFinancialServiceServer) GetMerchantMonthlyExpenditure(context.Context, *GetMerchantMonthlyExpenditureRequest) (*GetMerchantMonthlyExpenditureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantMonthlyExpenditure not implemented")
}
func (UnimplementedFinancialServiceServer) GetMonthlyBalance(context.Context, *GetMonthlyBalanceRequest) (*GetMonthlyBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyBalance not implemented")
}
func (UnimplementedFinancialServiceServer) GetMonthlyExpenditure(context.Context, *GetMonthlyExpenditureRequest) (*GetMonthlyExpenditureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyExpenditure not implemented")
}
func (UnimplementedFinancialServiceServer) GetMonthlyIncome(context.Context, *GetMonthlyIncomeRequest) (*GetMonthlyIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyIncome not implemented")
}
func (UnimplementedFinancialServiceServer) GetMonthlySavings(context.Context, *GetMonthlySavingsRequest) (*GetMonthlySavingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlySavings not implemented")
}
func (UnimplementedFinancialServiceServer) GetMonthlyTotalQuantityBySecurityAndUser(context.Context, *GetMonthlyTotalQuantityBySecurityAndUserRequest) (*GetMonthlyTotalQuantityBySecurityAndUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyTotalQuantityBySecurityAndUser not implemented")
}
func (UnimplementedFinancialServiceServer) GetMonthlyTransactionCount(context.Context, *GetMonthlyTransactionCountRequest) (*GetMonthlyTransactionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyTransactionCount not implemented")
}
func (UnimplementedFinancialServiceServer) GetPaymentChannelMonthlyExpenditure(context.Context, *GetPaymentChannelMonthlyExpenditureRequest) (*GetPaymentChannelMonthlyExpenditureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentChannelMonthlyExpenditure not implemented")
}
func (UnimplementedFinancialServiceServer) GetTotalInvestmentBySecurity(context.Context, *GetTotalInvestmentBySecurityRequest) (*GetTotalInvestmentBySecurityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalInvestmentBySecurity not implemented")
}
func (UnimplementedFinancialServiceServer) GetMelodyFinancialContext(context.Context, *GetMelodyFinancialContextRequest) (*GetMelodyFinancialContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMelodyFinancialContext not implemented")
}
func (UnimplementedFinancialServiceServer) GetTransactionsForBankAccount(context.Context, *GetTransactionsForBankAccountRequest) (*GetTransactionsForBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsForBankAccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetHistoricalAccountBalance(context.Context, *GetHistoricalAccountBalanceRequest) (*GetHistoricalAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalAccountBalance not implemented")
}
func (UnimplementedFinancialServiceServer) AddDefaultPocketsToBankAccount(context.Context, *AddDefaultPocketsToBankAccountRequest) (*AddDefaultPocketsToBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultPocketsToBankAccount not implemented")
}
func (UnimplementedFinancialServiceServer) UpdatePocket(context.Context, *UpdatePocketRequest) (*UpdatePocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePocket not implemented")
}
func (UnimplementedFinancialServiceServer) DeletePocket(context.Context, *DeletePocketRequest) (*DeletePocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePocket not implemented")
}
func (UnimplementedFinancialServiceServer) GetTransactionsBetweenTimeRanges(context.Context, *GetTransactionsBetweenTimeRangesRequest) (*GetTransactionsBetweenTimeRangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsBetweenTimeRanges not implemented")
}
func (UnimplementedFinancialServiceServer) GetTransactionsForPastWeek(context.Context, *GetTransactionsForPastWeekRequest) (*GetTransactionsForPastWeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsForPastWeek not implemented")
}
func (UnimplementedFinancialServiceServer) GetTransactionsForPastMonth(context.Context, *GetTransactionsForPastMonthRequest) (*GetTransactionsForPastMonthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsForPastMonth not implemented")
}
func (UnimplementedFinancialServiceServer) AddNoteToSmartGoal(context.Context, *AddNoteToSmartGoalRequest) (*AddNoteToSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNoteToSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateNoteToSmartGoal(context.Context, *UpdateNoteToSmartGoalRequest) (*UpdateNoteToSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoteToSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteNoteFromSmartGoal(context.Context, *DeleteNoteFromSmartGoalRequest) (*DeleteNoteFromSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNoteFromSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) GetNotesFromSmartGoal(context.Context, *GetNotesFromSmartGoalRequest) (*GetNotesFromSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotesFromSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) GetNoteFromSmartGoal(context.Context, *GetNoteFromSmartGoalRequest) (*GetNoteFromSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteFromSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedFinancialServiceServer) ListTransactionsAcrossAllAccounts(context.Context, *ListTransactionsAcrossAllAccountsRequest) (*ListTransactionsAcrossAllAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsAcrossAllAccounts not implemented")
}
func (UnimplementedFinancialServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) BulkUpdateTransaction(context.Context, *BulkUpdateTransactionRequest) (*BulkUpdateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteTransaction(context.Context, *DeleteTransactionRequest) (*DeleteTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) AddNoteToTransaction(context.Context, *AddNoteToTransactionRequest) (*AddNoteToTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNoteToTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateNoteToTransaction(context.Context, *UpdateNoteToTransactionRequest) (*UpdateNoteToTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoteToTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteNoteFromTransaction(context.Context, *DeleteNoteFromTransactionRequest) (*DeleteNoteFromTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNoteFromTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) ListTransactionNotes(context.Context, *ListTransactionNotesRequest) (*ListTransactionNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionNotes not implemented")
}
func (UnimplementedFinancialServiceServer) GetNoteFromTransaction(context.Context, *GetNoteFromTransactionRequest) (*GetNoteFromTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteFromTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) SplitTransaction(context.Context, *SplitTransactionRequest) (*SplitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) UnSplitTransactions(context.Context, *UnSplitTransactionsRequest) (*UnSplitTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSplitTransactions not implemented")
}
func (UnimplementedFinancialServiceServer) GetSplitTransaction(context.Context, *GetSplitTransactionRequest) (*GetSplitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSplitTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) SearchTransactions(context.Context, *SearchTransactionsRequest) (*SearchTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTransactions not implemented")
}
func (UnimplementedFinancialServiceServer) ListRecurringTransactions(context.Context, *ListRecurringTransactionsRequest) (*ListRecurringTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecurringTransactions not implemented")
}
func (UnimplementedFinancialServiceServer) GetRecurringTransaction(context.Context, *GetRecurringTransactionRequest) (*GetRecurringTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecurringTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateRecurringTransaction(context.Context, *UpdateRecurringTransactionRequest) (*UpdateRecurringTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecurringTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) BulkUpdateRecurringTransaction(context.Context, *BulkUpdateRecurringTransactionRequest) (*BulkUpdateRecurringTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateRecurringTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteRecurringTransaction(context.Context, *DeleteRecurringTransactionRequest) (*DeleteRecurringTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecurringTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) AddNoteToRecurringTransaction(context.Context, *AddNoteToRecurringTransactionRequest) (*AddNoteToRecurringTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNoteToRecurringTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateNoteToRecurringTransaction(context.Context, *UpdateNoteToRecurringTransactionRequest) (*UpdateNoteToRecurringTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoteToRecurringTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteNoteFromRecurringTransaction(context.Context, *DeleteNoteFromRecurringTransactionRequest) (*DeleteNoteFromRecurringTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNoteFromRecurringTransaction not implemented")
}
func (UnimplementedFinancialServiceServer) ListRecurringTransactionNotes(context.Context, *ListRecurringTransactionNotesRequest) (*ListRecurringTransactionNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecurringTransactionNotes not implemented")
}
func (UnimplementedFinancialServiceServer) PollAsyncTaskExecutionStatus(context.Context, *PollAsyncTaskExecutionStatusRequest) (*PollAsyncTaskExecutionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollAsyncTaskExecutionStatus not implemented")
}
func (UnimplementedFinancialServiceServer) RecordAskCopilotQuestion(context.Context, *RecordAskCopilotQuestionRequest) (*RecordAskCopilotQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordAskCopilotQuestion not implemented")
}
func (UnimplementedFinancialServiceServer) CheckIfQuotaExceeded(context.Context, *CheckIfQuotaExceededRequest) (*CheckIfQuotaExceededResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfQuotaExceeded not implemented")
}
func (UnimplementedFinancialServiceServer) TriggerSync(context.Context, *TriggerSyncRequest) (*TriggerSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSync not implemented")
}
func (UnimplementedFinancialServiceServer) RefactorEmailAndAuth0UserIdExists(context.Context, *RefactorEmailAndAuth0UserIdExistsRequest) (*RefactorEmailAndAuth0UserIdExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefactorEmailAndAuth0UserIdExists not implemented")
}
func (UnimplementedFinancialServiceServer) mustEmbedUnimplementedFinancialServiceServer() {}

// UnsafeFinancialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancialServiceServer will
// result in compilation errors.
type UnsafeFinancialServiceServer interface {
	mustEmbedUnimplementedFinancialServiceServer()
}

func RegisterFinancialServiceServer(s grpc.ServiceRegistrar, srv FinancialServiceServer) {
	s.RegisterService(&FinancialService_ServiceDesc, srv)
}

func _FinancialService_PlaidInitiateTokenExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaidInitiateTokenExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).PlaidInitiateTokenExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_PlaidInitiateTokenExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).PlaidInitiateTokenExchange(ctx, req.(*PlaidInitiateTokenExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_PlaidInitiateTokenUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaidInitiateTokenUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).PlaidInitiateTokenUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_PlaidInitiateTokenUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).PlaidInitiateTokenUpdate(ctx, req.(*PlaidInitiateTokenUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_PlaidExchangeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaidExchangeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).PlaidExchangeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_PlaidExchangeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).PlaidExchangeToken(ctx, req.(*PlaidExchangeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CreateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateUserProfile(ctx, req.(*CreateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteUserProfile(ctx, req.(*DeleteUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CreateBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateBankAccount(ctx, req.(*CreateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetBankAccount(ctx, req.(*GetBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateBankAccount(ctx, req.(*UpdateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteBankAccount(ctx, req.(*DeleteBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetPocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetPocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetPocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetPocket(ctx, req.(*GetPocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetSmartGoalsByPocketId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmartGoalsByPocketIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetSmartGoalsByPocketId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetSmartGoalsByPocketId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetSmartGoalsByPocketId(ctx, req.(*GetSmartGoalsByPocketIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CreateSmartGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateSmartGoal(ctx, req.(*CreateSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateSmartGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateSmartGoal(ctx, req.(*UpdateSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteSmartGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteSmartGoal(ctx, req.(*DeleteSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CreateMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateMilestone(ctx, req.(*CreateMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteMilestone(ctx, req.(*DeleteMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateMilestone(ctx, req.(*UpdateMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMilestone(ctx, req.(*GetMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMilestonesBySmartGoalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMilestonesBySmartGoalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMilestonesBySmartGoalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMilestonesBySmartGoalId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMilestonesBySmartGoalId(ctx, req.(*GetMilestonesBySmartGoalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetForecast(ctx, req.(*GetForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CreateBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateBudget(ctx, req.(*CreateBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateBudget(ctx, req.(*UpdateBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteBudget(ctx, req.(*DeleteBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetBudget(ctx, req.(*GetBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetAllBudgets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBudgetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetAllBudgets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetAllBudgets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetAllBudgets(ctx, req.(*GetAllBudgetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ReadynessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadynessCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ReadynessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ReadynessCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ReadynessCheck(ctx, req.(*ReadynessCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetInvestmentAcccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestmentAcccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetInvestmentAcccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetInvestmentAcccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetInvestmentAcccount(ctx, req.(*GetInvestmentAcccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMortgageAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMortgageAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMortgageAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMortgageAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMortgageAccount(ctx, req.(*GetMortgageAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetLiabilityAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiabilityAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetLiabilityAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetLiabilityAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetLiabilityAccount(ctx, req.(*GetLiabilityAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetStudentLoanAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentLoanAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetStudentLoanAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetStudentLoanAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetStudentLoanAccount(ctx, req.(*GetStudentLoanAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateManualLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManualLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateManualLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CreateManualLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateManualLink(ctx, req.(*CreateManualLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetLink(ctx, req.(*GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetLinks(ctx, req.(*GetLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteLink(ctx, req.(*DeleteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetReCurringTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReCurringTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetReCurringTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetReCurringTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetReCurringTransactions(ctx, req.(*GetReCurringTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetTransactionAggregates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionAggregatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetTransactionAggregates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetTransactionAggregates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetTransactionAggregates(ctx, req.(*GetTransactionAggregatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetUserAccountBalanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccountBalanceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetUserAccountBalanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetUserAccountBalanceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetUserAccountBalanceHistory(ctx, req.(*GetUserAccountBalanceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetAccountBalanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetAccountBalanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetAccountBalanceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetAccountBalanceHistory(ctx, req.(*GetAccountBalanceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetUserCategoryMonthlyExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCategoryMonthlyExpenditureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetUserCategoryMonthlyExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetUserCategoryMonthlyExpenditure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetUserCategoryMonthlyExpenditure(ctx, req.(*GetUserCategoryMonthlyExpenditureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetUserCategoryMonthlyIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCategoryMonthlyIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetUserCategoryMonthlyIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetUserCategoryMonthlyIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetUserCategoryMonthlyIncome(ctx, req.(*GetUserCategoryMonthlyIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetCategoryMonthlyTransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryMonthlyTransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetCategoryMonthlyTransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetCategoryMonthlyTransactionCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetCategoryMonthlyTransactionCount(ctx, req.(*GetCategoryMonthlyTransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetDebtToIncomeRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebtToIncomeRatioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetDebtToIncomeRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetDebtToIncomeRatio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetDebtToIncomeRatio(ctx, req.(*GetDebtToIncomeRatioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetExpenseMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpenseMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetExpenseMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetExpenseMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetExpenseMetrics(ctx, req.(*GetExpenseMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetFinancialProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetFinancialProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetFinancialProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetFinancialProfile(ctx, req.(*GetFinancialProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetIncomeExpenseRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeExpenseRatioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetIncomeExpenseRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetIncomeExpenseRatio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetIncomeExpenseRatio(ctx, req.(*GetIncomeExpenseRatioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetIncomeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetIncomeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetIncomeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetIncomeMetrics(ctx, req.(*GetIncomeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMerchantMonthlyExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantMonthlyExpenditureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMerchantMonthlyExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMerchantMonthlyExpenditure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMerchantMonthlyExpenditure(ctx, req.(*GetMerchantMonthlyExpenditureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMonthlyBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMonthlyBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMonthlyBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMonthlyBalance(ctx, req.(*GetMonthlyBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMonthlyExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyExpenditureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMonthlyExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMonthlyExpenditure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMonthlyExpenditure(ctx, req.(*GetMonthlyExpenditureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMonthlyIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMonthlyIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMonthlyIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMonthlyIncome(ctx, req.(*GetMonthlyIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMonthlySavings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlySavingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMonthlySavings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMonthlySavings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMonthlySavings(ctx, req.(*GetMonthlySavingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMonthlyTotalQuantityBySecurityAndUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyTotalQuantityBySecurityAndUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMonthlyTotalQuantityBySecurityAndUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMonthlyTotalQuantityBySecurityAndUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMonthlyTotalQuantityBySecurityAndUser(ctx, req.(*GetMonthlyTotalQuantityBySecurityAndUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMonthlyTransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyTransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMonthlyTransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMonthlyTransactionCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMonthlyTransactionCount(ctx, req.(*GetMonthlyTransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetPaymentChannelMonthlyExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentChannelMonthlyExpenditureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetPaymentChannelMonthlyExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetPaymentChannelMonthlyExpenditure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetPaymentChannelMonthlyExpenditure(ctx, req.(*GetPaymentChannelMonthlyExpenditureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetTotalInvestmentBySecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalInvestmentBySecurityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetTotalInvestmentBySecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetTotalInvestmentBySecurity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetTotalInvestmentBySecurity(ctx, req.(*GetTotalInvestmentBySecurityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMelodyFinancialContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMelodyFinancialContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMelodyFinancialContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetMelodyFinancialContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMelodyFinancialContext(ctx, req.(*GetMelodyFinancialContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetTransactionsForBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsForBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetTransactionsForBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetTransactionsForBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetTransactionsForBankAccount(ctx, req.(*GetTransactionsForBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetHistoricalAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoricalAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetHistoricalAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetHistoricalAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetHistoricalAccountBalance(ctx, req.(*GetHistoricalAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_AddDefaultPocketsToBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultPocketsToBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).AddDefaultPocketsToBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_AddDefaultPocketsToBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).AddDefaultPocketsToBankAccount(ctx, req.(*AddDefaultPocketsToBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdatePocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdatePocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdatePocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdatePocket(ctx, req.(*UpdatePocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeletePocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeletePocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeletePocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeletePocket(ctx, req.(*DeletePocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetTransactionsBetweenTimeRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsBetweenTimeRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetTransactionsBetweenTimeRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetTransactionsBetweenTimeRanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetTransactionsBetweenTimeRanges(ctx, req.(*GetTransactionsBetweenTimeRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetTransactionsForPastWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsForPastWeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetTransactionsForPastWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetTransactionsForPastWeek_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetTransactionsForPastWeek(ctx, req.(*GetTransactionsForPastWeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetTransactionsForPastMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsForPastMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetTransactionsForPastMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetTransactionsForPastMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetTransactionsForPastMonth(ctx, req.(*GetTransactionsForPastMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_AddNoteToSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoteToSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).AddNoteToSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_AddNoteToSmartGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).AddNoteToSmartGoal(ctx, req.(*AddNoteToSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateNoteToSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteToSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateNoteToSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateNoteToSmartGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateNoteToSmartGoal(ctx, req.(*UpdateNoteToSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteNoteFromSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteFromSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteNoteFromSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteNoteFromSmartGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteNoteFromSmartGoal(ctx, req.(*DeleteNoteFromSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetNotesFromSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotesFromSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetNotesFromSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetNotesFromSmartGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetNotesFromSmartGoal(ctx, req.(*GetNotesFromSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetNoteFromSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteFromSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetNoteFromSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetNoteFromSmartGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetNoteFromSmartGoal(ctx, req.(*GetNoteFromSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ListTransactionsAcrossAllAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsAcrossAllAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ListTransactionsAcrossAllAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ListTransactionsAcrossAllAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ListTransactionsAcrossAllAccounts(ctx, req.(*ListTransactionsAcrossAllAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_BulkUpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).BulkUpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_BulkUpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).BulkUpdateTransaction(ctx, req.(*BulkUpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteTransaction(ctx, req.(*DeleteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_AddNoteToTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoteToTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).AddNoteToTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_AddNoteToTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).AddNoteToTransaction(ctx, req.(*AddNoteToTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateNoteToTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteToTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateNoteToTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateNoteToTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateNoteToTransaction(ctx, req.(*UpdateNoteToTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteNoteFromTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteFromTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteNoteFromTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteNoteFromTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteNoteFromTransaction(ctx, req.(*DeleteNoteFromTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ListTransactionNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ListTransactionNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ListTransactionNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ListTransactionNotes(ctx, req.(*ListTransactionNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetNoteFromTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteFromTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetNoteFromTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetNoteFromTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetNoteFromTransaction(ctx, req.(*GetNoteFromTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_SplitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).SplitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_SplitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).SplitTransaction(ctx, req.(*SplitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UnSplitTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSplitTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UnSplitTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UnSplitTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UnSplitTransactions(ctx, req.(*UnSplitTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetSplitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSplitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetSplitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetSplitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetSplitTransaction(ctx, req.(*GetSplitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_SearchTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).SearchTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_SearchTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).SearchTransactions(ctx, req.(*SearchTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ListRecurringTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecurringTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ListRecurringTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ListRecurringTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ListRecurringTransactions(ctx, req.(*ListRecurringTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetRecurringTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecurringTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetRecurringTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetRecurringTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetRecurringTransaction(ctx, req.(*GetRecurringTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateRecurringTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecurringTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateRecurringTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateRecurringTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateRecurringTransaction(ctx, req.(*UpdateRecurringTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_BulkUpdateRecurringTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateRecurringTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).BulkUpdateRecurringTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_BulkUpdateRecurringTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).BulkUpdateRecurringTransaction(ctx, req.(*BulkUpdateRecurringTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteRecurringTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecurringTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteRecurringTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteRecurringTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteRecurringTransaction(ctx, req.(*DeleteRecurringTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_AddNoteToRecurringTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoteToRecurringTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).AddNoteToRecurringTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_AddNoteToRecurringTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).AddNoteToRecurringTransaction(ctx, req.(*AddNoteToRecurringTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateNoteToRecurringTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteToRecurringTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateNoteToRecurringTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateNoteToRecurringTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateNoteToRecurringTransaction(ctx, req.(*UpdateNoteToRecurringTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteNoteFromRecurringTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteFromRecurringTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteNoteFromRecurringTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_DeleteNoteFromRecurringTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteNoteFromRecurringTransaction(ctx, req.(*DeleteNoteFromRecurringTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ListRecurringTransactionNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecurringTransactionNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ListRecurringTransactionNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ListRecurringTransactionNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ListRecurringTransactionNotes(ctx, req.(*ListRecurringTransactionNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_PollAsyncTaskExecutionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollAsyncTaskExecutionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).PollAsyncTaskExecutionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_PollAsyncTaskExecutionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).PollAsyncTaskExecutionStatus(ctx, req.(*PollAsyncTaskExecutionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_RecordAskCopilotQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordAskCopilotQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).RecordAskCopilotQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_RecordAskCopilotQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).RecordAskCopilotQuestion(ctx, req.(*RecordAskCopilotQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CheckIfQuotaExceeded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfQuotaExceededRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CheckIfQuotaExceeded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CheckIfQuotaExceeded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CheckIfQuotaExceeded(ctx, req.(*CheckIfQuotaExceededRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_TriggerSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).TriggerSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_TriggerSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).TriggerSync(ctx, req.(*TriggerSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_RefactorEmailAndAuth0UserIdExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefactorEmailAndAuth0UserIdExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).RefactorEmailAndAuth0UserIdExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_RefactorEmailAndAuth0UserIdExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).RefactorEmailAndAuth0UserIdExists(ctx, req.(*RefactorEmailAndAuth0UserIdExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinancialService_ServiceDesc is the grpc.ServiceDesc for FinancialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinancialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "financial_service.v1.FinancialService",
	HandlerType: (*FinancialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaidInitiateTokenExchange",
			Handler:    _FinancialService_PlaidInitiateTokenExchange_Handler,
		},
		{
			MethodName: "PlaidInitiateTokenUpdate",
			Handler:    _FinancialService_PlaidInitiateTokenUpdate_Handler,
		},
		{
			MethodName: "PlaidExchangeToken",
			Handler:    _FinancialService_PlaidExchangeToken_Handler,
		},
		{
			MethodName: "CreateUserProfile",
			Handler:    _FinancialService_CreateUserProfile_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _FinancialService_GetUserProfile_Handler,
		},
		{
			MethodName: "DeleteUserProfile",
			Handler:    _FinancialService_DeleteUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _FinancialService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "CreateBankAccount",
			Handler:    _FinancialService_CreateBankAccount_Handler,
		},
		{
			MethodName: "GetBankAccount",
			Handler:    _FinancialService_GetBankAccount_Handler,
		},
		{
			MethodName: "UpdateBankAccount",
			Handler:    _FinancialService_UpdateBankAccount_Handler,
		},
		{
			MethodName: "DeleteBankAccount",
			Handler:    _FinancialService_DeleteBankAccount_Handler,
		},
		{
			MethodName: "GetPocket",
			Handler:    _FinancialService_GetPocket_Handler,
		},
		{
			MethodName: "GetSmartGoalsByPocketId",
			Handler:    _FinancialService_GetSmartGoalsByPocketId_Handler,
		},
		{
			MethodName: "CreateSmartGoal",
			Handler:    _FinancialService_CreateSmartGoal_Handler,
		},
		{
			MethodName: "UpdateSmartGoal",
			Handler:    _FinancialService_UpdateSmartGoal_Handler,
		},
		{
			MethodName: "DeleteSmartGoal",
			Handler:    _FinancialService_DeleteSmartGoal_Handler,
		},
		{
			MethodName: "CreateMilestone",
			Handler:    _FinancialService_CreateMilestone_Handler,
		},
		{
			MethodName: "DeleteMilestone",
			Handler:    _FinancialService_DeleteMilestone_Handler,
		},
		{
			MethodName: "UpdateMilestone",
			Handler:    _FinancialService_UpdateMilestone_Handler,
		},
		{
			MethodName: "GetMilestone",
			Handler:    _FinancialService_GetMilestone_Handler,
		},
		{
			MethodName: "GetMilestonesBySmartGoalId",
			Handler:    _FinancialService_GetMilestonesBySmartGoalId_Handler,
		},
		{
			MethodName: "GetForecast",
			Handler:    _FinancialService_GetForecast_Handler,
		},
		{
			MethodName: "CreateBudget",
			Handler:    _FinancialService_CreateBudget_Handler,
		},
		{
			MethodName: "UpdateBudget",
			Handler:    _FinancialService_UpdateBudget_Handler,
		},
		{
			MethodName: "DeleteBudget",
			Handler:    _FinancialService_DeleteBudget_Handler,
		},
		{
			MethodName: "GetBudget",
			Handler:    _FinancialService_GetBudget_Handler,
		},
		{
			MethodName: "GetAllBudgets",
			Handler:    _FinancialService_GetAllBudgets_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _FinancialService_HealthCheck_Handler,
		},
		{
			MethodName: "ReadynessCheck",
			Handler:    _FinancialService_ReadynessCheck_Handler,
		},
		{
			MethodName: "GetInvestmentAcccount",
			Handler:    _FinancialService_GetInvestmentAcccount_Handler,
		},
		{
			MethodName: "GetMortgageAccount",
			Handler:    _FinancialService_GetMortgageAccount_Handler,
		},
		{
			MethodName: "GetLiabilityAccount",
			Handler:    _FinancialService_GetLiabilityAccount_Handler,
		},
		{
			MethodName: "GetStudentLoanAccount",
			Handler:    _FinancialService_GetStudentLoanAccount_Handler,
		},
		{
			MethodName: "CreateManualLink",
			Handler:    _FinancialService_CreateManualLink_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _FinancialService_GetLink_Handler,
		},
		{
			MethodName: "GetLinks",
			Handler:    _FinancialService_GetLinks_Handler,
		},
		{
			MethodName: "DeleteLink",
			Handler:    _FinancialService_DeleteLink_Handler,
		},
		{
			MethodName: "GetReCurringTransactions",
			Handler:    _FinancialService_GetReCurringTransactions_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _FinancialService_GetTransactions_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _FinancialService_CreateSubscription_Handler,
		},
		{
			MethodName: "GetTransactionAggregates",
			Handler:    _FinancialService_GetTransactionAggregates_Handler,
		},
		{
			MethodName: "GetUserAccountBalanceHistory",
			Handler:    _FinancialService_GetUserAccountBalanceHistory_Handler,
		},
		{
			MethodName: "GetAccountBalanceHistory",
			Handler:    _FinancialService_GetAccountBalanceHistory_Handler,
		},
		{
			MethodName: "GetUserCategoryMonthlyExpenditure",
			Handler:    _FinancialService_GetUserCategoryMonthlyExpenditure_Handler,
		},
		{
			MethodName: "GetUserCategoryMonthlyIncome",
			Handler:    _FinancialService_GetUserCategoryMonthlyIncome_Handler,
		},
		{
			MethodName: "GetCategoryMonthlyTransactionCount",
			Handler:    _FinancialService_GetCategoryMonthlyTransactionCount_Handler,
		},
		{
			MethodName: "GetDebtToIncomeRatio",
			Handler:    _FinancialService_GetDebtToIncomeRatio_Handler,
		},
		{
			MethodName: "GetExpenseMetrics",
			Handler:    _FinancialService_GetExpenseMetrics_Handler,
		},
		{
			MethodName: "GetFinancialProfile",
			Handler:    _FinancialService_GetFinancialProfile_Handler,
		},
		{
			MethodName: "GetIncomeExpenseRatio",
			Handler:    _FinancialService_GetIncomeExpenseRatio_Handler,
		},
		{
			MethodName: "GetIncomeMetrics",
			Handler:    _FinancialService_GetIncomeMetrics_Handler,
		},
		{
			MethodName: "GetMerchantMonthlyExpenditure",
			Handler:    _FinancialService_GetMerchantMonthlyExpenditure_Handler,
		},
		{
			MethodName: "GetMonthlyBalance",
			Handler:    _FinancialService_GetMonthlyBalance_Handler,
		},
		{
			MethodName: "GetMonthlyExpenditure",
			Handler:    _FinancialService_GetMonthlyExpenditure_Handler,
		},
		{
			MethodName: "GetMonthlyIncome",
			Handler:    _FinancialService_GetMonthlyIncome_Handler,
		},
		{
			MethodName: "GetMonthlySavings",
			Handler:    _FinancialService_GetMonthlySavings_Handler,
		},
		{
			MethodName: "GetMonthlyTotalQuantityBySecurityAndUser",
			Handler:    _FinancialService_GetMonthlyTotalQuantityBySecurityAndUser_Handler,
		},
		{
			MethodName: "GetMonthlyTransactionCount",
			Handler:    _FinancialService_GetMonthlyTransactionCount_Handler,
		},
		{
			MethodName: "GetPaymentChannelMonthlyExpenditure",
			Handler:    _FinancialService_GetPaymentChannelMonthlyExpenditure_Handler,
		},
		{
			MethodName: "GetTotalInvestmentBySecurity",
			Handler:    _FinancialService_GetTotalInvestmentBySecurity_Handler,
		},
		{
			MethodName: "GetMelodyFinancialContext",
			Handler:    _FinancialService_GetMelodyFinancialContext_Handler,
		},
		{
			MethodName: "GetTransactionsForBankAccount",
			Handler:    _FinancialService_GetTransactionsForBankAccount_Handler,
		},
		{
			MethodName: "GetHistoricalAccountBalance",
			Handler:    _FinancialService_GetHistoricalAccountBalance_Handler,
		},
		{
			MethodName: "AddDefaultPocketsToBankAccount",
			Handler:    _FinancialService_AddDefaultPocketsToBankAccount_Handler,
		},
		{
			MethodName: "UpdatePocket",
			Handler:    _FinancialService_UpdatePocket_Handler,
		},
		{
			MethodName: "DeletePocket",
			Handler:    _FinancialService_DeletePocket_Handler,
		},
		{
			MethodName: "GetTransactionsBetweenTimeRanges",
			Handler:    _FinancialService_GetTransactionsBetweenTimeRanges_Handler,
		},
		{
			MethodName: "GetTransactionsForPastWeek",
			Handler:    _FinancialService_GetTransactionsForPastWeek_Handler,
		},
		{
			MethodName: "GetTransactionsForPastMonth",
			Handler:    _FinancialService_GetTransactionsForPastMonth_Handler,
		},
		{
			MethodName: "AddNoteToSmartGoal",
			Handler:    _FinancialService_AddNoteToSmartGoal_Handler,
		},
		{
			MethodName: "UpdateNoteToSmartGoal",
			Handler:    _FinancialService_UpdateNoteToSmartGoal_Handler,
		},
		{
			MethodName: "DeleteNoteFromSmartGoal",
			Handler:    _FinancialService_DeleteNoteFromSmartGoal_Handler,
		},
		{
			MethodName: "GetNotesFromSmartGoal",
			Handler:    _FinancialService_GetNotesFromSmartGoal_Handler,
		},
		{
			MethodName: "GetNoteFromSmartGoal",
			Handler:    _FinancialService_GetNoteFromSmartGoal_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _FinancialService_ListTransactions_Handler,
		},
		{
			MethodName: "ListTransactionsAcrossAllAccounts",
			Handler:    _FinancialService_ListTransactionsAcrossAllAccounts_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _FinancialService_GetTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _FinancialService_UpdateTransaction_Handler,
		},
		{
			MethodName: "BulkUpdateTransaction",
			Handler:    _FinancialService_BulkUpdateTransaction_Handler,
		},
		{
			MethodName: "DeleteTransaction",
			Handler:    _FinancialService_DeleteTransaction_Handler,
		},
		{
			MethodName: "AddNoteToTransaction",
			Handler:    _FinancialService_AddNoteToTransaction_Handler,
		},
		{
			MethodName: "UpdateNoteToTransaction",
			Handler:    _FinancialService_UpdateNoteToTransaction_Handler,
		},
		{
			MethodName: "DeleteNoteFromTransaction",
			Handler:    _FinancialService_DeleteNoteFromTransaction_Handler,
		},
		{
			MethodName: "ListTransactionNotes",
			Handler:    _FinancialService_ListTransactionNotes_Handler,
		},
		{
			MethodName: "GetNoteFromTransaction",
			Handler:    _FinancialService_GetNoteFromTransaction_Handler,
		},
		{
			MethodName: "SplitTransaction",
			Handler:    _FinancialService_SplitTransaction_Handler,
		},
		{
			MethodName: "UnSplitTransactions",
			Handler:    _FinancialService_UnSplitTransactions_Handler,
		},
		{
			MethodName: "GetSplitTransaction",
			Handler:    _FinancialService_GetSplitTransaction_Handler,
		},
		{
			MethodName: "SearchTransactions",
			Handler:    _FinancialService_SearchTransactions_Handler,
		},
		{
			MethodName: "ListRecurringTransactions",
			Handler:    _FinancialService_ListRecurringTransactions_Handler,
		},
		{
			MethodName: "GetRecurringTransaction",
			Handler:    _FinancialService_GetRecurringTransaction_Handler,
		},
		{
			MethodName: "UpdateRecurringTransaction",
			Handler:    _FinancialService_UpdateRecurringTransaction_Handler,
		},
		{
			MethodName: "BulkUpdateRecurringTransaction",
			Handler:    _FinancialService_BulkUpdateRecurringTransaction_Handler,
		},
		{
			MethodName: "DeleteRecurringTransaction",
			Handler:    _FinancialService_DeleteRecurringTransaction_Handler,
		},
		{
			MethodName: "AddNoteToRecurringTransaction",
			Handler:    _FinancialService_AddNoteToRecurringTransaction_Handler,
		},
		{
			MethodName: "UpdateNoteToRecurringTransaction",
			Handler:    _FinancialService_UpdateNoteToRecurringTransaction_Handler,
		},
		{
			MethodName: "DeleteNoteFromRecurringTransaction",
			Handler:    _FinancialService_DeleteNoteFromRecurringTransaction_Handler,
		},
		{
			MethodName: "ListRecurringTransactionNotes",
			Handler:    _FinancialService_ListRecurringTransactionNotes_Handler,
		},
		{
			MethodName: "PollAsyncTaskExecutionStatus",
			Handler:    _FinancialService_PollAsyncTaskExecutionStatus_Handler,
		},
		{
			MethodName: "RecordAskCopilotQuestion",
			Handler:    _FinancialService_RecordAskCopilotQuestion_Handler,
		},
		{
			MethodName: "CheckIfQuotaExceeded",
			Handler:    _FinancialService_CheckIfQuotaExceeded_Handler,
		},
		{
			MethodName: "TriggerSync",
			Handler:    _FinancialService_TriggerSync_Handler,
		},
		{
			MethodName: "RefactorEmailAndAuth0UserIdExists",
			Handler:    _FinancialService_RefactorEmailAndAuth0UserIdExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "financial_service/v1/service_financial_service.proto",
}
