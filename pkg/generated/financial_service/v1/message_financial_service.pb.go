// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: financial_service/v1/message_financial_service.proto

package financial_servicev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BankAccountStatus int32

const (
	BankAccountStatus_BANK_ACCOUNT_STATUS_UNSPECIFIED BankAccountStatus = 0
	BankAccountStatus_BANK_ACCOUNT_STATUS_ACTIVE      BankAccountStatus = 1
	BankAccountStatus_BANK_ACCOUNT_STATUS_INACTIVE    BankAccountStatus = 2
)

// Enum value maps for BankAccountStatus.
var (
	BankAccountStatus_name = map[int32]string{
		0: "BANK_ACCOUNT_STATUS_UNSPECIFIED",
		1: "BANK_ACCOUNT_STATUS_ACTIVE",
		2: "BANK_ACCOUNT_STATUS_INACTIVE",
	}
	BankAccountStatus_value = map[string]int32{
		"BANK_ACCOUNT_STATUS_UNSPECIFIED": 0,
		"BANK_ACCOUNT_STATUS_ACTIVE":      1,
		"BANK_ACCOUNT_STATUS_INACTIVE":    2,
	}
)

func (x BankAccountStatus) Enum() *BankAccountStatus {
	p := new(BankAccountStatus)
	*p = x
	return p
}

func (x BankAccountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankAccountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[0].Descriptor()
}

func (BankAccountStatus) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[0]
}

func (x BankAccountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankAccountStatus.Descriptor instead.
func (BankAccountStatus) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{0}
}

type GoalStatus int32

const (
	GoalStatus_GOAL_STATUS_UNSPECIFIED GoalStatus = 0
	GoalStatus_GOAL_STATUS_ACTIVE      GoalStatus = 1
	GoalStatus_GOAL_STATUS_INACTIVE    GoalStatus = 2
	GoalStatus_GOAL_STATUS_COMPLETED   GoalStatus = 3
	GoalStatus_GOAL_STATUS_DELETE      GoalStatus = 4
)

// Enum value maps for GoalStatus.
var (
	GoalStatus_name = map[int32]string{
		0: "GOAL_STATUS_UNSPECIFIED",
		1: "GOAL_STATUS_ACTIVE",
		2: "GOAL_STATUS_INACTIVE",
		3: "GOAL_STATUS_COMPLETED",
		4: "GOAL_STATUS_DELETE",
	}
	GoalStatus_value = map[string]int32{
		"GOAL_STATUS_UNSPECIFIED": 0,
		"GOAL_STATUS_ACTIVE":      1,
		"GOAL_STATUS_INACTIVE":    2,
		"GOAL_STATUS_COMPLETED":   3,
		"GOAL_STATUS_DELETE":      4,
	}
)

func (x GoalStatus) Enum() *GoalStatus {
	p := new(GoalStatus)
	*p = x
	return p
}

func (x GoalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[1].Descriptor()
}

func (GoalStatus) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[1]
}

func (x GoalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalStatus.Descriptor instead.
func (GoalStatus) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{1}
}

type GoalType int32

const (
	GoalType_GOAL_TYPE_UNSPECIFIED GoalType = 0
	GoalType_GOAL_TYPE_SAVINGS     GoalType = 1
	GoalType_GOAL_TYPE_INVESTMENT  GoalType = 2
	GoalType_GOAL_TYPE_DEBT        GoalType = 3
	GoalType_GOAL_TYPE_EXPENSE     GoalType = 4
)

// Enum value maps for GoalType.
var (
	GoalType_name = map[int32]string{
		0: "GOAL_TYPE_UNSPECIFIED",
		1: "GOAL_TYPE_SAVINGS",
		2: "GOAL_TYPE_INVESTMENT",
		3: "GOAL_TYPE_DEBT",
		4: "GOAL_TYPE_EXPENSE",
	}
	GoalType_value = map[string]int32{
		"GOAL_TYPE_UNSPECIFIED": 0,
		"GOAL_TYPE_SAVINGS":     1,
		"GOAL_TYPE_INVESTMENT":  2,
		"GOAL_TYPE_DEBT":        3,
		"GOAL_TYPE_EXPENSE":     4,
	}
)

func (x GoalType) Enum() *GoalType {
	p := new(GoalType)
	*p = x
	return p
}

func (x GoalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[2].Descriptor()
}

func (GoalType) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[2]
}

func (x GoalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalType.Descriptor instead.
func (GoalType) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{2}
}

type PocketType int32

const (
	PocketType_POCKET_TYPE_UNSPECIFIED            PocketType = 0
	PocketType_POCKET_TYPE_DISCRETIONARY_SPENDING PocketType = 1
	PocketType_POCKET_TYPE_FUN_MONEY              PocketType = 2
	PocketType_POCKET_TYPE_DEBT_REDUCTION         PocketType = 3
	PocketType_POCKET_TYPE_EMERGENCY_FUND         PocketType = 4
	PocketType_POCKET_TYPE_INVESTMENT             PocketType = 5
	PocketType_POCKET_TYPE_SHORT_TERM_SAVINGS     PocketType = 6
	PocketType_POCKET_TYPE_LONG_TERM_SAVINGS      PocketType = 7
)

// Enum value maps for PocketType.
var (
	PocketType_name = map[int32]string{
		0: "POCKET_TYPE_UNSPECIFIED",
		1: "POCKET_TYPE_DISCRETIONARY_SPENDING",
		2: "POCKET_TYPE_FUN_MONEY",
		3: "POCKET_TYPE_DEBT_REDUCTION",
		4: "POCKET_TYPE_EMERGENCY_FUND",
		5: "POCKET_TYPE_INVESTMENT",
		6: "POCKET_TYPE_SHORT_TERM_SAVINGS",
		7: "POCKET_TYPE_LONG_TERM_SAVINGS",
	}
	PocketType_value = map[string]int32{
		"POCKET_TYPE_UNSPECIFIED":            0,
		"POCKET_TYPE_DISCRETIONARY_SPENDING": 1,
		"POCKET_TYPE_FUN_MONEY":              2,
		"POCKET_TYPE_DEBT_REDUCTION":         3,
		"POCKET_TYPE_EMERGENCY_FUND":         4,
		"POCKET_TYPE_INVESTMENT":             5,
		"POCKET_TYPE_SHORT_TERM_SAVINGS":     6,
		"POCKET_TYPE_LONG_TERM_SAVINGS":      7,
	}
)

func (x PocketType) Enum() *PocketType {
	p := new(PocketType)
	*p = x
	return p
}

func (x PocketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PocketType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[3].Descriptor()
}

func (PocketType) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[3]
}

func (x PocketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PocketType.Descriptor instead.
func (PocketType) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{3}
}

type BankAccountType int32

const (
	BankAccountType_BANK_ACCOUNT_TYPE_UNSPECIFIED BankAccountType = 0
	BankAccountType_BANK_ACCOUNT_TYPE_PLAID       BankAccountType = 1
	BankAccountType_BANK_ACCOUNT_TYPE_MANUAL      BankAccountType = 2
)

// Enum value maps for BankAccountType.
var (
	BankAccountType_name = map[int32]string{
		0: "BANK_ACCOUNT_TYPE_UNSPECIFIED",
		1: "BANK_ACCOUNT_TYPE_PLAID",
		2: "BANK_ACCOUNT_TYPE_MANUAL",
	}
	BankAccountType_value = map[string]int32{
		"BANK_ACCOUNT_TYPE_UNSPECIFIED": 0,
		"BANK_ACCOUNT_TYPE_PLAID":       1,
		"BANK_ACCOUNT_TYPE_MANUAL":      2,
	}
)

func (x BankAccountType) Enum() *BankAccountType {
	p := new(BankAccountType)
	*p = x
	return p
}

func (x BankAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[4].Descriptor()
}

func (BankAccountType) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[4]
}

func (x BankAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankAccountType.Descriptor instead.
func (BankAccountType) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{4}
}

type StripeSubscriptionStatus int32

const (
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_UNSPECIFIED        StripeSubscriptionStatus = 0
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_TRIALING           StripeSubscriptionStatus = 1
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_ACTIVE             StripeSubscriptionStatus = 2
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_PAST_DUE           StripeSubscriptionStatus = 3
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_CANCELED           StripeSubscriptionStatus = 4
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_UNPAID             StripeSubscriptionStatus = 5
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_COMPLETE           StripeSubscriptionStatus = 6
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE         StripeSubscriptionStatus = 7
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE_EXPIRED StripeSubscriptionStatus = 8
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_CREATED            StripeSubscriptionStatus = 9
	StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_PAUSED             StripeSubscriptionStatus = 10
)

// Enum value maps for StripeSubscriptionStatus.
var (
	StripeSubscriptionStatus_name = map[int32]string{
		0:  "STRIPE_SUBSCRIPTION_STATUS_UNSPECIFIED",
		1:  "STRIPE_SUBSCRIPTION_STATUS_TRIALING",
		2:  "STRIPE_SUBSCRIPTION_STATUS_ACTIVE",
		3:  "STRIPE_SUBSCRIPTION_STATUS_PAST_DUE",
		4:  "STRIPE_SUBSCRIPTION_STATUS_CANCELED",
		5:  "STRIPE_SUBSCRIPTION_STATUS_UNPAID",
		6:  "STRIPE_SUBSCRIPTION_STATUS_COMPLETE",
		7:  "STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE",
		8:  "STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE_EXPIRED",
		9:  "STRIPE_SUBSCRIPTION_STATUS_CREATED",
		10: "STRIPE_SUBSCRIPTION_STATUS_PAUSED",
	}
	StripeSubscriptionStatus_value = map[string]int32{
		"STRIPE_SUBSCRIPTION_STATUS_UNSPECIFIED":        0,
		"STRIPE_SUBSCRIPTION_STATUS_TRIALING":           1,
		"STRIPE_SUBSCRIPTION_STATUS_ACTIVE":             2,
		"STRIPE_SUBSCRIPTION_STATUS_PAST_DUE":           3,
		"STRIPE_SUBSCRIPTION_STATUS_CANCELED":           4,
		"STRIPE_SUBSCRIPTION_STATUS_UNPAID":             5,
		"STRIPE_SUBSCRIPTION_STATUS_COMPLETE":           6,
		"STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE":         7,
		"STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE_EXPIRED": 8,
		"STRIPE_SUBSCRIPTION_STATUS_CREATED":            9,
		"STRIPE_SUBSCRIPTION_STATUS_PAUSED":             10,
	}
)

func (x StripeSubscriptionStatus) Enum() *StripeSubscriptionStatus {
	p := new(StripeSubscriptionStatus)
	*p = x
	return p
}

func (x StripeSubscriptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StripeSubscriptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[5].Descriptor()
}

func (StripeSubscriptionStatus) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[5]
}

func (x StripeSubscriptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StripeSubscriptionStatus.Descriptor instead.
func (StripeSubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{5}
}

type LinkStatus int32

const (
	LinkStatus_LINK_STATUS_UNSPECIFIED         LinkStatus = 0
	LinkStatus_LINK_STATUS_SETUP               LinkStatus = 1
	LinkStatus_LINK_STATUS_PENDING             LinkStatus = 2
	LinkStatus_LINK_STATUS_ERROR               LinkStatus = 3
	LinkStatus_LINK_STATUS_SUCCESS             LinkStatus = 4
	LinkStatus_LINK_STATUS_PENDING_EXPIRATION  LinkStatus = 5
	LinkStatus_LINK_STATUS_REVOKED             LinkStatus = 6
	LinkStatus_LINK_STATUS_ITEM_LOGIN_REQUIRED LinkStatus = 7
)

// Enum value maps for LinkStatus.
var (
	LinkStatus_name = map[int32]string{
		0: "LINK_STATUS_UNSPECIFIED",
		1: "LINK_STATUS_SETUP",
		2: "LINK_STATUS_PENDING",
		3: "LINK_STATUS_ERROR",
		4: "LINK_STATUS_SUCCESS",
		5: "LINK_STATUS_PENDING_EXPIRATION",
		6: "LINK_STATUS_REVOKED",
		7: "LINK_STATUS_ITEM_LOGIN_REQUIRED",
	}
	LinkStatus_value = map[string]int32{
		"LINK_STATUS_UNSPECIFIED":         0,
		"LINK_STATUS_SETUP":               1,
		"LINK_STATUS_PENDING":             2,
		"LINK_STATUS_ERROR":               3,
		"LINK_STATUS_SUCCESS":             4,
		"LINK_STATUS_PENDING_EXPIRATION":  5,
		"LINK_STATUS_REVOKED":             6,
		"LINK_STATUS_ITEM_LOGIN_REQUIRED": 7,
	}
)

func (x LinkStatus) Enum() *LinkStatus {
	p := new(LinkStatus)
	*p = x
	return p
}

func (x LinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[6].Descriptor()
}

func (LinkStatus) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[6]
}

func (x LinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkStatus.Descriptor instead.
func (LinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{6}
}

type LinkType int32

const (
	LinkType_LINK_TYPE_UNSPECIFIED LinkType = 0
	LinkType_LINK_TYPE_PLAID       LinkType = 1
	LinkType_LINK_TYPE_MANUAL      LinkType = 2
)

// Enum value maps for LinkType.
var (
	LinkType_name = map[int32]string{
		0: "LINK_TYPE_UNSPECIFIED",
		1: "LINK_TYPE_PLAID",
		2: "LINK_TYPE_MANUAL",
	}
	LinkType_value = map[string]int32{
		"LINK_TYPE_UNSPECIFIED": 0,
		"LINK_TYPE_PLAID":       1,
		"LINK_TYPE_MANUAL":      2,
	}
)

func (x LinkType) Enum() *LinkType {
	p := new(LinkType)
	*p = x
	return p
}

func (x LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[7].Descriptor()
}

func (LinkType) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[7]
}

func (x LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkType.Descriptor instead.
func (LinkType) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{7}
}

type CategoryType int32

const (
	CategoryType_CATEGORY_TYPE_UNSPECIFIED CategoryType = 0
	CategoryType_CATEGORY_TYPE_DEPARTMENT  CategoryType = 1
	CategoryType_CATEGORY_TYPE_CLASS       CategoryType = 2
)

// Enum value maps for CategoryType.
var (
	CategoryType_name = map[int32]string{
		0: "CATEGORY_TYPE_UNSPECIFIED",
		1: "CATEGORY_TYPE_DEPARTMENT",
		2: "CATEGORY_TYPE_CLASS",
	}
	CategoryType_value = map[string]int32{
		"CATEGORY_TYPE_UNSPECIFIED": 0,
		"CATEGORY_TYPE_DEPARTMENT":  1,
		"CATEGORY_TYPE_CLASS":       2,
	}
)

func (x CategoryType) Enum() *CategoryType {
	p := new(CategoryType)
	*p = x
	return p
}

func (x CategoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CategoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[8].Descriptor()
}

func (CategoryType) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[8]
}

func (x CategoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CategoryType.Descriptor instead.
func (CategoryType) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{8}
}

type PersonalActionableInsightName int32

const (
	PersonalActionableInsightName_PERSONAL_ACTIONABLE_INSIGHT_NAME_UNSPECIFIED            PersonalActionableInsightName = 0
	PersonalActionableInsightName_PERSONAL_ACTIONABLE_INSIGHT_NAME_EXPENSE                PersonalActionableInsightName = 1
	PersonalActionableInsightName_PERSONAL_ACTIONABLE_INSIGHT_NAME_EMERGENCY_FUND         PersonalActionableInsightName = 2
	PersonalActionableInsightName_PERSONAL_ACTIONABLE_INSIGHT_NAME_DEBT_PRIORITIZATION    PersonalActionableInsightName = 3
	PersonalActionableInsightName_PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_ESSENTIAL_EXPENSES PersonalActionableInsightName = 4
	PersonalActionableInsightName_PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_SUBSCRIPTIONS      PersonalActionableInsightName = 5
	PersonalActionableInsightName_PERSONAL_ACTIONABLE_INSIGHT_NAME_DISCRETIONARY_SPENDING PersonalActionableInsightName = 6
)

// Enum value maps for PersonalActionableInsightName.
var (
	PersonalActionableInsightName_name = map[int32]string{
		0: "PERSONAL_ACTIONABLE_INSIGHT_NAME_UNSPECIFIED",
		1: "PERSONAL_ACTIONABLE_INSIGHT_NAME_EXPENSE",
		2: "PERSONAL_ACTIONABLE_INSIGHT_NAME_EMERGENCY_FUND",
		3: "PERSONAL_ACTIONABLE_INSIGHT_NAME_DEBT_PRIORITIZATION",
		4: "PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_ESSENTIAL_EXPENSES",
		5: "PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_SUBSCRIPTIONS",
		6: "PERSONAL_ACTIONABLE_INSIGHT_NAME_DISCRETIONARY_SPENDING",
	}
	PersonalActionableInsightName_value = map[string]int32{
		"PERSONAL_ACTIONABLE_INSIGHT_NAME_UNSPECIFIED":            0,
		"PERSONAL_ACTIONABLE_INSIGHT_NAME_EXPENSE":                1,
		"PERSONAL_ACTIONABLE_INSIGHT_NAME_EMERGENCY_FUND":         2,
		"PERSONAL_ACTIONABLE_INSIGHT_NAME_DEBT_PRIORITIZATION":    3,
		"PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_ESSENTIAL_EXPENSES": 4,
		"PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_SUBSCRIPTIONS":      5,
		"PERSONAL_ACTIONABLE_INSIGHT_NAME_DISCRETIONARY_SPENDING": 6,
	}
)

func (x PersonalActionableInsightName) Enum() *PersonalActionableInsightName {
	p := new(PersonalActionableInsightName)
	*p = x
	return p
}

func (x PersonalActionableInsightName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PersonalActionableInsightName) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[9].Descriptor()
}

func (PersonalActionableInsightName) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[9]
}

func (x PersonalActionableInsightName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PersonalActionableInsightName.Descriptor instead.
func (PersonalActionableInsightName) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{9}
}

type FinancialUserProfileType int32

const (
	FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED FinancialUserProfileType = 0
	FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_USER        FinancialUserProfileType = 1
	FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_BUSINESS    FinancialUserProfileType = 2
)

// Enum value maps for FinancialUserProfileType.
var (
	FinancialUserProfileType_name = map[int32]string{
		0: "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
		1: "FINANCIAL_USER_PROFILE_TYPE_USER",
		2: "FINANCIAL_USER_PROFILE_TYPE_BUSINESS",
	}
	FinancialUserProfileType_value = map[string]int32{
		"FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED": 0,
		"FINANCIAL_USER_PROFILE_TYPE_USER":        1,
		"FINANCIAL_USER_PROFILE_TYPE_BUSINESS":    2,
	}
)

func (x FinancialUserProfileType) Enum() *FinancialUserProfileType {
	p := new(FinancialUserProfileType)
	*p = x
	return p
}

func (x FinancialUserProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialUserProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_message_financial_service_proto_enumTypes[10].Descriptor()
}

func (FinancialUserProfileType) Type() protoreflect.EnumType {
	return &file_financial_service_v1_message_financial_service_proto_enumTypes[10]
}

func (x FinancialUserProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinancialUserProfileType.Descriptor instead.
func (FinancialUserProfileType) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{10}
}

// StripeSubscription stores high level stripe subscription details of which the user profile has
type StripeSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// stripe subscription id tied to the customer
	StripeSubscriptionId string `protobuf:"bytes,2,opt,name=stripe_subscription_id,json=stripeSubscriptionId,proto3" json:"stripe_subscription_id,omitempty"`
	// stripe subscription status
	StripeSubscriptionStatus StripeSubscriptionStatus `protobuf:"varint,3,opt,name=stripe_subscription_status,json=stripeSubscriptionStatus,proto3,enum=financial_service.v1.StripeSubscriptionStatus" json:"stripe_subscription_status,omitempty"`
	// stripe subscription active until
	StripeSubscriptionActiveUntil string `protobuf:"bytes,4,opt,name=stripe_subscription_active_until,json=stripeSubscriptionActiveUntil,proto3" json:"stripe_subscription_active_until,omitempty"`
	// stripe webhook latest timestamp
	StripeWebhookLatestTimestamp string `protobuf:"bytes,5,opt,name=stripe_webhook_latest_timestamp,json=stripeWebhookLatestTimestamp,proto3" json:"stripe_webhook_latest_timestamp,omitempty"`
	// wether the subscription is trialing
	IsTrialing bool `protobuf:"varint,6,opt,name=is_trialing,json=isTrialing,proto3" json:"is_trialing,omitempty"`
}

func (x *StripeSubscription) Reset() {
	*x = StripeSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StripeSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StripeSubscription) ProtoMessage() {}

func (x *StripeSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StripeSubscription.ProtoReflect.Descriptor instead.
func (*StripeSubscription) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{0}
}

func (x *StripeSubscription) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StripeSubscription) GetStripeSubscriptionId() string {
	if x != nil {
		return x.StripeSubscriptionId
	}
	return ""
}

func (x *StripeSubscription) GetStripeSubscriptionStatus() StripeSubscriptionStatus {
	if x != nil {
		return x.StripeSubscriptionStatus
	}
	return StripeSubscriptionStatus_STRIPE_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *StripeSubscription) GetStripeSubscriptionActiveUntil() string {
	if x != nil {
		return x.StripeSubscriptionActiveUntil
	}
	return ""
}

func (x *StripeSubscription) GetStripeWebhookLatestTimestamp() string {
	if x != nil {
		return x.StripeWebhookLatestTimestamp
	}
	return ""
}

func (x *StripeSubscription) GetIsTrialing() bool {
	if x != nil {
		return x.IsTrialing
	}
	return false
}

// FinancialUserProfile stores high level user profile details
// such as the id, user_id tied to the profile, and many more
type FinancialUserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the user id tied to the profile
	UserId           uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StripeCustomerId string `protobuf:"bytes,3,opt,name=stripe_customer_id,json=stripeCustomerId,proto3" json:"stripe_customer_id,omitempty"`
	// the stripe subscriptions the user profile actively maintains
	StripeSubscriptions *StripeSubscription `protobuf:"bytes,4,opt,name=stripe_subscriptions,json=stripeSubscriptions,proto3" json:"stripe_subscriptions,omitempty"`
	// a user profile can have many links (connected institutions) of which finanical accounts are tied to (checking, savings, etc)
	Link                       []*Link                      `protobuf:"bytes,6,rep,name=link,proto3" json:"link,omitempty"`
	ActionableInsights         []*ActionableInsight         `protobuf:"bytes,7,rep,name=actionable_insights,json=actionableInsights,proto3" json:"actionable_insights,omitempty"`
	Email                      string                       `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	MergeLiink                 []*MergeLink                 `protobuf:"bytes,9,rep,name=merge_liink,json=mergeLiink,proto3" json:"merge_liink,omitempty"`
	ActionablePersonalInsights []*PersonalActionableInsight `protobuf:"bytes,10,rep,name=actionable_personal_insights,json=actionablePersonalInsights,proto3" json:"actionable_personal_insights,omitempty"`
	ProfileType                FinancialUserProfileType     `protobuf:"varint,11,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *FinancialUserProfile) Reset() {
	*x = FinancialUserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialUserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialUserProfile) ProtoMessage() {}

func (x *FinancialUserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialUserProfile.ProtoReflect.Descriptor instead.
func (*FinancialUserProfile) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{1}
}

func (x *FinancialUserProfile) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialUserProfile) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FinancialUserProfile) GetStripeCustomerId() string {
	if x != nil {
		return x.StripeCustomerId
	}
	return ""
}

func (x *FinancialUserProfile) GetStripeSubscriptions() *StripeSubscription {
	if x != nil {
		return x.StripeSubscriptions
	}
	return nil
}

func (x *FinancialUserProfile) GetLink() []*Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *FinancialUserProfile) GetActionableInsights() []*ActionableInsight {
	if x != nil {
		return x.ActionableInsights
	}
	return nil
}

func (x *FinancialUserProfile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FinancialUserProfile) GetMergeLiink() []*MergeLink {
	if x != nil {
		return x.MergeLiink
	}
	return nil
}

func (x *FinancialUserProfile) GetActionablePersonalInsights() []*PersonalActionableInsight {
	if x != nil {
		return x.ActionablePersonalInsights
	}
	return nil
}

func (x *FinancialUserProfile) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// An actionable insight serves as a basic insight users
// can leverage and act upon and is typically generated based off of their financial contexts
type ActionableInsight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// for each user we generate a detailed actionable insights for them to see
	DetailedAction string `protobuf:"bytes,2,opt,name=detailed_action,json=detailedAction,proto3" json:"detailed_action,omitempty"`
	// for each user we generate a summarized insight targeted at optimizing a certain condition
	SummarizedAction string `protobuf:"bytes,3,opt,name=summarized_action,json=summarizedAction,proto3" json:"summarized_action,omitempty"`
	// the time the insight was generated
	GeneratedTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=generated_time,json=generatedTime,proto3" json:"generated_time,omitempty"`
	// associated tags with the generated insights
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ActionableInsight) Reset() {
	*x = ActionableInsight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionableInsight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionableInsight) ProtoMessage() {}

func (x *ActionableInsight) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionableInsight.ProtoReflect.Descriptor instead.
func (*ActionableInsight) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{2}
}

func (x *ActionableInsight) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActionableInsight) GetDetailedAction() string {
	if x != nil {
		return x.DetailedAction
	}
	return ""
}

func (x *ActionableInsight) GetSummarizedAction() string {
	if x != nil {
		return x.SummarizedAction
	}
	return ""
}

func (x *ActionableInsight) GetGeneratedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedTime
	}
	return nil
}

func (x *ActionableInsight) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PersonalActionableInsight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// insight name
	InsightName PersonalActionableInsightName `protobuf:"varint,2,opt,name=insight_name,json=insightName,proto3,enum=financial_service.v1.PersonalActionableInsightName" json:"insight_name,omitempty"`
	// insight description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// insight takeaway
	Takeaway string `protobuf:"bytes,4,opt,name=takeaway,proto3" json:"takeaway,omitempty"`
	// insight action
	Action string `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	// insight expected benefit
	ExpectedBenefit string `protobuf:"bytes,6,opt,name=expected_benefit,json=expectedBenefit,proto3" json:"expected_benefit,omitempty"`
	// insight tags
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// insight generated time
	GeneratedTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=generated_time,json=generatedTime,proto3" json:"generated_time,omitempty"`
	// metrics to optimize for
	MetricsToOptimizeFor []string `protobuf:"bytes,9,rep,name=metrics_to_optimize_for,json=metricsToOptimizeFor,proto3" json:"metrics_to_optimize_for,omitempty"`
}

func (x *PersonalActionableInsight) Reset() {
	*x = PersonalActionableInsight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalActionableInsight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalActionableInsight) ProtoMessage() {}

func (x *PersonalActionableInsight) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalActionableInsight.ProtoReflect.Descriptor instead.
func (*PersonalActionableInsight) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{3}
}

func (x *PersonalActionableInsight) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonalActionableInsight) GetInsightName() PersonalActionableInsightName {
	if x != nil {
		return x.InsightName
	}
	return PersonalActionableInsightName_PERSONAL_ACTIONABLE_INSIGHT_NAME_UNSPECIFIED
}

func (x *PersonalActionableInsight) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PersonalActionableInsight) GetTakeaway() string {
	if x != nil {
		return x.Takeaway
	}
	return ""
}

func (x *PersonalActionableInsight) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PersonalActionableInsight) GetExpectedBenefit() string {
	if x != nil {
		return x.ExpectedBenefit
	}
	return ""
}

func (x *PersonalActionableInsight) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PersonalActionableInsight) GetGeneratedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedTime
	}
	return nil
}

func (x *PersonalActionableInsight) GetMetricsToOptimizeFor() []string {
	if x != nil {
		return x.MetricsToOptimizeFor
	}
	return nil
}

// A Link represents a login at a financial institution. A single end-user of your application might have accounts at different financial
// institutions, which means they would have multiple different Items. An Item is not the same as a financial institution account,
// although every account will be associated with an Item. For example, if a user has one login at their bank that allows them to access
// both their checking account and their savings account, a single Item would be associated with both of those accounts. Each Item
// linked within your application will have a corresponding access_token, which is a token that you can use to make API requests related
// to that specific Item.
// Two Items created for the same set of credentials at the same institution will be considered different and not share the same item_id.
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id                        uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlaidSync                 *PlaidSync `protobuf:"bytes,2,opt,name=plaid_sync,json=plaidSync,proto3" json:"plaid_sync,omitempty"`
	LinkStatus                LinkStatus `protobuf:"varint,3,opt,name=link_status,json=linkStatus,proto3,enum=financial_service.v1.LinkStatus" json:"link_status,omitempty"`
	PlaidLink                 *PlaidLink `protobuf:"bytes,4,opt,name=plaid_link,json=plaidLink,proto3" json:"plaid_link,omitempty"`
	PlaidNewAccountsAvailable bool       `protobuf:"varint,5,opt,name=plaid_new_accounts_available,json=plaidNewAccountsAvailable,proto3" json:"plaid_new_accounts_available,omitempty"`
	ExpirationDate            string     `protobuf:"bytes,6,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	InstitutionName           string     `protobuf:"bytes,7,opt,name=institution_name,json=institutionName,proto3" json:"institution_name,omitempty"`
	CustomInstitutionName     string     `protobuf:"bytes,8,opt,name=custom_institution_name,json=customInstitutionName,proto3" json:"custom_institution_name,omitempty"`
	Description               string     `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	LastManualSync            string     `protobuf:"bytes,10,opt,name=last_manual_sync,json=lastManualSync,proto3" json:"last_manual_sync,omitempty"`
	LastSuccessfulUpdate      string     `protobuf:"bytes,11,opt,name=last_successful_update,json=lastSuccessfulUpdate,proto3" json:"last_successful_update,omitempty"`
	// token object witholds an access token which is a token used to make API requests related to a specific Item. You will typically obtain an access_token
	// by calling /item/public_token/exchange. For more details, see the Token exchange flow. An access_token does not expire,
	// although it may require updating, such as when a user changes their password, or when working with European institutions
	// that comply with PSD2's 90-day consent window. For more information, see When to use update mode.
	// Access tokens should always be stored securely, and associated with the user whose data they represent.
	// If compromised, an access_token can be rotated via /item/access_token/invalidate. If no longer needed,
	// it can be revoked via /item/remove.(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
	Token *Token `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`
	// a link event - or client login event can have many connected bank accounts
	// for example a log in link against one instition like chase can have many account (checking and savings)
	// it is important though to ensure that if a link against an instition already exists, we dont fascilitate duplicated
	BankAccounts []*BankAccount `protobuf:"bytes,13,rep,name=bank_accounts,json=bankAccounts,proto3" json:"bank_accounts,omitempty"`
	// a link event - or client login event can have many connected investment accounts
	// for example a log in link against one instition like fidelity can have many accounts (401k and investment account)
	// it is important though to ensure that if a link against an instition already exists, we dont fascilitate duplicated
	InvestmentAccounts []*InvestmentAccount `protobuf:"bytes,14,rep,name=investment_accounts,json=investmentAccounts,proto3" json:"investment_accounts,omitempty"`
	// credit accounts tied to a user
	CreditAccounts []*CreditAccount `protobuf:"bytes,15,rep,name=credit_accounts,json=creditAccounts,proto3" json:"credit_accounts,omitempty"`
	// mortgage accounts tied to a user
	MortgageAccounts []*MortgageAccount `protobuf:"bytes,16,rep,name=mortgage_accounts,json=mortgageAccounts,proto3" json:"mortgage_accounts,omitempty"`
	// student loan accounts tied to a link
	StudentLoanAccounts []*StudentLoanAccount `protobuf:"bytes,17,rep,name=student_loan_accounts,json=studentLoanAccounts,proto3" json:"student_loan_accounts,omitempty"`
	// the id of the institution this link is tied to and against
	PlaidInstitutionId string `protobuf:"bytes,18,opt,name=plaid_institution_id,json=plaidInstitutionId,proto3" json:"plaid_institution_id,omitempty"`
	// the type of link this is ... can be either a manual or plaid link type
	LinkType             LinkType `protobuf:"varint,19,opt,name=link_type,json=linkType,proto3,enum=financial_service.v1.LinkType" json:"link_type,omitempty"`
	ErrorCode            string   `protobuf:"bytes,20,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	NewAccountsAvailable bool     `protobuf:"varint,22,opt,name=new_accounts_available,json=newAccountsAvailable,proto3" json:"new_accounts_available,omitempty"`
	ShouldBeUpdated      bool     `protobuf:"varint,23,opt,name=should_be_updated,json=shouldBeUpdated,proto3" json:"should_be_updated,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{4}
}

func (x *Link) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Link) GetPlaidSync() *PlaidSync {
	if x != nil {
		return x.PlaidSync
	}
	return nil
}

func (x *Link) GetLinkStatus() LinkStatus {
	if x != nil {
		return x.LinkStatus
	}
	return LinkStatus_LINK_STATUS_UNSPECIFIED
}

func (x *Link) GetPlaidLink() *PlaidLink {
	if x != nil {
		return x.PlaidLink
	}
	return nil
}

func (x *Link) GetPlaidNewAccountsAvailable() bool {
	if x != nil {
		return x.PlaidNewAccountsAvailable
	}
	return false
}

func (x *Link) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *Link) GetInstitutionName() string {
	if x != nil {
		return x.InstitutionName
	}
	return ""
}

func (x *Link) GetCustomInstitutionName() string {
	if x != nil {
		return x.CustomInstitutionName
	}
	return ""
}

func (x *Link) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Link) GetLastManualSync() string {
	if x != nil {
		return x.LastManualSync
	}
	return ""
}

func (x *Link) GetLastSuccessfulUpdate() string {
	if x != nil {
		return x.LastSuccessfulUpdate
	}
	return ""
}

func (x *Link) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *Link) GetBankAccounts() []*BankAccount {
	if x != nil {
		return x.BankAccounts
	}
	return nil
}

func (x *Link) GetInvestmentAccounts() []*InvestmentAccount {
	if x != nil {
		return x.InvestmentAccounts
	}
	return nil
}

func (x *Link) GetCreditAccounts() []*CreditAccount {
	if x != nil {
		return x.CreditAccounts
	}
	return nil
}

func (x *Link) GetMortgageAccounts() []*MortgageAccount {
	if x != nil {
		return x.MortgageAccounts
	}
	return nil
}

func (x *Link) GetStudentLoanAccounts() []*StudentLoanAccount {
	if x != nil {
		return x.StudentLoanAccounts
	}
	return nil
}

func (x *Link) GetPlaidInstitutionId() string {
	if x != nil {
		return x.PlaidInstitutionId
	}
	return ""
}

func (x *Link) GetLinkType() LinkType {
	if x != nil {
		return x.LinkType
	}
	return LinkType_LINK_TYPE_UNSPECIFIED
}

func (x *Link) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *Link) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Link) GetNewAccountsAvailable() bool {
	if x != nil {
		return x.NewAccountsAvailable
	}
	return false
}

func (x *Link) GetShouldBeUpdated() bool {
	if x != nil {
		return x.ShouldBeUpdated
	}
	return false
}

type PlaidSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeStamp  string `protobuf:"bytes,3,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	Trigger    string `protobuf:"bytes,4,opt,name=trigger,proto3" json:"trigger,omitempty"`
	NextCursor string `protobuf:"bytes,5,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	Added      int64  `protobuf:"varint,6,opt,name=added,proto3" json:"added,omitempty"`
	Removed    int64  `protobuf:"varint,7,opt,name=removed,proto3" json:"removed,omitempty"`
	Modified   int64  `protobuf:"varint,8,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *PlaidSync) Reset() {
	*x = PlaidSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaidSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaidSync) ProtoMessage() {}

func (x *PlaidSync) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaidSync.ProtoReflect.Descriptor instead.
func (*PlaidSync) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{5}
}

func (x *PlaidSync) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlaidSync) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *PlaidSync) GetTrigger() string {
	if x != nil {
		return x.Trigger
	}
	return ""
}

func (x *PlaidSync) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *PlaidSync) GetAdded() int64 {
	if x != nil {
		return x.Added
	}
	return 0
}

func (x *PlaidSync) GetRemoved() int64 {
	if x != nil {
		return x.Removed
	}
	return 0
}

func (x *PlaidSync) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the id of the item the token is tied to
	ItemId      string `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	KeyId       string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	AccessToken string `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Version     string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// This is what you'll pass to Merge as the end_user_origin_id.
	MergeEndUserOriginId string `protobuf:"bytes,6,opt,name=merge_end_user_origin_id,json=mergeEndUserOriginId,proto3" json:"merge_end_user_origin_id,omitempty"`
	// The integration slug/identifier. This is returned at the end of the linking flow.
	MergeIntegrationSlug string `protobuf:"bytes,7,opt,name=merge_integration_slug,json=mergeIntegrationSlug,proto3" json:"merge_integration_slug,omitempty"`
	// last time you performed a merge fetch
	LastMergeCreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_merge_created_at,json=lastMergeCreatedAt,proto3" json:"last_merge_created_at,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{6}
}

func (x *Token) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Token) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *Token) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *Token) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *Token) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Token) GetMergeEndUserOriginId() string {
	if x != nil {
		return x.MergeEndUserOriginId
	}
	return ""
}

func (x *Token) GetMergeIntegrationSlug() string {
	if x != nil {
		return x.MergeIntegrationSlug
	}
	return ""
}

func (x *Token) GetLastMergeCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMergeCreatedAt
	}
	return nil
}

type PlaidLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id              uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Products        []string `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
	WebhookUrl      string   `protobuf:"bytes,3,opt,name=webhook_url,json=webhookUrl,proto3" json:"webhook_url,omitempty"`
	InstitutionId   string   `protobuf:"bytes,4,opt,name=institution_id,json=institutionId,proto3" json:"institution_id,omitempty"`
	InstitutionName string   `protobuf:"bytes,5,opt,name=institution_name,json=institutionName,proto3" json:"institution_name,omitempty"`
	UsePlaidSync    bool     `protobuf:"varint,6,opt,name=use_plaid_sync,json=usePlaidSync,proto3" json:"use_plaid_sync,omitempty"`
	ItemId          string   `protobuf:"bytes,7,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *PlaidLink) Reset() {
	*x = PlaidLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaidLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaidLink) ProtoMessage() {}

func (x *PlaidLink) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaidLink.ProtoReflect.Descriptor instead.
func (*PlaidLink) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{7}
}

func (x *PlaidLink) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlaidLink) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *PlaidLink) GetWebhookUrl() string {
	if x != nil {
		return x.WebhookUrl
	}
	return ""
}

func (x *PlaidLink) GetInstitutionId() string {
	if x != nil {
		return x.InstitutionId
	}
	return ""
}

func (x *PlaidLink) GetInstitutionName() string {
	if x != nil {
		return x.InstitutionName
	}
	return ""
}

func (x *PlaidLink) GetUsePlaidSync() bool {
	if x != nil {
		return x.UsePlaidSync
	}
	return false
}

func (x *PlaidLink) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

type StudentLoanAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id                                 uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlaidAccountId                     string   `protobuf:"bytes,2,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	DisbursementDates                  []string `protobuf:"bytes,3,rep,name=disbursement_dates,json=disbursementDates,proto3" json:"disbursement_dates,omitempty"`
	ExpectedPayoffDate                 string   `protobuf:"bytes,4,opt,name=expected_payoff_date,json=expectedPayoffDate,proto3" json:"expected_payoff_date,omitempty"`
	Guarantor                          string   `protobuf:"bytes,5,opt,name=guarantor,proto3" json:"guarantor,omitempty"`
	InterestRatePercentage             float64  `protobuf:"fixed64,6,opt,name=interest_rate_percentage,json=interestRatePercentage,proto3" json:"interest_rate_percentage,omitempty"`
	IsOverdue                          bool     `protobuf:"varint,7,opt,name=is_overdue,json=isOverdue,proto3" json:"is_overdue,omitempty"`
	LastPaymentAmount                  float64  `protobuf:"fixed64,8,opt,name=last_payment_amount,json=lastPaymentAmount,proto3" json:"last_payment_amount,omitempty"`
	LastPaymentDate                    string   `protobuf:"bytes,9,opt,name=last_payment_date,json=lastPaymentDate,proto3" json:"last_payment_date,omitempty"`
	LastStatementIssueDate             string   `protobuf:"bytes,10,opt,name=last_statement_issue_date,json=lastStatementIssueDate,proto3" json:"last_statement_issue_date,omitempty"`
	LoanName                           string   `protobuf:"bytes,11,opt,name=loan_name,json=loanName,proto3" json:"loan_name,omitempty"`
	LoanEndDate                        string   `protobuf:"bytes,12,opt,name=loan_end_date,json=loanEndDate,proto3" json:"loan_end_date,omitempty"`
	MinimumPaymentAmount               float64  `protobuf:"fixed64,13,opt,name=minimum_payment_amount,json=minimumPaymentAmount,proto3" json:"minimum_payment_amount,omitempty"`
	NextPaymentDueDate                 string   `protobuf:"bytes,14,opt,name=next_payment_due_date,json=nextPaymentDueDate,proto3" json:"next_payment_due_date,omitempty"`
	OriginationDate                    string   `protobuf:"bytes,15,opt,name=origination_date,json=originationDate,proto3" json:"origination_date,omitempty"`
	OriginationPrincipalAmount         float64  `protobuf:"fixed64,16,opt,name=origination_principal_amount,json=originationPrincipalAmount,proto3" json:"origination_principal_amount,omitempty"`
	OutstandingInterestAmount          float64  `protobuf:"fixed64,17,opt,name=outstanding_interest_amount,json=outstandingInterestAmount,proto3" json:"outstanding_interest_amount,omitempty"`
	PaymentReferenceNumber             string   `protobuf:"bytes,18,opt,name=payment_reference_number,json=paymentReferenceNumber,proto3" json:"payment_reference_number,omitempty"`
	SequenceNumber                     string   `protobuf:"bytes,21,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	YtdInterestPaid                    float64  `protobuf:"fixed64,23,opt,name=ytd_interest_paid,json=ytdInterestPaid,proto3" json:"ytd_interest_paid,omitempty"`
	YtdPrincipalPaid                   float64  `protobuf:"fixed64,24,opt,name=ytd_principal_paid,json=ytdPrincipalPaid,proto3" json:"ytd_principal_paid,omitempty"`
	LoanType                           string   `protobuf:"bytes,25,opt,name=loan_type,json=loanType,proto3" json:"loan_type,omitempty"`
	PslfStatusEstimatedEligibilityDate string   `protobuf:"bytes,26,opt,name=pslf_status_estimated_eligibility_date,json=pslfStatusEstimatedEligibilityDate,proto3" json:"pslf_status_estimated_eligibility_date,omitempty"`
	PslfStatusPaymentsMade             int32    `protobuf:"varint,27,opt,name=pslf_status_payments_made,json=pslfStatusPaymentsMade,proto3" json:"pslf_status_payments_made,omitempty"`
	PslfStatusPaymentsRemaining        int32    `protobuf:"varint,28,opt,name=pslf_status_payments_remaining,json=pslfStatusPaymentsRemaining,proto3" json:"pslf_status_payments_remaining,omitempty"`
	RepaymentPlanType                  string   `protobuf:"bytes,29,opt,name=repayment_plan_type,json=repaymentPlanType,proto3" json:"repayment_plan_type,omitempty"`
	RepaymentPlanDescription           string   `protobuf:"bytes,30,opt,name=repayment_plan_description,json=repaymentPlanDescription,proto3" json:"repayment_plan_description,omitempty"`
	ServicerAddressCity                string   `protobuf:"bytes,31,opt,name=servicer_address_city,json=servicerAddressCity,proto3" json:"servicer_address_city,omitempty"`
	ServicerAddressPostalCode          string   `protobuf:"bytes,32,opt,name=servicer_address_postal_code,json=servicerAddressPostalCode,proto3" json:"servicer_address_postal_code,omitempty"`
	ServicerAddressState               string   `protobuf:"bytes,33,opt,name=servicer_address_state,json=servicerAddressState,proto3" json:"servicer_address_state,omitempty"`
	ServicerAddressStreet              string   `protobuf:"bytes,34,opt,name=servicer_address_street,json=servicerAddressStreet,proto3" json:"servicer_address_street,omitempty"`
	ServicerAddressRegion              string   `protobuf:"bytes,35,opt,name=servicer_address_region,json=servicerAddressRegion,proto3" json:"servicer_address_region,omitempty"`
	ServicerAddressCountry             string   `protobuf:"bytes,36,opt,name=servicer_address_country,json=servicerAddressCountry,proto3" json:"servicer_address_country,omitempty"`
	// the user id to which this bank account is tied to
	UserId uint64 `protobuf:"varint,37,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the account name
	Name string `protobuf:"bytes,38,opt,name=name,proto3" json:"name,omitempty"`
	// the bank account status
	Status BankAccountStatus `protobuf:"varint,39,opt,name=status,proto3,enum=financial_service.v1.BankAccountStatus" json:"status,omitempty"`
}

func (x *StudentLoanAccount) Reset() {
	*x = StudentLoanAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudentLoanAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentLoanAccount) ProtoMessage() {}

func (x *StudentLoanAccount) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentLoanAccount.ProtoReflect.Descriptor instead.
func (*StudentLoanAccount) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{8}
}

func (x *StudentLoanAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StudentLoanAccount) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *StudentLoanAccount) GetDisbursementDates() []string {
	if x != nil {
		return x.DisbursementDates
	}
	return nil
}

func (x *StudentLoanAccount) GetExpectedPayoffDate() string {
	if x != nil {
		return x.ExpectedPayoffDate
	}
	return ""
}

func (x *StudentLoanAccount) GetGuarantor() string {
	if x != nil {
		return x.Guarantor
	}
	return ""
}

func (x *StudentLoanAccount) GetInterestRatePercentage() float64 {
	if x != nil {
		return x.InterestRatePercentage
	}
	return 0
}

func (x *StudentLoanAccount) GetIsOverdue() bool {
	if x != nil {
		return x.IsOverdue
	}
	return false
}

func (x *StudentLoanAccount) GetLastPaymentAmount() float64 {
	if x != nil {
		return x.LastPaymentAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetLastPaymentDate() string {
	if x != nil {
		return x.LastPaymentDate
	}
	return ""
}

func (x *StudentLoanAccount) GetLastStatementIssueDate() string {
	if x != nil {
		return x.LastStatementIssueDate
	}
	return ""
}

func (x *StudentLoanAccount) GetLoanName() string {
	if x != nil {
		return x.LoanName
	}
	return ""
}

func (x *StudentLoanAccount) GetLoanEndDate() string {
	if x != nil {
		return x.LoanEndDate
	}
	return ""
}

func (x *StudentLoanAccount) GetMinimumPaymentAmount() float64 {
	if x != nil {
		return x.MinimumPaymentAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetNextPaymentDueDate() string {
	if x != nil {
		return x.NextPaymentDueDate
	}
	return ""
}

func (x *StudentLoanAccount) GetOriginationDate() string {
	if x != nil {
		return x.OriginationDate
	}
	return ""
}

func (x *StudentLoanAccount) GetOriginationPrincipalAmount() float64 {
	if x != nil {
		return x.OriginationPrincipalAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetOutstandingInterestAmount() float64 {
	if x != nil {
		return x.OutstandingInterestAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetPaymentReferenceNumber() string {
	if x != nil {
		return x.PaymentReferenceNumber
	}
	return ""
}

func (x *StudentLoanAccount) GetSequenceNumber() string {
	if x != nil {
		return x.SequenceNumber
	}
	return ""
}

func (x *StudentLoanAccount) GetYtdInterestPaid() float64 {
	if x != nil {
		return x.YtdInterestPaid
	}
	return 0
}

func (x *StudentLoanAccount) GetYtdPrincipalPaid() float64 {
	if x != nil {
		return x.YtdPrincipalPaid
	}
	return 0
}

func (x *StudentLoanAccount) GetLoanType() string {
	if x != nil {
		return x.LoanType
	}
	return ""
}

func (x *StudentLoanAccount) GetPslfStatusEstimatedEligibilityDate() string {
	if x != nil {
		return x.PslfStatusEstimatedEligibilityDate
	}
	return ""
}

func (x *StudentLoanAccount) GetPslfStatusPaymentsMade() int32 {
	if x != nil {
		return x.PslfStatusPaymentsMade
	}
	return 0
}

func (x *StudentLoanAccount) GetPslfStatusPaymentsRemaining() int32 {
	if x != nil {
		return x.PslfStatusPaymentsRemaining
	}
	return 0
}

func (x *StudentLoanAccount) GetRepaymentPlanType() string {
	if x != nil {
		return x.RepaymentPlanType
	}
	return ""
}

func (x *StudentLoanAccount) GetRepaymentPlanDescription() string {
	if x != nil {
		return x.RepaymentPlanDescription
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressCity() string {
	if x != nil {
		return x.ServicerAddressCity
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressPostalCode() string {
	if x != nil {
		return x.ServicerAddressPostalCode
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressState() string {
	if x != nil {
		return x.ServicerAddressState
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressStreet() string {
	if x != nil {
		return x.ServicerAddressStreet
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressRegion() string {
	if x != nil {
		return x.ServicerAddressRegion
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressCountry() string {
	if x != nil {
		return x.ServicerAddressCountry
	}
	return ""
}

func (x *StudentLoanAccount) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StudentLoanAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StudentLoanAccount) GetStatus() BankAccountStatus {
	if x != nil {
		return x.Status
	}
	return BankAccountStatus_BANK_ACCOUNT_STATUS_UNSPECIFIED
}

type CreditAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the user id to which this bank account is tied to
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the account name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// the bank account number
	Number string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// the bank account type
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// the bank account balance
	Balance float32 `protobuf:"fixed32,6,opt,name=balance,proto3" json:"balance,omitempty"`
	// current funds on the account
	CurrentFunds float64 `protobuf:"fixed64,9,opt,name=current_funds,json=currentFunds,proto3" json:"current_funds,omitempty"`
	// balance limit
	BalanceLimit uint64 `protobuf:"varint,10,opt,name=balance_limit,json=balanceLimit,proto3" json:"balance_limit,omitempty"`
	// plaid account id mapped to this bank account
	PlaidAccountId string `protobuf:"bytes,12,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	// accoint subtype
	Subtype string `protobuf:"bytes,13,opt,name=subtype,proto3" json:"subtype,omitempty"`
	// wether the account is overdue
	IsOverdue bool `protobuf:"varint,14,opt,name=is_overdue,json=isOverdue,proto3" json:"is_overdue,omitempty"`
	// the last payment amount
	LastPaymentAmount float64 `protobuf:"fixed64,15,opt,name=last_payment_amount,json=lastPaymentAmount,proto3" json:"last_payment_amount,omitempty"`
	// the last payment date
	LastPaymentDate string `protobuf:"bytes,16,opt,name=last_payment_date,json=lastPaymentDate,proto3" json:"last_payment_date,omitempty"`
	// the last statement issue date
	LastStatementIssueDate string `protobuf:"bytes,17,opt,name=last_statement_issue_date,json=lastStatementIssueDate,proto3" json:"last_statement_issue_date,omitempty"`
	// the minimum amount due date
	MinimumAmountDueDate float64 `protobuf:"fixed64,18,opt,name=minimum_amount_due_date,json=minimumAmountDueDate,proto3" json:"minimum_amount_due_date,omitempty"`
	// the next payment date
	NextPaymentDate string `protobuf:"bytes,19,opt,name=next_payment_date,json=nextPaymentDate,proto3" json:"next_payment_date,omitempty"`
	// the aprs
	Aprs []*Apr `protobuf:"bytes,20,rep,name=aprs,proto3" json:"aprs,omitempty"`
	// the last statement balance
	LastStatementBalance float64 `protobuf:"fixed64,21,opt,name=last_statement_balance,json=lastStatementBalance,proto3" json:"last_statement_balance,omitempty"`
	// the minimum payment amount
	MinimumPaymentAmount float64 `protobuf:"fixed64,22,opt,name=minimum_payment_amount,json=minimumPaymentAmount,proto3" json:"minimum_payment_amount,omitempty"`
	// the next payment due date
	NextPaymentDueDate string `protobuf:"bytes,23,opt,name=next_payment_due_date,json=nextPaymentDueDate,proto3" json:"next_payment_due_date,omitempty"`
	// the bank account status
	Status                BankAccountStatus                   `protobuf:"varint,24,opt,name=status,proto3,enum=financial_service.v1.BankAccountStatus" json:"status,omitempty"`
	Transactions          []*PlaidAccountTransaction          `protobuf:"bytes,25,rep,name=transactions,proto3" json:"transactions,omitempty"`
	RecurringTransactions []*PlaidAccountRecurringTransaction `protobuf:"bytes,26,rep,name=recurring_transactions,json=recurringTransactions,proto3" json:"recurring_transactions,omitempty"`
}

func (x *CreditAccount) Reset() {
	*x = CreditAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditAccount) ProtoMessage() {}

func (x *CreditAccount) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditAccount.ProtoReflect.Descriptor instead.
func (*CreditAccount) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreditAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreditAccount) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreditAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreditAccount) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CreditAccount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreditAccount) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CreditAccount) GetCurrentFunds() float64 {
	if x != nil {
		return x.CurrentFunds
	}
	return 0
}

func (x *CreditAccount) GetBalanceLimit() uint64 {
	if x != nil {
		return x.BalanceLimit
	}
	return 0
}

func (x *CreditAccount) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *CreditAccount) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *CreditAccount) GetIsOverdue() bool {
	if x != nil {
		return x.IsOverdue
	}
	return false
}

func (x *CreditAccount) GetLastPaymentAmount() float64 {
	if x != nil {
		return x.LastPaymentAmount
	}
	return 0
}

func (x *CreditAccount) GetLastPaymentDate() string {
	if x != nil {
		return x.LastPaymentDate
	}
	return ""
}

func (x *CreditAccount) GetLastStatementIssueDate() string {
	if x != nil {
		return x.LastStatementIssueDate
	}
	return ""
}

func (x *CreditAccount) GetMinimumAmountDueDate() float64 {
	if x != nil {
		return x.MinimumAmountDueDate
	}
	return 0
}

func (x *CreditAccount) GetNextPaymentDate() string {
	if x != nil {
		return x.NextPaymentDate
	}
	return ""
}

func (x *CreditAccount) GetAprs() []*Apr {
	if x != nil {
		return x.Aprs
	}
	return nil
}

func (x *CreditAccount) GetLastStatementBalance() float64 {
	if x != nil {
		return x.LastStatementBalance
	}
	return 0
}

func (x *CreditAccount) GetMinimumPaymentAmount() float64 {
	if x != nil {
		return x.MinimumPaymentAmount
	}
	return 0
}

func (x *CreditAccount) GetNextPaymentDueDate() string {
	if x != nil {
		return x.NextPaymentDueDate
	}
	return ""
}

func (x *CreditAccount) GetStatus() BankAccountStatus {
	if x != nil {
		return x.Status
	}
	return BankAccountStatus_BANK_ACCOUNT_STATUS_UNSPECIFIED
}

func (x *CreditAccount) GetTransactions() []*PlaidAccountTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *CreditAccount) GetRecurringTransactions() []*PlaidAccountRecurringTransaction {
	if x != nil {
		return x.RecurringTransactions
	}
	return nil
}

type MortgageAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlaidAccountId              string  `protobuf:"bytes,2,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	AccountNumber               string  `protobuf:"bytes,3,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	CurrentLateFee              float64 `protobuf:"fixed64,4,opt,name=current_late_fee,json=currentLateFee,proto3" json:"current_late_fee,omitempty"`
	EscrowBalance               float64 `protobuf:"fixed64,5,opt,name=escrow_balance,json=escrowBalance,proto3" json:"escrow_balance,omitempty"`
	HasPmi                      bool    `protobuf:"varint,6,opt,name=has_pmi,json=hasPmi,proto3" json:"has_pmi,omitempty"`
	HasPrepaymentPenalty        bool    `protobuf:"varint,7,opt,name=has_prepayment_penalty,json=hasPrepaymentPenalty,proto3" json:"has_prepayment_penalty,omitempty"`
	LastPaymentAmount           float64 `protobuf:"fixed64,9,opt,name=last_payment_amount,json=lastPaymentAmount,proto3" json:"last_payment_amount,omitempty"`
	LastPaymentDate             string  `protobuf:"bytes,10,opt,name=last_payment_date,json=lastPaymentDate,proto3" json:"last_payment_date,omitempty"`
	LoanTerm                    string  `protobuf:"bytes,11,opt,name=loan_term,json=loanTerm,proto3" json:"loan_term,omitempty"`
	LoanTypeDescription         string  `protobuf:"bytes,12,opt,name=loan_type_description,json=loanTypeDescription,proto3" json:"loan_type_description,omitempty"`
	MaturityDate                string  `protobuf:"bytes,13,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	NextMonthlyPayment          float64 `protobuf:"fixed64,14,opt,name=next_monthly_payment,json=nextMonthlyPayment,proto3" json:"next_monthly_payment,omitempty"`
	NextPaymentDueDate          string  `protobuf:"bytes,15,opt,name=next_payment_due_date,json=nextPaymentDueDate,proto3" json:"next_payment_due_date,omitempty"`
	OriginalPrincipalBalance    float64 `protobuf:"fixed64,16,opt,name=original_principal_balance,json=originalPrincipalBalance,proto3" json:"original_principal_balance,omitempty"`
	OriginalPropertyValue       float64 `protobuf:"fixed64,17,opt,name=original_property_value,json=originalPropertyValue,proto3" json:"original_property_value,omitempty"`
	OutstandingPrincipalBalance float64 `protobuf:"fixed64,18,opt,name=outstanding_principal_balance,json=outstandingPrincipalBalance,proto3" json:"outstanding_principal_balance,omitempty"`
	PaymentAmount               float64 `protobuf:"fixed64,19,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`
	PaymentDate                 string  `protobuf:"bytes,20,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	OriginationDate             string  `protobuf:"bytes,25,opt,name=origination_date,json=originationDate,proto3" json:"origination_date,omitempty"`
	OriginationPrincipalAmount  float64 `protobuf:"fixed64,26,opt,name=origination_principal_amount,json=originationPrincipalAmount,proto3" json:"origination_principal_amount,omitempty"`
	PastDueAmount               float64 `protobuf:"fixed64,28,opt,name=past_due_amount,json=pastDueAmount,proto3" json:"past_due_amount,omitempty"`
	YtdInterestPaid             float64 `protobuf:"fixed64,29,opt,name=ytd_interest_paid,json=ytdInterestPaid,proto3" json:"ytd_interest_paid,omitempty"`
	YtdPrincipalPaid            float64 `protobuf:"fixed64,30,opt,name=ytd_principal_paid,json=ytdPrincipalPaid,proto3" json:"ytd_principal_paid,omitempty"`
	PropertyAddressCity         string  `protobuf:"bytes,31,opt,name=property_address_city,json=propertyAddressCity,proto3" json:"property_address_city,omitempty"`
	PropertyAddressState        string  `protobuf:"bytes,32,opt,name=property_address_state,json=propertyAddressState,proto3" json:"property_address_state,omitempty"`
	PropertyAddressStreet       string  `protobuf:"bytes,33,opt,name=property_address_street,json=propertyAddressStreet,proto3" json:"property_address_street,omitempty"`
	PropertyAddressPostalCode   string  `protobuf:"bytes,34,opt,name=property_address_postal_code,json=propertyAddressPostalCode,proto3" json:"property_address_postal_code,omitempty"`
	PropertyRegion              string  `protobuf:"bytes,35,opt,name=property_region,json=propertyRegion,proto3" json:"property_region,omitempty"`
	PropertyCountry             string  `protobuf:"bytes,36,opt,name=property_country,json=propertyCountry,proto3" json:"property_country,omitempty"`
	InterestRatePercentage      float64 `protobuf:"fixed64,37,opt,name=interest_rate_percentage,json=interestRatePercentage,proto3" json:"interest_rate_percentage,omitempty"`
	InterestRateType            string  `protobuf:"bytes,38,opt,name=interest_rate_type,json=interestRateType,proto3" json:"interest_rate_type,omitempty"`
	// the bank account status
	Status BankAccountStatus `protobuf:"varint,39,opt,name=status,proto3,enum=financial_service.v1.BankAccountStatus" json:"status,omitempty"`
}

func (x *MortgageAccount) Reset() {
	*x = MortgageAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MortgageAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MortgageAccount) ProtoMessage() {}

func (x *MortgageAccount) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MortgageAccount.ProtoReflect.Descriptor instead.
func (*MortgageAccount) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{10}
}

func (x *MortgageAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MortgageAccount) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *MortgageAccount) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *MortgageAccount) GetCurrentLateFee() float64 {
	if x != nil {
		return x.CurrentLateFee
	}
	return 0
}

func (x *MortgageAccount) GetEscrowBalance() float64 {
	if x != nil {
		return x.EscrowBalance
	}
	return 0
}

func (x *MortgageAccount) GetHasPmi() bool {
	if x != nil {
		return x.HasPmi
	}
	return false
}

func (x *MortgageAccount) GetHasPrepaymentPenalty() bool {
	if x != nil {
		return x.HasPrepaymentPenalty
	}
	return false
}

func (x *MortgageAccount) GetLastPaymentAmount() float64 {
	if x != nil {
		return x.LastPaymentAmount
	}
	return 0
}

func (x *MortgageAccount) GetLastPaymentDate() string {
	if x != nil {
		return x.LastPaymentDate
	}
	return ""
}

func (x *MortgageAccount) GetLoanTerm() string {
	if x != nil {
		return x.LoanTerm
	}
	return ""
}

func (x *MortgageAccount) GetLoanTypeDescription() string {
	if x != nil {
		return x.LoanTypeDescription
	}
	return ""
}

func (x *MortgageAccount) GetMaturityDate() string {
	if x != nil {
		return x.MaturityDate
	}
	return ""
}

func (x *MortgageAccount) GetNextMonthlyPayment() float64 {
	if x != nil {
		return x.NextMonthlyPayment
	}
	return 0
}

func (x *MortgageAccount) GetNextPaymentDueDate() string {
	if x != nil {
		return x.NextPaymentDueDate
	}
	return ""
}

func (x *MortgageAccount) GetOriginalPrincipalBalance() float64 {
	if x != nil {
		return x.OriginalPrincipalBalance
	}
	return 0
}

func (x *MortgageAccount) GetOriginalPropertyValue() float64 {
	if x != nil {
		return x.OriginalPropertyValue
	}
	return 0
}

func (x *MortgageAccount) GetOutstandingPrincipalBalance() float64 {
	if x != nil {
		return x.OutstandingPrincipalBalance
	}
	return 0
}

func (x *MortgageAccount) GetPaymentAmount() float64 {
	if x != nil {
		return x.PaymentAmount
	}
	return 0
}

func (x *MortgageAccount) GetPaymentDate() string {
	if x != nil {
		return x.PaymentDate
	}
	return ""
}

func (x *MortgageAccount) GetOriginationDate() string {
	if x != nil {
		return x.OriginationDate
	}
	return ""
}

func (x *MortgageAccount) GetOriginationPrincipalAmount() float64 {
	if x != nil {
		return x.OriginationPrincipalAmount
	}
	return 0
}

func (x *MortgageAccount) GetPastDueAmount() float64 {
	if x != nil {
		return x.PastDueAmount
	}
	return 0
}

func (x *MortgageAccount) GetYtdInterestPaid() float64 {
	if x != nil {
		return x.YtdInterestPaid
	}
	return 0
}

func (x *MortgageAccount) GetYtdPrincipalPaid() float64 {
	if x != nil {
		return x.YtdPrincipalPaid
	}
	return 0
}

func (x *MortgageAccount) GetPropertyAddressCity() string {
	if x != nil {
		return x.PropertyAddressCity
	}
	return ""
}

func (x *MortgageAccount) GetPropertyAddressState() string {
	if x != nil {
		return x.PropertyAddressState
	}
	return ""
}

func (x *MortgageAccount) GetPropertyAddressStreet() string {
	if x != nil {
		return x.PropertyAddressStreet
	}
	return ""
}

func (x *MortgageAccount) GetPropertyAddressPostalCode() string {
	if x != nil {
		return x.PropertyAddressPostalCode
	}
	return ""
}

func (x *MortgageAccount) GetPropertyRegion() string {
	if x != nil {
		return x.PropertyRegion
	}
	return ""
}

func (x *MortgageAccount) GetPropertyCountry() string {
	if x != nil {
		return x.PropertyCountry
	}
	return ""
}

func (x *MortgageAccount) GetInterestRatePercentage() float64 {
	if x != nil {
		return x.InterestRatePercentage
	}
	return 0
}

func (x *MortgageAccount) GetInterestRateType() string {
	if x != nil {
		return x.InterestRateType
	}
	return ""
}

func (x *MortgageAccount) GetStatus() BankAccountStatus {
	if x != nil {
		return x.Status
	}
	return BankAccountStatus_BANK_ACCOUNT_STATUS_UNSPECIFIED
}

type InvestmentAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the user id to which this bank account is tied to
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the account name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// the bank account number
	Number string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// the bank account type
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// the bank account balance
	Balance      float32 `protobuf:"fixed32,6,opt,name=balance,proto3" json:"balance,omitempty"`
	CurrentFunds float64 `protobuf:"fixed64,9,opt,name=current_funds,json=currentFunds,proto3" json:"current_funds,omitempty"`
	BalanceLimit uint64  `protobuf:"varint,10,opt,name=balance_limit,json=balanceLimit,proto3" json:"balance_limit,omitempty"`
	// plaid account id mapped to this bank account
	PlaidAccountId string `protobuf:"bytes,12,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	// accoint subtype
	Subtype string `protobuf:"bytes,13,opt,name=subtype,proto3" json:"subtype,omitempty"`
	// invesment holding is the set of securities this account witholds
	Holdings []*InvesmentHolding `protobuf:"bytes,7,rep,name=holdings,proto3" json:"holdings,omitempty"`
	// the set of securities this account witholds
	Securities []*InvestmentSecurity `protobuf:"bytes,8,rep,name=securities,proto3" json:"securities,omitempty"`
	// the bank account status
	Status       BankAccountStatus          `protobuf:"varint,14,opt,name=status,proto3,enum=financial_service.v1.BankAccountStatus" json:"status,omitempty"`
	Transactions []*PlaidAccountTransaction `protobuf:"bytes,16,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *InvestmentAccount) Reset() {
	*x = InvestmentAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestmentAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestmentAccount) ProtoMessage() {}

func (x *InvestmentAccount) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestmentAccount.ProtoReflect.Descriptor instead.
func (*InvestmentAccount) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{11}
}

func (x *InvestmentAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvestmentAccount) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InvestmentAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvestmentAccount) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *InvestmentAccount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InvestmentAccount) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *InvestmentAccount) GetCurrentFunds() float64 {
	if x != nil {
		return x.CurrentFunds
	}
	return 0
}

func (x *InvestmentAccount) GetBalanceLimit() uint64 {
	if x != nil {
		return x.BalanceLimit
	}
	return 0
}

func (x *InvestmentAccount) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *InvestmentAccount) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *InvestmentAccount) GetHoldings() []*InvesmentHolding {
	if x != nil {
		return x.Holdings
	}
	return nil
}

func (x *InvestmentAccount) GetSecurities() []*InvestmentSecurity {
	if x != nil {
		return x.Securities
	}
	return nil
}

func (x *InvestmentAccount) GetStatus() BankAccountStatus {
	if x != nil {
		return x.Status
	}
	return BankAccountStatus_BANK_ACCOUNT_STATUS_UNSPECIFIED
}

func (x *InvestmentAccount) GetTransactions() []*PlaidAccountTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type BankAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the user id to which this bank account is tied to
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the bank account name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// the bank account number
	Number string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// the bank account type
	Type BankAccountType `protobuf:"varint,5,opt,name=type,proto3,enum=financial_service.v1.BankAccountType" json:"type,omitempty"`
	// the bank account balance
	Balance float32 `protobuf:"fixed32,6,opt,name=balance,proto3" json:"balance,omitempty"`
	// the bank account currency
	Currency     string  `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	CurrentFunds float64 `protobuf:"fixed64,9,opt,name=current_funds,json=currentFunds,proto3" json:"current_funds,omitempty"`
	BalanceLimit uint64  `protobuf:"varint,10,opt,name=balance_limit,json=balanceLimit,proto3" json:"balance_limit,omitempty"`
	// the set of "virtualized accounts this user witholds"
	// NOTE: these pockets are automatically created by the system
	// when a user connects a bank account
	Pockets []*Pocket `protobuf:"bytes,11,rep,name=pockets,proto3" json:"pockets,omitempty"`
	// plaid account id mapped to this bank account
	PlaidAccountId string `protobuf:"bytes,13,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	// account subtype
	Subtype string `protobuf:"bytes,14,opt,name=subtype,proto3" json:"subtype,omitempty"`
	// the bank account status
	Status BankAccountStatus `protobuf:"varint,15,opt,name=status,proto3,enum=financial_service.v1.BankAccountStatus" json:"status,omitempty"`
	// the set of transactions tied to this bank account
	Transactions          []*PlaidAccountTransaction          `protobuf:"bytes,16,rep,name=transactions,proto3" json:"transactions,omitempty"`
	RecurringTransactions []*PlaidAccountRecurringTransaction `protobuf:"bytes,17,rep,name=recurring_transactions,json=recurringTransactions,proto3" json:"recurring_transactions,omitempty"`
}

func (x *BankAccount) Reset() {
	*x = BankAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAccount) ProtoMessage() {}

func (x *BankAccount) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAccount.ProtoReflect.Descriptor instead.
func (*BankAccount) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{12}
}

func (x *BankAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BankAccount) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BankAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BankAccount) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *BankAccount) GetType() BankAccountType {
	if x != nil {
		return x.Type
	}
	return BankAccountType_BANK_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *BankAccount) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *BankAccount) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BankAccount) GetCurrentFunds() float64 {
	if x != nil {
		return x.CurrentFunds
	}
	return 0
}

func (x *BankAccount) GetBalanceLimit() uint64 {
	if x != nil {
		return x.BalanceLimit
	}
	return 0
}

func (x *BankAccount) GetPockets() []*Pocket {
	if x != nil {
		return x.Pockets
	}
	return nil
}

func (x *BankAccount) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *BankAccount) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *BankAccount) GetStatus() BankAccountStatus {
	if x != nil {
		return x.Status
	}
	return BankAccountStatus_BANK_ACCOUNT_STATUS_UNSPECIFIED
}

func (x *BankAccount) GetTransactions() []*PlaidAccountTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BankAccount) GetRecurringTransactions() []*PlaidAccountRecurringTransaction {
	if x != nil {
		return x.RecurringTransactions
	}
	return nil
}

// Pocket is an abstraction of a over a bank account. A user can has at most 4 pockets per connected account
// NOTE: these pockets are automatically created by the system and should not be exposed for mutation
// by any client. The only operations that can be performed against a pocket are:
// 1. Get the pocket
// 2. Get the pocket's smart goals
// 3. Adding a smart goal to the pocket
type Pocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the set of smart goals this user witholds
	Goals []*SmartGoal `protobuf:"bytes,3,rep,name=goals,proto3" json:"goals,omitempty"`
	// The type of the pocket
	Type PocketType `protobuf:"varint,4,opt,name=type,proto3,enum=financial_service.v1.PocketType" json:"type,omitempty"`
}

func (x *Pocket) Reset() {
	*x = Pocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pocket) ProtoMessage() {}

func (x *Pocket) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pocket.ProtoReflect.Descriptor instead.
func (*Pocket) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{13}
}

func (x *Pocket) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pocket) GetGoals() []*SmartGoal {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *Pocket) GetType() PocketType {
	if x != nil {
		return x.Type
	}
	return PocketType_POCKET_TYPE_UNSPECIFIED
}

// SmartGoal: The Goals table stores information about each financial goal, including the name of the goal,
// its description, the target amount of money the user wants to save or invest, and the expected date of completion.
//
// The Goals table also includes columns for the start date of the goal, the current amount of money saved or
// invested towards the goal, and a boolean flag indicating whether the goal has been achieved.
// These additional columns allow the user to track their progress towards the goal and see how much
// more they need to save or invest to reach their target amount.
type SmartGoal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the user id to which this goal is tied to
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The name of the goal
	// Validations:
	// - must be at least 3 characters long
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the goal
	// Validations:
	// - must be at least 3 characters long
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// wether the goal has been achieved or not
	IsCompleted bool `protobuf:"varint,5,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	// The type of the goal
	GoalType GoalType `protobuf:"varint,9,opt,name=goal_type,json=goalType,proto3,enum=financial_service.v1.GoalType" json:"goal_type,omitempty"`
	// The duration of the goal
	Duration string `protobuf:"bytes,10,opt,name=duration,proto3" json:"duration,omitempty"`
	// the start date of the goal
	StartDate string `protobuf:"bytes,11,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// the end date of the goal
	EndDate string `protobuf:"bytes,12,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// the target amount of the goal
	// amount of money the user wants to save or invest
	TargetAmount string `protobuf:"bytes,13,opt,name=target_amount,json=targetAmount,proto3" json:"target_amount,omitempty"`
	// the current amount of the goal
	// current amount of money saved or invested towards the goal
	CurrentAmount string `protobuf:"bytes,14,opt,name=current_amount,json=currentAmount,proto3" json:"current_amount,omitempty"`
	// Milestones associated with the goal
	Milestones []*Milestone `protobuf:"bytes,15,rep,name=milestones,proto3" json:"milestones,omitempty"`
	// Forecasts associated with the goal
	Forecasts *Forecast `protobuf:"bytes,16,opt,name=forecasts,proto3" json:"forecasts,omitempty"`
	// Notes associated with the goal
	Notes []*SmartNote `protobuf:"bytes,17,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *SmartGoal) Reset() {
	*x = SmartGoal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartGoal) ProtoMessage() {}

func (x *SmartGoal) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartGoal.ProtoReflect.Descriptor instead.
func (*SmartGoal) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{14}
}

func (x *SmartGoal) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SmartGoal) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SmartGoal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmartGoal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SmartGoal) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

func (x *SmartGoal) GetGoalType() GoalType {
	if x != nil {
		return x.GoalType
	}
	return GoalType_GOAL_TYPE_UNSPECIFIED
}

func (x *SmartGoal) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *SmartGoal) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SmartGoal) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SmartGoal) GetTargetAmount() string {
	if x != nil {
		return x.TargetAmount
	}
	return ""
}

func (x *SmartGoal) GetCurrentAmount() string {
	if x != nil {
		return x.CurrentAmount
	}
	return ""
}

func (x *SmartGoal) GetMilestones() []*Milestone {
	if x != nil {
		return x.Milestones
	}
	return nil
}

func (x *SmartGoal) GetForecasts() *Forecast {
	if x != nil {
		return x.Forecasts
	}
	return nil
}

func (x *SmartGoal) GetNotes() []*SmartNote {
	if x != nil {
		return x.Notes
	}
	return nil
}

// Note schema
type SmartNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the note
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user id who created the note. This can be useful if in the future you allow multiple users to add notes to the same goal.
	UserId uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The content of the note
	// Validations:
	// - must be at least 3 characters long
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// Timestamp indicating when the note was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp indicating when the note was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SmartNote) Reset() {
	*x = SmartNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartNote) ProtoMessage() {}

func (x *SmartNote) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartNote.ProtoReflect.Descriptor instead.
func (*SmartNote) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{15}
}

func (x *SmartNote) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SmartNote) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SmartNote) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SmartNote) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SmartNote) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// The Forecast table stores information about each forecast generated for a particular goal,
// including the forecast date, the forecasted amount of money saved or invested for the
// goal by the target date, and the variance between the forecasted and target amounts.
// This allows the user to track how well they are progressing towards their goal and make adjustments as needed.
type Forecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the forecasted amount of the goal
	ForecastedAmount string `protobuf:"bytes,2,opt,name=forecasted_amount,json=forecastedAmount,proto3" json:"forecasted_amount,omitempty"`
	// the forecasted completion date of the goal
	ForecastedCompletionDate string `protobuf:"bytes,3,opt,name=forecasted_completion_date,json=forecastedCompletionDate,proto3" json:"forecasted_completion_date,omitempty"`
	// the forecasted variance of the goal between the forecasted and target amounts
	VarianceAmount string `protobuf:"bytes,4,opt,name=variance_amount,json=varianceAmount,proto3" json:"variance_amount,omitempty"`
}

func (x *Forecast) Reset() {
	*x = Forecast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forecast) ProtoMessage() {}

func (x *Forecast) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forecast.ProtoReflect.Descriptor instead.
func (*Forecast) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{16}
}

func (x *Forecast) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Forecast) GetForecastedAmount() string {
	if x != nil {
		return x.ForecastedAmount
	}
	return ""
}

func (x *Forecast) GetForecastedCompletionDate() string {
	if x != nil {
		return x.ForecastedCompletionDate
	}
	return ""
}

func (x *Forecast) GetVarianceAmount() string {
	if x != nil {
		return x.VarianceAmount
	}
	return ""
}

// Milestone: represents a milestone in the context of simfinni. A financial milestone that is both smart
// and achievable. A milestone is a sub goal of a goal and is tied to a goal by the goal id
type Milestone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the milestone
	// Validations:
	// - must be at least 3 characters long
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the miletone
	// Validations:
	// - must be at least 3 characters long
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// the target date of the milestone
	// Validations:
	// - must be at least 3 characters long
	TargetDate string `protobuf:"bytes,4,opt,name=target_date,json=targetDate,proto3" json:"target_date,omitempty"`
	// the target amount of the milestone
	TargetAmount string `protobuf:"bytes,5,opt,name=target_amount,json=targetAmount,proto3" json:"target_amount,omitempty"`
	// wethe milestone is completed or not
	IsCompleted bool `protobuf:"varint,6,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	// the budget associated with the milestone
	Budget *Budget `protobuf:"bytes,13,opt,name=budget,proto3" json:"budget,omitempty"`
}

func (x *Milestone) Reset() {
	*x = Milestone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Milestone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Milestone) ProtoMessage() {}

func (x *Milestone) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Milestone.ProtoReflect.Descriptor instead.
func (*Milestone) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{17}
}

func (x *Milestone) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Milestone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Milestone) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Milestone) GetTargetDate() string {
	if x != nil {
		return x.TargetDate
	}
	return ""
}

func (x *Milestone) GetTargetAmount() string {
	if x != nil {
		return x.TargetAmount
	}
	return ""
}

func (x *Milestone) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

func (x *Milestone) GetBudget() *Budget {
	if x != nil {
		return x.Budget
	}
	return nil
}

// The Budgets table stores information about each budget created by the user,
// including the name of the budget, the start and end dates, and the user ID.
type Budget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the budget
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// the time the goal was created
	StartDate string `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// the time the goal was updated
	EndDate string `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// category associated with the goal
	Category *Category `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *Budget) Reset() {
	*x = Budget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Budget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Budget) ProtoMessage() {}

func (x *Budget) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Budget.ProtoReflect.Descriptor instead.
func (*Budget) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{18}
}

func (x *Budget) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Budget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Budget) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Budget) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Budget) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Budget) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

// The Categories table stores information about the different categories of expenses or income,
// such as "Housing", "Food", "Transportation", and "Entertainment". Each category has one or more
// subcategories, which are stored in the Subcategories table.
//
// For example, the "Housing" category might have subcategories for "Rent", "Utilities", and "Home Maintenance".
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the category
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the category
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// the sub categories of the category
	Subcategories []string `protobuf:"bytes,4,rep,name=subcategories,proto3" json:"subcategories,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{19}
}

func (x *Category) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Category) GetSubcategories() []string {
	if x != nil {
		return x.Subcategories
	}
	return nil
}

type InvesmentHolding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the investment holding
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// plaid account id
	PlaidAccountId           string  `protobuf:"bytes,3,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	CostBasis                float64 `protobuf:"fixed64,4,opt,name=cost_basis,json=costBasis,proto3" json:"cost_basis,omitempty"`
	InstitutionPrice         float64 `protobuf:"fixed64,5,opt,name=institution_price,json=institutionPrice,proto3" json:"institution_price,omitempty"`
	InstitutionPriceAsOf     string  `protobuf:"bytes,6,opt,name=institution_price_as_of,json=institutionPriceAsOf,proto3" json:"institution_price_as_of,omitempty"`
	InstitutionPriceDatetime string  `protobuf:"bytes,7,opt,name=institution_price_datetime,json=institutionPriceDatetime,proto3" json:"institution_price_datetime,omitempty"`
	InstitutionValue         float64 `protobuf:"fixed64,8,opt,name=institution_value,json=institutionValue,proto3" json:"institution_value,omitempty"`
	IsoCurrencyCode          string  `protobuf:"bytes,9,opt,name=iso_currency_code,json=isoCurrencyCode,proto3" json:"iso_currency_code,omitempty"`
	Quantity                 float64 `protobuf:"fixed64,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	SecurityId               string  `protobuf:"bytes,11,opt,name=security_id,json=securityId,proto3" json:"security_id,omitempty"`
	UnofficialCurrencyCode   string  `protobuf:"bytes,12,opt,name=unofficial_currency_code,json=unofficialCurrencyCode,proto3" json:"unofficial_currency_code,omitempty"`
}

func (x *InvesmentHolding) Reset() {
	*x = InvesmentHolding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvesmentHolding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvesmentHolding) ProtoMessage() {}

func (x *InvesmentHolding) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvesmentHolding.ProtoReflect.Descriptor instead.
func (*InvesmentHolding) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{20}
}

func (x *InvesmentHolding) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvesmentHolding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvesmentHolding) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *InvesmentHolding) GetCostBasis() float64 {
	if x != nil {
		return x.CostBasis
	}
	return 0
}

func (x *InvesmentHolding) GetInstitutionPrice() float64 {
	if x != nil {
		return x.InstitutionPrice
	}
	return 0
}

func (x *InvesmentHolding) GetInstitutionPriceAsOf() string {
	if x != nil {
		return x.InstitutionPriceAsOf
	}
	return ""
}

func (x *InvesmentHolding) GetInstitutionPriceDatetime() string {
	if x != nil {
		return x.InstitutionPriceDatetime
	}
	return ""
}

func (x *InvesmentHolding) GetInstitutionValue() float64 {
	if x != nil {
		return x.InstitutionValue
	}
	return 0
}

func (x *InvesmentHolding) GetIsoCurrencyCode() string {
	if x != nil {
		return x.IsoCurrencyCode
	}
	return ""
}

func (x *InvesmentHolding) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *InvesmentHolding) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *InvesmentHolding) GetUnofficialCurrencyCode() string {
	if x != nil {
		return x.UnofficialCurrencyCode
	}
	return ""
}

type InvestmentSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id                     uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClosePrice             float64 `protobuf:"fixed64,2,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	ClosePriceAsOf         string  `protobuf:"bytes,3,opt,name=close_price_as_of,json=closePriceAsOf,proto3" json:"close_price_as_of,omitempty"`
	Cusip                  string  `protobuf:"bytes,4,opt,name=cusip,proto3" json:"cusip,omitempty"`
	InstitutionId          string  `protobuf:"bytes,5,opt,name=institution_id,json=institutionId,proto3" json:"institution_id,omitempty"`
	InstitutionSecurityId  string  `protobuf:"bytes,6,opt,name=institution_security_id,json=institutionSecurityId,proto3" json:"institution_security_id,omitempty"`
	IsCashEquivalent       bool    `protobuf:"varint,7,opt,name=is_cash_equivalent,json=isCashEquivalent,proto3" json:"is_cash_equivalent,omitempty"`
	Isin                   string  `protobuf:"bytes,8,opt,name=isin,proto3" json:"isin,omitempty"`
	IsoCurrencyCode        string  `protobuf:"bytes,9,opt,name=iso_currency_code,json=isoCurrencyCode,proto3" json:"iso_currency_code,omitempty"`
	Name                   string  `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	ProxySecurityId        string  `protobuf:"bytes,11,opt,name=proxy_security_id,json=proxySecurityId,proto3" json:"proxy_security_id,omitempty"`
	SecurityId             string  `protobuf:"bytes,12,opt,name=security_id,json=securityId,proto3" json:"security_id,omitempty"`
	Sedol                  string  `protobuf:"bytes,13,opt,name=sedol,proto3" json:"sedol,omitempty"`
	TickerSymbol           string  `protobuf:"bytes,14,opt,name=ticker_symbol,json=tickerSymbol,proto3" json:"ticker_symbol,omitempty"`
	Type                   string  `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	UnofficialCurrencyCode string  `protobuf:"bytes,16,opt,name=unofficial_currency_code,json=unofficialCurrencyCode,proto3" json:"unofficial_currency_code,omitempty"`
	UpdateDatetime         string  `protobuf:"bytes,17,opt,name=update_datetime,json=updateDatetime,proto3" json:"update_datetime,omitempty"`
}

func (x *InvestmentSecurity) Reset() {
	*x = InvestmentSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestmentSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestmentSecurity) ProtoMessage() {}

func (x *InvestmentSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestmentSecurity.ProtoReflect.Descriptor instead.
func (*InvestmentSecurity) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{21}
}

func (x *InvestmentSecurity) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvestmentSecurity) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *InvestmentSecurity) GetClosePriceAsOf() string {
	if x != nil {
		return x.ClosePriceAsOf
	}
	return ""
}

func (x *InvestmentSecurity) GetCusip() string {
	if x != nil {
		return x.Cusip
	}
	return ""
}

func (x *InvestmentSecurity) GetInstitutionId() string {
	if x != nil {
		return x.InstitutionId
	}
	return ""
}

func (x *InvestmentSecurity) GetInstitutionSecurityId() string {
	if x != nil {
		return x.InstitutionSecurityId
	}
	return ""
}

func (x *InvestmentSecurity) GetIsCashEquivalent() bool {
	if x != nil {
		return x.IsCashEquivalent
	}
	return false
}

func (x *InvestmentSecurity) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *InvestmentSecurity) GetIsoCurrencyCode() string {
	if x != nil {
		return x.IsoCurrencyCode
	}
	return ""
}

func (x *InvestmentSecurity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvestmentSecurity) GetProxySecurityId() string {
	if x != nil {
		return x.ProxySecurityId
	}
	return ""
}

func (x *InvestmentSecurity) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *InvestmentSecurity) GetSedol() string {
	if x != nil {
		return x.Sedol
	}
	return ""
}

func (x *InvestmentSecurity) GetTickerSymbol() string {
	if x != nil {
		return x.TickerSymbol
	}
	return ""
}

func (x *InvestmentSecurity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InvestmentSecurity) GetUnofficialCurrencyCode() string {
	if x != nil {
		return x.UnofficialCurrencyCode
	}
	return ""
}

func (x *InvestmentSecurity) GetUpdateDatetime() string {
	if x != nil {
		return x.UpdateDatetime
	}
	return ""
}

type Apr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Percentage           float64 `protobuf:"fixed64,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Type                 string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	BalanceSubjectToApr  float64 `protobuf:"fixed64,4,opt,name=balance_subject_to_apr,json=balanceSubjectToApr,proto3" json:"balance_subject_to_apr,omitempty"`
	InterestChargeAmount float64 `protobuf:"fixed64,5,opt,name=interest_charge_amount,json=interestChargeAmount,proto3" json:"interest_charge_amount,omitempty"`
}

func (x *Apr) Reset() {
	*x = Apr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Apr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Apr) ProtoMessage() {}

func (x *Apr) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Apr.ProtoReflect.Descriptor instead.
func (*Apr) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{22}
}

func (x *Apr) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Apr) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Apr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Apr) GetBalanceSubjectToApr() float64 {
	if x != nil {
		return x.BalanceSubjectToApr
	}
	return 0
}

func (x *Apr) GetInterestChargeAmount() float64 {
	if x != nil {
		return x.InterestChargeAmount
	}
	return 0
}

// ===============================
type MergeLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id                      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Integration             string `protobuf:"bytes,2,opt,name=integration,proto3" json:"integration,omitempty"`
	IntegrationSlug         string `protobuf:"bytes,3,opt,name=integration_slug,json=integrationSlug,proto3" json:"integration_slug,omitempty"`
	Category                string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	EndUserOriginId         string `protobuf:"bytes,5,opt,name=end_user_origin_id,json=endUserOriginId,proto3" json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName string `protobuf:"bytes,6,opt,name=end_user_organization_name,json=endUserOrganizationName,proto3" json:"end_user_organization_name,omitempty"`
	EndUserEmailAddress     string `protobuf:"bytes,7,opt,name=end_user_email_address,json=endUserEmailAddress,proto3" json:"end_user_email_address,omitempty"`
	Status                  string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	WebhookListenerUrl      string `protobuf:"bytes,9,opt,name=webhook_listener_url,json=webhookListenerUrl,proto3" json:"webhook_listener_url,omitempty"`
	IsDuplicate             bool   `protobuf:"varint,10,opt,name=is_duplicate,json=isDuplicate,proto3" json:"is_duplicate,omitempty"`
	Token                   *Token `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`
	IntegrationName         string `protobuf:"bytes,12,opt,name=integration_name,json=integrationName,proto3" json:"integration_name,omitempty"`
	IntegrationImage        string `protobuf:"bytes,13,opt,name=integration_image,json=integrationImage,proto3" json:"integration_image,omitempty"`
	IntegrationSquareImage  string `protobuf:"bytes,14,opt,name=integration_square_image,json=integrationSquareImage,proto3" json:"integration_square_image,omitempty"`
	// When you request a link token to initiate a Merge Link session, Merge determines whether to create a new linked account or modify
	// an existing linked account based on a combination of the end_user_origin_id and the category. If you want to support multiple
	// connections, you simply need to provide a different end_user_origin_id for each company.
	//
	// This approach enables you to link multiple instances of the same integration (like QuickBooks) for the same end user.
	// It also has the added security benefit of not exposing any internal end_user_origin_ids.
	Account              []*LinkedAccountingAccount `protobuf:"bytes,15,rep,name=account,proto3" json:"account,omitempty"`
	MergeLinkedAccountId string                     `protobuf:"bytes,16,opt,name=merge_linked_account_id,json=mergeLinkedAccountId,proto3" json:"merge_linked_account_id,omitempty"`
}

func (x *MergeLink) Reset() {
	*x = MergeLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeLink) ProtoMessage() {}

func (x *MergeLink) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeLink.ProtoReflect.Descriptor instead.
func (*MergeLink) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{23}
}

func (x *MergeLink) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MergeLink) GetIntegration() string {
	if x != nil {
		return x.Integration
	}
	return ""
}

func (x *MergeLink) GetIntegrationSlug() string {
	if x != nil {
		return x.IntegrationSlug
	}
	return ""
}

func (x *MergeLink) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MergeLink) GetEndUserOriginId() string {
	if x != nil {
		return x.EndUserOriginId
	}
	return ""
}

func (x *MergeLink) GetEndUserOrganizationName() string {
	if x != nil {
		return x.EndUserOrganizationName
	}
	return ""
}

func (x *MergeLink) GetEndUserEmailAddress() string {
	if x != nil {
		return x.EndUserEmailAddress
	}
	return ""
}

func (x *MergeLink) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MergeLink) GetWebhookListenerUrl() string {
	if x != nil {
		return x.WebhookListenerUrl
	}
	return ""
}

func (x *MergeLink) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *MergeLink) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *MergeLink) GetIntegrationName() string {
	if x != nil {
		return x.IntegrationName
	}
	return ""
}

func (x *MergeLink) GetIntegrationImage() string {
	if x != nil {
		return x.IntegrationImage
	}
	return ""
}

func (x *MergeLink) GetIntegrationSquareImage() string {
	if x != nil {
		return x.IntegrationSquareImage
	}
	return ""
}

func (x *MergeLink) GetAccount() []*LinkedAccountingAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *MergeLink) GetMergeLinkedAccountId() string {
	if x != nil {
		return x.MergeLinkedAccountId
	}
	return ""
}

type LinkedAccountingAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Represent a company's attachments. a business can have many attachments
	Attachments []*Attachments `protobuf:"bytes,2,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// The CompanyInfo object is used to represent a company's information.
	CompanyInfo []*CompanyInfo `protobuf:"bytes,3,rep,name=company_info,json=companyInfo,proto3" json:"company_info,omitempty"`
	// a business can have many purchase orders
	PurchaseOrders []*PurchaseOrder `protobuf:"bytes,4,rep,name=purchase_orders,json=purchaseOrders,proto3" json:"purchase_orders,omitempty"`
	// a business can have one report object
	ReportDetails       *ReportDetails      `protobuf:"bytes,5,opt,name=report_details,json=reportDetails,proto3" json:"report_details,omitempty"`
	ReferenceDetails    *ReferenceDetails   `protobuf:"bytes,6,opt,name=reference_details,json=referenceDetails,proto3" json:"reference_details,omitempty"`
	TransactionsDetails *TransactionDetails `protobuf:"bytes,7,opt,name=transactions_details,json=transactionsDetails,proto3" json:"transactions_details,omitempty"`
}

func (x *LinkedAccountingAccount) Reset() {
	*x = LinkedAccountingAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedAccountingAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedAccountingAccount) ProtoMessage() {}

func (x *LinkedAccountingAccount) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedAccountingAccount.ProtoReflect.Descriptor instead.
func (*LinkedAccountingAccount) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{24}
}

func (x *LinkedAccountingAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LinkedAccountingAccount) GetAttachments() []*Attachments {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *LinkedAccountingAccount) GetCompanyInfo() []*CompanyInfo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *LinkedAccountingAccount) GetPurchaseOrders() []*PurchaseOrder {
	if x != nil {
		return x.PurchaseOrders
	}
	return nil
}

func (x *LinkedAccountingAccount) GetReportDetails() *ReportDetails {
	if x != nil {
		return x.ReportDetails
	}
	return nil
}

func (x *LinkedAccountingAccount) GetReferenceDetails() *ReferenceDetails {
	if x != nil {
		return x.ReferenceDetails
	}
	return nil
}

func (x *LinkedAccountingAccount) GetTransactionsDetails() *TransactionDetails {
	if x != nil {
		return x.TransactionsDetails
	}
	return nil
}

// TransactionDetails: These are the actual financial transactions that occur within an accounting system.
// They include things like Invoices, Payments, Expenses, and Journal Entries.
type TransactionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// a business can have many invoices
	Invoices []*Invoice `protobuf:"bytes,3,rep,name=invoices,proto3" json:"invoices,omitempty"`
	// a business can have many payments
	Payments []*Payment `protobuf:"bytes,4,rep,name=payments,proto3" json:"payments,omitempty"`
	// a business can have many expenses
	Expenses []*Expense `protobuf:"bytes,5,rep,name=expenses,proto3" json:"expenses,omitempty"`
	// a business can have many journal entries
	JournalEntries []*JournalEntry `protobuf:"bytes,6,rep,name=journal_entries,json=journalEntries,proto3" json:"journal_entries,omitempty"`
	// a business can have many transactions
	Transactions []*BusinessTransaction `protobuf:"bytes,7,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// a business can have many vendor credits
	VendorCredits []*VendorCredit `protobuf:"bytes,8,rep,name=vendor_credits,json=vendorCredits,proto3" json:"vendor_credits,omitempty"`
	// a business can have many credit notes
	CreditNotes []*CreditNote `protobuf:"bytes,9,rep,name=credit_notes,json=creditNotes,proto3" json:"credit_notes,omitempty"`
}

func (x *TransactionDetails) Reset() {
	*x = TransactionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDetails) ProtoMessage() {}

func (x *TransactionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDetails.ProtoReflect.Descriptor instead.
func (*TransactionDetails) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{25}
}

func (x *TransactionDetails) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionDetails) GetInvoices() []*Invoice {
	if x != nil {
		return x.Invoices
	}
	return nil
}

func (x *TransactionDetails) GetPayments() []*Payment {
	if x != nil {
		return x.Payments
	}
	return nil
}

func (x *TransactionDetails) GetExpenses() []*Expense {
	if x != nil {
		return x.Expenses
	}
	return nil
}

func (x *TransactionDetails) GetJournalEntries() []*JournalEntry {
	if x != nil {
		return x.JournalEntries
	}
	return nil
}

func (x *TransactionDetails) GetTransactions() []*BusinessTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *TransactionDetails) GetVendorCredits() []*VendorCredit {
	if x != nil {
		return x.VendorCredits
	}
	return nil
}

func (x *TransactionDetails) GetCreditNotes() []*CreditNote {
	if x != nil {
		return x.CreditNotes
	}
	return nil
}

// ReferenceDetails: These are the objects that provide additional context or information about the transactions.
// They include things like Accounts, Contacts, Items, and Tax Rates.
type ReferenceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Account object is what companies use to track transactions. They can be both bank accounts or a general ledger account (also called a chart of accounts).
	ChartOfAccounts []*BusinessChartOfAccounts `protobuf:"bytes,3,rep,name=chart_of_accounts,json=chartOfAccounts,proto3" json:"chart_of_accounts,omitempty"`
	// a business can have many items
	Items []*Item `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	// a business can have many tax rates
	TaxRates []*TaxRate `protobuf:"bytes,5,rep,name=tax_rates,json=taxRates,proto3" json:"tax_rates,omitempty"`
	// The Contact object refers to either a supplier or a customer.
	Contacts []*Contacts `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *ReferenceDetails) Reset() {
	*x = ReferenceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDetails) ProtoMessage() {}

func (x *ReferenceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDetails.ProtoReflect.Descriptor instead.
func (*ReferenceDetails) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{26}
}

func (x *ReferenceDetails) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReferenceDetails) GetChartOfAccounts() []*BusinessChartOfAccounts {
	if x != nil {
		return x.ChartOfAccounts
	}
	return nil
}

func (x *ReferenceDetails) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ReferenceDetails) GetTaxRates() []*TaxRate {
	if x != nil {
		return x.TaxRates
	}
	return nil
}

func (x *ReferenceDetails) GetContacts() []*Contacts {
	if x != nil {
		return x.Contacts
	}
	return nil
}

// ReportDetails: These are the summaries or overviews of the financial data. They include things
// like Balance Sheets, Income Statements, and Cash Flow Statements.
type ReportDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal to liability and equity combined. This shows the company’s financial health at a specific point in time.
	// a business can have many balance sheets
	BalanceSheets []*BalanceSheet `protobuf:"bytes,17,rep,name=balance_sheets,json=balanceSheets,proto3" json:"balance_sheets,omitempty"`
	// The CashFlowStatement object shows operating activities, investing activities, and financing activities over a period of time (month, quarter, or year).
	// a company can have many cash flow statements
	CashFlowStatements []*CashFlowStatements `protobuf:"bytes,18,rep,name=cash_flow_statements,json=cashFlowStatements,proto3" json:"cash_flow_statements,omitempty"`
	// a business can have many income statements
	IncomeStatements []*IncomeStatement `protobuf:"bytes,23,rep,name=income_statements,json=incomeStatements,proto3" json:"income_statements,omitempty"`
}

func (x *ReportDetails) Reset() {
	*x = ReportDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDetails) ProtoMessage() {}

func (x *ReportDetails) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDetails.ProtoReflect.Descriptor instead.
func (*ReportDetails) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{27}
}

func (x *ReportDetails) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReportDetails) GetBalanceSheets() []*BalanceSheet {
	if x != nil {
		return x.BalanceSheets
	}
	return nil
}

func (x *ReportDetails) GetCashFlowStatements() []*CashFlowStatements {
	if x != nil {
		return x.CashFlowStatements
	}
	return nil
}

func (x *ReportDetails) GetIncomeStatements() []*IncomeStatement {
	if x != nil {
		return x.IncomeStatements
	}
	return nil
}

// The Account object is what companies use to track transactions.
// They can be both bank accounts or a general ledger account (also called a chart of accounts).
//
// Note: a company can have a multitude of these accounts
type BusinessChartOfAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the database record's id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the account id as stored in merge-api. this is a required field
	MergeAccountId string `protobuf:"bytes,2,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
	// The third-party matching id for the object. For example, this field will be the id
	// as seen in quickbooks for a sample remote connection against quickbookks
	RemoteId string `protobuf:"bytes,3,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The account's name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The account's description.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The account's broadest grouping. Possible values include: ASSET, EQUITY, EXPENSE,
	// LIABILITY, REVENUE. In cases where there is no clear mapping, the original
	// value passed through will be returned.
	Classification string `protobuf:"bytes,6,opt,name=classification,proto3" json:"classification,omitempty"`
	// The account's type is a narrower and more specific grouping within the account's classification.
	Type string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// The account's status. Possible values include: ACTIVE, PENDING, INACTIVE. In cases where there is
	//
	//	no clear mapping, the original value passed through will be returned.
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// The account's current balance.
	CurrentBalance float64 `protobuf:"fixed64,9,opt,name=current_balance,json=currentBalance,proto3" json:"current_balance,omitempty"`
	Currency       string  `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	// The account's number.
	AccountNumber string `protobuf:"bytes,11,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	// ID of the parent account.
	ParentAccountId string `protobuf:"bytes,12,opt,name=parent_account_id,json=parentAccountId,proto3" json:"parent_account_id,omitempty"`
	// The company the account belongs to.
	Company string `protobuf:"bytes,13,opt,name=company,proto3" json:"company,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,15,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
}

func (x *BusinessChartOfAccounts) Reset() {
	*x = BusinessChartOfAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessChartOfAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessChartOfAccounts) ProtoMessage() {}

func (x *BusinessChartOfAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessChartOfAccounts.ProtoReflect.Descriptor instead.
func (*BusinessChartOfAccounts) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{28}
}

func (x *BusinessChartOfAccounts) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BusinessChartOfAccounts) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetCurrentBalance() float64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

func (x *BusinessChartOfAccounts) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetParentAccountId() string {
	if x != nil {
		return x.ParentAccountId
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *BusinessChartOfAccounts) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *BusinessChartOfAccounts) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

// The Address object is used to represent a contact's or company's address.
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the database record's id
	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Line 1 of the address's street.
	Street_1 string `protobuf:"bytes,3,opt,name=street_1,json=street1,proto3" json:"street_1,omitempty"`
	// Line 2 of the address's street.
	Street_2 string `protobuf:"bytes,4,opt,name=street_2,json=street2,proto3" json:"street_2,omitempty"`
	// The address's city.
	City string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	// The address's state or region.
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// country's subdivision
	CountrySubdivision string `protobuf:"bytes,7,opt,name=country_subdivision,json=countrySubdivision,proto3" json:"country_subdivision,omitempty"` // Typically, this might just be 'state' but used your field name to keep it consistent with the JSON
	// The address's country.
	Country string `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	// The address's zip code.
	ZipCode string `protobuf:"bytes,9,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp if precise time manipulation is required
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{29}
}

func (x *Address) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Address) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Address) GetStreet_1() string {
	if x != nil {
		return x.Street_1
	}
	return ""
}

func (x *Address) GetStreet_2() string {
	if x != nil {
		return x.Street_2
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetCountrySubdivision() string {
	if x != nil {
		return x.CountrySubdivision
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *Address) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The AccountingAttachment object is used to represent a company's attachments.
type Attachments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the object's id as stored in merge
	MergeAccountId string `protobuf:"bytes,2,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,3,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The attachment's name.
	FileName string `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// The attachment's url.
	FileUrl string `protobuf:"bytes,5,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	// The company the accounting attachment belongs to.
	Company string `protobuf:"bytes,6,opt,name=company,proto3" json:"company,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,7,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *Attachments) Reset() {
	*x = Attachments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachments) ProtoMessage() {}

func (x *Attachments) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachments.ProtoReflect.Descriptor instead.
func (*Attachments) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{30}
}

func (x *Attachments) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Attachments) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *Attachments) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Attachments) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Attachments) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *Attachments) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Attachments) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Attachments) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal
// to liability and equity combined.  This shows the company’s financial health at a specific point in time.
type BalanceSheet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The balance sheet's name.
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	// Company object for the given BalanceSheet object. May not necessarily be the compnay name but the
	// company reference
	Company string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	// The balance sheet's date. The balance sheet data will
	//
	//	reflect the company's financial position this point in time.
	Date *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"` // Consider using google.protobuf.Timestamp
	// The balance sheet's net assets.
	NetAssets int64 `protobuf:"varint,7,opt,name=net_assets,json=netAssets,proto3" json:"net_assets,omitempty"`
	// The balance sheet's total assets.
	Assets []*ReportItem `protobuf:"bytes,8,rep,name=assets,proto3" json:"assets,omitempty"`
	// The balance sheet's total liabilities.
	Liabilities []*ReportItem `protobuf:"bytes,9,rep,name=liabilities,proto3" json:"liabilities,omitempty"`
	// The balance sheet's total equity.
	Equity []*ReportItem `protobuf:"bytes,10,rep,name=equity,proto3" json:"equity,omitempty"`
	// The time that balance sheet was generated by the accounting system.
	RemoteGeneratedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=remote_generated_at,json=remoteGeneratedAt,proto3" json:"remote_generated_at,omitempty"` // Consider using google.protobuf.Timestamp
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	// the id as stored in merge
	MergeAccountId string `protobuf:"bytes,14,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *BalanceSheet) Reset() {
	*x = BalanceSheet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceSheet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceSheet) ProtoMessage() {}

func (x *BalanceSheet) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceSheet.ProtoReflect.Descriptor instead.
func (*BalanceSheet) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{31}
}

func (x *BalanceSheet) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BalanceSheet) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *BalanceSheet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BalanceSheet) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BalanceSheet) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *BalanceSheet) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *BalanceSheet) GetNetAssets() int64 {
	if x != nil {
		return x.NetAssets
	}
	return 0
}

func (x *BalanceSheet) GetAssets() []*ReportItem {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *BalanceSheet) GetLiabilities() []*ReportItem {
	if x != nil {
		return x.Liabilities
	}
	return nil
}

func (x *BalanceSheet) GetEquity() []*ReportItem {
	if x != nil {
		return x.Equity
	}
	return nil
}

func (x *BalanceSheet) GetRemoteGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteGeneratedAt
	}
	return nil
}

func (x *BalanceSheet) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *BalanceSheet) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *BalanceSheet) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The ReportItem object is used to represent a report item for a Balance Sheet,
// Cash Flow Statement or Profit and Loss Report.
type ReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the id as stored in the third-party system
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The report item's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The report item's value.
	Value int64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// The company the report item belongs to. may not necessarily be the company name but a reference instead
	Company string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
}

func (x *ReportItem) Reset() {
	*x = ReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportItem) ProtoMessage() {}

func (x *ReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportItem.ProtoReflect.Descriptor instead.
func (*ReportItem) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{32}
}

func (x *ReportItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReportItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *ReportItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportItem) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ReportItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ReportItem) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The CashFlowStatement object shows operating activities, investing activities, and financing activities over a
// period of time (month, quarter, or year).
type CashFlowStatements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The cash flow statement's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The cash flow statement's currency
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	// The company the cash flow statement belongs to.
	Company string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	// The cash flow statement's start period.
	StartPeriod *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_period,json=startPeriod,proto3" json:"start_period,omitempty"` // Consider using google.protobuf.Timestamp
	// The cash flow statement's end period.
	EndPeriod *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_period,json=endPeriod,proto3" json:"end_period,omitempty"` // Consider using google.protobuf.Timestamp
	// Cash and cash equivalents at the beginning of the cash flow statement's period.
	CashAtBeginningOfPeriod float64 `protobuf:"fixed64,8,opt,name=cash_at_beginning_of_period,json=cashAtBeginningOfPeriod,proto3" json:"cash_at_beginning_of_period,omitempty"`
	// Cash and cash equivalents at the beginning of the cash flow statement's period.
	CashAtEndOfPeriod float64 `protobuf:"fixed64,9,opt,name=cash_at_end_of_period,json=cashAtEndOfPeriod,proto3" json:"cash_at_end_of_period,omitempty"`
	// Operating activities
	OperatingActivities []*ReportItem `protobuf:"bytes,10,rep,name=operating_activities,json=operatingActivities,proto3" json:"operating_activities,omitempty"`
	// Investing activities
	InvestingActivities []*ReportItem `protobuf:"bytes,11,rep,name=investing_activities,json=investingActivities,proto3" json:"investing_activities,omitempty"`
	// Financing activities
	FinancingActivities []*ReportItem `protobuf:"bytes,12,rep,name=financing_activities,json=financingActivities,proto3" json:"financing_activities,omitempty"`
	// The time that cash flow statement was generated by the accounting system.
	RemoteGeneratedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=remote_generated_at,json=remoteGeneratedAt,proto3" json:"remote_generated_at,omitempty"` // Consider using google.protobuf.Timestamp
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,14,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	// the cashflow statements id as stored in merge
	MergeRecordId string `protobuf:"bytes,16,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
}

func (x *CashFlowStatements) Reset() {
	*x = CashFlowStatements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashFlowStatements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashFlowStatements) ProtoMessage() {}

func (x *CashFlowStatements) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashFlowStatements.ProtoReflect.Descriptor instead.
func (*CashFlowStatements) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{33}
}

func (x *CashFlowStatements) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CashFlowStatements) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *CashFlowStatements) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CashFlowStatements) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CashFlowStatements) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *CashFlowStatements) GetStartPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.StartPeriod
	}
	return nil
}

func (x *CashFlowStatements) GetEndPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.EndPeriod
	}
	return nil
}

func (x *CashFlowStatements) GetCashAtBeginningOfPeriod() float64 {
	if x != nil {
		return x.CashAtBeginningOfPeriod
	}
	return 0
}

func (x *CashFlowStatements) GetCashAtEndOfPeriod() float64 {
	if x != nil {
		return x.CashAtEndOfPeriod
	}
	return 0
}

func (x *CashFlowStatements) GetOperatingActivities() []*ReportItem {
	if x != nil {
		return x.OperatingActivities
	}
	return nil
}

func (x *CashFlowStatements) GetInvestingActivities() []*ReportItem {
	if x != nil {
		return x.InvestingActivities
	}
	return nil
}

func (x *CashFlowStatements) GetFinancingActivities() []*ReportItem {
	if x != nil {
		return x.FinancingActivities
	}
	return nil
}

func (x *CashFlowStatements) GetRemoteGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteGeneratedAt
	}
	return nil
}

func (x *CashFlowStatements) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *CashFlowStatements) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *CashFlowStatements) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

// The CompanyInfo object is used to represent a company's information.
type CompanyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the record in our system
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The company's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The company's legal name.
	LegalName string `protobuf:"bytes,4,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	// The company's tax number.
	TaxNumber string `protobuf:"bytes,5,opt,name=tax_number,json=taxNumber,proto3" json:"tax_number,omitempty"`
	// The company's fiscal year end month.
	FiscalYearEndMonth int32 `protobuf:"varint,6,opt,name=fiscal_year_end_month,json=fiscalYearEndMonth,proto3" json:"fiscal_year_end_month,omitempty"`
	// The company's fiscal year end day.
	FiscalYearEndDay int32 `protobuf:"varint,7,opt,name=fiscal_year_end_day,json=fiscalYearEndDay,proto3" json:"fiscal_year_end_day,omitempty"`
	// The currency set in the company's accounting platform.
	Currency string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	// When the third party's company was created.
	RemoteCreatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"` // Consider using google.protobuf.Timestamp
	// The company's urls.
	Urls []string `protobuf:"bytes,10,rep,name=urls,proto3" json:"urls,omitempty"`
	// the company's addresses
	Addresses []*Address `protobuf:"bytes,11,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// the company's phone numbers
	PhoneNumbers []string `protobuf:"bytes,12,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,13,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// the id of the record as stored in merge
	MergeAccountId string `protobuf:"bytes,15,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *CompanyInfo) Reset() {
	*x = CompanyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfo) ProtoMessage() {}

func (x *CompanyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfo.ProtoReflect.Descriptor instead.
func (*CompanyInfo) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{34}
}

func (x *CompanyInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompanyInfo) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *CompanyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyInfo) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *CompanyInfo) GetTaxNumber() string {
	if x != nil {
		return x.TaxNumber
	}
	return ""
}

func (x *CompanyInfo) GetFiscalYearEndMonth() int32 {
	if x != nil {
		return x.FiscalYearEndMonth
	}
	return 0
}

func (x *CompanyInfo) GetFiscalYearEndDay() int32 {
	if x != nil {
		return x.FiscalYearEndDay
	}
	return 0
}

func (x *CompanyInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CompanyInfo) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *CompanyInfo) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *CompanyInfo) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *CompanyInfo) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

func (x *CompanyInfo) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *CompanyInfo) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *CompanyInfo) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The AccountingAttachment object is used to represent a company's attachments.
type AccountingAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId         string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	FileName         string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileUrl          string `protobuf:"bytes,4,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	Company          string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	RemoteWasDeleted bool   `protobuf:"varint,6,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	ModifiedAt       string `protobuf:"bytes,7,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp if precise time manipulation is required
	MergeRecordId    string `protobuf:"bytes,8,opt,name=merge_record_id,json=mergeRecordId,proto3" json:"merge_record_id,omitempty"`
}

func (x *AccountingAttachment) Reset() {
	*x = AccountingAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingAttachment) ProtoMessage() {}

func (x *AccountingAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingAttachment.ProtoReflect.Descriptor instead.
func (*AccountingAttachment) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{35}
}

func (x *AccountingAttachment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountingAttachment) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *AccountingAttachment) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AccountingAttachment) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *AccountingAttachment) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *AccountingAttachment) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *AccountingAttachment) GetModifiedAt() string {
	if x != nil {
		return x.ModifiedAt
	}
	return ""
}

func (x *AccountingAttachment) GetMergeRecordId() string {
	if x != nil {
		return x.MergeRecordId
	}
	return ""
}

// The Contact object refers to either a supplier or a customer.
type Contacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The contact's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Whether the contact is a supplier.
	IsSupplier bool `protobuf:"varint,4,opt,name=is_supplier,json=isSupplier,proto3" json:"is_supplier,omitempty"`
	// Whether the contact is a customer.
	IsCustomer bool `protobuf:"varint,5,opt,name=is_customer,json=isCustomer,proto3" json:"is_customer,omitempty"`
	// The contact's email address.
	EmailAddress string `protobuf:"bytes,6,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// The contact's tax number.
	TaxNumber string `protobuf:"bytes,7,opt,name=tax_number,json=taxNumber,proto3" json:"tax_number,omitempty"`
	// The contact's status
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// The currency the contact's transactions are in.
	Currency string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	// When the third party's contact was updated.
	RemoteUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"` // Consider using google.protobuf.Timestamp
	// The company the contact belongs to.
	Company string `protobuf:"bytes,11,opt,name=company,proto3" json:"company,omitempty"`
	// Address object IDs for the given Contacts object.
	AddressesIds []string `protobuf:"bytes,12,rep,name=addresses_ids,json=addressesIds,proto3" json:"addresses_ids,omitempty"` // These are IDs, not the Address structure itself
	// Phone numbers of the contact
	PhoneNumbers []string `protobuf:"bytes,13,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,14,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	// The account id as seen in merge
	MergeAccountId string `protobuf:"bytes,16,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *Contacts) Reset() {
	*x = Contacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contacts) ProtoMessage() {}

func (x *Contacts) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contacts.ProtoReflect.Descriptor instead.
func (*Contacts) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{36}
}

func (x *Contacts) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contacts) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Contacts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contacts) GetIsSupplier() bool {
	if x != nil {
		return x.IsSupplier
	}
	return false
}

func (x *Contacts) GetIsCustomer() bool {
	if x != nil {
		return x.IsCustomer
	}
	return false
}

func (x *Contacts) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *Contacts) GetTaxNumber() string {
	if x != nil {
		return x.TaxNumber
	}
	return ""
}

func (x *Contacts) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Contacts) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Contacts) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *Contacts) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Contacts) GetAddressesIds() []string {
	if x != nil {
		return x.AddressesIds
	}
	return nil
}

func (x *Contacts) GetPhoneNumbers() []string {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

func (x *Contacts) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Contacts) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Contacts) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The CreditNote object is an accounts payable transaction used when to represent a gift or refund to a customer.
// A credit note will contain information on the amount of credit owed, the customer, and the account.
type CreditNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the database record id as stored in our systems
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The credit note's transaction date.
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"` // Consider using google.protobuf.Timestamp
	// The credit note's status.
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The credit note's number.
	Number string `protobuf:"bytes,5,opt,name=number,proto3" json:"number,omitempty"`
	// The credit note's contact.
	Contact string `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"`
	// The company the credit note belongs to.
	Company string `protobuf:"bytes,7,opt,name=company,proto3" json:"company,omitempty"`
	// The credit note's exchange rate.
	ExchangeRate string `protobuf:"bytes,8,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Consider using double or float if this represents a number
	// The credit note's total amount.
	TotalAmount float64 `protobuf:"fixed64,9,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The amount of value remaining in the credit note that the customer can use.
	RemainingCredit    float64                `protobuf:"fixed64,10,opt,name=remaining_credit,json=remainingCredit,proto3" json:"remaining_credit,omitempty"`
	LineItems          []*CreditNoteLineItem  `protobuf:"bytes,11,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,12,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"` // These are IDs
	Currency           string                 `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	RemoteCreatedAt    *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"` // Consider using google.protobuf.Timestamp
	RemoteUpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"` // Consider using google.protobuf.Timestamp
	// Array of Payment object IDs
	PaymentIds       []string `protobuf:"bytes,16,rep,name=payment_ids,json=paymentIds,proto3" json:"payment_ids,omitempty"` // These are IDs
	RemoteWasDeleted bool     `protobuf:"varint,17,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the CreditNote was generated in.
	AccountingPeriod string                 `protobuf:"bytes,18,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	// the id as stored in merge
	MergeAccountId string `protobuf:"bytes,20,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *CreditNote) Reset() {
	*x = CreditNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditNote) ProtoMessage() {}

func (x *CreditNote) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditNote.ProtoReflect.Descriptor instead.
func (*CreditNote) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{37}
}

func (x *CreditNote) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreditNote) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *CreditNote) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *CreditNote) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreditNote) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CreditNote) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *CreditNote) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *CreditNote) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *CreditNote) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *CreditNote) GetRemainingCredit() float64 {
	if x != nil {
		return x.RemainingCredit
	}
	return 0
}

func (x *CreditNote) GetLineItems() []*CreditNoteLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *CreditNote) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *CreditNote) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreditNote) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *CreditNote) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *CreditNote) GetPaymentIds() []string {
	if x != nil {
		return x.PaymentIds
	}
	return nil
}

func (x *CreditNote) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *CreditNote) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *CreditNote) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *CreditNote) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

type CreditNoteLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Quantity           string   `protobuf:"bytes,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	UnitPrice          string   `protobuf:"bytes,6,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`                             // Consider using double or float if this represents a number
	TaxRate            string   `protobuf:"bytes,7,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`                                   // This seems to be an ID
	TotalLineAmount    string   `protobuf:"bytes,8,opt,name=total_line_amount,json=totalLineAmount,proto3" json:"total_line_amount,omitempty"`         // Consider using double or float
	TrackingCategory   string   `protobuf:"bytes,9,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`        // This seems to be an ID
	TrackingCategories []string `protobuf:"bytes,10,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"` // These are IDs
	Account            string   `protobuf:"bytes,11,opt,name=account,proto3" json:"account,omitempty"`                                                 // This seems to be an ID
	Company            string   `protobuf:"bytes,12,opt,name=company,proto3" json:"company,omitempty"`
	RemoteId           string   `protobuf:"bytes,13,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Item               string   `protobuf:"bytes,14,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreditNoteLineItem) Reset() {
	*x = CreditNoteLineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditNoteLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditNoteLineItem) ProtoMessage() {}

func (x *CreditNoteLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditNoteLineItem.ProtoReflect.Descriptor instead.
func (*CreditNoteLineItem) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{38}
}

func (x *CreditNoteLineItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreditNoteLineItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreditNoteLineItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreditNoteLineItem) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *CreditNoteLineItem) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *CreditNoteLineItem) GetTaxRate() string {
	if x != nil {
		return x.TaxRate
	}
	return ""
}

func (x *CreditNoteLineItem) GetTotalLineAmount() string {
	if x != nil {
		return x.TotalLineAmount
	}
	return ""
}

func (x *CreditNoteLineItem) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *CreditNoteLineItem) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *CreditNoteLineItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CreditNoteLineItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *CreditNoteLineItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *CreditNoteLineItem) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

// The Expense object is used to represent a purchase made from a business which can be made with a check, credit card, or cash.
// Each expense object is dedicated to a grouping of expenses, with each expense recorded in the lines object.
type Expense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// When the transaction occurred.
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"` // Consider using google.protobuf.Timestamp
	// When the expense was created.
	RemoteCreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"` // Consider using google.protobuf.Timestamp
	// The expense's payment account.
	Account string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// The expense's contact.
	Contact string `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"`
	// The expense's total amount.
	TotalAmount float64 `protobuf:"fixed64,7,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The expense's total amount before tax.
	SubTotal float64 `protobuf:"fixed64,8,opt,name=sub_total,json=subTotal,proto3" json:"sub_total,omitempty"`
	// The expense's total tax amount.
	TotalTaxAmount float64 `protobuf:"fixed64,9,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	// The expense's currency
	Currency string `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	// The expense's exchange rate.
	ExchangeRate string `protobuf:"bytes,11,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Consider using double or float if this represents a number
	// The company the expense belongs to.
	Company string `protobuf:"bytes,12,opt,name=company,proto3" json:"company,omitempty"`
	// The expense's private note.
	Memo string `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	// The ExpenseLine object is used to represent an expense's line items.
	Lines              []*ExpenseLine `protobuf:"bytes,14,rep,name=lines,proto3" json:"lines,omitempty"`
	TrackingCategories []string       `protobuf:"bytes,15,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"` // These are IDs
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,16,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the Expense was generated in.
	AccountingPeriod string `protobuf:"bytes,17,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt     *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
	MergeAccountId string                 `protobuf:"bytes,19,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *Expense) Reset() {
	*x = Expense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expense) ProtoMessage() {}

func (x *Expense) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expense.ProtoReflect.Descriptor instead.
func (*Expense) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{39}
}

func (x *Expense) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Expense) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Expense) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *Expense) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *Expense) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Expense) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Expense) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Expense) GetSubTotal() float64 {
	if x != nil {
		return x.SubTotal
	}
	return 0
}

func (x *Expense) GetTotalTaxAmount() float64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *Expense) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Expense) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *Expense) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Expense) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Expense) GetLines() []*ExpenseLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *Expense) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *Expense) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Expense) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *Expense) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Expense) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The ExpenseLine object is used to represent an expense's line items.
type ExpenseLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The line's net amount.
	NetAmount          float64  `protobuf:"fixed64,2,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	TrackingCategory   string   `protobuf:"bytes,3,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`       // This seems to be an ID
	TrackingCategories []string `protobuf:"bytes,4,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"` // These are IDs
	// The company the line belongs to.
	Company string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	// The line's item.
	Item string `protobuf:"bytes,6,opt,name=item,proto3" json:"item,omitempty"` // This seems to be an ID
	// The expense's payment account.
	Account string `protobuf:"bytes,7,opt,name=account,proto3" json:"account,omitempty"`
	// The expense's contact.
	Contact string `protobuf:"bytes,8,opt,name=contact,proto3" json:"contact,omitempty"` // Optional based on provided JSON
	// The description of the item that was purchased by the company.
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// The expense line item's exchange rate.
	ExchangeRate string `protobuf:"bytes,10,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Consider using double or float if this represents a number
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,11,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The expense line item's currency
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
}

func (x *ExpenseLine) Reset() {
	*x = ExpenseLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpenseLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpenseLine) ProtoMessage() {}

func (x *ExpenseLine) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpenseLine.ProtoReflect.Descriptor instead.
func (*ExpenseLine) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{40}
}

func (x *ExpenseLine) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExpenseLine) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *ExpenseLine) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *ExpenseLine) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *ExpenseLine) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ExpenseLine) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *ExpenseLine) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ExpenseLine) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *ExpenseLine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExpenseLine) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *ExpenseLine) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *ExpenseLine) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExpenseLine) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The IncomeStatement object is used to represent a company’s income, the cost of sales, operating expenses,
// and other non-operating expenses. The object also includes other important values like gross profit, gross
// operating profit, and net income. This represents a period of time (month, quarter, or year).
type IncomeStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The income statement's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The income statement's currency.
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	// The company the income statement belongs to.
	Company string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
	// The income statement's start period.
	StartPeriod *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_period,json=startPeriod,proto3" json:"start_period,omitempty"`
	// The income statement's end period.
	EndPeriod *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_period,json=endPeriod,proto3" json:"end_period,omitempty"`
	// income
	Income []*ReportItem `protobuf:"bytes,8,rep,name=income,proto3" json:"income,omitempty"`
	// cost of sales
	CostOfSales []*ReportItem `protobuf:"bytes,9,rep,name=cost_of_sales,json=costOfSales,proto3" json:"cost_of_sales,omitempty"`
	// The revenue minus the cost of sale.
	GrossProfit int32 `protobuf:"varint,10,opt,name=gross_profit,json=grossProfit,proto3" json:"gross_profit,omitempty"`
	// operating expenses
	OperatingExpenses []*ReportItem `protobuf:"bytes,11,rep,name=operating_expenses,json=operatingExpenses,proto3" json:"operating_expenses,omitempty"`
	// The revenue minus the operating expenses.
	NetOperatingIncome   int32         `protobuf:"varint,12,opt,name=net_operating_income,json=netOperatingIncome,proto3" json:"net_operating_income,omitempty"`
	NonOperatingExpenses []*ReportItem `protobuf:"bytes,13,rep,name=non_operating_expenses,json=nonOperatingExpenses,proto3" json:"non_operating_expenses,omitempty"`
	// The gross profit minus the total expenses.
	NetIncome int32 `protobuf:"varint,14,opt,name=net_income,json=netIncome,proto3" json:"net_income,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,15,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *IncomeStatement) Reset() {
	*x = IncomeStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeStatement) ProtoMessage() {}

func (x *IncomeStatement) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeStatement.ProtoReflect.Descriptor instead.
func (*IncomeStatement) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{41}
}

func (x *IncomeStatement) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IncomeStatement) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *IncomeStatement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IncomeStatement) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *IncomeStatement) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *IncomeStatement) GetStartPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.StartPeriod
	}
	return nil
}

func (x *IncomeStatement) GetEndPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.EndPeriod
	}
	return nil
}

func (x *IncomeStatement) GetIncome() []*ReportItem {
	if x != nil {
		return x.Income
	}
	return nil
}

func (x *IncomeStatement) GetCostOfSales() []*ReportItem {
	if x != nil {
		return x.CostOfSales
	}
	return nil
}

func (x *IncomeStatement) GetGrossProfit() int32 {
	if x != nil {
		return x.GrossProfit
	}
	return 0
}

func (x *IncomeStatement) GetOperatingExpenses() []*ReportItem {
	if x != nil {
		return x.OperatingExpenses
	}
	return nil
}

func (x *IncomeStatement) GetNetOperatingIncome() int32 {
	if x != nil {
		return x.NetOperatingIncome
	}
	return 0
}

func (x *IncomeStatement) GetNonOperatingExpenses() []*ReportItem {
	if x != nil {
		return x.NonOperatingExpenses
	}
	return nil
}

func (x *IncomeStatement) GetNetIncome() int32 {
	if x != nil {
		return x.NetIncome
	}
	return 0
}

func (x *IncomeStatement) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *IncomeStatement) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The Invoice object represents an itemized record of goods and/or services sold to a customer.
type Invoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether the invoice is an accounts receivable or accounts payable
	//
	//	If type is accounts_payable, the invoice is a bill. If type is
	//	accounts_receivable, it is an invoice. Possible values include: ACCOUNTS_RECEIVABLE, ACCOUNTS_PAYABLE.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The invoice's contact.
	Contact string `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
	// The invoice's number.
	Number string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// The invoice's issue date.
	IssueDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	// The invoice's due date.
	DueDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	// The invoice's paid date.
	PaidOnDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=paid_on_date,json=paidOnDate,proto3" json:"paid_on_date,omitempty"`
	// The invoice's private note.
	Memo string `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`
	// The company the invoice belongs to.
	Company string `protobuf:"bytes,9,opt,name=company,proto3" json:"company,omitempty"`
	// The invoice's currency
	Currency string `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	// The invoice's exchange rate.
	ExchangeRate string `protobuf:"bytes,11,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// The total discounts applied to the total cost.
	TotalDiscount float32 `protobuf:"fixed32,12,opt,name=total_discount,json=totalDiscount,proto3" json:"total_discount,omitempty"`
	// The total amount being paid before taxes.
	SubTotal float32 `protobuf:"fixed32,13,opt,name=sub_total,json=subTotal,proto3" json:"sub_total,omitempty"`
	Status   string  `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// The total amount being paid in taxes.
	TotalTaxAmount float32 `protobuf:"fixed32,15,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	// The invoice's total amount.
	TotalAmount float32 `protobuf:"fixed32,16,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The invoice's remaining balance.
	Balance float32 `protobuf:"fixed32,17,opt,name=balance,proto3" json:"balance,omitempty"`
	// When the third party's invoice entry was updated.
	RemoteUpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,19,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	// Array of Payment object IDs.
	Payments         []string           `protobuf:"bytes,20,rep,name=payments,proto3" json:"payments,omitempty"`
	LineItems        []*InvoiceLineItem `protobuf:"bytes,21,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	RemoteWasDeleted bool               `protobuf:"varint,22,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the Invoice was generated in.
	AccountingPeriod string   `protobuf:"bytes,23,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	PurchaseOrders   []string `protobuf:"bytes,24,rep,name=purchase_orders,json=purchaseOrders,proto3" json:"purchase_orders,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId   string                 `protobuf:"bytes,25,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// the account id as stored in merge
	MergeAccountId string `protobuf:"bytes,27,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *Invoice) Reset() {
	*x = Invoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invoice) ProtoMessage() {}

func (x *Invoice) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invoice.ProtoReflect.Descriptor instead.
func (*Invoice) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{42}
}

func (x *Invoice) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Invoice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Invoice) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Invoice) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Invoice) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *Invoice) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *Invoice) GetPaidOnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaidOnDate
	}
	return nil
}

func (x *Invoice) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Invoice) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Invoice) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Invoice) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *Invoice) GetTotalDiscount() float32 {
	if x != nil {
		return x.TotalDiscount
	}
	return 0
}

func (x *Invoice) GetSubTotal() float32 {
	if x != nil {
		return x.SubTotal
	}
	return 0
}

func (x *Invoice) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Invoice) GetTotalTaxAmount() float32 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *Invoice) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Invoice) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Invoice) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *Invoice) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *Invoice) GetPayments() []string {
	if x != nil {
		return x.Payments
	}
	return nil
}

func (x *Invoice) GetLineItems() []*InvoiceLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *Invoice) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Invoice) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *Invoice) GetPurchaseOrders() []string {
	if x != nil {
		return x.PurchaseOrders
	}
	return nil
}

func (x *Invoice) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Invoice) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Invoice) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The Invoice object represents an itemized record of goods and/or services sold to a customer.
type InvoiceLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The line item's description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The line item's unit price.
	UnitPrice float32 `protobuf:"fixed32,4,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// The line item's quantity.
	Quantity int32 `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The line item's total amount.
	TotalAmount float32 `protobuf:"fixed32,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The line item's currency
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// The line item's exchange rate.
	ExchangeRate       string   `protobuf:"bytes,8,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	Item               string   `protobuf:"bytes,9,opt,name=item,proto3" json:"item,omitempty"`
	Account            string   `protobuf:"bytes,10,opt,name=account,proto3" json:"account,omitempty"`
	TrackingCategory   string   `protobuf:"bytes,11,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`
	TrackingCategories []string `protobuf:"bytes,12,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	// The company the line item belongs to.
	Company string `protobuf:"bytes,13,opt,name=company,proto3" json:"company,omitempty"`
	// the id of the record as stored in merge
	MergeAccountId string `protobuf:"bytes,14,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"` // Consider using google.protobuf.Timestamp
}

func (x *InvoiceLineItem) Reset() {
	*x = InvoiceLineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLineItem) ProtoMessage() {}

func (x *InvoiceLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLineItem.ProtoReflect.Descriptor instead.
func (*InvoiceLineItem) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{43}
}

func (x *InvoiceLineItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvoiceLineItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *InvoiceLineItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InvoiceLineItem) GetUnitPrice() float32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *InvoiceLineItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *InvoiceLineItem) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *InvoiceLineItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *InvoiceLineItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *InvoiceLineItem) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *InvoiceLineItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InvoiceLineItem) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *InvoiceLineItem) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *InvoiceLineItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *InvoiceLineItem) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *InvoiceLineItem) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The Item object refers to the goods involved in a transaction.
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The item's name.
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The item's unit price.
	UnitPrice float32 `protobuf:"fixed32,5,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// The price at which the item is purchased from a vendor.
	PurchasePrice float32 `protobuf:"fixed32,6,opt,name=purchase_price,json=purchasePrice,proto3" json:"purchase_price,omitempty"`
	// References the default account used to record a purchase of the item.
	PurchaseAccount string `protobuf:"bytes,7,opt,name=purchase_account,json=purchaseAccount,proto3" json:"purchase_account,omitempty"`
	// References the default account used to record a sale.
	SalesAccount string `protobuf:"bytes,8,opt,name=sales_account,json=salesAccount,proto3" json:"sales_account,omitempty"`
	// The company the item belongs to.
	Company string `protobuf:"bytes,9,opt,name=company,proto3" json:"company,omitempty"`
	// When the third party's item note was updated.
	RemoteUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted bool `protobuf:"varint,11,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt     *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	MergeAccountId string                 `protobuf:"bytes,13,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{44}
}

func (x *Item) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Item) GetUnitPrice() float32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *Item) GetPurchasePrice() float32 {
	if x != nil {
		return x.PurchasePrice
	}
	return 0
}

func (x *Item) GetPurchaseAccount() string {
	if x != nil {
		return x.PurchaseAccount
	}
	return ""
}

func (x *Item) GetSalesAccount() string {
	if x != nil {
		return x.SalesAccount
	}
	return ""
}

func (x *Item) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Item) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *Item) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Item) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Item) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The JournalEntry object is used to get a record of all manually created entries made in a company’s general ledger.
// The journal line items for each journal entry should sum to zero.
type JournalEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId string `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// The journal entry's transaction date.
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	// When the third party's journal entry was created.
	RemoteCreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"`
	RemoteUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"`
	PaymentIds      []string               `protobuf:"bytes,6,rep,name=payment_ids,json=paymentIds,proto3" json:"payment_ids,omitempty"`
	// The journal entry's private note.
	Memo         string         `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
	Currency     string         `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	ExchangeRate string         `protobuf:"bytes,9,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string due to the example provided, but could be float or double.
	Company      string         `protobuf:"bytes,10,opt,name=company,proto3" json:"company,omitempty"`
	Lines        []*JournalLine `protobuf:"bytes,11,rep,name=lines,proto3" json:"lines,omitempty"`
	// Reference number for identifying journal entries.
	JournalNumber      string   `protobuf:"bytes,12,opt,name=journal_number,json=journalNumber,proto3" json:"journal_number,omitempty"`
	TrackingCategories []string `protobuf:"bytes,13,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	RemoteWasDeleted   bool     `protobuf:"varint,14,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	PostingStatus      string   `protobuf:"bytes,15,opt,name=posting_status,json=postingStatus,proto3" json:"posting_status,omitempty"`
	// The accounting period that the JournalEntry was generated in.
	AccountingPeriod string                 `protobuf:"bytes,16,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// the id of the record as stored in merge
	MergeAccountId string `protobuf:"bytes,18,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *JournalEntry) Reset() {
	*x = JournalEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalEntry) ProtoMessage() {}

func (x *JournalEntry) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalEntry.ProtoReflect.Descriptor instead.
func (*JournalEntry) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{45}
}

func (x *JournalEntry) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JournalEntry) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *JournalEntry) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *JournalEntry) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *JournalEntry) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *JournalEntry) GetPaymentIds() []string {
	if x != nil {
		return x.PaymentIds
	}
	return nil
}

func (x *JournalEntry) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *JournalEntry) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JournalEntry) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *JournalEntry) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *JournalEntry) GetLines() []*JournalLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *JournalEntry) GetJournalNumber() string {
	if x != nil {
		return x.JournalNumber
	}
	return ""
}

func (x *JournalEntry) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *JournalEntry) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *JournalEntry) GetPostingStatus() string {
	if x != nil {
		return x.PostingStatus
	}
	return ""
}

func (x *JournalEntry) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *JournalEntry) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *JournalEntry) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The JournalLine object is used to represent a journal entry's line items.
type JournalLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId           string                 `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Account            string                 `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	NetAmount          float32                `protobuf:"fixed32,5,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"` // Might want to use double or a more precise type
	TrackingCategory   string                 `protobuf:"bytes,6,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,7,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	Contact            string                 `protobuf:"bytes,8,opt,name=contact,proto3" json:"contact,omitempty"`
	Company            string                 `protobuf:"bytes,9,opt,name=company,proto3" json:"company,omitempty"`
	Description        string                 `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	ExchangeRate       string                 `protobuf:"bytes,11,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string due to the example provided, but could be float or double.
	ModifiedAt         *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *JournalLine) Reset() {
	*x = JournalLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalLine) ProtoMessage() {}

func (x *JournalLine) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalLine.ProtoReflect.Descriptor instead.
func (*JournalLine) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{46}
}

func (x *JournalLine) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JournalLine) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *JournalLine) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *JournalLine) GetNetAmount() float32 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *JournalLine) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *JournalLine) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *JournalLine) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *JournalLine) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *JournalLine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JournalLine) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *JournalLine) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The Payment object represents general payments made towards a specific transaction.
type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId        string                 `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	Contact         string                 `protobuf:"bytes,4,opt,name=contact,proto3" json:"contact,omitempty"`
	// The supplier’s or customer’s account in which the payment is made.
	Account      string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Currency     string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	ExchangeRate string `protobuf:"bytes,7,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string due to the example provided, but could be float or double.
	Company      string `protobuf:"bytes,8,opt,name=company,proto3" json:"company,omitempty"`
	// The total amount of money being paid to the supplier, or customer, after taxes.
	TotalAmount        float32                `protobuf:"fixed32,9,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"` // Might want to use double or a more precise type
	TrackingCategories []string               `protobuf:"bytes,10,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	RemoteUpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"`
	RemoteWasDeleted   bool                   `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the Payment was generated in.
	AccountingPeriod string `protobuf:"bytes,13,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// the id as stored in merge
	MergeAccountId string `protobuf:"bytes,15,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{47}
}

func (x *Payment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payment) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Payment) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *Payment) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Payment) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Payment) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Payment) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *Payment) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Payment) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Payment) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *Payment) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *Payment) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *Payment) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *Payment) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *Payment) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The PurchaseOrder object is a record of request for a product or service between a buyer and seller.
type PurchaseOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MergeAccountId string `protobuf:"bytes,2,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
	Status         string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// The purchase order's issue date.
	IssueDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	// The human-readable number of the purchase order.
	PurchaseOrderNumber string `protobuf:"bytes,5,opt,name=purchase_order_number,json=purchaseOrderNumber,proto3" json:"purchase_order_number,omitempty"`
	// The purchase order's delivery date.
	DeliveryDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=delivery_date,json=deliveryDate,proto3" json:"delivery_date,omitempty"`
	// The purchase order's delivery address.
	DeliveryAddress *Address `protobuf:"bytes,7,opt,name=delivery_address,json=deliveryAddress,proto3" json:"delivery_address,omitempty"`
	// The contact making the purchase order.
	Customer string `protobuf:"bytes,8,opt,name=customer,proto3" json:"customer,omitempty"`
	// The party fulfilling the purchase order.
	Vendor string `protobuf:"bytes,9,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// A memo attached to the purchase order.
	Memo string `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo,omitempty"`
	// The company the purchase order belongs to.
	Company string `protobuf:"bytes,11,opt,name=company,proto3" json:"company,omitempty"`
	// The purchase order's total amount.
	TotalAmount float32 `protobuf:"fixed32,12,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"` // Might be better as double.
	// The purchase order's currency.
	Currency           string                   `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	ExchangeRate       string                   `protobuf:"bytes,14,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string, but might be better as float or double.
	LineItems          []*PurchaseOrderLineItem `protobuf:"bytes,15,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	TrackingCategories []string                 `protobuf:"bytes,16,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	RemoteCreatedAt    *timestamppb.Timestamp   `protobuf:"bytes,17,opt,name=remote_created_at,json=remoteCreatedAt,proto3" json:"remote_created_at,omitempty"`
	RemoteUpdatedAt    *timestamppb.Timestamp   `protobuf:"bytes,18,opt,name=remote_updated_at,json=remoteUpdatedAt,proto3" json:"remote_updated_at,omitempty"`
	RemoteWasDeleted   bool                     `protobuf:"varint,19,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	// The accounting period that the PurchaseOrder was generated in.
	AccountingPeriod string                 `protobuf:"bytes,20,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	RemoteId         string                 `protobuf:"bytes,21,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *PurchaseOrder) Reset() {
	*x = PurchaseOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrder) ProtoMessage() {}

func (x *PurchaseOrder) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrder.ProtoReflect.Descriptor instead.
func (*PurchaseOrder) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{48}
}

func (x *PurchaseOrder) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchaseOrder) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *PurchaseOrder) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PurchaseOrder) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *PurchaseOrder) GetPurchaseOrderNumber() string {
	if x != nil {
		return x.PurchaseOrderNumber
	}
	return ""
}

func (x *PurchaseOrder) GetDeliveryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveryDate
	}
	return nil
}

func (x *PurchaseOrder) GetDeliveryAddress() *Address {
	if x != nil {
		return x.DeliveryAddress
	}
	return nil
}

func (x *PurchaseOrder) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *PurchaseOrder) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *PurchaseOrder) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *PurchaseOrder) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *PurchaseOrder) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *PurchaseOrder) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PurchaseOrder) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *PurchaseOrder) GetLineItems() []*PurchaseOrderLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *PurchaseOrder) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *PurchaseOrder) GetRemoteCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteCreatedAt
	}
	return nil
}

func (x *PurchaseOrder) GetRemoteUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RemoteUpdatedAt
	}
	return nil
}

func (x *PurchaseOrder) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *PurchaseOrder) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *PurchaseOrder) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *PurchaseOrder) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The PurchaseOrderLineItem object is used to represent a purchase order's line item.
type PurchaseOrderLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId           string                 `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Quantity           int32                  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	UnitPrice          string                 `protobuf:"bytes,5,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"` // Assuming string, but might be better as float or double.
	Item               string                 `protobuf:"bytes,6,opt,name=item,proto3" json:"item,omitempty"`
	Account            string                 `protobuf:"bytes,7,opt,name=account,proto3" json:"account,omitempty"`
	TrackingCategory   string                 `protobuf:"bytes,8,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,9,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	TaxAmount          string                 `protobuf:"bytes,10,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	TotalLineAmount    string                 `protobuf:"bytes,11,opt,name=total_line_amount,json=totalLineAmount,proto3" json:"total_line_amount,omitempty"`
	Currency           string                 `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	ExchangeRate       string                 `protobuf:"bytes,13,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string, but might be better as float or double.
	Company            string                 `protobuf:"bytes,14,opt,name=company,proto3" json:"company,omitempty"`
	ModifiedAt         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *PurchaseOrderLineItem) Reset() {
	*x = PurchaseOrderLineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrderLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderLineItem) ProtoMessage() {}

func (x *PurchaseOrderLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderLineItem.ProtoReflect.Descriptor instead.
func (*PurchaseOrderLineItem) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{49}
}

func (x *PurchaseOrderLineItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchaseOrderLineItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PurchaseOrderLineItem) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *PurchaseOrderLineItem) GetTaxAmount() string {
	if x != nil {
		return x.TaxAmount
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetTotalLineAmount() string {
	if x != nil {
		return x.TotalLineAmount
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *PurchaseOrderLineItem) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The TaxRate object is used to represent a tax rate.
type TaxRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId         string                 `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Description      string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TotalTaxRate     float64                `protobuf:"fixed64,4,opt,name=total_tax_rate,json=totalTaxRate,proto3" json:"total_tax_rate,omitempty"`
	EffectiveTaxRate float64                `protobuf:"fixed64,5,opt,name=effective_tax_rate,json=effectiveTaxRate,proto3" json:"effective_tax_rate,omitempty"`
	Company          string                 `protobuf:"bytes,6,opt,name=company,proto3" json:"company,omitempty"`
	RemoteWasDeleted bool                   `protobuf:"varint,7,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	MergeAccountId   string                 `protobuf:"bytes,9,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
}

func (x *TaxRate) Reset() {
	*x = TaxRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxRate) ProtoMessage() {}

func (x *TaxRate) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxRate.ProtoReflect.Descriptor instead.
func (*TaxRate) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{50}
}

func (x *TaxRate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxRate) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *TaxRate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaxRate) GetTotalTaxRate() float64 {
	if x != nil {
		return x.TotalTaxRate
	}
	return 0
}

func (x *TaxRate) GetEffectiveTaxRate() float64 {
	if x != nil {
		return x.EffectiveTaxRate
	}
	return 0
}

func (x *TaxRate) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *TaxRate) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *TaxRate) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *TaxRate) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

// The TrackingCategory object is used to represent a company's tracking categories.
type TrackingCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId         string                 `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	MergeAccountId   string                 `protobuf:"bytes,3,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
	CategoryType     CategoryType           `protobuf:"varint,4,opt,name=category_type,json=categoryType,proto3,enum=financial_service.v1.CategoryType" json:"category_type,omitempty"`
	ParentCategory   string                 `protobuf:"bytes,5,opt,name=parent_category,json=parentCategory,proto3" json:"parent_category,omitempty"`
	Company          string                 `protobuf:"bytes,6,opt,name=company,proto3" json:"company,omitempty"`
	RemoteWasDeleted bool                   `protobuf:"varint,7,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *TrackingCategory) Reset() {
	*x = TrackingCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackingCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackingCategory) ProtoMessage() {}

func (x *TrackingCategory) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackingCategory.ProtoReflect.Descriptor instead.
func (*TrackingCategory) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{51}
}

func (x *TrackingCategory) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrackingCategory) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *TrackingCategory) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *TrackingCategory) GetCategoryType() CategoryType {
	if x != nil {
		return x.CategoryType
	}
	return CategoryType_CATEGORY_TYPE_UNSPECIFIED
}

func (x *TrackingCategory) GetParentCategory() string {
	if x != nil {
		return x.ParentCategory
	}
	return ""
}

func (x *TrackingCategory) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *TrackingCategory) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *TrackingCategory) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The Transaction includes different types of transactions. The Transactions object does not cover expenses, credit notes,
// vendor credit, invoices, purchase orders, and journal entries. See the “transaction_type” field for more information.
type BusinessTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TransactionType    string                 `protobuf:"bytes,2,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Number             string                 `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	TransactionDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	Account            string                 `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Contact            string                 `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"`
	TotalAmount        string                 `protobuf:"bytes,7,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"` // Might be better as double.
	Currency           string                 `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	ExchangeRate       string                 `protobuf:"bytes,9,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string, but might be better as float or double.
	Company            string                 `protobuf:"bytes,10,opt,name=company,proto3" json:"company,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,11,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	LineItems          []*TransactionLineItem `protobuf:"bytes,12,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	RemoteWasDeleted   bool                   `protobuf:"varint,13,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	AccountingPeriod   string                 `protobuf:"bytes,14,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	MergeAccountId     string                 `protobuf:"bytes,15,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
	RemoteId           string                 `protobuf:"bytes,16,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	ModifiedAt         *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *BusinessTransaction) Reset() {
	*x = BusinessTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessTransaction) ProtoMessage() {}

func (x *BusinessTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessTransaction.ProtoReflect.Descriptor instead.
func (*BusinessTransaction) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{52}
}

func (x *BusinessTransaction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BusinessTransaction) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *BusinessTransaction) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *BusinessTransaction) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *BusinessTransaction) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *BusinessTransaction) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *BusinessTransaction) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *BusinessTransaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BusinessTransaction) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *BusinessTransaction) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *BusinessTransaction) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *BusinessTransaction) GetLineItems() []*TransactionLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *BusinessTransaction) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *BusinessTransaction) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *BusinessTransaction) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *BusinessTransaction) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *BusinessTransaction) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

type TransactionLineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoteId           string                 `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Memo               string                 `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	UnitPrice          string                 `protobuf:"bytes,4,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	Quantity           string                 `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Item               string                 `protobuf:"bytes,6,opt,name=item,proto3" json:"item,omitempty"`
	Account            string                 `protobuf:"bytes,7,opt,name=account,proto3" json:"account,omitempty"`
	TrackingCategory   string                 `protobuf:"bytes,8,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,9,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	TotalLineAmount    string                 `protobuf:"bytes,10,opt,name=total_line_amount,json=totalLineAmount,proto3" json:"total_line_amount,omitempty"`
	TaxRate            string                 `protobuf:"bytes,11,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	Currency           string                 `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	ExchangeRate       string                 `protobuf:"bytes,13,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string, but might be better as float or double.
	Company            string                 `protobuf:"bytes,14,opt,name=company,proto3" json:"company,omitempty"`
	ModifiedAt         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *TransactionLineItem) Reset() {
	*x = TransactionLineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionLineItem) ProtoMessage() {}

func (x *TransactionLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionLineItem.ProtoReflect.Descriptor instead.
func (*TransactionLineItem) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{53}
}

func (x *TransactionLineItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionLineItem) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *TransactionLineItem) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TransactionLineItem) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *TransactionLineItem) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *TransactionLineItem) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *TransactionLineItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TransactionLineItem) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *TransactionLineItem) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *TransactionLineItem) GetTotalLineAmount() string {
	if x != nil {
		return x.TotalLineAmount
	}
	return ""
}

func (x *TransactionLineItem) GetTaxRate() string {
	if x != nil {
		return x.TaxRate
	}
	return ""
}

func (x *TransactionLineItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TransactionLineItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *TransactionLineItem) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *TransactionLineItem) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// The VendorCredit object is an accounts receivable transaction used to show that a customer is owed a gift or refund.
// A vendor credit will contain information on the amount of credit owed to the customer, the vendor that owes the credit,
// and the account.
type VendorCredit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeAccountId     string                 `protobuf:"bytes,1,opt,name=merge_account_id,json=mergeAccountId,proto3" json:"merge_account_id,omitempty"`
	RemoteId           string                 `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	Number             string                 `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	TransactionDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	Vendor             string                 `protobuf:"bytes,5,opt,name=vendor,proto3" json:"vendor,omitempty"`
	TotalAmount        float64                `protobuf:"fixed64,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"` // Using double for more precision.
	Currency           string                 `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	ExchangeRate       string                 `protobuf:"bytes,8,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string, but might be better as float or double.
	Company            string                 `protobuf:"bytes,9,opt,name=company,proto3" json:"company,omitempty"`
	Lines              []*VendorCreditLine    `protobuf:"bytes,10,rep,name=lines,proto3" json:"lines,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,11,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	RemoteWasDeleted   bool                   `protobuf:"varint,12,opt,name=remote_was_deleted,json=remoteWasDeleted,proto3" json:"remote_was_deleted,omitempty"`
	AccountingPeriod   string                 `protobuf:"bytes,13,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"`
	ModifiedAt         *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	Id                 uint64                 `protobuf:"varint,15,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VendorCredit) Reset() {
	*x = VendorCredit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorCredit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCredit) ProtoMessage() {}

func (x *VendorCredit) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCredit.ProtoReflect.Descriptor instead.
func (*VendorCredit) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{54}
}

func (x *VendorCredit) GetMergeAccountId() string {
	if x != nil {
		return x.MergeAccountId
	}
	return ""
}

func (x *VendorCredit) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *VendorCredit) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *VendorCredit) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *VendorCredit) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *VendorCredit) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *VendorCredit) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *VendorCredit) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *VendorCredit) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *VendorCredit) GetLines() []*VendorCreditLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *VendorCredit) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *VendorCredit) GetRemoteWasDeleted() bool {
	if x != nil {
		return x.RemoteWasDeleted
	}
	return false
}

func (x *VendorCredit) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *VendorCredit) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *VendorCredit) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// The VendorCreditLine object is used to represent a vendor credit's line items.
type VendorCreditLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteId           string                 `protobuf:"bytes,1,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	NetAmount          float64                `protobuf:"fixed64,2,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"` // Using double for more precision.
	TrackingCategory   string                 `protobuf:"bytes,3,opt,name=tracking_category,json=trackingCategory,proto3" json:"tracking_category,omitempty"`
	TrackingCategories []string               `protobuf:"bytes,4,rep,name=tracking_categories,json=trackingCategories,proto3" json:"tracking_categories,omitempty"`
	Description        string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Account            string                 `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`
	Company            string                 `protobuf:"bytes,7,opt,name=company,proto3" json:"company,omitempty"`
	ExchangeRate       string                 `protobuf:"bytes,8,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"` // Assuming string, but might be better as float or double.
	ModifiedAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`       // Could use a specific Timestamp type for this if you need.
	Id                 uint64                 `protobuf:"varint,10,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VendorCreditLine) Reset() {
	*x = VendorCreditLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorCreditLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCreditLine) ProtoMessage() {}

func (x *VendorCreditLine) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCreditLine.ProtoReflect.Descriptor instead.
func (*VendorCreditLine) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{55}
}

func (x *VendorCreditLine) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *VendorCreditLine) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *VendorCreditLine) GetTrackingCategory() string {
	if x != nil {
		return x.TrackingCategory
	}
	return ""
}

func (x *VendorCreditLine) GetTrackingCategories() []string {
	if x != nil {
		return x.TrackingCategories
	}
	return nil
}

func (x *VendorCreditLine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VendorCreditLine) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *VendorCreditLine) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *VendorCreditLine) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *VendorCreditLine) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *VendorCreditLine) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PlaidAccountInvestmentTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotag: ch:"account_id"
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" ch:"account_id"`
	// @gotag: ch:"amount"
	Ammount string `protobuf:"bytes,2,opt,name=ammount,proto3" json:"ammount,omitempty" ch:"amount"`
	// @gotag: ch:"investment_transaction_id"
	InvestmentTransactionId string `protobuf:"bytes,3,opt,name=investment_transaction_id,json=investmentTransactionId,proto3" json:"investment_transaction_id,omitempty" ch:"investment_transaction_id"`
	// @gotag: ch:"security_id"
	SecurityId string `protobuf:"bytes,4,opt,name=security_id,json=securityId,proto3" json:"security_id,omitempty" ch:"security_id"`
	// @gotag: ch:"date"
	CurrentDate string `protobuf:"bytes,5,opt,name=current_date,json=currentDate,proto3" json:"current_date,omitempty" ch:"date"`
	// @gotag: ch:"name"
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" ch:"name"`
	// @gotag: ch:"quantity"
	Quantity float64 `protobuf:"fixed64,7,opt,name=quantity,proto3" json:"quantity,omitempty" ch:"quantity"`
	// @gotag: ch:"amount"
	Amount float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty" ch:"amount"`
	// @gotag: ch:"price"
	Price float64 `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty" ch:"price"`
	// @gotag: ch:"fees"
	Fees float64 `protobuf:"fixed64,10,opt,name=fees,proto3" json:"fees,omitempty" ch:"fees"`
	// @gotag: ch:"type"
	Type string `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty" ch:"type"`
	// @gotag: ch:"subtype"
	Subtype string `protobuf:"bytes,12,opt,name=subtype,proto3" json:"subtype,omitempty" ch:"subtype"`
	// @gotag: ch:"iso_currency_code"
	IsoCurrencyCode string `protobuf:"bytes,13,opt,name=iso_currency_code,json=isoCurrencyCode,proto3" json:"iso_currency_code,omitempty" ch:"iso_currency_code"`
	// @gotag: ch:"unofficial_currency_code"
	UnofficialCurrencyCode string `protobuf:"bytes,14,opt,name=unofficial_currency_code,json=unofficialCurrencyCode,proto3" json:"unofficial_currency_code,omitempty" ch:"unofficial_currency_code"`
	// @gotag: ch:"link_id"
	LinkId uint64 `protobuf:"varint,15,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty" ch:"link_id"`
	// @gotag: ch:"id"
	Id uint64 `protobuf:"varint,16,opt,name=id,proto3" json:"id,omitempty" ch:"id"`
	// @gotag: ch:"user_id"
	UserId               uint64                 `protobuf:"varint,17,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" ch:"user_id"`
	CreatedAt            string                 `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Time                 *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=time,proto3" json:"time,omitempty"`
	AdditionalProperties *anypb.Any             `protobuf:"bytes,21,opt,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty"`
}

func (x *PlaidAccountInvestmentTransaction) Reset() {
	*x = PlaidAccountInvestmentTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaidAccountInvestmentTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaidAccountInvestmentTransaction) ProtoMessage() {}

func (x *PlaidAccountInvestmentTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaidAccountInvestmentTransaction.ProtoReflect.Descriptor instead.
func (*PlaidAccountInvestmentTransaction) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{56}
}

func (x *PlaidAccountInvestmentTransaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetAmmount() string {
	if x != nil {
		return x.Ammount
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetInvestmentTransactionId() string {
	if x != nil {
		return x.InvestmentTransactionId
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetCurrentDate() string {
	if x != nil {
		return x.CurrentDate
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PlaidAccountInvestmentTransaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PlaidAccountInvestmentTransaction) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PlaidAccountInvestmentTransaction) GetFees() float64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

func (x *PlaidAccountInvestmentTransaction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetIsoCurrencyCode() string {
	if x != nil {
		return x.IsoCurrencyCode
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetUnofficialCurrencyCode() string {
	if x != nil {
		return x.UnofficialCurrencyCode
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

func (x *PlaidAccountInvestmentTransaction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlaidAccountInvestmentTransaction) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlaidAccountInvestmentTransaction) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PlaidAccountInvestmentTransaction) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *PlaidAccountInvestmentTransaction) GetAdditionalProperties() *anypb.Any {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type PlaidAccountRecurringTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotag: ch:"account_id"
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" ch:"account_id"`
	// @gotag: ch:"stream_id"
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty" ch:"stream_id"`
	// @gotag: ch:"category_id"
	CategoryId string `protobuf:"bytes,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty" ch:"category_id"`
	// @gotag: ch:"description"
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" ch:"description"`
	// @gotag: ch:"merchant_name"
	MerchantName string `protobuf:"bytes,6,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty" ch:"merchant_name"`
	// @gotag: ch:"personal_finance_category_primary"
	PersonalFinanceCategoryPrimary string `protobuf:"bytes,7,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty" ch:"personal_finance_category_primary"`
	// @gotag: ch:"personal_finance_category_detailed"
	PersonalFinanceCategoryDetailed string `protobuf:"bytes,8,opt,name=personal_finance_category_detailed,json=personalFinanceCategoryDetailed,proto3" json:"personal_finance_category_detailed,omitempty" ch:"personal_finance_category_detailed"`
	// @gotag: ch:"first_date"
	FirstDate string `protobuf:"bytes,9,opt,name=first_date,json=firstDate,proto3" json:"first_date,omitempty" ch:"first_date"`
	// @gotag: ch:"last_date"
	LastDate string `protobuf:"bytes,10,opt,name=last_date,json=lastDate,proto3" json:"last_date,omitempty" ch:"last_date"`
	// @gotag: ch:"frequency"
	Frequency string `protobuf:"bytes,11,opt,name=frequency,proto3" json:"frequency,omitempty" ch:"frequency"`
	// @gotag: ch:"transaction_ids,array"
	TransactionIds string `protobuf:"bytes,12,opt,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty" ch:"transaction_ids,array"`
	// @gotag: ch:"average_amount"
	AverageAmount string `protobuf:"bytes,13,opt,name=average_amount,json=averageAmount,proto3" json:"average_amount,omitempty" ch:"average_amount"`
	// @gotag: ch:"average_amount_iso_currency_code"
	AverageAmountIsoCurrencyCode string `protobuf:"bytes,14,opt,name=average_amount_iso_currency_code,json=averageAmountIsoCurrencyCode,proto3" json:"average_amount_iso_currency_code,omitempty" ch:"average_amount_iso_currency_code"`
	// @gotag: ch:"last_amount"
	LastAmount string `protobuf:"bytes,15,opt,name=last_amount,json=lastAmount,proto3" json:"last_amount,omitempty" ch:"last_amount"`
	// @gotag: ch:"last_amount_iso_currency_code"
	LastAmountIsoCurrencyCode string `protobuf:"bytes,16,opt,name=last_amount_iso_currency_code,json=lastAmountIsoCurrencyCode,proto3" json:"last_amount_iso_currency_code,omitempty" ch:"last_amount_iso_currency_code"`
	// @gotag: ch:"is_active"
	IsActive bool `protobuf:"varint,17,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty" ch:"is_active"`
	// @gotag: ch:"status"
	Status string `protobuf:"bytes,18,opt,name=status,proto3" json:"status,omitempty" ch:"status"`
	// @gotag: ch:"updated_time"
	UpdatedTime string `protobuf:"bytes,19,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty" ch:"updated_time"`
	// @gotag: ch:"user_id"
	UserId uint64 `protobuf:"varint,20,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" ch:"user_id"`
	// @gotag: ch:"link_id"
	LinkId uint64 `protobuf:"varint,21,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty" ch:"link_id"`
	// @gotag: ch:"id"
	Id uint64 `protobuf:"varint,22,opt,name=id,proto3" json:"id,omitempty" ch:"id"`
	// @gotag: ch:"flow"
	Flow                 string                 `protobuf:"bytes,23,opt,name=flow,proto3" json:"flow,omitempty" ch:"flow"`
	Time                 *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=time,proto3" json:"time,omitempty"`
	AdditionalProperties *anypb.Any             `protobuf:"bytes,26,opt,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty"`
}

func (x *PlaidAccountRecurringTransaction) Reset() {
	*x = PlaidAccountRecurringTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaidAccountRecurringTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaidAccountRecurringTransaction) ProtoMessage() {}

func (x *PlaidAccountRecurringTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaidAccountRecurringTransaction.ProtoReflect.Descriptor instead.
func (*PlaidAccountRecurringTransaction) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{57}
}

func (x *PlaidAccountRecurringTransaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetPersonalFinanceCategoryDetailed() string {
	if x != nil {
		return x.PersonalFinanceCategoryDetailed
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetFirstDate() string {
	if x != nil {
		return x.FirstDate
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetLastDate() string {
	if x != nil {
		return x.LastDate
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetTransactionIds() string {
	if x != nil {
		return x.TransactionIds
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetAverageAmount() string {
	if x != nil {
		return x.AverageAmount
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetAverageAmountIsoCurrencyCode() string {
	if x != nil {
		return x.AverageAmountIsoCurrencyCode
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetLastAmount() string {
	if x != nil {
		return x.LastAmount
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetLastAmountIsoCurrencyCode() string {
	if x != nil {
		return x.LastAmountIsoCurrencyCode
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PlaidAccountRecurringTransaction) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlaidAccountRecurringTransaction) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

func (x *PlaidAccountRecurringTransaction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlaidAccountRecurringTransaction) GetFlow() string {
	if x != nil {
		return x.Flow
	}
	return ""
}

func (x *PlaidAccountRecurringTransaction) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *PlaidAccountRecurringTransaction) GetAdditionalProperties() *anypb.Any {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type PlaidAccountTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Basic transaction details
	AccountId              string  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" ch:"account_id"`                                          // @gotag: ch:"account_id"
	Amount                 float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty" ch:"amount"`                                                               // @gotag: ch:"amount"
	IsoCurrencyCode        string  `protobuf:"bytes,3,opt,name=iso_currency_code,json=isoCurrencyCode,proto3" json:"iso_currency_code,omitempty" ch:"iso_currency_code"`                      // @gotag: ch:"iso_currency_code"
	UnofficialCurrencyCode string  `protobuf:"bytes,4,opt,name=unofficial_currency_code,json=unofficialCurrencyCode,proto3" json:"unofficial_currency_code,omitempty" ch:"unofficial_currency_code"` // @gotag: ch:"unofficial_currency_code"
	TransactionId          string  `protobuf:"bytes,20,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty" ch:"transaction_id"`                             // @gotag: ch:"transaction_id"
	TransactionCode        string  `protobuf:"bytes,21,opt,name=transaction_code,json=transactionCode,proto3" json:"transaction_code,omitempty" ch:"transaction_code"`                       // @gotag: ch:"transaction_code"
	// Date details
	CurrentDate        string `protobuf:"bytes,8,opt,name=current_date,json=currentDate,proto3" json:"current_date,omitempty" ch:"date"`                       // @gotag: ch:"date"
	CurrentDatetime    string `protobuf:"bytes,9,opt,name=current_datetime,json=currentDatetime,proto3" json:"current_datetime,omitempty" ch:"datetime"`           // @gotag: ch:"datetime"
	AuthorizedDate     string `protobuf:"bytes,10,opt,name=authorized_date,json=authorizedDate,proto3" json:"authorized_date,omitempty" ch:"authorized_date"`             // @gotag: ch:"authorized_date"
	AuthorizedDatetime string `protobuf:"bytes,11,opt,name=authorized_datetime,json=authorizedDatetime,proto3" json:"authorized_datetime,omitempty" ch:"authorized_datetime"` // @gotag: ch:"authorized_datetime"
	// Transaction categories
	CategoryId                      string   `protobuf:"bytes,6,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty" ch:"category_id"` // @gotag: ch:"category_id"
	Categories                      []string `protobuf:"bytes,46,rep,name=categories,proto3" json:"categories,omitempty"`
	PersonalFinanceCategoryPrimary  string   `protobuf:"bytes,26,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty" ch:"personal_finance_category_primary"`    // @gotag: ch:"personal_finance_category_primary"
	PersonalFinanceCategoryDetailed string   `protobuf:"bytes,27,opt,name=personal_finance_category_detailed,json=personalFinanceCategoryDetailed,proto3" json:"personal_finance_category_detailed,omitempty" ch:"personal_finance_category_detailed"` // @gotag: ch:"personal_finance_category_detailed"
	// Merchant details
	Name         string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty" ch:"name"`                                     // @gotag: ch:"name"
	MerchantName string `protobuf:"bytes,14,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty" ch:"merchant_name"` // @gotag: ch:"merchant_name"
	// Payment details
	CheckNumber                 string `protobuf:"bytes,7,opt,name=check_number,json=checkNumber,proto3" json:"check_number,omitempty" ch:"check_number"`                               // @gotag: ch:"check_number"
	PaymentChannel              string `protobuf:"bytes,16,opt,name=payment_channel,json=paymentChannel,proto3" json:"payment_channel,omitempty" ch:"payment_channel"`                     // @gotag: ch:"payment_channel"
	Pending                     bool   `protobuf:"varint,17,opt,name=pending,proto3" json:"pending,omitempty" ch:"pending"`                                                        // @gotag: ch:"pending"
	PendingTransactionId        string `protobuf:"bytes,18,opt,name=pending_transaction_id,json=pendingTransactionId,proto3" json:"pending_transaction_id,omitempty" ch:"pending_transaction_id"` // @gotag: ch:"pending_transaction_id"
	AccountOwner                string `protobuf:"bytes,19,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty" ch:"account_owner"`                           // @gotag: ch:"account_owner"
	PaymentMetaByOrderOf        string `protobuf:"bytes,36,opt,name=payment_meta_by_order_of,json=paymentMetaByOrderOf,proto3" json:"payment_meta_by_order_of,omitempty"`
	PaymentMetaPayee            string `protobuf:"bytes,37,opt,name=payment_meta_payee,json=paymentMetaPayee,proto3" json:"payment_meta_payee,omitempty"`
	PaymentMetaPayer            string `protobuf:"bytes,38,opt,name=payment_meta_payer,json=paymentMetaPayer,proto3" json:"payment_meta_payer,omitempty"`
	PaymentMetaPaymentMethod    string `protobuf:"bytes,39,opt,name=payment_meta_payment_method,json=paymentMetaPaymentMethod,proto3" json:"payment_meta_payment_method,omitempty"`
	PaymentMetaPaymentProcessor string `protobuf:"bytes,40,opt,name=payment_meta_payment_processor,json=paymentMetaPaymentProcessor,proto3" json:"payment_meta_payment_processor,omitempty"`
	PaymentMetaPpdId            string `protobuf:"bytes,41,opt,name=payment_meta_ppd_id,json=paymentMetaPpdId,proto3" json:"payment_meta_ppd_id,omitempty"`
	PaymentMetaReason           string `protobuf:"bytes,42,opt,name=payment_meta_reason,json=paymentMetaReason,proto3" json:"payment_meta_reason,omitempty"`
	PaymentMetaReferenceNumber  string `protobuf:"bytes,43,opt,name=payment_meta_reference_number,json=paymentMetaReferenceNumber,proto3" json:"payment_meta_reference_number,omitempty"`
	// Location details
	LocationAddress     string  `protobuf:"bytes,28,opt,name=location_address,json=locationAddress,proto3" json:"location_address,omitempty"`
	LocationCity        string  `protobuf:"bytes,29,opt,name=location_city,json=locationCity,proto3" json:"location_city,omitempty"`
	LocationRegion      string  `protobuf:"bytes,30,opt,name=location_region,json=locationRegion,proto3" json:"location_region,omitempty"`
	LocationPostalCode  string  `protobuf:"bytes,31,opt,name=location_postal_code,json=locationPostalCode,proto3" json:"location_postal_code,omitempty"`
	LocationCountry     string  `protobuf:"bytes,32,opt,name=location_country,json=locationCountry,proto3" json:"location_country,omitempty"`
	LocationLat         float64 `protobuf:"fixed64,33,opt,name=location_lat,json=locationLat,proto3" json:"location_lat,omitempty"`
	LocationLon         float64 `protobuf:"fixed64,34,opt,name=location_lon,json=locationLon,proto3" json:"location_lon,omitempty"`
	LocationStoreNumber string  `protobuf:"bytes,35,opt,name=location_store_number,json=locationStoreNumber,proto3" json:"location_store_number,omitempty"`
	// Additional properties
	Time                 *timestamppb.Timestamp `protobuf:"bytes,44,opt,name=time,proto3" json:"time,omitempty"`
	AdditionalProperties *anypb.Any             `protobuf:"bytes,45,opt,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty"`
	// System generated fields
	Id     uint64 `protobuf:"varint,22,opt,name=id,proto3" json:"id,omitempty"`
	UserId uint64 `protobuf:"varint,23,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LinkId uint64 `protobuf:"varint,24,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
}

func (x *PlaidAccountTransaction) Reset() {
	*x = PlaidAccountTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaidAccountTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaidAccountTransaction) ProtoMessage() {}

func (x *PlaidAccountTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_message_financial_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaidAccountTransaction.ProtoReflect.Descriptor instead.
func (*PlaidAccountTransaction) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_message_financial_service_proto_rawDescGZIP(), []int{58}
}

func (x *PlaidAccountTransaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PlaidAccountTransaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PlaidAccountTransaction) GetIsoCurrencyCode() string {
	if x != nil {
		return x.IsoCurrencyCode
	}
	return ""
}

func (x *PlaidAccountTransaction) GetUnofficialCurrencyCode() string {
	if x != nil {
		return x.UnofficialCurrencyCode
	}
	return ""
}

func (x *PlaidAccountTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PlaidAccountTransaction) GetTransactionCode() string {
	if x != nil {
		return x.TransactionCode
	}
	return ""
}

func (x *PlaidAccountTransaction) GetCurrentDate() string {
	if x != nil {
		return x.CurrentDate
	}
	return ""
}

func (x *PlaidAccountTransaction) GetCurrentDatetime() string {
	if x != nil {
		return x.CurrentDatetime
	}
	return ""
}

func (x *PlaidAccountTransaction) GetAuthorizedDate() string {
	if x != nil {
		return x.AuthorizedDate
	}
	return ""
}

func (x *PlaidAccountTransaction) GetAuthorizedDatetime() string {
	if x != nil {
		return x.AuthorizedDatetime
	}
	return ""
}

func (x *PlaidAccountTransaction) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *PlaidAccountTransaction) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *PlaidAccountTransaction) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPersonalFinanceCategoryDetailed() string {
	if x != nil {
		return x.PersonalFinanceCategoryDetailed
	}
	return ""
}

func (x *PlaidAccountTransaction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlaidAccountTransaction) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *PlaidAccountTransaction) GetCheckNumber() string {
	if x != nil {
		return x.CheckNumber
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPaymentChannel() string {
	if x != nil {
		return x.PaymentChannel
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *PlaidAccountTransaction) GetPendingTransactionId() string {
	if x != nil {
		return x.PendingTransactionId
	}
	return ""
}

func (x *PlaidAccountTransaction) GetAccountOwner() string {
	if x != nil {
		return x.AccountOwner
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPaymentMetaByOrderOf() string {
	if x != nil {
		return x.PaymentMetaByOrderOf
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPaymentMetaPayee() string {
	if x != nil {
		return x.PaymentMetaPayee
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPaymentMetaPayer() string {
	if x != nil {
		return x.PaymentMetaPayer
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPaymentMetaPaymentMethod() string {
	if x != nil {
		return x.PaymentMetaPaymentMethod
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPaymentMetaPaymentProcessor() string {
	if x != nil {
		return x.PaymentMetaPaymentProcessor
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPaymentMetaPpdId() string {
	if x != nil {
		return x.PaymentMetaPpdId
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPaymentMetaReason() string {
	if x != nil {
		return x.PaymentMetaReason
	}
	return ""
}

func (x *PlaidAccountTransaction) GetPaymentMetaReferenceNumber() string {
	if x != nil {
		return x.PaymentMetaReferenceNumber
	}
	return ""
}

func (x *PlaidAccountTransaction) GetLocationAddress() string {
	if x != nil {
		return x.LocationAddress
	}
	return ""
}

func (x *PlaidAccountTransaction) GetLocationCity() string {
	if x != nil {
		return x.LocationCity
	}
	return ""
}

func (x *PlaidAccountTransaction) GetLocationRegion() string {
	if x != nil {
		return x.LocationRegion
	}
	return ""
}

func (x *PlaidAccountTransaction) GetLocationPostalCode() string {
	if x != nil {
		return x.LocationPostalCode
	}
	return ""
}

func (x *PlaidAccountTransaction) GetLocationCountry() string {
	if x != nil {
		return x.LocationCountry
	}
	return ""
}

func (x *PlaidAccountTransaction) GetLocationLat() float64 {
	if x != nil {
		return x.LocationLat
	}
	return 0
}

func (x *PlaidAccountTransaction) GetLocationLon() float64 {
	if x != nil {
		return x.LocationLon
	}
	return 0
}

func (x *PlaidAccountTransaction) GetLocationStoreNumber() string {
	if x != nil {
		return x.LocationStoreNumber
	}
	return ""
}

func (x *PlaidAccountTransaction) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *PlaidAccountTransaction) GetAdditionalProperties() *anypb.Any {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *PlaidAccountTransaction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlaidAccountTransaction) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlaidAccountTransaction) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

var File_financial_service_v1_message_financial_service_proto protoreflect.FileDescriptor

var file_financial_service_v1_message_financial_service_proto_rawDesc = []byte{
	0x0a, 0x34, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x22, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x03, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x70,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x14, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x71, 0x0a,
	0x1a, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x18, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4c, 0x0a, 0x20, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x1d, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x4a,
	0x0a, 0x1f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x1c, 0x73, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0xb8, 0x05, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x14, 0x73, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x13, 0x73, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x2a, 0x02, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x62, 0x0a, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6c, 0x69,
	0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x4c, 0x69, 0x69, 0x6e, 0x6b, 0x12, 0x7b, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xdd,
	0x01, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x9f,
	0x03, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x56, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x6b, 0x65, 0x61, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x6b, 0x65, 0x61, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x41,
	0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x46, 0x6f, 0x72, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xb2, 0x0b, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x53,
	0x79, 0x6e, 0x63, 0x42, 0x0b, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x46, 0x0a, 0x0b, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02,
	0x38, 0x01, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x44, 0x0a,
	0x1c, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x19, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x4e,
	0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x39, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x0d,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01,
	0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x62,
	0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x12,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x56, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x72,
	0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x10, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x15, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x13, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x35, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x16, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x11,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0f, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x42, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xce, 0x01, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf1, 0x02, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x18, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x14, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x16, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x52,
	0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x94, 0x02, 0x0a, 0x09, 0x50,
	0x6c, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x24,
	0x0a, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x0f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1c, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xaa, 0x0f, 0x0a, 0x12, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x66, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x09, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x18, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x12, 0x33, 0x0a,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x15, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x12, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x1a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x19, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x11, 0x79, 0x74,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0f, 0x79, 0x74, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x12, 0x79,
	0x74, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x10, 0x79, 0x74,
	0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x57, 0x0a, 0x26, 0x70, 0x73, 0x6c, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x22, 0x70, 0x73, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x19, 0x70, 0x73, 0x6c,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x6d, 0x61, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x16, 0x70, 0x73, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x1e, 0x70, 0x73, 0x6c,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x1b, 0x70, 0x73, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x11, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x18, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x16, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x15, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x12, 0x3b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xca,
	0x08, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x70, 0x72, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x72, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x04, 0x61, 0x70, 0x72,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x59, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x16,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52, 0x15, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc4, 0x0d, 0x0a, 0x0f,
	0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x2a,
	0x0a, 0x0e, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0d, 0x65, 0x73, 0x63,
	0x72, 0x6f, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x68, 0x61,
	0x73, 0x5f, 0x70, 0x6d, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x50, 0x6d, 0x69, 0x12, 0x39, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x14, 0x68,
	0x61, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x61,
	0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x15, 0x6c,
	0x6f, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x13, 0x6c, 0x6f, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x1a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x3b, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a,
	0x1d, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x1b, 0x6f, 0x75, 0x74, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x1c, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x1a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x0d, 0x70, 0x61, 0x73, 0x74, 0x44, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x11, 0x79, 0x74, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0f,
	0x79, 0x74, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x12, 0x79, 0x74, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x10, 0x79, 0x74, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x15, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x19,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x16,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0x88, 0x05, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x87, 0x06,
	0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x06, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x92, 0x41, 0x00, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x06, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x48,
	0x0a, 0x07, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x10, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x07, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52, 0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa4, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08,
	0x00, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73,
	0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x8d,
	0x06, 0x0a, 0x09, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x42, 0x75, 0x79, 0x20, 0x61, 0x20, 0x63, 0x61, 0x72, 0x22, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x42, 0x75, 0x79, 0x20, 0x61, 0x20, 0x63,
	0x61, 0x72, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92,
	0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x6f, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a,
	0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69,
	0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08,
	0x00, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02,
	0x38, 0x01, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x47, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x10, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xfa,
	0x01, 0x0a, 0x09, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x20, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x2e, 0x2e, 0x22, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x08,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x11, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x10,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x52, 0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x03, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xfc, 0x02, 0x0a, 0x09,
	0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x0d, 0x4a, 0x0b, 0x22, 0x42, 0x75, 0x79, 0x20, 0x61, 0x20, 0x63, 0x61, 0x72, 0x22, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x42, 0x75, 0x79, 0x20, 0x61, 0x20, 0x63, 0x61,
	0x72, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x16,
	0x4a, 0x14, 0x22, 0x74, 0x65, 0x73, 0x74, 0x74, 0x61, 0x67, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x0a, 0x52, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x06, 0x62, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf7, 0x01, 0x0a, 0x06, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22,
	0x42, 0x75, 0x79, 0x20, 0x61, 0x20, 0x63, 0x61, 0x72, 0x22, 0x80, 0x01, 0x0a, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x0a, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02,
	0x38, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x4a, 0x09, 0x22, 0x48, 0x6f, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x22, 0x80, 0x01, 0x03, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x32, 0x4a, 0x2d,
	0x22, 0x48, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69, 0x6c, 0x79,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x80, 0x01, 0x0a,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x0a, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0x84, 0x06, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x4a,
	0x17, 0x22, 0x6e, 0x66, 0x64, 0x6b, 0x6a, 0x66, 0x6a, 0x6b, 0x73, 0x64, 0x68, 0x6a, 0x68, 0x66,
	0x6a, 0x73, 0x64, 0x68, 0x6a, 0x67, 0x66, 0x22, 0x80, 0x01, 0x03, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x20, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x4a, 0x27, 0x22, 0x6b, 0x36, 0x37, 0x45, 0x34, 0x78,
	0x4b, 0x76, 0x4d, 0x6c, 0x68, 0x6d, 0x6c, 0x65, 0x45, 0x61, 0x34, 0x70, 0x67, 0x39, 0x68, 0x6c,
	0x77, 0x47, 0x47, 0x4e, 0x6e, 0x6e, 0x45, 0x65, 0x69, 0x78, 0x50, 0x6f, 0x6c, 0x47, 0x6d, 0x22,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x22, 0x31, 0x35, 0x22, 0x52,
	0x09, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x73, 0x12, 0x39, 0x0a, 0x11, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x31, 0x33, 0x2e,
	0x37, 0x33, 0x22, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x32, 0x30,
	0x32, 0x31, 0x2d, 0x30, 0x34, 0x2d, 0x31, 0x33, 0x22, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x73, 0x4f, 0x66, 0x12,
	0x59, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x32, 0x2d,
	0x30, 0x36, 0x2d, 0x30, 0x37, 0x54, 0x32, 0x33, 0x3a, 0x30, 0x31, 0x3a, 0x30, 0x30, 0x5a, 0x22,
	0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x34, 0x34, 0x33,
	0x37, 0x2e, 0x33, 0x35, 0x39, 0x30, 0x35, 0x22, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x11, 0x69, 0x73,
	0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x22, 0x55, 0x53, 0x44,
	0x22, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x32, 0x35, 0x30, 0x30,
	0x30, 0x22, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x4a, 0x27, 0x22, 0x76, 0x4c, 0x52, 0x4d, 0x56, 0x33, 0x4d,
	0x76, 0x59, 0x31, 0x46, 0x59, 0x4e, 0x50, 0x39, 0x31, 0x6f, 0x6e, 0x33, 0x35, 0x43, 0x4a, 0x44,
	0x35, 0x51, 0x4e, 0x35, 0x72, 0x77, 0x39, 0x46, 0x70, 0x61, 0x39, 0x71, 0x4f, 0x4c, 0x22, 0x52,
	0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x18, 0x75,
	0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92,
	0x41, 0x07, 0x4a, 0x05, 0x22, 0x55, 0x53, 0x44, 0x22, 0x52, 0x16, 0x75, 0x6e, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xbc, 0x07, 0x0a, 0x12, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x13, 0x92, 0x41, 0x10, 0x4a,
	0x0e, 0x22, 0x20, 0x30, 0x2e, 0x31, 0x34, 0x30, 0x30, 0x33, 0x34, 0x36, 0x31, 0x36, 0x22, 0x52,
	0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x32, 0x30,
	0x32, 0x32, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x34, 0x22, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x73, 0x4f, 0x66, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x75, 0x73,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22,
	0x64, 0x66, 0x6b, 0x6a, 0x68, 0x64, 0x67, 0x6a, 0x64, 0x68, 0x68, 0x67, 0x64, 0x22, 0x52, 0x05,
	0x63, 0x75, 0x73, 0x69, 0x70, 0x12, 0x33, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92,
	0x41, 0x09, 0x4a, 0x07, 0x22, 0x69, 0x6e, 0x73, 0x5f, 0x33, 0x22, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x17, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x4a, 0x0f, 0x22, 0x64, 0x66, 0x6b, 0x6a, 0x68, 0x64, 0x67, 0x6a, 0x64, 0x68, 0x68, 0x67, 0x64,
	0x22, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x74, 0x72, 0x75, 0x65,
	0x22, 0x52, 0x10, 0x69, 0x73, 0x43, 0x61, 0x73, 0x68, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x64, 0x66, 0x6b, 0x6a, 0x68, 0x64, 0x67,
	0x6a, 0x64, 0x68, 0x68, 0x67, 0x64, 0x22, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x36, 0x0a,
	0x11, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x22,
	0x55, 0x53, 0x44, 0x22, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x44, 0x6f, 0x67, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x64, 0x66, 0x6b,
	0x6a, 0x68, 0x64, 0x67, 0x6a, 0x64, 0x68, 0x68, 0x67, 0x64, 0x22, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x4a, 0x27, 0x22, 0x76, 0x4c, 0x52, 0x4d, 0x56, 0x33, 0x4d,
	0x76, 0x59, 0x31, 0x46, 0x59, 0x4e, 0x50, 0x39, 0x31, 0x6f, 0x6e, 0x33, 0x35, 0x43, 0x4a, 0x44,
	0x35, 0x51, 0x4e, 0x35, 0x72, 0x77, 0x39, 0x46, 0x70, 0x61, 0x39, 0x71, 0x4f, 0x4c, 0x22, 0x52,
	0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73,
	0x65, 0x64, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a,
	0x0f, 0x22, 0x64, 0x66, 0x6b, 0x6a, 0x68, 0x64, 0x67, 0x6a, 0x64, 0x68, 0x68, 0x67, 0x64, 0x22,
	0x52, 0x05, 0x73, 0x65, 0x64, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x44, 0x4f, 0x47, 0x45, 0x22, 0x52, 0x0c, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x4a, 0x10, 0x22, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x18, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x22, 0x55, 0x53,
	0x44, 0x22, 0x52, 0x16, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x32, 0x2d,
	0x30, 0x36, 0x2d, 0x30, 0x37, 0x54, 0x32, 0x33, 0x3a, 0x30, 0x31, 0x3a, 0x30, 0x30, 0x5a, 0x22,
	0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x03, 0x41, 0x70, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x41, 0x70, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf6, 0x05, 0x0a, 0x09, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x51,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08,
	0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xc9, 0x04, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a,
	0x02, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a,
	0x02, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x56, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08,
	0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5d,
	0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x10, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x65, 0x0a,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xd4, 0x04, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a,
	0x02, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08,
	0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0e,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0d, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0xdc, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x63, 0x0a,
	0x11, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48,
	0x01, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x44,
	0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x78, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0e, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x68, 0x65, 0x65, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x73, 0x12, 0x64,
	0x0a, 0x14, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01,
	0x52, 0x12, 0x63, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01,
	0x52, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xac, 0x04, 0x0a, 0x17, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x10, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x92, 0x41, 0x00, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xbd, 0x02, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xae, 0x02, 0x0a, 0x0b, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x93, 0x05, 0x0a, 0x0c, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x06, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf9, 0x06, 0x0a, 0x12, 0x43, 0x61, 0x73, 0x68, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3c, 0x0a,
	0x1b, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x63, 0x61, 0x73, 0x68, 0x41, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x15, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x61, 0x73, 0x68,
	0x41, 0x74, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x5d, 0x0a,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x14,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xe5, 0x04, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46,
	0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x94, 0x02, 0x0a, 0x14, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xce, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x49, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77,
	0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xe8, 0x06, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa7, 0x03, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x86, 0x06, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x37, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22,
	0xc1, 0x03, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3b,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0x92, 0x06, 0x0a, 0x0f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3d,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x4f, 0x66, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x67, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x6e, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x56,
	0x0a, 0x16, 0x6e, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xac, 0x08, 0x0a, 0x07, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x70, 0x61, 0x69, 0x64, 0x4f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x11,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x44, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x94, 0x04, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf4,
	0x03, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa4, 0x06, 0x0a, 0x0c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57,
	0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x91, 0x03, 0x0a,
	0x0b, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xf2, 0x04, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57,
	0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xeb, 0x07, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46,
	0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0x98, 0x04, 0x0a, 0x15, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xe3,
	0x02, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x22, 0xe8, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22,
	0xc3, 0x05, 0x0a, 0x13, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x57, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x84, 0x04, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xe9, 0x04, 0x0a,
	0x0c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xfc, 0x02, 0x0a, 0x10, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xe3, 0x05, 0x0a, 0x21, 0x50, 0x6c, 0x61, 0x69,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x6d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x07,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92,
	0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32,
	0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x81, 0x08,
	0x0a, 0x20, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x4b, 0x0a, 0x22, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41,
	0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x6c,
	0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xef, 0x0e, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x4b, 0x0a, 0x22, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x70, 0x61, 0x79, 0x65, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x61, 0x79, 0x65, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x2d, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x70, 0x70, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x70, 0x64, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x1d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32,
	0x02, 0x20, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x2a, 0x7a, 0x0a, 0x11, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a,
	0x8e, 0x01, 0x0a, 0x0a, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x17, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x4f, 0x41, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04,
	0x2a, 0x81, 0x01, 0x0a, 0x08, 0x47, 0x6f, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x4f, 0x41, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x4f, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x4e,
	0x53, 0x45, 0x10, 0x04, 0x2a, 0x8f, 0x02, 0x0a, 0x0a, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x52, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x45,
	0x59, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x55, 0x4e,
	0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47,
	0x53, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x53, 0x41, 0x56,
	0x49, 0x4e, 0x47, 0x53, 0x10, 0x07, 0x2a, 0x6f, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0xe5, 0x03, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54,
	0x52, 0x49, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x52,
	0x49, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x41, 0x53, 0x54, 0x5f, 0x44, 0x55, 0x45, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x52,
	0x49, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x50, 0x41, 0x49, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x52,
	0x49, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x07, 0x12, 0x31, 0x0a,
	0x2d, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x52, 0x49,
	0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x0a, 0x2a,
	0xeb, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x17, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12,
	0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x50, 0x0a,
	0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x2a,
	0x64, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x10, 0x02, 0x2a, 0xa0, 0x03, 0x0a, 0x1d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49,
	0x4e, 0x53, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x45, 0x52,
	0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x53, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x58,
	0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49,
	0x4e, 0x53, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x44, 0x45, 0x42, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x3b, 0x0a, 0x37, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e,
	0x53, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x45,
	0x53, 0x53, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x4e, 0x53, 0x45,
	0x53, 0x10, 0x04, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x3b, 0x0a, 0x37, 0x50,
	0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x52, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x2a, 0x97, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49,
	0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4e, 0x41,
	0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x42, 0xa4, 0x02, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x7d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f, 0x6c, 0x6f,
	0x6d, 0x6f, 0x6e, 0x41, 0x49, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x46, 0x58, 0x58, 0xaa, 0x02, 0x13, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x1f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_financial_service_v1_message_financial_service_proto_rawDescOnce sync.Once
	file_financial_service_v1_message_financial_service_proto_rawDescData = file_financial_service_v1_message_financial_service_proto_rawDesc
)

func file_financial_service_v1_message_financial_service_proto_rawDescGZIP() []byte {
	file_financial_service_v1_message_financial_service_proto_rawDescOnce.Do(func() {
		file_financial_service_v1_message_financial_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_financial_service_v1_message_financial_service_proto_rawDescData)
	})
	return file_financial_service_v1_message_financial_service_proto_rawDescData
}

var file_financial_service_v1_message_financial_service_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_financial_service_v1_message_financial_service_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_financial_service_v1_message_financial_service_proto_goTypes = []interface{}{
	(BankAccountStatus)(0),                    // 0: financial_service.v1.BankAccountStatus
	(GoalStatus)(0),                           // 1: financial_service.v1.GoalStatus
	(GoalType)(0),                             // 2: financial_service.v1.GoalType
	(PocketType)(0),                           // 3: financial_service.v1.PocketType
	(BankAccountType)(0),                      // 4: financial_service.v1.BankAccountType
	(StripeSubscriptionStatus)(0),             // 5: financial_service.v1.StripeSubscriptionStatus
	(LinkStatus)(0),                           // 6: financial_service.v1.LinkStatus
	(LinkType)(0),                             // 7: financial_service.v1.LinkType
	(CategoryType)(0),                         // 8: financial_service.v1.CategoryType
	(PersonalActionableInsightName)(0),        // 9: financial_service.v1.PersonalActionableInsightName
	(FinancialUserProfileType)(0),             // 10: financial_service.v1.FinancialUserProfileType
	(*StripeSubscription)(nil),                // 11: financial_service.v1.StripeSubscription
	(*FinancialUserProfile)(nil),              // 12: financial_service.v1.FinancialUserProfile
	(*ActionableInsight)(nil),                 // 13: financial_service.v1.ActionableInsight
	(*PersonalActionableInsight)(nil),         // 14: financial_service.v1.PersonalActionableInsight
	(*Link)(nil),                              // 15: financial_service.v1.Link
	(*PlaidSync)(nil),                         // 16: financial_service.v1.PlaidSync
	(*Token)(nil),                             // 17: financial_service.v1.Token
	(*PlaidLink)(nil),                         // 18: financial_service.v1.PlaidLink
	(*StudentLoanAccount)(nil),                // 19: financial_service.v1.StudentLoanAccount
	(*CreditAccount)(nil),                     // 20: financial_service.v1.CreditAccount
	(*MortgageAccount)(nil),                   // 21: financial_service.v1.MortgageAccount
	(*InvestmentAccount)(nil),                 // 22: financial_service.v1.InvestmentAccount
	(*BankAccount)(nil),                       // 23: financial_service.v1.BankAccount
	(*Pocket)(nil),                            // 24: financial_service.v1.Pocket
	(*SmartGoal)(nil),                         // 25: financial_service.v1.SmartGoal
	(*SmartNote)(nil),                         // 26: financial_service.v1.SmartNote
	(*Forecast)(nil),                          // 27: financial_service.v1.Forecast
	(*Milestone)(nil),                         // 28: financial_service.v1.Milestone
	(*Budget)(nil),                            // 29: financial_service.v1.Budget
	(*Category)(nil),                          // 30: financial_service.v1.Category
	(*InvesmentHolding)(nil),                  // 31: financial_service.v1.InvesmentHolding
	(*InvestmentSecurity)(nil),                // 32: financial_service.v1.InvestmentSecurity
	(*Apr)(nil),                               // 33: financial_service.v1.Apr
	(*MergeLink)(nil),                         // 34: financial_service.v1.MergeLink
	(*LinkedAccountingAccount)(nil),           // 35: financial_service.v1.LinkedAccountingAccount
	(*TransactionDetails)(nil),                // 36: financial_service.v1.TransactionDetails
	(*ReferenceDetails)(nil),                  // 37: financial_service.v1.ReferenceDetails
	(*ReportDetails)(nil),                     // 38: financial_service.v1.ReportDetails
	(*BusinessChartOfAccounts)(nil),           // 39: financial_service.v1.BusinessChartOfAccounts
	(*Address)(nil),                           // 40: financial_service.v1.Address
	(*Attachments)(nil),                       // 41: financial_service.v1.Attachments
	(*BalanceSheet)(nil),                      // 42: financial_service.v1.BalanceSheet
	(*ReportItem)(nil),                        // 43: financial_service.v1.ReportItem
	(*CashFlowStatements)(nil),                // 44: financial_service.v1.CashFlowStatements
	(*CompanyInfo)(nil),                       // 45: financial_service.v1.CompanyInfo
	(*AccountingAttachment)(nil),              // 46: financial_service.v1.AccountingAttachment
	(*Contacts)(nil),                          // 47: financial_service.v1.Contacts
	(*CreditNote)(nil),                        // 48: financial_service.v1.CreditNote
	(*CreditNoteLineItem)(nil),                // 49: financial_service.v1.CreditNoteLineItem
	(*Expense)(nil),                           // 50: financial_service.v1.Expense
	(*ExpenseLine)(nil),                       // 51: financial_service.v1.ExpenseLine
	(*IncomeStatement)(nil),                   // 52: financial_service.v1.IncomeStatement
	(*Invoice)(nil),                           // 53: financial_service.v1.Invoice
	(*InvoiceLineItem)(nil),                   // 54: financial_service.v1.InvoiceLineItem
	(*Item)(nil),                              // 55: financial_service.v1.Item
	(*JournalEntry)(nil),                      // 56: financial_service.v1.JournalEntry
	(*JournalLine)(nil),                       // 57: financial_service.v1.JournalLine
	(*Payment)(nil),                           // 58: financial_service.v1.Payment
	(*PurchaseOrder)(nil),                     // 59: financial_service.v1.PurchaseOrder
	(*PurchaseOrderLineItem)(nil),             // 60: financial_service.v1.PurchaseOrderLineItem
	(*TaxRate)(nil),                           // 61: financial_service.v1.TaxRate
	(*TrackingCategory)(nil),                  // 62: financial_service.v1.TrackingCategory
	(*BusinessTransaction)(nil),               // 63: financial_service.v1.BusinessTransaction
	(*TransactionLineItem)(nil),               // 64: financial_service.v1.TransactionLineItem
	(*VendorCredit)(nil),                      // 65: financial_service.v1.VendorCredit
	(*VendorCreditLine)(nil),                  // 66: financial_service.v1.VendorCreditLine
	(*PlaidAccountInvestmentTransaction)(nil), // 67: financial_service.v1.PlaidAccountInvestmentTransaction
	(*PlaidAccountRecurringTransaction)(nil),  // 68: financial_service.v1.PlaidAccountRecurringTransaction
	(*PlaidAccountTransaction)(nil),           // 69: financial_service.v1.PlaidAccountTransaction
	(*timestamppb.Timestamp)(nil),             // 70: google.protobuf.Timestamp
	(*anypb.Any)(nil),                         // 71: google.protobuf.Any
}
var file_financial_service_v1_message_financial_service_proto_depIdxs = []int32{
	5,   // 0: financial_service.v1.StripeSubscription.stripe_subscription_status:type_name -> financial_service.v1.StripeSubscriptionStatus
	11,  // 1: financial_service.v1.FinancialUserProfile.stripe_subscriptions:type_name -> financial_service.v1.StripeSubscription
	15,  // 2: financial_service.v1.FinancialUserProfile.link:type_name -> financial_service.v1.Link
	13,  // 3: financial_service.v1.FinancialUserProfile.actionable_insights:type_name -> financial_service.v1.ActionableInsight
	34,  // 4: financial_service.v1.FinancialUserProfile.merge_liink:type_name -> financial_service.v1.MergeLink
	14,  // 5: financial_service.v1.FinancialUserProfile.actionable_personal_insights:type_name -> financial_service.v1.PersonalActionableInsight
	10,  // 6: financial_service.v1.FinancialUserProfile.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	70,  // 7: financial_service.v1.ActionableInsight.generated_time:type_name -> google.protobuf.Timestamp
	9,   // 8: financial_service.v1.PersonalActionableInsight.insight_name:type_name -> financial_service.v1.PersonalActionableInsightName
	70,  // 9: financial_service.v1.PersonalActionableInsight.generated_time:type_name -> google.protobuf.Timestamp
	16,  // 10: financial_service.v1.Link.plaid_sync:type_name -> financial_service.v1.PlaidSync
	6,   // 11: financial_service.v1.Link.link_status:type_name -> financial_service.v1.LinkStatus
	18,  // 12: financial_service.v1.Link.plaid_link:type_name -> financial_service.v1.PlaidLink
	17,  // 13: financial_service.v1.Link.token:type_name -> financial_service.v1.Token
	23,  // 14: financial_service.v1.Link.bank_accounts:type_name -> financial_service.v1.BankAccount
	22,  // 15: financial_service.v1.Link.investment_accounts:type_name -> financial_service.v1.InvestmentAccount
	20,  // 16: financial_service.v1.Link.credit_accounts:type_name -> financial_service.v1.CreditAccount
	21,  // 17: financial_service.v1.Link.mortgage_accounts:type_name -> financial_service.v1.MortgageAccount
	19,  // 18: financial_service.v1.Link.student_loan_accounts:type_name -> financial_service.v1.StudentLoanAccount
	7,   // 19: financial_service.v1.Link.link_type:type_name -> financial_service.v1.LinkType
	70,  // 20: financial_service.v1.Token.last_merge_created_at:type_name -> google.protobuf.Timestamp
	0,   // 21: financial_service.v1.StudentLoanAccount.status:type_name -> financial_service.v1.BankAccountStatus
	33,  // 22: financial_service.v1.CreditAccount.aprs:type_name -> financial_service.v1.Apr
	0,   // 23: financial_service.v1.CreditAccount.status:type_name -> financial_service.v1.BankAccountStatus
	69,  // 24: financial_service.v1.CreditAccount.transactions:type_name -> financial_service.v1.PlaidAccountTransaction
	68,  // 25: financial_service.v1.CreditAccount.recurring_transactions:type_name -> financial_service.v1.PlaidAccountRecurringTransaction
	0,   // 26: financial_service.v1.MortgageAccount.status:type_name -> financial_service.v1.BankAccountStatus
	31,  // 27: financial_service.v1.InvestmentAccount.holdings:type_name -> financial_service.v1.InvesmentHolding
	32,  // 28: financial_service.v1.InvestmentAccount.securities:type_name -> financial_service.v1.InvestmentSecurity
	0,   // 29: financial_service.v1.InvestmentAccount.status:type_name -> financial_service.v1.BankAccountStatus
	69,  // 30: financial_service.v1.InvestmentAccount.transactions:type_name -> financial_service.v1.PlaidAccountTransaction
	4,   // 31: financial_service.v1.BankAccount.type:type_name -> financial_service.v1.BankAccountType
	24,  // 32: financial_service.v1.BankAccount.pockets:type_name -> financial_service.v1.Pocket
	0,   // 33: financial_service.v1.BankAccount.status:type_name -> financial_service.v1.BankAccountStatus
	69,  // 34: financial_service.v1.BankAccount.transactions:type_name -> financial_service.v1.PlaidAccountTransaction
	68,  // 35: financial_service.v1.BankAccount.recurring_transactions:type_name -> financial_service.v1.PlaidAccountRecurringTransaction
	25,  // 36: financial_service.v1.Pocket.goals:type_name -> financial_service.v1.SmartGoal
	3,   // 37: financial_service.v1.Pocket.type:type_name -> financial_service.v1.PocketType
	2,   // 38: financial_service.v1.SmartGoal.goal_type:type_name -> financial_service.v1.GoalType
	28,  // 39: financial_service.v1.SmartGoal.milestones:type_name -> financial_service.v1.Milestone
	27,  // 40: financial_service.v1.SmartGoal.forecasts:type_name -> financial_service.v1.Forecast
	26,  // 41: financial_service.v1.SmartGoal.notes:type_name -> financial_service.v1.SmartNote
	70,  // 42: financial_service.v1.SmartNote.created_at:type_name -> google.protobuf.Timestamp
	70,  // 43: financial_service.v1.SmartNote.updated_at:type_name -> google.protobuf.Timestamp
	29,  // 44: financial_service.v1.Milestone.budget:type_name -> financial_service.v1.Budget
	30,  // 45: financial_service.v1.Budget.category:type_name -> financial_service.v1.Category
	17,  // 46: financial_service.v1.MergeLink.token:type_name -> financial_service.v1.Token
	35,  // 47: financial_service.v1.MergeLink.account:type_name -> financial_service.v1.LinkedAccountingAccount
	41,  // 48: financial_service.v1.LinkedAccountingAccount.attachments:type_name -> financial_service.v1.Attachments
	45,  // 49: financial_service.v1.LinkedAccountingAccount.company_info:type_name -> financial_service.v1.CompanyInfo
	59,  // 50: financial_service.v1.LinkedAccountingAccount.purchase_orders:type_name -> financial_service.v1.PurchaseOrder
	38,  // 51: financial_service.v1.LinkedAccountingAccount.report_details:type_name -> financial_service.v1.ReportDetails
	37,  // 52: financial_service.v1.LinkedAccountingAccount.reference_details:type_name -> financial_service.v1.ReferenceDetails
	36,  // 53: financial_service.v1.LinkedAccountingAccount.transactions_details:type_name -> financial_service.v1.TransactionDetails
	53,  // 54: financial_service.v1.TransactionDetails.invoices:type_name -> financial_service.v1.Invoice
	58,  // 55: financial_service.v1.TransactionDetails.payments:type_name -> financial_service.v1.Payment
	50,  // 56: financial_service.v1.TransactionDetails.expenses:type_name -> financial_service.v1.Expense
	56,  // 57: financial_service.v1.TransactionDetails.journal_entries:type_name -> financial_service.v1.JournalEntry
	63,  // 58: financial_service.v1.TransactionDetails.transactions:type_name -> financial_service.v1.BusinessTransaction
	65,  // 59: financial_service.v1.TransactionDetails.vendor_credits:type_name -> financial_service.v1.VendorCredit
	48,  // 60: financial_service.v1.TransactionDetails.credit_notes:type_name -> financial_service.v1.CreditNote
	39,  // 61: financial_service.v1.ReferenceDetails.chart_of_accounts:type_name -> financial_service.v1.BusinessChartOfAccounts
	55,  // 62: financial_service.v1.ReferenceDetails.items:type_name -> financial_service.v1.Item
	61,  // 63: financial_service.v1.ReferenceDetails.tax_rates:type_name -> financial_service.v1.TaxRate
	47,  // 64: financial_service.v1.ReferenceDetails.contacts:type_name -> financial_service.v1.Contacts
	42,  // 65: financial_service.v1.ReportDetails.balance_sheets:type_name -> financial_service.v1.BalanceSheet
	44,  // 66: financial_service.v1.ReportDetails.cash_flow_statements:type_name -> financial_service.v1.CashFlowStatements
	52,  // 67: financial_service.v1.ReportDetails.income_statements:type_name -> financial_service.v1.IncomeStatement
	70,  // 68: financial_service.v1.BusinessChartOfAccounts.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 69: financial_service.v1.Address.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 70: financial_service.v1.Attachments.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 71: financial_service.v1.BalanceSheet.date:type_name -> google.protobuf.Timestamp
	43,  // 72: financial_service.v1.BalanceSheet.assets:type_name -> financial_service.v1.ReportItem
	43,  // 73: financial_service.v1.BalanceSheet.liabilities:type_name -> financial_service.v1.ReportItem
	43,  // 74: financial_service.v1.BalanceSheet.equity:type_name -> financial_service.v1.ReportItem
	70,  // 75: financial_service.v1.BalanceSheet.remote_generated_at:type_name -> google.protobuf.Timestamp
	70,  // 76: financial_service.v1.BalanceSheet.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 77: financial_service.v1.ReportItem.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 78: financial_service.v1.CashFlowStatements.start_period:type_name -> google.protobuf.Timestamp
	70,  // 79: financial_service.v1.CashFlowStatements.end_period:type_name -> google.protobuf.Timestamp
	43,  // 80: financial_service.v1.CashFlowStatements.operating_activities:type_name -> financial_service.v1.ReportItem
	43,  // 81: financial_service.v1.CashFlowStatements.investing_activities:type_name -> financial_service.v1.ReportItem
	43,  // 82: financial_service.v1.CashFlowStatements.financing_activities:type_name -> financial_service.v1.ReportItem
	70,  // 83: financial_service.v1.CashFlowStatements.remote_generated_at:type_name -> google.protobuf.Timestamp
	70,  // 84: financial_service.v1.CashFlowStatements.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 85: financial_service.v1.CompanyInfo.remote_created_at:type_name -> google.protobuf.Timestamp
	40,  // 86: financial_service.v1.CompanyInfo.addresses:type_name -> financial_service.v1.Address
	70,  // 87: financial_service.v1.CompanyInfo.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 88: financial_service.v1.Contacts.remote_updated_at:type_name -> google.protobuf.Timestamp
	70,  // 89: financial_service.v1.Contacts.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 90: financial_service.v1.CreditNote.transaction_date:type_name -> google.protobuf.Timestamp
	49,  // 91: financial_service.v1.CreditNote.line_items:type_name -> financial_service.v1.CreditNoteLineItem
	70,  // 92: financial_service.v1.CreditNote.remote_created_at:type_name -> google.protobuf.Timestamp
	70,  // 93: financial_service.v1.CreditNote.remote_updated_at:type_name -> google.protobuf.Timestamp
	70,  // 94: financial_service.v1.CreditNote.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 95: financial_service.v1.Expense.transaction_date:type_name -> google.protobuf.Timestamp
	70,  // 96: financial_service.v1.Expense.remote_created_at:type_name -> google.protobuf.Timestamp
	51,  // 97: financial_service.v1.Expense.lines:type_name -> financial_service.v1.ExpenseLine
	70,  // 98: financial_service.v1.Expense.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 99: financial_service.v1.ExpenseLine.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 100: financial_service.v1.IncomeStatement.start_period:type_name -> google.protobuf.Timestamp
	70,  // 101: financial_service.v1.IncomeStatement.end_period:type_name -> google.protobuf.Timestamp
	43,  // 102: financial_service.v1.IncomeStatement.income:type_name -> financial_service.v1.ReportItem
	43,  // 103: financial_service.v1.IncomeStatement.cost_of_sales:type_name -> financial_service.v1.ReportItem
	43,  // 104: financial_service.v1.IncomeStatement.operating_expenses:type_name -> financial_service.v1.ReportItem
	43,  // 105: financial_service.v1.IncomeStatement.non_operating_expenses:type_name -> financial_service.v1.ReportItem
	70,  // 106: financial_service.v1.IncomeStatement.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 107: financial_service.v1.Invoice.issue_date:type_name -> google.protobuf.Timestamp
	70,  // 108: financial_service.v1.Invoice.due_date:type_name -> google.protobuf.Timestamp
	70,  // 109: financial_service.v1.Invoice.paid_on_date:type_name -> google.protobuf.Timestamp
	70,  // 110: financial_service.v1.Invoice.remote_updated_at:type_name -> google.protobuf.Timestamp
	54,  // 111: financial_service.v1.Invoice.line_items:type_name -> financial_service.v1.InvoiceLineItem
	70,  // 112: financial_service.v1.Invoice.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 113: financial_service.v1.InvoiceLineItem.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 114: financial_service.v1.Item.remote_updated_at:type_name -> google.protobuf.Timestamp
	70,  // 115: financial_service.v1.Item.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 116: financial_service.v1.JournalEntry.transaction_date:type_name -> google.protobuf.Timestamp
	70,  // 117: financial_service.v1.JournalEntry.remote_created_at:type_name -> google.protobuf.Timestamp
	70,  // 118: financial_service.v1.JournalEntry.remote_updated_at:type_name -> google.protobuf.Timestamp
	57,  // 119: financial_service.v1.JournalEntry.lines:type_name -> financial_service.v1.JournalLine
	70,  // 120: financial_service.v1.JournalEntry.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 121: financial_service.v1.JournalLine.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 122: financial_service.v1.Payment.transaction_date:type_name -> google.protobuf.Timestamp
	70,  // 123: financial_service.v1.Payment.remote_updated_at:type_name -> google.protobuf.Timestamp
	70,  // 124: financial_service.v1.Payment.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 125: financial_service.v1.PurchaseOrder.issue_date:type_name -> google.protobuf.Timestamp
	70,  // 126: financial_service.v1.PurchaseOrder.delivery_date:type_name -> google.protobuf.Timestamp
	40,  // 127: financial_service.v1.PurchaseOrder.delivery_address:type_name -> financial_service.v1.Address
	60,  // 128: financial_service.v1.PurchaseOrder.line_items:type_name -> financial_service.v1.PurchaseOrderLineItem
	70,  // 129: financial_service.v1.PurchaseOrder.remote_created_at:type_name -> google.protobuf.Timestamp
	70,  // 130: financial_service.v1.PurchaseOrder.remote_updated_at:type_name -> google.protobuf.Timestamp
	70,  // 131: financial_service.v1.PurchaseOrder.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 132: financial_service.v1.PurchaseOrderLineItem.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 133: financial_service.v1.TaxRate.modified_at:type_name -> google.protobuf.Timestamp
	8,   // 134: financial_service.v1.TrackingCategory.category_type:type_name -> financial_service.v1.CategoryType
	70,  // 135: financial_service.v1.TrackingCategory.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 136: financial_service.v1.BusinessTransaction.transaction_date:type_name -> google.protobuf.Timestamp
	64,  // 137: financial_service.v1.BusinessTransaction.line_items:type_name -> financial_service.v1.TransactionLineItem
	70,  // 138: financial_service.v1.BusinessTransaction.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 139: financial_service.v1.TransactionLineItem.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 140: financial_service.v1.VendorCredit.transaction_date:type_name -> google.protobuf.Timestamp
	66,  // 141: financial_service.v1.VendorCredit.lines:type_name -> financial_service.v1.VendorCreditLine
	70,  // 142: financial_service.v1.VendorCredit.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 143: financial_service.v1.VendorCreditLine.modified_at:type_name -> google.protobuf.Timestamp
	70,  // 144: financial_service.v1.PlaidAccountInvestmentTransaction.time:type_name -> google.protobuf.Timestamp
	71,  // 145: financial_service.v1.PlaidAccountInvestmentTransaction.additional_properties:type_name -> google.protobuf.Any
	70,  // 146: financial_service.v1.PlaidAccountRecurringTransaction.time:type_name -> google.protobuf.Timestamp
	71,  // 147: financial_service.v1.PlaidAccountRecurringTransaction.additional_properties:type_name -> google.protobuf.Any
	70,  // 148: financial_service.v1.PlaidAccountTransaction.time:type_name -> google.protobuf.Timestamp
	71,  // 149: financial_service.v1.PlaidAccountTransaction.additional_properties:type_name -> google.protobuf.Any
	150, // [150:150] is the sub-list for method output_type
	150, // [150:150] is the sub-list for method input_type
	150, // [150:150] is the sub-list for extension type_name
	150, // [150:150] is the sub-list for extension extendee
	0,   // [0:150] is the sub-list for field type_name
}

func init() { file_financial_service_v1_message_financial_service_proto_init() }
func file_financial_service_v1_message_financial_service_proto_init() {
	if File_financial_service_v1_message_financial_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_financial_service_v1_message_financial_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StripeSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialUserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionableInsight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalActionableInsight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaidSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaidLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudentLoanAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MortgageAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestmentAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartGoal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forecast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Milestone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Budget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvesmentHolding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestmentSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Apr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedAccountingAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessChartOfAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceSheet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashFlowStatements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountingAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditNoteLineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpenseLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceLineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrderLineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackingCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionLineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorCredit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorCreditLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaidAccountInvestmentTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaidAccountRecurringTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_message_financial_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaidAccountTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_financial_service_v1_message_financial_service_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_financial_service_v1_message_financial_service_proto_goTypes,
		DependencyIndexes: file_financial_service_v1_message_financial_service_proto_depIdxs,
		EnumInfos:         file_financial_service_v1_message_financial_service_proto_enumTypes,
		MessageInfos:      file_financial_service_v1_message_financial_service_proto_msgTypes,
	}.Build()
	File_financial_service_v1_message_financial_service_proto = out.File
	file_financial_service_v1_message_financial_service_proto_rawDesc = nil
	file_financial_service_v1_message_financial_service_proto_goTypes = nil
	file_financial_service_v1_message_financial_service_proto_depIdxs = nil
}
