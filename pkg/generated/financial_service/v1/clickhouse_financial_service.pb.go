// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: financial_service/v1/clickhouse_financial_service.proto

package financial_servicev1

import (
	_ "github.com/cosmos/gogoproto/gogoproto"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReOccuringTransactionsFrequency int32

const (
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED  ReOccuringTransactionsFrequency = 0
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY       ReOccuringTransactionsFrequency = 1
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY     ReOccuringTransactionsFrequency = 2
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY ReOccuringTransactionsFrequency = 3
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY      ReOccuringTransactionsFrequency = 4
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY     ReOccuringTransactionsFrequency = 5
)

// Enum value maps for ReOccuringTransactionsFrequency.
var (
	ReOccuringTransactionsFrequency_name = map[int32]string{
		0: "RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED",
		1: "RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY",
		2: "RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY",
		3: "RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY",
		4: "RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY",
		5: "RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY",
	}
	ReOccuringTransactionsFrequency_value = map[string]int32{
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED":  0,
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY":       1,
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY":     2,
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY": 3,
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY":      4,
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY":     5,
	}
)

func (x ReOccuringTransactionsFrequency) Enum() *ReOccuringTransactionsFrequency {
	p := new(ReOccuringTransactionsFrequency)
	*p = x
	return p
}

func (x ReOccuringTransactionsFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReOccuringTransactionsFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_clickhouse_financial_service_proto_enumTypes[0].Descriptor()
}

func (ReOccuringTransactionsFrequency) Type() protoreflect.EnumType {
	return &file_financial_service_v1_clickhouse_financial_service_proto_enumTypes[0]
}

func (x ReOccuringTransactionsFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReOccuringTransactionsFrequency.Descriptor instead.
func (ReOccuringTransactionsFrequency) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{0}
}

type ReOccuringTransactionsStatus int32

const (
	ReOccuringTransactionsStatus_RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED ReOccuringTransactionsStatus = 0
	// A MATURE recurring stream should have at least 3 transactions and happen
	//
	//	on a regular cadence (For Annual recurring stream, we will mark it MATURE after 2 instances).
	ReOccuringTransactionsStatus_RE_OCCURING_TRANSACTIONS_STATUS_MATURE ReOccuringTransactionsStatus = 1
	// When a recurring transaction first appears in the transaction history and before it fulfills
	// the requirement of a mature stream, the status will be EARLY_DETECTION.
	ReOccuringTransactionsStatus_RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION ReOccuringTransactionsStatus = 2
	// A stream that was previously in the EARLY_DETECTION status will move to the TOMBSTONED
	// status when no further transactions were found at the next expected date.
	ReOccuringTransactionsStatus_RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED ReOccuringTransactionsStatus = 3
)

// Enum value maps for ReOccuringTransactionsStatus.
var (
	ReOccuringTransactionsStatus_name = map[int32]string{
		0: "RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED",
		1: "RE_OCCURING_TRANSACTIONS_STATUS_MATURE",
		2: "RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION",
		3: "RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED",
	}
	ReOccuringTransactionsStatus_value = map[string]int32{
		"RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED":     0,
		"RE_OCCURING_TRANSACTIONS_STATUS_MATURE":          1,
		"RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION": 2,
		"RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED":      3,
	}
)

func (x ReOccuringTransactionsStatus) Enum() *ReOccuringTransactionsStatus {
	p := new(ReOccuringTransactionsStatus)
	*p = x
	return p
}

func (x ReOccuringTransactionsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReOccuringTransactionsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_clickhouse_financial_service_proto_enumTypes[1].Descriptor()
}

func (ReOccuringTransactionsStatus) Type() protoreflect.EnumType {
	return &file_financial_service_v1_clickhouse_financial_service_proto_enumTypes[1]
}

func (x ReOccuringTransactionsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReOccuringTransactionsStatus.Descriptor instead.
func (ReOccuringTransactionsStatus) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{1}
}

type ReCurringFlow int32

const (
	ReCurringFlow_RE_CURRING_FLOW_UNSPECIFIED ReCurringFlow = 0
	ReCurringFlow_RE_CURRING_FLOW_INFLOW      ReCurringFlow = 1
	ReCurringFlow_RE_CURRING_FLOW_OUTFLOW     ReCurringFlow = 2
)

// Enum value maps for ReCurringFlow.
var (
	ReCurringFlow_name = map[int32]string{
		0: "RE_CURRING_FLOW_UNSPECIFIED",
		1: "RE_CURRING_FLOW_INFLOW",
		2: "RE_CURRING_FLOW_OUTFLOW",
	}
	ReCurringFlow_value = map[string]int32{
		"RE_CURRING_FLOW_UNSPECIFIED": 0,
		"RE_CURRING_FLOW_INFLOW":      1,
		"RE_CURRING_FLOW_OUTFLOW":     2,
	}
)

func (x ReCurringFlow) Enum() *ReCurringFlow {
	p := new(ReCurringFlow)
	*p = x
	return p
}

func (x ReCurringFlow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReCurringFlow) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_service_v1_clickhouse_financial_service_proto_enumTypes[2].Descriptor()
}

func (ReCurringFlow) Type() protoreflect.EnumType {
	return &file_financial_service_v1_clickhouse_financial_service_proto_enumTypes[2]
}

func (x ReCurringFlow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReCurringFlow.Descriptor instead.
func (ReCurringFlow) EnumDescriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{2}
}

type InvestmentTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotag: ch:"account_id"
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" ch:"account_id"`
	// @gotag: ch:"amount"
	Ammount string `protobuf:"bytes,2,opt,name=ammount,proto3" json:"ammount,omitempty" ch:"amount"`
	// @gotag: ch:"investment_transaction_id"
	InvestmentTransactionId string `protobuf:"bytes,3,opt,name=investment_transaction_id,json=investmentTransactionId,proto3" json:"investment_transaction_id,omitempty" ch:"investment_transaction_id"`
	// @gotag: ch:"security_id"
	SecurityId string `protobuf:"bytes,4,opt,name=security_id,json=securityId,proto3" json:"security_id,omitempty" ch:"security_id"`
	// @gotag: ch:"date"
	CurrentDate string `protobuf:"bytes,5,opt,name=current_date,json=currentDate,proto3" json:"current_date,omitempty" ch:"date"`
	// @gotag: ch:"name"
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" ch:"name"`
	// @gotag: ch:"quantity"
	Quantity float64 `protobuf:"fixed64,7,opt,name=quantity,proto3" json:"quantity,omitempty" ch:"quantity"`
	// @gotag: ch:"amount"
	Amount float64 `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty" ch:"amount"`
	// @gotag: ch:"price"
	Price float64 `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty" ch:"price"`
	// @gotag: ch:"fees"
	Fees float64 `protobuf:"fixed64,10,opt,name=fees,proto3" json:"fees,omitempty" ch:"fees"`
	// @gotag: ch:"type"
	Type string `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty" ch:"type"`
	// @gotag: ch:"subtype"
	Subtype string `protobuf:"bytes,12,opt,name=subtype,proto3" json:"subtype,omitempty" ch:"subtype"`
	// @gotag: ch:"iso_currency_code"
	IsoCurrencyCode string `protobuf:"bytes,13,opt,name=iso_currency_code,json=isoCurrencyCode,proto3" json:"iso_currency_code,omitempty" ch:"iso_currency_code"`
	// @gotag: ch:"unofficial_currency_code"
	UnofficialCurrencyCode string `protobuf:"bytes,14,opt,name=unofficial_currency_code,json=unofficialCurrencyCode,proto3" json:"unofficial_currency_code,omitempty" ch:"unofficial_currency_code"`
	// @gotag: ch:"link_id"
	LinkId uint64 `protobuf:"varint,15,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty" ch:"link_id"`
	// @gotag: ch:"id"
	Id string `protobuf:"bytes,16,opt,name=id,proto3" json:"id,omitempty" ch:"id"`
	// @gotag: ch:"user_id"
	UserId               uint64                 `protobuf:"varint,17,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" ch:"user_id"`
	CreatedAt            string                 `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Sign                 int32                  `protobuf:"varint,19,opt,name=sign,proto3" json:"sign,omitempty"`
	Time                 *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=time,proto3" json:"time,omitempty"`
	AdditionalProperties *anypb.Any             `protobuf:"bytes,21,opt,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty"`
	// @gotag: ch:"profile_type"
	ProfileType FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty" ch:"profile_type"`
}

func (x *InvestmentTransaction) Reset() {
	*x = InvestmentTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestmentTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestmentTransaction) ProtoMessage() {}

func (x *InvestmentTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestmentTransaction.ProtoReflect.Descriptor instead.
func (*InvestmentTransaction) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{0}
}

func (x *InvestmentTransaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *InvestmentTransaction) GetAmmount() string {
	if x != nil {
		return x.Ammount
	}
	return ""
}

func (x *InvestmentTransaction) GetInvestmentTransactionId() string {
	if x != nil {
		return x.InvestmentTransactionId
	}
	return ""
}

func (x *InvestmentTransaction) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *InvestmentTransaction) GetCurrentDate() string {
	if x != nil {
		return x.CurrentDate
	}
	return ""
}

func (x *InvestmentTransaction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvestmentTransaction) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *InvestmentTransaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *InvestmentTransaction) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *InvestmentTransaction) GetFees() float64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

func (x *InvestmentTransaction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InvestmentTransaction) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *InvestmentTransaction) GetIsoCurrencyCode() string {
	if x != nil {
		return x.IsoCurrencyCode
	}
	return ""
}

func (x *InvestmentTransaction) GetUnofficialCurrencyCode() string {
	if x != nil {
		return x.UnofficialCurrencyCode
	}
	return ""
}

func (x *InvestmentTransaction) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

func (x *InvestmentTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InvestmentTransaction) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InvestmentTransaction) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *InvestmentTransaction) GetSign() int32 {
	if x != nil {
		return x.Sign
	}
	return 0
}

func (x *InvestmentTransaction) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InvestmentTransaction) GetAdditionalProperties() *anypb.Any {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *InvestmentTransaction) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

type ReOccuringTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotag: ch:"account_id"
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" ch:"account_id"`
	// @gotag: ch:"stream_id"
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty" ch:"stream_id"`
	// @gotag: ch:"category_id"
	CategoryId string `protobuf:"bytes,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty" ch:"category_id"`
	// @gotag: ch:"description"
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" ch:"description"`
	// @gotag: ch:"merchant_name"
	MerchantName string `protobuf:"bytes,6,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty" ch:"merchant_name"`
	// @gotag: ch:"personal_finance_category_primary"
	PersonalFinanceCategoryPrimary string `protobuf:"bytes,7,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty" ch:"personal_finance_category_primary"`
	// @gotag: ch:"personal_finance_category_detailed"
	PersonalFinanceCategoryDetailed string `protobuf:"bytes,8,opt,name=personal_finance_category_detailed,json=personalFinanceCategoryDetailed,proto3" json:"personal_finance_category_detailed,omitempty" ch:"personal_finance_category_detailed"`
	// @gotag: ch:"first_date"
	FirstDate string `protobuf:"bytes,9,opt,name=first_date,json=firstDate,proto3" json:"first_date,omitempty" ch:"first_date"`
	// @gotag: ch:"last_date"
	LastDate string `protobuf:"bytes,10,opt,name=last_date,json=lastDate,proto3" json:"last_date,omitempty" ch:"last_date"`
	// @gotag: ch:"frequency"
	Frequency ReOccuringTransactionsFrequency `protobuf:"varint,11,opt,name=frequency,proto3,enum=financial_service.v1.ReOccuringTransactionsFrequency" json:"frequency,omitempty" ch:"frequency"`
	// @gotag: ch:"transaction_ids,array"
	TransactionIds string `protobuf:"bytes,12,opt,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty" ch:"transaction_ids,array"`
	// @gotag: ch:"average_amount"
	AverageAmount string `protobuf:"bytes,13,opt,name=average_amount,json=averageAmount,proto3" json:"average_amount,omitempty" ch:"average_amount"`
	// @gotag: ch:"average_amount_iso_currency_code"
	AverageAmountIsoCurrencyCode string `protobuf:"bytes,14,opt,name=average_amount_iso_currency_code,json=averageAmountIsoCurrencyCode,proto3" json:"average_amount_iso_currency_code,omitempty" ch:"average_amount_iso_currency_code"`
	// @gotag: ch:"last_amount"
	LastAmount string `protobuf:"bytes,15,opt,name=last_amount,json=lastAmount,proto3" json:"last_amount,omitempty" ch:"last_amount"`
	// @gotag: ch:"last_amount_iso_currency_code"
	LastAmountIsoCurrencyCode string `protobuf:"bytes,16,opt,name=last_amount_iso_currency_code,json=lastAmountIsoCurrencyCode,proto3" json:"last_amount_iso_currency_code,omitempty" ch:"last_amount_iso_currency_code"`
	// @gotag: ch:"is_active"
	IsActive bool `protobuf:"varint,17,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty" ch:"is_active"`
	// @gotag: ch:"status"
	Status ReOccuringTransactionsStatus `protobuf:"varint,18,opt,name=status,proto3,enum=financial_service.v1.ReOccuringTransactionsStatus" json:"status,omitempty" ch:"status"`
	// @gotag: ch:"updated_time"
	UpdatedTime string `protobuf:"bytes,19,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty" ch:"updated_time"`
	// @gotag: ch:"user_id"
	UserId uint64 `protobuf:"varint,20,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" ch:"user_id"`
	// @gotag: ch:"link_id"
	LinkId uint64 `protobuf:"varint,21,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty" ch:"link_id"`
	// @gotag: ch:"id"
	Id string `protobuf:"bytes,22,opt,name=id,proto3" json:"id,omitempty" ch:"id"`
	// @gotag: ch:"flow"
	Flow                 ReCurringFlow          `protobuf:"varint,23,opt,name=flow,proto3,enum=financial_service.v1.ReCurringFlow" json:"flow,omitempty" ch:"flow"`
	Sign                 int32                  `protobuf:"varint,24,opt,name=sign,proto3" json:"sign,omitempty"`
	Time                 *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=time,proto3" json:"time,omitempty"`
	AdditionalProperties *anypb.Any             `protobuf:"bytes,26,opt,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty"`
	// @gotag: ch:"profile_type"
	ProfileType FinancialUserProfileType `protobuf:"varint,27,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty" ch:"profile_type"`
}

func (x *ReOccuringTransaction) Reset() {
	*x = ReOccuringTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReOccuringTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReOccuringTransaction) ProtoMessage() {}

func (x *ReOccuringTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReOccuringTransaction.ProtoReflect.Descriptor instead.
func (*ReOccuringTransaction) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{1}
}

func (x *ReOccuringTransaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReOccuringTransaction) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *ReOccuringTransaction) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *ReOccuringTransaction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReOccuringTransaction) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *ReOccuringTransaction) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *ReOccuringTransaction) GetPersonalFinanceCategoryDetailed() string {
	if x != nil {
		return x.PersonalFinanceCategoryDetailed
	}
	return ""
}

func (x *ReOccuringTransaction) GetFirstDate() string {
	if x != nil {
		return x.FirstDate
	}
	return ""
}

func (x *ReOccuringTransaction) GetLastDate() string {
	if x != nil {
		return x.LastDate
	}
	return ""
}

func (x *ReOccuringTransaction) GetFrequency() ReOccuringTransactionsFrequency {
	if x != nil {
		return x.Frequency
	}
	return ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED
}

func (x *ReOccuringTransaction) GetTransactionIds() string {
	if x != nil {
		return x.TransactionIds
	}
	return ""
}

func (x *ReOccuringTransaction) GetAverageAmount() string {
	if x != nil {
		return x.AverageAmount
	}
	return ""
}

func (x *ReOccuringTransaction) GetAverageAmountIsoCurrencyCode() string {
	if x != nil {
		return x.AverageAmountIsoCurrencyCode
	}
	return ""
}

func (x *ReOccuringTransaction) GetLastAmount() string {
	if x != nil {
		return x.LastAmount
	}
	return ""
}

func (x *ReOccuringTransaction) GetLastAmountIsoCurrencyCode() string {
	if x != nil {
		return x.LastAmountIsoCurrencyCode
	}
	return ""
}

func (x *ReOccuringTransaction) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ReOccuringTransaction) GetStatus() ReOccuringTransactionsStatus {
	if x != nil {
		return x.Status
	}
	return ReOccuringTransactionsStatus_RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED
}

func (x *ReOccuringTransaction) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *ReOccuringTransaction) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReOccuringTransaction) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

func (x *ReOccuringTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReOccuringTransaction) GetFlow() ReCurringFlow {
	if x != nil {
		return x.Flow
	}
	return ReCurringFlow_RE_CURRING_FLOW_UNSPECIFIED
}

func (x *ReOccuringTransaction) GetSign() int32 {
	if x != nil {
		return x.Sign
	}
	return 0
}

func (x *ReOccuringTransaction) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ReOccuringTransaction) GetAdditionalProperties() *anypb.Any {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *ReOccuringTransaction) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotag: ch:"account_id"
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" ch:"account_id"`
	// @gotag: ch:"amount"
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty" ch:"amount"`
	// @gotag: ch:"iso_currency_code"
	IsoCurrencyCode string `protobuf:"bytes,3,opt,name=iso_currency_code,json=isoCurrencyCode,proto3" json:"iso_currency_code,omitempty" ch:"iso_currency_code"`
	// @gotag: ch:"unofficial_currency_code"
	UnofficialCurrencyCode string `protobuf:"bytes,4,opt,name=unofficial_currency_code,json=unofficialCurrencyCode,proto3" json:"unofficial_currency_code,omitempty" ch:"unofficial_currency_code"`
	// @gotag: ch:"category_id"
	CategoryId string `protobuf:"bytes,6,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty" ch:"category_id"`
	// @gotag: ch:"check_number"
	CheckNumber string `protobuf:"bytes,7,opt,name=check_number,json=checkNumber,proto3" json:"check_number,omitempty" ch:"check_number"`
	// @gotag: ch:"date"
	CurrentDate string `protobuf:"bytes,8,opt,name=current_date,json=currentDate,proto3" json:"current_date,omitempty" ch:"date"`
	// @gotag: ch:"datetime"
	CurrentDatetime string `protobuf:"bytes,9,opt,name=current_datetime,json=currentDatetime,proto3" json:"current_datetime,omitempty" ch:"datetime"`
	// @gotag: ch:"authorized_date"
	AuthorizedDate string `protobuf:"bytes,10,opt,name=authorized_date,json=authorizedDate,proto3" json:"authorized_date,omitempty" ch:"authorized_date"`
	// @gotag: ch:"authorized_datetime"
	AuthorizedDatetime string `protobuf:"bytes,11,opt,name=authorized_datetime,json=authorizedDatetime,proto3" json:"authorized_datetime,omitempty" ch:"authorized_datetime"`
	// @gotag: ch:"name"
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty" ch:"name"`
	// @gotag: ch:"merchant_name"
	MerchantName string `protobuf:"bytes,14,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty" ch:"merchant_name"`
	// @gotag: ch:"payment_channel"
	PaymentChannel string `protobuf:"bytes,16,opt,name=payment_channel,json=paymentChannel,proto3" json:"payment_channel,omitempty" ch:"payment_channel"`
	// @gotag: ch:"pending"
	Pending bool `protobuf:"varint,17,opt,name=pending,proto3" json:"pending,omitempty" ch:"pending"`
	// @gotag: ch:"pending_transaction_id"
	PendingTransactionId string `protobuf:"bytes,18,opt,name=pending_transaction_id,json=pendingTransactionId,proto3" json:"pending_transaction_id,omitempty" ch:"pending_transaction_id"`
	// @gotag: ch:"account_owner"
	AccountOwner string `protobuf:"bytes,19,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty" ch:"account_owner"`
	// @gotag: ch:"transaction_id"
	TransactionId string `protobuf:"bytes,20,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty" ch:"transaction_id"`
	// @gotag: ch:"transaction_code"
	TransactionCode string `protobuf:"bytes,21,opt,name=transaction_code,json=transactionCode,proto3" json:"transaction_code,omitempty" ch:"transaction_code"`
	Id              string `protobuf:"bytes,22,opt,name=id,proto3" json:"id,omitempty"`
	// @gotag: ch:"user_id"
	UserId uint64 `protobuf:"varint,23,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" ch:"user_id"`
	// @gotag: ch:"link_id"
	LinkId uint64 `protobuf:"varint,24,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty" ch:"link_id"`
	Sign   int32  `protobuf:"varint,25,opt,name=sign,proto3" json:"sign,omitempty"`
	// @gotag: ch:"personal_finance_category_primary"
	PersonalFinanceCategoryPrimary string `protobuf:"bytes,26,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty" ch:"personal_finance_category_primary"`
	// @gotag: ch:"personal_finance_category_detailed"
	PersonalFinanceCategoryDetailed string                 `protobuf:"bytes,27,opt,name=personal_finance_category_detailed,json=personalFinanceCategoryDetailed,proto3" json:"personal_finance_category_detailed,omitempty" ch:"personal_finance_category_detailed"`
	LocationAddress                 string                 `protobuf:"bytes,28,opt,name=location_address,json=locationAddress,proto3" json:"location_address,omitempty"`
	LocationCity                    string                 `protobuf:"bytes,29,opt,name=location_city,json=locationCity,proto3" json:"location_city,omitempty"`
	LocationRegion                  string                 `protobuf:"bytes,30,opt,name=location_region,json=locationRegion,proto3" json:"location_region,omitempty"`
	LocationPostalCode              string                 `protobuf:"bytes,31,opt,name=location_postal_code,json=locationPostalCode,proto3" json:"location_postal_code,omitempty"`
	LocationCountry                 string                 `protobuf:"bytes,32,opt,name=location_country,json=locationCountry,proto3" json:"location_country,omitempty"`
	LocationLat                     float64                `protobuf:"fixed64,33,opt,name=location_lat,json=locationLat,proto3" json:"location_lat,omitempty"`
	LocationLon                     float64                `protobuf:"fixed64,34,opt,name=location_lon,json=locationLon,proto3" json:"location_lon,omitempty"`
	LocationStoreNumber             string                 `protobuf:"bytes,35,opt,name=location_store_number,json=locationStoreNumber,proto3" json:"location_store_number,omitempty"`
	PaymentMetaByOrderOf            string                 `protobuf:"bytes,36,opt,name=payment_meta_by_order_of,json=paymentMetaByOrderOf,proto3" json:"payment_meta_by_order_of,omitempty"`
	PaymentMetaPayee                string                 `protobuf:"bytes,37,opt,name=payment_meta_payee,json=paymentMetaPayee,proto3" json:"payment_meta_payee,omitempty"`
	PaymentMetaPayer                string                 `protobuf:"bytes,38,opt,name=payment_meta_payer,json=paymentMetaPayer,proto3" json:"payment_meta_payer,omitempty"`
	PaymentMetaPaymentMethod        string                 `protobuf:"bytes,39,opt,name=payment_meta_payment_method,json=paymentMetaPaymentMethod,proto3" json:"payment_meta_payment_method,omitempty"`
	PaymentMetaPaymentProcessor     string                 `protobuf:"bytes,40,opt,name=payment_meta_payment_processor,json=paymentMetaPaymentProcessor,proto3" json:"payment_meta_payment_processor,omitempty"`
	PaymentMetaPpdId                string                 `protobuf:"bytes,41,opt,name=payment_meta_ppd_id,json=paymentMetaPpdId,proto3" json:"payment_meta_ppd_id,omitempty"`
	PaymentMetaReason               string                 `protobuf:"bytes,42,opt,name=payment_meta_reason,json=paymentMetaReason,proto3" json:"payment_meta_reason,omitempty"`
	PaymentMetaReferenceNumber      string                 `protobuf:"bytes,43,opt,name=payment_meta_reference_number,json=paymentMetaReferenceNumber,proto3" json:"payment_meta_reference_number,omitempty"`
	Time                            *timestamppb.Timestamp `protobuf:"bytes,44,opt,name=time,proto3" json:"time,omitempty"`
	AdditionalProperties            *anypb.Any             `protobuf:"bytes,45,opt,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty"`
	Categories                      []string               `protobuf:"bytes,46,rep,name=categories,proto3" json:"categories,omitempty"`
	// @gotag: ch:"profile_type"
	ProfileType FinancialUserProfileType `protobuf:"varint,47,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty" ch:"profile_type"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Transaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetIsoCurrencyCode() string {
	if x != nil {
		return x.IsoCurrencyCode
	}
	return ""
}

func (x *Transaction) GetUnofficialCurrencyCode() string {
	if x != nil {
		return x.UnofficialCurrencyCode
	}
	return ""
}

func (x *Transaction) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *Transaction) GetCheckNumber() string {
	if x != nil {
		return x.CheckNumber
	}
	return ""
}

func (x *Transaction) GetCurrentDate() string {
	if x != nil {
		return x.CurrentDate
	}
	return ""
}

func (x *Transaction) GetCurrentDatetime() string {
	if x != nil {
		return x.CurrentDatetime
	}
	return ""
}

func (x *Transaction) GetAuthorizedDate() string {
	if x != nil {
		return x.AuthorizedDate
	}
	return ""
}

func (x *Transaction) GetAuthorizedDatetime() string {
	if x != nil {
		return x.AuthorizedDatetime
	}
	return ""
}

func (x *Transaction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transaction) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *Transaction) GetPaymentChannel() string {
	if x != nil {
		return x.PaymentChannel
	}
	return ""
}

func (x *Transaction) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *Transaction) GetPendingTransactionId() string {
	if x != nil {
		return x.PendingTransactionId
	}
	return ""
}

func (x *Transaction) GetAccountOwner() string {
	if x != nil {
		return x.AccountOwner
	}
	return ""
}

func (x *Transaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Transaction) GetTransactionCode() string {
	if x != nil {
		return x.TransactionCode
	}
	return ""
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Transaction) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

func (x *Transaction) GetSign() int32 {
	if x != nil {
		return x.Sign
	}
	return 0
}

func (x *Transaction) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *Transaction) GetPersonalFinanceCategoryDetailed() string {
	if x != nil {
		return x.PersonalFinanceCategoryDetailed
	}
	return ""
}

func (x *Transaction) GetLocationAddress() string {
	if x != nil {
		return x.LocationAddress
	}
	return ""
}

func (x *Transaction) GetLocationCity() string {
	if x != nil {
		return x.LocationCity
	}
	return ""
}

func (x *Transaction) GetLocationRegion() string {
	if x != nil {
		return x.LocationRegion
	}
	return ""
}

func (x *Transaction) GetLocationPostalCode() string {
	if x != nil {
		return x.LocationPostalCode
	}
	return ""
}

func (x *Transaction) GetLocationCountry() string {
	if x != nil {
		return x.LocationCountry
	}
	return ""
}

func (x *Transaction) GetLocationLat() float64 {
	if x != nil {
		return x.LocationLat
	}
	return 0
}

func (x *Transaction) GetLocationLon() float64 {
	if x != nil {
		return x.LocationLon
	}
	return 0
}

func (x *Transaction) GetLocationStoreNumber() string {
	if x != nil {
		return x.LocationStoreNumber
	}
	return ""
}

func (x *Transaction) GetPaymentMetaByOrderOf() string {
	if x != nil {
		return x.PaymentMetaByOrderOf
	}
	return ""
}

func (x *Transaction) GetPaymentMetaPayee() string {
	if x != nil {
		return x.PaymentMetaPayee
	}
	return ""
}

func (x *Transaction) GetPaymentMetaPayer() string {
	if x != nil {
		return x.PaymentMetaPayer
	}
	return ""
}

func (x *Transaction) GetPaymentMetaPaymentMethod() string {
	if x != nil {
		return x.PaymentMetaPaymentMethod
	}
	return ""
}

func (x *Transaction) GetPaymentMetaPaymentProcessor() string {
	if x != nil {
		return x.PaymentMetaPaymentProcessor
	}
	return ""
}

func (x *Transaction) GetPaymentMetaPpdId() string {
	if x != nil {
		return x.PaymentMetaPpdId
	}
	return ""
}

func (x *Transaction) GetPaymentMetaReason() string {
	if x != nil {
		return x.PaymentMetaReason
	}
	return ""
}

func (x *Transaction) GetPaymentMetaReferenceNumber() string {
	if x != nil {
		return x.PaymentMetaReferenceNumber
	}
	return ""
}

func (x *Transaction) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Transaction) GetAdditionalProperties() *anypb.Any {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Transaction) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Transaction) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// Account Balance History
// This message is used to represent the balance history of an account.
type AccountBalanceHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            *timestamppb.Timestamp   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	AccountId       string                   `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	IsoCurrencyCode string                   `protobuf:"bytes,3,opt,name=iso_currency_code,json=isoCurrencyCode,proto3" json:"iso_currency_code,omitempty"`
	Balance         float64                  `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	UserId          uint64                   `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Sign            uint32                   `protobuf:"varint,6,opt,name=sign,proto3" json:"sign,omitempty"`
	Id              string                   `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	ProfileType     FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *AccountBalanceHistory) Reset() {
	*x = AccountBalanceHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalanceHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalanceHistory) ProtoMessage() {}

func (x *AccountBalanceHistory) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalanceHistory.ProtoReflect.Descriptor instead.
func (*AccountBalanceHistory) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{3}
}

func (x *AccountBalanceHistory) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AccountBalanceHistory) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountBalanceHistory) GetIsoCurrencyCode() string {
	if x != nil {
		return x.IsoCurrencyCode
	}
	return ""
}

func (x *AccountBalanceHistory) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AccountBalanceHistory) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AccountBalanceHistory) GetSign() uint32 {
	if x != nil {
		return x.Sign
	}
	return 0
}

func (x *AccountBalanceHistory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountBalanceHistory) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// CategoryMetricsFinancialSubProfile
// This message is used to represent the financial sub profile of a category.
type CategoryMetricsFinancialSubProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                          uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	PersonalFinanceCategoryPrimary string                   `protobuf:"bytes,2,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty"`
	TransactionCount               uint64                   `protobuf:"varint,3,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	SpentLastWeek                  float64                  `protobuf:"fixed64,4,opt,name=spent_last_week,json=spentLastWeek,proto3" json:"spent_last_week,omitempty"`
	SpentLastTwoWeeks              float64                  `protobuf:"fixed64,5,opt,name=spent_last_two_weeks,json=spentLastTwoWeeks,proto3" json:"spent_last_two_weeks,omitempty"`
	SpentLastMonth                 float64                  `protobuf:"fixed64,6,opt,name=spent_last_month,json=spentLastMonth,proto3" json:"spent_last_month,omitempty"`
	SpentLastSixMonths             float64                  `protobuf:"fixed64,7,opt,name=spent_last_six_months,json=spentLastSixMonths,proto3" json:"spent_last_six_months,omitempty"`
	SpentLastYear                  float64                  `protobuf:"fixed64,8,opt,name=spent_last_year,json=spentLastYear,proto3" json:"spent_last_year,omitempty"`
	SpentLastTwoYears              float64                  `protobuf:"fixed64,9,opt,name=spent_last_two_years,json=spentLastTwoYears,proto3" json:"spent_last_two_years,omitempty"`
	UserId                         uint64                   `protobuf:"varint,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType                    FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *CategoryMetricsFinancialSubProfile) Reset() {
	*x = CategoryMetricsFinancialSubProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryMetricsFinancialSubProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryMetricsFinancialSubProfile) ProtoMessage() {}

func (x *CategoryMetricsFinancialSubProfile) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryMetricsFinancialSubProfile.ProtoReflect.Descriptor instead.
func (*CategoryMetricsFinancialSubProfile) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{4}
}

func (x *CategoryMetricsFinancialSubProfile) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *CategoryMetricsFinancialSubProfile) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *CategoryMetricsFinancialSubProfile) GetTransactionCount() uint64 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *CategoryMetricsFinancialSubProfile) GetSpentLastWeek() float64 {
	if x != nil {
		return x.SpentLastWeek
	}
	return 0
}

func (x *CategoryMetricsFinancialSubProfile) GetSpentLastTwoWeeks() float64 {
	if x != nil {
		return x.SpentLastTwoWeeks
	}
	return 0
}

func (x *CategoryMetricsFinancialSubProfile) GetSpentLastMonth() float64 {
	if x != nil {
		return x.SpentLastMonth
	}
	return 0
}

func (x *CategoryMetricsFinancialSubProfile) GetSpentLastSixMonths() float64 {
	if x != nil {
		return x.SpentLastSixMonths
	}
	return 0
}

func (x *CategoryMetricsFinancialSubProfile) GetSpentLastYear() float64 {
	if x != nil {
		return x.SpentLastYear
	}
	return 0
}

func (x *CategoryMetricsFinancialSubProfile) GetSpentLastTwoYears() float64 {
	if x != nil {
		return x.SpentLastTwoYears
	}
	return 0
}

func (x *CategoryMetricsFinancialSubProfile) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CategoryMetricsFinancialSubProfile) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// CategoryMonthlyExpenditure represents the monthly expenditure of a category.
// This message is used to represent the monthly expenditure of a category.
type CategoryMonthlyExpenditure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                          uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	PersonalFinanceCategoryPrimary string                   `protobuf:"bytes,2,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty"`
	TotalSpending                  float64                  `protobuf:"fixed64,3,opt,name=total_spending,json=totalSpending,proto3" json:"total_spending,omitempty"`
	UserId                         uint64                   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType                    FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *CategoryMonthlyExpenditure) Reset() {
	*x = CategoryMonthlyExpenditure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryMonthlyExpenditure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryMonthlyExpenditure) ProtoMessage() {}

func (x *CategoryMonthlyExpenditure) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryMonthlyExpenditure.ProtoReflect.Descriptor instead.
func (*CategoryMonthlyExpenditure) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{5}
}

func (x *CategoryMonthlyExpenditure) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *CategoryMonthlyExpenditure) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *CategoryMonthlyExpenditure) GetTotalSpending() float64 {
	if x != nil {
		return x.TotalSpending
	}
	return 0
}

func (x *CategoryMonthlyExpenditure) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CategoryMonthlyExpenditure) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// CategoryMonthlyIncome
// This message is used to represent the monthly income of a category.
type CategoryMonthlyIncome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                          uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	PersonalFinanceCategoryPrimary string                   `protobuf:"bytes,2,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty"`
	TotalIncome                    float64                  `protobuf:"fixed64,3,opt,name=total_income,json=totalIncome,proto3" json:"total_income,omitempty"`
	UserId                         uint64                   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType                    FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *CategoryMonthlyIncome) Reset() {
	*x = CategoryMonthlyIncome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryMonthlyIncome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryMonthlyIncome) ProtoMessage() {}

func (x *CategoryMonthlyIncome) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryMonthlyIncome.ProtoReflect.Descriptor instead.
func (*CategoryMonthlyIncome) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{6}
}

func (x *CategoryMonthlyIncome) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *CategoryMonthlyIncome) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *CategoryMonthlyIncome) GetTotalIncome() float64 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

func (x *CategoryMonthlyIncome) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CategoryMonthlyIncome) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// CategoryMonthlyTransactionCount
// This message is used to represent the monthly transaction count of a category.
type CategoryMonthlyTransactionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                          uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	PersonalFinanceCategoryPrimary string                   `protobuf:"bytes,2,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty"`
	TransactionCount               uint32                   `protobuf:"varint,3,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	UserId                         uint64                   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType                    FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *CategoryMonthlyTransactionCount) Reset() {
	*x = CategoryMonthlyTransactionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryMonthlyTransactionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryMonthlyTransactionCount) ProtoMessage() {}

func (x *CategoryMonthlyTransactionCount) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryMonthlyTransactionCount.ProtoReflect.Descriptor instead.
func (*CategoryMonthlyTransactionCount) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{7}
}

func (x *CategoryMonthlyTransactionCount) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *CategoryMonthlyTransactionCount) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *CategoryMonthlyTransactionCount) GetTransactionCount() uint32 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *CategoryMonthlyTransactionCount) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CategoryMonthlyTransactionCount) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// DebtToIncomeRatio
// This message is used to represent the debt to income ratio of a user.
type DebtToIncomeRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month       uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	Ratio       float64                  `protobuf:"fixed64,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	UserId      uint64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *DebtToIncomeRatio) Reset() {
	*x = DebtToIncomeRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebtToIncomeRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebtToIncomeRatio) ProtoMessage() {}

func (x *DebtToIncomeRatio) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebtToIncomeRatio.ProtoReflect.Descriptor instead.
func (*DebtToIncomeRatio) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{8}
}

func (x *DebtToIncomeRatio) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *DebtToIncomeRatio) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *DebtToIncomeRatio) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DebtToIncomeRatio) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// ExpenseMetrics
// This message is used to represent the expense metrics of a user.
type ExpenseMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                          uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	PersonalFinanceCategoryPrimary string                   `protobuf:"bytes,2,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty"`
	TransactionCount               uint64                   `protobuf:"varint,3,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	TotalExpenses                  float64                  `protobuf:"fixed64,4,opt,name=total_expenses,json=totalExpenses,proto3" json:"total_expenses,omitempty"`
	UserId                         uint64                   `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType                    FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *ExpenseMetrics) Reset() {
	*x = ExpenseMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpenseMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpenseMetrics) ProtoMessage() {}

func (x *ExpenseMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpenseMetrics.ProtoReflect.Descriptor instead.
func (*ExpenseMetrics) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{9}
}

func (x *ExpenseMetrics) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ExpenseMetrics) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *ExpenseMetrics) GetTransactionCount() uint64 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *ExpenseMetrics) GetTotalExpenses() float64 {
	if x != nil {
		return x.TotalExpenses
	}
	return 0
}

func (x *ExpenseMetrics) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExpenseMetrics) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// ExpenseMetricsFinancialSubProfileMetrics
// This message is used to represent the financial sub profile metrics of a user.
type ExpenseMetricsFinancialSubProfileMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                               uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	SpentLastWeek                       float64                  `protobuf:"fixed64,2,opt,name=spent_last_week,json=spentLastWeek,proto3" json:"spent_last_week,omitempty"`
	SpentLastMonth                      float64                  `protobuf:"fixed64,3,opt,name=spent_last_month,json=spentLastMonth,proto3" json:"spent_last_month,omitempty"`
	SpentLastSixMonths                  float64                  `protobuf:"fixed64,7,opt,name=spent_last_six_months,json=spentLastSixMonths,proto3" json:"spent_last_six_months,omitempty"`
	AverageMonthlyDiscretionarySpending float64                  `protobuf:"fixed64,8,opt,name=average_monthly_discretionary_spending,json=averageMonthlyDiscretionarySpending,proto3" json:"average_monthly_discretionary_spending,omitempty"`
	AverageMonthlyRecurringSpending     float64                  `protobuf:"fixed64,9,opt,name=average_monthly_recurring_spending,json=averageMonthlyRecurringSpending,proto3" json:"average_monthly_recurring_spending,omitempty"`
	UserId                              uint64                   `protobuf:"varint,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType                         FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *ExpenseMetricsFinancialSubProfileMetrics) Reset() {
	*x = ExpenseMetricsFinancialSubProfileMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpenseMetricsFinancialSubProfileMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpenseMetricsFinancialSubProfileMetrics) ProtoMessage() {}

func (x *ExpenseMetricsFinancialSubProfileMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpenseMetricsFinancialSubProfileMetrics.ProtoReflect.Descriptor instead.
func (*ExpenseMetricsFinancialSubProfileMetrics) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{10}
}

func (x *ExpenseMetricsFinancialSubProfileMetrics) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ExpenseMetricsFinancialSubProfileMetrics) GetSpentLastWeek() float64 {
	if x != nil {
		return x.SpentLastWeek
	}
	return 0
}

func (x *ExpenseMetricsFinancialSubProfileMetrics) GetSpentLastMonth() float64 {
	if x != nil {
		return x.SpentLastMonth
	}
	return 0
}

func (x *ExpenseMetricsFinancialSubProfileMetrics) GetSpentLastSixMonths() float64 {
	if x != nil {
		return x.SpentLastSixMonths
	}
	return 0
}

func (x *ExpenseMetricsFinancialSubProfileMetrics) GetAverageMonthlyDiscretionarySpending() float64 {
	if x != nil {
		return x.AverageMonthlyDiscretionarySpending
	}
	return 0
}

func (x *ExpenseMetricsFinancialSubProfileMetrics) GetAverageMonthlyRecurringSpending() float64 {
	if x != nil {
		return x.AverageMonthlyRecurringSpending
	}
	return 0
}

func (x *ExpenseMetricsFinancialSubProfileMetrics) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExpenseMetricsFinancialSubProfileMetrics) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// FinancialProfile
// This message is used to represent the financial profile of a user.
type FinancialProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                 uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	TotalIncome           float64                  `protobuf:"fixed64,2,opt,name=total_income,json=totalIncome,proto3" json:"total_income,omitempty"`
	TotalExpenses         float64                  `protobuf:"fixed64,3,opt,name=total_expenses,json=totalExpenses,proto3" json:"total_expenses,omitempty"`
	NumberOfTransactions  uint64                   `protobuf:"varint,5,opt,name=number_of_transactions,json=numberOfTransactions,proto3" json:"number_of_transactions,omitempty"`
	MostExpensiveCategory string                   `protobuf:"bytes,6,opt,name=most_expensive_category,json=mostExpensiveCategory,proto3" json:"most_expensive_category,omitempty"`
	UserId                uint64                   `protobuf:"varint,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType           FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *FinancialProfile) Reset() {
	*x = FinancialProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialProfile) ProtoMessage() {}

func (x *FinancialProfile) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialProfile.ProtoReflect.Descriptor instead.
func (*FinancialProfile) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{11}
}

func (x *FinancialProfile) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *FinancialProfile) GetTotalIncome() float64 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

func (x *FinancialProfile) GetTotalExpenses() float64 {
	if x != nil {
		return x.TotalExpenses
	}
	return 0
}

func (x *FinancialProfile) GetNumberOfTransactions() uint64 {
	if x != nil {
		return x.NumberOfTransactions
	}
	return 0
}

func (x *FinancialProfile) GetMostExpensiveCategory() string {
	if x != nil {
		return x.MostExpensiveCategory
	}
	return ""
}

func (x *FinancialProfile) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FinancialProfile) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// IncomeExpenseRatio
// This message is used to represent the income expense ratio of a user.
type IncomeExpenseRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month       uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	Ratio       float64                  `protobuf:"fixed64,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	UserId      uint64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *IncomeExpenseRatio) Reset() {
	*x = IncomeExpenseRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeExpenseRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeExpenseRatio) ProtoMessage() {}

func (x *IncomeExpenseRatio) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeExpenseRatio.ProtoReflect.Descriptor instead.
func (*IncomeExpenseRatio) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{12}
}

func (x *IncomeExpenseRatio) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *IncomeExpenseRatio) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *IncomeExpenseRatio) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IncomeExpenseRatio) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// IncomeMetrics
// This message is used to represent the income metrics of a user.
type IncomeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                          uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	PersonalFinanceCategoryPrimary string                   `protobuf:"bytes,2,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty"`
	TransactionCount               uint64                   `protobuf:"varint,3,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	TotalIncome                    float64                  `protobuf:"fixed64,4,opt,name=total_income,json=totalIncome,proto3" json:"total_income,omitempty"`
	UserId                         uint64                   `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType                    FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *IncomeMetrics) Reset() {
	*x = IncomeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeMetrics) ProtoMessage() {}

func (x *IncomeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeMetrics.ProtoReflect.Descriptor instead.
func (*IncomeMetrics) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{13}
}

func (x *IncomeMetrics) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *IncomeMetrics) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *IncomeMetrics) GetTransactionCount() uint64 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *IncomeMetrics) GetTotalIncome() float64 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

func (x *IncomeMetrics) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IncomeMetrics) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// IncomeMetricsFinancialSubProfile
// This message is used to represent the financial sub profile of a user.
type IncomeMetricsFinancialSubProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month               uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	IncomeLastTwoWeeks  float64                  `protobuf:"fixed64,2,opt,name=income_last_two_weeks,json=incomeLastTwoWeeks,proto3" json:"income_last_two_weeks,omitempty"`
	IncomeLastMonth     float64                  `protobuf:"fixed64,3,opt,name=income_last_month,json=incomeLastMonth,proto3" json:"income_last_month,omitempty"`
	IncomeLastTwoMonths float64                  `protobuf:"fixed64,4,opt,name=income_last_two_months,json=incomeLastTwoMonths,proto3" json:"income_last_two_months,omitempty"`
	IncomeLastSixMonths float64                  `protobuf:"fixed64,5,opt,name=income_last_six_months,json=incomeLastSixMonths,proto3" json:"income_last_six_months,omitempty"`
	IncomeLastYear      float64                  `protobuf:"fixed64,6,opt,name=income_last_year,json=incomeLastYear,proto3" json:"income_last_year,omitempty"`
	UserId              uint64                   `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType         FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *IncomeMetricsFinancialSubProfile) Reset() {
	*x = IncomeMetricsFinancialSubProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeMetricsFinancialSubProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeMetricsFinancialSubProfile) ProtoMessage() {}

func (x *IncomeMetricsFinancialSubProfile) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeMetricsFinancialSubProfile.ProtoReflect.Descriptor instead.
func (*IncomeMetricsFinancialSubProfile) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{14}
}

func (x *IncomeMetricsFinancialSubProfile) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *IncomeMetricsFinancialSubProfile) GetIncomeLastTwoWeeks() float64 {
	if x != nil {
		return x.IncomeLastTwoWeeks
	}
	return 0
}

func (x *IncomeMetricsFinancialSubProfile) GetIncomeLastMonth() float64 {
	if x != nil {
		return x.IncomeLastMonth
	}
	return 0
}

func (x *IncomeMetricsFinancialSubProfile) GetIncomeLastTwoMonths() float64 {
	if x != nil {
		return x.IncomeLastTwoMonths
	}
	return 0
}

func (x *IncomeMetricsFinancialSubProfile) GetIncomeLastSixMonths() float64 {
	if x != nil {
		return x.IncomeLastSixMonths
	}
	return 0
}

func (x *IncomeMetricsFinancialSubProfile) GetIncomeLastYear() float64 {
	if x != nil {
		return x.IncomeLastYear
	}
	return 0
}

func (x *IncomeMetricsFinancialSubProfile) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IncomeMetricsFinancialSubProfile) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// LocationFinancialSubProfile
// This message is used to represent the financial sub profile of a location.
type LocationFinancialSubProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationCity       string                   `protobuf:"bytes,1,opt,name=location_city,json=locationCity,proto3" json:"location_city,omitempty"`
	TransactionCount   uint64                   `protobuf:"varint,2,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	SpentLastWeek      float64                  `protobuf:"fixed64,3,opt,name=spent_last_week,json=spentLastWeek,proto3" json:"spent_last_week,omitempty"`
	SpentLastTwoWeeks  float64                  `protobuf:"fixed64,4,opt,name=spent_last_two_weeks,json=spentLastTwoWeeks,proto3" json:"spent_last_two_weeks,omitempty"`
	SpentLastMonth     float64                  `protobuf:"fixed64,5,opt,name=spent_last_month,json=spentLastMonth,proto3" json:"spent_last_month,omitempty"`
	SpentLastSixMonths float64                  `protobuf:"fixed64,6,opt,name=spent_last_six_months,json=spentLastSixMonths,proto3" json:"spent_last_six_months,omitempty"`
	SpentLastYear      float64                  `protobuf:"fixed64,7,opt,name=spent_last_year,json=spentLastYear,proto3" json:"spent_last_year,omitempty"`
	SpentLastTwoYears  float64                  `protobuf:"fixed64,8,opt,name=spent_last_two_years,json=spentLastTwoYears,proto3" json:"spent_last_two_years,omitempty"`
	UserId             uint64                   `protobuf:"varint,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Month              uint32                   `protobuf:"varint,10,opt,name=month,proto3" json:"month,omitempty"`
	ProfileType        FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *LocationFinancialSubProfile) Reset() {
	*x = LocationFinancialSubProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationFinancialSubProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationFinancialSubProfile) ProtoMessage() {}

func (x *LocationFinancialSubProfile) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationFinancialSubProfile.ProtoReflect.Descriptor instead.
func (*LocationFinancialSubProfile) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{15}
}

func (x *LocationFinancialSubProfile) GetLocationCity() string {
	if x != nil {
		return x.LocationCity
	}
	return ""
}

func (x *LocationFinancialSubProfile) GetTransactionCount() uint64 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *LocationFinancialSubProfile) GetSpentLastWeek() float64 {
	if x != nil {
		return x.SpentLastWeek
	}
	return 0
}

func (x *LocationFinancialSubProfile) GetSpentLastTwoWeeks() float64 {
	if x != nil {
		return x.SpentLastTwoWeeks
	}
	return 0
}

func (x *LocationFinancialSubProfile) GetSpentLastMonth() float64 {
	if x != nil {
		return x.SpentLastMonth
	}
	return 0
}

func (x *LocationFinancialSubProfile) GetSpentLastSixMonths() float64 {
	if x != nil {
		return x.SpentLastSixMonths
	}
	return 0
}

func (x *LocationFinancialSubProfile) GetSpentLastYear() float64 {
	if x != nil {
		return x.SpentLastYear
	}
	return 0
}

func (x *LocationFinancialSubProfile) GetSpentLastTwoYears() float64 {
	if x != nil {
		return x.SpentLastTwoYears
	}
	return 0
}

func (x *LocationFinancialSubProfile) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LocationFinancialSubProfile) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *LocationFinancialSubProfile) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// MerchantFinancialSubProfile
// This message is used to represent the financial sub profile of a merchant.
type MerchantMetricsFinancialSubProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantName       string                   `protobuf:"bytes,1,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	SpentLastWeek      float64                  `protobuf:"fixed64,3,opt,name=spent_last_week,json=spentLastWeek,proto3" json:"spent_last_week,omitempty"`
	SpentLastTwoWeeks  float64                  `protobuf:"fixed64,4,opt,name=spent_last_two_weeks,json=spentLastTwoWeeks,proto3" json:"spent_last_two_weeks,omitempty"`
	SpentLastMonth     float64                  `protobuf:"fixed64,5,opt,name=spent_last_month,json=spentLastMonth,proto3" json:"spent_last_month,omitempty"`
	SpentLastSixMonths float64                  `protobuf:"fixed64,6,opt,name=spent_last_six_months,json=spentLastSixMonths,proto3" json:"spent_last_six_months,omitempty"`
	SpentLastYear      float64                  `protobuf:"fixed64,7,opt,name=spent_last_year,json=spentLastYear,proto3" json:"spent_last_year,omitempty"`
	SpentLastTwoYears  float64                  `protobuf:"fixed64,8,opt,name=spent_last_two_years,json=spentLastTwoYears,proto3" json:"spent_last_two_years,omitempty"`
	UserId             uint64                   `protobuf:"varint,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Month              uint32                   `protobuf:"varint,10,opt,name=month,proto3" json:"month,omitempty"`
	ProfileType        FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *MerchantMetricsFinancialSubProfile) Reset() {
	*x = MerchantMetricsFinancialSubProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantMetricsFinancialSubProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantMetricsFinancialSubProfile) ProtoMessage() {}

func (x *MerchantMetricsFinancialSubProfile) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantMetricsFinancialSubProfile.ProtoReflect.Descriptor instead.
func (*MerchantMetricsFinancialSubProfile) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{16}
}

func (x *MerchantMetricsFinancialSubProfile) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *MerchantMetricsFinancialSubProfile) GetSpentLastWeek() float64 {
	if x != nil {
		return x.SpentLastWeek
	}
	return 0
}

func (x *MerchantMetricsFinancialSubProfile) GetSpentLastTwoWeeks() float64 {
	if x != nil {
		return x.SpentLastTwoWeeks
	}
	return 0
}

func (x *MerchantMetricsFinancialSubProfile) GetSpentLastMonth() float64 {
	if x != nil {
		return x.SpentLastMonth
	}
	return 0
}

func (x *MerchantMetricsFinancialSubProfile) GetSpentLastSixMonths() float64 {
	if x != nil {
		return x.SpentLastSixMonths
	}
	return 0
}

func (x *MerchantMetricsFinancialSubProfile) GetSpentLastYear() float64 {
	if x != nil {
		return x.SpentLastYear
	}
	return 0
}

func (x *MerchantMetricsFinancialSubProfile) GetSpentLastTwoYears() float64 {
	if x != nil {
		return x.SpentLastTwoYears
	}
	return 0
}

func (x *MerchantMetricsFinancialSubProfile) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MerchantMetricsFinancialSubProfile) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *MerchantMetricsFinancialSubProfile) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// MerchantMonthlyExpenditure
// This message is used to represent the monthly expenditure of a merchant.
type MerchantMonthlyExpenditure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month         uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	MerchantName  string                   `protobuf:"bytes,2,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	TotalSpending float64                  `protobuf:"fixed64,3,opt,name=total_spending,json=totalSpending,proto3" json:"total_spending,omitempty"`
	UserId        uint64                   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType   FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *MerchantMonthlyExpenditure) Reset() {
	*x = MerchantMonthlyExpenditure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantMonthlyExpenditure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantMonthlyExpenditure) ProtoMessage() {}

func (x *MerchantMonthlyExpenditure) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantMonthlyExpenditure.ProtoReflect.Descriptor instead.
func (*MerchantMonthlyExpenditure) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{17}
}

func (x *MerchantMonthlyExpenditure) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *MerchantMonthlyExpenditure) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *MerchantMonthlyExpenditure) GetTotalSpending() float64 {
	if x != nil {
		return x.TotalSpending
	}
	return 0
}

func (x *MerchantMonthlyExpenditure) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MerchantMonthlyExpenditure) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// MonthlyBalance
// This message is used to represent the monthly balance of a user.
type MonthlyBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month       uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	NetBalance  float64                  `protobuf:"fixed64,2,opt,name=net_balance,json=netBalance,proto3" json:"net_balance,omitempty"`
	UserId      uint64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *MonthlyBalance) Reset() {
	*x = MonthlyBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyBalance) ProtoMessage() {}

func (x *MonthlyBalance) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyBalance.ProtoReflect.Descriptor instead.
func (*MonthlyBalance) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{18}
}

func (x *MonthlyBalance) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *MonthlyBalance) GetNetBalance() float64 {
	if x != nil {
		return x.NetBalance
	}
	return 0
}

func (x *MonthlyBalance) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MonthlyBalance) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// MonthlyExpenditure
// This message is used to represent the monthly expenditure of a user.
type MonthlyExpenditure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month         uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	TotalSpending float64                  `protobuf:"fixed64,2,opt,name=total_spending,json=totalSpending,proto3" json:"total_spending,omitempty"`
	UserId        uint64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType   FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *MonthlyExpenditure) Reset() {
	*x = MonthlyExpenditure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyExpenditure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyExpenditure) ProtoMessage() {}

func (x *MonthlyExpenditure) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyExpenditure.ProtoReflect.Descriptor instead.
func (*MonthlyExpenditure) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{19}
}

func (x *MonthlyExpenditure) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *MonthlyExpenditure) GetTotalSpending() float64 {
	if x != nil {
		return x.TotalSpending
	}
	return 0
}

func (x *MonthlyExpenditure) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MonthlyExpenditure) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// MonthlyIncome
// This message is used to represent the monthly income of a user.
type MonthlyIncome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month       uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	TotalIncome float64                  `protobuf:"fixed64,2,opt,name=total_income,json=totalIncome,proto3" json:"total_income,omitempty"`
	UserId      uint64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *MonthlyIncome) Reset() {
	*x = MonthlyIncome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyIncome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyIncome) ProtoMessage() {}

func (x *MonthlyIncome) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyIncome.ProtoReflect.Descriptor instead.
func (*MonthlyIncome) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{20}
}

func (x *MonthlyIncome) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *MonthlyIncome) GetTotalIncome() float64 {
	if x != nil {
		return x.TotalIncome
	}
	return 0
}

func (x *MonthlyIncome) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MonthlyIncome) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// MonthlySavings
// This message is used to represent the monthly savings of a user.
type MonthlySavings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month       uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	NetSavings  float64                  `protobuf:"fixed64,2,opt,name=net_savings,json=netSavings,proto3" json:"net_savings,omitempty"`
	UserId      uint64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *MonthlySavings) Reset() {
	*x = MonthlySavings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlySavings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlySavings) ProtoMessage() {}

func (x *MonthlySavings) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlySavings.ProtoReflect.Descriptor instead.
func (*MonthlySavings) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{21}
}

func (x *MonthlySavings) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *MonthlySavings) GetNetSavings() float64 {
	if x != nil {
		return x.NetSavings
	}
	return 0
}

func (x *MonthlySavings) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MonthlySavings) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// MonthlyTotalQuantityBySecurityAndUser
// This message is used to represent the monthly total quantity of a security.
type MonthlyTotalQuantityBySecurityAndUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month         uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	SecurityId    string                   `protobuf:"bytes,2,opt,name=security_id,json=securityId,proto3" json:"security_id,omitempty"`
	TotalQuantity float64                  `protobuf:"fixed64,3,opt,name=total_quantity,json=totalQuantity,proto3" json:"total_quantity,omitempty"`
	UserId        uint64                   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType   FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *MonthlyTotalQuantityBySecurityAndUser) Reset() {
	*x = MonthlyTotalQuantityBySecurityAndUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyTotalQuantityBySecurityAndUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyTotalQuantityBySecurityAndUser) ProtoMessage() {}

func (x *MonthlyTotalQuantityBySecurityAndUser) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyTotalQuantityBySecurityAndUser.ProtoReflect.Descriptor instead.
func (*MonthlyTotalQuantityBySecurityAndUser) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{22}
}

func (x *MonthlyTotalQuantityBySecurityAndUser) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *MonthlyTotalQuantityBySecurityAndUser) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *MonthlyTotalQuantityBySecurityAndUser) GetTotalQuantity() float64 {
	if x != nil {
		return x.TotalQuantity
	}
	return 0
}

func (x *MonthlyTotalQuantityBySecurityAndUser) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MonthlyTotalQuantityBySecurityAndUser) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// MonthlyTransactionCount
// This message is used to represent the monthly transaction count of a user.
type MonthlyTransactionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month            uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	TransactionCount uint64                   `protobuf:"varint,2,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	UserId           uint64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType      FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *MonthlyTransactionCount) Reset() {
	*x = MonthlyTransactionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyTransactionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyTransactionCount) ProtoMessage() {}

func (x *MonthlyTransactionCount) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyTransactionCount.ProtoReflect.Descriptor instead.
func (*MonthlyTransactionCount) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{23}
}

func (x *MonthlyTransactionCount) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *MonthlyTransactionCount) GetTransactionCount() uint64 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *MonthlyTransactionCount) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MonthlyTransactionCount) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// PaymentChannelMetricsFinancialSubProfile
// This message is used to represent the financial sub profile of a payment channel.
type PaymentChannelMetricsFinancialSubProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentChannel     string                   `protobuf:"bytes,1,opt,name=payment_channel,json=paymentChannel,proto3" json:"payment_channel,omitempty"`
	SpentLastWeek      float64                  `protobuf:"fixed64,2,opt,name=spent_last_week,json=spentLastWeek,proto3" json:"spent_last_week,omitempty"`
	SpentLastTwoWeeks  float64                  `protobuf:"fixed64,3,opt,name=spent_last_two_weeks,json=spentLastTwoWeeks,proto3" json:"spent_last_two_weeks,omitempty"`
	SpentLastMonth     float64                  `protobuf:"fixed64,4,opt,name=spent_last_month,json=spentLastMonth,proto3" json:"spent_last_month,omitempty"`
	SpentLastSixMonths float64                  `protobuf:"fixed64,5,opt,name=spent_last_six_months,json=spentLastSixMonths,proto3" json:"spent_last_six_months,omitempty"`
	SpentLastYear      float64                  `protobuf:"fixed64,6,opt,name=spent_last_year,json=spentLastYear,proto3" json:"spent_last_year,omitempty"`
	SpentLastTwoYears  float64                  `protobuf:"fixed64,7,opt,name=spent_last_two_years,json=spentLastTwoYears,proto3" json:"spent_last_two_years,omitempty"`
	UserId             uint64                   `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Month              uint32                   `protobuf:"varint,9,opt,name=month,proto3" json:"month,omitempty"`
	TransactionCount   uint64                   `protobuf:"varint,10,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	ProfileType        FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *PaymentChannelMetricsFinancialSubProfile) Reset() {
	*x = PaymentChannelMetricsFinancialSubProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelMetricsFinancialSubProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelMetricsFinancialSubProfile) ProtoMessage() {}

func (x *PaymentChannelMetricsFinancialSubProfile) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelMetricsFinancialSubProfile.ProtoReflect.Descriptor instead.
func (*PaymentChannelMetricsFinancialSubProfile) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{24}
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetPaymentChannel() string {
	if x != nil {
		return x.PaymentChannel
	}
	return ""
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetSpentLastWeek() float64 {
	if x != nil {
		return x.SpentLastWeek
	}
	return 0
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetSpentLastTwoWeeks() float64 {
	if x != nil {
		return x.SpentLastTwoWeeks
	}
	return 0
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetSpentLastMonth() float64 {
	if x != nil {
		return x.SpentLastMonth
	}
	return 0
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetSpentLastSixMonths() float64 {
	if x != nil {
		return x.SpentLastSixMonths
	}
	return 0
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetSpentLastYear() float64 {
	if x != nil {
		return x.SpentLastYear
	}
	return 0
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetSpentLastTwoYears() float64 {
	if x != nil {
		return x.SpentLastTwoYears
	}
	return 0
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetTransactionCount() uint64 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *PaymentChannelMetricsFinancialSubProfile) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// PaymentChannelMonthlyExpenditure
// This message is used to represent the monthly expenditure of a payment channel.
type PaymentChannelMonthlyExpenditure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month          uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	PaymentChannel string                   `protobuf:"bytes,2,opt,name=payment_channel,json=paymentChannel,proto3" json:"payment_channel,omitempty"`
	TotalSpending  float64                  `protobuf:"fixed64,3,opt,name=total_spending,json=totalSpending,proto3" json:"total_spending,omitempty"`
	UserId         uint64                   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType    FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *PaymentChannelMonthlyExpenditure) Reset() {
	*x = PaymentChannelMonthlyExpenditure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelMonthlyExpenditure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelMonthlyExpenditure) ProtoMessage() {}

func (x *PaymentChannelMonthlyExpenditure) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelMonthlyExpenditure.ProtoReflect.Descriptor instead.
func (*PaymentChannelMonthlyExpenditure) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{25}
}

func (x *PaymentChannelMonthlyExpenditure) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *PaymentChannelMonthlyExpenditure) GetPaymentChannel() string {
	if x != nil {
		return x.PaymentChannel
	}
	return ""
}

func (x *PaymentChannelMonthlyExpenditure) GetTotalSpending() float64 {
	if x != nil {
		return x.TotalSpending
	}
	return 0
}

func (x *PaymentChannelMonthlyExpenditure) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PaymentChannelMonthlyExpenditure) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// TotalInvestmentBySecurity
// This message is used to represent the total investment of a security.
type TotalInvestmentBySecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityId      string                   `protobuf:"bytes,1,opt,name=security_id,json=securityId,proto3" json:"security_id,omitempty"`
	TotalInvestment float64                  `protobuf:"fixed64,2,opt,name=total_investment,json=totalInvestment,proto3" json:"total_investment,omitempty"`
	UserId          uint64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType     FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *TotalInvestmentBySecurity) Reset() {
	*x = TotalInvestmentBySecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalInvestmentBySecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalInvestmentBySecurity) ProtoMessage() {}

func (x *TotalInvestmentBySecurity) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalInvestmentBySecurity.ProtoReflect.Descriptor instead.
func (*TotalInvestmentBySecurity) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{26}
}

func (x *TotalInvestmentBySecurity) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *TotalInvestmentBySecurity) GetTotalInvestment() float64 {
	if x != nil {
		return x.TotalInvestment
	}
	return 0
}

func (x *TotalInvestmentBySecurity) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TotalInvestmentBySecurity) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// TransactionAggregatesByMonth
// This message is used to represent the transaction aggregates of a user.
type TransactionAggregatesByMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                          uint32                   `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	PersonalFinanceCategoryPrimary string                   `protobuf:"bytes,2,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty"`
	LocationCity                   string                   `protobuf:"bytes,3,opt,name=location_city,json=locationCity,proto3" json:"location_city,omitempty"`
	PaymentChannel                 string                   `protobuf:"bytes,4,opt,name=payment_channel,json=paymentChannel,proto3" json:"payment_channel,omitempty"`
	MerchantName                   string                   `protobuf:"bytes,5,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	TransactionCount               uint64                   `protobuf:"varint,6,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	TotalAmount                    float64                  `protobuf:"fixed64,7,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	UserId                         uint64                   `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProfileType                    FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *TransactionAggregatesByMonth) Reset() {
	*x = TransactionAggregatesByMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionAggregatesByMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionAggregatesByMonth) ProtoMessage() {}

func (x *TransactionAggregatesByMonth) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionAggregatesByMonth.ProtoReflect.Descriptor instead.
func (*TransactionAggregatesByMonth) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{27}
}

func (x *TransactionAggregatesByMonth) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *TransactionAggregatesByMonth) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *TransactionAggregatesByMonth) GetLocationCity() string {
	if x != nil {
		return x.LocationCity
	}
	return ""
}

func (x *TransactionAggregatesByMonth) GetPaymentChannel() string {
	if x != nil {
		return x.PaymentChannel
	}
	return ""
}

func (x *TransactionAggregatesByMonth) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *TransactionAggregatesByMonth) GetTransactionCount() uint64 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *TransactionAggregatesByMonth) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *TransactionAggregatesByMonth) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TransactionAggregatesByMonth) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// UserFinancialHealthMetricsTable
// This message is used to represent the financial health metrics of a user.
type UserFinancialHealthMetricsTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                 *timestamppb.Timestamp   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	UserId               uint64                   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MonthlyIncome        float64                  `protobuf:"fixed64,3,opt,name=monthly_income,json=monthlyIncome,proto3" json:"monthly_income,omitempty"`
	MonthlyExpenses      float64                  `protobuf:"fixed64,4,opt,name=monthly_expenses,json=monthlyExpenses,proto3" json:"monthly_expenses,omitempty"`
	TransactionDiversity uint64                   `protobuf:"varint,5,opt,name=transaction_diversity,json=transactionDiversity,proto3" json:"transaction_diversity,omitempty"`
	DebtToIncomeRatio    float64                  `protobuf:"fixed64,6,opt,name=debt_to_income_ratio,json=debtToIncomeRatio,proto3" json:"debt_to_income_ratio,omitempty"`
	OverdraftFrequency   uint64                   `protobuf:"varint,7,opt,name=overdraft_frequency,json=overdraftFrequency,proto3" json:"overdraft_frequency,omitempty"`
	ProfileType          FinancialUserProfileType `protobuf:"varint,22,opt,name=profile_type,json=profileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"profile_type,omitempty"`
}

func (x *UserFinancialHealthMetricsTable) Reset() {
	*x = UserFinancialHealthMetricsTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFinancialHealthMetricsTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFinancialHealthMetricsTable) ProtoMessage() {}

func (x *UserFinancialHealthMetricsTable) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFinancialHealthMetricsTable.ProtoReflect.Descriptor instead.
func (*UserFinancialHealthMetricsTable) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{28}
}

func (x *UserFinancialHealthMetricsTable) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *UserFinancialHealthMetricsTable) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFinancialHealthMetricsTable) GetMonthlyIncome() float64 {
	if x != nil {
		return x.MonthlyIncome
	}
	return 0
}

func (x *UserFinancialHealthMetricsTable) GetMonthlyExpenses() float64 {
	if x != nil {
		return x.MonthlyExpenses
	}
	return 0
}

func (x *UserFinancialHealthMetricsTable) GetTransactionDiversity() uint64 {
	if x != nil {
		return x.TransactionDiversity
	}
	return 0
}

func (x *UserFinancialHealthMetricsTable) GetDebtToIncomeRatio() float64 {
	if x != nil {
		return x.DebtToIncomeRatio
	}
	return 0
}

func (x *UserFinancialHealthMetricsTable) GetOverdraftFrequency() uint64 {
	if x != nil {
		return x.OverdraftFrequency
	}
	return 0
}

func (x *UserFinancialHealthMetricsTable) GetProfileType() FinancialUserProfileType {
	if x != nil {
		return x.ProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

// MelodyFinancialContext represents the financial context of a user.
// This message is used to represent the financial context of a user.
type MelodyFinancialContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories               []*CategoryMetricsFinancialSubProfile       `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	Expenses                 []*ExpenseMetricsFinancialSubProfileMetrics `protobuf:"bytes,2,rep,name=expenses,proto3" json:"expenses,omitempty"`
	Income                   []*IncomeMetricsFinancialSubProfile         `protobuf:"bytes,3,rep,name=income,proto3" json:"income,omitempty"`
	Locations                []*LocationFinancialSubProfile              `protobuf:"bytes,4,rep,name=locations,proto3" json:"locations,omitempty"`
	Merchants                []*MerchantMetricsFinancialSubProfile       `protobuf:"bytes,5,rep,name=merchants,proto3" json:"merchants,omitempty"`
	PaymentChannels          []*PaymentChannelMetricsFinancialSubProfile `protobuf:"bytes,6,rep,name=payment_channels,json=paymentChannels,proto3" json:"payment_channels,omitempty"`
	BankAccounts             []*BankAccount                              `protobuf:"bytes,7,rep,name=bank_accounts,json=bankAccounts,proto3" json:"bank_accounts,omitempty"`
	InvestmentAccounts       []*InvestmentAccount                        `protobuf:"bytes,8,rep,name=investment_accounts,json=investmentAccounts,proto3" json:"investment_accounts,omitempty"`
	CreditAccounts           []*CreditAccount                            `protobuf:"bytes,9,rep,name=credit_accounts,json=creditAccounts,proto3" json:"credit_accounts,omitempty"`
	MortgageLoanAccounts     []*MortgageAccount                          `protobuf:"bytes,10,rep,name=mortgage_loan_accounts,json=mortgageLoanAccounts,proto3" json:"mortgage_loan_accounts,omitempty"`
	StudentLoanAccounts      []*StudentLoanAccount                       `protobuf:"bytes,11,rep,name=student_loan_accounts,json=studentLoanAccounts,proto3" json:"student_loan_accounts,omitempty"`
	FinancialUserProfileType FinancialUserProfileType                    `protobuf:"varint,12,opt,name=financial_user_profile_type,json=financialUserProfileType,proto3,enum=financial_service.v1.FinancialUserProfileType" json:"financial_user_profile_type,omitempty"`
}

func (x *MelodyFinancialContext) Reset() {
	*x = MelodyFinancialContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MelodyFinancialContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MelodyFinancialContext) ProtoMessage() {}

func (x *MelodyFinancialContext) ProtoReflect() protoreflect.Message {
	mi := &file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MelodyFinancialContext.ProtoReflect.Descriptor instead.
func (*MelodyFinancialContext) Descriptor() ([]byte, []int) {
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP(), []int{29}
}

func (x *MelodyFinancialContext) GetCategories() []*CategoryMetricsFinancialSubProfile {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *MelodyFinancialContext) GetExpenses() []*ExpenseMetricsFinancialSubProfileMetrics {
	if x != nil {
		return x.Expenses
	}
	return nil
}

func (x *MelodyFinancialContext) GetIncome() []*IncomeMetricsFinancialSubProfile {
	if x != nil {
		return x.Income
	}
	return nil
}

func (x *MelodyFinancialContext) GetLocations() []*LocationFinancialSubProfile {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *MelodyFinancialContext) GetMerchants() []*MerchantMetricsFinancialSubProfile {
	if x != nil {
		return x.Merchants
	}
	return nil
}

func (x *MelodyFinancialContext) GetPaymentChannels() []*PaymentChannelMetricsFinancialSubProfile {
	if x != nil {
		return x.PaymentChannels
	}
	return nil
}

func (x *MelodyFinancialContext) GetBankAccounts() []*BankAccount {
	if x != nil {
		return x.BankAccounts
	}
	return nil
}

func (x *MelodyFinancialContext) GetInvestmentAccounts() []*InvestmentAccount {
	if x != nil {
		return x.InvestmentAccounts
	}
	return nil
}

func (x *MelodyFinancialContext) GetCreditAccounts() []*CreditAccount {
	if x != nil {
		return x.CreditAccounts
	}
	return nil
}

func (x *MelodyFinancialContext) GetMortgageLoanAccounts() []*MortgageAccount {
	if x != nil {
		return x.MortgageLoanAccounts
	}
	return nil
}

func (x *MelodyFinancialContext) GetStudentLoanAccounts() []*StudentLoanAccount {
	if x != nil {
		return x.StudentLoanAccounts
	}
	return nil
}

func (x *MelodyFinancialContext) GetFinancialUserProfileType() FinancialUserProfileType {
	if x != nil {
		return x.FinancialUserProfileType
	}
	return FinancialUserProfileType_FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED
}

var File_financial_service_v1_clickhouse_financial_service_proto protoreflect.FileDescriptor

var file_financial_service_v1_clickhouse_financial_service_proto_rawDesc = []byte{
	0x0a, 0x37, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x06, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x6d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a,
	0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b,
	0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x49, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xed, 0x09, 0x0a, 0x15, 0x52, 0x65, 0x4f, 0x63, 0x63, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4b,
	0x0a, 0x22, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x20,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x43, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x49, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xca, 0x0f, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92,
	0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x22, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x50, 0x61, 0x79, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x70, 0x70, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x50, 0x70, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x15,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xc9, 0x02, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xb5,
	0x04, 0x0a, 0x22, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x21, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x78, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x69, 0x78, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x77, 0x6f, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x59, 0x65, 0x61,
	0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x98, 0x02, 0x0a, 0x1a, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x21, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0x8f, 0x02, 0x0a, 0x15, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0xa3, 0x02, 0x0a, 0x1f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x49, 0x0a,
	0x21, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x44, 0x65,
	0x62, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22,
	0xb9, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xdb, 0x03, 0x0a, 0x28,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x31, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x69, 0x78, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x78, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x12, 0x53, 0x0a, 0x26, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x23, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xd4, 0x02, 0x0a, 0x10, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x69, 0x76, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xb4, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xb4, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x49, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x9f,
	0x03, 0x0a, 0x20, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x78,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x78, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0x88, 0x04, 0x0a, 0x1b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x78, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53,
	0x69, 0x78, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x2f, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x77, 0x6f, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x59, 0x65, 0x61, 0x72,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xe2, 0x03, 0x0a, 0x22,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x2f, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x77,
	0x6f, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x78, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x78, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77,
	0x6f, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xf2, 0x01, 0x0a, 0x1a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x0d,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x53, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x25, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x42, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x99, 0x04, 0x0a, 0x28, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77,
	0x6f, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x31, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x69, 0x78, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x78, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0xfc, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x19, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xb6, 0x03, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xae, 0x03, 0x0a, 0x1f, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a,
	0x14, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x65, 0x62,
	0x74, 0x54, 0x6f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2f,
	0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6f, 0x76, 0x65,
	0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xcc, 0x08, 0x0a, 0x16, 0x4d,
	0x65, 0x6c, 0x6f, 0x64, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x5a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x09,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x46, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x5b, 0x0a, 0x16, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x14, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65,
	0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x15,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x1b, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2a, 0xcb, 0x02, 0x0a, 0x1f, 0x52, 0x65,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a,
	0x2e, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x01,
	0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x49, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10,
	0x02, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x45, 0x4d, 0x49, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43,
	0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43,
	0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x4e, 0x4e,
	0x55, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x05, 0x2a, 0xe0, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x5f, 0x4f,
	0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x5f,
	0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45,
	0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f,
	0x4d, 0x42, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x0d, 0x52, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x49, 0x4e, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x55, 0x54, 0x46,
	0x4c, 0x4f, 0x57, 0x10, 0x02, 0x42, 0xd3, 0x02, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x1f, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x7d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x41, 0x49, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x3b, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x58, 0x58, 0xaa, 0x02, 0x13, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x13, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0xd8,
	0xe1, 0x1e, 0x00, 0xe0, 0xe1, 0x1e, 0x01, 0xf0, 0xe1, 0x1e, 0x01, 0xf8, 0xe1, 0x1e, 0x01, 0x80,
	0xe2, 0x1e, 0x01, 0xa8, 0xe2, 0x1e, 0x01, 0xb8, 0xe2, 0x1e, 0x01, 0xc0, 0xe2, 0x1e, 0x01, 0xc8,
	0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xe0, 0xe2, 0x1e, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_financial_service_v1_clickhouse_financial_service_proto_rawDescOnce sync.Once
	file_financial_service_v1_clickhouse_financial_service_proto_rawDescData = file_financial_service_v1_clickhouse_financial_service_proto_rawDesc
)

func file_financial_service_v1_clickhouse_financial_service_proto_rawDescGZIP() []byte {
	file_financial_service_v1_clickhouse_financial_service_proto_rawDescOnce.Do(func() {
		file_financial_service_v1_clickhouse_financial_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_financial_service_v1_clickhouse_financial_service_proto_rawDescData)
	})
	return file_financial_service_v1_clickhouse_financial_service_proto_rawDescData
}

var file_financial_service_v1_clickhouse_financial_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_financial_service_v1_clickhouse_financial_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_financial_service_v1_clickhouse_financial_service_proto_goTypes = []interface{}{
	(ReOccuringTransactionsFrequency)(0),             // 0: financial_service.v1.ReOccuringTransactionsFrequency
	(ReOccuringTransactionsStatus)(0),                // 1: financial_service.v1.ReOccuringTransactionsStatus
	(ReCurringFlow)(0),                               // 2: financial_service.v1.ReCurringFlow
	(*InvestmentTransaction)(nil),                    // 3: financial_service.v1.InvestmentTransaction
	(*ReOccuringTransaction)(nil),                    // 4: financial_service.v1.ReOccuringTransaction
	(*Transaction)(nil),                              // 5: financial_service.v1.Transaction
	(*AccountBalanceHistory)(nil),                    // 6: financial_service.v1.AccountBalanceHistory
	(*CategoryMetricsFinancialSubProfile)(nil),       // 7: financial_service.v1.CategoryMetricsFinancialSubProfile
	(*CategoryMonthlyExpenditure)(nil),               // 8: financial_service.v1.CategoryMonthlyExpenditure
	(*CategoryMonthlyIncome)(nil),                    // 9: financial_service.v1.CategoryMonthlyIncome
	(*CategoryMonthlyTransactionCount)(nil),          // 10: financial_service.v1.CategoryMonthlyTransactionCount
	(*DebtToIncomeRatio)(nil),                        // 11: financial_service.v1.DebtToIncomeRatio
	(*ExpenseMetrics)(nil),                           // 12: financial_service.v1.ExpenseMetrics
	(*ExpenseMetricsFinancialSubProfileMetrics)(nil), // 13: financial_service.v1.ExpenseMetricsFinancialSubProfileMetrics
	(*FinancialProfile)(nil),                         // 14: financial_service.v1.FinancialProfile
	(*IncomeExpenseRatio)(nil),                       // 15: financial_service.v1.IncomeExpenseRatio
	(*IncomeMetrics)(nil),                            // 16: financial_service.v1.IncomeMetrics
	(*IncomeMetricsFinancialSubProfile)(nil),         // 17: financial_service.v1.IncomeMetricsFinancialSubProfile
	(*LocationFinancialSubProfile)(nil),              // 18: financial_service.v1.LocationFinancialSubProfile
	(*MerchantMetricsFinancialSubProfile)(nil),       // 19: financial_service.v1.MerchantMetricsFinancialSubProfile
	(*MerchantMonthlyExpenditure)(nil),               // 20: financial_service.v1.MerchantMonthlyExpenditure
	(*MonthlyBalance)(nil),                           // 21: financial_service.v1.MonthlyBalance
	(*MonthlyExpenditure)(nil),                       // 22: financial_service.v1.MonthlyExpenditure
	(*MonthlyIncome)(nil),                            // 23: financial_service.v1.MonthlyIncome
	(*MonthlySavings)(nil),                           // 24: financial_service.v1.MonthlySavings
	(*MonthlyTotalQuantityBySecurityAndUser)(nil),    // 25: financial_service.v1.MonthlyTotalQuantityBySecurityAndUser
	(*MonthlyTransactionCount)(nil),                  // 26: financial_service.v1.MonthlyTransactionCount
	(*PaymentChannelMetricsFinancialSubProfile)(nil), // 27: financial_service.v1.PaymentChannelMetricsFinancialSubProfile
	(*PaymentChannelMonthlyExpenditure)(nil),         // 28: financial_service.v1.PaymentChannelMonthlyExpenditure
	(*TotalInvestmentBySecurity)(nil),                // 29: financial_service.v1.TotalInvestmentBySecurity
	(*TransactionAggregatesByMonth)(nil),             // 30: financial_service.v1.TransactionAggregatesByMonth
	(*UserFinancialHealthMetricsTable)(nil),          // 31: financial_service.v1.UserFinancialHealthMetricsTable
	(*MelodyFinancialContext)(nil),                   // 32: financial_service.v1.MelodyFinancialContext
	(*timestamppb.Timestamp)(nil),                    // 33: google.protobuf.Timestamp
	(*anypb.Any)(nil),                                // 34: google.protobuf.Any
	(FinancialUserProfileType)(0),                    // 35: financial_service.v1.FinancialUserProfileType
	(*BankAccount)(nil),                              // 36: financial_service.v1.BankAccount
	(*InvestmentAccount)(nil),                        // 37: financial_service.v1.InvestmentAccount
	(*CreditAccount)(nil),                            // 38: financial_service.v1.CreditAccount
	(*MortgageAccount)(nil),                          // 39: financial_service.v1.MortgageAccount
	(*StudentLoanAccount)(nil),                       // 40: financial_service.v1.StudentLoanAccount
}
var file_financial_service_v1_clickhouse_financial_service_proto_depIdxs = []int32{
	33, // 0: financial_service.v1.InvestmentTransaction.time:type_name -> google.protobuf.Timestamp
	34, // 1: financial_service.v1.InvestmentTransaction.additional_properties:type_name -> google.protobuf.Any
	35, // 2: financial_service.v1.InvestmentTransaction.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	0,  // 3: financial_service.v1.ReOccuringTransaction.frequency:type_name -> financial_service.v1.ReOccuringTransactionsFrequency
	1,  // 4: financial_service.v1.ReOccuringTransaction.status:type_name -> financial_service.v1.ReOccuringTransactionsStatus
	2,  // 5: financial_service.v1.ReOccuringTransaction.flow:type_name -> financial_service.v1.ReCurringFlow
	33, // 6: financial_service.v1.ReOccuringTransaction.time:type_name -> google.protobuf.Timestamp
	34, // 7: financial_service.v1.ReOccuringTransaction.additional_properties:type_name -> google.protobuf.Any
	35, // 8: financial_service.v1.ReOccuringTransaction.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	33, // 9: financial_service.v1.Transaction.time:type_name -> google.protobuf.Timestamp
	34, // 10: financial_service.v1.Transaction.additional_properties:type_name -> google.protobuf.Any
	35, // 11: financial_service.v1.Transaction.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	33, // 12: financial_service.v1.AccountBalanceHistory.time:type_name -> google.protobuf.Timestamp
	35, // 13: financial_service.v1.AccountBalanceHistory.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 14: financial_service.v1.CategoryMetricsFinancialSubProfile.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 15: financial_service.v1.CategoryMonthlyExpenditure.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 16: financial_service.v1.CategoryMonthlyIncome.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 17: financial_service.v1.CategoryMonthlyTransactionCount.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 18: financial_service.v1.DebtToIncomeRatio.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 19: financial_service.v1.ExpenseMetrics.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 20: financial_service.v1.ExpenseMetricsFinancialSubProfileMetrics.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 21: financial_service.v1.FinancialProfile.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 22: financial_service.v1.IncomeExpenseRatio.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 23: financial_service.v1.IncomeMetrics.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 24: financial_service.v1.IncomeMetricsFinancialSubProfile.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 25: financial_service.v1.LocationFinancialSubProfile.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 26: financial_service.v1.MerchantMetricsFinancialSubProfile.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 27: financial_service.v1.MerchantMonthlyExpenditure.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 28: financial_service.v1.MonthlyBalance.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 29: financial_service.v1.MonthlyExpenditure.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 30: financial_service.v1.MonthlyIncome.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 31: financial_service.v1.MonthlySavings.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 32: financial_service.v1.MonthlyTotalQuantityBySecurityAndUser.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 33: financial_service.v1.MonthlyTransactionCount.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 34: financial_service.v1.PaymentChannelMetricsFinancialSubProfile.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 35: financial_service.v1.PaymentChannelMonthlyExpenditure.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 36: financial_service.v1.TotalInvestmentBySecurity.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	35, // 37: financial_service.v1.TransactionAggregatesByMonth.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	33, // 38: financial_service.v1.UserFinancialHealthMetricsTable.time:type_name -> google.protobuf.Timestamp
	35, // 39: financial_service.v1.UserFinancialHealthMetricsTable.profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	7,  // 40: financial_service.v1.MelodyFinancialContext.categories:type_name -> financial_service.v1.CategoryMetricsFinancialSubProfile
	13, // 41: financial_service.v1.MelodyFinancialContext.expenses:type_name -> financial_service.v1.ExpenseMetricsFinancialSubProfileMetrics
	17, // 42: financial_service.v1.MelodyFinancialContext.income:type_name -> financial_service.v1.IncomeMetricsFinancialSubProfile
	18, // 43: financial_service.v1.MelodyFinancialContext.locations:type_name -> financial_service.v1.LocationFinancialSubProfile
	19, // 44: financial_service.v1.MelodyFinancialContext.merchants:type_name -> financial_service.v1.MerchantMetricsFinancialSubProfile
	27, // 45: financial_service.v1.MelodyFinancialContext.payment_channels:type_name -> financial_service.v1.PaymentChannelMetricsFinancialSubProfile
	36, // 46: financial_service.v1.MelodyFinancialContext.bank_accounts:type_name -> financial_service.v1.BankAccount
	37, // 47: financial_service.v1.MelodyFinancialContext.investment_accounts:type_name -> financial_service.v1.InvestmentAccount
	38, // 48: financial_service.v1.MelodyFinancialContext.credit_accounts:type_name -> financial_service.v1.CreditAccount
	39, // 49: financial_service.v1.MelodyFinancialContext.mortgage_loan_accounts:type_name -> financial_service.v1.MortgageAccount
	40, // 50: financial_service.v1.MelodyFinancialContext.student_loan_accounts:type_name -> financial_service.v1.StudentLoanAccount
	35, // 51: financial_service.v1.MelodyFinancialContext.financial_user_profile_type:type_name -> financial_service.v1.FinancialUserProfileType
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_financial_service_v1_clickhouse_financial_service_proto_init() }
func file_financial_service_v1_clickhouse_financial_service_proto_init() {
	if File_financial_service_v1_clickhouse_financial_service_proto != nil {
		return
	}
	file_financial_service_v1_message_financial_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestmentTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReOccuringTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBalanceHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryMetricsFinancialSubProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryMonthlyExpenditure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryMonthlyIncome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryMonthlyTransactionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebtToIncomeRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpenseMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpenseMetricsFinancialSubProfileMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeExpenseRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeMetricsFinancialSubProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationFinancialSubProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantMetricsFinancialSubProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantMonthlyExpenditure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyExpenditure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyIncome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlySavings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyTotalQuantityBySecurityAndUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyTransactionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelMetricsFinancialSubProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelMonthlyExpenditure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalInvestmentBySecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionAggregatesByMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFinancialHealthMetricsTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_service_v1_clickhouse_financial_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MelodyFinancialContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_financial_service_v1_clickhouse_financial_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_financial_service_v1_clickhouse_financial_service_proto_goTypes,
		DependencyIndexes: file_financial_service_v1_clickhouse_financial_service_proto_depIdxs,
		EnumInfos:         file_financial_service_v1_clickhouse_financial_service_proto_enumTypes,
		MessageInfos:      file_financial_service_v1_clickhouse_financial_service_proto_msgTypes,
	}.Build()
	File_financial_service_v1_clickhouse_financial_service_proto = out.File
	file_financial_service_v1_clickhouse_financial_service_proto_rawDesc = nil
	file_financial_service_v1_clickhouse_financial_service_proto_goTypes = nil
	file_financial_service_v1_clickhouse_financial_service_proto_depIdxs = nil
}
