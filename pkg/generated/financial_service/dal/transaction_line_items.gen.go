// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newTransactionLineItemORM(db *gorm.DB, opts ...gen.DOOption) transactionLineItemORM {
	_transactionLineItemORM := transactionLineItemORM{}

	_transactionLineItemORM.transactionLineItemORMDo.UseDB(db, opts...)
	_transactionLineItemORM.transactionLineItemORMDo.UseModel(&financial_servicev1.TransactionLineItemORM{})

	tableName := _transactionLineItemORM.transactionLineItemORMDo.TableName()
	_transactionLineItemORM.ALL = field.NewAsterisk(tableName)
	_transactionLineItemORM.Account = field.NewString(tableName, "account")
	_transactionLineItemORM.BusinessTransactionId = field.NewUint64(tableName, "business_transaction_id")
	_transactionLineItemORM.Company = field.NewString(tableName, "company")
	_transactionLineItemORM.Currency = field.NewString(tableName, "currency")
	_transactionLineItemORM.ExchangeRate = field.NewString(tableName, "exchange_rate")
	_transactionLineItemORM.Id = field.NewUint64(tableName, "id")
	_transactionLineItemORM.Item = field.NewString(tableName, "item")
	_transactionLineItemORM.Memo = field.NewString(tableName, "memo")
	_transactionLineItemORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_transactionLineItemORM.Quantity = field.NewString(tableName, "quantity")
	_transactionLineItemORM.RemoteId = field.NewString(tableName, "remote_id")
	_transactionLineItemORM.TaxRate = field.NewString(tableName, "tax_rate")
	_transactionLineItemORM.TotalLineAmount = field.NewString(tableName, "total_line_amount")
	_transactionLineItemORM.TrackingCategories = field.NewField(tableName, "tracking_categories")
	_transactionLineItemORM.TrackingCategory = field.NewString(tableName, "tracking_category")
	_transactionLineItemORM.UnitPrice = field.NewString(tableName, "unit_price")

	_transactionLineItemORM.fillFieldMap()

	return _transactionLineItemORM
}

type transactionLineItemORM struct {
	transactionLineItemORMDo

	ALL                   field.Asterisk
	Account               field.String
	BusinessTransactionId field.Uint64
	Company               field.String
	Currency              field.String
	ExchangeRate          field.String
	Id                    field.Uint64
	Item                  field.String
	Memo                  field.String
	ModifiedAt            field.Time
	Quantity              field.String
	RemoteId              field.String
	TaxRate               field.String
	TotalLineAmount       field.String
	TrackingCategories    field.Field
	TrackingCategory      field.String
	UnitPrice             field.String

	fieldMap map[string]field.Expr
}

func (t transactionLineItemORM) Table(newTableName string) *transactionLineItemORM {
	t.transactionLineItemORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionLineItemORM) As(alias string) *transactionLineItemORM {
	t.transactionLineItemORMDo.DO = *(t.transactionLineItemORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionLineItemORM) updateTableName(table string) *transactionLineItemORM {
	t.ALL = field.NewAsterisk(table)
	t.Account = field.NewString(table, "account")
	t.BusinessTransactionId = field.NewUint64(table, "business_transaction_id")
	t.Company = field.NewString(table, "company")
	t.Currency = field.NewString(table, "currency")
	t.ExchangeRate = field.NewString(table, "exchange_rate")
	t.Id = field.NewUint64(table, "id")
	t.Item = field.NewString(table, "item")
	t.Memo = field.NewString(table, "memo")
	t.ModifiedAt = field.NewTime(table, "modified_at")
	t.Quantity = field.NewString(table, "quantity")
	t.RemoteId = field.NewString(table, "remote_id")
	t.TaxRate = field.NewString(table, "tax_rate")
	t.TotalLineAmount = field.NewString(table, "total_line_amount")
	t.TrackingCategories = field.NewField(table, "tracking_categories")
	t.TrackingCategory = field.NewString(table, "tracking_category")
	t.UnitPrice = field.NewString(table, "unit_price")

	t.fillFieldMap()

	return t
}

func (t *transactionLineItemORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionLineItemORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["account"] = t.Account
	t.fieldMap["business_transaction_id"] = t.BusinessTransactionId
	t.fieldMap["company"] = t.Company
	t.fieldMap["currency"] = t.Currency
	t.fieldMap["exchange_rate"] = t.ExchangeRate
	t.fieldMap["id"] = t.Id
	t.fieldMap["item"] = t.Item
	t.fieldMap["memo"] = t.Memo
	t.fieldMap["modified_at"] = t.ModifiedAt
	t.fieldMap["quantity"] = t.Quantity
	t.fieldMap["remote_id"] = t.RemoteId
	t.fieldMap["tax_rate"] = t.TaxRate
	t.fieldMap["total_line_amount"] = t.TotalLineAmount
	t.fieldMap["tracking_categories"] = t.TrackingCategories
	t.fieldMap["tracking_category"] = t.TrackingCategory
	t.fieldMap["unit_price"] = t.UnitPrice
}

func (t transactionLineItemORM) clone(db *gorm.DB) transactionLineItemORM {
	t.transactionLineItemORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionLineItemORM) replaceDB(db *gorm.DB) transactionLineItemORM {
	t.transactionLineItemORMDo.ReplaceDB(db)
	return t
}

type transactionLineItemORMDo struct{ gen.DO }

type ITransactionLineItemORMDo interface {
	gen.SubQuery
	Debug() ITransactionLineItemORMDo
	WithContext(ctx context.Context) ITransactionLineItemORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionLineItemORMDo
	WriteDB() ITransactionLineItemORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionLineItemORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionLineItemORMDo
	Not(conds ...gen.Condition) ITransactionLineItemORMDo
	Or(conds ...gen.Condition) ITransactionLineItemORMDo
	Select(conds ...field.Expr) ITransactionLineItemORMDo
	Where(conds ...gen.Condition) ITransactionLineItemORMDo
	Order(conds ...field.Expr) ITransactionLineItemORMDo
	Distinct(cols ...field.Expr) ITransactionLineItemORMDo
	Omit(cols ...field.Expr) ITransactionLineItemORMDo
	Join(table schema.Tabler, on ...field.Expr) ITransactionLineItemORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionLineItemORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionLineItemORMDo
	Group(cols ...field.Expr) ITransactionLineItemORMDo
	Having(conds ...gen.Condition) ITransactionLineItemORMDo
	Limit(limit int) ITransactionLineItemORMDo
	Offset(offset int) ITransactionLineItemORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionLineItemORMDo
	Unscoped() ITransactionLineItemORMDo
	Create(values ...*financial_servicev1.TransactionLineItemORM) error
	CreateInBatches(values []*financial_servicev1.TransactionLineItemORM, batchSize int) error
	Save(values ...*financial_servicev1.TransactionLineItemORM) error
	First() (*financial_servicev1.TransactionLineItemORM, error)
	Take() (*financial_servicev1.TransactionLineItemORM, error)
	Last() (*financial_servicev1.TransactionLineItemORM, error)
	Find() ([]*financial_servicev1.TransactionLineItemORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.TransactionLineItemORM, err error)
	FindInBatches(result *[]*financial_servicev1.TransactionLineItemORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.TransactionLineItemORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionLineItemORMDo
	Assign(attrs ...field.AssignExpr) ITransactionLineItemORMDo
	Joins(fields ...field.RelationField) ITransactionLineItemORMDo
	Preload(fields ...field.RelationField) ITransactionLineItemORMDo
	FirstOrInit() (*financial_servicev1.TransactionLineItemORM, error)
	FirstOrCreate() (*financial_servicev1.TransactionLineItemORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.TransactionLineItemORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionLineItemORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.TransactionLineItemORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.TransactionLineItemORM, err error)
	CreateRecord(item financial_servicev1.TransactionLineItemORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.TransactionLineItemORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.TransactionLineItemORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t transactionLineItemORMDo) GetRecordByID(id int) (result financial_servicev1.TransactionLineItemORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM transaction_line_items ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t transactionLineItemORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.TransactionLineItemORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM transaction_line_items ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (t transactionLineItemORMDo) CreateRecord(item financial_servicev1.TransactionLineItemORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO transaction_line_items (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (t transactionLineItemORMDo) UpdateRecordByID(id int, item financial_servicev1.TransactionLineItemORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE transaction_line_items SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t transactionLineItemORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM transaction_line_items ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (t transactionLineItemORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.TransactionLineItemORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM transaction_line_items ORDER BY " + t.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t transactionLineItemORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM transaction_line_items ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t transactionLineItemORMDo) Debug() ITransactionLineItemORMDo {
	return t.withDO(t.DO.Debug())
}

func (t transactionLineItemORMDo) WithContext(ctx context.Context) ITransactionLineItemORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionLineItemORMDo) ReadDB() ITransactionLineItemORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t transactionLineItemORMDo) WriteDB() ITransactionLineItemORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t transactionLineItemORMDo) Session(config *gorm.Session) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t transactionLineItemORMDo) Clauses(conds ...clause.Expression) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionLineItemORMDo) Returning(value interface{}, columns ...string) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionLineItemORMDo) Not(conds ...gen.Condition) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionLineItemORMDo) Or(conds ...gen.Condition) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionLineItemORMDo) Select(conds ...field.Expr) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionLineItemORMDo) Where(conds ...gen.Condition) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionLineItemORMDo) Order(conds ...field.Expr) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionLineItemORMDo) Distinct(cols ...field.Expr) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionLineItemORMDo) Omit(cols ...field.Expr) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionLineItemORMDo) Join(table schema.Tabler, on ...field.Expr) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionLineItemORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionLineItemORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionLineItemORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionLineItemORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionLineItemORMDo) Group(cols ...field.Expr) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionLineItemORMDo) Having(conds ...gen.Condition) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionLineItemORMDo) Limit(limit int) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionLineItemORMDo) Offset(offset int) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionLineItemORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionLineItemORMDo) Unscoped() ITransactionLineItemORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionLineItemORMDo) Create(values ...*financial_servicev1.TransactionLineItemORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionLineItemORMDo) CreateInBatches(values []*financial_servicev1.TransactionLineItemORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionLineItemORMDo) Save(values ...*financial_servicev1.TransactionLineItemORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionLineItemORMDo) First() (*financial_servicev1.TransactionLineItemORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TransactionLineItemORM), nil
	}
}

func (t transactionLineItemORMDo) Take() (*financial_servicev1.TransactionLineItemORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TransactionLineItemORM), nil
	}
}

func (t transactionLineItemORMDo) Last() (*financial_servicev1.TransactionLineItemORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TransactionLineItemORM), nil
	}
}

func (t transactionLineItemORMDo) Find() ([]*financial_servicev1.TransactionLineItemORM, error) {
	result, err := t.DO.Find()
	return result.([]*financial_servicev1.TransactionLineItemORM), err
}

func (t transactionLineItemORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.TransactionLineItemORM, err error) {
	buf := make([]*financial_servicev1.TransactionLineItemORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionLineItemORMDo) FindInBatches(result *[]*financial_servicev1.TransactionLineItemORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionLineItemORMDo) Attrs(attrs ...field.AssignExpr) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionLineItemORMDo) Assign(attrs ...field.AssignExpr) ITransactionLineItemORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionLineItemORMDo) Joins(fields ...field.RelationField) ITransactionLineItemORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionLineItemORMDo) Preload(fields ...field.RelationField) ITransactionLineItemORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionLineItemORMDo) FirstOrInit() (*financial_servicev1.TransactionLineItemORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TransactionLineItemORM), nil
	}
}

func (t transactionLineItemORMDo) FirstOrCreate() (*financial_servicev1.TransactionLineItemORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TransactionLineItemORM), nil
	}
}

func (t transactionLineItemORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.TransactionLineItemORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionLineItemORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionLineItemORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionLineItemORMDo) Delete(models ...*financial_servicev1.TransactionLineItemORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionLineItemORMDo) withDO(do gen.Dao) *transactionLineItemORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
