// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newSmartGoalNoteORM(db *gorm.DB, opts ...gen.DOOption) smartGoalNoteORM {
	_smartGoalNoteORM := smartGoalNoteORM{}

	_smartGoalNoteORM.smartGoalNoteORMDo.UseDB(db, opts...)
	_smartGoalNoteORM.smartGoalNoteORMDo.UseModel(&financial_servicev1.SmartGoalNoteORM{})

	tableName := _smartGoalNoteORM.smartGoalNoteORMDo.TableName()
	_smartGoalNoteORM.ALL = field.NewAsterisk(tableName)
	_smartGoalNoteORM.Content = field.NewString(tableName, "content")
	_smartGoalNoteORM.CreatedAt = field.NewTime(tableName, "created_at")
	_smartGoalNoteORM.Id = field.NewUint64(tableName, "id")
	_smartGoalNoteORM.SmartGoalId = field.NewUint64(tableName, "smart_goal_id")
	_smartGoalNoteORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_smartGoalNoteORM.UserId = field.NewUint64(tableName, "user_id")

	_smartGoalNoteORM.fillFieldMap()

	return _smartGoalNoteORM
}

type smartGoalNoteORM struct {
	smartGoalNoteORMDo

	ALL         field.Asterisk
	Content     field.String
	CreatedAt   field.Time
	Id          field.Uint64
	SmartGoalId field.Uint64
	UpdatedAt   field.Time
	UserId      field.Uint64

	fieldMap map[string]field.Expr
}

func (s smartGoalNoteORM) Table(newTableName string) *smartGoalNoteORM {
	s.smartGoalNoteORMDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smartGoalNoteORM) As(alias string) *smartGoalNoteORM {
	s.smartGoalNoteORMDo.DO = *(s.smartGoalNoteORMDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smartGoalNoteORM) updateTableName(table string) *smartGoalNoteORM {
	s.ALL = field.NewAsterisk(table)
	s.Content = field.NewString(table, "content")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.Id = field.NewUint64(table, "id")
	s.SmartGoalId = field.NewUint64(table, "smart_goal_id")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.UserId = field.NewUint64(table, "user_id")

	s.fillFieldMap()

	return s
}

func (s *smartGoalNoteORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smartGoalNoteORM) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["content"] = s.Content
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["id"] = s.Id
	s.fieldMap["smart_goal_id"] = s.SmartGoalId
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["user_id"] = s.UserId
}

func (s smartGoalNoteORM) clone(db *gorm.DB) smartGoalNoteORM {
	s.smartGoalNoteORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smartGoalNoteORM) replaceDB(db *gorm.DB) smartGoalNoteORM {
	s.smartGoalNoteORMDo.ReplaceDB(db)
	return s
}

type smartGoalNoteORMDo struct{ gen.DO }

type ISmartGoalNoteORMDo interface {
	gen.SubQuery
	Debug() ISmartGoalNoteORMDo
	WithContext(ctx context.Context) ISmartGoalNoteORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmartGoalNoteORMDo
	WriteDB() ISmartGoalNoteORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmartGoalNoteORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmartGoalNoteORMDo
	Not(conds ...gen.Condition) ISmartGoalNoteORMDo
	Or(conds ...gen.Condition) ISmartGoalNoteORMDo
	Select(conds ...field.Expr) ISmartGoalNoteORMDo
	Where(conds ...gen.Condition) ISmartGoalNoteORMDo
	Order(conds ...field.Expr) ISmartGoalNoteORMDo
	Distinct(cols ...field.Expr) ISmartGoalNoteORMDo
	Omit(cols ...field.Expr) ISmartGoalNoteORMDo
	Join(table schema.Tabler, on ...field.Expr) ISmartGoalNoteORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmartGoalNoteORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmartGoalNoteORMDo
	Group(cols ...field.Expr) ISmartGoalNoteORMDo
	Having(conds ...gen.Condition) ISmartGoalNoteORMDo
	Limit(limit int) ISmartGoalNoteORMDo
	Offset(offset int) ISmartGoalNoteORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmartGoalNoteORMDo
	Unscoped() ISmartGoalNoteORMDo
	Create(values ...*financial_servicev1.SmartGoalNoteORM) error
	CreateInBatches(values []*financial_servicev1.SmartGoalNoteORM, batchSize int) error
	Save(values ...*financial_servicev1.SmartGoalNoteORM) error
	First() (*financial_servicev1.SmartGoalNoteORM, error)
	Take() (*financial_servicev1.SmartGoalNoteORM, error)
	Last() (*financial_servicev1.SmartGoalNoteORM, error)
	Find() ([]*financial_servicev1.SmartGoalNoteORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.SmartGoalNoteORM, err error)
	FindInBatches(result *[]*financial_servicev1.SmartGoalNoteORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.SmartGoalNoteORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmartGoalNoteORMDo
	Assign(attrs ...field.AssignExpr) ISmartGoalNoteORMDo
	Joins(fields ...field.RelationField) ISmartGoalNoteORMDo
	Preload(fields ...field.RelationField) ISmartGoalNoteORMDo
	FirstOrInit() (*financial_servicev1.SmartGoalNoteORM, error)
	FirstOrCreate() (*financial_servicev1.SmartGoalNoteORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.SmartGoalNoteORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmartGoalNoteORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.SmartGoalNoteORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.SmartGoalNoteORM, err error)
	CreateRecord(item financial_servicev1.SmartGoalNoteORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.SmartGoalNoteORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.SmartGoalNoteORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (s smartGoalNoteORMDo) GetRecordByID(id int) (result financial_servicev1.SmartGoalNoteORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM smart_goal_notes ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (s smartGoalNoteORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.SmartGoalNoteORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM smart_goal_notes ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (s smartGoalNoteORMDo) CreateRecord(item financial_servicev1.SmartGoalNoteORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO smart_goal_notes (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (s smartGoalNoteORMDo) UpdateRecordByID(id int, item financial_servicev1.SmartGoalNoteORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE smart_goal_notes SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (s smartGoalNoteORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM smart_goal_notes ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (s smartGoalNoteORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.SmartGoalNoteORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM smart_goal_notes ORDER BY " + s.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (s smartGoalNoteORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM smart_goal_notes ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s smartGoalNoteORMDo) Debug() ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Debug())
}

func (s smartGoalNoteORMDo) WithContext(ctx context.Context) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smartGoalNoteORMDo) ReadDB() ISmartGoalNoteORMDo {
	return s.Clauses(dbresolver.Read)
}

func (s smartGoalNoteORMDo) WriteDB() ISmartGoalNoteORMDo {
	return s.Clauses(dbresolver.Write)
}

func (s smartGoalNoteORMDo) Session(config *gorm.Session) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Session(config))
}

func (s smartGoalNoteORMDo) Clauses(conds ...clause.Expression) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smartGoalNoteORMDo) Returning(value interface{}, columns ...string) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smartGoalNoteORMDo) Not(conds ...gen.Condition) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smartGoalNoteORMDo) Or(conds ...gen.Condition) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smartGoalNoteORMDo) Select(conds ...field.Expr) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smartGoalNoteORMDo) Where(conds ...gen.Condition) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smartGoalNoteORMDo) Order(conds ...field.Expr) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smartGoalNoteORMDo) Distinct(cols ...field.Expr) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smartGoalNoteORMDo) Omit(cols ...field.Expr) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smartGoalNoteORMDo) Join(table schema.Tabler, on ...field.Expr) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smartGoalNoteORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smartGoalNoteORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smartGoalNoteORMDo) Group(cols ...field.Expr) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smartGoalNoteORMDo) Having(conds ...gen.Condition) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smartGoalNoteORMDo) Limit(limit int) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smartGoalNoteORMDo) Offset(offset int) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smartGoalNoteORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smartGoalNoteORMDo) Unscoped() ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smartGoalNoteORMDo) Create(values ...*financial_servicev1.SmartGoalNoteORM) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smartGoalNoteORMDo) CreateInBatches(values []*financial_servicev1.SmartGoalNoteORM, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smartGoalNoteORMDo) Save(values ...*financial_servicev1.SmartGoalNoteORM) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smartGoalNoteORMDo) First() (*financial_servicev1.SmartGoalNoteORM, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.SmartGoalNoteORM), nil
	}
}

func (s smartGoalNoteORMDo) Take() (*financial_servicev1.SmartGoalNoteORM, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.SmartGoalNoteORM), nil
	}
}

func (s smartGoalNoteORMDo) Last() (*financial_servicev1.SmartGoalNoteORM, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.SmartGoalNoteORM), nil
	}
}

func (s smartGoalNoteORMDo) Find() ([]*financial_servicev1.SmartGoalNoteORM, error) {
	result, err := s.DO.Find()
	return result.([]*financial_servicev1.SmartGoalNoteORM), err
}

func (s smartGoalNoteORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.SmartGoalNoteORM, err error) {
	buf := make([]*financial_servicev1.SmartGoalNoteORM, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smartGoalNoteORMDo) FindInBatches(result *[]*financial_servicev1.SmartGoalNoteORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smartGoalNoteORMDo) Attrs(attrs ...field.AssignExpr) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smartGoalNoteORMDo) Assign(attrs ...field.AssignExpr) ISmartGoalNoteORMDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smartGoalNoteORMDo) Joins(fields ...field.RelationField) ISmartGoalNoteORMDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smartGoalNoteORMDo) Preload(fields ...field.RelationField) ISmartGoalNoteORMDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smartGoalNoteORMDo) FirstOrInit() (*financial_servicev1.SmartGoalNoteORM, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.SmartGoalNoteORM), nil
	}
}

func (s smartGoalNoteORMDo) FirstOrCreate() (*financial_servicev1.SmartGoalNoteORM, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.SmartGoalNoteORM), nil
	}
}

func (s smartGoalNoteORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.SmartGoalNoteORM, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smartGoalNoteORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smartGoalNoteORMDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smartGoalNoteORMDo) Delete(models ...*financial_servicev1.SmartGoalNoteORM) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smartGoalNoteORMDo) withDO(do gen.Dao) *smartGoalNoteORMDo {
	s.DO = *do.(*gen.DO)
	return s
}
