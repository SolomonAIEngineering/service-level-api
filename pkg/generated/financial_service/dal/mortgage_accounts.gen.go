// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newMortgageAccountORM(db *gorm.DB, opts ...gen.DOOption) mortgageAccountORM {
	_mortgageAccountORM := mortgageAccountORM{}

	_mortgageAccountORM.mortgageAccountORMDo.UseDB(db, opts...)
	_mortgageAccountORM.mortgageAccountORMDo.UseModel(&financial_servicev1.MortgageAccountORM{})

	tableName := _mortgageAccountORM.mortgageAccountORMDo.TableName()
	_mortgageAccountORM.ALL = field.NewAsterisk(tableName)
	_mortgageAccountORM.AccountNumber = field.NewString(tableName, "account_number")
	_mortgageAccountORM.CurrentLateFee = field.NewFloat64(tableName, "current_late_fee")
	_mortgageAccountORM.EscrowBalance = field.NewFloat64(tableName, "escrow_balance")
	_mortgageAccountORM.HasPmi = field.NewBool(tableName, "has_pmi")
	_mortgageAccountORM.HasPrepaymentPenalty = field.NewBool(tableName, "has_prepayment_penalty")
	_mortgageAccountORM.Id = field.NewUint64(tableName, "id")
	_mortgageAccountORM.InterestRatePercentage = field.NewFloat64(tableName, "interest_rate_percentage")
	_mortgageAccountORM.InterestRateType = field.NewString(tableName, "interest_rate_type")
	_mortgageAccountORM.LastPaymentAmount = field.NewFloat64(tableName, "last_payment_amount")
	_mortgageAccountORM.LastPaymentDate = field.NewString(tableName, "last_payment_date")
	_mortgageAccountORM.LinkId = field.NewUint64(tableName, "link_id")
	_mortgageAccountORM.LoanTerm = field.NewString(tableName, "loan_term")
	_mortgageAccountORM.LoanTypeDescription = field.NewString(tableName, "loan_type_description")
	_mortgageAccountORM.MaturityDate = field.NewString(tableName, "maturity_date")
	_mortgageAccountORM.NextMonthlyPayment = field.NewFloat64(tableName, "next_monthly_payment")
	_mortgageAccountORM.NextPaymentDueDate = field.NewString(tableName, "next_payment_due_date")
	_mortgageAccountORM.OriginalPrincipalBalance = field.NewFloat64(tableName, "original_principal_balance")
	_mortgageAccountORM.OriginalPropertyValue = field.NewFloat64(tableName, "original_property_value")
	_mortgageAccountORM.OriginationDate = field.NewString(tableName, "origination_date")
	_mortgageAccountORM.OriginationPrincipalAmount = field.NewFloat64(tableName, "origination_principal_amount")
	_mortgageAccountORM.OutstandingPrincipalBalance = field.NewFloat64(tableName, "outstanding_principal_balance")
	_mortgageAccountORM.PastDueAmount = field.NewFloat64(tableName, "past_due_amount")
	_mortgageAccountORM.PaymentAmount = field.NewFloat64(tableName, "payment_amount")
	_mortgageAccountORM.PaymentDate = field.NewString(tableName, "payment_date")
	_mortgageAccountORM.PlaidAccountId = field.NewString(tableName, "plaid_account_id")
	_mortgageAccountORM.PropertyAddressCity = field.NewString(tableName, "property_address_city")
	_mortgageAccountORM.PropertyAddressPostalCode = field.NewString(tableName, "property_address_postal_code")
	_mortgageAccountORM.PropertyAddressState = field.NewString(tableName, "property_address_state")
	_mortgageAccountORM.PropertyAddressStreet = field.NewString(tableName, "property_address_street")
	_mortgageAccountORM.PropertyCountry = field.NewString(tableName, "property_country")
	_mortgageAccountORM.PropertyRegion = field.NewString(tableName, "property_region")
	_mortgageAccountORM.Status = field.NewString(tableName, "status")
	_mortgageAccountORM.YtdInterestPaid = field.NewFloat64(tableName, "ytd_interest_paid")
	_mortgageAccountORM.YtdPrincipalPaid = field.NewFloat64(tableName, "ytd_principal_paid")

	_mortgageAccountORM.fillFieldMap()

	return _mortgageAccountORM
}

type mortgageAccountORM struct {
	mortgageAccountORMDo

	ALL                         field.Asterisk
	AccountNumber               field.String
	CurrentLateFee              field.Float64
	EscrowBalance               field.Float64
	HasPmi                      field.Bool
	HasPrepaymentPenalty        field.Bool
	Id                          field.Uint64
	InterestRatePercentage      field.Float64
	InterestRateType            field.String
	LastPaymentAmount           field.Float64
	LastPaymentDate             field.String
	LinkId                      field.Uint64
	LoanTerm                    field.String
	LoanTypeDescription         field.String
	MaturityDate                field.String
	NextMonthlyPayment          field.Float64
	NextPaymentDueDate          field.String
	OriginalPrincipalBalance    field.Float64
	OriginalPropertyValue       field.Float64
	OriginationDate             field.String
	OriginationPrincipalAmount  field.Float64
	OutstandingPrincipalBalance field.Float64
	PastDueAmount               field.Float64
	PaymentAmount               field.Float64
	PaymentDate                 field.String
	PlaidAccountId              field.String
	PropertyAddressCity         field.String
	PropertyAddressPostalCode   field.String
	PropertyAddressState        field.String
	PropertyAddressStreet       field.String
	PropertyCountry             field.String
	PropertyRegion              field.String
	Status                      field.String
	YtdInterestPaid             field.Float64
	YtdPrincipalPaid            field.Float64

	fieldMap map[string]field.Expr
}

func (m mortgageAccountORM) Table(newTableName string) *mortgageAccountORM {
	m.mortgageAccountORMDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mortgageAccountORM) As(alias string) *mortgageAccountORM {
	m.mortgageAccountORMDo.DO = *(m.mortgageAccountORMDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mortgageAccountORM) updateTableName(table string) *mortgageAccountORM {
	m.ALL = field.NewAsterisk(table)
	m.AccountNumber = field.NewString(table, "account_number")
	m.CurrentLateFee = field.NewFloat64(table, "current_late_fee")
	m.EscrowBalance = field.NewFloat64(table, "escrow_balance")
	m.HasPmi = field.NewBool(table, "has_pmi")
	m.HasPrepaymentPenalty = field.NewBool(table, "has_prepayment_penalty")
	m.Id = field.NewUint64(table, "id")
	m.InterestRatePercentage = field.NewFloat64(table, "interest_rate_percentage")
	m.InterestRateType = field.NewString(table, "interest_rate_type")
	m.LastPaymentAmount = field.NewFloat64(table, "last_payment_amount")
	m.LastPaymentDate = field.NewString(table, "last_payment_date")
	m.LinkId = field.NewUint64(table, "link_id")
	m.LoanTerm = field.NewString(table, "loan_term")
	m.LoanTypeDescription = field.NewString(table, "loan_type_description")
	m.MaturityDate = field.NewString(table, "maturity_date")
	m.NextMonthlyPayment = field.NewFloat64(table, "next_monthly_payment")
	m.NextPaymentDueDate = field.NewString(table, "next_payment_due_date")
	m.OriginalPrincipalBalance = field.NewFloat64(table, "original_principal_balance")
	m.OriginalPropertyValue = field.NewFloat64(table, "original_property_value")
	m.OriginationDate = field.NewString(table, "origination_date")
	m.OriginationPrincipalAmount = field.NewFloat64(table, "origination_principal_amount")
	m.OutstandingPrincipalBalance = field.NewFloat64(table, "outstanding_principal_balance")
	m.PastDueAmount = field.NewFloat64(table, "past_due_amount")
	m.PaymentAmount = field.NewFloat64(table, "payment_amount")
	m.PaymentDate = field.NewString(table, "payment_date")
	m.PlaidAccountId = field.NewString(table, "plaid_account_id")
	m.PropertyAddressCity = field.NewString(table, "property_address_city")
	m.PropertyAddressPostalCode = field.NewString(table, "property_address_postal_code")
	m.PropertyAddressState = field.NewString(table, "property_address_state")
	m.PropertyAddressStreet = field.NewString(table, "property_address_street")
	m.PropertyCountry = field.NewString(table, "property_country")
	m.PropertyRegion = field.NewString(table, "property_region")
	m.Status = field.NewString(table, "status")
	m.YtdInterestPaid = field.NewFloat64(table, "ytd_interest_paid")
	m.YtdPrincipalPaid = field.NewFloat64(table, "ytd_principal_paid")

	m.fillFieldMap()

	return m
}

func (m *mortgageAccountORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mortgageAccountORM) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 34)
	m.fieldMap["account_number"] = m.AccountNumber
	m.fieldMap["current_late_fee"] = m.CurrentLateFee
	m.fieldMap["escrow_balance"] = m.EscrowBalance
	m.fieldMap["has_pmi"] = m.HasPmi
	m.fieldMap["has_prepayment_penalty"] = m.HasPrepaymentPenalty
	m.fieldMap["id"] = m.Id
	m.fieldMap["interest_rate_percentage"] = m.InterestRatePercentage
	m.fieldMap["interest_rate_type"] = m.InterestRateType
	m.fieldMap["last_payment_amount"] = m.LastPaymentAmount
	m.fieldMap["last_payment_date"] = m.LastPaymentDate
	m.fieldMap["link_id"] = m.LinkId
	m.fieldMap["loan_term"] = m.LoanTerm
	m.fieldMap["loan_type_description"] = m.LoanTypeDescription
	m.fieldMap["maturity_date"] = m.MaturityDate
	m.fieldMap["next_monthly_payment"] = m.NextMonthlyPayment
	m.fieldMap["next_payment_due_date"] = m.NextPaymentDueDate
	m.fieldMap["original_principal_balance"] = m.OriginalPrincipalBalance
	m.fieldMap["original_property_value"] = m.OriginalPropertyValue
	m.fieldMap["origination_date"] = m.OriginationDate
	m.fieldMap["origination_principal_amount"] = m.OriginationPrincipalAmount
	m.fieldMap["outstanding_principal_balance"] = m.OutstandingPrincipalBalance
	m.fieldMap["past_due_amount"] = m.PastDueAmount
	m.fieldMap["payment_amount"] = m.PaymentAmount
	m.fieldMap["payment_date"] = m.PaymentDate
	m.fieldMap["plaid_account_id"] = m.PlaidAccountId
	m.fieldMap["property_address_city"] = m.PropertyAddressCity
	m.fieldMap["property_address_postal_code"] = m.PropertyAddressPostalCode
	m.fieldMap["property_address_state"] = m.PropertyAddressState
	m.fieldMap["property_address_street"] = m.PropertyAddressStreet
	m.fieldMap["property_country"] = m.PropertyCountry
	m.fieldMap["property_region"] = m.PropertyRegion
	m.fieldMap["status"] = m.Status
	m.fieldMap["ytd_interest_paid"] = m.YtdInterestPaid
	m.fieldMap["ytd_principal_paid"] = m.YtdPrincipalPaid
}

func (m mortgageAccountORM) clone(db *gorm.DB) mortgageAccountORM {
	m.mortgageAccountORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mortgageAccountORM) replaceDB(db *gorm.DB) mortgageAccountORM {
	m.mortgageAccountORMDo.ReplaceDB(db)
	return m
}

type mortgageAccountORMDo struct{ gen.DO }

type IMortgageAccountORMDo interface {
	gen.SubQuery
	Debug() IMortgageAccountORMDo
	WithContext(ctx context.Context) IMortgageAccountORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMortgageAccountORMDo
	WriteDB() IMortgageAccountORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMortgageAccountORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMortgageAccountORMDo
	Not(conds ...gen.Condition) IMortgageAccountORMDo
	Or(conds ...gen.Condition) IMortgageAccountORMDo
	Select(conds ...field.Expr) IMortgageAccountORMDo
	Where(conds ...gen.Condition) IMortgageAccountORMDo
	Order(conds ...field.Expr) IMortgageAccountORMDo
	Distinct(cols ...field.Expr) IMortgageAccountORMDo
	Omit(cols ...field.Expr) IMortgageAccountORMDo
	Join(table schema.Tabler, on ...field.Expr) IMortgageAccountORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMortgageAccountORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMortgageAccountORMDo
	Group(cols ...field.Expr) IMortgageAccountORMDo
	Having(conds ...gen.Condition) IMortgageAccountORMDo
	Limit(limit int) IMortgageAccountORMDo
	Offset(offset int) IMortgageAccountORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMortgageAccountORMDo
	Unscoped() IMortgageAccountORMDo
	Create(values ...*financial_servicev1.MortgageAccountORM) error
	CreateInBatches(values []*financial_servicev1.MortgageAccountORM, batchSize int) error
	Save(values ...*financial_servicev1.MortgageAccountORM) error
	First() (*financial_servicev1.MortgageAccountORM, error)
	Take() (*financial_servicev1.MortgageAccountORM, error)
	Last() (*financial_servicev1.MortgageAccountORM, error)
	Find() ([]*financial_servicev1.MortgageAccountORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.MortgageAccountORM, err error)
	FindInBatches(result *[]*financial_servicev1.MortgageAccountORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.MortgageAccountORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMortgageAccountORMDo
	Assign(attrs ...field.AssignExpr) IMortgageAccountORMDo
	Joins(fields ...field.RelationField) IMortgageAccountORMDo
	Preload(fields ...field.RelationField) IMortgageAccountORMDo
	FirstOrInit() (*financial_servicev1.MortgageAccountORM, error)
	FirstOrCreate() (*financial_servicev1.MortgageAccountORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.MortgageAccountORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMortgageAccountORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.MortgageAccountORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.MortgageAccountORM, err error)
	CreateRecord(item financial_servicev1.MortgageAccountORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.MortgageAccountORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.MortgageAccountORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.MortgageAccountORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.MortgageAccountORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mortgageAccountORMDo) GetRecordByID(id int) (result financial_servicev1.MortgageAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM mortgage_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mortgageAccountORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.MortgageAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM mortgage_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (m mortgageAccountORMDo) CreateRecord(item financial_servicev1.MortgageAccountORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO mortgage_accounts (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mortgageAccountORMDo) UpdateRecordByID(id int, item financial_servicev1.MortgageAccountORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE mortgage_accounts SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mortgageAccountORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM mortgage_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (m mortgageAccountORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.MortgageAccountORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM mortgage_accounts ORDER BY " + m.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (m mortgageAccountORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM mortgage_accounts ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m mortgageAccountORMDo) GetByID(id uint64) (result financial_servicev1.MortgageAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM mortgage_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m mortgageAccountORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.MortgageAccountORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM mortgage_accounts ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m mortgageAccountORMDo) Debug() IMortgageAccountORMDo {
	return m.withDO(m.DO.Debug())
}

func (m mortgageAccountORMDo) WithContext(ctx context.Context) IMortgageAccountORMDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mortgageAccountORMDo) ReadDB() IMortgageAccountORMDo {
	return m.Clauses(dbresolver.Read)
}

func (m mortgageAccountORMDo) WriteDB() IMortgageAccountORMDo {
	return m.Clauses(dbresolver.Write)
}

func (m mortgageAccountORMDo) Session(config *gorm.Session) IMortgageAccountORMDo {
	return m.withDO(m.DO.Session(config))
}

func (m mortgageAccountORMDo) Clauses(conds ...clause.Expression) IMortgageAccountORMDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mortgageAccountORMDo) Returning(value interface{}, columns ...string) IMortgageAccountORMDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mortgageAccountORMDo) Not(conds ...gen.Condition) IMortgageAccountORMDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mortgageAccountORMDo) Or(conds ...gen.Condition) IMortgageAccountORMDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mortgageAccountORMDo) Select(conds ...field.Expr) IMortgageAccountORMDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mortgageAccountORMDo) Where(conds ...gen.Condition) IMortgageAccountORMDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mortgageAccountORMDo) Order(conds ...field.Expr) IMortgageAccountORMDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mortgageAccountORMDo) Distinct(cols ...field.Expr) IMortgageAccountORMDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mortgageAccountORMDo) Omit(cols ...field.Expr) IMortgageAccountORMDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mortgageAccountORMDo) Join(table schema.Tabler, on ...field.Expr) IMortgageAccountORMDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mortgageAccountORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMortgageAccountORMDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mortgageAccountORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IMortgageAccountORMDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mortgageAccountORMDo) Group(cols ...field.Expr) IMortgageAccountORMDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mortgageAccountORMDo) Having(conds ...gen.Condition) IMortgageAccountORMDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mortgageAccountORMDo) Limit(limit int) IMortgageAccountORMDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mortgageAccountORMDo) Offset(offset int) IMortgageAccountORMDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mortgageAccountORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMortgageAccountORMDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mortgageAccountORMDo) Unscoped() IMortgageAccountORMDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mortgageAccountORMDo) Create(values ...*financial_servicev1.MortgageAccountORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mortgageAccountORMDo) CreateInBatches(values []*financial_servicev1.MortgageAccountORM, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mortgageAccountORMDo) Save(values ...*financial_servicev1.MortgageAccountORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mortgageAccountORMDo) First() (*financial_servicev1.MortgageAccountORM, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.MortgageAccountORM), nil
	}
}

func (m mortgageAccountORMDo) Take() (*financial_servicev1.MortgageAccountORM, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.MortgageAccountORM), nil
	}
}

func (m mortgageAccountORMDo) Last() (*financial_servicev1.MortgageAccountORM, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.MortgageAccountORM), nil
	}
}

func (m mortgageAccountORMDo) Find() ([]*financial_servicev1.MortgageAccountORM, error) {
	result, err := m.DO.Find()
	return result.([]*financial_servicev1.MortgageAccountORM), err
}

func (m mortgageAccountORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.MortgageAccountORM, err error) {
	buf := make([]*financial_servicev1.MortgageAccountORM, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mortgageAccountORMDo) FindInBatches(result *[]*financial_servicev1.MortgageAccountORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mortgageAccountORMDo) Attrs(attrs ...field.AssignExpr) IMortgageAccountORMDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mortgageAccountORMDo) Assign(attrs ...field.AssignExpr) IMortgageAccountORMDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mortgageAccountORMDo) Joins(fields ...field.RelationField) IMortgageAccountORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mortgageAccountORMDo) Preload(fields ...field.RelationField) IMortgageAccountORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mortgageAccountORMDo) FirstOrInit() (*financial_servicev1.MortgageAccountORM, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.MortgageAccountORM), nil
	}
}

func (m mortgageAccountORMDo) FirstOrCreate() (*financial_servicev1.MortgageAccountORM, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.MortgageAccountORM), nil
	}
}

func (m mortgageAccountORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.MortgageAccountORM, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mortgageAccountORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mortgageAccountORMDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mortgageAccountORMDo) Delete(models ...*financial_servicev1.MortgageAccountORM) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mortgageAccountORMDo) withDO(do gen.Dao) *mortgageAccountORMDo {
	m.DO = *do.(*gen.DO)
	return m
}
