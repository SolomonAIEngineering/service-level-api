// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newTokenORM(db *gorm.DB, opts ...gen.DOOption) tokenORM {
	_tokenORM := tokenORM{}

	_tokenORM.tokenORMDo.UseDB(db, opts...)
	_tokenORM.tokenORMDo.UseModel(&financial_servicev1.TokenORM{})

	tableName := _tokenORM.tokenORMDo.TableName()
	_tokenORM.ALL = field.NewAsterisk(tableName)
	_tokenORM.AccessToken = field.NewString(tableName, "access_token")
	_tokenORM.Id = field.NewUint64(tableName, "id")
	_tokenORM.ItemId = field.NewString(tableName, "item_id")
	_tokenORM.KeyId = field.NewString(tableName, "key_id")
	_tokenORM.LastMergeCreatedAt = field.NewTime(tableName, "last_merge_created_at")
	_tokenORM.LinkId = field.NewUint64(tableName, "link_id")
	_tokenORM.MergeEndUserOriginId = field.NewString(tableName, "merge_end_user_origin_id")
	_tokenORM.MergeIntegrationSlug = field.NewString(tableName, "merge_integration_slug")
	_tokenORM.MergeLinkId = field.NewUint64(tableName, "merge_link_id")
	_tokenORM.Version = field.NewString(tableName, "version")

	_tokenORM.fillFieldMap()

	return _tokenORM
}

type tokenORM struct {
	tokenORMDo

	ALL                  field.Asterisk
	AccessToken          field.String
	Id                   field.Uint64
	ItemId               field.String
	KeyId                field.String
	LastMergeCreatedAt   field.Time
	LinkId               field.Uint64
	MergeEndUserOriginId field.String
	MergeIntegrationSlug field.String
	MergeLinkId          field.Uint64
	Version              field.String

	fieldMap map[string]field.Expr
}

func (t tokenORM) Table(newTableName string) *tokenORM {
	t.tokenORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tokenORM) As(alias string) *tokenORM {
	t.tokenORMDo.DO = *(t.tokenORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tokenORM) updateTableName(table string) *tokenORM {
	t.ALL = field.NewAsterisk(table)
	t.AccessToken = field.NewString(table, "access_token")
	t.Id = field.NewUint64(table, "id")
	t.ItemId = field.NewString(table, "item_id")
	t.KeyId = field.NewString(table, "key_id")
	t.LastMergeCreatedAt = field.NewTime(table, "last_merge_created_at")
	t.LinkId = field.NewUint64(table, "link_id")
	t.MergeEndUserOriginId = field.NewString(table, "merge_end_user_origin_id")
	t.MergeIntegrationSlug = field.NewString(table, "merge_integration_slug")
	t.MergeLinkId = field.NewUint64(table, "merge_link_id")
	t.Version = field.NewString(table, "version")

	t.fillFieldMap()

	return t
}

func (t *tokenORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tokenORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["access_token"] = t.AccessToken
	t.fieldMap["id"] = t.Id
	t.fieldMap["item_id"] = t.ItemId
	t.fieldMap["key_id"] = t.KeyId
	t.fieldMap["last_merge_created_at"] = t.LastMergeCreatedAt
	t.fieldMap["link_id"] = t.LinkId
	t.fieldMap["merge_end_user_origin_id"] = t.MergeEndUserOriginId
	t.fieldMap["merge_integration_slug"] = t.MergeIntegrationSlug
	t.fieldMap["merge_link_id"] = t.MergeLinkId
	t.fieldMap["version"] = t.Version
}

func (t tokenORM) clone(db *gorm.DB) tokenORM {
	t.tokenORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tokenORM) replaceDB(db *gorm.DB) tokenORM {
	t.tokenORMDo.ReplaceDB(db)
	return t
}

type tokenORMDo struct{ gen.DO }

type ITokenORMDo interface {
	gen.SubQuery
	Debug() ITokenORMDo
	WithContext(ctx context.Context) ITokenORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITokenORMDo
	WriteDB() ITokenORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITokenORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITokenORMDo
	Not(conds ...gen.Condition) ITokenORMDo
	Or(conds ...gen.Condition) ITokenORMDo
	Select(conds ...field.Expr) ITokenORMDo
	Where(conds ...gen.Condition) ITokenORMDo
	Order(conds ...field.Expr) ITokenORMDo
	Distinct(cols ...field.Expr) ITokenORMDo
	Omit(cols ...field.Expr) ITokenORMDo
	Join(table schema.Tabler, on ...field.Expr) ITokenORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITokenORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITokenORMDo
	Group(cols ...field.Expr) ITokenORMDo
	Having(conds ...gen.Condition) ITokenORMDo
	Limit(limit int) ITokenORMDo
	Offset(offset int) ITokenORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITokenORMDo
	Unscoped() ITokenORMDo
	Create(values ...*financial_servicev1.TokenORM) error
	CreateInBatches(values []*financial_servicev1.TokenORM, batchSize int) error
	Save(values ...*financial_servicev1.TokenORM) error
	First() (*financial_servicev1.TokenORM, error)
	Take() (*financial_servicev1.TokenORM, error)
	Last() (*financial_servicev1.TokenORM, error)
	Find() ([]*financial_servicev1.TokenORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.TokenORM, err error)
	FindInBatches(result *[]*financial_servicev1.TokenORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.TokenORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITokenORMDo
	Assign(attrs ...field.AssignExpr) ITokenORMDo
	Joins(fields ...field.RelationField) ITokenORMDo
	Preload(fields ...field.RelationField) ITokenORMDo
	FirstOrInit() (*financial_servicev1.TokenORM, error)
	FirstOrCreate() (*financial_servicev1.TokenORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.TokenORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITokenORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.TokenORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.TokenORM, err error)
	CreateRecord(item financial_servicev1.TokenORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.TokenORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.TokenORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.TokenORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.TokenORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tokenORMDo) GetRecordByID(id int) (result financial_servicev1.TokenORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tokens ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t tokenORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.TokenORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tokens ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (t tokenORMDo) CreateRecord(item financial_servicev1.TokenORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO tokens (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tokenORMDo) UpdateRecordByID(id int, item financial_servicev1.TokenORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE tokens SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tokenORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM tokens ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (t tokenORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.TokenORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tokens ORDER BY " + t.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t tokenORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM tokens ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t tokenORMDo) GetByID(id uint64) (result financial_servicev1.TokenORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tokens ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t tokenORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.TokenORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM tokens ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t tokenORMDo) Debug() ITokenORMDo {
	return t.withDO(t.DO.Debug())
}

func (t tokenORMDo) WithContext(ctx context.Context) ITokenORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tokenORMDo) ReadDB() ITokenORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t tokenORMDo) WriteDB() ITokenORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t tokenORMDo) Session(config *gorm.Session) ITokenORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t tokenORMDo) Clauses(conds ...clause.Expression) ITokenORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tokenORMDo) Returning(value interface{}, columns ...string) ITokenORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tokenORMDo) Not(conds ...gen.Condition) ITokenORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tokenORMDo) Or(conds ...gen.Condition) ITokenORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tokenORMDo) Select(conds ...field.Expr) ITokenORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tokenORMDo) Where(conds ...gen.Condition) ITokenORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tokenORMDo) Order(conds ...field.Expr) ITokenORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tokenORMDo) Distinct(cols ...field.Expr) ITokenORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tokenORMDo) Omit(cols ...field.Expr) ITokenORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tokenORMDo) Join(table schema.Tabler, on ...field.Expr) ITokenORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tokenORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITokenORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tokenORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITokenORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tokenORMDo) Group(cols ...field.Expr) ITokenORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tokenORMDo) Having(conds ...gen.Condition) ITokenORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tokenORMDo) Limit(limit int) ITokenORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tokenORMDo) Offset(offset int) ITokenORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tokenORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITokenORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tokenORMDo) Unscoped() ITokenORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tokenORMDo) Create(values ...*financial_servicev1.TokenORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tokenORMDo) CreateInBatches(values []*financial_servicev1.TokenORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tokenORMDo) Save(values ...*financial_servicev1.TokenORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tokenORMDo) First() (*financial_servicev1.TokenORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TokenORM), nil
	}
}

func (t tokenORMDo) Take() (*financial_servicev1.TokenORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TokenORM), nil
	}
}

func (t tokenORMDo) Last() (*financial_servicev1.TokenORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TokenORM), nil
	}
}

func (t tokenORMDo) Find() ([]*financial_servicev1.TokenORM, error) {
	result, err := t.DO.Find()
	return result.([]*financial_servicev1.TokenORM), err
}

func (t tokenORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.TokenORM, err error) {
	buf := make([]*financial_servicev1.TokenORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tokenORMDo) FindInBatches(result *[]*financial_servicev1.TokenORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tokenORMDo) Attrs(attrs ...field.AssignExpr) ITokenORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tokenORMDo) Assign(attrs ...field.AssignExpr) ITokenORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tokenORMDo) Joins(fields ...field.RelationField) ITokenORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tokenORMDo) Preload(fields ...field.RelationField) ITokenORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tokenORMDo) FirstOrInit() (*financial_servicev1.TokenORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TokenORM), nil
	}
}

func (t tokenORMDo) FirstOrCreate() (*financial_servicev1.TokenORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TokenORM), nil
	}
}

func (t tokenORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.TokenORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tokenORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tokenORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tokenORMDo) Delete(models ...*financial_servicev1.TokenORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tokenORMDo) withDO(do gen.Dao) *tokenORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
