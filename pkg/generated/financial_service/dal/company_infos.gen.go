// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newCompanyInfoORM(db *gorm.DB, opts ...gen.DOOption) companyInfoORM {
	_companyInfoORM := companyInfoORM{}

	_companyInfoORM.companyInfoORMDo.UseDB(db, opts...)
	_companyInfoORM.companyInfoORMDo.UseModel(&financial_servicev1.CompanyInfoORM{})

	tableName := _companyInfoORM.companyInfoORMDo.TableName()
	_companyInfoORM.ALL = field.NewAsterisk(tableName)
	_companyInfoORM.Currency = field.NewString(tableName, "currency")
	_companyInfoORM.FiscalYearEndDay = field.NewInt32(tableName, "fiscal_year_end_day")
	_companyInfoORM.FiscalYearEndMonth = field.NewInt32(tableName, "fiscal_year_end_month")
	_companyInfoORM.Id = field.NewUint64(tableName, "id")
	_companyInfoORM.LegalName = field.NewString(tableName, "legal_name")
	_companyInfoORM.LinkedAccountingAccountId = field.NewUint64(tableName, "linked_accounting_account_id")
	_companyInfoORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_companyInfoORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_companyInfoORM.Name = field.NewString(tableName, "name")
	_companyInfoORM.PhoneNumbers = field.NewField(tableName, "phone_numbers")
	_companyInfoORM.RemoteCreatedAt = field.NewTime(tableName, "remote_created_at")
	_companyInfoORM.RemoteId = field.NewString(tableName, "remote_id")
	_companyInfoORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_companyInfoORM.TaxNumber = field.NewString(tableName, "tax_number")
	_companyInfoORM.Urls = field.NewField(tableName, "urls")
	_companyInfoORM.Addresses = companyInfoORMHasManyAddresses{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Addresses", "financial_servicev1.AddressORM"),
	}

	_companyInfoORM.fillFieldMap()

	return _companyInfoORM
}

type companyInfoORM struct {
	companyInfoORMDo

	ALL                       field.Asterisk
	Currency                  field.String
	FiscalYearEndDay          field.Int32
	FiscalYearEndMonth        field.Int32
	Id                        field.Uint64
	LegalName                 field.String
	LinkedAccountingAccountId field.Uint64
	MergeAccountId            field.String
	ModifiedAt                field.Time
	Name                      field.String
	PhoneNumbers              field.Field
	RemoteCreatedAt           field.Time
	RemoteId                  field.String
	RemoteWasDeleted          field.Bool
	TaxNumber                 field.String
	Urls                      field.Field
	Addresses                 companyInfoORMHasManyAddresses

	fieldMap map[string]field.Expr
}

func (c companyInfoORM) Table(newTableName string) *companyInfoORM {
	c.companyInfoORMDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c companyInfoORM) As(alias string) *companyInfoORM {
	c.companyInfoORMDo.DO = *(c.companyInfoORMDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *companyInfoORM) updateTableName(table string) *companyInfoORM {
	c.ALL = field.NewAsterisk(table)
	c.Currency = field.NewString(table, "currency")
	c.FiscalYearEndDay = field.NewInt32(table, "fiscal_year_end_day")
	c.FiscalYearEndMonth = field.NewInt32(table, "fiscal_year_end_month")
	c.Id = field.NewUint64(table, "id")
	c.LegalName = field.NewString(table, "legal_name")
	c.LinkedAccountingAccountId = field.NewUint64(table, "linked_accounting_account_id")
	c.MergeAccountId = field.NewString(table, "merge_account_id")
	c.ModifiedAt = field.NewTime(table, "modified_at")
	c.Name = field.NewString(table, "name")
	c.PhoneNumbers = field.NewField(table, "phone_numbers")
	c.RemoteCreatedAt = field.NewTime(table, "remote_created_at")
	c.RemoteId = field.NewString(table, "remote_id")
	c.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	c.TaxNumber = field.NewString(table, "tax_number")
	c.Urls = field.NewField(table, "urls")

	c.fillFieldMap()

	return c
}

func (c *companyInfoORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *companyInfoORM) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 16)
	c.fieldMap["currency"] = c.Currency
	c.fieldMap["fiscal_year_end_day"] = c.FiscalYearEndDay
	c.fieldMap["fiscal_year_end_month"] = c.FiscalYearEndMonth
	c.fieldMap["id"] = c.Id
	c.fieldMap["legal_name"] = c.LegalName
	c.fieldMap["linked_accounting_account_id"] = c.LinkedAccountingAccountId
	c.fieldMap["merge_account_id"] = c.MergeAccountId
	c.fieldMap["modified_at"] = c.ModifiedAt
	c.fieldMap["name"] = c.Name
	c.fieldMap["phone_numbers"] = c.PhoneNumbers
	c.fieldMap["remote_created_at"] = c.RemoteCreatedAt
	c.fieldMap["remote_id"] = c.RemoteId
	c.fieldMap["remote_was_deleted"] = c.RemoteWasDeleted
	c.fieldMap["tax_number"] = c.TaxNumber
	c.fieldMap["urls"] = c.Urls

}

func (c companyInfoORM) clone(db *gorm.DB) companyInfoORM {
	c.companyInfoORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c companyInfoORM) replaceDB(db *gorm.DB) companyInfoORM {
	c.companyInfoORMDo.ReplaceDB(db)
	return c
}

type companyInfoORMHasManyAddresses struct {
	db *gorm.DB

	field.RelationField
}

func (a companyInfoORMHasManyAddresses) Where(conds ...field.Expr) *companyInfoORMHasManyAddresses {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a companyInfoORMHasManyAddresses) WithContext(ctx context.Context) *companyInfoORMHasManyAddresses {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a companyInfoORMHasManyAddresses) Session(session *gorm.Session) *companyInfoORMHasManyAddresses {
	a.db = a.db.Session(session)
	return &a
}

func (a companyInfoORMHasManyAddresses) Model(m *financial_servicev1.CompanyInfoORM) *companyInfoORMHasManyAddressesTx {
	return &companyInfoORMHasManyAddressesTx{a.db.Model(m).Association(a.Name())}
}

type companyInfoORMHasManyAddressesTx struct{ tx *gorm.Association }

func (a companyInfoORMHasManyAddressesTx) Find() (result []*financial_servicev1.AddressORM, err error) {
	return result, a.tx.Find(&result)
}

func (a companyInfoORMHasManyAddressesTx) Append(values ...*financial_servicev1.AddressORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a companyInfoORMHasManyAddressesTx) Replace(values ...*financial_servicev1.AddressORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a companyInfoORMHasManyAddressesTx) Delete(values ...*financial_servicev1.AddressORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a companyInfoORMHasManyAddressesTx) Clear() error {
	return a.tx.Clear()
}

func (a companyInfoORMHasManyAddressesTx) Count() int64 {
	return a.tx.Count()
}

type companyInfoORMDo struct{ gen.DO }

type ICompanyInfoORMDo interface {
	gen.SubQuery
	Debug() ICompanyInfoORMDo
	WithContext(ctx context.Context) ICompanyInfoORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICompanyInfoORMDo
	WriteDB() ICompanyInfoORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICompanyInfoORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICompanyInfoORMDo
	Not(conds ...gen.Condition) ICompanyInfoORMDo
	Or(conds ...gen.Condition) ICompanyInfoORMDo
	Select(conds ...field.Expr) ICompanyInfoORMDo
	Where(conds ...gen.Condition) ICompanyInfoORMDo
	Order(conds ...field.Expr) ICompanyInfoORMDo
	Distinct(cols ...field.Expr) ICompanyInfoORMDo
	Omit(cols ...field.Expr) ICompanyInfoORMDo
	Join(table schema.Tabler, on ...field.Expr) ICompanyInfoORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICompanyInfoORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICompanyInfoORMDo
	Group(cols ...field.Expr) ICompanyInfoORMDo
	Having(conds ...gen.Condition) ICompanyInfoORMDo
	Limit(limit int) ICompanyInfoORMDo
	Offset(offset int) ICompanyInfoORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICompanyInfoORMDo
	Unscoped() ICompanyInfoORMDo
	Create(values ...*financial_servicev1.CompanyInfoORM) error
	CreateInBatches(values []*financial_servicev1.CompanyInfoORM, batchSize int) error
	Save(values ...*financial_servicev1.CompanyInfoORM) error
	First() (*financial_servicev1.CompanyInfoORM, error)
	Take() (*financial_servicev1.CompanyInfoORM, error)
	Last() (*financial_servicev1.CompanyInfoORM, error)
	Find() ([]*financial_servicev1.CompanyInfoORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.CompanyInfoORM, err error)
	FindInBatches(result *[]*financial_servicev1.CompanyInfoORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.CompanyInfoORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICompanyInfoORMDo
	Assign(attrs ...field.AssignExpr) ICompanyInfoORMDo
	Joins(fields ...field.RelationField) ICompanyInfoORMDo
	Preload(fields ...field.RelationField) ICompanyInfoORMDo
	FirstOrInit() (*financial_servicev1.CompanyInfoORM, error)
	FirstOrCreate() (*financial_servicev1.CompanyInfoORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.CompanyInfoORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICompanyInfoORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.CompanyInfoORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.CompanyInfoORM, err error)
	CreateRecord(item financial_servicev1.CompanyInfoORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.CompanyInfoORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.CompanyInfoORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c companyInfoORMDo) GetRecordByID(id int) (result financial_servicev1.CompanyInfoORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM company_infos ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (c companyInfoORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.CompanyInfoORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM company_infos ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (c companyInfoORMDo) CreateRecord(item financial_servicev1.CompanyInfoORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO company_infos (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (c companyInfoORMDo) UpdateRecordByID(id int, item financial_servicev1.CompanyInfoORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE company_infos SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (c companyInfoORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM company_infos ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (c companyInfoORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.CompanyInfoORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM company_infos ORDER BY " + c.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (c companyInfoORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM company_infos ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c companyInfoORMDo) Debug() ICompanyInfoORMDo {
	return c.withDO(c.DO.Debug())
}

func (c companyInfoORMDo) WithContext(ctx context.Context) ICompanyInfoORMDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c companyInfoORMDo) ReadDB() ICompanyInfoORMDo {
	return c.Clauses(dbresolver.Read)
}

func (c companyInfoORMDo) WriteDB() ICompanyInfoORMDo {
	return c.Clauses(dbresolver.Write)
}

func (c companyInfoORMDo) Session(config *gorm.Session) ICompanyInfoORMDo {
	return c.withDO(c.DO.Session(config))
}

func (c companyInfoORMDo) Clauses(conds ...clause.Expression) ICompanyInfoORMDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c companyInfoORMDo) Returning(value interface{}, columns ...string) ICompanyInfoORMDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c companyInfoORMDo) Not(conds ...gen.Condition) ICompanyInfoORMDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c companyInfoORMDo) Or(conds ...gen.Condition) ICompanyInfoORMDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c companyInfoORMDo) Select(conds ...field.Expr) ICompanyInfoORMDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c companyInfoORMDo) Where(conds ...gen.Condition) ICompanyInfoORMDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c companyInfoORMDo) Order(conds ...field.Expr) ICompanyInfoORMDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c companyInfoORMDo) Distinct(cols ...field.Expr) ICompanyInfoORMDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c companyInfoORMDo) Omit(cols ...field.Expr) ICompanyInfoORMDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c companyInfoORMDo) Join(table schema.Tabler, on ...field.Expr) ICompanyInfoORMDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c companyInfoORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICompanyInfoORMDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c companyInfoORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ICompanyInfoORMDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c companyInfoORMDo) Group(cols ...field.Expr) ICompanyInfoORMDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c companyInfoORMDo) Having(conds ...gen.Condition) ICompanyInfoORMDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c companyInfoORMDo) Limit(limit int) ICompanyInfoORMDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c companyInfoORMDo) Offset(offset int) ICompanyInfoORMDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c companyInfoORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICompanyInfoORMDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c companyInfoORMDo) Unscoped() ICompanyInfoORMDo {
	return c.withDO(c.DO.Unscoped())
}

func (c companyInfoORMDo) Create(values ...*financial_servicev1.CompanyInfoORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c companyInfoORMDo) CreateInBatches(values []*financial_servicev1.CompanyInfoORM, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c companyInfoORMDo) Save(values ...*financial_servicev1.CompanyInfoORM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c companyInfoORMDo) First() (*financial_servicev1.CompanyInfoORM, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.CompanyInfoORM), nil
	}
}

func (c companyInfoORMDo) Take() (*financial_servicev1.CompanyInfoORM, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.CompanyInfoORM), nil
	}
}

func (c companyInfoORMDo) Last() (*financial_servicev1.CompanyInfoORM, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.CompanyInfoORM), nil
	}
}

func (c companyInfoORMDo) Find() ([]*financial_servicev1.CompanyInfoORM, error) {
	result, err := c.DO.Find()
	return result.([]*financial_servicev1.CompanyInfoORM), err
}

func (c companyInfoORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.CompanyInfoORM, err error) {
	buf := make([]*financial_servicev1.CompanyInfoORM, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c companyInfoORMDo) FindInBatches(result *[]*financial_servicev1.CompanyInfoORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c companyInfoORMDo) Attrs(attrs ...field.AssignExpr) ICompanyInfoORMDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c companyInfoORMDo) Assign(attrs ...field.AssignExpr) ICompanyInfoORMDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c companyInfoORMDo) Joins(fields ...field.RelationField) ICompanyInfoORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c companyInfoORMDo) Preload(fields ...field.RelationField) ICompanyInfoORMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c companyInfoORMDo) FirstOrInit() (*financial_servicev1.CompanyInfoORM, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.CompanyInfoORM), nil
	}
}

func (c companyInfoORMDo) FirstOrCreate() (*financial_servicev1.CompanyInfoORM, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.CompanyInfoORM), nil
	}
}

func (c companyInfoORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.CompanyInfoORM, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c companyInfoORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c companyInfoORMDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c companyInfoORMDo) Delete(models ...*financial_servicev1.CompanyInfoORM) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *companyInfoORMDo) withDO(do gen.Dao) *companyInfoORMDo {
	c.DO = *do.(*gen.DO)
	return c
}
