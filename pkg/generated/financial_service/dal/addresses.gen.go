// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newAddressORM(db *gorm.DB, opts ...gen.DOOption) addressORM {
	_addressORM := addressORM{}

	_addressORM.addressORMDo.UseDB(db, opts...)
	_addressORM.addressORMDo.UseModel(&financial_servicev1.AddressORM{})

	tableName := _addressORM.addressORMDo.TableName()
	_addressORM.ALL = field.NewAsterisk(tableName)
	_addressORM.City = field.NewString(tableName, "city")
	_addressORM.CompanyInfoId = field.NewUint64(tableName, "company_info_id")
	_addressORM.Country = field.NewString(tableName, "country")
	_addressORM.CountrySubdivision = field.NewString(tableName, "country_subdivision")
	_addressORM.Id = field.NewUint64(tableName, "id")
	_addressORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_addressORM.PurchaseOrderId = field.NewUint64(tableName, "purchase_order_id")
	_addressORM.State = field.NewString(tableName, "state")
	_addressORM.Street_1 = field.NewString(tableName, "street_1")
	_addressORM.Street_2 = field.NewString(tableName, "street_2")
	_addressORM.Type = field.NewString(tableName, "type")
	_addressORM.ZipCode = field.NewString(tableName, "zip_code")

	_addressORM.fillFieldMap()

	return _addressORM
}

type addressORM struct {
	addressORMDo

	ALL                field.Asterisk
	City               field.String
	CompanyInfoId      field.Uint64
	Country            field.String
	CountrySubdivision field.String
	Id                 field.Uint64
	ModifiedAt         field.Time
	PurchaseOrderId    field.Uint64
	State              field.String
	Street_1           field.String
	Street_2           field.String
	Type               field.String
	ZipCode            field.String

	fieldMap map[string]field.Expr
}

func (a addressORM) Table(newTableName string) *addressORM {
	a.addressORMDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a addressORM) As(alias string) *addressORM {
	a.addressORMDo.DO = *(a.addressORMDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *addressORM) updateTableName(table string) *addressORM {
	a.ALL = field.NewAsterisk(table)
	a.City = field.NewString(table, "city")
	a.CompanyInfoId = field.NewUint64(table, "company_info_id")
	a.Country = field.NewString(table, "country")
	a.CountrySubdivision = field.NewString(table, "country_subdivision")
	a.Id = field.NewUint64(table, "id")
	a.ModifiedAt = field.NewTime(table, "modified_at")
	a.PurchaseOrderId = field.NewUint64(table, "purchase_order_id")
	a.State = field.NewString(table, "state")
	a.Street_1 = field.NewString(table, "street_1")
	a.Street_2 = field.NewString(table, "street_2")
	a.Type = field.NewString(table, "type")
	a.ZipCode = field.NewString(table, "zip_code")

	a.fillFieldMap()

	return a
}

func (a *addressORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *addressORM) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["city"] = a.City
	a.fieldMap["company_info_id"] = a.CompanyInfoId
	a.fieldMap["country"] = a.Country
	a.fieldMap["country_subdivision"] = a.CountrySubdivision
	a.fieldMap["id"] = a.Id
	a.fieldMap["modified_at"] = a.ModifiedAt
	a.fieldMap["purchase_order_id"] = a.PurchaseOrderId
	a.fieldMap["state"] = a.State
	a.fieldMap["street_1"] = a.Street_1
	a.fieldMap["street_2"] = a.Street_2
	a.fieldMap["type"] = a.Type
	a.fieldMap["zip_code"] = a.ZipCode
}

func (a addressORM) clone(db *gorm.DB) addressORM {
	a.addressORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a addressORM) replaceDB(db *gorm.DB) addressORM {
	a.addressORMDo.ReplaceDB(db)
	return a
}

type addressORMDo struct{ gen.DO }

type IAddressORMDo interface {
	gen.SubQuery
	Debug() IAddressORMDo
	WithContext(ctx context.Context) IAddressORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAddressORMDo
	WriteDB() IAddressORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAddressORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAddressORMDo
	Not(conds ...gen.Condition) IAddressORMDo
	Or(conds ...gen.Condition) IAddressORMDo
	Select(conds ...field.Expr) IAddressORMDo
	Where(conds ...gen.Condition) IAddressORMDo
	Order(conds ...field.Expr) IAddressORMDo
	Distinct(cols ...field.Expr) IAddressORMDo
	Omit(cols ...field.Expr) IAddressORMDo
	Join(table schema.Tabler, on ...field.Expr) IAddressORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAddressORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAddressORMDo
	Group(cols ...field.Expr) IAddressORMDo
	Having(conds ...gen.Condition) IAddressORMDo
	Limit(limit int) IAddressORMDo
	Offset(offset int) IAddressORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAddressORMDo
	Unscoped() IAddressORMDo
	Create(values ...*financial_servicev1.AddressORM) error
	CreateInBatches(values []*financial_servicev1.AddressORM, batchSize int) error
	Save(values ...*financial_servicev1.AddressORM) error
	First() (*financial_servicev1.AddressORM, error)
	Take() (*financial_servicev1.AddressORM, error)
	Last() (*financial_servicev1.AddressORM, error)
	Find() ([]*financial_servicev1.AddressORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.AddressORM, err error)
	FindInBatches(result *[]*financial_servicev1.AddressORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.AddressORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAddressORMDo
	Assign(attrs ...field.AssignExpr) IAddressORMDo
	Joins(fields ...field.RelationField) IAddressORMDo
	Preload(fields ...field.RelationField) IAddressORMDo
	FirstOrInit() (*financial_servicev1.AddressORM, error)
	FirstOrCreate() (*financial_servicev1.AddressORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.AddressORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAddressORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.AddressORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.AddressORM, err error)
	CreateRecord(item financial_servicev1.AddressORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.AddressORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.AddressORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.AddressORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.AddressORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a addressORMDo) GetRecordByID(id int) (result financial_servicev1.AddressORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM addresses ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a addressORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.AddressORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM addresses ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (a addressORMDo) CreateRecord(item financial_servicev1.AddressORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO addresses (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (a addressORMDo) UpdateRecordByID(id int, item financial_servicev1.AddressORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE addresses SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a addressORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM addresses ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (a addressORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.AddressORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM addresses ORDER BY " + a.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (a addressORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM addresses ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a addressORMDo) GetByID(id uint64) (result financial_servicev1.AddressORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM addresses ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a addressORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.AddressORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM addresses ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a addressORMDo) Debug() IAddressORMDo {
	return a.withDO(a.DO.Debug())
}

func (a addressORMDo) WithContext(ctx context.Context) IAddressORMDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a addressORMDo) ReadDB() IAddressORMDo {
	return a.Clauses(dbresolver.Read)
}

func (a addressORMDo) WriteDB() IAddressORMDo {
	return a.Clauses(dbresolver.Write)
}

func (a addressORMDo) Session(config *gorm.Session) IAddressORMDo {
	return a.withDO(a.DO.Session(config))
}

func (a addressORMDo) Clauses(conds ...clause.Expression) IAddressORMDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a addressORMDo) Returning(value interface{}, columns ...string) IAddressORMDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a addressORMDo) Not(conds ...gen.Condition) IAddressORMDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a addressORMDo) Or(conds ...gen.Condition) IAddressORMDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a addressORMDo) Select(conds ...field.Expr) IAddressORMDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a addressORMDo) Where(conds ...gen.Condition) IAddressORMDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a addressORMDo) Order(conds ...field.Expr) IAddressORMDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a addressORMDo) Distinct(cols ...field.Expr) IAddressORMDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a addressORMDo) Omit(cols ...field.Expr) IAddressORMDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a addressORMDo) Join(table schema.Tabler, on ...field.Expr) IAddressORMDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a addressORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAddressORMDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a addressORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IAddressORMDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a addressORMDo) Group(cols ...field.Expr) IAddressORMDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a addressORMDo) Having(conds ...gen.Condition) IAddressORMDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a addressORMDo) Limit(limit int) IAddressORMDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a addressORMDo) Offset(offset int) IAddressORMDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a addressORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAddressORMDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a addressORMDo) Unscoped() IAddressORMDo {
	return a.withDO(a.DO.Unscoped())
}

func (a addressORMDo) Create(values ...*financial_servicev1.AddressORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a addressORMDo) CreateInBatches(values []*financial_servicev1.AddressORM, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a addressORMDo) Save(values ...*financial_servicev1.AddressORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a addressORMDo) First() (*financial_servicev1.AddressORM, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.AddressORM), nil
	}
}

func (a addressORMDo) Take() (*financial_servicev1.AddressORM, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.AddressORM), nil
	}
}

func (a addressORMDo) Last() (*financial_servicev1.AddressORM, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.AddressORM), nil
	}
}

func (a addressORMDo) Find() ([]*financial_servicev1.AddressORM, error) {
	result, err := a.DO.Find()
	return result.([]*financial_servicev1.AddressORM), err
}

func (a addressORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.AddressORM, err error) {
	buf := make([]*financial_servicev1.AddressORM, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a addressORMDo) FindInBatches(result *[]*financial_servicev1.AddressORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a addressORMDo) Attrs(attrs ...field.AssignExpr) IAddressORMDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a addressORMDo) Assign(attrs ...field.AssignExpr) IAddressORMDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a addressORMDo) Joins(fields ...field.RelationField) IAddressORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a addressORMDo) Preload(fields ...field.RelationField) IAddressORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a addressORMDo) FirstOrInit() (*financial_servicev1.AddressORM, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.AddressORM), nil
	}
}

func (a addressORMDo) FirstOrCreate() (*financial_servicev1.AddressORM, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.AddressORM), nil
	}
}

func (a addressORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.AddressORM, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a addressORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a addressORMDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a addressORMDo) Delete(models ...*financial_servicev1.AddressORM) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *addressORMDo) withDO(do gen.Dao) *addressORMDo {
	a.DO = *do.(*gen.DO)
	return a
}
