// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newLinkORM(db *gorm.DB, opts ...gen.DOOption) linkORM {
	_linkORM := linkORM{}

	_linkORM.linkORMDo.UseDB(db, opts...)
	_linkORM.linkORMDo.UseModel(&financial_servicev1.LinkORM{})

	tableName := _linkORM.linkORMDo.TableName()
	_linkORM.ALL = field.NewAsterisk(tableName)
	_linkORM.CustomInstitutionName = field.NewString(tableName, "custom_institution_name")
	_linkORM.Description = field.NewString(tableName, "description")
	_linkORM.ErrorCode = field.NewString(tableName, "error_code")
	_linkORM.ExpirationDate = field.NewString(tableName, "expiration_date")
	_linkORM.FinancialUserProfileId = field.NewUint64(tableName, "financial_user_profile_id")
	_linkORM.Id = field.NewUint64(tableName, "id")
	_linkORM.InstitutionName = field.NewString(tableName, "institution_name")
	_linkORM.LastManualSync = field.NewString(tableName, "last_manual_sync")
	_linkORM.LastSuccessfulUpdate = field.NewString(tableName, "last_successful_update")
	_linkORM.LinkStatus = field.NewString(tableName, "link_status")
	_linkORM.LinkType = field.NewString(tableName, "link_type")
	_linkORM.NewAccountsAvailable = field.NewBool(tableName, "new_accounts_available")
	_linkORM.PlaidInstitutionId = field.NewString(tableName, "plaid_institution_id")
	_linkORM.PlaidNewAccountsAvailable = field.NewBool(tableName, "plaid_new_accounts_available")
	_linkORM.ShouldBeUpdated = field.NewBool(tableName, "should_be_updated")
	_linkORM.UpdatedAt = field.NewString(tableName, "updated_at")
	_linkORM.PlaidLink = linkORMHasOnePlaidLink{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PlaidLink", "financial_servicev1.PlaidLinkORM"),
	}

	_linkORM.PlaidSync = linkORMHasOnePlaidSync{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PlaidSync", "financial_servicev1.PlaidSyncORM"),
	}

	_linkORM.Token = linkORMHasOneToken{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Token", "financial_servicev1.TokenORM"),
	}

	_linkORM.BankAccounts = linkORMHasManyBankAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BankAccounts", "financial_servicev1.BankAccountORM"),
		Pockets: struct {
			field.RelationField
			Goals struct {
				field.RelationField
				Forecasts struct {
					field.RelationField
				}
				Milestones struct {
					field.RelationField
					Budget struct {
						field.RelationField
						Category struct {
							field.RelationField
						}
					}
				}
				Notes struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("BankAccounts.Pockets", "financial_servicev1.PocketORM"),
			Goals: struct {
				field.RelationField
				Forecasts struct {
					field.RelationField
				}
				Milestones struct {
					field.RelationField
					Budget struct {
						field.RelationField
						Category struct {
							field.RelationField
						}
					}
				}
				Notes struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("BankAccounts.Pockets.Goals", "financial_servicev1.SmartGoalORM"),
				Forecasts: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("BankAccounts.Pockets.Goals.Forecasts", "financial_servicev1.ForecastORM"),
				},
				Milestones: struct {
					field.RelationField
					Budget struct {
						field.RelationField
						Category struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("BankAccounts.Pockets.Goals.Milestones", "financial_servicev1.MilestoneORM"),
					Budget: struct {
						field.RelationField
						Category struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("BankAccounts.Pockets.Goals.Milestones.Budget", "financial_servicev1.BudgetORM"),
						Category: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("BankAccounts.Pockets.Goals.Milestones.Budget.Category", "financial_servicev1.CategoryORM"),
						},
					},
				},
				Notes: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("BankAccounts.Pockets.Goals.Notes", "financial_servicev1.SmartNoteORM"),
				},
			},
		},
		RecurringTransactions: struct {
			field.RelationField
			Notes struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("BankAccounts.RecurringTransactions", "financial_servicev1.PlaidAccountRecurringTransactionORM"),
			Notes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("BankAccounts.RecurringTransactions.Notes", "financial_servicev1.SmartNoteORM"),
			},
		},
		Transactions: struct {
			field.RelationField
			Notes struct {
				field.RelationField
			}
			Splits struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("BankAccounts.Transactions", "financial_servicev1.PlaidAccountTransactionORM"),
			Notes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("BankAccounts.Transactions.Notes", "financial_servicev1.SmartNoteORM"),
			},
			Splits: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("BankAccounts.Transactions.Splits", "financial_servicev1.TransactionSplitORM"),
			},
		},
	}

	_linkORM.CreditAccounts = linkORMHasManyCreditAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CreditAccounts", "financial_servicev1.CreditAccountORM"),
		Aprs: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CreditAccounts.Aprs", "financial_servicev1.AprORM"),
		},
		Pockets: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CreditAccounts.Pockets", "financial_servicev1.PocketORM"),
		},
		RecurringTransactions: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CreditAccounts.RecurringTransactions", "financial_servicev1.PlaidAccountRecurringTransactionORM"),
		},
		Transactions: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CreditAccounts.Transactions", "financial_servicev1.PlaidAccountTransactionORM"),
		},
	}

	_linkORM.InvestmentAccounts = linkORMHasManyInvestmentAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("InvestmentAccounts", "financial_servicev1.InvestmentAccountORM"),
		Holdings: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InvestmentAccounts.Holdings", "financial_servicev1.InvesmentHoldingORM"),
		},
		Securities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InvestmentAccounts.Securities", "financial_servicev1.InvestmentSecurityORM"),
		},
		Transactions: struct {
			field.RelationField
			Notes struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("InvestmentAccounts.Transactions", "financial_servicev1.PlaidAccountInvestmentTransactionORM"),
			Notes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("InvestmentAccounts.Transactions.Notes", "financial_servicev1.SmartNoteORM"),
			},
		},
	}

	_linkORM.MortgageAccounts = linkORMHasManyMortgageAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MortgageAccounts", "financial_servicev1.MortgageAccountORM"),
	}

	_linkORM.StudentLoanAccounts = linkORMHasManyStudentLoanAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("StudentLoanAccounts", "financial_servicev1.StudentLoanAccountORM"),
	}

	_linkORM.fillFieldMap()

	return _linkORM
}

type linkORM struct {
	linkORMDo

	ALL                       field.Asterisk
	CustomInstitutionName     field.String
	Description               field.String
	ErrorCode                 field.String
	ExpirationDate            field.String
	FinancialUserProfileId    field.Uint64
	Id                        field.Uint64
	InstitutionName           field.String
	LastManualSync            field.String
	LastSuccessfulUpdate      field.String
	LinkStatus                field.String
	LinkType                  field.String
	NewAccountsAvailable      field.Bool
	PlaidInstitutionId        field.String
	PlaidNewAccountsAvailable field.Bool
	ShouldBeUpdated           field.Bool
	UpdatedAt                 field.String
	PlaidLink                 linkORMHasOnePlaidLink

	PlaidSync linkORMHasOnePlaidSync

	Token linkORMHasOneToken

	BankAccounts linkORMHasManyBankAccounts

	CreditAccounts linkORMHasManyCreditAccounts

	InvestmentAccounts linkORMHasManyInvestmentAccounts

	MortgageAccounts linkORMHasManyMortgageAccounts

	StudentLoanAccounts linkORMHasManyStudentLoanAccounts

	fieldMap map[string]field.Expr
}

func (l linkORM) Table(newTableName string) *linkORM {
	l.linkORMDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l linkORM) As(alias string) *linkORM {
	l.linkORMDo.DO = *(l.linkORMDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *linkORM) updateTableName(table string) *linkORM {
	l.ALL = field.NewAsterisk(table)
	l.CustomInstitutionName = field.NewString(table, "custom_institution_name")
	l.Description = field.NewString(table, "description")
	l.ErrorCode = field.NewString(table, "error_code")
	l.ExpirationDate = field.NewString(table, "expiration_date")
	l.FinancialUserProfileId = field.NewUint64(table, "financial_user_profile_id")
	l.Id = field.NewUint64(table, "id")
	l.InstitutionName = field.NewString(table, "institution_name")
	l.LastManualSync = field.NewString(table, "last_manual_sync")
	l.LastSuccessfulUpdate = field.NewString(table, "last_successful_update")
	l.LinkStatus = field.NewString(table, "link_status")
	l.LinkType = field.NewString(table, "link_type")
	l.NewAccountsAvailable = field.NewBool(table, "new_accounts_available")
	l.PlaidInstitutionId = field.NewString(table, "plaid_institution_id")
	l.PlaidNewAccountsAvailable = field.NewBool(table, "plaid_new_accounts_available")
	l.ShouldBeUpdated = field.NewBool(table, "should_be_updated")
	l.UpdatedAt = field.NewString(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *linkORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *linkORM) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 24)
	l.fieldMap["custom_institution_name"] = l.CustomInstitutionName
	l.fieldMap["description"] = l.Description
	l.fieldMap["error_code"] = l.ErrorCode
	l.fieldMap["expiration_date"] = l.ExpirationDate
	l.fieldMap["financial_user_profile_id"] = l.FinancialUserProfileId
	l.fieldMap["id"] = l.Id
	l.fieldMap["institution_name"] = l.InstitutionName
	l.fieldMap["last_manual_sync"] = l.LastManualSync
	l.fieldMap["last_successful_update"] = l.LastSuccessfulUpdate
	l.fieldMap["link_status"] = l.LinkStatus
	l.fieldMap["link_type"] = l.LinkType
	l.fieldMap["new_accounts_available"] = l.NewAccountsAvailable
	l.fieldMap["plaid_institution_id"] = l.PlaidInstitutionId
	l.fieldMap["plaid_new_accounts_available"] = l.PlaidNewAccountsAvailable
	l.fieldMap["should_be_updated"] = l.ShouldBeUpdated
	l.fieldMap["updated_at"] = l.UpdatedAt

}

func (l linkORM) clone(db *gorm.DB) linkORM {
	l.linkORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l linkORM) replaceDB(db *gorm.DB) linkORM {
	l.linkORMDo.ReplaceDB(db)
	return l
}

type linkORMHasOnePlaidLink struct {
	db *gorm.DB

	field.RelationField
}

func (a linkORMHasOnePlaidLink) Where(conds ...field.Expr) *linkORMHasOnePlaidLink {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkORMHasOnePlaidLink) WithContext(ctx context.Context) *linkORMHasOnePlaidLink {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkORMHasOnePlaidLink) Session(session *gorm.Session) *linkORMHasOnePlaidLink {
	a.db = a.db.Session(session)
	return &a
}

func (a linkORMHasOnePlaidLink) Model(m *financial_servicev1.LinkORM) *linkORMHasOnePlaidLinkTx {
	return &linkORMHasOnePlaidLinkTx{a.db.Model(m).Association(a.Name())}
}

type linkORMHasOnePlaidLinkTx struct{ tx *gorm.Association }

func (a linkORMHasOnePlaidLinkTx) Find() (result *financial_servicev1.PlaidLinkORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkORMHasOnePlaidLinkTx) Append(values ...*financial_servicev1.PlaidLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkORMHasOnePlaidLinkTx) Replace(values ...*financial_servicev1.PlaidLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkORMHasOnePlaidLinkTx) Delete(values ...*financial_servicev1.PlaidLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkORMHasOnePlaidLinkTx) Clear() error {
	return a.tx.Clear()
}

func (a linkORMHasOnePlaidLinkTx) Count() int64 {
	return a.tx.Count()
}

type linkORMHasOnePlaidSync struct {
	db *gorm.DB

	field.RelationField
}

func (a linkORMHasOnePlaidSync) Where(conds ...field.Expr) *linkORMHasOnePlaidSync {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkORMHasOnePlaidSync) WithContext(ctx context.Context) *linkORMHasOnePlaidSync {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkORMHasOnePlaidSync) Session(session *gorm.Session) *linkORMHasOnePlaidSync {
	a.db = a.db.Session(session)
	return &a
}

func (a linkORMHasOnePlaidSync) Model(m *financial_servicev1.LinkORM) *linkORMHasOnePlaidSyncTx {
	return &linkORMHasOnePlaidSyncTx{a.db.Model(m).Association(a.Name())}
}

type linkORMHasOnePlaidSyncTx struct{ tx *gorm.Association }

func (a linkORMHasOnePlaidSyncTx) Find() (result *financial_servicev1.PlaidSyncORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkORMHasOnePlaidSyncTx) Append(values ...*financial_servicev1.PlaidSyncORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkORMHasOnePlaidSyncTx) Replace(values ...*financial_servicev1.PlaidSyncORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkORMHasOnePlaidSyncTx) Delete(values ...*financial_servicev1.PlaidSyncORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkORMHasOnePlaidSyncTx) Clear() error {
	return a.tx.Clear()
}

func (a linkORMHasOnePlaidSyncTx) Count() int64 {
	return a.tx.Count()
}

type linkORMHasOneToken struct {
	db *gorm.DB

	field.RelationField
}

func (a linkORMHasOneToken) Where(conds ...field.Expr) *linkORMHasOneToken {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkORMHasOneToken) WithContext(ctx context.Context) *linkORMHasOneToken {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkORMHasOneToken) Session(session *gorm.Session) *linkORMHasOneToken {
	a.db = a.db.Session(session)
	return &a
}

func (a linkORMHasOneToken) Model(m *financial_servicev1.LinkORM) *linkORMHasOneTokenTx {
	return &linkORMHasOneTokenTx{a.db.Model(m).Association(a.Name())}
}

type linkORMHasOneTokenTx struct{ tx *gorm.Association }

func (a linkORMHasOneTokenTx) Find() (result *financial_servicev1.TokenORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkORMHasOneTokenTx) Append(values ...*financial_servicev1.TokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkORMHasOneTokenTx) Replace(values ...*financial_servicev1.TokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkORMHasOneTokenTx) Delete(values ...*financial_servicev1.TokenORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkORMHasOneTokenTx) Clear() error {
	return a.tx.Clear()
}

func (a linkORMHasOneTokenTx) Count() int64 {
	return a.tx.Count()
}

type linkORMHasManyBankAccounts struct {
	db *gorm.DB

	field.RelationField

	Pockets struct {
		field.RelationField
		Goals struct {
			field.RelationField
			Forecasts struct {
				field.RelationField
			}
			Milestones struct {
				field.RelationField
				Budget struct {
					field.RelationField
					Category struct {
						field.RelationField
					}
				}
			}
			Notes struct {
				field.RelationField
			}
		}
	}
	RecurringTransactions struct {
		field.RelationField
		Notes struct {
			field.RelationField
		}
	}
	Transactions struct {
		field.RelationField
		Notes struct {
			field.RelationField
		}
		Splits struct {
			field.RelationField
		}
	}
}

func (a linkORMHasManyBankAccounts) Where(conds ...field.Expr) *linkORMHasManyBankAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkORMHasManyBankAccounts) WithContext(ctx context.Context) *linkORMHasManyBankAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkORMHasManyBankAccounts) Session(session *gorm.Session) *linkORMHasManyBankAccounts {
	a.db = a.db.Session(session)
	return &a
}

func (a linkORMHasManyBankAccounts) Model(m *financial_servicev1.LinkORM) *linkORMHasManyBankAccountsTx {
	return &linkORMHasManyBankAccountsTx{a.db.Model(m).Association(a.Name())}
}

type linkORMHasManyBankAccountsTx struct{ tx *gorm.Association }

func (a linkORMHasManyBankAccountsTx) Find() (result []*financial_servicev1.BankAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkORMHasManyBankAccountsTx) Append(values ...*financial_servicev1.BankAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkORMHasManyBankAccountsTx) Replace(values ...*financial_servicev1.BankAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkORMHasManyBankAccountsTx) Delete(values ...*financial_servicev1.BankAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkORMHasManyBankAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkORMHasManyBankAccountsTx) Count() int64 {
	return a.tx.Count()
}

type linkORMHasManyCreditAccounts struct {
	db *gorm.DB

	field.RelationField

	Aprs struct {
		field.RelationField
	}
	Pockets struct {
		field.RelationField
	}
	RecurringTransactions struct {
		field.RelationField
	}
	Transactions struct {
		field.RelationField
	}
}

func (a linkORMHasManyCreditAccounts) Where(conds ...field.Expr) *linkORMHasManyCreditAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkORMHasManyCreditAccounts) WithContext(ctx context.Context) *linkORMHasManyCreditAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkORMHasManyCreditAccounts) Session(session *gorm.Session) *linkORMHasManyCreditAccounts {
	a.db = a.db.Session(session)
	return &a
}

func (a linkORMHasManyCreditAccounts) Model(m *financial_servicev1.LinkORM) *linkORMHasManyCreditAccountsTx {
	return &linkORMHasManyCreditAccountsTx{a.db.Model(m).Association(a.Name())}
}

type linkORMHasManyCreditAccountsTx struct{ tx *gorm.Association }

func (a linkORMHasManyCreditAccountsTx) Find() (result []*financial_servicev1.CreditAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkORMHasManyCreditAccountsTx) Append(values ...*financial_servicev1.CreditAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkORMHasManyCreditAccountsTx) Replace(values ...*financial_servicev1.CreditAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkORMHasManyCreditAccountsTx) Delete(values ...*financial_servicev1.CreditAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkORMHasManyCreditAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkORMHasManyCreditAccountsTx) Count() int64 {
	return a.tx.Count()
}

type linkORMHasManyInvestmentAccounts struct {
	db *gorm.DB

	field.RelationField

	Holdings struct {
		field.RelationField
	}
	Securities struct {
		field.RelationField
	}
	Transactions struct {
		field.RelationField
		Notes struct {
			field.RelationField
		}
	}
}

func (a linkORMHasManyInvestmentAccounts) Where(conds ...field.Expr) *linkORMHasManyInvestmentAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkORMHasManyInvestmentAccounts) WithContext(ctx context.Context) *linkORMHasManyInvestmentAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkORMHasManyInvestmentAccounts) Session(session *gorm.Session) *linkORMHasManyInvestmentAccounts {
	a.db = a.db.Session(session)
	return &a
}

func (a linkORMHasManyInvestmentAccounts) Model(m *financial_servicev1.LinkORM) *linkORMHasManyInvestmentAccountsTx {
	return &linkORMHasManyInvestmentAccountsTx{a.db.Model(m).Association(a.Name())}
}

type linkORMHasManyInvestmentAccountsTx struct{ tx *gorm.Association }

func (a linkORMHasManyInvestmentAccountsTx) Find() (result []*financial_servicev1.InvestmentAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkORMHasManyInvestmentAccountsTx) Append(values ...*financial_servicev1.InvestmentAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkORMHasManyInvestmentAccountsTx) Replace(values ...*financial_servicev1.InvestmentAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkORMHasManyInvestmentAccountsTx) Delete(values ...*financial_servicev1.InvestmentAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkORMHasManyInvestmentAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkORMHasManyInvestmentAccountsTx) Count() int64 {
	return a.tx.Count()
}

type linkORMHasManyMortgageAccounts struct {
	db *gorm.DB

	field.RelationField
}

func (a linkORMHasManyMortgageAccounts) Where(conds ...field.Expr) *linkORMHasManyMortgageAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkORMHasManyMortgageAccounts) WithContext(ctx context.Context) *linkORMHasManyMortgageAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkORMHasManyMortgageAccounts) Session(session *gorm.Session) *linkORMHasManyMortgageAccounts {
	a.db = a.db.Session(session)
	return &a
}

func (a linkORMHasManyMortgageAccounts) Model(m *financial_servicev1.LinkORM) *linkORMHasManyMortgageAccountsTx {
	return &linkORMHasManyMortgageAccountsTx{a.db.Model(m).Association(a.Name())}
}

type linkORMHasManyMortgageAccountsTx struct{ tx *gorm.Association }

func (a linkORMHasManyMortgageAccountsTx) Find() (result []*financial_servicev1.MortgageAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkORMHasManyMortgageAccountsTx) Append(values ...*financial_servicev1.MortgageAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkORMHasManyMortgageAccountsTx) Replace(values ...*financial_servicev1.MortgageAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkORMHasManyMortgageAccountsTx) Delete(values ...*financial_servicev1.MortgageAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkORMHasManyMortgageAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkORMHasManyMortgageAccountsTx) Count() int64 {
	return a.tx.Count()
}

type linkORMHasManyStudentLoanAccounts struct {
	db *gorm.DB

	field.RelationField
}

func (a linkORMHasManyStudentLoanAccounts) Where(conds ...field.Expr) *linkORMHasManyStudentLoanAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a linkORMHasManyStudentLoanAccounts) WithContext(ctx context.Context) *linkORMHasManyStudentLoanAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a linkORMHasManyStudentLoanAccounts) Session(session *gorm.Session) *linkORMHasManyStudentLoanAccounts {
	a.db = a.db.Session(session)
	return &a
}

func (a linkORMHasManyStudentLoanAccounts) Model(m *financial_servicev1.LinkORM) *linkORMHasManyStudentLoanAccountsTx {
	return &linkORMHasManyStudentLoanAccountsTx{a.db.Model(m).Association(a.Name())}
}

type linkORMHasManyStudentLoanAccountsTx struct{ tx *gorm.Association }

func (a linkORMHasManyStudentLoanAccountsTx) Find() (result []*financial_servicev1.StudentLoanAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a linkORMHasManyStudentLoanAccountsTx) Append(values ...*financial_servicev1.StudentLoanAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a linkORMHasManyStudentLoanAccountsTx) Replace(values ...*financial_servicev1.StudentLoanAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a linkORMHasManyStudentLoanAccountsTx) Delete(values ...*financial_servicev1.StudentLoanAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a linkORMHasManyStudentLoanAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a linkORMHasManyStudentLoanAccountsTx) Count() int64 {
	return a.tx.Count()
}

type linkORMDo struct{ gen.DO }

type ILinkORMDo interface {
	gen.SubQuery
	Debug() ILinkORMDo
	WithContext(ctx context.Context) ILinkORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILinkORMDo
	WriteDB() ILinkORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILinkORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILinkORMDo
	Not(conds ...gen.Condition) ILinkORMDo
	Or(conds ...gen.Condition) ILinkORMDo
	Select(conds ...field.Expr) ILinkORMDo
	Where(conds ...gen.Condition) ILinkORMDo
	Order(conds ...field.Expr) ILinkORMDo
	Distinct(cols ...field.Expr) ILinkORMDo
	Omit(cols ...field.Expr) ILinkORMDo
	Join(table schema.Tabler, on ...field.Expr) ILinkORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILinkORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILinkORMDo
	Group(cols ...field.Expr) ILinkORMDo
	Having(conds ...gen.Condition) ILinkORMDo
	Limit(limit int) ILinkORMDo
	Offset(offset int) ILinkORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkORMDo
	Unscoped() ILinkORMDo
	Create(values ...*financial_servicev1.LinkORM) error
	CreateInBatches(values []*financial_servicev1.LinkORM, batchSize int) error
	Save(values ...*financial_servicev1.LinkORM) error
	First() (*financial_servicev1.LinkORM, error)
	Take() (*financial_servicev1.LinkORM, error)
	Last() (*financial_servicev1.LinkORM, error)
	Find() ([]*financial_servicev1.LinkORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.LinkORM, err error)
	FindInBatches(result *[]*financial_servicev1.LinkORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.LinkORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILinkORMDo
	Assign(attrs ...field.AssignExpr) ILinkORMDo
	Joins(fields ...field.RelationField) ILinkORMDo
	Preload(fields ...field.RelationField) ILinkORMDo
	FirstOrInit() (*financial_servicev1.LinkORM, error)
	FirstOrCreate() (*financial_servicev1.LinkORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.LinkORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILinkORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.LinkORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.LinkORM, err error)
	CreateRecord(item financial_servicev1.LinkORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.LinkORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.LinkORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.LinkORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.LinkORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l linkORMDo) GetRecordByID(id int) (result financial_servicev1.LinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (l linkORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.LinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM links ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (l linkORMDo) CreateRecord(item financial_servicev1.LinkORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO links (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (l linkORMDo) UpdateRecordByID(id int, item financial_servicev1.LinkORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE links SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l linkORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (l linkORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.LinkORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM links ORDER BY " + l.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (l linkORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM links ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (l linkORMDo) GetByID(id uint64) (result financial_servicev1.LinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (l linkORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.LinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM links ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l linkORMDo) Debug() ILinkORMDo {
	return l.withDO(l.DO.Debug())
}

func (l linkORMDo) WithContext(ctx context.Context) ILinkORMDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l linkORMDo) ReadDB() ILinkORMDo {
	return l.Clauses(dbresolver.Read)
}

func (l linkORMDo) WriteDB() ILinkORMDo {
	return l.Clauses(dbresolver.Write)
}

func (l linkORMDo) Session(config *gorm.Session) ILinkORMDo {
	return l.withDO(l.DO.Session(config))
}

func (l linkORMDo) Clauses(conds ...clause.Expression) ILinkORMDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l linkORMDo) Returning(value interface{}, columns ...string) ILinkORMDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l linkORMDo) Not(conds ...gen.Condition) ILinkORMDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l linkORMDo) Or(conds ...gen.Condition) ILinkORMDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l linkORMDo) Select(conds ...field.Expr) ILinkORMDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l linkORMDo) Where(conds ...gen.Condition) ILinkORMDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l linkORMDo) Order(conds ...field.Expr) ILinkORMDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l linkORMDo) Distinct(cols ...field.Expr) ILinkORMDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l linkORMDo) Omit(cols ...field.Expr) ILinkORMDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l linkORMDo) Join(table schema.Tabler, on ...field.Expr) ILinkORMDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l linkORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILinkORMDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l linkORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ILinkORMDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l linkORMDo) Group(cols ...field.Expr) ILinkORMDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l linkORMDo) Having(conds ...gen.Condition) ILinkORMDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l linkORMDo) Limit(limit int) ILinkORMDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l linkORMDo) Offset(offset int) ILinkORMDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l linkORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkORMDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l linkORMDo) Unscoped() ILinkORMDo {
	return l.withDO(l.DO.Unscoped())
}

func (l linkORMDo) Create(values ...*financial_servicev1.LinkORM) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l linkORMDo) CreateInBatches(values []*financial_servicev1.LinkORM, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l linkORMDo) Save(values ...*financial_servicev1.LinkORM) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l linkORMDo) First() (*financial_servicev1.LinkORM, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.LinkORM), nil
	}
}

func (l linkORMDo) Take() (*financial_servicev1.LinkORM, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.LinkORM), nil
	}
}

func (l linkORMDo) Last() (*financial_servicev1.LinkORM, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.LinkORM), nil
	}
}

func (l linkORMDo) Find() ([]*financial_servicev1.LinkORM, error) {
	result, err := l.DO.Find()
	return result.([]*financial_servicev1.LinkORM), err
}

func (l linkORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.LinkORM, err error) {
	buf := make([]*financial_servicev1.LinkORM, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l linkORMDo) FindInBatches(result *[]*financial_servicev1.LinkORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l linkORMDo) Attrs(attrs ...field.AssignExpr) ILinkORMDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l linkORMDo) Assign(attrs ...field.AssignExpr) ILinkORMDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l linkORMDo) Joins(fields ...field.RelationField) ILinkORMDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l linkORMDo) Preload(fields ...field.RelationField) ILinkORMDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l linkORMDo) FirstOrInit() (*financial_servicev1.LinkORM, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.LinkORM), nil
	}
}

func (l linkORMDo) FirstOrCreate() (*financial_servicev1.LinkORM, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.LinkORM), nil
	}
}

func (l linkORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.LinkORM, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l linkORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l linkORMDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l linkORMDo) Delete(models ...*financial_servicev1.LinkORM) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *linkORMDo) withDO(do gen.Dao) *linkORMDo {
	l.DO = *do.(*gen.DO)
	return l
}
