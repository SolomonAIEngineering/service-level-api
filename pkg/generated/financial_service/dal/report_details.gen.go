// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newReportDetailsORM(db *gorm.DB, opts ...gen.DOOption) reportDetailsORM {
	_reportDetailsORM := reportDetailsORM{}

	_reportDetailsORM.reportDetailsORMDo.UseDB(db, opts...)
	_reportDetailsORM.reportDetailsORMDo.UseModel(&financial_servicev1.ReportDetailsORM{})

	tableName := _reportDetailsORM.reportDetailsORMDo.TableName()
	_reportDetailsORM.ALL = field.NewAsterisk(tableName)
	_reportDetailsORM.Id = field.NewUint64(tableName, "id")
	_reportDetailsORM.LinkedAccountingAccountId = field.NewUint64(tableName, "linked_accounting_account_id")
	_reportDetailsORM.BalanceSheets = reportDetailsORMHasManyBalanceSheets{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BalanceSheets", "financial_servicev1.BalanceSheetORM"),
		Assets: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("BalanceSheets.Assets", "financial_servicev1.ReportItemORM"),
		},
		Equity: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("BalanceSheets.Equity", "financial_servicev1.ReportItemORM"),
		},
		Liabilities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("BalanceSheets.Liabilities", "financial_servicev1.ReportItemORM"),
		},
	}

	_reportDetailsORM.CashFlowStatements = reportDetailsORMHasManyCashFlowStatements{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CashFlowStatements", "financial_servicev1.CashFlowStatementsORM"),
		FinancingActivities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CashFlowStatements.FinancingActivities", "financial_servicev1.ReportItemORM"),
		},
		InvestingActivities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CashFlowStatements.InvestingActivities", "financial_servicev1.ReportItemORM"),
		},
		OperatingActivities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CashFlowStatements.OperatingActivities", "financial_servicev1.ReportItemORM"),
		},
	}

	_reportDetailsORM.IncomeStatements = reportDetailsORMHasManyIncomeStatements{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("IncomeStatements", "financial_servicev1.IncomeStatementORM"),
		CostOfSales: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("IncomeStatements.CostOfSales", "financial_servicev1.ReportItemORM"),
		},
		Income: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("IncomeStatements.Income", "financial_servicev1.ReportItemORM"),
		},
		NonOperatingExpenses: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("IncomeStatements.NonOperatingExpenses", "financial_servicev1.ReportItemORM"),
		},
		OperatingExpenses: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("IncomeStatements.OperatingExpenses", "financial_servicev1.ReportItemORM"),
		},
	}

	_reportDetailsORM.fillFieldMap()

	return _reportDetailsORM
}

type reportDetailsORM struct {
	reportDetailsORMDo

	ALL                       field.Asterisk
	Id                        field.Uint64
	LinkedAccountingAccountId field.Uint64
	BalanceSheets             reportDetailsORMHasManyBalanceSheets

	CashFlowStatements reportDetailsORMHasManyCashFlowStatements

	IncomeStatements reportDetailsORMHasManyIncomeStatements

	fieldMap map[string]field.Expr
}

func (r reportDetailsORM) Table(newTableName string) *reportDetailsORM {
	r.reportDetailsORMDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportDetailsORM) As(alias string) *reportDetailsORM {
	r.reportDetailsORMDo.DO = *(r.reportDetailsORMDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportDetailsORM) updateTableName(table string) *reportDetailsORM {
	r.ALL = field.NewAsterisk(table)
	r.Id = field.NewUint64(table, "id")
	r.LinkedAccountingAccountId = field.NewUint64(table, "linked_accounting_account_id")

	r.fillFieldMap()

	return r
}

func (r *reportDetailsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportDetailsORM) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.Id
	r.fieldMap["linked_accounting_account_id"] = r.LinkedAccountingAccountId

}

func (r reportDetailsORM) clone(db *gorm.DB) reportDetailsORM {
	r.reportDetailsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportDetailsORM) replaceDB(db *gorm.DB) reportDetailsORM {
	r.reportDetailsORMDo.ReplaceDB(db)
	return r
}

type reportDetailsORMHasManyBalanceSheets struct {
	db *gorm.DB

	field.RelationField

	Assets struct {
		field.RelationField
	}
	Equity struct {
		field.RelationField
	}
	Liabilities struct {
		field.RelationField
	}
}

func (a reportDetailsORMHasManyBalanceSheets) Where(conds ...field.Expr) *reportDetailsORMHasManyBalanceSheets {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reportDetailsORMHasManyBalanceSheets) WithContext(ctx context.Context) *reportDetailsORMHasManyBalanceSheets {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reportDetailsORMHasManyBalanceSheets) Session(session *gorm.Session) *reportDetailsORMHasManyBalanceSheets {
	a.db = a.db.Session(session)
	return &a
}

func (a reportDetailsORMHasManyBalanceSheets) Model(m *financial_servicev1.ReportDetailsORM) *reportDetailsORMHasManyBalanceSheetsTx {
	return &reportDetailsORMHasManyBalanceSheetsTx{a.db.Model(m).Association(a.Name())}
}

type reportDetailsORMHasManyBalanceSheetsTx struct{ tx *gorm.Association }

func (a reportDetailsORMHasManyBalanceSheetsTx) Find() (result []*financial_servicev1.BalanceSheetORM, err error) {
	return result, a.tx.Find(&result)
}

func (a reportDetailsORMHasManyBalanceSheetsTx) Append(values ...*financial_servicev1.BalanceSheetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reportDetailsORMHasManyBalanceSheetsTx) Replace(values ...*financial_servicev1.BalanceSheetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reportDetailsORMHasManyBalanceSheetsTx) Delete(values ...*financial_servicev1.BalanceSheetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reportDetailsORMHasManyBalanceSheetsTx) Clear() error {
	return a.tx.Clear()
}

func (a reportDetailsORMHasManyBalanceSheetsTx) Count() int64 {
	return a.tx.Count()
}

type reportDetailsORMHasManyCashFlowStatements struct {
	db *gorm.DB

	field.RelationField

	FinancingActivities struct {
		field.RelationField
	}
	InvestingActivities struct {
		field.RelationField
	}
	OperatingActivities struct {
		field.RelationField
	}
}

func (a reportDetailsORMHasManyCashFlowStatements) Where(conds ...field.Expr) *reportDetailsORMHasManyCashFlowStatements {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reportDetailsORMHasManyCashFlowStatements) WithContext(ctx context.Context) *reportDetailsORMHasManyCashFlowStatements {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reportDetailsORMHasManyCashFlowStatements) Session(session *gorm.Session) *reportDetailsORMHasManyCashFlowStatements {
	a.db = a.db.Session(session)
	return &a
}

func (a reportDetailsORMHasManyCashFlowStatements) Model(m *financial_servicev1.ReportDetailsORM) *reportDetailsORMHasManyCashFlowStatementsTx {
	return &reportDetailsORMHasManyCashFlowStatementsTx{a.db.Model(m).Association(a.Name())}
}

type reportDetailsORMHasManyCashFlowStatementsTx struct{ tx *gorm.Association }

func (a reportDetailsORMHasManyCashFlowStatementsTx) Find() (result []*financial_servicev1.CashFlowStatementsORM, err error) {
	return result, a.tx.Find(&result)
}

func (a reportDetailsORMHasManyCashFlowStatementsTx) Append(values ...*financial_servicev1.CashFlowStatementsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reportDetailsORMHasManyCashFlowStatementsTx) Replace(values ...*financial_servicev1.CashFlowStatementsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reportDetailsORMHasManyCashFlowStatementsTx) Delete(values ...*financial_servicev1.CashFlowStatementsORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reportDetailsORMHasManyCashFlowStatementsTx) Clear() error {
	return a.tx.Clear()
}

func (a reportDetailsORMHasManyCashFlowStatementsTx) Count() int64 {
	return a.tx.Count()
}

type reportDetailsORMHasManyIncomeStatements struct {
	db *gorm.DB

	field.RelationField

	CostOfSales struct {
		field.RelationField
	}
	Income struct {
		field.RelationField
	}
	NonOperatingExpenses struct {
		field.RelationField
	}
	OperatingExpenses struct {
		field.RelationField
	}
}

func (a reportDetailsORMHasManyIncomeStatements) Where(conds ...field.Expr) *reportDetailsORMHasManyIncomeStatements {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reportDetailsORMHasManyIncomeStatements) WithContext(ctx context.Context) *reportDetailsORMHasManyIncomeStatements {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reportDetailsORMHasManyIncomeStatements) Session(session *gorm.Session) *reportDetailsORMHasManyIncomeStatements {
	a.db = a.db.Session(session)
	return &a
}

func (a reportDetailsORMHasManyIncomeStatements) Model(m *financial_servicev1.ReportDetailsORM) *reportDetailsORMHasManyIncomeStatementsTx {
	return &reportDetailsORMHasManyIncomeStatementsTx{a.db.Model(m).Association(a.Name())}
}

type reportDetailsORMHasManyIncomeStatementsTx struct{ tx *gorm.Association }

func (a reportDetailsORMHasManyIncomeStatementsTx) Find() (result []*financial_servicev1.IncomeStatementORM, err error) {
	return result, a.tx.Find(&result)
}

func (a reportDetailsORMHasManyIncomeStatementsTx) Append(values ...*financial_servicev1.IncomeStatementORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reportDetailsORMHasManyIncomeStatementsTx) Replace(values ...*financial_servicev1.IncomeStatementORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reportDetailsORMHasManyIncomeStatementsTx) Delete(values ...*financial_servicev1.IncomeStatementORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reportDetailsORMHasManyIncomeStatementsTx) Clear() error {
	return a.tx.Clear()
}

func (a reportDetailsORMHasManyIncomeStatementsTx) Count() int64 {
	return a.tx.Count()
}

type reportDetailsORMDo struct{ gen.DO }

type IReportDetailsORMDo interface {
	gen.SubQuery
	Debug() IReportDetailsORMDo
	WithContext(ctx context.Context) IReportDetailsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReportDetailsORMDo
	WriteDB() IReportDetailsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReportDetailsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReportDetailsORMDo
	Not(conds ...gen.Condition) IReportDetailsORMDo
	Or(conds ...gen.Condition) IReportDetailsORMDo
	Select(conds ...field.Expr) IReportDetailsORMDo
	Where(conds ...gen.Condition) IReportDetailsORMDo
	Order(conds ...field.Expr) IReportDetailsORMDo
	Distinct(cols ...field.Expr) IReportDetailsORMDo
	Omit(cols ...field.Expr) IReportDetailsORMDo
	Join(table schema.Tabler, on ...field.Expr) IReportDetailsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReportDetailsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReportDetailsORMDo
	Group(cols ...field.Expr) IReportDetailsORMDo
	Having(conds ...gen.Condition) IReportDetailsORMDo
	Limit(limit int) IReportDetailsORMDo
	Offset(offset int) IReportDetailsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReportDetailsORMDo
	Unscoped() IReportDetailsORMDo
	Create(values ...*financial_servicev1.ReportDetailsORM) error
	CreateInBatches(values []*financial_servicev1.ReportDetailsORM, batchSize int) error
	Save(values ...*financial_servicev1.ReportDetailsORM) error
	First() (*financial_servicev1.ReportDetailsORM, error)
	Take() (*financial_servicev1.ReportDetailsORM, error)
	Last() (*financial_servicev1.ReportDetailsORM, error)
	Find() ([]*financial_servicev1.ReportDetailsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.ReportDetailsORM, err error)
	FindInBatches(result *[]*financial_servicev1.ReportDetailsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.ReportDetailsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReportDetailsORMDo
	Assign(attrs ...field.AssignExpr) IReportDetailsORMDo
	Joins(fields ...field.RelationField) IReportDetailsORMDo
	Preload(fields ...field.RelationField) IReportDetailsORMDo
	FirstOrInit() (*financial_servicev1.ReportDetailsORM, error)
	FirstOrCreate() (*financial_servicev1.ReportDetailsORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.ReportDetailsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReportDetailsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.ReportDetailsORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.ReportDetailsORM, err error)
	CreateRecord(item financial_servicev1.ReportDetailsORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.ReportDetailsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.ReportDetailsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.ReportDetailsORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.ReportDetailsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r reportDetailsORMDo) GetRecordByID(id int) (result financial_servicev1.ReportDetailsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM report_details ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (r reportDetailsORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.ReportDetailsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM report_details ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (r reportDetailsORMDo) CreateRecord(item financial_servicev1.ReportDetailsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO report_details (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (r reportDetailsORMDo) UpdateRecordByID(id int, item financial_servicev1.ReportDetailsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE report_details SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r reportDetailsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM report_details ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (r reportDetailsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.ReportDetailsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM report_details ORDER BY " + r.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (r reportDetailsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM report_details ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r reportDetailsORMDo) GetByID(id uint64) (result financial_servicev1.ReportDetailsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM report_details ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (r reportDetailsORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.ReportDetailsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM report_details ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (r reportDetailsORMDo) Debug() IReportDetailsORMDo {
	return r.withDO(r.DO.Debug())
}

func (r reportDetailsORMDo) WithContext(ctx context.Context) IReportDetailsORMDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportDetailsORMDo) ReadDB() IReportDetailsORMDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportDetailsORMDo) WriteDB() IReportDetailsORMDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportDetailsORMDo) Session(config *gorm.Session) IReportDetailsORMDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportDetailsORMDo) Clauses(conds ...clause.Expression) IReportDetailsORMDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportDetailsORMDo) Returning(value interface{}, columns ...string) IReportDetailsORMDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportDetailsORMDo) Not(conds ...gen.Condition) IReportDetailsORMDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportDetailsORMDo) Or(conds ...gen.Condition) IReportDetailsORMDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportDetailsORMDo) Select(conds ...field.Expr) IReportDetailsORMDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportDetailsORMDo) Where(conds ...gen.Condition) IReportDetailsORMDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportDetailsORMDo) Order(conds ...field.Expr) IReportDetailsORMDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportDetailsORMDo) Distinct(cols ...field.Expr) IReportDetailsORMDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportDetailsORMDo) Omit(cols ...field.Expr) IReportDetailsORMDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportDetailsORMDo) Join(table schema.Tabler, on ...field.Expr) IReportDetailsORMDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportDetailsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReportDetailsORMDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportDetailsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IReportDetailsORMDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportDetailsORMDo) Group(cols ...field.Expr) IReportDetailsORMDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportDetailsORMDo) Having(conds ...gen.Condition) IReportDetailsORMDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportDetailsORMDo) Limit(limit int) IReportDetailsORMDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportDetailsORMDo) Offset(offset int) IReportDetailsORMDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportDetailsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReportDetailsORMDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportDetailsORMDo) Unscoped() IReportDetailsORMDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportDetailsORMDo) Create(values ...*financial_servicev1.ReportDetailsORM) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportDetailsORMDo) CreateInBatches(values []*financial_servicev1.ReportDetailsORM, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportDetailsORMDo) Save(values ...*financial_servicev1.ReportDetailsORM) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportDetailsORMDo) First() (*financial_servicev1.ReportDetailsORM, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.ReportDetailsORM), nil
	}
}

func (r reportDetailsORMDo) Take() (*financial_servicev1.ReportDetailsORM, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.ReportDetailsORM), nil
	}
}

func (r reportDetailsORMDo) Last() (*financial_servicev1.ReportDetailsORM, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.ReportDetailsORM), nil
	}
}

func (r reportDetailsORMDo) Find() ([]*financial_servicev1.ReportDetailsORM, error) {
	result, err := r.DO.Find()
	return result.([]*financial_servicev1.ReportDetailsORM), err
}

func (r reportDetailsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.ReportDetailsORM, err error) {
	buf := make([]*financial_servicev1.ReportDetailsORM, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportDetailsORMDo) FindInBatches(result *[]*financial_servicev1.ReportDetailsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportDetailsORMDo) Attrs(attrs ...field.AssignExpr) IReportDetailsORMDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportDetailsORMDo) Assign(attrs ...field.AssignExpr) IReportDetailsORMDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportDetailsORMDo) Joins(fields ...field.RelationField) IReportDetailsORMDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportDetailsORMDo) Preload(fields ...field.RelationField) IReportDetailsORMDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportDetailsORMDo) FirstOrInit() (*financial_servicev1.ReportDetailsORM, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.ReportDetailsORM), nil
	}
}

func (r reportDetailsORMDo) FirstOrCreate() (*financial_servicev1.ReportDetailsORM, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.ReportDetailsORM), nil
	}
}

func (r reportDetailsORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.ReportDetailsORM, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportDetailsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportDetailsORMDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportDetailsORMDo) Delete(models ...*financial_servicev1.ReportDetailsORM) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportDetailsORMDo) withDO(do gen.Dao) *reportDetailsORMDo {
	r.DO = *do.(*gen.DO)
	return r
}
