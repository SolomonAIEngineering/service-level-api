// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newPlaidLinkORM(db *gorm.DB, opts ...gen.DOOption) plaidLinkORM {
	_plaidLinkORM := plaidLinkORM{}

	_plaidLinkORM.plaidLinkORMDo.UseDB(db, opts...)
	_plaidLinkORM.plaidLinkORMDo.UseModel(&financial_servicev1.PlaidLinkORM{})

	tableName := _plaidLinkORM.plaidLinkORMDo.TableName()
	_plaidLinkORM.ALL = field.NewAsterisk(tableName)
	_plaidLinkORM.Id = field.NewUint64(tableName, "id")
	_plaidLinkORM.InstitutionId = field.NewString(tableName, "institution_id")
	_plaidLinkORM.InstitutionName = field.NewString(tableName, "institution_name")
	_plaidLinkORM.ItemId = field.NewString(tableName, "item_id")
	_plaidLinkORM.LinkId = field.NewUint64(tableName, "link_id")
	_plaidLinkORM.Products = field.NewField(tableName, "products")
	_plaidLinkORM.UsePlaidSync = field.NewBool(tableName, "use_plaid_sync")
	_plaidLinkORM.WebhookUrl = field.NewString(tableName, "webhook_url")

	_plaidLinkORM.fillFieldMap()

	return _plaidLinkORM
}

type plaidLinkORM struct {
	plaidLinkORMDo

	ALL             field.Asterisk
	Id              field.Uint64
	InstitutionId   field.String
	InstitutionName field.String
	ItemId          field.String
	LinkId          field.Uint64
	Products        field.Field
	UsePlaidSync    field.Bool
	WebhookUrl      field.String

	fieldMap map[string]field.Expr
}

func (p plaidLinkORM) Table(newTableName string) *plaidLinkORM {
	p.plaidLinkORMDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p plaidLinkORM) As(alias string) *plaidLinkORM {
	p.plaidLinkORMDo.DO = *(p.plaidLinkORMDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *plaidLinkORM) updateTableName(table string) *plaidLinkORM {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewUint64(table, "id")
	p.InstitutionId = field.NewString(table, "institution_id")
	p.InstitutionName = field.NewString(table, "institution_name")
	p.ItemId = field.NewString(table, "item_id")
	p.LinkId = field.NewUint64(table, "link_id")
	p.Products = field.NewField(table, "products")
	p.UsePlaidSync = field.NewBool(table, "use_plaid_sync")
	p.WebhookUrl = field.NewString(table, "webhook_url")

	p.fillFieldMap()

	return p
}

func (p *plaidLinkORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *plaidLinkORM) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.Id
	p.fieldMap["institution_id"] = p.InstitutionId
	p.fieldMap["institution_name"] = p.InstitutionName
	p.fieldMap["item_id"] = p.ItemId
	p.fieldMap["link_id"] = p.LinkId
	p.fieldMap["products"] = p.Products
	p.fieldMap["use_plaid_sync"] = p.UsePlaidSync
	p.fieldMap["webhook_url"] = p.WebhookUrl
}

func (p plaidLinkORM) clone(db *gorm.DB) plaidLinkORM {
	p.plaidLinkORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p plaidLinkORM) replaceDB(db *gorm.DB) plaidLinkORM {
	p.plaidLinkORMDo.ReplaceDB(db)
	return p
}

type plaidLinkORMDo struct{ gen.DO }

type IPlaidLinkORMDo interface {
	gen.SubQuery
	Debug() IPlaidLinkORMDo
	WithContext(ctx context.Context) IPlaidLinkORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlaidLinkORMDo
	WriteDB() IPlaidLinkORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlaidLinkORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlaidLinkORMDo
	Not(conds ...gen.Condition) IPlaidLinkORMDo
	Or(conds ...gen.Condition) IPlaidLinkORMDo
	Select(conds ...field.Expr) IPlaidLinkORMDo
	Where(conds ...gen.Condition) IPlaidLinkORMDo
	Order(conds ...field.Expr) IPlaidLinkORMDo
	Distinct(cols ...field.Expr) IPlaidLinkORMDo
	Omit(cols ...field.Expr) IPlaidLinkORMDo
	Join(table schema.Tabler, on ...field.Expr) IPlaidLinkORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlaidLinkORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlaidLinkORMDo
	Group(cols ...field.Expr) IPlaidLinkORMDo
	Having(conds ...gen.Condition) IPlaidLinkORMDo
	Limit(limit int) IPlaidLinkORMDo
	Offset(offset int) IPlaidLinkORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlaidLinkORMDo
	Unscoped() IPlaidLinkORMDo
	Create(values ...*financial_servicev1.PlaidLinkORM) error
	CreateInBatches(values []*financial_servicev1.PlaidLinkORM, batchSize int) error
	Save(values ...*financial_servicev1.PlaidLinkORM) error
	First() (*financial_servicev1.PlaidLinkORM, error)
	Take() (*financial_servicev1.PlaidLinkORM, error)
	Last() (*financial_servicev1.PlaidLinkORM, error)
	Find() ([]*financial_servicev1.PlaidLinkORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.PlaidLinkORM, err error)
	FindInBatches(result *[]*financial_servicev1.PlaidLinkORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.PlaidLinkORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlaidLinkORMDo
	Assign(attrs ...field.AssignExpr) IPlaidLinkORMDo
	Joins(fields ...field.RelationField) IPlaidLinkORMDo
	Preload(fields ...field.RelationField) IPlaidLinkORMDo
	FirstOrInit() (*financial_servicev1.PlaidLinkORM, error)
	FirstOrCreate() (*financial_servicev1.PlaidLinkORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.PlaidLinkORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlaidLinkORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.PlaidLinkORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.PlaidLinkORM, err error)
	CreateRecord(item financial_servicev1.PlaidLinkORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.PlaidLinkORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.PlaidLinkORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (p plaidLinkORMDo) GetRecordByID(id int) (result financial_servicev1.PlaidLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM plaid_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (p plaidLinkORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.PlaidLinkORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM plaid_links ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (p plaidLinkORMDo) CreateRecord(item financial_servicev1.PlaidLinkORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO plaid_links (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (p plaidLinkORMDo) UpdateRecordByID(id int, item financial_servicev1.PlaidLinkORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE plaid_links SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (p plaidLinkORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM plaid_links ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (p plaidLinkORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.PlaidLinkORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM plaid_links ORDER BY " + p.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (p plaidLinkORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM plaid_links ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p plaidLinkORMDo) Debug() IPlaidLinkORMDo {
	return p.withDO(p.DO.Debug())
}

func (p plaidLinkORMDo) WithContext(ctx context.Context) IPlaidLinkORMDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p plaidLinkORMDo) ReadDB() IPlaidLinkORMDo {
	return p.Clauses(dbresolver.Read)
}

func (p plaidLinkORMDo) WriteDB() IPlaidLinkORMDo {
	return p.Clauses(dbresolver.Write)
}

func (p plaidLinkORMDo) Session(config *gorm.Session) IPlaidLinkORMDo {
	return p.withDO(p.DO.Session(config))
}

func (p plaidLinkORMDo) Clauses(conds ...clause.Expression) IPlaidLinkORMDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p plaidLinkORMDo) Returning(value interface{}, columns ...string) IPlaidLinkORMDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p plaidLinkORMDo) Not(conds ...gen.Condition) IPlaidLinkORMDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p plaidLinkORMDo) Or(conds ...gen.Condition) IPlaidLinkORMDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p plaidLinkORMDo) Select(conds ...field.Expr) IPlaidLinkORMDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p plaidLinkORMDo) Where(conds ...gen.Condition) IPlaidLinkORMDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p plaidLinkORMDo) Order(conds ...field.Expr) IPlaidLinkORMDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p plaidLinkORMDo) Distinct(cols ...field.Expr) IPlaidLinkORMDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p plaidLinkORMDo) Omit(cols ...field.Expr) IPlaidLinkORMDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p plaidLinkORMDo) Join(table schema.Tabler, on ...field.Expr) IPlaidLinkORMDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p plaidLinkORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlaidLinkORMDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p plaidLinkORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlaidLinkORMDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p plaidLinkORMDo) Group(cols ...field.Expr) IPlaidLinkORMDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p plaidLinkORMDo) Having(conds ...gen.Condition) IPlaidLinkORMDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p plaidLinkORMDo) Limit(limit int) IPlaidLinkORMDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p plaidLinkORMDo) Offset(offset int) IPlaidLinkORMDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p plaidLinkORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlaidLinkORMDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p plaidLinkORMDo) Unscoped() IPlaidLinkORMDo {
	return p.withDO(p.DO.Unscoped())
}

func (p plaidLinkORMDo) Create(values ...*financial_servicev1.PlaidLinkORM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p plaidLinkORMDo) CreateInBatches(values []*financial_servicev1.PlaidLinkORM, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p plaidLinkORMDo) Save(values ...*financial_servicev1.PlaidLinkORM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p plaidLinkORMDo) First() (*financial_servicev1.PlaidLinkORM, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidLinkORM), nil
	}
}

func (p plaidLinkORMDo) Take() (*financial_servicev1.PlaidLinkORM, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidLinkORM), nil
	}
}

func (p plaidLinkORMDo) Last() (*financial_servicev1.PlaidLinkORM, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidLinkORM), nil
	}
}

func (p plaidLinkORMDo) Find() ([]*financial_servicev1.PlaidLinkORM, error) {
	result, err := p.DO.Find()
	return result.([]*financial_servicev1.PlaidLinkORM), err
}

func (p plaidLinkORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.PlaidLinkORM, err error) {
	buf := make([]*financial_servicev1.PlaidLinkORM, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p plaidLinkORMDo) FindInBatches(result *[]*financial_servicev1.PlaidLinkORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p plaidLinkORMDo) Attrs(attrs ...field.AssignExpr) IPlaidLinkORMDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p plaidLinkORMDo) Assign(attrs ...field.AssignExpr) IPlaidLinkORMDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p plaidLinkORMDo) Joins(fields ...field.RelationField) IPlaidLinkORMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p plaidLinkORMDo) Preload(fields ...field.RelationField) IPlaidLinkORMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p plaidLinkORMDo) FirstOrInit() (*financial_servicev1.PlaidLinkORM, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidLinkORM), nil
	}
}

func (p plaidLinkORMDo) FirstOrCreate() (*financial_servicev1.PlaidLinkORM, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidLinkORM), nil
	}
}

func (p plaidLinkORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.PlaidLinkORM, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p plaidLinkORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p plaidLinkORMDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p plaidLinkORMDo) Delete(models ...*financial_servicev1.PlaidLinkORM) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *plaidLinkORMDo) withDO(do gen.Dao) *plaidLinkORMDo {
	p.DO = *do.(*gen.DO)
	return p
}
