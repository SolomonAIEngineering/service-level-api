// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newMilestoneORM(db *gorm.DB, opts ...gen.DOOption) milestoneORM {
	_milestoneORM := milestoneORM{}

	_milestoneORM.milestoneORMDo.UseDB(db, opts...)
	_milestoneORM.milestoneORMDo.UseModel(&financial_servicev1.MilestoneORM{})

	tableName := _milestoneORM.milestoneORMDo.TableName()
	_milestoneORM.ALL = field.NewAsterisk(tableName)
	_milestoneORM.Description = field.NewString(tableName, "description")
	_milestoneORM.Id = field.NewUint64(tableName, "id")
	_milestoneORM.IsCompleted = field.NewBool(tableName, "is_completed")
	_milestoneORM.Name = field.NewString(tableName, "name")
	_milestoneORM.SmartGoalId = field.NewUint64(tableName, "smart_goal_id")
	_milestoneORM.TargetAmount = field.NewString(tableName, "target_amount")
	_milestoneORM.TargetDate = field.NewString(tableName, "target_date")
	_milestoneORM.Budget = milestoneORMHasOneBudget{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Budget", "financial_servicev1.BudgetORM"),
		Category: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Budget.Category", "financial_servicev1.CategoryORM"),
		},
	}

	_milestoneORM.fillFieldMap()

	return _milestoneORM
}

type milestoneORM struct {
	milestoneORMDo

	ALL          field.Asterisk
	Description  field.String
	Id           field.Uint64
	IsCompleted  field.Bool
	Name         field.String
	SmartGoalId  field.Uint64
	TargetAmount field.String
	TargetDate   field.String
	Budget       milestoneORMHasOneBudget

	fieldMap map[string]field.Expr
}

func (m milestoneORM) Table(newTableName string) *milestoneORM {
	m.milestoneORMDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m milestoneORM) As(alias string) *milestoneORM {
	m.milestoneORMDo.DO = *(m.milestoneORMDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *milestoneORM) updateTableName(table string) *milestoneORM {
	m.ALL = field.NewAsterisk(table)
	m.Description = field.NewString(table, "description")
	m.Id = field.NewUint64(table, "id")
	m.IsCompleted = field.NewBool(table, "is_completed")
	m.Name = field.NewString(table, "name")
	m.SmartGoalId = field.NewUint64(table, "smart_goal_id")
	m.TargetAmount = field.NewString(table, "target_amount")
	m.TargetDate = field.NewString(table, "target_date")

	m.fillFieldMap()

	return m
}

func (m *milestoneORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *milestoneORM) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["description"] = m.Description
	m.fieldMap["id"] = m.Id
	m.fieldMap["is_completed"] = m.IsCompleted
	m.fieldMap["name"] = m.Name
	m.fieldMap["smart_goal_id"] = m.SmartGoalId
	m.fieldMap["target_amount"] = m.TargetAmount
	m.fieldMap["target_date"] = m.TargetDate

}

func (m milestoneORM) clone(db *gorm.DB) milestoneORM {
	m.milestoneORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m milestoneORM) replaceDB(db *gorm.DB) milestoneORM {
	m.milestoneORMDo.ReplaceDB(db)
	return m
}

type milestoneORMHasOneBudget struct {
	db *gorm.DB

	field.RelationField

	Category struct {
		field.RelationField
	}
}

func (a milestoneORMHasOneBudget) Where(conds ...field.Expr) *milestoneORMHasOneBudget {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a milestoneORMHasOneBudget) WithContext(ctx context.Context) *milestoneORMHasOneBudget {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a milestoneORMHasOneBudget) Session(session *gorm.Session) *milestoneORMHasOneBudget {
	a.db = a.db.Session(session)
	return &a
}

func (a milestoneORMHasOneBudget) Model(m *financial_servicev1.MilestoneORM) *milestoneORMHasOneBudgetTx {
	return &milestoneORMHasOneBudgetTx{a.db.Model(m).Association(a.Name())}
}

type milestoneORMHasOneBudgetTx struct{ tx *gorm.Association }

func (a milestoneORMHasOneBudgetTx) Find() (result *financial_servicev1.BudgetORM, err error) {
	return result, a.tx.Find(&result)
}

func (a milestoneORMHasOneBudgetTx) Append(values ...*financial_servicev1.BudgetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a milestoneORMHasOneBudgetTx) Replace(values ...*financial_servicev1.BudgetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a milestoneORMHasOneBudgetTx) Delete(values ...*financial_servicev1.BudgetORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a milestoneORMHasOneBudgetTx) Clear() error {
	return a.tx.Clear()
}

func (a milestoneORMHasOneBudgetTx) Count() int64 {
	return a.tx.Count()
}

type milestoneORMDo struct{ gen.DO }

type IMilestoneORMDo interface {
	gen.SubQuery
	Debug() IMilestoneORMDo
	WithContext(ctx context.Context) IMilestoneORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMilestoneORMDo
	WriteDB() IMilestoneORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMilestoneORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMilestoneORMDo
	Not(conds ...gen.Condition) IMilestoneORMDo
	Or(conds ...gen.Condition) IMilestoneORMDo
	Select(conds ...field.Expr) IMilestoneORMDo
	Where(conds ...gen.Condition) IMilestoneORMDo
	Order(conds ...field.Expr) IMilestoneORMDo
	Distinct(cols ...field.Expr) IMilestoneORMDo
	Omit(cols ...field.Expr) IMilestoneORMDo
	Join(table schema.Tabler, on ...field.Expr) IMilestoneORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMilestoneORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMilestoneORMDo
	Group(cols ...field.Expr) IMilestoneORMDo
	Having(conds ...gen.Condition) IMilestoneORMDo
	Limit(limit int) IMilestoneORMDo
	Offset(offset int) IMilestoneORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMilestoneORMDo
	Unscoped() IMilestoneORMDo
	Create(values ...*financial_servicev1.MilestoneORM) error
	CreateInBatches(values []*financial_servicev1.MilestoneORM, batchSize int) error
	Save(values ...*financial_servicev1.MilestoneORM) error
	First() (*financial_servicev1.MilestoneORM, error)
	Take() (*financial_servicev1.MilestoneORM, error)
	Last() (*financial_servicev1.MilestoneORM, error)
	Find() ([]*financial_servicev1.MilestoneORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.MilestoneORM, err error)
	FindInBatches(result *[]*financial_servicev1.MilestoneORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.MilestoneORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMilestoneORMDo
	Assign(attrs ...field.AssignExpr) IMilestoneORMDo
	Joins(fields ...field.RelationField) IMilestoneORMDo
	Preload(fields ...field.RelationField) IMilestoneORMDo
	FirstOrInit() (*financial_servicev1.MilestoneORM, error)
	FirstOrCreate() (*financial_servicev1.MilestoneORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.MilestoneORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMilestoneORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.MilestoneORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.MilestoneORM, err error)
	CreateRecord(item financial_servicev1.MilestoneORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.MilestoneORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.MilestoneORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.MilestoneORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.MilestoneORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m milestoneORMDo) GetRecordByID(id int) (result financial_servicev1.MilestoneORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM milestones ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m milestoneORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.MilestoneORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM milestones ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (m milestoneORMDo) CreateRecord(item financial_servicev1.MilestoneORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO milestones (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (m milestoneORMDo) UpdateRecordByID(id int, item financial_servicev1.MilestoneORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE milestones SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m milestoneORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM milestones ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (m milestoneORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.MilestoneORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM milestones ORDER BY " + m.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (m milestoneORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM milestones ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (m milestoneORMDo) GetByID(id uint64) (result financial_servicev1.MilestoneORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM milestones ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (m milestoneORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.MilestoneORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM milestones ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m milestoneORMDo) Debug() IMilestoneORMDo {
	return m.withDO(m.DO.Debug())
}

func (m milestoneORMDo) WithContext(ctx context.Context) IMilestoneORMDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m milestoneORMDo) ReadDB() IMilestoneORMDo {
	return m.Clauses(dbresolver.Read)
}

func (m milestoneORMDo) WriteDB() IMilestoneORMDo {
	return m.Clauses(dbresolver.Write)
}

func (m milestoneORMDo) Session(config *gorm.Session) IMilestoneORMDo {
	return m.withDO(m.DO.Session(config))
}

func (m milestoneORMDo) Clauses(conds ...clause.Expression) IMilestoneORMDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m milestoneORMDo) Returning(value interface{}, columns ...string) IMilestoneORMDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m milestoneORMDo) Not(conds ...gen.Condition) IMilestoneORMDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m milestoneORMDo) Or(conds ...gen.Condition) IMilestoneORMDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m milestoneORMDo) Select(conds ...field.Expr) IMilestoneORMDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m milestoneORMDo) Where(conds ...gen.Condition) IMilestoneORMDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m milestoneORMDo) Order(conds ...field.Expr) IMilestoneORMDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m milestoneORMDo) Distinct(cols ...field.Expr) IMilestoneORMDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m milestoneORMDo) Omit(cols ...field.Expr) IMilestoneORMDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m milestoneORMDo) Join(table schema.Tabler, on ...field.Expr) IMilestoneORMDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m milestoneORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMilestoneORMDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m milestoneORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IMilestoneORMDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m milestoneORMDo) Group(cols ...field.Expr) IMilestoneORMDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m milestoneORMDo) Having(conds ...gen.Condition) IMilestoneORMDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m milestoneORMDo) Limit(limit int) IMilestoneORMDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m milestoneORMDo) Offset(offset int) IMilestoneORMDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m milestoneORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMilestoneORMDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m milestoneORMDo) Unscoped() IMilestoneORMDo {
	return m.withDO(m.DO.Unscoped())
}

func (m milestoneORMDo) Create(values ...*financial_servicev1.MilestoneORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m milestoneORMDo) CreateInBatches(values []*financial_servicev1.MilestoneORM, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m milestoneORMDo) Save(values ...*financial_servicev1.MilestoneORM) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m milestoneORMDo) First() (*financial_servicev1.MilestoneORM, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.MilestoneORM), nil
	}
}

func (m milestoneORMDo) Take() (*financial_servicev1.MilestoneORM, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.MilestoneORM), nil
	}
}

func (m milestoneORMDo) Last() (*financial_servicev1.MilestoneORM, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.MilestoneORM), nil
	}
}

func (m milestoneORMDo) Find() ([]*financial_servicev1.MilestoneORM, error) {
	result, err := m.DO.Find()
	return result.([]*financial_servicev1.MilestoneORM), err
}

func (m milestoneORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.MilestoneORM, err error) {
	buf := make([]*financial_servicev1.MilestoneORM, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m milestoneORMDo) FindInBatches(result *[]*financial_servicev1.MilestoneORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m milestoneORMDo) Attrs(attrs ...field.AssignExpr) IMilestoneORMDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m milestoneORMDo) Assign(attrs ...field.AssignExpr) IMilestoneORMDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m milestoneORMDo) Joins(fields ...field.RelationField) IMilestoneORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m milestoneORMDo) Preload(fields ...field.RelationField) IMilestoneORMDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m milestoneORMDo) FirstOrInit() (*financial_servicev1.MilestoneORM, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.MilestoneORM), nil
	}
}

func (m milestoneORMDo) FirstOrCreate() (*financial_servicev1.MilestoneORM, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.MilestoneORM), nil
	}
}

func (m milestoneORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.MilestoneORM, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m milestoneORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m milestoneORMDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m milestoneORMDo) Delete(models ...*financial_servicev1.MilestoneORM) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *milestoneORMDo) withDO(do gen.Dao) *milestoneORMDo {
	m.DO = *do.(*gen.DO)
	return m
}
