// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newPersonalActionableInsightORM(db *gorm.DB, opts ...gen.DOOption) personalActionableInsightORM {
	_personalActionableInsightORM := personalActionableInsightORM{}

	_personalActionableInsightORM.personalActionableInsightORMDo.UseDB(db, opts...)
	_personalActionableInsightORM.personalActionableInsightORMDo.UseModel(&financial_servicev1.PersonalActionableInsightORM{})

	tableName := _personalActionableInsightORM.personalActionableInsightORMDo.TableName()
	_personalActionableInsightORM.ALL = field.NewAsterisk(tableName)
	_personalActionableInsightORM.Action = field.NewString(tableName, "action")
	_personalActionableInsightORM.Description = field.NewString(tableName, "description")
	_personalActionableInsightORM.ExpectedBenefit = field.NewString(tableName, "expected_benefit")
	_personalActionableInsightORM.GeneratedTime = field.NewTime(tableName, "generated_time")
	_personalActionableInsightORM.Id = field.NewUint64(tableName, "id")
	_personalActionableInsightORM.InsightName = field.NewString(tableName, "insight_name")
	_personalActionableInsightORM.MetricsToOptimizeFor = field.NewField(tableName, "metrics_to_optimize_for")
	_personalActionableInsightORM.Tags = field.NewField(tableName, "tags")
	_personalActionableInsightORM.Takeaway = field.NewString(tableName, "takeaway")
	_personalActionableInsightORM.UserProfileId = field.NewUint64(tableName, "user_profile_id")

	_personalActionableInsightORM.fillFieldMap()

	return _personalActionableInsightORM
}

type personalActionableInsightORM struct {
	personalActionableInsightORMDo

	ALL                  field.Asterisk
	Action               field.String
	Description          field.String
	ExpectedBenefit      field.String
	GeneratedTime        field.Time
	Id                   field.Uint64
	InsightName          field.String
	MetricsToOptimizeFor field.Field
	Tags                 field.Field
	Takeaway             field.String
	UserProfileId        field.Uint64

	fieldMap map[string]field.Expr
}

func (p personalActionableInsightORM) Table(newTableName string) *personalActionableInsightORM {
	p.personalActionableInsightORMDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p personalActionableInsightORM) As(alias string) *personalActionableInsightORM {
	p.personalActionableInsightORMDo.DO = *(p.personalActionableInsightORMDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *personalActionableInsightORM) updateTableName(table string) *personalActionableInsightORM {
	p.ALL = field.NewAsterisk(table)
	p.Action = field.NewString(table, "action")
	p.Description = field.NewString(table, "description")
	p.ExpectedBenefit = field.NewString(table, "expected_benefit")
	p.GeneratedTime = field.NewTime(table, "generated_time")
	p.Id = field.NewUint64(table, "id")
	p.InsightName = field.NewString(table, "insight_name")
	p.MetricsToOptimizeFor = field.NewField(table, "metrics_to_optimize_for")
	p.Tags = field.NewField(table, "tags")
	p.Takeaway = field.NewString(table, "takeaway")
	p.UserProfileId = field.NewUint64(table, "user_profile_id")

	p.fillFieldMap()

	return p
}

func (p *personalActionableInsightORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *personalActionableInsightORM) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["action"] = p.Action
	p.fieldMap["description"] = p.Description
	p.fieldMap["expected_benefit"] = p.ExpectedBenefit
	p.fieldMap["generated_time"] = p.GeneratedTime
	p.fieldMap["id"] = p.Id
	p.fieldMap["insight_name"] = p.InsightName
	p.fieldMap["metrics_to_optimize_for"] = p.MetricsToOptimizeFor
	p.fieldMap["tags"] = p.Tags
	p.fieldMap["takeaway"] = p.Takeaway
	p.fieldMap["user_profile_id"] = p.UserProfileId
}

func (p personalActionableInsightORM) clone(db *gorm.DB) personalActionableInsightORM {
	p.personalActionableInsightORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p personalActionableInsightORM) replaceDB(db *gorm.DB) personalActionableInsightORM {
	p.personalActionableInsightORMDo.ReplaceDB(db)
	return p
}

type personalActionableInsightORMDo struct{ gen.DO }

type IPersonalActionableInsightORMDo interface {
	gen.SubQuery
	Debug() IPersonalActionableInsightORMDo
	WithContext(ctx context.Context) IPersonalActionableInsightORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPersonalActionableInsightORMDo
	WriteDB() IPersonalActionableInsightORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPersonalActionableInsightORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPersonalActionableInsightORMDo
	Not(conds ...gen.Condition) IPersonalActionableInsightORMDo
	Or(conds ...gen.Condition) IPersonalActionableInsightORMDo
	Select(conds ...field.Expr) IPersonalActionableInsightORMDo
	Where(conds ...gen.Condition) IPersonalActionableInsightORMDo
	Order(conds ...field.Expr) IPersonalActionableInsightORMDo
	Distinct(cols ...field.Expr) IPersonalActionableInsightORMDo
	Omit(cols ...field.Expr) IPersonalActionableInsightORMDo
	Join(table schema.Tabler, on ...field.Expr) IPersonalActionableInsightORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPersonalActionableInsightORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPersonalActionableInsightORMDo
	Group(cols ...field.Expr) IPersonalActionableInsightORMDo
	Having(conds ...gen.Condition) IPersonalActionableInsightORMDo
	Limit(limit int) IPersonalActionableInsightORMDo
	Offset(offset int) IPersonalActionableInsightORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPersonalActionableInsightORMDo
	Unscoped() IPersonalActionableInsightORMDo
	Create(values ...*financial_servicev1.PersonalActionableInsightORM) error
	CreateInBatches(values []*financial_servicev1.PersonalActionableInsightORM, batchSize int) error
	Save(values ...*financial_servicev1.PersonalActionableInsightORM) error
	First() (*financial_servicev1.PersonalActionableInsightORM, error)
	Take() (*financial_servicev1.PersonalActionableInsightORM, error)
	Last() (*financial_servicev1.PersonalActionableInsightORM, error)
	Find() ([]*financial_servicev1.PersonalActionableInsightORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.PersonalActionableInsightORM, err error)
	FindInBatches(result *[]*financial_servicev1.PersonalActionableInsightORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.PersonalActionableInsightORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPersonalActionableInsightORMDo
	Assign(attrs ...field.AssignExpr) IPersonalActionableInsightORMDo
	Joins(fields ...field.RelationField) IPersonalActionableInsightORMDo
	Preload(fields ...field.RelationField) IPersonalActionableInsightORMDo
	FirstOrInit() (*financial_servicev1.PersonalActionableInsightORM, error)
	FirstOrCreate() (*financial_servicev1.PersonalActionableInsightORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.PersonalActionableInsightORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPersonalActionableInsightORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.PersonalActionableInsightORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.PersonalActionableInsightORM, err error)
	CreateRecord(item financial_servicev1.PersonalActionableInsightORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.PersonalActionableInsightORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.PersonalActionableInsightORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (p personalActionableInsightORMDo) GetRecordByID(id int) (result financial_servicev1.PersonalActionableInsightORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM personal_actionable_insights ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (p personalActionableInsightORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.PersonalActionableInsightORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM personal_actionable_insights ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (p personalActionableInsightORMDo) CreateRecord(item financial_servicev1.PersonalActionableInsightORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO personal_actionable_insights (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (p personalActionableInsightORMDo) UpdateRecordByID(id int, item financial_servicev1.PersonalActionableInsightORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE personal_actionable_insights SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (p personalActionableInsightORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM personal_actionable_insights ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (p personalActionableInsightORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.PersonalActionableInsightORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM personal_actionable_insights ORDER BY " + p.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (p personalActionableInsightORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM personal_actionable_insights ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p personalActionableInsightORMDo) Debug() IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Debug())
}

func (p personalActionableInsightORMDo) WithContext(ctx context.Context) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p personalActionableInsightORMDo) ReadDB() IPersonalActionableInsightORMDo {
	return p.Clauses(dbresolver.Read)
}

func (p personalActionableInsightORMDo) WriteDB() IPersonalActionableInsightORMDo {
	return p.Clauses(dbresolver.Write)
}

func (p personalActionableInsightORMDo) Session(config *gorm.Session) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Session(config))
}

func (p personalActionableInsightORMDo) Clauses(conds ...clause.Expression) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p personalActionableInsightORMDo) Returning(value interface{}, columns ...string) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p personalActionableInsightORMDo) Not(conds ...gen.Condition) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p personalActionableInsightORMDo) Or(conds ...gen.Condition) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p personalActionableInsightORMDo) Select(conds ...field.Expr) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p personalActionableInsightORMDo) Where(conds ...gen.Condition) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p personalActionableInsightORMDo) Order(conds ...field.Expr) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p personalActionableInsightORMDo) Distinct(cols ...field.Expr) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p personalActionableInsightORMDo) Omit(cols ...field.Expr) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p personalActionableInsightORMDo) Join(table schema.Tabler, on ...field.Expr) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p personalActionableInsightORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p personalActionableInsightORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p personalActionableInsightORMDo) Group(cols ...field.Expr) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p personalActionableInsightORMDo) Having(conds ...gen.Condition) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p personalActionableInsightORMDo) Limit(limit int) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p personalActionableInsightORMDo) Offset(offset int) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p personalActionableInsightORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p personalActionableInsightORMDo) Unscoped() IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Unscoped())
}

func (p personalActionableInsightORMDo) Create(values ...*financial_servicev1.PersonalActionableInsightORM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p personalActionableInsightORMDo) CreateInBatches(values []*financial_servicev1.PersonalActionableInsightORM, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p personalActionableInsightORMDo) Save(values ...*financial_servicev1.PersonalActionableInsightORM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p personalActionableInsightORMDo) First() (*financial_servicev1.PersonalActionableInsightORM, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PersonalActionableInsightORM), nil
	}
}

func (p personalActionableInsightORMDo) Take() (*financial_servicev1.PersonalActionableInsightORM, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PersonalActionableInsightORM), nil
	}
}

func (p personalActionableInsightORMDo) Last() (*financial_servicev1.PersonalActionableInsightORM, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PersonalActionableInsightORM), nil
	}
}

func (p personalActionableInsightORMDo) Find() ([]*financial_servicev1.PersonalActionableInsightORM, error) {
	result, err := p.DO.Find()
	return result.([]*financial_servicev1.PersonalActionableInsightORM), err
}

func (p personalActionableInsightORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.PersonalActionableInsightORM, err error) {
	buf := make([]*financial_servicev1.PersonalActionableInsightORM, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p personalActionableInsightORMDo) FindInBatches(result *[]*financial_servicev1.PersonalActionableInsightORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p personalActionableInsightORMDo) Attrs(attrs ...field.AssignExpr) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p personalActionableInsightORMDo) Assign(attrs ...field.AssignExpr) IPersonalActionableInsightORMDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p personalActionableInsightORMDo) Joins(fields ...field.RelationField) IPersonalActionableInsightORMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p personalActionableInsightORMDo) Preload(fields ...field.RelationField) IPersonalActionableInsightORMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p personalActionableInsightORMDo) FirstOrInit() (*financial_servicev1.PersonalActionableInsightORM, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PersonalActionableInsightORM), nil
	}
}

func (p personalActionableInsightORMDo) FirstOrCreate() (*financial_servicev1.PersonalActionableInsightORM, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PersonalActionableInsightORM), nil
	}
}

func (p personalActionableInsightORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.PersonalActionableInsightORM, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p personalActionableInsightORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p personalActionableInsightORMDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p personalActionableInsightORMDo) Delete(models ...*financial_servicev1.PersonalActionableInsightORM) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *personalActionableInsightORMDo) withDO(do gen.Dao) *personalActionableInsightORMDo {
	p.DO = *do.(*gen.DO)
	return p
}
