// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
)

func newPlaidAccountInvestmentTransactionORM(db *gorm.DB, opts ...gen.DOOption) plaidAccountInvestmentTransactionORM {
	_plaidAccountInvestmentTransactionORM := plaidAccountInvestmentTransactionORM{}

	_plaidAccountInvestmentTransactionORM.plaidAccountInvestmentTransactionORMDo.UseDB(db, opts...)
	_plaidAccountInvestmentTransactionORM.plaidAccountInvestmentTransactionORMDo.UseModel(&financial_servicev1.PlaidAccountInvestmentTransactionORM{})

	tableName := _plaidAccountInvestmentTransactionORM.plaidAccountInvestmentTransactionORMDo.TableName()
	_plaidAccountInvestmentTransactionORM.ALL = field.NewAsterisk(tableName)
	_plaidAccountInvestmentTransactionORM.AccountId = field.NewString(tableName, "account_id")
	_plaidAccountInvestmentTransactionORM.Ammount = field.NewString(tableName, "ammount")
	_plaidAccountInvestmentTransactionORM.Amount = field.NewFloat64(tableName, "amount")
	_plaidAccountInvestmentTransactionORM.CreatedAt = field.NewString(tableName, "created_at")
	_plaidAccountInvestmentTransactionORM.CurrentDate = field.NewString(tableName, "current_date")
	_plaidAccountInvestmentTransactionORM.Fees = field.NewFloat64(tableName, "fees")
	_plaidAccountInvestmentTransactionORM.Id = field.NewUint64(tableName, "id")
	_plaidAccountInvestmentTransactionORM.InvestmentTransactionId = field.NewString(tableName, "investment_transaction_id")
	_plaidAccountInvestmentTransactionORM.IsoCurrencyCode = field.NewString(tableName, "iso_currency_code")
	_plaidAccountInvestmentTransactionORM.LinkId = field.NewUint64(tableName, "link_id")
	_plaidAccountInvestmentTransactionORM.Name = field.NewString(tableName, "name")
	_plaidAccountInvestmentTransactionORM.Price = field.NewFloat64(tableName, "price")
	_plaidAccountInvestmentTransactionORM.Quantity = field.NewFloat64(tableName, "quantity")
	_plaidAccountInvestmentTransactionORM.SecurityId = field.NewString(tableName, "security_id")
	_plaidAccountInvestmentTransactionORM.Subtype = field.NewString(tableName, "subtype")
	_plaidAccountInvestmentTransactionORM.Time = field.NewTime(tableName, "time")
	_plaidAccountInvestmentTransactionORM.Type = field.NewString(tableName, "type")
	_plaidAccountInvestmentTransactionORM.UnofficialCurrencyCode = field.NewString(tableName, "unofficial_currency_code")
	_plaidAccountInvestmentTransactionORM.UserId = field.NewUint64(tableName, "user_id")

	_plaidAccountInvestmentTransactionORM.fillFieldMap()

	return _plaidAccountInvestmentTransactionORM
}

type plaidAccountInvestmentTransactionORM struct {
	plaidAccountInvestmentTransactionORMDo

	ALL                     field.Asterisk
	AccountId               field.String
	Ammount                 field.String
	Amount                  field.Float64
	CreatedAt               field.String
	CurrentDate             field.String
	Fees                    field.Float64
	Id                      field.Uint64
	InvestmentTransactionId field.String
	IsoCurrencyCode         field.String
	LinkId                  field.Uint64
	Name                    field.String
	Price                   field.Float64
	Quantity                field.Float64
	SecurityId              field.String
	Subtype                 field.String
	Time                    field.Time
	Type                    field.String
	UnofficialCurrencyCode  field.String
	UserId                  field.Uint64

	fieldMap map[string]field.Expr
}

func (p plaidAccountInvestmentTransactionORM) Table(newTableName string) *plaidAccountInvestmentTransactionORM {
	p.plaidAccountInvestmentTransactionORMDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p plaidAccountInvestmentTransactionORM) As(alias string) *plaidAccountInvestmentTransactionORM {
	p.plaidAccountInvestmentTransactionORMDo.DO = *(p.plaidAccountInvestmentTransactionORMDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *plaidAccountInvestmentTransactionORM) updateTableName(table string) *plaidAccountInvestmentTransactionORM {
	p.ALL = field.NewAsterisk(table)
	p.AccountId = field.NewString(table, "account_id")
	p.Ammount = field.NewString(table, "ammount")
	p.Amount = field.NewFloat64(table, "amount")
	p.CreatedAt = field.NewString(table, "created_at")
	p.CurrentDate = field.NewString(table, "current_date")
	p.Fees = field.NewFloat64(table, "fees")
	p.Id = field.NewUint64(table, "id")
	p.InvestmentTransactionId = field.NewString(table, "investment_transaction_id")
	p.IsoCurrencyCode = field.NewString(table, "iso_currency_code")
	p.LinkId = field.NewUint64(table, "link_id")
	p.Name = field.NewString(table, "name")
	p.Price = field.NewFloat64(table, "price")
	p.Quantity = field.NewFloat64(table, "quantity")
	p.SecurityId = field.NewString(table, "security_id")
	p.Subtype = field.NewString(table, "subtype")
	p.Time = field.NewTime(table, "time")
	p.Type = field.NewString(table, "type")
	p.UnofficialCurrencyCode = field.NewString(table, "unofficial_currency_code")
	p.UserId = field.NewUint64(table, "user_id")

	p.fillFieldMap()

	return p
}

func (p *plaidAccountInvestmentTransactionORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *plaidAccountInvestmentTransactionORM) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 19)
	p.fieldMap["account_id"] = p.AccountId
	p.fieldMap["ammount"] = p.Ammount
	p.fieldMap["amount"] = p.Amount
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["current_date"] = p.CurrentDate
	p.fieldMap["fees"] = p.Fees
	p.fieldMap["id"] = p.Id
	p.fieldMap["investment_transaction_id"] = p.InvestmentTransactionId
	p.fieldMap["iso_currency_code"] = p.IsoCurrencyCode
	p.fieldMap["link_id"] = p.LinkId
	p.fieldMap["name"] = p.Name
	p.fieldMap["price"] = p.Price
	p.fieldMap["quantity"] = p.Quantity
	p.fieldMap["security_id"] = p.SecurityId
	p.fieldMap["subtype"] = p.Subtype
	p.fieldMap["time"] = p.Time
	p.fieldMap["type"] = p.Type
	p.fieldMap["unofficial_currency_code"] = p.UnofficialCurrencyCode
	p.fieldMap["user_id"] = p.UserId
}

func (p plaidAccountInvestmentTransactionORM) clone(db *gorm.DB) plaidAccountInvestmentTransactionORM {
	p.plaidAccountInvestmentTransactionORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p plaidAccountInvestmentTransactionORM) replaceDB(db *gorm.DB) plaidAccountInvestmentTransactionORM {
	p.plaidAccountInvestmentTransactionORMDo.ReplaceDB(db)
	return p
}

type plaidAccountInvestmentTransactionORMDo struct{ gen.DO }

type IPlaidAccountInvestmentTransactionORMDo interface {
	gen.SubQuery
	Debug() IPlaidAccountInvestmentTransactionORMDo
	WithContext(ctx context.Context) IPlaidAccountInvestmentTransactionORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlaidAccountInvestmentTransactionORMDo
	WriteDB() IPlaidAccountInvestmentTransactionORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlaidAccountInvestmentTransactionORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlaidAccountInvestmentTransactionORMDo
	Not(conds ...gen.Condition) IPlaidAccountInvestmentTransactionORMDo
	Or(conds ...gen.Condition) IPlaidAccountInvestmentTransactionORMDo
	Select(conds ...field.Expr) IPlaidAccountInvestmentTransactionORMDo
	Where(conds ...gen.Condition) IPlaidAccountInvestmentTransactionORMDo
	Order(conds ...field.Expr) IPlaidAccountInvestmentTransactionORMDo
	Distinct(cols ...field.Expr) IPlaidAccountInvestmentTransactionORMDo
	Omit(cols ...field.Expr) IPlaidAccountInvestmentTransactionORMDo
	Join(table schema.Tabler, on ...field.Expr) IPlaidAccountInvestmentTransactionORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlaidAccountInvestmentTransactionORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlaidAccountInvestmentTransactionORMDo
	Group(cols ...field.Expr) IPlaidAccountInvestmentTransactionORMDo
	Having(conds ...gen.Condition) IPlaidAccountInvestmentTransactionORMDo
	Limit(limit int) IPlaidAccountInvestmentTransactionORMDo
	Offset(offset int) IPlaidAccountInvestmentTransactionORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlaidAccountInvestmentTransactionORMDo
	Unscoped() IPlaidAccountInvestmentTransactionORMDo
	Create(values ...*financial_servicev1.PlaidAccountInvestmentTransactionORM) error
	CreateInBatches(values []*financial_servicev1.PlaidAccountInvestmentTransactionORM, batchSize int) error
	Save(values ...*financial_servicev1.PlaidAccountInvestmentTransactionORM) error
	First() (*financial_servicev1.PlaidAccountInvestmentTransactionORM, error)
	Take() (*financial_servicev1.PlaidAccountInvestmentTransactionORM, error)
	Last() (*financial_servicev1.PlaidAccountInvestmentTransactionORM, error)
	Find() ([]*financial_servicev1.PlaidAccountInvestmentTransactionORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.PlaidAccountInvestmentTransactionORM, err error)
	FindInBatches(result *[]*financial_servicev1.PlaidAccountInvestmentTransactionORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.PlaidAccountInvestmentTransactionORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlaidAccountInvestmentTransactionORMDo
	Assign(attrs ...field.AssignExpr) IPlaidAccountInvestmentTransactionORMDo
	Joins(fields ...field.RelationField) IPlaidAccountInvestmentTransactionORMDo
	Preload(fields ...field.RelationField) IPlaidAccountInvestmentTransactionORMDo
	FirstOrInit() (*financial_servicev1.PlaidAccountInvestmentTransactionORM, error)
	FirstOrCreate() (*financial_servicev1.PlaidAccountInvestmentTransactionORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.PlaidAccountInvestmentTransactionORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlaidAccountInvestmentTransactionORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.PlaidAccountInvestmentTransactionORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.PlaidAccountInvestmentTransactionORM, err error)
	CreateRecord(item financial_servicev1.PlaidAccountInvestmentTransactionORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.PlaidAccountInvestmentTransactionORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.PlaidAccountInvestmentTransactionORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (p plaidAccountInvestmentTransactionORMDo) GetRecordByID(id int) (result financial_servicev1.PlaidAccountInvestmentTransactionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM plaid_account_investment_transactions ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (p plaidAccountInvestmentTransactionORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.PlaidAccountInvestmentTransactionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM plaid_account_investment_transactions ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (p plaidAccountInvestmentTransactionORMDo) CreateRecord(item financial_servicev1.PlaidAccountInvestmentTransactionORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO plaid_account_investment_transactions (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (p plaidAccountInvestmentTransactionORMDo) UpdateRecordByID(id int, item financial_servicev1.PlaidAccountInvestmentTransactionORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE plaid_account_investment_transactions SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (p plaidAccountInvestmentTransactionORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM plaid_account_investment_transactions ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (p plaidAccountInvestmentTransactionORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.PlaidAccountInvestmentTransactionORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM plaid_account_investment_transactions ORDER BY " + p.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (p plaidAccountInvestmentTransactionORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM plaid_account_investment_transactions ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p plaidAccountInvestmentTransactionORMDo) Debug() IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Debug())
}

func (p plaidAccountInvestmentTransactionORMDo) WithContext(ctx context.Context) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p plaidAccountInvestmentTransactionORMDo) ReadDB() IPlaidAccountInvestmentTransactionORMDo {
	return p.Clauses(dbresolver.Read)
}

func (p plaidAccountInvestmentTransactionORMDo) WriteDB() IPlaidAccountInvestmentTransactionORMDo {
	return p.Clauses(dbresolver.Write)
}

func (p plaidAccountInvestmentTransactionORMDo) Session(config *gorm.Session) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Session(config))
}

func (p plaidAccountInvestmentTransactionORMDo) Clauses(conds ...clause.Expression) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p plaidAccountInvestmentTransactionORMDo) Returning(value interface{}, columns ...string) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p plaidAccountInvestmentTransactionORMDo) Not(conds ...gen.Condition) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p plaidAccountInvestmentTransactionORMDo) Or(conds ...gen.Condition) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p plaidAccountInvestmentTransactionORMDo) Select(conds ...field.Expr) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p plaidAccountInvestmentTransactionORMDo) Where(conds ...gen.Condition) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p plaidAccountInvestmentTransactionORMDo) Order(conds ...field.Expr) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p plaidAccountInvestmentTransactionORMDo) Distinct(cols ...field.Expr) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p plaidAccountInvestmentTransactionORMDo) Omit(cols ...field.Expr) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p plaidAccountInvestmentTransactionORMDo) Join(table schema.Tabler, on ...field.Expr) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p plaidAccountInvestmentTransactionORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p plaidAccountInvestmentTransactionORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p plaidAccountInvestmentTransactionORMDo) Group(cols ...field.Expr) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p plaidAccountInvestmentTransactionORMDo) Having(conds ...gen.Condition) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p plaidAccountInvestmentTransactionORMDo) Limit(limit int) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p plaidAccountInvestmentTransactionORMDo) Offset(offset int) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p plaidAccountInvestmentTransactionORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p plaidAccountInvestmentTransactionORMDo) Unscoped() IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Unscoped())
}

func (p plaidAccountInvestmentTransactionORMDo) Create(values ...*financial_servicev1.PlaidAccountInvestmentTransactionORM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p plaidAccountInvestmentTransactionORMDo) CreateInBatches(values []*financial_servicev1.PlaidAccountInvestmentTransactionORM, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p plaidAccountInvestmentTransactionORMDo) Save(values ...*financial_servicev1.PlaidAccountInvestmentTransactionORM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p plaidAccountInvestmentTransactionORMDo) First() (*financial_servicev1.PlaidAccountInvestmentTransactionORM, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidAccountInvestmentTransactionORM), nil
	}
}

func (p plaidAccountInvestmentTransactionORMDo) Take() (*financial_servicev1.PlaidAccountInvestmentTransactionORM, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidAccountInvestmentTransactionORM), nil
	}
}

func (p plaidAccountInvestmentTransactionORMDo) Last() (*financial_servicev1.PlaidAccountInvestmentTransactionORM, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidAccountInvestmentTransactionORM), nil
	}
}

func (p plaidAccountInvestmentTransactionORMDo) Find() ([]*financial_servicev1.PlaidAccountInvestmentTransactionORM, error) {
	result, err := p.DO.Find()
	return result.([]*financial_servicev1.PlaidAccountInvestmentTransactionORM), err
}

func (p plaidAccountInvestmentTransactionORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.PlaidAccountInvestmentTransactionORM, err error) {
	buf := make([]*financial_servicev1.PlaidAccountInvestmentTransactionORM, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p plaidAccountInvestmentTransactionORMDo) FindInBatches(result *[]*financial_servicev1.PlaidAccountInvestmentTransactionORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p plaidAccountInvestmentTransactionORMDo) Attrs(attrs ...field.AssignExpr) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p plaidAccountInvestmentTransactionORMDo) Assign(attrs ...field.AssignExpr) IPlaidAccountInvestmentTransactionORMDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p plaidAccountInvestmentTransactionORMDo) Joins(fields ...field.RelationField) IPlaidAccountInvestmentTransactionORMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p plaidAccountInvestmentTransactionORMDo) Preload(fields ...field.RelationField) IPlaidAccountInvestmentTransactionORMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p plaidAccountInvestmentTransactionORMDo) FirstOrInit() (*financial_servicev1.PlaidAccountInvestmentTransactionORM, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidAccountInvestmentTransactionORM), nil
	}
}

func (p plaidAccountInvestmentTransactionORMDo) FirstOrCreate() (*financial_servicev1.PlaidAccountInvestmentTransactionORM, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidAccountInvestmentTransactionORM), nil
	}
}

func (p plaidAccountInvestmentTransactionORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.PlaidAccountInvestmentTransactionORM, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p plaidAccountInvestmentTransactionORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p plaidAccountInvestmentTransactionORMDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p plaidAccountInvestmentTransactionORMDo) Delete(models ...*financial_servicev1.PlaidAccountInvestmentTransactionORM) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *plaidAccountInvestmentTransactionORMDo) withDO(do gen.Dao) *plaidAccountInvestmentTransactionORMDo {
	p.DO = *do.(*gen.DO)
	return p
}
