// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newTransactionDetailsORM(db *gorm.DB, opts ...gen.DOOption) transactionDetailsORM {
	_transactionDetailsORM := transactionDetailsORM{}

	_transactionDetailsORM.transactionDetailsORMDo.UseDB(db, opts...)
	_transactionDetailsORM.transactionDetailsORMDo.UseModel(&financial_servicev1.TransactionDetailsORM{})

	tableName := _transactionDetailsORM.transactionDetailsORMDo.TableName()
	_transactionDetailsORM.ALL = field.NewAsterisk(tableName)
	_transactionDetailsORM.Id = field.NewUint64(tableName, "id")
	_transactionDetailsORM.LinkedAccountingAccountId = field.NewUint64(tableName, "linked_accounting_account_id")
	_transactionDetailsORM.CreditNotes = transactionDetailsORMHasManyCreditNotes{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CreditNotes", "financial_servicev1.CreditNoteORM"),
		LineItems: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CreditNotes.LineItems", "financial_servicev1.CreditNoteLineItemORM"),
		},
	}

	_transactionDetailsORM.Expenses = transactionDetailsORMHasManyExpenses{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Expenses", "financial_servicev1.ExpenseORM"),
		Lines: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Expenses.Lines", "financial_servicev1.ExpenseLineORM"),
		},
	}

	_transactionDetailsORM.Invoices = transactionDetailsORMHasManyInvoices{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Invoices", "financial_servicev1.InvoiceORM"),
		LineItems: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Invoices.LineItems", "financial_servicev1.InvoiceLineItemORM"),
		},
	}

	_transactionDetailsORM.JournalEntries = transactionDetailsORMHasManyJournalEntries{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("JournalEntries", "financial_servicev1.JournalEntryORM"),
		Lines: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("JournalEntries.Lines", "financial_servicev1.JournalLineORM"),
		},
	}

	_transactionDetailsORM.Payments = transactionDetailsORMHasManyPayments{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Payments", "financial_servicev1.PaymentORM"),
	}

	_transactionDetailsORM.Transactions = transactionDetailsORMHasManyTransactions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Transactions", "financial_servicev1.BusinessTransactionORM"),
		LineItems: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Transactions.LineItems", "financial_servicev1.TransactionLineItemORM"),
		},
	}

	_transactionDetailsORM.VendorCredits = transactionDetailsORMHasManyVendorCredits{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("VendorCredits", "financial_servicev1.VendorCreditORM"),
		Lines: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("VendorCredits.Lines", "financial_servicev1.VendorCreditLineORM"),
		},
	}

	_transactionDetailsORM.fillFieldMap()

	return _transactionDetailsORM
}

type transactionDetailsORM struct {
	transactionDetailsORMDo

	ALL                       field.Asterisk
	Id                        field.Uint64
	LinkedAccountingAccountId field.Uint64
	CreditNotes               transactionDetailsORMHasManyCreditNotes

	Expenses transactionDetailsORMHasManyExpenses

	Invoices transactionDetailsORMHasManyInvoices

	JournalEntries transactionDetailsORMHasManyJournalEntries

	Payments transactionDetailsORMHasManyPayments

	Transactions transactionDetailsORMHasManyTransactions

	VendorCredits transactionDetailsORMHasManyVendorCredits

	fieldMap map[string]field.Expr
}

func (t transactionDetailsORM) Table(newTableName string) *transactionDetailsORM {
	t.transactionDetailsORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionDetailsORM) As(alias string) *transactionDetailsORM {
	t.transactionDetailsORMDo.DO = *(t.transactionDetailsORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionDetailsORM) updateTableName(table string) *transactionDetailsORM {
	t.ALL = field.NewAsterisk(table)
	t.Id = field.NewUint64(table, "id")
	t.LinkedAccountingAccountId = field.NewUint64(table, "linked_accounting_account_id")

	t.fillFieldMap()

	return t
}

func (t *transactionDetailsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionDetailsORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.Id
	t.fieldMap["linked_accounting_account_id"] = t.LinkedAccountingAccountId

}

func (t transactionDetailsORM) clone(db *gorm.DB) transactionDetailsORM {
	t.transactionDetailsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionDetailsORM) replaceDB(db *gorm.DB) transactionDetailsORM {
	t.transactionDetailsORMDo.ReplaceDB(db)
	return t
}

type transactionDetailsORMHasManyCreditNotes struct {
	db *gorm.DB

	field.RelationField

	LineItems struct {
		field.RelationField
	}
}

func (a transactionDetailsORMHasManyCreditNotes) Where(conds ...field.Expr) *transactionDetailsORMHasManyCreditNotes {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a transactionDetailsORMHasManyCreditNotes) WithContext(ctx context.Context) *transactionDetailsORMHasManyCreditNotes {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a transactionDetailsORMHasManyCreditNotes) Session(session *gorm.Session) *transactionDetailsORMHasManyCreditNotes {
	a.db = a.db.Session(session)
	return &a
}

func (a transactionDetailsORMHasManyCreditNotes) Model(m *financial_servicev1.TransactionDetailsORM) *transactionDetailsORMHasManyCreditNotesTx {
	return &transactionDetailsORMHasManyCreditNotesTx{a.db.Model(m).Association(a.Name())}
}

type transactionDetailsORMHasManyCreditNotesTx struct{ tx *gorm.Association }

func (a transactionDetailsORMHasManyCreditNotesTx) Find() (result []*financial_servicev1.CreditNoteORM, err error) {
	return result, a.tx.Find(&result)
}

func (a transactionDetailsORMHasManyCreditNotesTx) Append(values ...*financial_servicev1.CreditNoteORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a transactionDetailsORMHasManyCreditNotesTx) Replace(values ...*financial_servicev1.CreditNoteORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a transactionDetailsORMHasManyCreditNotesTx) Delete(values ...*financial_servicev1.CreditNoteORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a transactionDetailsORMHasManyCreditNotesTx) Clear() error {
	return a.tx.Clear()
}

func (a transactionDetailsORMHasManyCreditNotesTx) Count() int64 {
	return a.tx.Count()
}

type transactionDetailsORMHasManyExpenses struct {
	db *gorm.DB

	field.RelationField

	Lines struct {
		field.RelationField
	}
}

func (a transactionDetailsORMHasManyExpenses) Where(conds ...field.Expr) *transactionDetailsORMHasManyExpenses {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a transactionDetailsORMHasManyExpenses) WithContext(ctx context.Context) *transactionDetailsORMHasManyExpenses {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a transactionDetailsORMHasManyExpenses) Session(session *gorm.Session) *transactionDetailsORMHasManyExpenses {
	a.db = a.db.Session(session)
	return &a
}

func (a transactionDetailsORMHasManyExpenses) Model(m *financial_servicev1.TransactionDetailsORM) *transactionDetailsORMHasManyExpensesTx {
	return &transactionDetailsORMHasManyExpensesTx{a.db.Model(m).Association(a.Name())}
}

type transactionDetailsORMHasManyExpensesTx struct{ tx *gorm.Association }

func (a transactionDetailsORMHasManyExpensesTx) Find() (result []*financial_servicev1.ExpenseORM, err error) {
	return result, a.tx.Find(&result)
}

func (a transactionDetailsORMHasManyExpensesTx) Append(values ...*financial_servicev1.ExpenseORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a transactionDetailsORMHasManyExpensesTx) Replace(values ...*financial_servicev1.ExpenseORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a transactionDetailsORMHasManyExpensesTx) Delete(values ...*financial_servicev1.ExpenseORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a transactionDetailsORMHasManyExpensesTx) Clear() error {
	return a.tx.Clear()
}

func (a transactionDetailsORMHasManyExpensesTx) Count() int64 {
	return a.tx.Count()
}

type transactionDetailsORMHasManyInvoices struct {
	db *gorm.DB

	field.RelationField

	LineItems struct {
		field.RelationField
	}
}

func (a transactionDetailsORMHasManyInvoices) Where(conds ...field.Expr) *transactionDetailsORMHasManyInvoices {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a transactionDetailsORMHasManyInvoices) WithContext(ctx context.Context) *transactionDetailsORMHasManyInvoices {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a transactionDetailsORMHasManyInvoices) Session(session *gorm.Session) *transactionDetailsORMHasManyInvoices {
	a.db = a.db.Session(session)
	return &a
}

func (a transactionDetailsORMHasManyInvoices) Model(m *financial_servicev1.TransactionDetailsORM) *transactionDetailsORMHasManyInvoicesTx {
	return &transactionDetailsORMHasManyInvoicesTx{a.db.Model(m).Association(a.Name())}
}

type transactionDetailsORMHasManyInvoicesTx struct{ tx *gorm.Association }

func (a transactionDetailsORMHasManyInvoicesTx) Find() (result []*financial_servicev1.InvoiceORM, err error) {
	return result, a.tx.Find(&result)
}

func (a transactionDetailsORMHasManyInvoicesTx) Append(values ...*financial_servicev1.InvoiceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a transactionDetailsORMHasManyInvoicesTx) Replace(values ...*financial_servicev1.InvoiceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a transactionDetailsORMHasManyInvoicesTx) Delete(values ...*financial_servicev1.InvoiceORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a transactionDetailsORMHasManyInvoicesTx) Clear() error {
	return a.tx.Clear()
}

func (a transactionDetailsORMHasManyInvoicesTx) Count() int64 {
	return a.tx.Count()
}

type transactionDetailsORMHasManyJournalEntries struct {
	db *gorm.DB

	field.RelationField

	Lines struct {
		field.RelationField
	}
}

func (a transactionDetailsORMHasManyJournalEntries) Where(conds ...field.Expr) *transactionDetailsORMHasManyJournalEntries {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a transactionDetailsORMHasManyJournalEntries) WithContext(ctx context.Context) *transactionDetailsORMHasManyJournalEntries {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a transactionDetailsORMHasManyJournalEntries) Session(session *gorm.Session) *transactionDetailsORMHasManyJournalEntries {
	a.db = a.db.Session(session)
	return &a
}

func (a transactionDetailsORMHasManyJournalEntries) Model(m *financial_servicev1.TransactionDetailsORM) *transactionDetailsORMHasManyJournalEntriesTx {
	return &transactionDetailsORMHasManyJournalEntriesTx{a.db.Model(m).Association(a.Name())}
}

type transactionDetailsORMHasManyJournalEntriesTx struct{ tx *gorm.Association }

func (a transactionDetailsORMHasManyJournalEntriesTx) Find() (result []*financial_servicev1.JournalEntryORM, err error) {
	return result, a.tx.Find(&result)
}

func (a transactionDetailsORMHasManyJournalEntriesTx) Append(values ...*financial_servicev1.JournalEntryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a transactionDetailsORMHasManyJournalEntriesTx) Replace(values ...*financial_servicev1.JournalEntryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a transactionDetailsORMHasManyJournalEntriesTx) Delete(values ...*financial_servicev1.JournalEntryORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a transactionDetailsORMHasManyJournalEntriesTx) Clear() error {
	return a.tx.Clear()
}

func (a transactionDetailsORMHasManyJournalEntriesTx) Count() int64 {
	return a.tx.Count()
}

type transactionDetailsORMHasManyPayments struct {
	db *gorm.DB

	field.RelationField
}

func (a transactionDetailsORMHasManyPayments) Where(conds ...field.Expr) *transactionDetailsORMHasManyPayments {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a transactionDetailsORMHasManyPayments) WithContext(ctx context.Context) *transactionDetailsORMHasManyPayments {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a transactionDetailsORMHasManyPayments) Session(session *gorm.Session) *transactionDetailsORMHasManyPayments {
	a.db = a.db.Session(session)
	return &a
}

func (a transactionDetailsORMHasManyPayments) Model(m *financial_servicev1.TransactionDetailsORM) *transactionDetailsORMHasManyPaymentsTx {
	return &transactionDetailsORMHasManyPaymentsTx{a.db.Model(m).Association(a.Name())}
}

type transactionDetailsORMHasManyPaymentsTx struct{ tx *gorm.Association }

func (a transactionDetailsORMHasManyPaymentsTx) Find() (result []*financial_servicev1.PaymentORM, err error) {
	return result, a.tx.Find(&result)
}

func (a transactionDetailsORMHasManyPaymentsTx) Append(values ...*financial_servicev1.PaymentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a transactionDetailsORMHasManyPaymentsTx) Replace(values ...*financial_servicev1.PaymentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a transactionDetailsORMHasManyPaymentsTx) Delete(values ...*financial_servicev1.PaymentORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a transactionDetailsORMHasManyPaymentsTx) Clear() error {
	return a.tx.Clear()
}

func (a transactionDetailsORMHasManyPaymentsTx) Count() int64 {
	return a.tx.Count()
}

type transactionDetailsORMHasManyTransactions struct {
	db *gorm.DB

	field.RelationField

	LineItems struct {
		field.RelationField
	}
}

func (a transactionDetailsORMHasManyTransactions) Where(conds ...field.Expr) *transactionDetailsORMHasManyTransactions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a transactionDetailsORMHasManyTransactions) WithContext(ctx context.Context) *transactionDetailsORMHasManyTransactions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a transactionDetailsORMHasManyTransactions) Session(session *gorm.Session) *transactionDetailsORMHasManyTransactions {
	a.db = a.db.Session(session)
	return &a
}

func (a transactionDetailsORMHasManyTransactions) Model(m *financial_servicev1.TransactionDetailsORM) *transactionDetailsORMHasManyTransactionsTx {
	return &transactionDetailsORMHasManyTransactionsTx{a.db.Model(m).Association(a.Name())}
}

type transactionDetailsORMHasManyTransactionsTx struct{ tx *gorm.Association }

func (a transactionDetailsORMHasManyTransactionsTx) Find() (result []*financial_servicev1.BusinessTransactionORM, err error) {
	return result, a.tx.Find(&result)
}

func (a transactionDetailsORMHasManyTransactionsTx) Append(values ...*financial_servicev1.BusinessTransactionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a transactionDetailsORMHasManyTransactionsTx) Replace(values ...*financial_servicev1.BusinessTransactionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a transactionDetailsORMHasManyTransactionsTx) Delete(values ...*financial_servicev1.BusinessTransactionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a transactionDetailsORMHasManyTransactionsTx) Clear() error {
	return a.tx.Clear()
}

func (a transactionDetailsORMHasManyTransactionsTx) Count() int64 {
	return a.tx.Count()
}

type transactionDetailsORMHasManyVendorCredits struct {
	db *gorm.DB

	field.RelationField

	Lines struct {
		field.RelationField
	}
}

func (a transactionDetailsORMHasManyVendorCredits) Where(conds ...field.Expr) *transactionDetailsORMHasManyVendorCredits {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a transactionDetailsORMHasManyVendorCredits) WithContext(ctx context.Context) *transactionDetailsORMHasManyVendorCredits {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a transactionDetailsORMHasManyVendorCredits) Session(session *gorm.Session) *transactionDetailsORMHasManyVendorCredits {
	a.db = a.db.Session(session)
	return &a
}

func (a transactionDetailsORMHasManyVendorCredits) Model(m *financial_servicev1.TransactionDetailsORM) *transactionDetailsORMHasManyVendorCreditsTx {
	return &transactionDetailsORMHasManyVendorCreditsTx{a.db.Model(m).Association(a.Name())}
}

type transactionDetailsORMHasManyVendorCreditsTx struct{ tx *gorm.Association }

func (a transactionDetailsORMHasManyVendorCreditsTx) Find() (result []*financial_servicev1.VendorCreditORM, err error) {
	return result, a.tx.Find(&result)
}

func (a transactionDetailsORMHasManyVendorCreditsTx) Append(values ...*financial_servicev1.VendorCreditORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a transactionDetailsORMHasManyVendorCreditsTx) Replace(values ...*financial_servicev1.VendorCreditORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a transactionDetailsORMHasManyVendorCreditsTx) Delete(values ...*financial_servicev1.VendorCreditORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a transactionDetailsORMHasManyVendorCreditsTx) Clear() error {
	return a.tx.Clear()
}

func (a transactionDetailsORMHasManyVendorCreditsTx) Count() int64 {
	return a.tx.Count()
}

type transactionDetailsORMDo struct{ gen.DO }

type ITransactionDetailsORMDo interface {
	gen.SubQuery
	Debug() ITransactionDetailsORMDo
	WithContext(ctx context.Context) ITransactionDetailsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionDetailsORMDo
	WriteDB() ITransactionDetailsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionDetailsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionDetailsORMDo
	Not(conds ...gen.Condition) ITransactionDetailsORMDo
	Or(conds ...gen.Condition) ITransactionDetailsORMDo
	Select(conds ...field.Expr) ITransactionDetailsORMDo
	Where(conds ...gen.Condition) ITransactionDetailsORMDo
	Order(conds ...field.Expr) ITransactionDetailsORMDo
	Distinct(cols ...field.Expr) ITransactionDetailsORMDo
	Omit(cols ...field.Expr) ITransactionDetailsORMDo
	Join(table schema.Tabler, on ...field.Expr) ITransactionDetailsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionDetailsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionDetailsORMDo
	Group(cols ...field.Expr) ITransactionDetailsORMDo
	Having(conds ...gen.Condition) ITransactionDetailsORMDo
	Limit(limit int) ITransactionDetailsORMDo
	Offset(offset int) ITransactionDetailsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionDetailsORMDo
	Unscoped() ITransactionDetailsORMDo
	Create(values ...*financial_servicev1.TransactionDetailsORM) error
	CreateInBatches(values []*financial_servicev1.TransactionDetailsORM, batchSize int) error
	Save(values ...*financial_servicev1.TransactionDetailsORM) error
	First() (*financial_servicev1.TransactionDetailsORM, error)
	Take() (*financial_servicev1.TransactionDetailsORM, error)
	Last() (*financial_servicev1.TransactionDetailsORM, error)
	Find() ([]*financial_servicev1.TransactionDetailsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.TransactionDetailsORM, err error)
	FindInBatches(result *[]*financial_servicev1.TransactionDetailsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.TransactionDetailsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionDetailsORMDo
	Assign(attrs ...field.AssignExpr) ITransactionDetailsORMDo
	Joins(fields ...field.RelationField) ITransactionDetailsORMDo
	Preload(fields ...field.RelationField) ITransactionDetailsORMDo
	FirstOrInit() (*financial_servicev1.TransactionDetailsORM, error)
	FirstOrCreate() (*financial_servicev1.TransactionDetailsORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.TransactionDetailsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionDetailsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.TransactionDetailsORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.TransactionDetailsORM, err error)
	CreateRecord(item financial_servicev1.TransactionDetailsORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.TransactionDetailsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.TransactionDetailsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.TransactionDetailsORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.TransactionDetailsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t transactionDetailsORMDo) GetRecordByID(id int) (result financial_servicev1.TransactionDetailsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM transaction_details ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t transactionDetailsORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.TransactionDetailsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM transaction_details ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (t transactionDetailsORMDo) CreateRecord(item financial_servicev1.TransactionDetailsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO transaction_details (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (t transactionDetailsORMDo) UpdateRecordByID(id int, item financial_servicev1.TransactionDetailsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE transaction_details SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t transactionDetailsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM transaction_details ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (t transactionDetailsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.TransactionDetailsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM transaction_details ORDER BY " + t.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t transactionDetailsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM transaction_details ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t transactionDetailsORMDo) GetByID(id uint64) (result financial_servicev1.TransactionDetailsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM transaction_details ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t transactionDetailsORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.TransactionDetailsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM transaction_details ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t transactionDetailsORMDo) Debug() ITransactionDetailsORMDo {
	return t.withDO(t.DO.Debug())
}

func (t transactionDetailsORMDo) WithContext(ctx context.Context) ITransactionDetailsORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionDetailsORMDo) ReadDB() ITransactionDetailsORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t transactionDetailsORMDo) WriteDB() ITransactionDetailsORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t transactionDetailsORMDo) Session(config *gorm.Session) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t transactionDetailsORMDo) Clauses(conds ...clause.Expression) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionDetailsORMDo) Returning(value interface{}, columns ...string) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionDetailsORMDo) Not(conds ...gen.Condition) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionDetailsORMDo) Or(conds ...gen.Condition) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionDetailsORMDo) Select(conds ...field.Expr) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionDetailsORMDo) Where(conds ...gen.Condition) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionDetailsORMDo) Order(conds ...field.Expr) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionDetailsORMDo) Distinct(cols ...field.Expr) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionDetailsORMDo) Omit(cols ...field.Expr) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionDetailsORMDo) Join(table schema.Tabler, on ...field.Expr) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionDetailsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionDetailsORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionDetailsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionDetailsORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionDetailsORMDo) Group(cols ...field.Expr) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionDetailsORMDo) Having(conds ...gen.Condition) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionDetailsORMDo) Limit(limit int) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionDetailsORMDo) Offset(offset int) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionDetailsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionDetailsORMDo) Unscoped() ITransactionDetailsORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionDetailsORMDo) Create(values ...*financial_servicev1.TransactionDetailsORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionDetailsORMDo) CreateInBatches(values []*financial_servicev1.TransactionDetailsORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionDetailsORMDo) Save(values ...*financial_servicev1.TransactionDetailsORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionDetailsORMDo) First() (*financial_servicev1.TransactionDetailsORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TransactionDetailsORM), nil
	}
}

func (t transactionDetailsORMDo) Take() (*financial_servicev1.TransactionDetailsORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TransactionDetailsORM), nil
	}
}

func (t transactionDetailsORMDo) Last() (*financial_servicev1.TransactionDetailsORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TransactionDetailsORM), nil
	}
}

func (t transactionDetailsORMDo) Find() ([]*financial_servicev1.TransactionDetailsORM, error) {
	result, err := t.DO.Find()
	return result.([]*financial_servicev1.TransactionDetailsORM), err
}

func (t transactionDetailsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.TransactionDetailsORM, err error) {
	buf := make([]*financial_servicev1.TransactionDetailsORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionDetailsORMDo) FindInBatches(result *[]*financial_servicev1.TransactionDetailsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionDetailsORMDo) Attrs(attrs ...field.AssignExpr) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionDetailsORMDo) Assign(attrs ...field.AssignExpr) ITransactionDetailsORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionDetailsORMDo) Joins(fields ...field.RelationField) ITransactionDetailsORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionDetailsORMDo) Preload(fields ...field.RelationField) ITransactionDetailsORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionDetailsORMDo) FirstOrInit() (*financial_servicev1.TransactionDetailsORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TransactionDetailsORM), nil
	}
}

func (t transactionDetailsORMDo) FirstOrCreate() (*financial_servicev1.TransactionDetailsORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.TransactionDetailsORM), nil
	}
}

func (t transactionDetailsORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.TransactionDetailsORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionDetailsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionDetailsORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionDetailsORMDo) Delete(models ...*financial_servicev1.TransactionDetailsORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionDetailsORMDo) withDO(do gen.Dao) *transactionDetailsORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
