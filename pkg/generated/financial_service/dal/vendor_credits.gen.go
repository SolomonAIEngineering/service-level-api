// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newVendorCreditORM(db *gorm.DB, opts ...gen.DOOption) vendorCreditORM {
	_vendorCreditORM := vendorCreditORM{}

	_vendorCreditORM.vendorCreditORMDo.UseDB(db, opts...)
	_vendorCreditORM.vendorCreditORMDo.UseModel(&financial_servicev1.VendorCreditORM{})

	tableName := _vendorCreditORM.vendorCreditORMDo.TableName()
	_vendorCreditORM.ALL = field.NewAsterisk(tableName)
	_vendorCreditORM.AccountingPeriod = field.NewString(tableName, "accounting_period")
	_vendorCreditORM.Company = field.NewString(tableName, "company")
	_vendorCreditORM.Currency = field.NewString(tableName, "currency")
	_vendorCreditORM.ExchangeRate = field.NewString(tableName, "exchange_rate")
	_vendorCreditORM.Id = field.NewUint64(tableName, "id")
	_vendorCreditORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_vendorCreditORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_vendorCreditORM.Number = field.NewString(tableName, "number")
	_vendorCreditORM.RemoteId = field.NewString(tableName, "remote_id")
	_vendorCreditORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_vendorCreditORM.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_vendorCreditORM.TrackingCategories = field.NewField(tableName, "tracking_categories")
	_vendorCreditORM.TransactionDate = field.NewTime(tableName, "transaction_date")
	_vendorCreditORM.TransactionDetailsId = field.NewUint64(tableName, "transaction_details_id")
	_vendorCreditORM.Vendor = field.NewString(tableName, "vendor")
	_vendorCreditORM.Lines = vendorCreditORMHasManyLines{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Lines", "financial_servicev1.VendorCreditLineORM"),
	}

	_vendorCreditORM.fillFieldMap()

	return _vendorCreditORM
}

type vendorCreditORM struct {
	vendorCreditORMDo

	ALL                  field.Asterisk
	AccountingPeriod     field.String
	Company              field.String
	Currency             field.String
	ExchangeRate         field.String
	Id                   field.Uint64
	MergeAccountId       field.String
	ModifiedAt           field.Time
	Number               field.String
	RemoteId             field.String
	RemoteWasDeleted     field.Bool
	TotalAmount          field.Float64
	TrackingCategories   field.Field
	TransactionDate      field.Time
	TransactionDetailsId field.Uint64
	Vendor               field.String
	Lines                vendorCreditORMHasManyLines

	fieldMap map[string]field.Expr
}

func (v vendorCreditORM) Table(newTableName string) *vendorCreditORM {
	v.vendorCreditORMDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vendorCreditORM) As(alias string) *vendorCreditORM {
	v.vendorCreditORMDo.DO = *(v.vendorCreditORMDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vendorCreditORM) updateTableName(table string) *vendorCreditORM {
	v.ALL = field.NewAsterisk(table)
	v.AccountingPeriod = field.NewString(table, "accounting_period")
	v.Company = field.NewString(table, "company")
	v.Currency = field.NewString(table, "currency")
	v.ExchangeRate = field.NewString(table, "exchange_rate")
	v.Id = field.NewUint64(table, "id")
	v.MergeAccountId = field.NewString(table, "merge_account_id")
	v.ModifiedAt = field.NewTime(table, "modified_at")
	v.Number = field.NewString(table, "number")
	v.RemoteId = field.NewString(table, "remote_id")
	v.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	v.TotalAmount = field.NewFloat64(table, "total_amount")
	v.TrackingCategories = field.NewField(table, "tracking_categories")
	v.TransactionDate = field.NewTime(table, "transaction_date")
	v.TransactionDetailsId = field.NewUint64(table, "transaction_details_id")
	v.Vendor = field.NewString(table, "vendor")

	v.fillFieldMap()

	return v
}

func (v *vendorCreditORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vendorCreditORM) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 16)
	v.fieldMap["accounting_period"] = v.AccountingPeriod
	v.fieldMap["company"] = v.Company
	v.fieldMap["currency"] = v.Currency
	v.fieldMap["exchange_rate"] = v.ExchangeRate
	v.fieldMap["id"] = v.Id
	v.fieldMap["merge_account_id"] = v.MergeAccountId
	v.fieldMap["modified_at"] = v.ModifiedAt
	v.fieldMap["number"] = v.Number
	v.fieldMap["remote_id"] = v.RemoteId
	v.fieldMap["remote_was_deleted"] = v.RemoteWasDeleted
	v.fieldMap["total_amount"] = v.TotalAmount
	v.fieldMap["tracking_categories"] = v.TrackingCategories
	v.fieldMap["transaction_date"] = v.TransactionDate
	v.fieldMap["transaction_details_id"] = v.TransactionDetailsId
	v.fieldMap["vendor"] = v.Vendor

}

func (v vendorCreditORM) clone(db *gorm.DB) vendorCreditORM {
	v.vendorCreditORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vendorCreditORM) replaceDB(db *gorm.DB) vendorCreditORM {
	v.vendorCreditORMDo.ReplaceDB(db)
	return v
}

type vendorCreditORMHasManyLines struct {
	db *gorm.DB

	field.RelationField
}

func (a vendorCreditORMHasManyLines) Where(conds ...field.Expr) *vendorCreditORMHasManyLines {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a vendorCreditORMHasManyLines) WithContext(ctx context.Context) *vendorCreditORMHasManyLines {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a vendorCreditORMHasManyLines) Session(session *gorm.Session) *vendorCreditORMHasManyLines {
	a.db = a.db.Session(session)
	return &a
}

func (a vendorCreditORMHasManyLines) Model(m *financial_servicev1.VendorCreditORM) *vendorCreditORMHasManyLinesTx {
	return &vendorCreditORMHasManyLinesTx{a.db.Model(m).Association(a.Name())}
}

type vendorCreditORMHasManyLinesTx struct{ tx *gorm.Association }

func (a vendorCreditORMHasManyLinesTx) Find() (result []*financial_servicev1.VendorCreditLineORM, err error) {
	return result, a.tx.Find(&result)
}

func (a vendorCreditORMHasManyLinesTx) Append(values ...*financial_servicev1.VendorCreditLineORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a vendorCreditORMHasManyLinesTx) Replace(values ...*financial_servicev1.VendorCreditLineORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a vendorCreditORMHasManyLinesTx) Delete(values ...*financial_servicev1.VendorCreditLineORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a vendorCreditORMHasManyLinesTx) Clear() error {
	return a.tx.Clear()
}

func (a vendorCreditORMHasManyLinesTx) Count() int64 {
	return a.tx.Count()
}

type vendorCreditORMDo struct{ gen.DO }

type IVendorCreditORMDo interface {
	gen.SubQuery
	Debug() IVendorCreditORMDo
	WithContext(ctx context.Context) IVendorCreditORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVendorCreditORMDo
	WriteDB() IVendorCreditORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVendorCreditORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVendorCreditORMDo
	Not(conds ...gen.Condition) IVendorCreditORMDo
	Or(conds ...gen.Condition) IVendorCreditORMDo
	Select(conds ...field.Expr) IVendorCreditORMDo
	Where(conds ...gen.Condition) IVendorCreditORMDo
	Order(conds ...field.Expr) IVendorCreditORMDo
	Distinct(cols ...field.Expr) IVendorCreditORMDo
	Omit(cols ...field.Expr) IVendorCreditORMDo
	Join(table schema.Tabler, on ...field.Expr) IVendorCreditORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVendorCreditORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVendorCreditORMDo
	Group(cols ...field.Expr) IVendorCreditORMDo
	Having(conds ...gen.Condition) IVendorCreditORMDo
	Limit(limit int) IVendorCreditORMDo
	Offset(offset int) IVendorCreditORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVendorCreditORMDo
	Unscoped() IVendorCreditORMDo
	Create(values ...*financial_servicev1.VendorCreditORM) error
	CreateInBatches(values []*financial_servicev1.VendorCreditORM, batchSize int) error
	Save(values ...*financial_servicev1.VendorCreditORM) error
	First() (*financial_servicev1.VendorCreditORM, error)
	Take() (*financial_servicev1.VendorCreditORM, error)
	Last() (*financial_servicev1.VendorCreditORM, error)
	Find() ([]*financial_servicev1.VendorCreditORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.VendorCreditORM, err error)
	FindInBatches(result *[]*financial_servicev1.VendorCreditORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.VendorCreditORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVendorCreditORMDo
	Assign(attrs ...field.AssignExpr) IVendorCreditORMDo
	Joins(fields ...field.RelationField) IVendorCreditORMDo
	Preload(fields ...field.RelationField) IVendorCreditORMDo
	FirstOrInit() (*financial_servicev1.VendorCreditORM, error)
	FirstOrCreate() (*financial_servicev1.VendorCreditORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.VendorCreditORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVendorCreditORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.VendorCreditORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.VendorCreditORM, err error)
	CreateRecord(item financial_servicev1.VendorCreditORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.VendorCreditORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.VendorCreditORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.VendorCreditORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.VendorCreditORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (v vendorCreditORMDo) GetRecordByID(id int) (result financial_servicev1.VendorCreditORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM vendor_credits ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (v vendorCreditORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.VendorCreditORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM vendor_credits ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (v vendorCreditORMDo) CreateRecord(item financial_servicev1.VendorCreditORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO vendor_credits (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (v vendorCreditORMDo) UpdateRecordByID(id int, item financial_servicev1.VendorCreditORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE vendor_credits SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (v vendorCreditORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM vendor_credits ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (v vendorCreditORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.VendorCreditORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM vendor_credits ORDER BY " + v.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (v vendorCreditORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM vendor_credits ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (v vendorCreditORMDo) GetByID(id uint64) (result financial_servicev1.VendorCreditORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM vendor_credits ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (v vendorCreditORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.VendorCreditORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM vendor_credits ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (v vendorCreditORMDo) Debug() IVendorCreditORMDo {
	return v.withDO(v.DO.Debug())
}

func (v vendorCreditORMDo) WithContext(ctx context.Context) IVendorCreditORMDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vendorCreditORMDo) ReadDB() IVendorCreditORMDo {
	return v.Clauses(dbresolver.Read)
}

func (v vendorCreditORMDo) WriteDB() IVendorCreditORMDo {
	return v.Clauses(dbresolver.Write)
}

func (v vendorCreditORMDo) Session(config *gorm.Session) IVendorCreditORMDo {
	return v.withDO(v.DO.Session(config))
}

func (v vendorCreditORMDo) Clauses(conds ...clause.Expression) IVendorCreditORMDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vendorCreditORMDo) Returning(value interface{}, columns ...string) IVendorCreditORMDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vendorCreditORMDo) Not(conds ...gen.Condition) IVendorCreditORMDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vendorCreditORMDo) Or(conds ...gen.Condition) IVendorCreditORMDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vendorCreditORMDo) Select(conds ...field.Expr) IVendorCreditORMDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vendorCreditORMDo) Where(conds ...gen.Condition) IVendorCreditORMDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vendorCreditORMDo) Order(conds ...field.Expr) IVendorCreditORMDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vendorCreditORMDo) Distinct(cols ...field.Expr) IVendorCreditORMDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vendorCreditORMDo) Omit(cols ...field.Expr) IVendorCreditORMDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vendorCreditORMDo) Join(table schema.Tabler, on ...field.Expr) IVendorCreditORMDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vendorCreditORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVendorCreditORMDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vendorCreditORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IVendorCreditORMDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vendorCreditORMDo) Group(cols ...field.Expr) IVendorCreditORMDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vendorCreditORMDo) Having(conds ...gen.Condition) IVendorCreditORMDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vendorCreditORMDo) Limit(limit int) IVendorCreditORMDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vendorCreditORMDo) Offset(offset int) IVendorCreditORMDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vendorCreditORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVendorCreditORMDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vendorCreditORMDo) Unscoped() IVendorCreditORMDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vendorCreditORMDo) Create(values ...*financial_servicev1.VendorCreditORM) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vendorCreditORMDo) CreateInBatches(values []*financial_servicev1.VendorCreditORM, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vendorCreditORMDo) Save(values ...*financial_servicev1.VendorCreditORM) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vendorCreditORMDo) First() (*financial_servicev1.VendorCreditORM, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.VendorCreditORM), nil
	}
}

func (v vendorCreditORMDo) Take() (*financial_servicev1.VendorCreditORM, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.VendorCreditORM), nil
	}
}

func (v vendorCreditORMDo) Last() (*financial_servicev1.VendorCreditORM, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.VendorCreditORM), nil
	}
}

func (v vendorCreditORMDo) Find() ([]*financial_servicev1.VendorCreditORM, error) {
	result, err := v.DO.Find()
	return result.([]*financial_servicev1.VendorCreditORM), err
}

func (v vendorCreditORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.VendorCreditORM, err error) {
	buf := make([]*financial_servicev1.VendorCreditORM, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vendorCreditORMDo) FindInBatches(result *[]*financial_servicev1.VendorCreditORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vendorCreditORMDo) Attrs(attrs ...field.AssignExpr) IVendorCreditORMDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vendorCreditORMDo) Assign(attrs ...field.AssignExpr) IVendorCreditORMDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vendorCreditORMDo) Joins(fields ...field.RelationField) IVendorCreditORMDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vendorCreditORMDo) Preload(fields ...field.RelationField) IVendorCreditORMDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vendorCreditORMDo) FirstOrInit() (*financial_servicev1.VendorCreditORM, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.VendorCreditORM), nil
	}
}

func (v vendorCreditORMDo) FirstOrCreate() (*financial_servicev1.VendorCreditORM, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.VendorCreditORM), nil
	}
}

func (v vendorCreditORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.VendorCreditORM, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vendorCreditORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vendorCreditORMDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vendorCreditORMDo) Delete(models ...*financial_servicev1.VendorCreditORM) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vendorCreditORMDo) withDO(do gen.Dao) *vendorCreditORMDo {
	v.DO = *do.(*gen.DO)
	return v
}
