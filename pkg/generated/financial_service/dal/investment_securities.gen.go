// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newInvestmentSecurityORM(db *gorm.DB, opts ...gen.DOOption) investmentSecurityORM {
	_investmentSecurityORM := investmentSecurityORM{}

	_investmentSecurityORM.investmentSecurityORMDo.UseDB(db, opts...)
	_investmentSecurityORM.investmentSecurityORMDo.UseModel(&financial_servicev1.InvestmentSecurityORM{})

	tableName := _investmentSecurityORM.investmentSecurityORMDo.TableName()
	_investmentSecurityORM.ALL = field.NewAsterisk(tableName)
	_investmentSecurityORM.ClosePrice = field.NewFloat64(tableName, "close_price")
	_investmentSecurityORM.ClosePriceAsOf = field.NewString(tableName, "close_price_as_of")
	_investmentSecurityORM.Cusip = field.NewString(tableName, "cusip")
	_investmentSecurityORM.Id = field.NewUint64(tableName, "id")
	_investmentSecurityORM.InstitutionId = field.NewString(tableName, "institution_id")
	_investmentSecurityORM.InstitutionSecurityId = field.NewString(tableName, "institution_security_id")
	_investmentSecurityORM.InvestmentAccountId = field.NewUint64(tableName, "investment_account_id")
	_investmentSecurityORM.IsCashEquivalent = field.NewBool(tableName, "is_cash_equivalent")
	_investmentSecurityORM.Isin = field.NewString(tableName, "isin")
	_investmentSecurityORM.IsoCurrencyCode = field.NewString(tableName, "iso_currency_code")
	_investmentSecurityORM.Name = field.NewString(tableName, "name")
	_investmentSecurityORM.ProxySecurityId = field.NewString(tableName, "proxy_security_id")
	_investmentSecurityORM.SecurityId = field.NewString(tableName, "security_id")
	_investmentSecurityORM.Sedol = field.NewString(tableName, "sedol")
	_investmentSecurityORM.TickerSymbol = field.NewString(tableName, "ticker_symbol")
	_investmentSecurityORM.Type = field.NewString(tableName, "type")
	_investmentSecurityORM.UnofficialCurrencyCode = field.NewString(tableName, "unofficial_currency_code")
	_investmentSecurityORM.UpdateDatetime = field.NewString(tableName, "update_datetime")

	_investmentSecurityORM.fillFieldMap()

	return _investmentSecurityORM
}

type investmentSecurityORM struct {
	investmentSecurityORMDo

	ALL                    field.Asterisk
	ClosePrice             field.Float64
	ClosePriceAsOf         field.String
	Cusip                  field.String
	Id                     field.Uint64
	InstitutionId          field.String
	InstitutionSecurityId  field.String
	InvestmentAccountId    field.Uint64
	IsCashEquivalent       field.Bool
	Isin                   field.String
	IsoCurrencyCode        field.String
	Name                   field.String
	ProxySecurityId        field.String
	SecurityId             field.String
	Sedol                  field.String
	TickerSymbol           field.String
	Type                   field.String
	UnofficialCurrencyCode field.String
	UpdateDatetime         field.String

	fieldMap map[string]field.Expr
}

func (i investmentSecurityORM) Table(newTableName string) *investmentSecurityORM {
	i.investmentSecurityORMDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i investmentSecurityORM) As(alias string) *investmentSecurityORM {
	i.investmentSecurityORMDo.DO = *(i.investmentSecurityORMDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *investmentSecurityORM) updateTableName(table string) *investmentSecurityORM {
	i.ALL = field.NewAsterisk(table)
	i.ClosePrice = field.NewFloat64(table, "close_price")
	i.ClosePriceAsOf = field.NewString(table, "close_price_as_of")
	i.Cusip = field.NewString(table, "cusip")
	i.Id = field.NewUint64(table, "id")
	i.InstitutionId = field.NewString(table, "institution_id")
	i.InstitutionSecurityId = field.NewString(table, "institution_security_id")
	i.InvestmentAccountId = field.NewUint64(table, "investment_account_id")
	i.IsCashEquivalent = field.NewBool(table, "is_cash_equivalent")
	i.Isin = field.NewString(table, "isin")
	i.IsoCurrencyCode = field.NewString(table, "iso_currency_code")
	i.Name = field.NewString(table, "name")
	i.ProxySecurityId = field.NewString(table, "proxy_security_id")
	i.SecurityId = field.NewString(table, "security_id")
	i.Sedol = field.NewString(table, "sedol")
	i.TickerSymbol = field.NewString(table, "ticker_symbol")
	i.Type = field.NewString(table, "type")
	i.UnofficialCurrencyCode = field.NewString(table, "unofficial_currency_code")
	i.UpdateDatetime = field.NewString(table, "update_datetime")

	i.fillFieldMap()

	return i
}

func (i *investmentSecurityORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *investmentSecurityORM) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 18)
	i.fieldMap["close_price"] = i.ClosePrice
	i.fieldMap["close_price_as_of"] = i.ClosePriceAsOf
	i.fieldMap["cusip"] = i.Cusip
	i.fieldMap["id"] = i.Id
	i.fieldMap["institution_id"] = i.InstitutionId
	i.fieldMap["institution_security_id"] = i.InstitutionSecurityId
	i.fieldMap["investment_account_id"] = i.InvestmentAccountId
	i.fieldMap["is_cash_equivalent"] = i.IsCashEquivalent
	i.fieldMap["isin"] = i.Isin
	i.fieldMap["iso_currency_code"] = i.IsoCurrencyCode
	i.fieldMap["name"] = i.Name
	i.fieldMap["proxy_security_id"] = i.ProxySecurityId
	i.fieldMap["security_id"] = i.SecurityId
	i.fieldMap["sedol"] = i.Sedol
	i.fieldMap["ticker_symbol"] = i.TickerSymbol
	i.fieldMap["type"] = i.Type
	i.fieldMap["unofficial_currency_code"] = i.UnofficialCurrencyCode
	i.fieldMap["update_datetime"] = i.UpdateDatetime
}

func (i investmentSecurityORM) clone(db *gorm.DB) investmentSecurityORM {
	i.investmentSecurityORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i investmentSecurityORM) replaceDB(db *gorm.DB) investmentSecurityORM {
	i.investmentSecurityORMDo.ReplaceDB(db)
	return i
}

type investmentSecurityORMDo struct{ gen.DO }

type IInvestmentSecurityORMDo interface {
	gen.SubQuery
	Debug() IInvestmentSecurityORMDo
	WithContext(ctx context.Context) IInvestmentSecurityORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInvestmentSecurityORMDo
	WriteDB() IInvestmentSecurityORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInvestmentSecurityORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInvestmentSecurityORMDo
	Not(conds ...gen.Condition) IInvestmentSecurityORMDo
	Or(conds ...gen.Condition) IInvestmentSecurityORMDo
	Select(conds ...field.Expr) IInvestmentSecurityORMDo
	Where(conds ...gen.Condition) IInvestmentSecurityORMDo
	Order(conds ...field.Expr) IInvestmentSecurityORMDo
	Distinct(cols ...field.Expr) IInvestmentSecurityORMDo
	Omit(cols ...field.Expr) IInvestmentSecurityORMDo
	Join(table schema.Tabler, on ...field.Expr) IInvestmentSecurityORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInvestmentSecurityORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInvestmentSecurityORMDo
	Group(cols ...field.Expr) IInvestmentSecurityORMDo
	Having(conds ...gen.Condition) IInvestmentSecurityORMDo
	Limit(limit int) IInvestmentSecurityORMDo
	Offset(offset int) IInvestmentSecurityORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInvestmentSecurityORMDo
	Unscoped() IInvestmentSecurityORMDo
	Create(values ...*financial_servicev1.InvestmentSecurityORM) error
	CreateInBatches(values []*financial_servicev1.InvestmentSecurityORM, batchSize int) error
	Save(values ...*financial_servicev1.InvestmentSecurityORM) error
	First() (*financial_servicev1.InvestmentSecurityORM, error)
	Take() (*financial_servicev1.InvestmentSecurityORM, error)
	Last() (*financial_servicev1.InvestmentSecurityORM, error)
	Find() ([]*financial_servicev1.InvestmentSecurityORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.InvestmentSecurityORM, err error)
	FindInBatches(result *[]*financial_servicev1.InvestmentSecurityORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.InvestmentSecurityORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInvestmentSecurityORMDo
	Assign(attrs ...field.AssignExpr) IInvestmentSecurityORMDo
	Joins(fields ...field.RelationField) IInvestmentSecurityORMDo
	Preload(fields ...field.RelationField) IInvestmentSecurityORMDo
	FirstOrInit() (*financial_servicev1.InvestmentSecurityORM, error)
	FirstOrCreate() (*financial_servicev1.InvestmentSecurityORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.InvestmentSecurityORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInvestmentSecurityORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.InvestmentSecurityORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.InvestmentSecurityORM, err error)
	CreateRecord(item financial_servicev1.InvestmentSecurityORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.InvestmentSecurityORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.InvestmentSecurityORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.InvestmentSecurityORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.InvestmentSecurityORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (i investmentSecurityORMDo) GetRecordByID(id int) (result financial_servicev1.InvestmentSecurityORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM investment_securities ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (i investmentSecurityORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.InvestmentSecurityORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM investment_securities ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (i investmentSecurityORMDo) CreateRecord(item financial_servicev1.InvestmentSecurityORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO investment_securities (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (i investmentSecurityORMDo) UpdateRecordByID(id int, item financial_servicev1.InvestmentSecurityORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE investment_securities SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (i investmentSecurityORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM investment_securities ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (i investmentSecurityORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.InvestmentSecurityORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM investment_securities ORDER BY " + i.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (i investmentSecurityORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM investment_securities ")

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (i investmentSecurityORMDo) GetByID(id uint64) (result financial_servicev1.InvestmentSecurityORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM investment_securities ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (i investmentSecurityORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.InvestmentSecurityORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM investment_securities ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (i investmentSecurityORMDo) Debug() IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Debug())
}

func (i investmentSecurityORMDo) WithContext(ctx context.Context) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i investmentSecurityORMDo) ReadDB() IInvestmentSecurityORMDo {
	return i.Clauses(dbresolver.Read)
}

func (i investmentSecurityORMDo) WriteDB() IInvestmentSecurityORMDo {
	return i.Clauses(dbresolver.Write)
}

func (i investmentSecurityORMDo) Session(config *gorm.Session) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Session(config))
}

func (i investmentSecurityORMDo) Clauses(conds ...clause.Expression) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i investmentSecurityORMDo) Returning(value interface{}, columns ...string) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i investmentSecurityORMDo) Not(conds ...gen.Condition) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i investmentSecurityORMDo) Or(conds ...gen.Condition) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i investmentSecurityORMDo) Select(conds ...field.Expr) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i investmentSecurityORMDo) Where(conds ...gen.Condition) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i investmentSecurityORMDo) Order(conds ...field.Expr) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i investmentSecurityORMDo) Distinct(cols ...field.Expr) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i investmentSecurityORMDo) Omit(cols ...field.Expr) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i investmentSecurityORMDo) Join(table schema.Tabler, on ...field.Expr) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i investmentSecurityORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i investmentSecurityORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i investmentSecurityORMDo) Group(cols ...field.Expr) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i investmentSecurityORMDo) Having(conds ...gen.Condition) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i investmentSecurityORMDo) Limit(limit int) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i investmentSecurityORMDo) Offset(offset int) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i investmentSecurityORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i investmentSecurityORMDo) Unscoped() IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Unscoped())
}

func (i investmentSecurityORMDo) Create(values ...*financial_servicev1.InvestmentSecurityORM) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i investmentSecurityORMDo) CreateInBatches(values []*financial_servicev1.InvestmentSecurityORM, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i investmentSecurityORMDo) Save(values ...*financial_servicev1.InvestmentSecurityORM) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i investmentSecurityORMDo) First() (*financial_servicev1.InvestmentSecurityORM, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.InvestmentSecurityORM), nil
	}
}

func (i investmentSecurityORMDo) Take() (*financial_servicev1.InvestmentSecurityORM, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.InvestmentSecurityORM), nil
	}
}

func (i investmentSecurityORMDo) Last() (*financial_servicev1.InvestmentSecurityORM, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.InvestmentSecurityORM), nil
	}
}

func (i investmentSecurityORMDo) Find() ([]*financial_servicev1.InvestmentSecurityORM, error) {
	result, err := i.DO.Find()
	return result.([]*financial_servicev1.InvestmentSecurityORM), err
}

func (i investmentSecurityORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.InvestmentSecurityORM, err error) {
	buf := make([]*financial_servicev1.InvestmentSecurityORM, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i investmentSecurityORMDo) FindInBatches(result *[]*financial_servicev1.InvestmentSecurityORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i investmentSecurityORMDo) Attrs(attrs ...field.AssignExpr) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i investmentSecurityORMDo) Assign(attrs ...field.AssignExpr) IInvestmentSecurityORMDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i investmentSecurityORMDo) Joins(fields ...field.RelationField) IInvestmentSecurityORMDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i investmentSecurityORMDo) Preload(fields ...field.RelationField) IInvestmentSecurityORMDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i investmentSecurityORMDo) FirstOrInit() (*financial_servicev1.InvestmentSecurityORM, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.InvestmentSecurityORM), nil
	}
}

func (i investmentSecurityORMDo) FirstOrCreate() (*financial_servicev1.InvestmentSecurityORM, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.InvestmentSecurityORM), nil
	}
}

func (i investmentSecurityORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.InvestmentSecurityORM, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i investmentSecurityORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i investmentSecurityORMDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i investmentSecurityORMDo) Delete(models ...*financial_servicev1.InvestmentSecurityORM) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *investmentSecurityORMDo) withDO(do gen.Dao) *investmentSecurityORMDo {
	i.DO = *do.(*gen.DO)
	return i
}
