// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newPurchaseOrderLineItemORM(db *gorm.DB, opts ...gen.DOOption) purchaseOrderLineItemORM {
	_purchaseOrderLineItemORM := purchaseOrderLineItemORM{}

	_purchaseOrderLineItemORM.purchaseOrderLineItemORMDo.UseDB(db, opts...)
	_purchaseOrderLineItemORM.purchaseOrderLineItemORMDo.UseModel(&financial_servicev1.PurchaseOrderLineItemORM{})

	tableName := _purchaseOrderLineItemORM.purchaseOrderLineItemORMDo.TableName()
	_purchaseOrderLineItemORM.ALL = field.NewAsterisk(tableName)
	_purchaseOrderLineItemORM.Account = field.NewString(tableName, "account")
	_purchaseOrderLineItemORM.Company = field.NewString(tableName, "company")
	_purchaseOrderLineItemORM.Currency = field.NewString(tableName, "currency")
	_purchaseOrderLineItemORM.Description = field.NewString(tableName, "description")
	_purchaseOrderLineItemORM.ExchangeRate = field.NewString(tableName, "exchange_rate")
	_purchaseOrderLineItemORM.Id = field.NewUint64(tableName, "id")
	_purchaseOrderLineItemORM.Item = field.NewString(tableName, "item")
	_purchaseOrderLineItemORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_purchaseOrderLineItemORM.PurchaseOrderId = field.NewUint64(tableName, "purchase_order_id")
	_purchaseOrderLineItemORM.Quantity = field.NewInt32(tableName, "quantity")
	_purchaseOrderLineItemORM.RemoteId = field.NewString(tableName, "remote_id")
	_purchaseOrderLineItemORM.TaxAmount = field.NewString(tableName, "tax_amount")
	_purchaseOrderLineItemORM.TotalLineAmount = field.NewString(tableName, "total_line_amount")
	_purchaseOrderLineItemORM.TrackingCategories = field.NewField(tableName, "tracking_categories")
	_purchaseOrderLineItemORM.TrackingCategory = field.NewString(tableName, "tracking_category")
	_purchaseOrderLineItemORM.UnitPrice = field.NewString(tableName, "unit_price")

	_purchaseOrderLineItemORM.fillFieldMap()

	return _purchaseOrderLineItemORM
}

type purchaseOrderLineItemORM struct {
	purchaseOrderLineItemORMDo

	ALL                field.Asterisk
	Account            field.String
	Company            field.String
	Currency           field.String
	Description        field.String
	ExchangeRate       field.String
	Id                 field.Uint64
	Item               field.String
	ModifiedAt         field.Time
	PurchaseOrderId    field.Uint64
	Quantity           field.Int32
	RemoteId           field.String
	TaxAmount          field.String
	TotalLineAmount    field.String
	TrackingCategories field.Field
	TrackingCategory   field.String
	UnitPrice          field.String

	fieldMap map[string]field.Expr
}

func (p purchaseOrderLineItemORM) Table(newTableName string) *purchaseOrderLineItemORM {
	p.purchaseOrderLineItemORMDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p purchaseOrderLineItemORM) As(alias string) *purchaseOrderLineItemORM {
	p.purchaseOrderLineItemORMDo.DO = *(p.purchaseOrderLineItemORMDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *purchaseOrderLineItemORM) updateTableName(table string) *purchaseOrderLineItemORM {
	p.ALL = field.NewAsterisk(table)
	p.Account = field.NewString(table, "account")
	p.Company = field.NewString(table, "company")
	p.Currency = field.NewString(table, "currency")
	p.Description = field.NewString(table, "description")
	p.ExchangeRate = field.NewString(table, "exchange_rate")
	p.Id = field.NewUint64(table, "id")
	p.Item = field.NewString(table, "item")
	p.ModifiedAt = field.NewTime(table, "modified_at")
	p.PurchaseOrderId = field.NewUint64(table, "purchase_order_id")
	p.Quantity = field.NewInt32(table, "quantity")
	p.RemoteId = field.NewString(table, "remote_id")
	p.TaxAmount = field.NewString(table, "tax_amount")
	p.TotalLineAmount = field.NewString(table, "total_line_amount")
	p.TrackingCategories = field.NewField(table, "tracking_categories")
	p.TrackingCategory = field.NewString(table, "tracking_category")
	p.UnitPrice = field.NewString(table, "unit_price")

	p.fillFieldMap()

	return p
}

func (p *purchaseOrderLineItemORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *purchaseOrderLineItemORM) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["account"] = p.Account
	p.fieldMap["company"] = p.Company
	p.fieldMap["currency"] = p.Currency
	p.fieldMap["description"] = p.Description
	p.fieldMap["exchange_rate"] = p.ExchangeRate
	p.fieldMap["id"] = p.Id
	p.fieldMap["item"] = p.Item
	p.fieldMap["modified_at"] = p.ModifiedAt
	p.fieldMap["purchase_order_id"] = p.PurchaseOrderId
	p.fieldMap["quantity"] = p.Quantity
	p.fieldMap["remote_id"] = p.RemoteId
	p.fieldMap["tax_amount"] = p.TaxAmount
	p.fieldMap["total_line_amount"] = p.TotalLineAmount
	p.fieldMap["tracking_categories"] = p.TrackingCategories
	p.fieldMap["tracking_category"] = p.TrackingCategory
	p.fieldMap["unit_price"] = p.UnitPrice
}

func (p purchaseOrderLineItemORM) clone(db *gorm.DB) purchaseOrderLineItemORM {
	p.purchaseOrderLineItemORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p purchaseOrderLineItemORM) replaceDB(db *gorm.DB) purchaseOrderLineItemORM {
	p.purchaseOrderLineItemORMDo.ReplaceDB(db)
	return p
}

type purchaseOrderLineItemORMDo struct{ gen.DO }

type IPurchaseOrderLineItemORMDo interface {
	gen.SubQuery
	Debug() IPurchaseOrderLineItemORMDo
	WithContext(ctx context.Context) IPurchaseOrderLineItemORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPurchaseOrderLineItemORMDo
	WriteDB() IPurchaseOrderLineItemORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPurchaseOrderLineItemORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPurchaseOrderLineItemORMDo
	Not(conds ...gen.Condition) IPurchaseOrderLineItemORMDo
	Or(conds ...gen.Condition) IPurchaseOrderLineItemORMDo
	Select(conds ...field.Expr) IPurchaseOrderLineItemORMDo
	Where(conds ...gen.Condition) IPurchaseOrderLineItemORMDo
	Order(conds ...field.Expr) IPurchaseOrderLineItemORMDo
	Distinct(cols ...field.Expr) IPurchaseOrderLineItemORMDo
	Omit(cols ...field.Expr) IPurchaseOrderLineItemORMDo
	Join(table schema.Tabler, on ...field.Expr) IPurchaseOrderLineItemORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPurchaseOrderLineItemORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPurchaseOrderLineItemORMDo
	Group(cols ...field.Expr) IPurchaseOrderLineItemORMDo
	Having(conds ...gen.Condition) IPurchaseOrderLineItemORMDo
	Limit(limit int) IPurchaseOrderLineItemORMDo
	Offset(offset int) IPurchaseOrderLineItemORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPurchaseOrderLineItemORMDo
	Unscoped() IPurchaseOrderLineItemORMDo
	Create(values ...*financial_servicev1.PurchaseOrderLineItemORM) error
	CreateInBatches(values []*financial_servicev1.PurchaseOrderLineItemORM, batchSize int) error
	Save(values ...*financial_servicev1.PurchaseOrderLineItemORM) error
	First() (*financial_servicev1.PurchaseOrderLineItemORM, error)
	Take() (*financial_servicev1.PurchaseOrderLineItemORM, error)
	Last() (*financial_servicev1.PurchaseOrderLineItemORM, error)
	Find() ([]*financial_servicev1.PurchaseOrderLineItemORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.PurchaseOrderLineItemORM, err error)
	FindInBatches(result *[]*financial_servicev1.PurchaseOrderLineItemORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.PurchaseOrderLineItemORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPurchaseOrderLineItemORMDo
	Assign(attrs ...field.AssignExpr) IPurchaseOrderLineItemORMDo
	Joins(fields ...field.RelationField) IPurchaseOrderLineItemORMDo
	Preload(fields ...field.RelationField) IPurchaseOrderLineItemORMDo
	FirstOrInit() (*financial_servicev1.PurchaseOrderLineItemORM, error)
	FirstOrCreate() (*financial_servicev1.PurchaseOrderLineItemORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.PurchaseOrderLineItemORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPurchaseOrderLineItemORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.PurchaseOrderLineItemORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.PurchaseOrderLineItemORM, err error)
	CreateRecord(item financial_servicev1.PurchaseOrderLineItemORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.PurchaseOrderLineItemORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.PurchaseOrderLineItemORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (p purchaseOrderLineItemORMDo) GetRecordByID(id int) (result financial_servicev1.PurchaseOrderLineItemORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM purchase_order_line_items ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (p purchaseOrderLineItemORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.PurchaseOrderLineItemORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM purchase_order_line_items ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (p purchaseOrderLineItemORMDo) CreateRecord(item financial_servicev1.PurchaseOrderLineItemORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO purchase_order_line_items (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (p purchaseOrderLineItemORMDo) UpdateRecordByID(id int, item financial_servicev1.PurchaseOrderLineItemORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE purchase_order_line_items SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (p purchaseOrderLineItemORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM purchase_order_line_items ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (p purchaseOrderLineItemORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.PurchaseOrderLineItemORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM purchase_order_line_items ORDER BY " + p.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (p purchaseOrderLineItemORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM purchase_order_line_items ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p purchaseOrderLineItemORMDo) Debug() IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Debug())
}

func (p purchaseOrderLineItemORMDo) WithContext(ctx context.Context) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p purchaseOrderLineItemORMDo) ReadDB() IPurchaseOrderLineItemORMDo {
	return p.Clauses(dbresolver.Read)
}

func (p purchaseOrderLineItemORMDo) WriteDB() IPurchaseOrderLineItemORMDo {
	return p.Clauses(dbresolver.Write)
}

func (p purchaseOrderLineItemORMDo) Session(config *gorm.Session) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Session(config))
}

func (p purchaseOrderLineItemORMDo) Clauses(conds ...clause.Expression) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p purchaseOrderLineItemORMDo) Returning(value interface{}, columns ...string) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p purchaseOrderLineItemORMDo) Not(conds ...gen.Condition) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p purchaseOrderLineItemORMDo) Or(conds ...gen.Condition) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p purchaseOrderLineItemORMDo) Select(conds ...field.Expr) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p purchaseOrderLineItemORMDo) Where(conds ...gen.Condition) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p purchaseOrderLineItemORMDo) Order(conds ...field.Expr) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p purchaseOrderLineItemORMDo) Distinct(cols ...field.Expr) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p purchaseOrderLineItemORMDo) Omit(cols ...field.Expr) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p purchaseOrderLineItemORMDo) Join(table schema.Tabler, on ...field.Expr) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p purchaseOrderLineItemORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p purchaseOrderLineItemORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p purchaseOrderLineItemORMDo) Group(cols ...field.Expr) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p purchaseOrderLineItemORMDo) Having(conds ...gen.Condition) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p purchaseOrderLineItemORMDo) Limit(limit int) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p purchaseOrderLineItemORMDo) Offset(offset int) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p purchaseOrderLineItemORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p purchaseOrderLineItemORMDo) Unscoped() IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Unscoped())
}

func (p purchaseOrderLineItemORMDo) Create(values ...*financial_servicev1.PurchaseOrderLineItemORM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p purchaseOrderLineItemORMDo) CreateInBatches(values []*financial_servicev1.PurchaseOrderLineItemORM, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p purchaseOrderLineItemORMDo) Save(values ...*financial_servicev1.PurchaseOrderLineItemORM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p purchaseOrderLineItemORMDo) First() (*financial_servicev1.PurchaseOrderLineItemORM, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PurchaseOrderLineItemORM), nil
	}
}

func (p purchaseOrderLineItemORMDo) Take() (*financial_servicev1.PurchaseOrderLineItemORM, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PurchaseOrderLineItemORM), nil
	}
}

func (p purchaseOrderLineItemORMDo) Last() (*financial_servicev1.PurchaseOrderLineItemORM, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PurchaseOrderLineItemORM), nil
	}
}

func (p purchaseOrderLineItemORMDo) Find() ([]*financial_servicev1.PurchaseOrderLineItemORM, error) {
	result, err := p.DO.Find()
	return result.([]*financial_servicev1.PurchaseOrderLineItemORM), err
}

func (p purchaseOrderLineItemORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.PurchaseOrderLineItemORM, err error) {
	buf := make([]*financial_servicev1.PurchaseOrderLineItemORM, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p purchaseOrderLineItemORMDo) FindInBatches(result *[]*financial_servicev1.PurchaseOrderLineItemORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p purchaseOrderLineItemORMDo) Attrs(attrs ...field.AssignExpr) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p purchaseOrderLineItemORMDo) Assign(attrs ...field.AssignExpr) IPurchaseOrderLineItemORMDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p purchaseOrderLineItemORMDo) Joins(fields ...field.RelationField) IPurchaseOrderLineItemORMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p purchaseOrderLineItemORMDo) Preload(fields ...field.RelationField) IPurchaseOrderLineItemORMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p purchaseOrderLineItemORMDo) FirstOrInit() (*financial_servicev1.PurchaseOrderLineItemORM, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PurchaseOrderLineItemORM), nil
	}
}

func (p purchaseOrderLineItemORMDo) FirstOrCreate() (*financial_servicev1.PurchaseOrderLineItemORM, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PurchaseOrderLineItemORM), nil
	}
}

func (p purchaseOrderLineItemORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.PurchaseOrderLineItemORM, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p purchaseOrderLineItemORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p purchaseOrderLineItemORMDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p purchaseOrderLineItemORMDo) Delete(models ...*financial_servicev1.PurchaseOrderLineItemORM) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *purchaseOrderLineItemORMDo) withDO(do gen.Dao) *purchaseOrderLineItemORMDo {
	p.DO = *do.(*gen.DO)
	return p
}
