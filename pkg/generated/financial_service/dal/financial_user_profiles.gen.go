// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
)

func newFinancialUserProfileORM(db *gorm.DB, opts ...gen.DOOption) financialUserProfileORM {
	_financialUserProfileORM := financialUserProfileORM{}

	_financialUserProfileORM.financialUserProfileORMDo.UseDB(db, opts...)
	_financialUserProfileORM.financialUserProfileORMDo.UseModel(&financial_servicev1.FinancialUserProfileORM{})

	tableName := _financialUserProfileORM.financialUserProfileORMDo.TableName()
	_financialUserProfileORM.ALL = field.NewAsterisk(tableName)
	_financialUserProfileORM.Email = field.NewString(tableName, "email")
	_financialUserProfileORM.Id = field.NewUint64(tableName, "id")
	_financialUserProfileORM.ProfileType = field.NewString(tableName, "profile_type")
	_financialUserProfileORM.StripeCustomerId = field.NewString(tableName, "stripe_customer_id")
	_financialUserProfileORM.UserId = field.NewUint64(tableName, "user_id")
	_financialUserProfileORM.StripeSubscriptions = financialUserProfileORMHasOneStripeSubscriptions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("StripeSubscriptions", "financial_servicev1.StripeSubscriptionORM"),
	}

	_financialUserProfileORM.ActionableInsights = financialUserProfileORMHasManyActionableInsights{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ActionableInsights", "financial_servicev1.ActionableInsightORM"),
	}

	_financialUserProfileORM.ActionablePersonalInsights = financialUserProfileORMHasManyActionablePersonalInsights{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ActionablePersonalInsights", "financial_servicev1.PersonalActionableInsightORM"),
	}

	_financialUserProfileORM.Link = financialUserProfileORMHasManyLink{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Link", "financial_servicev1.LinkORM"),
		PlaidLink: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Link.PlaidLink", "financial_servicev1.PlaidLinkORM"),
		},
		PlaidSync: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Link.PlaidSync", "financial_servicev1.PlaidSyncORM"),
		},
		Token: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Link.Token", "financial_servicev1.TokenORM"),
		},
		BankAccounts: struct {
			field.RelationField
			Pockets struct {
				field.RelationField
				Goals struct {
					field.RelationField
					Forecasts struct {
						field.RelationField
					}
					Milestones struct {
						field.RelationField
						Budget struct {
							field.RelationField
							Category struct {
								field.RelationField
							}
						}
					}
					Notes struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("Link.BankAccounts", "financial_servicev1.BankAccountORM"),
			Pockets: struct {
				field.RelationField
				Goals struct {
					field.RelationField
					Forecasts struct {
						field.RelationField
					}
					Milestones struct {
						field.RelationField
						Budget struct {
							field.RelationField
							Category struct {
								field.RelationField
							}
						}
					}
					Notes struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Link.BankAccounts.Pockets", "financial_servicev1.PocketORM"),
				Goals: struct {
					field.RelationField
					Forecasts struct {
						field.RelationField
					}
					Milestones struct {
						field.RelationField
						Budget struct {
							field.RelationField
							Category struct {
								field.RelationField
							}
						}
					}
					Notes struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Link.BankAccounts.Pockets.Goals", "financial_servicev1.SmartGoalORM"),
					Forecasts: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Link.BankAccounts.Pockets.Goals.Forecasts", "financial_servicev1.ForecastORM"),
					},
					Milestones: struct {
						field.RelationField
						Budget struct {
							field.RelationField
							Category struct {
								field.RelationField
							}
						}
					}{
						RelationField: field.NewRelation("Link.BankAccounts.Pockets.Goals.Milestones", "financial_servicev1.MilestoneORM"),
						Budget: struct {
							field.RelationField
							Category struct {
								field.RelationField
							}
						}{
							RelationField: field.NewRelation("Link.BankAccounts.Pockets.Goals.Milestones.Budget", "financial_servicev1.BudgetORM"),
							Category: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("Link.BankAccounts.Pockets.Goals.Milestones.Budget.Category", "financial_servicev1.CategoryORM"),
							},
						},
					},
					Notes: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Link.BankAccounts.Pockets.Goals.Notes", "financial_servicev1.SmartNoteORM"),
					},
				},
			},
		},
		CreditAccounts: struct {
			field.RelationField
			Aprs struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Link.CreditAccounts", "financial_servicev1.CreditAccountORM"),
			Aprs: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Link.CreditAccounts.Aprs", "financial_servicev1.AprORM"),
			},
		},
		InvestmentAccounts: struct {
			field.RelationField
			Holdings struct {
				field.RelationField
			}
			Securities struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Link.InvestmentAccounts", "financial_servicev1.InvestmentAccountORM"),
			Holdings: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Link.InvestmentAccounts.Holdings", "financial_servicev1.InvesmentHoldingORM"),
			},
			Securities: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Link.InvestmentAccounts.Securities", "financial_servicev1.InvestmentSecurityORM"),
			},
		},
		MortgageAccounts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Link.MortgageAccounts", "financial_servicev1.MortgageAccountORM"),
		},
		StudentLoanAccounts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Link.StudentLoanAccounts", "financial_servicev1.StudentLoanAccountORM"),
		},
	}

	_financialUserProfileORM.MergeLiink = financialUserProfileORMHasManyMergeLiink{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MergeLiink", "financial_servicev1.MergeLinkORM"),
		Token: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("MergeLiink.Token", "financial_servicev1.TokenORM"),
		},
		Account: struct {
			field.RelationField
			ReferenceDetails struct {
				field.RelationField
				ChartOfAccounts struct {
					field.RelationField
				}
				Contacts struct {
					field.RelationField
				}
				Items struct {
					field.RelationField
				}
				TaxRates struct {
					field.RelationField
				}
			}
			ReportDetails struct {
				field.RelationField
				BalanceSheets struct {
					field.RelationField
					Assets struct {
						field.RelationField
					}
					Equity struct {
						field.RelationField
					}
					Liabilities struct {
						field.RelationField
					}
				}
				CashFlowStatements struct {
					field.RelationField
					FinancingActivities struct {
						field.RelationField
					}
					InvestingActivities struct {
						field.RelationField
					}
					OperatingActivities struct {
						field.RelationField
					}
				}
				IncomeStatements struct {
					field.RelationField
					CostOfSales struct {
						field.RelationField
					}
					Income struct {
						field.RelationField
					}
					NonOperatingExpenses struct {
						field.RelationField
					}
					OperatingExpenses struct {
						field.RelationField
					}
				}
			}
			TransactionsDetails struct {
				field.RelationField
				CreditNotes struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				Expenses struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
				Invoices struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				JournalEntries struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
				Payments struct {
					field.RelationField
				}
				Transactions struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				VendorCredits struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
			}
			Attachments struct {
				field.RelationField
			}
			CompanyInfo struct {
				field.RelationField
				Addresses struct {
					field.RelationField
				}
			}
			PurchaseOrders struct {
				field.RelationField
				DeliveryAddress struct {
					field.RelationField
				}
				LineItems struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("MergeLiink.Account", "financial_servicev1.LinkedAccountingAccountORM"),
			ReferenceDetails: struct {
				field.RelationField
				ChartOfAccounts struct {
					field.RelationField
				}
				Contacts struct {
					field.RelationField
				}
				Items struct {
					field.RelationField
				}
				TaxRates struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("MergeLiink.Account.ReferenceDetails", "financial_servicev1.ReferenceDetailsORM"),
				ChartOfAccounts: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReferenceDetails.ChartOfAccounts", "financial_servicev1.BusinessChartOfAccountsORM"),
				},
				Contacts: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReferenceDetails.Contacts", "financial_servicev1.ContactsORM"),
				},
				Items: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReferenceDetails.Items", "financial_servicev1.ItemORM"),
				},
				TaxRates: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReferenceDetails.TaxRates", "financial_servicev1.TaxRateORM"),
				},
			},
			ReportDetails: struct {
				field.RelationField
				BalanceSheets struct {
					field.RelationField
					Assets struct {
						field.RelationField
					}
					Equity struct {
						field.RelationField
					}
					Liabilities struct {
						field.RelationField
					}
				}
				CashFlowStatements struct {
					field.RelationField
					FinancingActivities struct {
						field.RelationField
					}
					InvestingActivities struct {
						field.RelationField
					}
					OperatingActivities struct {
						field.RelationField
					}
				}
				IncomeStatements struct {
					field.RelationField
					CostOfSales struct {
						field.RelationField
					}
					Income struct {
						field.RelationField
					}
					NonOperatingExpenses struct {
						field.RelationField
					}
					OperatingExpenses struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("MergeLiink.Account.ReportDetails", "financial_servicev1.ReportDetailsORM"),
				BalanceSheets: struct {
					field.RelationField
					Assets struct {
						field.RelationField
					}
					Equity struct {
						field.RelationField
					}
					Liabilities struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.BalanceSheets", "financial_servicev1.BalanceSheetORM"),
					Assets: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.BalanceSheets.Assets", "financial_servicev1.ReportItemORM"),
					},
					Equity: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.BalanceSheets.Equity", "financial_servicev1.ReportItemORM"),
					},
					Liabilities: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.BalanceSheets.Liabilities", "financial_servicev1.ReportItemORM"),
					},
				},
				CashFlowStatements: struct {
					field.RelationField
					FinancingActivities struct {
						field.RelationField
					}
					InvestingActivities struct {
						field.RelationField
					}
					OperatingActivities struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.CashFlowStatements", "financial_servicev1.CashFlowStatementsORM"),
					FinancingActivities: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.CashFlowStatements.FinancingActivities", "financial_servicev1.ReportItemORM"),
					},
					InvestingActivities: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.CashFlowStatements.InvestingActivities", "financial_servicev1.ReportItemORM"),
					},
					OperatingActivities: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.CashFlowStatements.OperatingActivities", "financial_servicev1.ReportItemORM"),
					},
				},
				IncomeStatements: struct {
					field.RelationField
					CostOfSales struct {
						field.RelationField
					}
					Income struct {
						field.RelationField
					}
					NonOperatingExpenses struct {
						field.RelationField
					}
					OperatingExpenses struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.IncomeStatements", "financial_servicev1.IncomeStatementORM"),
					CostOfSales: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.IncomeStatements.CostOfSales", "financial_servicev1.ReportItemORM"),
					},
					Income: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.IncomeStatements.Income", "financial_servicev1.ReportItemORM"),
					},
					NonOperatingExpenses: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.IncomeStatements.NonOperatingExpenses", "financial_servicev1.ReportItemORM"),
					},
					OperatingExpenses: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.ReportDetails.IncomeStatements.OperatingExpenses", "financial_servicev1.ReportItemORM"),
					},
				},
			},
			TransactionsDetails: struct {
				field.RelationField
				CreditNotes struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				Expenses struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
				Invoices struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				JournalEntries struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
				Payments struct {
					field.RelationField
				}
				Transactions struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}
				VendorCredits struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails", "financial_servicev1.TransactionDetailsORM"),
				CreditNotes: struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.CreditNotes", "financial_servicev1.CreditNoteORM"),
					LineItems: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.CreditNotes.LineItems", "financial_servicev1.CreditNoteLineItemORM"),
					},
				},
				Expenses: struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Expenses", "financial_servicev1.ExpenseORM"),
					Lines: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Expenses.Lines", "financial_servicev1.ExpenseLineORM"),
					},
				},
				Invoices: struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Invoices", "financial_servicev1.InvoiceORM"),
					LineItems: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Invoices.LineItems", "financial_servicev1.InvoiceLineItemORM"),
					},
				},
				JournalEntries: struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.JournalEntries", "financial_servicev1.JournalEntryORM"),
					Lines: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.JournalEntries.Lines", "financial_servicev1.JournalLineORM"),
					},
				},
				Payments: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Payments", "financial_servicev1.PaymentORM"),
				},
				Transactions: struct {
					field.RelationField
					LineItems struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Transactions", "financial_servicev1.BusinessTransactionORM"),
					LineItems: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.Transactions.LineItems", "financial_servicev1.TransactionLineItemORM"),
					},
				},
				VendorCredits: struct {
					field.RelationField
					Lines struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.VendorCredits", "financial_servicev1.VendorCreditORM"),
					Lines: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("MergeLiink.Account.TransactionsDetails.VendorCredits.Lines", "financial_servicev1.VendorCreditLineORM"),
					},
				},
			},
			Attachments: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("MergeLiink.Account.Attachments", "financial_servicev1.AttachmentsORM"),
			},
			CompanyInfo: struct {
				field.RelationField
				Addresses struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("MergeLiink.Account.CompanyInfo", "financial_servicev1.CompanyInfoORM"),
				Addresses: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.CompanyInfo.Addresses", "financial_servicev1.AddressORM"),
				},
			},
			PurchaseOrders: struct {
				field.RelationField
				DeliveryAddress struct {
					field.RelationField
				}
				LineItems struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("MergeLiink.Account.PurchaseOrders", "financial_servicev1.PurchaseOrderORM"),
				DeliveryAddress: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.PurchaseOrders.DeliveryAddress", "financial_servicev1.AddressORM"),
				},
				LineItems: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("MergeLiink.Account.PurchaseOrders.LineItems", "financial_servicev1.PurchaseOrderLineItemORM"),
				},
			},
		},
	}

	_financialUserProfileORM.fillFieldMap()

	return _financialUserProfileORM
}

type financialUserProfileORM struct {
	financialUserProfileORMDo

	ALL                 field.Asterisk
	Email               field.String
	Id                  field.Uint64
	ProfileType         field.String
	StripeCustomerId    field.String
	UserId              field.Uint64
	StripeSubscriptions financialUserProfileORMHasOneStripeSubscriptions

	ActionableInsights financialUserProfileORMHasManyActionableInsights

	ActionablePersonalInsights financialUserProfileORMHasManyActionablePersonalInsights

	Link financialUserProfileORMHasManyLink

	MergeLiink financialUserProfileORMHasManyMergeLiink

	fieldMap map[string]field.Expr
}

func (f financialUserProfileORM) Table(newTableName string) *financialUserProfileORM {
	f.financialUserProfileORMDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f financialUserProfileORM) As(alias string) *financialUserProfileORM {
	f.financialUserProfileORMDo.DO = *(f.financialUserProfileORMDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *financialUserProfileORM) updateTableName(table string) *financialUserProfileORM {
	f.ALL = field.NewAsterisk(table)
	f.Email = field.NewString(table, "email")
	f.Id = field.NewUint64(table, "id")
	f.ProfileType = field.NewString(table, "profile_type")
	f.StripeCustomerId = field.NewString(table, "stripe_customer_id")
	f.UserId = field.NewUint64(table, "user_id")

	f.fillFieldMap()

	return f
}

func (f *financialUserProfileORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *financialUserProfileORM) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 10)
	f.fieldMap["email"] = f.Email
	f.fieldMap["id"] = f.Id
	f.fieldMap["profile_type"] = f.ProfileType
	f.fieldMap["stripe_customer_id"] = f.StripeCustomerId
	f.fieldMap["user_id"] = f.UserId

}

func (f financialUserProfileORM) clone(db *gorm.DB) financialUserProfileORM {
	f.financialUserProfileORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f financialUserProfileORM) replaceDB(db *gorm.DB) financialUserProfileORM {
	f.financialUserProfileORMDo.ReplaceDB(db)
	return f
}

type financialUserProfileORMHasOneStripeSubscriptions struct {
	db *gorm.DB

	field.RelationField
}

func (a financialUserProfileORMHasOneStripeSubscriptions) Where(conds ...field.Expr) *financialUserProfileORMHasOneStripeSubscriptions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a financialUserProfileORMHasOneStripeSubscriptions) WithContext(ctx context.Context) *financialUserProfileORMHasOneStripeSubscriptions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a financialUserProfileORMHasOneStripeSubscriptions) Session(session *gorm.Session) *financialUserProfileORMHasOneStripeSubscriptions {
	a.db = a.db.Session(session)
	return &a
}

func (a financialUserProfileORMHasOneStripeSubscriptions) Model(m *financial_servicev1.FinancialUserProfileORM) *financialUserProfileORMHasOneStripeSubscriptionsTx {
	return &financialUserProfileORMHasOneStripeSubscriptionsTx{a.db.Model(m).Association(a.Name())}
}

type financialUserProfileORMHasOneStripeSubscriptionsTx struct{ tx *gorm.Association }

func (a financialUserProfileORMHasOneStripeSubscriptionsTx) Find() (result *financial_servicev1.StripeSubscriptionORM, err error) {
	return result, a.tx.Find(&result)
}

func (a financialUserProfileORMHasOneStripeSubscriptionsTx) Append(values ...*financial_servicev1.StripeSubscriptionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a financialUserProfileORMHasOneStripeSubscriptionsTx) Replace(values ...*financial_servicev1.StripeSubscriptionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a financialUserProfileORMHasOneStripeSubscriptionsTx) Delete(values ...*financial_servicev1.StripeSubscriptionORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a financialUserProfileORMHasOneStripeSubscriptionsTx) Clear() error {
	return a.tx.Clear()
}

func (a financialUserProfileORMHasOneStripeSubscriptionsTx) Count() int64 {
	return a.tx.Count()
}

type financialUserProfileORMHasManyActionableInsights struct {
	db *gorm.DB

	field.RelationField
}

func (a financialUserProfileORMHasManyActionableInsights) Where(conds ...field.Expr) *financialUserProfileORMHasManyActionableInsights {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a financialUserProfileORMHasManyActionableInsights) WithContext(ctx context.Context) *financialUserProfileORMHasManyActionableInsights {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a financialUserProfileORMHasManyActionableInsights) Session(session *gorm.Session) *financialUserProfileORMHasManyActionableInsights {
	a.db = a.db.Session(session)
	return &a
}

func (a financialUserProfileORMHasManyActionableInsights) Model(m *financial_servicev1.FinancialUserProfileORM) *financialUserProfileORMHasManyActionableInsightsTx {
	return &financialUserProfileORMHasManyActionableInsightsTx{a.db.Model(m).Association(a.Name())}
}

type financialUserProfileORMHasManyActionableInsightsTx struct{ tx *gorm.Association }

func (a financialUserProfileORMHasManyActionableInsightsTx) Find() (result []*financial_servicev1.ActionableInsightORM, err error) {
	return result, a.tx.Find(&result)
}

func (a financialUserProfileORMHasManyActionableInsightsTx) Append(values ...*financial_servicev1.ActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a financialUserProfileORMHasManyActionableInsightsTx) Replace(values ...*financial_servicev1.ActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a financialUserProfileORMHasManyActionableInsightsTx) Delete(values ...*financial_servicev1.ActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a financialUserProfileORMHasManyActionableInsightsTx) Clear() error {
	return a.tx.Clear()
}

func (a financialUserProfileORMHasManyActionableInsightsTx) Count() int64 {
	return a.tx.Count()
}

type financialUserProfileORMHasManyActionablePersonalInsights struct {
	db *gorm.DB

	field.RelationField
}

func (a financialUserProfileORMHasManyActionablePersonalInsights) Where(conds ...field.Expr) *financialUserProfileORMHasManyActionablePersonalInsights {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a financialUserProfileORMHasManyActionablePersonalInsights) WithContext(ctx context.Context) *financialUserProfileORMHasManyActionablePersonalInsights {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a financialUserProfileORMHasManyActionablePersonalInsights) Session(session *gorm.Session) *financialUserProfileORMHasManyActionablePersonalInsights {
	a.db = a.db.Session(session)
	return &a
}

func (a financialUserProfileORMHasManyActionablePersonalInsights) Model(m *financial_servicev1.FinancialUserProfileORM) *financialUserProfileORMHasManyActionablePersonalInsightsTx {
	return &financialUserProfileORMHasManyActionablePersonalInsightsTx{a.db.Model(m).Association(a.Name())}
}

type financialUserProfileORMHasManyActionablePersonalInsightsTx struct{ tx *gorm.Association }

func (a financialUserProfileORMHasManyActionablePersonalInsightsTx) Find() (result []*financial_servicev1.PersonalActionableInsightORM, err error) {
	return result, a.tx.Find(&result)
}

func (a financialUserProfileORMHasManyActionablePersonalInsightsTx) Append(values ...*financial_servicev1.PersonalActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a financialUserProfileORMHasManyActionablePersonalInsightsTx) Replace(values ...*financial_servicev1.PersonalActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a financialUserProfileORMHasManyActionablePersonalInsightsTx) Delete(values ...*financial_servicev1.PersonalActionableInsightORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a financialUserProfileORMHasManyActionablePersonalInsightsTx) Clear() error {
	return a.tx.Clear()
}

func (a financialUserProfileORMHasManyActionablePersonalInsightsTx) Count() int64 {
	return a.tx.Count()
}

type financialUserProfileORMHasManyLink struct {
	db *gorm.DB

	field.RelationField

	PlaidLink struct {
		field.RelationField
	}
	PlaidSync struct {
		field.RelationField
	}
	Token struct {
		field.RelationField
	}
	BankAccounts struct {
		field.RelationField
		Pockets struct {
			field.RelationField
			Goals struct {
				field.RelationField
				Forecasts struct {
					field.RelationField
				}
				Milestones struct {
					field.RelationField
					Budget struct {
						field.RelationField
						Category struct {
							field.RelationField
						}
					}
				}
				Notes struct {
					field.RelationField
				}
			}
		}
	}
	CreditAccounts struct {
		field.RelationField
		Aprs struct {
			field.RelationField
		}
	}
	InvestmentAccounts struct {
		field.RelationField
		Holdings struct {
			field.RelationField
		}
		Securities struct {
			field.RelationField
		}
	}
	MortgageAccounts struct {
		field.RelationField
	}
	StudentLoanAccounts struct {
		field.RelationField
	}
}

func (a financialUserProfileORMHasManyLink) Where(conds ...field.Expr) *financialUserProfileORMHasManyLink {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a financialUserProfileORMHasManyLink) WithContext(ctx context.Context) *financialUserProfileORMHasManyLink {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a financialUserProfileORMHasManyLink) Session(session *gorm.Session) *financialUserProfileORMHasManyLink {
	a.db = a.db.Session(session)
	return &a
}

func (a financialUserProfileORMHasManyLink) Model(m *financial_servicev1.FinancialUserProfileORM) *financialUserProfileORMHasManyLinkTx {
	return &financialUserProfileORMHasManyLinkTx{a.db.Model(m).Association(a.Name())}
}

type financialUserProfileORMHasManyLinkTx struct{ tx *gorm.Association }

func (a financialUserProfileORMHasManyLinkTx) Find() (result []*financial_servicev1.LinkORM, err error) {
	return result, a.tx.Find(&result)
}

func (a financialUserProfileORMHasManyLinkTx) Append(values ...*financial_servicev1.LinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a financialUserProfileORMHasManyLinkTx) Replace(values ...*financial_servicev1.LinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a financialUserProfileORMHasManyLinkTx) Delete(values ...*financial_servicev1.LinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a financialUserProfileORMHasManyLinkTx) Clear() error {
	return a.tx.Clear()
}

func (a financialUserProfileORMHasManyLinkTx) Count() int64 {
	return a.tx.Count()
}

type financialUserProfileORMHasManyMergeLiink struct {
	db *gorm.DB

	field.RelationField

	Token struct {
		field.RelationField
	}
	Account struct {
		field.RelationField
		ReferenceDetails struct {
			field.RelationField
			ChartOfAccounts struct {
				field.RelationField
			}
			Contacts struct {
				field.RelationField
			}
			Items struct {
				field.RelationField
			}
			TaxRates struct {
				field.RelationField
			}
		}
		ReportDetails struct {
			field.RelationField
			BalanceSheets struct {
				field.RelationField
				Assets struct {
					field.RelationField
				}
				Equity struct {
					field.RelationField
				}
				Liabilities struct {
					field.RelationField
				}
			}
			CashFlowStatements struct {
				field.RelationField
				FinancingActivities struct {
					field.RelationField
				}
				InvestingActivities struct {
					field.RelationField
				}
				OperatingActivities struct {
					field.RelationField
				}
			}
			IncomeStatements struct {
				field.RelationField
				CostOfSales struct {
					field.RelationField
				}
				Income struct {
					field.RelationField
				}
				NonOperatingExpenses struct {
					field.RelationField
				}
				OperatingExpenses struct {
					field.RelationField
				}
			}
		}
		TransactionsDetails struct {
			field.RelationField
			CreditNotes struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			Expenses struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
			Invoices struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			JournalEntries struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
			Payments struct {
				field.RelationField
			}
			Transactions struct {
				field.RelationField
				LineItems struct {
					field.RelationField
				}
			}
			VendorCredits struct {
				field.RelationField
				Lines struct {
					field.RelationField
				}
			}
		}
		Attachments struct {
			field.RelationField
		}
		CompanyInfo struct {
			field.RelationField
			Addresses struct {
				field.RelationField
			}
		}
		PurchaseOrders struct {
			field.RelationField
			DeliveryAddress struct {
				field.RelationField
			}
			LineItems struct {
				field.RelationField
			}
		}
	}
}

func (a financialUserProfileORMHasManyMergeLiink) Where(conds ...field.Expr) *financialUserProfileORMHasManyMergeLiink {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a financialUserProfileORMHasManyMergeLiink) WithContext(ctx context.Context) *financialUserProfileORMHasManyMergeLiink {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a financialUserProfileORMHasManyMergeLiink) Session(session *gorm.Session) *financialUserProfileORMHasManyMergeLiink {
	a.db = a.db.Session(session)
	return &a
}

func (a financialUserProfileORMHasManyMergeLiink) Model(m *financial_servicev1.FinancialUserProfileORM) *financialUserProfileORMHasManyMergeLiinkTx {
	return &financialUserProfileORMHasManyMergeLiinkTx{a.db.Model(m).Association(a.Name())}
}

type financialUserProfileORMHasManyMergeLiinkTx struct{ tx *gorm.Association }

func (a financialUserProfileORMHasManyMergeLiinkTx) Find() (result []*financial_servicev1.MergeLinkORM, err error) {
	return result, a.tx.Find(&result)
}

func (a financialUserProfileORMHasManyMergeLiinkTx) Append(values ...*financial_servicev1.MergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a financialUserProfileORMHasManyMergeLiinkTx) Replace(values ...*financial_servicev1.MergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a financialUserProfileORMHasManyMergeLiinkTx) Delete(values ...*financial_servicev1.MergeLinkORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a financialUserProfileORMHasManyMergeLiinkTx) Clear() error {
	return a.tx.Clear()
}

func (a financialUserProfileORMHasManyMergeLiinkTx) Count() int64 {
	return a.tx.Count()
}

type financialUserProfileORMDo struct{ gen.DO }

type IFinancialUserProfileORMDo interface {
	gen.SubQuery
	Debug() IFinancialUserProfileORMDo
	WithContext(ctx context.Context) IFinancialUserProfileORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFinancialUserProfileORMDo
	WriteDB() IFinancialUserProfileORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFinancialUserProfileORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFinancialUserProfileORMDo
	Not(conds ...gen.Condition) IFinancialUserProfileORMDo
	Or(conds ...gen.Condition) IFinancialUserProfileORMDo
	Select(conds ...field.Expr) IFinancialUserProfileORMDo
	Where(conds ...gen.Condition) IFinancialUserProfileORMDo
	Order(conds ...field.Expr) IFinancialUserProfileORMDo
	Distinct(cols ...field.Expr) IFinancialUserProfileORMDo
	Omit(cols ...field.Expr) IFinancialUserProfileORMDo
	Join(table schema.Tabler, on ...field.Expr) IFinancialUserProfileORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFinancialUserProfileORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFinancialUserProfileORMDo
	Group(cols ...field.Expr) IFinancialUserProfileORMDo
	Having(conds ...gen.Condition) IFinancialUserProfileORMDo
	Limit(limit int) IFinancialUserProfileORMDo
	Offset(offset int) IFinancialUserProfileORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFinancialUserProfileORMDo
	Unscoped() IFinancialUserProfileORMDo
	Create(values ...*financial_servicev1.FinancialUserProfileORM) error
	CreateInBatches(values []*financial_servicev1.FinancialUserProfileORM, batchSize int) error
	Save(values ...*financial_servicev1.FinancialUserProfileORM) error
	First() (*financial_servicev1.FinancialUserProfileORM, error)
	Take() (*financial_servicev1.FinancialUserProfileORM, error)
	Last() (*financial_servicev1.FinancialUserProfileORM, error)
	Find() ([]*financial_servicev1.FinancialUserProfileORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.FinancialUserProfileORM, err error)
	FindInBatches(result *[]*financial_servicev1.FinancialUserProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.FinancialUserProfileORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFinancialUserProfileORMDo
	Assign(attrs ...field.AssignExpr) IFinancialUserProfileORMDo
	Joins(fields ...field.RelationField) IFinancialUserProfileORMDo
	Preload(fields ...field.RelationField) IFinancialUserProfileORMDo
	FirstOrInit() (*financial_servicev1.FinancialUserProfileORM, error)
	FirstOrCreate() (*financial_servicev1.FinancialUserProfileORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.FinancialUserProfileORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFinancialUserProfileORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.FinancialUserProfileORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.FinancialUserProfileORM, err error)
	CreateRecord(item financial_servicev1.FinancialUserProfileORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.FinancialUserProfileORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.FinancialUserProfileORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (f financialUserProfileORMDo) GetRecordByID(id int) (result financial_servicev1.FinancialUserProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM financial_user_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (f financialUserProfileORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.FinancialUserProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM financial_user_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (f financialUserProfileORMDo) CreateRecord(item financial_servicev1.FinancialUserProfileORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO financial_user_profiles (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (f financialUserProfileORMDo) UpdateRecordByID(id int, item financial_servicev1.FinancialUserProfileORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE financial_user_profiles SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (f financialUserProfileORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM financial_user_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (f financialUserProfileORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.FinancialUserProfileORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM financial_user_profiles ORDER BY " + f.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (f financialUserProfileORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM financial_user_profiles ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (f financialUserProfileORMDo) Debug() IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Debug())
}

func (f financialUserProfileORMDo) WithContext(ctx context.Context) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f financialUserProfileORMDo) ReadDB() IFinancialUserProfileORMDo {
	return f.Clauses(dbresolver.Read)
}

func (f financialUserProfileORMDo) WriteDB() IFinancialUserProfileORMDo {
	return f.Clauses(dbresolver.Write)
}

func (f financialUserProfileORMDo) Session(config *gorm.Session) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Session(config))
}

func (f financialUserProfileORMDo) Clauses(conds ...clause.Expression) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f financialUserProfileORMDo) Returning(value interface{}, columns ...string) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f financialUserProfileORMDo) Not(conds ...gen.Condition) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f financialUserProfileORMDo) Or(conds ...gen.Condition) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f financialUserProfileORMDo) Select(conds ...field.Expr) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f financialUserProfileORMDo) Where(conds ...gen.Condition) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f financialUserProfileORMDo) Order(conds ...field.Expr) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f financialUserProfileORMDo) Distinct(cols ...field.Expr) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f financialUserProfileORMDo) Omit(cols ...field.Expr) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f financialUserProfileORMDo) Join(table schema.Tabler, on ...field.Expr) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f financialUserProfileORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f financialUserProfileORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f financialUserProfileORMDo) Group(cols ...field.Expr) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f financialUserProfileORMDo) Having(conds ...gen.Condition) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f financialUserProfileORMDo) Limit(limit int) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f financialUserProfileORMDo) Offset(offset int) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f financialUserProfileORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f financialUserProfileORMDo) Unscoped() IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Unscoped())
}

func (f financialUserProfileORMDo) Create(values ...*financial_servicev1.FinancialUserProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f financialUserProfileORMDo) CreateInBatches(values []*financial_servicev1.FinancialUserProfileORM, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f financialUserProfileORMDo) Save(values ...*financial_servicev1.FinancialUserProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f financialUserProfileORMDo) First() (*financial_servicev1.FinancialUserProfileORM, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.FinancialUserProfileORM), nil
	}
}

func (f financialUserProfileORMDo) Take() (*financial_servicev1.FinancialUserProfileORM, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.FinancialUserProfileORM), nil
	}
}

func (f financialUserProfileORMDo) Last() (*financial_servicev1.FinancialUserProfileORM, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.FinancialUserProfileORM), nil
	}
}

func (f financialUserProfileORMDo) Find() ([]*financial_servicev1.FinancialUserProfileORM, error) {
	result, err := f.DO.Find()
	return result.([]*financial_servicev1.FinancialUserProfileORM), err
}

func (f financialUserProfileORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.FinancialUserProfileORM, err error) {
	buf := make([]*financial_servicev1.FinancialUserProfileORM, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f financialUserProfileORMDo) FindInBatches(result *[]*financial_servicev1.FinancialUserProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f financialUserProfileORMDo) Attrs(attrs ...field.AssignExpr) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f financialUserProfileORMDo) Assign(attrs ...field.AssignExpr) IFinancialUserProfileORMDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f financialUserProfileORMDo) Joins(fields ...field.RelationField) IFinancialUserProfileORMDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f financialUserProfileORMDo) Preload(fields ...field.RelationField) IFinancialUserProfileORMDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f financialUserProfileORMDo) FirstOrInit() (*financial_servicev1.FinancialUserProfileORM, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.FinancialUserProfileORM), nil
	}
}

func (f financialUserProfileORMDo) FirstOrCreate() (*financial_servicev1.FinancialUserProfileORM, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.FinancialUserProfileORM), nil
	}
}

func (f financialUserProfileORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.FinancialUserProfileORM, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f financialUserProfileORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f financialUserProfileORMDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f financialUserProfileORMDo) Delete(models ...*financial_servicev1.FinancialUserProfileORM) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *financialUserProfileORMDo) withDO(do gen.Dao) *financialUserProfileORMDo {
	f.DO = *do.(*gen.DO)
	return f
}
