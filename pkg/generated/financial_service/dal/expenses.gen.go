// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newExpenseORM(db *gorm.DB, opts ...gen.DOOption) expenseORM {
	_expenseORM := expenseORM{}

	_expenseORM.expenseORMDo.UseDB(db, opts...)
	_expenseORM.expenseORMDo.UseModel(&financial_servicev1.ExpenseORM{})

	tableName := _expenseORM.expenseORMDo.TableName()
	_expenseORM.ALL = field.NewAsterisk(tableName)
	_expenseORM.Account = field.NewString(tableName, "account")
	_expenseORM.AccountingPeriod = field.NewString(tableName, "accounting_period")
	_expenseORM.Company = field.NewString(tableName, "company")
	_expenseORM.Contact = field.NewString(tableName, "contact")
	_expenseORM.Currency = field.NewString(tableName, "currency")
	_expenseORM.ExchangeRate = field.NewString(tableName, "exchange_rate")
	_expenseORM.Id = field.NewUint64(tableName, "id")
	_expenseORM.Memo = field.NewString(tableName, "memo")
	_expenseORM.MergeAccountId = field.NewString(tableName, "merge_account_id")
	_expenseORM.ModifiedAt = field.NewTime(tableName, "modified_at")
	_expenseORM.RemoteCreatedAt = field.NewTime(tableName, "remote_created_at")
	_expenseORM.RemoteId = field.NewString(tableName, "remote_id")
	_expenseORM.RemoteWasDeleted = field.NewBool(tableName, "remote_was_deleted")
	_expenseORM.SubTotal = field.NewFloat64(tableName, "sub_total")
	_expenseORM.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_expenseORM.TotalTaxAmount = field.NewFloat64(tableName, "total_tax_amount")
	_expenseORM.TrackingCategories = field.NewField(tableName, "tracking_categories")
	_expenseORM.TransactionDate = field.NewTime(tableName, "transaction_date")
	_expenseORM.TransactionDetailsId = field.NewUint64(tableName, "transaction_details_id")
	_expenseORM.Lines = expenseORMHasManyLines{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Lines", "financial_servicev1.ExpenseLineORM"),
	}

	_expenseORM.fillFieldMap()

	return _expenseORM
}

type expenseORM struct {
	expenseORMDo

	ALL                  field.Asterisk
	Account              field.String
	AccountingPeriod     field.String
	Company              field.String
	Contact              field.String
	Currency             field.String
	ExchangeRate         field.String
	Id                   field.Uint64
	Memo                 field.String
	MergeAccountId       field.String
	ModifiedAt           field.Time
	RemoteCreatedAt      field.Time
	RemoteId             field.String
	RemoteWasDeleted     field.Bool
	SubTotal             field.Float64
	TotalAmount          field.Float64
	TotalTaxAmount       field.Float64
	TrackingCategories   field.Field
	TransactionDate      field.Time
	TransactionDetailsId field.Uint64
	Lines                expenseORMHasManyLines

	fieldMap map[string]field.Expr
}

func (e expenseORM) Table(newTableName string) *expenseORM {
	e.expenseORMDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e expenseORM) As(alias string) *expenseORM {
	e.expenseORMDo.DO = *(e.expenseORMDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *expenseORM) updateTableName(table string) *expenseORM {
	e.ALL = field.NewAsterisk(table)
	e.Account = field.NewString(table, "account")
	e.AccountingPeriod = field.NewString(table, "accounting_period")
	e.Company = field.NewString(table, "company")
	e.Contact = field.NewString(table, "contact")
	e.Currency = field.NewString(table, "currency")
	e.ExchangeRate = field.NewString(table, "exchange_rate")
	e.Id = field.NewUint64(table, "id")
	e.Memo = field.NewString(table, "memo")
	e.MergeAccountId = field.NewString(table, "merge_account_id")
	e.ModifiedAt = field.NewTime(table, "modified_at")
	e.RemoteCreatedAt = field.NewTime(table, "remote_created_at")
	e.RemoteId = field.NewString(table, "remote_id")
	e.RemoteWasDeleted = field.NewBool(table, "remote_was_deleted")
	e.SubTotal = field.NewFloat64(table, "sub_total")
	e.TotalAmount = field.NewFloat64(table, "total_amount")
	e.TotalTaxAmount = field.NewFloat64(table, "total_tax_amount")
	e.TrackingCategories = field.NewField(table, "tracking_categories")
	e.TransactionDate = field.NewTime(table, "transaction_date")
	e.TransactionDetailsId = field.NewUint64(table, "transaction_details_id")

	e.fillFieldMap()

	return e
}

func (e *expenseORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *expenseORM) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 20)
	e.fieldMap["account"] = e.Account
	e.fieldMap["accounting_period"] = e.AccountingPeriod
	e.fieldMap["company"] = e.Company
	e.fieldMap["contact"] = e.Contact
	e.fieldMap["currency"] = e.Currency
	e.fieldMap["exchange_rate"] = e.ExchangeRate
	e.fieldMap["id"] = e.Id
	e.fieldMap["memo"] = e.Memo
	e.fieldMap["merge_account_id"] = e.MergeAccountId
	e.fieldMap["modified_at"] = e.ModifiedAt
	e.fieldMap["remote_created_at"] = e.RemoteCreatedAt
	e.fieldMap["remote_id"] = e.RemoteId
	e.fieldMap["remote_was_deleted"] = e.RemoteWasDeleted
	e.fieldMap["sub_total"] = e.SubTotal
	e.fieldMap["total_amount"] = e.TotalAmount
	e.fieldMap["total_tax_amount"] = e.TotalTaxAmount
	e.fieldMap["tracking_categories"] = e.TrackingCategories
	e.fieldMap["transaction_date"] = e.TransactionDate
	e.fieldMap["transaction_details_id"] = e.TransactionDetailsId

}

func (e expenseORM) clone(db *gorm.DB) expenseORM {
	e.expenseORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e expenseORM) replaceDB(db *gorm.DB) expenseORM {
	e.expenseORMDo.ReplaceDB(db)
	return e
}

type expenseORMHasManyLines struct {
	db *gorm.DB

	field.RelationField
}

func (a expenseORMHasManyLines) Where(conds ...field.Expr) *expenseORMHasManyLines {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a expenseORMHasManyLines) WithContext(ctx context.Context) *expenseORMHasManyLines {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a expenseORMHasManyLines) Session(session *gorm.Session) *expenseORMHasManyLines {
	a.db = a.db.Session(session)
	return &a
}

func (a expenseORMHasManyLines) Model(m *financial_servicev1.ExpenseORM) *expenseORMHasManyLinesTx {
	return &expenseORMHasManyLinesTx{a.db.Model(m).Association(a.Name())}
}

type expenseORMHasManyLinesTx struct{ tx *gorm.Association }

func (a expenseORMHasManyLinesTx) Find() (result []*financial_servicev1.ExpenseLineORM, err error) {
	return result, a.tx.Find(&result)
}

func (a expenseORMHasManyLinesTx) Append(values ...*financial_servicev1.ExpenseLineORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a expenseORMHasManyLinesTx) Replace(values ...*financial_servicev1.ExpenseLineORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a expenseORMHasManyLinesTx) Delete(values ...*financial_servicev1.ExpenseLineORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a expenseORMHasManyLinesTx) Clear() error {
	return a.tx.Clear()
}

func (a expenseORMHasManyLinesTx) Count() int64 {
	return a.tx.Count()
}

type expenseORMDo struct{ gen.DO }

type IExpenseORMDo interface {
	gen.SubQuery
	Debug() IExpenseORMDo
	WithContext(ctx context.Context) IExpenseORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExpenseORMDo
	WriteDB() IExpenseORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExpenseORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExpenseORMDo
	Not(conds ...gen.Condition) IExpenseORMDo
	Or(conds ...gen.Condition) IExpenseORMDo
	Select(conds ...field.Expr) IExpenseORMDo
	Where(conds ...gen.Condition) IExpenseORMDo
	Order(conds ...field.Expr) IExpenseORMDo
	Distinct(cols ...field.Expr) IExpenseORMDo
	Omit(cols ...field.Expr) IExpenseORMDo
	Join(table schema.Tabler, on ...field.Expr) IExpenseORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExpenseORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExpenseORMDo
	Group(cols ...field.Expr) IExpenseORMDo
	Having(conds ...gen.Condition) IExpenseORMDo
	Limit(limit int) IExpenseORMDo
	Offset(offset int) IExpenseORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExpenseORMDo
	Unscoped() IExpenseORMDo
	Create(values ...*financial_servicev1.ExpenseORM) error
	CreateInBatches(values []*financial_servicev1.ExpenseORM, batchSize int) error
	Save(values ...*financial_servicev1.ExpenseORM) error
	First() (*financial_servicev1.ExpenseORM, error)
	Take() (*financial_servicev1.ExpenseORM, error)
	Last() (*financial_servicev1.ExpenseORM, error)
	Find() ([]*financial_servicev1.ExpenseORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.ExpenseORM, err error)
	FindInBatches(result *[]*financial_servicev1.ExpenseORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.ExpenseORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExpenseORMDo
	Assign(attrs ...field.AssignExpr) IExpenseORMDo
	Joins(fields ...field.RelationField) IExpenseORMDo
	Preload(fields ...field.RelationField) IExpenseORMDo
	FirstOrInit() (*financial_servicev1.ExpenseORM, error)
	FirstOrCreate() (*financial_servicev1.ExpenseORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.ExpenseORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExpenseORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.ExpenseORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.ExpenseORM, err error)
	CreateRecord(item financial_servicev1.ExpenseORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.ExpenseORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.ExpenseORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.ExpenseORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.ExpenseORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e expenseORMDo) GetRecordByID(id int) (result financial_servicev1.ExpenseORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM expenses ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e expenseORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.ExpenseORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM expenses ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (e expenseORMDo) CreateRecord(item financial_servicev1.ExpenseORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO expenses (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (e expenseORMDo) UpdateRecordByID(id int, item financial_servicev1.ExpenseORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE expenses SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e expenseORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM expenses ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (e expenseORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.ExpenseORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM expenses ORDER BY " + e.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (e expenseORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM expenses ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (e expenseORMDo) GetByID(id uint64) (result financial_servicev1.ExpenseORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM expenses ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (e expenseORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.ExpenseORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM expenses ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e expenseORMDo) Debug() IExpenseORMDo {
	return e.withDO(e.DO.Debug())
}

func (e expenseORMDo) WithContext(ctx context.Context) IExpenseORMDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e expenseORMDo) ReadDB() IExpenseORMDo {
	return e.Clauses(dbresolver.Read)
}

func (e expenseORMDo) WriteDB() IExpenseORMDo {
	return e.Clauses(dbresolver.Write)
}

func (e expenseORMDo) Session(config *gorm.Session) IExpenseORMDo {
	return e.withDO(e.DO.Session(config))
}

func (e expenseORMDo) Clauses(conds ...clause.Expression) IExpenseORMDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e expenseORMDo) Returning(value interface{}, columns ...string) IExpenseORMDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e expenseORMDo) Not(conds ...gen.Condition) IExpenseORMDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e expenseORMDo) Or(conds ...gen.Condition) IExpenseORMDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e expenseORMDo) Select(conds ...field.Expr) IExpenseORMDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e expenseORMDo) Where(conds ...gen.Condition) IExpenseORMDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e expenseORMDo) Order(conds ...field.Expr) IExpenseORMDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e expenseORMDo) Distinct(cols ...field.Expr) IExpenseORMDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e expenseORMDo) Omit(cols ...field.Expr) IExpenseORMDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e expenseORMDo) Join(table schema.Tabler, on ...field.Expr) IExpenseORMDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e expenseORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExpenseORMDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e expenseORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IExpenseORMDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e expenseORMDo) Group(cols ...field.Expr) IExpenseORMDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e expenseORMDo) Having(conds ...gen.Condition) IExpenseORMDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e expenseORMDo) Limit(limit int) IExpenseORMDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e expenseORMDo) Offset(offset int) IExpenseORMDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e expenseORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExpenseORMDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e expenseORMDo) Unscoped() IExpenseORMDo {
	return e.withDO(e.DO.Unscoped())
}

func (e expenseORMDo) Create(values ...*financial_servicev1.ExpenseORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e expenseORMDo) CreateInBatches(values []*financial_servicev1.ExpenseORM, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e expenseORMDo) Save(values ...*financial_servicev1.ExpenseORM) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e expenseORMDo) First() (*financial_servicev1.ExpenseORM, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.ExpenseORM), nil
	}
}

func (e expenseORMDo) Take() (*financial_servicev1.ExpenseORM, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.ExpenseORM), nil
	}
}

func (e expenseORMDo) Last() (*financial_servicev1.ExpenseORM, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.ExpenseORM), nil
	}
}

func (e expenseORMDo) Find() ([]*financial_servicev1.ExpenseORM, error) {
	result, err := e.DO.Find()
	return result.([]*financial_servicev1.ExpenseORM), err
}

func (e expenseORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.ExpenseORM, err error) {
	buf := make([]*financial_servicev1.ExpenseORM, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e expenseORMDo) FindInBatches(result *[]*financial_servicev1.ExpenseORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e expenseORMDo) Attrs(attrs ...field.AssignExpr) IExpenseORMDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e expenseORMDo) Assign(attrs ...field.AssignExpr) IExpenseORMDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e expenseORMDo) Joins(fields ...field.RelationField) IExpenseORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e expenseORMDo) Preload(fields ...field.RelationField) IExpenseORMDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e expenseORMDo) FirstOrInit() (*financial_servicev1.ExpenseORM, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.ExpenseORM), nil
	}
}

func (e expenseORMDo) FirstOrCreate() (*financial_servicev1.ExpenseORM, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.ExpenseORM), nil
	}
}

func (e expenseORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.ExpenseORM, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e expenseORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e expenseORMDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e expenseORMDo) Delete(models ...*financial_servicev1.ExpenseORM) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *expenseORMDo) withDO(do gen.Dao) *expenseORMDo {
	e.DO = *do.(*gen.DO)
	return e
}
