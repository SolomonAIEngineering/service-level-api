// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newPlaidSyncORM(db *gorm.DB, opts ...gen.DOOption) plaidSyncORM {
	_plaidSyncORM := plaidSyncORM{}

	_plaidSyncORM.plaidSyncORMDo.UseDB(db, opts...)
	_plaidSyncORM.plaidSyncORMDo.UseModel(&financial_servicev1.PlaidSyncORM{})

	tableName := _plaidSyncORM.plaidSyncORMDo.TableName()
	_plaidSyncORM.ALL = field.NewAsterisk(tableName)
	_plaidSyncORM.Added = field.NewInt64(tableName, "added")
	_plaidSyncORM.Id = field.NewUint64(tableName, "id")
	_plaidSyncORM.LinkId = field.NewUint64(tableName, "link_id")
	_plaidSyncORM.Modified = field.NewInt64(tableName, "modified")
	_plaidSyncORM.NextCursor = field.NewString(tableName, "next_cursor")
	_plaidSyncORM.Removed = field.NewInt64(tableName, "removed")
	_plaidSyncORM.TimeStamp = field.NewString(tableName, "time_stamp")
	_plaidSyncORM.Trigger = field.NewString(tableName, "trigger")

	_plaidSyncORM.fillFieldMap()

	return _plaidSyncORM
}

type plaidSyncORM struct {
	plaidSyncORMDo

	ALL        field.Asterisk
	Added      field.Int64
	Id         field.Uint64
	LinkId     field.Uint64
	Modified   field.Int64
	NextCursor field.String
	Removed    field.Int64
	TimeStamp  field.String
	Trigger    field.String

	fieldMap map[string]field.Expr
}

func (p plaidSyncORM) Table(newTableName string) *plaidSyncORM {
	p.plaidSyncORMDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p plaidSyncORM) As(alias string) *plaidSyncORM {
	p.plaidSyncORMDo.DO = *(p.plaidSyncORMDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *plaidSyncORM) updateTableName(table string) *plaidSyncORM {
	p.ALL = field.NewAsterisk(table)
	p.Added = field.NewInt64(table, "added")
	p.Id = field.NewUint64(table, "id")
	p.LinkId = field.NewUint64(table, "link_id")
	p.Modified = field.NewInt64(table, "modified")
	p.NextCursor = field.NewString(table, "next_cursor")
	p.Removed = field.NewInt64(table, "removed")
	p.TimeStamp = field.NewString(table, "time_stamp")
	p.Trigger = field.NewString(table, "trigger")

	p.fillFieldMap()

	return p
}

func (p *plaidSyncORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *plaidSyncORM) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["added"] = p.Added
	p.fieldMap["id"] = p.Id
	p.fieldMap["link_id"] = p.LinkId
	p.fieldMap["modified"] = p.Modified
	p.fieldMap["next_cursor"] = p.NextCursor
	p.fieldMap["removed"] = p.Removed
	p.fieldMap["time_stamp"] = p.TimeStamp
	p.fieldMap["trigger"] = p.Trigger
}

func (p plaidSyncORM) clone(db *gorm.DB) plaidSyncORM {
	p.plaidSyncORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p plaidSyncORM) replaceDB(db *gorm.DB) plaidSyncORM {
	p.plaidSyncORMDo.ReplaceDB(db)
	return p
}

type plaidSyncORMDo struct{ gen.DO }

type IPlaidSyncORMDo interface {
	gen.SubQuery
	Debug() IPlaidSyncORMDo
	WithContext(ctx context.Context) IPlaidSyncORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlaidSyncORMDo
	WriteDB() IPlaidSyncORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlaidSyncORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlaidSyncORMDo
	Not(conds ...gen.Condition) IPlaidSyncORMDo
	Or(conds ...gen.Condition) IPlaidSyncORMDo
	Select(conds ...field.Expr) IPlaidSyncORMDo
	Where(conds ...gen.Condition) IPlaidSyncORMDo
	Order(conds ...field.Expr) IPlaidSyncORMDo
	Distinct(cols ...field.Expr) IPlaidSyncORMDo
	Omit(cols ...field.Expr) IPlaidSyncORMDo
	Join(table schema.Tabler, on ...field.Expr) IPlaidSyncORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlaidSyncORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlaidSyncORMDo
	Group(cols ...field.Expr) IPlaidSyncORMDo
	Having(conds ...gen.Condition) IPlaidSyncORMDo
	Limit(limit int) IPlaidSyncORMDo
	Offset(offset int) IPlaidSyncORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlaidSyncORMDo
	Unscoped() IPlaidSyncORMDo
	Create(values ...*financial_servicev1.PlaidSyncORM) error
	CreateInBatches(values []*financial_servicev1.PlaidSyncORM, batchSize int) error
	Save(values ...*financial_servicev1.PlaidSyncORM) error
	First() (*financial_servicev1.PlaidSyncORM, error)
	Take() (*financial_servicev1.PlaidSyncORM, error)
	Last() (*financial_servicev1.PlaidSyncORM, error)
	Find() ([]*financial_servicev1.PlaidSyncORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.PlaidSyncORM, err error)
	FindInBatches(result *[]*financial_servicev1.PlaidSyncORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.PlaidSyncORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlaidSyncORMDo
	Assign(attrs ...field.AssignExpr) IPlaidSyncORMDo
	Joins(fields ...field.RelationField) IPlaidSyncORMDo
	Preload(fields ...field.RelationField) IPlaidSyncORMDo
	FirstOrInit() (*financial_servicev1.PlaidSyncORM, error)
	FirstOrCreate() (*financial_servicev1.PlaidSyncORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.PlaidSyncORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlaidSyncORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.PlaidSyncORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.PlaidSyncORM, err error)
	CreateRecord(item financial_servicev1.PlaidSyncORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.PlaidSyncORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.PlaidSyncORM, err error)
	CountAll() (result int, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (p plaidSyncORMDo) GetRecordByID(id int) (result financial_servicev1.PlaidSyncORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM plaid_syncs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (p plaidSyncORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.PlaidSyncORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM plaid_syncs ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (p plaidSyncORMDo) CreateRecord(item financial_servicev1.PlaidSyncORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO plaid_syncs (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (p plaidSyncORMDo) UpdateRecordByID(id int, item financial_servicev1.PlaidSyncORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE plaid_syncs SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (p plaidSyncORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM plaid_syncs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (p plaidSyncORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.PlaidSyncORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM plaid_syncs ORDER BY " + p.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (p plaidSyncORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM plaid_syncs ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p plaidSyncORMDo) Debug() IPlaidSyncORMDo {
	return p.withDO(p.DO.Debug())
}

func (p plaidSyncORMDo) WithContext(ctx context.Context) IPlaidSyncORMDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p plaidSyncORMDo) ReadDB() IPlaidSyncORMDo {
	return p.Clauses(dbresolver.Read)
}

func (p plaidSyncORMDo) WriteDB() IPlaidSyncORMDo {
	return p.Clauses(dbresolver.Write)
}

func (p plaidSyncORMDo) Session(config *gorm.Session) IPlaidSyncORMDo {
	return p.withDO(p.DO.Session(config))
}

func (p plaidSyncORMDo) Clauses(conds ...clause.Expression) IPlaidSyncORMDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p plaidSyncORMDo) Returning(value interface{}, columns ...string) IPlaidSyncORMDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p plaidSyncORMDo) Not(conds ...gen.Condition) IPlaidSyncORMDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p plaidSyncORMDo) Or(conds ...gen.Condition) IPlaidSyncORMDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p plaidSyncORMDo) Select(conds ...field.Expr) IPlaidSyncORMDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p plaidSyncORMDo) Where(conds ...gen.Condition) IPlaidSyncORMDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p plaidSyncORMDo) Order(conds ...field.Expr) IPlaidSyncORMDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p plaidSyncORMDo) Distinct(cols ...field.Expr) IPlaidSyncORMDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p plaidSyncORMDo) Omit(cols ...field.Expr) IPlaidSyncORMDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p plaidSyncORMDo) Join(table schema.Tabler, on ...field.Expr) IPlaidSyncORMDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p plaidSyncORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlaidSyncORMDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p plaidSyncORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlaidSyncORMDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p plaidSyncORMDo) Group(cols ...field.Expr) IPlaidSyncORMDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p plaidSyncORMDo) Having(conds ...gen.Condition) IPlaidSyncORMDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p plaidSyncORMDo) Limit(limit int) IPlaidSyncORMDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p plaidSyncORMDo) Offset(offset int) IPlaidSyncORMDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p plaidSyncORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlaidSyncORMDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p plaidSyncORMDo) Unscoped() IPlaidSyncORMDo {
	return p.withDO(p.DO.Unscoped())
}

func (p plaidSyncORMDo) Create(values ...*financial_servicev1.PlaidSyncORM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p plaidSyncORMDo) CreateInBatches(values []*financial_servicev1.PlaidSyncORM, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p plaidSyncORMDo) Save(values ...*financial_servicev1.PlaidSyncORM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p plaidSyncORMDo) First() (*financial_servicev1.PlaidSyncORM, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidSyncORM), nil
	}
}

func (p plaidSyncORMDo) Take() (*financial_servicev1.PlaidSyncORM, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidSyncORM), nil
	}
}

func (p plaidSyncORMDo) Last() (*financial_servicev1.PlaidSyncORM, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidSyncORM), nil
	}
}

func (p plaidSyncORMDo) Find() ([]*financial_servicev1.PlaidSyncORM, error) {
	result, err := p.DO.Find()
	return result.([]*financial_servicev1.PlaidSyncORM), err
}

func (p plaidSyncORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.PlaidSyncORM, err error) {
	buf := make([]*financial_servicev1.PlaidSyncORM, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p plaidSyncORMDo) FindInBatches(result *[]*financial_servicev1.PlaidSyncORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p plaidSyncORMDo) Attrs(attrs ...field.AssignExpr) IPlaidSyncORMDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p plaidSyncORMDo) Assign(attrs ...field.AssignExpr) IPlaidSyncORMDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p plaidSyncORMDo) Joins(fields ...field.RelationField) IPlaidSyncORMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p plaidSyncORMDo) Preload(fields ...field.RelationField) IPlaidSyncORMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p plaidSyncORMDo) FirstOrInit() (*financial_servicev1.PlaidSyncORM, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidSyncORM), nil
	}
}

func (p plaidSyncORMDo) FirstOrCreate() (*financial_servicev1.PlaidSyncORM, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.PlaidSyncORM), nil
	}
}

func (p plaidSyncORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.PlaidSyncORM, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p plaidSyncORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p plaidSyncORMDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p plaidSyncORMDo) Delete(models ...*financial_servicev1.PlaidSyncORM) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *plaidSyncORMDo) withDO(do gen.Dao) *plaidSyncORMDo {
	p.DO = *do.(*gen.DO)
	return p
}
