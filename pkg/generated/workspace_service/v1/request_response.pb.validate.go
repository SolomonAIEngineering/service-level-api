// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: workspace_service/v1/request_response.proto

package workspace_servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileUploadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadRequestMultiError, or nil if none found.
func (m *FileUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FolderId

	// no validation rules for Content

	if utf8.RuneCountInString(m.GetName()) < 5 {
		err := FileUploadRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FileUploadRequestMultiError(errors)
	}

	return nil
}

// FileUploadRequestMultiError is an error wrapping multiple validation errors
// returned by FileUploadRequest.ValidateAll() if the designated constraints
// aren't met.
type FileUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadRequestMultiError) AllErrors() []error { return m }

// FileUploadRequestValidationError is the validation error returned by
// FileUploadRequest.Validate if the designated constraints aren't met.
type FileUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadRequestValidationError) ErrorName() string {
	return "FileUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadRequestValidationError{}

// Validate checks the field values on FileUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadResponseMultiError, or nil if none found.
func (m *FileUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileUploadResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileUploadResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileUploadResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileUploadResponseMultiError(errors)
	}

	return nil
}

// FileUploadResponseMultiError is an error wrapping multiple validation errors
// returned by FileUploadResponse.ValidateAll() if the designated constraints
// aren't met.
type FileUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadResponseMultiError) AllErrors() []error { return m }

// FileUploadResponseValidationError is the validation error returned by
// FileUploadResponse.Validate if the designated constraints aren't met.
type FileUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadResponseValidationError) ErrorName() string {
	return "FileUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FileUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadResponseValidationError{}

// Validate checks the field values on FileDownloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileDownloadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDownloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileDownloadRequestMultiError, or nil if none found.
func (m *FileDownloadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDownloadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileId

	if len(errors) > 0 {
		return FileDownloadRequestMultiError(errors)
	}

	return nil
}

// FileDownloadRequestMultiError is an error wrapping multiple validation
// errors returned by FileDownloadRequest.ValidateAll() if the designated
// constraints aren't met.
type FileDownloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDownloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDownloadRequestMultiError) AllErrors() []error { return m }

// FileDownloadRequestValidationError is the validation error returned by
// FileDownloadRequest.Validate if the designated constraints aren't met.
type FileDownloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDownloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDownloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDownloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDownloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDownloadRequestValidationError) ErrorName() string {
	return "FileDownloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileDownloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDownloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDownloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDownloadRequestValidationError{}

// Validate checks the field values on FileDownloadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileDownloadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDownloadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileDownloadResponseMultiError, or nil if none found.
func (m *FileDownloadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDownloadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return FileDownloadResponseMultiError(errors)
	}

	return nil
}

// FileDownloadResponseMultiError is an error wrapping multiple validation
// errors returned by FileDownloadResponse.ValidateAll() if the designated
// constraints aren't met.
type FileDownloadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDownloadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDownloadResponseMultiError) AllErrors() []error { return m }

// FileDownloadResponseValidationError is the validation error returned by
// FileDownloadResponse.Validate if the designated constraints aren't met.
type FileDownloadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDownloadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDownloadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDownloadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDownloadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDownloadResponseValidationError) ErrorName() string {
	return "FileDownloadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FileDownloadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDownloadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDownloadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDownloadResponseValidationError{}

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRequestMultiError, or nil if none found.
func (m *CreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := CreateAccountRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAccountRequestMultiError(errors)
	}

	return nil
}

// CreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequestMultiError) AllErrors() []error { return m }

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

// Validate checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountResponseMultiError, or nil if none found.
func (m *CreateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccountResponseMultiError(errors)
	}

	return nil
}

// CreateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountResponseMultiError) AllErrors() []error { return m }

// CreateAccountResponseValidationError is the validation error returned by
// CreateAccountResponse.Validate if the designated constraints aren't met.
type CreateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountResponseValidationError) ErrorName() string {
	return "CreateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountResponseValidationError{}

// Validate checks the field values on GetAccountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountRequestMultiError, or nil if none found.
func (m *GetAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := GetAccountRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountRequestMultiError(errors)
	}

	return nil
}

// GetAccountRequestMultiError is an error wrapping multiple validation errors
// returned by GetAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountRequestMultiError) AllErrors() []error { return m }

// GetAccountRequestValidationError is the validation error returned by
// GetAccountRequest.Validate if the designated constraints aren't met.
type GetAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountRequestValidationError) ErrorName() string {
	return "GetAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountRequestValidationError{}

// Validate checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountResponseMultiError, or nil if none found.
func (m *GetAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountResponseMultiError(errors)
	}

	return nil
}

// GetAccountResponseMultiError is an error wrapping multiple validation errors
// returned by GetAccountResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountResponseMultiError) AllErrors() []error { return m }

// GetAccountResponseValidationError is the validation error returned by
// GetAccountResponse.Validate if the designated constraints aren't met.
type GetAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountResponseValidationError) ErrorName() string {
	return "GetAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountResponseValidationError{}

// Validate checks the field values on DeleteAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountRequestMultiError, or nil if none found.
func (m *DeleteAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := DeleteAccountRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteAccountRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountRequestMultiError) AllErrors() []error { return m }

// DeleteAccountRequestValidationError is the validation error returned by
// DeleteAccountRequest.Validate if the designated constraints aren't met.
type DeleteAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountRequestValidationError) ErrorName() string {
	return "DeleteAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountRequestValidationError{}

// Validate checks the field values on DeleteAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountResponseMultiError, or nil if none found.
func (m *DeleteAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return DeleteAccountResponseMultiError(errors)
	}

	return nil
}

// DeleteAccountResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountResponseMultiError) AllErrors() []error { return m }

// DeleteAccountResponseValidationError is the validation error returned by
// DeleteAccountResponse.Validate if the designated constraints aren't met.
type DeleteAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountResponseValidationError) ErrorName() string {
	return "DeleteAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountResponseValidationError{}

// Validate checks the field values on UploadFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadFileRequestMultiError, or nil if none found.
func (m *UploadFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := UploadFileRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FolderId

	// no validation rules for Data

	if utf8.RuneCountInString(m.GetName()) < 5 {
		err := UploadFileRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UploadFileRequestMultiError(errors)
	}

	return nil
}

// UploadFileRequestMultiError is an error wrapping multiple validation errors
// returned by UploadFileRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadFileRequestMultiError) AllErrors() []error { return m }

// UploadFileRequestValidationError is the validation error returned by
// UploadFileRequest.Validate if the designated constraints aren't met.
type UploadFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileRequestValidationError) ErrorName() string {
	return "UploadFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileRequestValidationError{}

// Validate checks the field values on UploadFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadFileResponseMultiError, or nil if none found.
func (m *UploadFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadFileResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadFileResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadFileResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadFileResponseMultiError(errors)
	}

	return nil
}

// UploadFileResponseMultiError is an error wrapping multiple validation errors
// returned by UploadFileResponse.ValidateAll() if the designated constraints
// aren't met.
type UploadFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadFileResponseMultiError) AllErrors() []error { return m }

// UploadFileResponseValidationError is the validation error returned by
// UploadFileResponse.Validate if the designated constraints aren't met.
type UploadFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileResponseValidationError) ErrorName() string {
	return "UploadFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileResponseValidationError{}

// Validate checks the field values on DownloadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadFileRequestMultiError, or nil if none found.
func (m *DownloadFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := DownloadFileRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FileId

	// no validation rules for FolderId

	// no validation rules for WorkspaceId

	if len(errors) > 0 {
		return DownloadFileRequestMultiError(errors)
	}

	return nil
}

// DownloadFileRequestMultiError is an error wrapping multiple validation
// errors returned by DownloadFileRequest.ValidateAll() if the designated
// constraints aren't met.
type DownloadFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadFileRequestMultiError) AllErrors() []error { return m }

// DownloadFileRequestValidationError is the validation error returned by
// DownloadFileRequest.Validate if the designated constraints aren't met.
type DownloadFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadFileRequestValidationError) ErrorName() string {
	return "DownloadFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadFileRequestValidationError{}

// Validate checks the field values on DownloadFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadFileResponseMultiError, or nil if none found.
func (m *DownloadFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DownloadFileResponseMultiError(errors)
	}

	return nil
}

// DownloadFileResponseMultiError is an error wrapping multiple validation
// errors returned by DownloadFileResponse.ValidateAll() if the designated
// constraints aren't met.
type DownloadFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadFileResponseMultiError) AllErrors() []error { return m }

// DownloadFileResponseValidationError is the validation error returned by
// DownloadFileResponse.Validate if the designated constraints aren't met.
type DownloadFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadFileResponseValidationError) ErrorName() string {
	return "DownloadFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadFileResponseValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileRequestMultiError, or nil if none found.
func (m *DeleteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := DeleteFileRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FileId

	// no validation rules for FolderId

	// no validation rules for WorkspaceId

	if len(errors) > 0 {
		return DeleteFileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileRequestMultiError) AllErrors() []error { return m }

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on DeleteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileResponseMultiError, or nil if none found.
func (m *DeleteFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return DeleteFileResponseMultiError(errors)
	}

	return nil
}

// DeleteFileResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteFileResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileResponseMultiError) AllErrors() []error { return m }

// DeleteFileResponseValidationError is the validation error returned by
// DeleteFileResponse.Validate if the designated constraints aren't met.
type DeleteFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileResponseValidationError) ErrorName() string {
	return "DeleteFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileResponseValidationError{}

// Validate checks the field values on UpdateFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFileRequestMultiError, or nil if none found.
func (m *UpdateFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFileRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFileRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFileRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFileRequestMultiError(errors)
	}

	return nil
}

// UpdateFileRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateFileRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileRequestMultiError) AllErrors() []error { return m }

// UpdateFileRequestValidationError is the validation error returned by
// UpdateFileRequest.Validate if the designated constraints aren't met.
type UpdateFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileRequestValidationError) ErrorName() string {
	return "UpdateFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileRequestValidationError{}

// Validate checks the field values on UpdateFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFileResponseMultiError, or nil if none found.
func (m *UpdateFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFileResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFileResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFileResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFileResponseMultiError(errors)
	}

	return nil
}

// UpdateFileResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateFileResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileResponseMultiError) AllErrors() []error { return m }

// UpdateFileResponseValidationError is the validation error returned by
// UpdateFileResponse.Validate if the designated constraints aren't met.
type UpdateFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileResponseValidationError) ErrorName() string {
	return "UpdateFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileResponseValidationError{}

// Validate checks the field values on CreateFolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFolderRequestMultiError, or nil if none found.
func (m *CreateFolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := CreateFolderRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WorkspaceId

	if utf8.RuneCountInString(m.GetName()) < 5 {
		err := CreateFolderRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateFolderRequestMultiError(errors)
	}

	return nil
}

// CreateFolderRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFolderRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFolderRequestMultiError) AllErrors() []error { return m }

// CreateFolderRequestValidationError is the validation error returned by
// CreateFolderRequest.Validate if the designated constraints aren't met.
type CreateFolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFolderRequestValidationError) ErrorName() string {
	return "CreateFolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFolderRequestValidationError{}

// Validate checks the field values on CreateFolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFolderResponseMultiError, or nil if none found.
func (m *CreateFolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFolder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFolderResponseValidationError{
					field:  "Folder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFolderResponseValidationError{
					field:  "Folder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFolder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFolderResponseValidationError{
				field:  "Folder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFolderResponseMultiError(errors)
	}

	return nil
}

// CreateFolderResponseMultiError is an error wrapping multiple validation
// errors returned by CreateFolderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateFolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFolderResponseMultiError) AllErrors() []error { return m }

// CreateFolderResponseValidationError is the validation error returned by
// CreateFolderResponse.Validate if the designated constraints aren't met.
type CreateFolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFolderResponseValidationError) ErrorName() string {
	return "CreateFolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFolderResponseValidationError{}

// Validate checks the field values on ListFolderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFolderRequestMultiError, or nil if none found.
func (m *ListFolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := ListFolderRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FolderId

	// no validation rules for WorkspaceId

	if len(errors) > 0 {
		return ListFolderRequestMultiError(errors)
	}

	return nil
}

// ListFolderRequestMultiError is an error wrapping multiple validation errors
// returned by ListFolderRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFolderRequestMultiError) AllErrors() []error { return m }

// ListFolderRequestValidationError is the validation error returned by
// ListFolderRequest.Validate if the designated constraints aren't met.
type ListFolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFolderRequestValidationError) ErrorName() string {
	return "ListFolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFolderRequestValidationError{}

// Validate checks the field values on ListFolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFolderResponseMultiError, or nil if none found.
func (m *ListFolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFolder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFolderResponseValidationError{
					field:  "Folder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFolderResponseValidationError{
					field:  "Folder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFolder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFolderResponseValidationError{
				field:  "Folder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListFolderResponseMultiError(errors)
	}

	return nil
}

// ListFolderResponseMultiError is an error wrapping multiple validation errors
// returned by ListFolderResponse.ValidateAll() if the designated constraints
// aren't met.
type ListFolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFolderResponseMultiError) AllErrors() []error { return m }

// ListFolderResponseValidationError is the validation error returned by
// ListFolderResponse.Validate if the designated constraints aren't met.
type ListFolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFolderResponseValidationError) ErrorName() string {
	return "ListFolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFolderResponseValidationError{}

// Validate checks the field values on UpdateFolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFolderRequestMultiError, or nil if none found.
func (m *UpdateFolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFolder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFolderRequestValidationError{
					field:  "Folder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFolderRequestValidationError{
					field:  "Folder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFolder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFolderRequestValidationError{
				field:  "Folder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFolderRequestMultiError(errors)
	}

	return nil
}

// UpdateFolderRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFolderRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFolderRequestMultiError) AllErrors() []error { return m }

// UpdateFolderRequestValidationError is the validation error returned by
// UpdateFolderRequest.Validate if the designated constraints aren't met.
type UpdateFolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFolderRequestValidationError) ErrorName() string {
	return "UpdateFolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFolderRequestValidationError{}

// Validate checks the field values on UpdateFolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFolderResponseMultiError, or nil if none found.
func (m *UpdateFolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFolder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFolderResponseValidationError{
					field:  "Folder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFolderResponseValidationError{
					field:  "Folder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFolder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFolderResponseValidationError{
				field:  "Folder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFolderResponseMultiError(errors)
	}

	return nil
}

// UpdateFolderResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateFolderResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateFolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFolderResponseMultiError) AllErrors() []error { return m }

// UpdateFolderResponseValidationError is the validation error returned by
// UpdateFolderResponse.Validate if the designated constraints aren't met.
type UpdateFolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFolderResponseValidationError) ErrorName() string {
	return "UpdateFolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFolderResponseValidationError{}

// Validate checks the field values on DeleteFolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFolderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFolderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFolderRequestMultiError, or nil if none found.
func (m *DeleteFolderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFolderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := DeleteFolderRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FolderId

	// no validation rules for WorkspaceId

	if len(errors) > 0 {
		return DeleteFolderRequestMultiError(errors)
	}

	return nil
}

// DeleteFolderRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFolderRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFolderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFolderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFolderRequestMultiError) AllErrors() []error { return m }

// DeleteFolderRequestValidationError is the validation error returned by
// DeleteFolderRequest.Validate if the designated constraints aren't met.
type DeleteFolderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFolderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFolderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFolderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFolderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFolderRequestValidationError) ErrorName() string {
	return "DeleteFolderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFolderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFolderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFolderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFolderRequestValidationError{}

// Validate checks the field values on DeleteFolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFolderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFolderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFolderResponseMultiError, or nil if none found.
func (m *DeleteFolderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFolderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return DeleteFolderResponseMultiError(errors)
	}

	return nil
}

// DeleteFolderResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteFolderResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteFolderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFolderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFolderResponseMultiError) AllErrors() []error { return m }

// DeleteFolderResponseValidationError is the validation error returned by
// DeleteFolderResponse.Validate if the designated constraints aren't met.
type DeleteFolderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFolderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFolderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFolderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFolderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFolderResponseValidationError) ErrorName() string {
	return "DeleteFolderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFolderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFolderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFolderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFolderResponseValidationError{}

// Validate checks the field values on CreateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkspaceRequestMultiError, or nil if none found.
func (m *CreateWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := CreateWorkspaceRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 5 {
		err := CreateWorkspaceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateWorkspaceRequestMultiError(errors)
	}

	return nil
}

// CreateWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkspaceRequestMultiError) AllErrors() []error { return m }

// CreateWorkspaceRequestValidationError is the validation error returned by
// CreateWorkspaceRequest.Validate if the designated constraints aren't met.
type CreateWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkspaceRequestValidationError) ErrorName() string {
	return "CreateWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkspaceRequestValidationError{}

// Validate checks the field values on CreateWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkspaceResponseMultiError, or nil if none found.
func (m *CreateWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkspaceResponseMultiError(errors)
	}

	return nil
}

// CreateWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkspaceResponseMultiError) AllErrors() []error { return m }

// CreateWorkspaceResponseValidationError is the validation error returned by
// CreateWorkspaceResponse.Validate if the designated constraints aren't met.
type CreateWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkspaceResponseValidationError) ErrorName() string {
	return "CreateWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkspaceResponseValidationError{}

// Validate checks the field values on ListWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkspaceRequestMultiError, or nil if none found.
func (m *ListWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := ListWorkspaceRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWorkspaceRequestMultiError(errors)
	}

	return nil
}

// ListWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by ListWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkspaceRequestMultiError) AllErrors() []error { return m }

// ListWorkspaceRequestValidationError is the validation error returned by
// ListWorkspaceRequest.Validate if the designated constraints aren't met.
type ListWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspaceRequestValidationError) ErrorName() string {
	return "ListWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspaceRequestValidationError{}

// Validate checks the field values on ListWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkspaceResponseMultiError, or nil if none found.
func (m *ListWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListWorkspaceResponseMultiError(errors)
	}

	return nil
}

// ListWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by ListWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkspaceResponseMultiError) AllErrors() []error { return m }

// ListWorkspaceResponseValidationError is the validation error returned by
// ListWorkspaceResponse.Validate if the designated constraints aren't met.
type ListWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspaceResponseValidationError) ErrorName() string {
	return "ListWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspaceResponseValidationError{}

// Validate checks the field values on UpdateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkspaceRequestMultiError, or nil if none found.
func (m *UpdateWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkspaceRequestValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkspaceRequestValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkspaceRequestValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkspaceRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkspaceRequestMultiError) AllErrors() []error { return m }

// UpdateWorkspaceRequestValidationError is the validation error returned by
// UpdateWorkspaceRequest.Validate if the designated constraints aren't met.
type UpdateWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkspaceRequestValidationError) ErrorName() string {
	return "UpdateWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkspaceRequestValidationError{}

// Validate checks the field values on UpdateWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkspaceResponseMultiError, or nil if none found.
func (m *UpdateWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkspaceResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkspaceResponseMultiError) AllErrors() []error { return m }

// UpdateWorkspaceResponseValidationError is the validation error returned by
// UpdateWorkspaceResponse.Validate if the designated constraints aren't met.
type UpdateWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkspaceResponseValidationError) ErrorName() string {
	return "UpdateWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkspaceResponseValidationError{}

// Validate checks the field values on DeleteWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkspaceRequestMultiError, or nil if none found.
func (m *DeleteWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthZeroUserId()) < 1 {
		err := DeleteWorkspaceRequestValidationError{
			field:  "AuthZeroUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WorkspaceId

	if len(errors) > 0 {
		return DeleteWorkspaceRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkspaceRequestMultiError) AllErrors() []error { return m }

// DeleteWorkspaceRequestValidationError is the validation error returned by
// DeleteWorkspaceRequest.Validate if the designated constraints aren't met.
type DeleteWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkspaceRequestValidationError) ErrorName() string {
	return "DeleteWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkspaceRequestValidationError{}

// Validate checks the field values on DeleteWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkspaceResponseMultiError, or nil if none found.
func (m *DeleteWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return DeleteWorkspaceResponseMultiError(errors)
	}

	return nil
}

// DeleteWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkspaceResponseMultiError) AllErrors() []error { return m }

// DeleteWorkspaceResponseValidationError is the validation error returned by
// DeleteWorkspaceResponse.Validate if the designated constraints aren't met.
type DeleteWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkspaceResponseValidationError) ErrorName() string {
	return "DeleteWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkspaceResponseValidationError{}
