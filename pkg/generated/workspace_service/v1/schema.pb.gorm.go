package workspace_servicev1

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	pq "github.com/lib/pq"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type AccountORM struct {
	Auth0UserId string          `gorm:"unique_index:idx_user_auth0_user_id"`
	Id          uint64          `gorm:"unique_index:idx_user_id"`
	Workspace   []*WorkspaceORM `gorm:"foreignkey:AccountId;association_foreignkey:Id;preload:true"`
}

// TableName overrides the default tablename generated by GORM
func (AccountORM) TableName() string {
	return "accounts"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Account) ToORM(ctx context.Context) (AccountORM, error) {
	to := AccountORM{}
	var err error
	if prehook, ok := interface{}(m).(AccountWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Auth0UserId = m.Auth0UserId
	for _, v := range m.Workspace {
		if v != nil {
			if tempWorkspace, cErr := v.ToORM(ctx); cErr == nil {
				to.Workspace = append(to.Workspace, &tempWorkspace)
			} else {
				return to, cErr
			}
		} else {
			to.Workspace = append(to.Workspace, nil)
		}
	}
	if posthook, ok := interface{}(m).(AccountWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *AccountORM) ToPB(ctx context.Context) (Account, error) {
	to := Account{}
	var err error
	if prehook, ok := interface{}(m).(AccountWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Auth0UserId = m.Auth0UserId
	for _, v := range m.Workspace {
		if v != nil {
			if tempWorkspace, cErr := v.ToPB(ctx); cErr == nil {
				to.Workspace = append(to.Workspace, &tempWorkspace)
			} else {
				return to, cErr
			}
		} else {
			to.Workspace = append(to.Workspace, nil)
		}
	}
	if posthook, ok := interface{}(m).(AccountWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Account the arg will be the target, the caller the one being converted from

// AccountBeforeToORM called before default ToORM code
type AccountWithBeforeToORM interface {
	BeforeToORM(context.Context, *AccountORM) error
}

// AccountAfterToORM called after default ToORM code
type AccountWithAfterToORM interface {
	AfterToORM(context.Context, *AccountORM) error
}

// AccountBeforeToPB called before default ToPB code
type AccountWithBeforeToPB interface {
	BeforeToPB(context.Context, *Account) error
}

// AccountAfterToPB called after default ToPB code
type AccountWithAfterToPB interface {
	AfterToPB(context.Context, *Account) error
}

type FileMetadataORM struct {
	CreatedAt              *time.Time
	FileType               string
	FolderMetadataId       *uint64
	Id                     uint64 `gorm:"unique_index:idx_file_id"`
	IsDeleted              bool
	Name                   string
	S3Acl                  string
	S3BucketName           string
	S3ContentDisposition   string
	S3ContentEncoding      string
	S3ContentLength        int64
	S3ContentType          string
	S3Etag                 string
	S3Key                  string
	S3LastModified         *time.Time
	S3Region               string
	S3ServerSideEncryption string
	S3StorageClass         string
	S3VersionId            string
	Size                   int64
	Tags                   pq.StringArray `gorm:"type:text[]"`
	UpdatedAt              *time.Time
	Version                int32
}

// TableName overrides the default tablename generated by GORM
func (FileMetadataORM) TableName() string {
	return "file_metadata"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *FileMetadata) ToORM(ctx context.Context) (FileMetadataORM, error) {
	to := FileMetadataORM{}
	var err error
	if prehook, ok := interface{}(m).(FileMetadataWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.Size = m.Size
	to.FileType = m.FileType
	if m.Tags != nil {
		to.Tags = make(pq.StringArray, len(m.Tags))
		copy(to.Tags, m.Tags)
	}
	to.IsDeleted = m.IsDeleted
	to.Version = m.Version
	to.S3Key = m.S3Key
	to.S3BucketName = m.S3BucketName
	to.S3Region = m.S3Region
	to.S3VersionId = m.S3VersionId
	to.S3Etag = m.S3Etag
	to.S3ContentType = m.S3ContentType
	to.S3ContentLength = m.S3ContentLength
	to.S3ContentEncoding = m.S3ContentEncoding
	to.S3ContentDisposition = m.S3ContentDisposition
	if m.S3LastModified != nil {
		t := m.S3LastModified.AsTime()
		to.S3LastModified = &t
	}
	to.S3StorageClass = m.S3StorageClass
	to.S3ServerSideEncryption = m.S3ServerSideEncryption
	to.S3Acl = m.S3Acl
	// Repeated type S3MetadataEntry is not an ORMable message type
	if posthook, ok := interface{}(m).(FileMetadataWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *FileMetadataORM) ToPB(ctx context.Context) (FileMetadata, error) {
	to := FileMetadata{}
	var err error
	if prehook, ok := interface{}(m).(FileMetadataWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.Size = m.Size
	to.FileType = m.FileType
	if m.Tags != nil {
		to.Tags = make(pq.StringArray, len(m.Tags))
		copy(to.Tags, m.Tags)
	}
	to.IsDeleted = m.IsDeleted
	to.Version = m.Version
	to.S3Key = m.S3Key
	to.S3BucketName = m.S3BucketName
	to.S3Region = m.S3Region
	to.S3VersionId = m.S3VersionId
	to.S3Etag = m.S3Etag
	to.S3ContentType = m.S3ContentType
	to.S3ContentLength = m.S3ContentLength
	to.S3ContentEncoding = m.S3ContentEncoding
	to.S3ContentDisposition = m.S3ContentDisposition
	if m.S3LastModified != nil {
		to.S3LastModified = timestamppb.New(*m.S3LastModified)
	}
	to.S3StorageClass = m.S3StorageClass
	to.S3ServerSideEncryption = m.S3ServerSideEncryption
	to.S3Acl = m.S3Acl
	// Repeated type S3MetadataEntry is not an ORMable message type
	if posthook, ok := interface{}(m).(FileMetadataWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type FileMetadata the arg will be the target, the caller the one being converted from

// FileMetadataBeforeToORM called before default ToORM code
type FileMetadataWithBeforeToORM interface {
	BeforeToORM(context.Context, *FileMetadataORM) error
}

// FileMetadataAfterToORM called after default ToORM code
type FileMetadataWithAfterToORM interface {
	AfterToORM(context.Context, *FileMetadataORM) error
}

// FileMetadataBeforeToPB called before default ToPB code
type FileMetadataWithBeforeToPB interface {
	BeforeToPB(context.Context, *FileMetadata) error
}

// FileMetadataAfterToPB called after default ToPB code
type FileMetadataWithAfterToPB interface {
	AfterToPB(context.Context, *FileMetadata) error
}

type FolderMetadataORM struct {
	ChildFolder      []*FolderMetadataORM `gorm:"foreignkey:FolderMetadataId;association_foreignkey:Id;preload:true"`
	CreatedAt        *time.Time
	Files            []*FileMetadataORM `gorm:"foreignkey:FolderMetadataId;association_foreignkey:Id;preload:true"`
	FolderMetadataId *uint64
	Id               uint64 `gorm:"unique_index:idx_folder_id"`
	IsDeleted        bool
	Name             string
	S3Acl            string
	S3BucketName     string
	S3FolderPath     string
	S3LastModified   *time.Time
	S3Region         string
	UpdatedAt        *time.Time
	WorkspaceId      *string
}

// TableName overrides the default tablename generated by GORM
func (FolderMetadataORM) TableName() string {
	return "folder_metadata"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *FolderMetadata) ToORM(ctx context.Context) (FolderMetadataORM, error) {
	to := FolderMetadataORM{}
	var err error
	if prehook, ok := interface{}(m).(FolderMetadataWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	for _, v := range m.ChildFolder {
		if v != nil {
			if tempChildFolder, cErr := v.ToORM(ctx); cErr == nil {
				to.ChildFolder = append(to.ChildFolder, &tempChildFolder)
			} else {
				return to, cErr
			}
		} else {
			to.ChildFolder = append(to.ChildFolder, nil)
		}
	}
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	for _, v := range m.Files {
		if v != nil {
			if tempFiles, cErr := v.ToORM(ctx); cErr == nil {
				to.Files = append(to.Files, &tempFiles)
			} else {
				return to, cErr
			}
		} else {
			to.Files = append(to.Files, nil)
		}
	}
	to.IsDeleted = m.IsDeleted
	to.S3BucketName = m.S3BucketName
	to.S3FolderPath = m.S3FolderPath
	to.S3Region = m.S3Region
	// Repeated type S3MetadataEntry is not an ORMable message type
	to.S3Acl = m.S3Acl
	if m.S3LastModified != nil {
		t := m.S3LastModified.AsTime()
		to.S3LastModified = &t
	}
	if posthook, ok := interface{}(m).(FolderMetadataWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *FolderMetadataORM) ToPB(ctx context.Context) (FolderMetadata, error) {
	to := FolderMetadata{}
	var err error
	if prehook, ok := interface{}(m).(FolderMetadataWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	for _, v := range m.ChildFolder {
		if v != nil {
			if tempChildFolder, cErr := v.ToPB(ctx); cErr == nil {
				to.ChildFolder = append(to.ChildFolder, &tempChildFolder)
			} else {
				return to, cErr
			}
		} else {
			to.ChildFolder = append(to.ChildFolder, nil)
		}
	}
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	for _, v := range m.Files {
		if v != nil {
			if tempFiles, cErr := v.ToPB(ctx); cErr == nil {
				to.Files = append(to.Files, &tempFiles)
			} else {
				return to, cErr
			}
		} else {
			to.Files = append(to.Files, nil)
		}
	}
	to.IsDeleted = m.IsDeleted
	to.S3BucketName = m.S3BucketName
	to.S3FolderPath = m.S3FolderPath
	to.S3Region = m.S3Region
	// Repeated type S3MetadataEntry is not an ORMable message type
	to.S3Acl = m.S3Acl
	if m.S3LastModified != nil {
		to.S3LastModified = timestamppb.New(*m.S3LastModified)
	}
	if posthook, ok := interface{}(m).(FolderMetadataWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type FolderMetadata the arg will be the target, the caller the one being converted from

// FolderMetadataBeforeToORM called before default ToORM code
type FolderMetadataWithBeforeToORM interface {
	BeforeToORM(context.Context, *FolderMetadataORM) error
}

// FolderMetadataAfterToORM called after default ToORM code
type FolderMetadataWithAfterToORM interface {
	AfterToORM(context.Context, *FolderMetadataORM) error
}

// FolderMetadataBeforeToPB called before default ToPB code
type FolderMetadataWithBeforeToPB interface {
	BeforeToPB(context.Context, *FolderMetadata) error
}

// FolderMetadataAfterToPB called after default ToPB code
type FolderMetadataWithAfterToPB interface {
	AfterToPB(context.Context, *FolderMetadata) error
}

type WorkspaceORM struct {
	AccountId      *uint64
	CreatedAt      *time.Time
	Folders        []*FolderMetadataORM `gorm:"foreignkey:WorkspaceId;association_foreignkey:Id;preload:true"`
	Id             string               `gorm:"unique_index:idx_workspace_id"`
	IsDeleted      bool
	Name           string
	S3Acl          string
	S3BucketName   string
	S3FolderPath   string
	S3LastModified *time.Time
	S3Region       string
	Tags           pq.StringArray `gorm:"type:text[]"`
	UpdatedAt      *time.Time
	Version        int32
}

// TableName overrides the default tablename generated by GORM
func (WorkspaceORM) TableName() string {
	return "workspaces"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Workspace) ToORM(ctx context.Context) (WorkspaceORM, error) {
	to := WorkspaceORM{}
	var err error
	if prehook, ok := interface{}(m).(WorkspaceWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.Tags != nil {
		to.Tags = make(pq.StringArray, len(m.Tags))
		copy(to.Tags, m.Tags)
	}
	for _, v := range m.Folders {
		if v != nil {
			if tempFolders, cErr := v.ToORM(ctx); cErr == nil {
				to.Folders = append(to.Folders, &tempFolders)
			} else {
				return to, cErr
			}
		} else {
			to.Folders = append(to.Folders, nil)
		}
	}
	to.Version = m.Version
	to.IsDeleted = m.IsDeleted
	to.S3BucketName = m.S3BucketName
	to.S3FolderPath = m.S3FolderPath
	to.S3Region = m.S3Region
	// Repeated type S3MetadataEntry is not an ORMable message type
	to.S3Acl = m.S3Acl
	if m.S3LastModified != nil {
		t := m.S3LastModified.AsTime()
		to.S3LastModified = &t
	}
	if posthook, ok := interface{}(m).(WorkspaceWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *WorkspaceORM) ToPB(ctx context.Context) (Workspace, error) {
	to := Workspace{}
	var err error
	if prehook, ok := interface{}(m).(WorkspaceWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.Tags != nil {
		to.Tags = make(pq.StringArray, len(m.Tags))
		copy(to.Tags, m.Tags)
	}
	for _, v := range m.Folders {
		if v != nil {
			if tempFolders, cErr := v.ToPB(ctx); cErr == nil {
				to.Folders = append(to.Folders, &tempFolders)
			} else {
				return to, cErr
			}
		} else {
			to.Folders = append(to.Folders, nil)
		}
	}
	to.Version = m.Version
	to.IsDeleted = m.IsDeleted
	to.S3BucketName = m.S3BucketName
	to.S3FolderPath = m.S3FolderPath
	to.S3Region = m.S3Region
	// Repeated type S3MetadataEntry is not an ORMable message type
	to.S3Acl = m.S3Acl
	if m.S3LastModified != nil {
		to.S3LastModified = timestamppb.New(*m.S3LastModified)
	}
	if posthook, ok := interface{}(m).(WorkspaceWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Workspace the arg will be the target, the caller the one being converted from

// WorkspaceBeforeToORM called before default ToORM code
type WorkspaceWithBeforeToORM interface {
	BeforeToORM(context.Context, *WorkspaceORM) error
}

// WorkspaceAfterToORM called after default ToORM code
type WorkspaceWithAfterToORM interface {
	AfterToORM(context.Context, *WorkspaceORM) error
}

// WorkspaceBeforeToPB called before default ToPB code
type WorkspaceWithBeforeToPB interface {
	BeforeToPB(context.Context, *Workspace) error
}

// WorkspaceAfterToPB called after default ToPB code
type WorkspaceWithAfterToPB interface {
	AfterToPB(context.Context, *Workspace) error
}

// DefaultCreateAccount executes a basic gorm create call
func DefaultCreateAccount(ctx context.Context, in *Account, db *gorm.DB) (*Account, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type AccountORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AccountORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadAccount(ctx context.Context, in *Account, db *gorm.DB) (*Account, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &AccountORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := AccountORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(AccountORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type AccountORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AccountORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AccountORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteAccount(ctx context.Context, in *Account, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&AccountORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type AccountORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AccountORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteAccountSet(ctx context.Context, in []*Account, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&AccountORM{})).(AccountORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&AccountORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&AccountORM{})).(AccountORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type AccountORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Account, *gorm.DB) (*gorm.DB, error)
}
type AccountORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Account, *gorm.DB) error
}

// DefaultStrictUpdateAccount clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateAccount(ctx context.Context, in *Account, db *gorm.DB) (*Account, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateAccount")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &AccountORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(AccountORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterWorkspace := WorkspaceORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterWorkspace.AccountId = new(uint64)
	*filterWorkspace.AccountId = ormObj.Id
	if err = db.Where(filterWorkspace).Delete(WorkspaceORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type AccountORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AccountORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AccountORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchAccount executes a basic gorm update call with patch behavior
func DefaultPatchAccount(ctx context.Context, in *Account, updateMask *field_mask.FieldMask, db *gorm.DB) (*Account, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Account
	var err error
	if hook, ok := interface{}(&pbObj).(AccountWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadAccount(ctx, &Account{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(AccountWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskAccount(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(AccountWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateAccount(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(AccountWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type AccountWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Account, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AccountWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Account, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AccountWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Account, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AccountWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Account, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetAccount executes a bulk gorm update call with patch behavior
func DefaultPatchSetAccount(ctx context.Context, objects []*Account, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Account, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Account, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchAccount(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskAccount patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskAccount(ctx context.Context, patchee *Account, patcher *Account, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Account, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Auth0UserId" {
			patchee.Auth0UserId = patcher.Auth0UserId
			continue
		}
		if f == prefix+"Workspace" {
			patchee.Workspace = patcher.Workspace
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListAccount executes a gorm list call
func DefaultListAccount(ctx context.Context, db *gorm.DB) ([]*Account, error) {
	in := Account{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &AccountORM{}, &Account{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []AccountORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AccountORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Account{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type AccountORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AccountORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AccountORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]AccountORM) error
}

// DefaultCreateFileMetadata executes a basic gorm create call
func DefaultCreateFileMetadata(ctx context.Context, in *FileMetadata, db *gorm.DB) (*FileMetadata, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type FileMetadataORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadFileMetadata(ctx context.Context, in *FileMetadata, db *gorm.DB) (*FileMetadata, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &FileMetadataORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := FileMetadataORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(FileMetadataORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type FileMetadataORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteFileMetadata(ctx context.Context, in *FileMetadata, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&FileMetadataORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type FileMetadataORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteFileMetadataSet(ctx context.Context, in []*FileMetadata, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&FileMetadataORM{})).(FileMetadataORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&FileMetadataORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&FileMetadataORM{})).(FileMetadataORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type FileMetadataORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*FileMetadata, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*FileMetadata, *gorm.DB) error
}

// DefaultStrictUpdateFileMetadata clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateFileMetadata(ctx context.Context, in *FileMetadata, db *gorm.DB) (*FileMetadata, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateFileMetadata")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &FileMetadataORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type FileMetadataORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchFileMetadata executes a basic gorm update call with patch behavior
func DefaultPatchFileMetadata(ctx context.Context, in *FileMetadata, updateMask *field_mask.FieldMask, db *gorm.DB) (*FileMetadata, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj FileMetadata
	var err error
	if hook, ok := interface{}(&pbObj).(FileMetadataWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadFileMetadata(ctx, &FileMetadata{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(FileMetadataWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskFileMetadata(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(FileMetadataWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateFileMetadata(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(FileMetadataWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type FileMetadataWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *FileMetadata, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *FileMetadata, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *FileMetadata, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *FileMetadata, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetFileMetadata executes a bulk gorm update call with patch behavior
func DefaultPatchSetFileMetadata(ctx context.Context, objects []*FileMetadata, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*FileMetadata, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*FileMetadata, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchFileMetadata(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskFileMetadata patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskFileMetadata(ctx context.Context, patchee *FileMetadata, patcher *FileMetadata, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*FileMetadata, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedS3LastModified bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Size" {
			patchee.Size = patcher.Size
			continue
		}
		if f == prefix+"FileType" {
			patchee.FileType = patcher.FileType
			continue
		}
		if f == prefix+"Tags" {
			patchee.Tags = patcher.Tags
			continue
		}
		if f == prefix+"IsDeleted" {
			patchee.IsDeleted = patcher.IsDeleted
			continue
		}
		if f == prefix+"Version" {
			patchee.Version = patcher.Version
			continue
		}
		if f == prefix+"S3Key" {
			patchee.S3Key = patcher.S3Key
			continue
		}
		if f == prefix+"S3BucketName" {
			patchee.S3BucketName = patcher.S3BucketName
			continue
		}
		if f == prefix+"S3Region" {
			patchee.S3Region = patcher.S3Region
			continue
		}
		if f == prefix+"S3VersionId" {
			patchee.S3VersionId = patcher.S3VersionId
			continue
		}
		if f == prefix+"S3Etag" {
			patchee.S3Etag = patcher.S3Etag
			continue
		}
		if f == prefix+"S3ContentType" {
			patchee.S3ContentType = patcher.S3ContentType
			continue
		}
		if f == prefix+"S3ContentLength" {
			patchee.S3ContentLength = patcher.S3ContentLength
			continue
		}
		if f == prefix+"S3ContentEncoding" {
			patchee.S3ContentEncoding = patcher.S3ContentEncoding
			continue
		}
		if f == prefix+"S3ContentDisposition" {
			patchee.S3ContentDisposition = patcher.S3ContentDisposition
			continue
		}
		if !updatedS3LastModified && strings.HasPrefix(f, prefix+"S3LastModified.") {
			if patcher.S3LastModified == nil {
				patchee.S3LastModified = nil
				continue
			}
			if patchee.S3LastModified == nil {
				patchee.S3LastModified = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"S3LastModified."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.S3LastModified, patchee.S3LastModified, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"S3LastModified" {
			updatedS3LastModified = true
			patchee.S3LastModified = patcher.S3LastModified
			continue
		}
		if f == prefix+"S3StorageClass" {
			patchee.S3StorageClass = patcher.S3StorageClass
			continue
		}
		if f == prefix+"S3ServerSideEncryption" {
			patchee.S3ServerSideEncryption = patcher.S3ServerSideEncryption
			continue
		}
		if f == prefix+"S3Acl" {
			patchee.S3Acl = patcher.S3Acl
			continue
		}
		if f == prefix+"S3Metadata" {
			patchee.S3Metadata = patcher.S3Metadata
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListFileMetadata executes a gorm list call
func DefaultListFileMetadata(ctx context.Context, db *gorm.DB) ([]*FileMetadata, error) {
	in := FileMetadata{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &FileMetadataORM{}, &FileMetadata{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []FileMetadataORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileMetadataORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*FileMetadata{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type FileMetadataORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileMetadataORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]FileMetadataORM) error
}

// DefaultCreateFolderMetadata executes a basic gorm create call
func DefaultCreateFolderMetadata(ctx context.Context, in *FolderMetadata, db *gorm.DB) (*FolderMetadata, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type FolderMetadataORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadFolderMetadata(ctx context.Context, in *FolderMetadata, db *gorm.DB) (*FolderMetadata, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &FolderMetadataORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := FolderMetadataORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(FolderMetadataORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type FolderMetadataORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteFolderMetadata(ctx context.Context, in *FolderMetadata, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&FolderMetadataORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type FolderMetadataORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteFolderMetadataSet(ctx context.Context, in []*FolderMetadata, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&FolderMetadataORM{})).(FolderMetadataORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&FolderMetadataORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&FolderMetadataORM{})).(FolderMetadataORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type FolderMetadataORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*FolderMetadata, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*FolderMetadata, *gorm.DB) error
}

// DefaultStrictUpdateFolderMetadata clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateFolderMetadata(ctx context.Context, in *FolderMetadata, db *gorm.DB) (*FolderMetadata, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateFolderMetadata")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &FolderMetadataORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterChildFolder := FolderMetadataORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterChildFolder.FolderMetadataId = new(uint64)
	*filterChildFolder.FolderMetadataId = ormObj.Id
	if err = db.Where(filterChildFolder).Delete(FolderMetadataORM{}).Error; err != nil {
		return nil, err
	}
	filterFiles := FileMetadataORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterFiles.FolderMetadataId = new(uint64)
	*filterFiles.FolderMetadataId = ormObj.Id
	if err = db.Where(filterFiles).Delete(FileMetadataORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type FolderMetadataORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchFolderMetadata executes a basic gorm update call with patch behavior
func DefaultPatchFolderMetadata(ctx context.Context, in *FolderMetadata, updateMask *field_mask.FieldMask, db *gorm.DB) (*FolderMetadata, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj FolderMetadata
	var err error
	if hook, ok := interface{}(&pbObj).(FolderMetadataWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadFolderMetadata(ctx, &FolderMetadata{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(FolderMetadataWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskFolderMetadata(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(FolderMetadataWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateFolderMetadata(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(FolderMetadataWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type FolderMetadataWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *FolderMetadata, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *FolderMetadata, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *FolderMetadata, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *FolderMetadata, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetFolderMetadata executes a bulk gorm update call with patch behavior
func DefaultPatchSetFolderMetadata(ctx context.Context, objects []*FolderMetadata, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*FolderMetadata, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*FolderMetadata, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchFolderMetadata(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskFolderMetadata patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskFolderMetadata(ctx context.Context, patchee *FolderMetadata, patcher *FolderMetadata, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*FolderMetadata, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedS3LastModified bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"ChildFolder" {
			patchee.ChildFolder = patcher.ChildFolder
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Files" {
			patchee.Files = patcher.Files
			continue
		}
		if f == prefix+"IsDeleted" {
			patchee.IsDeleted = patcher.IsDeleted
			continue
		}
		if f == prefix+"S3BucketName" {
			patchee.S3BucketName = patcher.S3BucketName
			continue
		}
		if f == prefix+"S3FolderPath" {
			patchee.S3FolderPath = patcher.S3FolderPath
			continue
		}
		if f == prefix+"S3Region" {
			patchee.S3Region = patcher.S3Region
			continue
		}
		if f == prefix+"S3Metadata" {
			patchee.S3Metadata = patcher.S3Metadata
			continue
		}
		if f == prefix+"S3Acl" {
			patchee.S3Acl = patcher.S3Acl
			continue
		}
		if !updatedS3LastModified && strings.HasPrefix(f, prefix+"S3LastModified.") {
			if patcher.S3LastModified == nil {
				patchee.S3LastModified = nil
				continue
			}
			if patchee.S3LastModified == nil {
				patchee.S3LastModified = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"S3LastModified."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.S3LastModified, patchee.S3LastModified, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"S3LastModified" {
			updatedS3LastModified = true
			patchee.S3LastModified = patcher.S3LastModified
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListFolderMetadata executes a gorm list call
func DefaultListFolderMetadata(ctx context.Context, db *gorm.DB) ([]*FolderMetadata, error) {
	in := FolderMetadata{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &FolderMetadataORM{}, &FolderMetadata{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []FolderMetadataORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FolderMetadataORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*FolderMetadata{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type FolderMetadataORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FolderMetadataORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]FolderMetadataORM) error
}

// DefaultCreateWorkspace executes a basic gorm create call
func DefaultCreateWorkspace(ctx context.Context, in *Workspace, db *gorm.DB) (*Workspace, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type WorkspaceORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadWorkspace(ctx context.Context, in *Workspace, db *gorm.DB) (*Workspace, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &WorkspaceORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := WorkspaceORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(WorkspaceORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type WorkspaceORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteWorkspace(ctx context.Context, in *Workspace, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&WorkspaceORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type WorkspaceORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteWorkspaceSet(ctx context.Context, in []*Workspace, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&WorkspaceORM{})).(WorkspaceORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&WorkspaceORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&WorkspaceORM{})).(WorkspaceORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type WorkspaceORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Workspace, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Workspace, *gorm.DB) error
}

// DefaultStrictUpdateWorkspace clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateWorkspace(ctx context.Context, in *Workspace, db *gorm.DB) (*Workspace, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateWorkspace")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &WorkspaceORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterFolders := FolderMetadataORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterFolders.WorkspaceId = new(string)
	*filterFolders.WorkspaceId = ormObj.Id
	if err = db.Where(filterFolders).Delete(FolderMetadataORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type WorkspaceORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchWorkspace executes a basic gorm update call with patch behavior
func DefaultPatchWorkspace(ctx context.Context, in *Workspace, updateMask *field_mask.FieldMask, db *gorm.DB) (*Workspace, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Workspace
	var err error
	if hook, ok := interface{}(&pbObj).(WorkspaceWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadWorkspace(ctx, &Workspace{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(WorkspaceWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskWorkspace(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(WorkspaceWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateWorkspace(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(WorkspaceWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type WorkspaceWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Workspace, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Workspace, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Workspace, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Workspace, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetWorkspace executes a bulk gorm update call with patch behavior
func DefaultPatchSetWorkspace(ctx context.Context, objects []*Workspace, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Workspace, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Workspace, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchWorkspace(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskWorkspace patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskWorkspace(ctx context.Context, patchee *Workspace, patcher *Workspace, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Workspace, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedS3LastModified bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Tags" {
			patchee.Tags = patcher.Tags
			continue
		}
		if f == prefix+"Folders" {
			patchee.Folders = patcher.Folders
			continue
		}
		if f == prefix+"Version" {
			patchee.Version = patcher.Version
			continue
		}
		if f == prefix+"IsDeleted" {
			patchee.IsDeleted = patcher.IsDeleted
			continue
		}
		if f == prefix+"S3BucketName" {
			patchee.S3BucketName = patcher.S3BucketName
			continue
		}
		if f == prefix+"S3FolderPath" {
			patchee.S3FolderPath = patcher.S3FolderPath
			continue
		}
		if f == prefix+"S3Region" {
			patchee.S3Region = patcher.S3Region
			continue
		}
		if f == prefix+"S3Metadata" {
			patchee.S3Metadata = patcher.S3Metadata
			continue
		}
		if f == prefix+"S3Acl" {
			patchee.S3Acl = patcher.S3Acl
			continue
		}
		if !updatedS3LastModified && strings.HasPrefix(f, prefix+"S3LastModified.") {
			if patcher.S3LastModified == nil {
				patchee.S3LastModified = nil
				continue
			}
			if patchee.S3LastModified == nil {
				patchee.S3LastModified = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"S3LastModified."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.S3LastModified, patchee.S3LastModified, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"S3LastModified" {
			updatedS3LastModified = true
			patchee.S3LastModified = patcher.S3LastModified
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListWorkspace executes a gorm list call
func DefaultListWorkspace(ctx context.Context, db *gorm.DB) ([]*Workspace, error) {
	in := Workspace{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &WorkspaceORM{}, &Workspace{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []WorkspaceORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(WorkspaceORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Workspace{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type WorkspaceORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type WorkspaceORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]WorkspaceORM) error
}
