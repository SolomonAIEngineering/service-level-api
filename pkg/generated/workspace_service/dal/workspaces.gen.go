// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	workspace_servicev1 "github.com/SolomonAIEngineering/service-level-api/pkg/generated/workspace_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newWorkspaceORM(db *gorm.DB, opts ...gen.DOOption) workspaceORM {
	_workspaceORM := workspaceORM{}

	_workspaceORM.workspaceORMDo.UseDB(db, opts...)
	_workspaceORM.workspaceORMDo.UseModel(&workspace_servicev1.WorkspaceORM{})

	tableName := _workspaceORM.workspaceORMDo.TableName()
	_workspaceORM.ALL = field.NewAsterisk(tableName)
	_workspaceORM.AccountId = field.NewUint64(tableName, "account_id")
	_workspaceORM.CreatedAt = field.NewTime(tableName, "created_at")
	_workspaceORM.Id = field.NewUint64(tableName, "id")
	_workspaceORM.IsDeleted = field.NewBool(tableName, "is_deleted")
	_workspaceORM.Name = field.NewString(tableName, "name")
	_workspaceORM.S3Acl = field.NewString(tableName, "s3_acl")
	_workspaceORM.S3BucketName = field.NewString(tableName, "s3_bucket_name")
	_workspaceORM.S3FolderPath = field.NewString(tableName, "s3_folder_path")
	_workspaceORM.S3LastModified = field.NewTime(tableName, "s3_last_modified")
	_workspaceORM.S3Region = field.NewString(tableName, "s3_region")
	_workspaceORM.Tags = field.NewField(tableName, "tags")
	_workspaceORM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_workspaceORM.Version = field.NewInt32(tableName, "version")
	_workspaceORM.Folders = workspaceORMHasManyFolders{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Folders", "workspace_servicev1.FolderMetadataORM"),
		ChildFolder: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Folders.ChildFolder", "workspace_servicev1.FolderMetadataORM"),
		},
		Files: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Folders.Files", "workspace_servicev1.FileMetadataORM"),
		},
	}

	_workspaceORM.fillFieldMap()

	return _workspaceORM
}

type workspaceORM struct {
	workspaceORMDo

	ALL            field.Asterisk
	AccountId      field.Uint64
	CreatedAt      field.Time
	Id             field.Uint64
	IsDeleted      field.Bool
	Name           field.String
	S3Acl          field.String
	S3BucketName   field.String
	S3FolderPath   field.String
	S3LastModified field.Time
	S3Region       field.String
	Tags           field.Field
	UpdatedAt      field.Time
	Version        field.Int32
	Folders        workspaceORMHasManyFolders

	fieldMap map[string]field.Expr
}

func (w workspaceORM) Table(newTableName string) *workspaceORM {
	w.workspaceORMDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workspaceORM) As(alias string) *workspaceORM {
	w.workspaceORMDo.DO = *(w.workspaceORMDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workspaceORM) updateTableName(table string) *workspaceORM {
	w.ALL = field.NewAsterisk(table)
	w.AccountId = field.NewUint64(table, "account_id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.Id = field.NewUint64(table, "id")
	w.IsDeleted = field.NewBool(table, "is_deleted")
	w.Name = field.NewString(table, "name")
	w.S3Acl = field.NewString(table, "s3_acl")
	w.S3BucketName = field.NewString(table, "s3_bucket_name")
	w.S3FolderPath = field.NewString(table, "s3_folder_path")
	w.S3LastModified = field.NewTime(table, "s3_last_modified")
	w.S3Region = field.NewString(table, "s3_region")
	w.Tags = field.NewField(table, "tags")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.Version = field.NewInt32(table, "version")

	w.fillFieldMap()

	return w
}

func (w *workspaceORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workspaceORM) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 14)
	w.fieldMap["account_id"] = w.AccountId
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["id"] = w.Id
	w.fieldMap["is_deleted"] = w.IsDeleted
	w.fieldMap["name"] = w.Name
	w.fieldMap["s3_acl"] = w.S3Acl
	w.fieldMap["s3_bucket_name"] = w.S3BucketName
	w.fieldMap["s3_folder_path"] = w.S3FolderPath
	w.fieldMap["s3_last_modified"] = w.S3LastModified
	w.fieldMap["s3_region"] = w.S3Region
	w.fieldMap["tags"] = w.Tags
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["version"] = w.Version

}

func (w workspaceORM) clone(db *gorm.DB) workspaceORM {
	w.workspaceORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workspaceORM) replaceDB(db *gorm.DB) workspaceORM {
	w.workspaceORMDo.ReplaceDB(db)
	return w
}

type workspaceORMHasManyFolders struct {
	db *gorm.DB

	field.RelationField

	ChildFolder struct {
		field.RelationField
	}
	Files struct {
		field.RelationField
	}
}

func (a workspaceORMHasManyFolders) Where(conds ...field.Expr) *workspaceORMHasManyFolders {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceORMHasManyFolders) WithContext(ctx context.Context) *workspaceORMHasManyFolders {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceORMHasManyFolders) Session(session *gorm.Session) *workspaceORMHasManyFolders {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceORMHasManyFolders) Model(m *workspace_servicev1.WorkspaceORM) *workspaceORMHasManyFoldersTx {
	return &workspaceORMHasManyFoldersTx{a.db.Model(m).Association(a.Name())}
}

type workspaceORMHasManyFoldersTx struct{ tx *gorm.Association }

func (a workspaceORMHasManyFoldersTx) Find() (result []*workspace_servicev1.FolderMetadataORM, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceORMHasManyFoldersTx) Append(values ...*workspace_servicev1.FolderMetadataORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceORMHasManyFoldersTx) Replace(values ...*workspace_servicev1.FolderMetadataORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceORMHasManyFoldersTx) Delete(values ...*workspace_servicev1.FolderMetadataORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceORMHasManyFoldersTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceORMHasManyFoldersTx) Count() int64 {
	return a.tx.Count()
}

type workspaceORMDo struct{ gen.DO }

type IWorkspaceORMDo interface {
	gen.SubQuery
	Debug() IWorkspaceORMDo
	WithContext(ctx context.Context) IWorkspaceORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkspaceORMDo
	WriteDB() IWorkspaceORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkspaceORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkspaceORMDo
	Not(conds ...gen.Condition) IWorkspaceORMDo
	Or(conds ...gen.Condition) IWorkspaceORMDo
	Select(conds ...field.Expr) IWorkspaceORMDo
	Where(conds ...gen.Condition) IWorkspaceORMDo
	Order(conds ...field.Expr) IWorkspaceORMDo
	Distinct(cols ...field.Expr) IWorkspaceORMDo
	Omit(cols ...field.Expr) IWorkspaceORMDo
	Join(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo
	Group(cols ...field.Expr) IWorkspaceORMDo
	Having(conds ...gen.Condition) IWorkspaceORMDo
	Limit(limit int) IWorkspaceORMDo
	Offset(offset int) IWorkspaceORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkspaceORMDo
	Unscoped() IWorkspaceORMDo
	Create(values ...*workspace_servicev1.WorkspaceORM) error
	CreateInBatches(values []*workspace_servicev1.WorkspaceORM, batchSize int) error
	Save(values ...*workspace_servicev1.WorkspaceORM) error
	First() (*workspace_servicev1.WorkspaceORM, error)
	Take() (*workspace_servicev1.WorkspaceORM, error)
	Last() (*workspace_servicev1.WorkspaceORM, error)
	Find() ([]*workspace_servicev1.WorkspaceORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.WorkspaceORM, err error)
	FindInBatches(result *[]*workspace_servicev1.WorkspaceORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*workspace_servicev1.WorkspaceORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkspaceORMDo
	Assign(attrs ...field.AssignExpr) IWorkspaceORMDo
	Joins(fields ...field.RelationField) IWorkspaceORMDo
	Preload(fields ...field.RelationField) IWorkspaceORMDo
	FirstOrInit() (*workspace_servicev1.WorkspaceORM, error)
	FirstOrCreate() (*workspace_servicev1.WorkspaceORM, error)
	FindByPage(offset int, limit int) (result []*workspace_servicev1.WorkspaceORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkspaceORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result workspace_servicev1.WorkspaceORM, err error)
	GetRecordByIDs(ids []int) (result []workspace_servicev1.WorkspaceORM, err error)
	CreateRecord(item workspace_servicev1.WorkspaceORM) (err error)
	UpdateRecordByID(id int, item workspace_servicev1.WorkspaceORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.WorkspaceORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result workspace_servicev1.WorkspaceORM, err error)
	GetByIDs(ids []uint64) (result []workspace_servicev1.WorkspaceORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) GetRecordByID(id int) (result workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (w workspaceORMDo) GetRecordByIDs(ids []int) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (w workspaceORMDo) CreateRecord(item workspace_servicev1.WorkspaceORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO workspaces (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) UpdateRecordByID(id int, item workspace_servicev1.WorkspaceORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE workspaces SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (w workspaceORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []workspace_servicev1.WorkspaceORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ORDER BY " + w.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (w workspaceORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM workspaces ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (w workspaceORMDo) GetByID(id uint64) (result workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (w workspaceORMDo) GetByIDs(ids []uint64) (result []workspace_servicev1.WorkspaceORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM workspaces ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (w workspaceORMDo) Debug() IWorkspaceORMDo {
	return w.withDO(w.DO.Debug())
}

func (w workspaceORMDo) WithContext(ctx context.Context) IWorkspaceORMDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workspaceORMDo) ReadDB() IWorkspaceORMDo {
	return w.Clauses(dbresolver.Read)
}

func (w workspaceORMDo) WriteDB() IWorkspaceORMDo {
	return w.Clauses(dbresolver.Write)
}

func (w workspaceORMDo) Session(config *gorm.Session) IWorkspaceORMDo {
	return w.withDO(w.DO.Session(config))
}

func (w workspaceORMDo) Clauses(conds ...clause.Expression) IWorkspaceORMDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workspaceORMDo) Returning(value interface{}, columns ...string) IWorkspaceORMDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workspaceORMDo) Not(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workspaceORMDo) Or(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workspaceORMDo) Select(conds ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workspaceORMDo) Where(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workspaceORMDo) Order(conds ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workspaceORMDo) Distinct(cols ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workspaceORMDo) Omit(cols ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workspaceORMDo) Join(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workspaceORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workspaceORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workspaceORMDo) Group(cols ...field.Expr) IWorkspaceORMDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workspaceORMDo) Having(conds ...gen.Condition) IWorkspaceORMDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workspaceORMDo) Limit(limit int) IWorkspaceORMDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workspaceORMDo) Offset(offset int) IWorkspaceORMDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workspaceORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkspaceORMDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workspaceORMDo) Unscoped() IWorkspaceORMDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workspaceORMDo) Create(values ...*workspace_servicev1.WorkspaceORM) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workspaceORMDo) CreateInBatches(values []*workspace_servicev1.WorkspaceORM, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workspaceORMDo) Save(values ...*workspace_servicev1.WorkspaceORM) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workspaceORMDo) First() (*workspace_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) Take() (*workspace_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) Last() (*workspace_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) Find() ([]*workspace_servicev1.WorkspaceORM, error) {
	result, err := w.DO.Find()
	return result.([]*workspace_servicev1.WorkspaceORM), err
}

func (w workspaceORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*workspace_servicev1.WorkspaceORM, err error) {
	buf := make([]*workspace_servicev1.WorkspaceORM, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workspaceORMDo) FindInBatches(result *[]*workspace_servicev1.WorkspaceORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workspaceORMDo) Attrs(attrs ...field.AssignExpr) IWorkspaceORMDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workspaceORMDo) Assign(attrs ...field.AssignExpr) IWorkspaceORMDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workspaceORMDo) Joins(fields ...field.RelationField) IWorkspaceORMDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workspaceORMDo) Preload(fields ...field.RelationField) IWorkspaceORMDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workspaceORMDo) FirstOrInit() (*workspace_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) FirstOrCreate() (*workspace_servicev1.WorkspaceORM, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*workspace_servicev1.WorkspaceORM), nil
	}
}

func (w workspaceORMDo) FindByPage(offset int, limit int) (result []*workspace_servicev1.WorkspaceORM, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workspaceORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workspaceORMDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workspaceORMDo) Delete(models ...*workspace_servicev1.WorkspaceORM) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workspaceORMDo) withDO(do gen.Dao) *workspaceORMDo {
	w.DO = *do.(*gen.DO)
	return w
}
