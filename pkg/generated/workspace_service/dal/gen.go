// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	AccountORM        *accountORM
	FileMetadataORM   *fileMetadataORM
	FolderMetadataORM *folderMetadataORM
	WorkspaceORM      *workspaceORM
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AccountORM = &Q.AccountORM
	FileMetadataORM = &Q.FileMetadataORM
	FolderMetadataORM = &Q.FolderMetadataORM
	WorkspaceORM = &Q.WorkspaceORM
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		AccountORM:        newAccountORM(db, opts...),
		FileMetadataORM:   newFileMetadataORM(db, opts...),
		FolderMetadataORM: newFolderMetadataORM(db, opts...),
		WorkspaceORM:      newWorkspaceORM(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AccountORM        accountORM
	FileMetadataORM   fileMetadataORM
	FolderMetadataORM folderMetadataORM
	WorkspaceORM      workspaceORM
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		AccountORM:        q.AccountORM.clone(db),
		FileMetadataORM:   q.FileMetadataORM.clone(db),
		FolderMetadataORM: q.FolderMetadataORM.clone(db),
		WorkspaceORM:      q.WorkspaceORM.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		AccountORM:        q.AccountORM.replaceDB(db),
		FileMetadataORM:   q.FileMetadataORM.replaceDB(db),
		FolderMetadataORM: q.FolderMetadataORM.replaceDB(db),
		WorkspaceORM:      q.WorkspaceORM.replaceDB(db),
	}
}

type queryCtx struct {
	AccountORM        IAccountORMDo
	FileMetadataORM   IFileMetadataORMDo
	FolderMetadataORM IFolderMetadataORMDo
	WorkspaceORM      IWorkspaceORMDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AccountORM:        q.AccountORM.WithContext(ctx),
		FileMetadataORM:   q.FileMetadataORM.WithContext(ctx),
		FolderMetadataORM: q.FolderMetadataORM.WithContext(ctx),
		WorkspaceORM:      q.WorkspaceORM.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
