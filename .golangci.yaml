linters:
  # Disable all linters.
  # Default: false
  disable-all: false
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  # enable:
  #   - asasalint
  #   - asciicheck
  #   - bidichk
  #   - bodyclose
  #   - containedctx
  #   - contextcheck
  #   - cyclop
  #   - deadcode
  #   - decorder
  #   - depguard
  #   - dogsled
  #   - dupl
  #   - dupword
  #   - durationcheck
  #   - errcheck
  #   - errchkjson
  #   - errname
  #   - errorlint
  #   - execinquery
  #   - exhaustive
  #   - exhaustivestruct
  #   - exhaustruct
  #   - exportloopref
  #   - forbidigo
  #   - forcetypeassert
  #   - funlen
  #   - gci
  #   - ginkgolinter
  #   - gocheckcompilerdirectives
  #   - gochecknoglobals
  #   - gochecknoinits
  #   - gocognit
  #   - goconst
  #   - gocritic
  #   - gocyclo
  #   - godot
  #   - godox
  #   - goerr113
  #   - gofmt
  #   - gofumpt
  #   - goheader
  #   - goimports
  #   - golint
  #   - gomnd
  #   - gomoddirectives
  #   - gomodguard
  #   - goprintffuncname
  #   - gosec
  #   - gosimple
  #   - govet
  #   - grouper
  #   - ifshort
  #   - importas
  #   - ineffassign
  #   - interfacebloat
  #   - interfacer
  #   - ireturn
  #   - lll
  #   - loggercheck
  #   - maintidx
  #   - makezero
  #   - maligned
  #   - misspell
  #   - musttag
  #   - nakedret
  #   - nestif
  #   - nilerr
  #   - nilnil
  #   - nlreturn
  #   - noctx
  #   - nolintlint
  #   - nonamedreturns
  #   - nosnakecase
  #   - nosprintfhostport
  #   - paralleltest
  #   - prealloc
  #   - predeclared
  #   - promlinter
  #   - reassign
  #   - revive
  #   - rowserrcheck
  #   - scopelint
  #   - sqlclosecheck
  #   - staticcheck
  #   - structcheck
  #   - stylecheck
  #   - tagliatelle
  #   - tenv
  #   - testableexamples
  #   - testpackage
  #   - thelper
  #   - tparallel
  #   - typecheck
  #   - unconvert
  #   - unparam
  #   - unused
  #   - usestdlibvars
  #   - varcheck
  #   - varnamelen
  #   - wastedassign
  #   - whitespace
  #   - wrapcheck
  #   - wsl
  # Enable all available linters.
  # Default: false
  enable-all: false
  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default
  disable:
  #   - asasalint
  #   - asciicheck
  #   - bidichk
  #   - bodyclose
  #   - containedctx
  #   - contextcheck
  #   - cyclop
  #   - deadcode
  #   - decorder
    - depguard
  #   - dogsled
  #   - dupl
  #   - dupword
  #   - durationcheck
  #   - errcheck
  #   - errchkjson
  #   - errname
  #   - errorlint
  #   - execinquery
  #   - exhaustive
  #   - exhaustivestruct
  #   - exhaustruct
  #   - exportloopref
  #   - forbidigo
  #   - forcetypeassert
  #   - funlen
  #   - gci
  #   - ginkgolinter
  #   - gocheckcompilerdirectives
  #   - gochecknoglobals
  #   - gochecknoinits
  #   - gocognit
  #   - goconst
  #   - gocritic
  #   - gocyclo
  #   - godot
  #   - godox
  #   - goerr113
  #   - gofmt
  #   - gofumpt
  #   - goheader
  #   - goimports
  #   - golint
  #   - gomnd
  #   - gomoddirectives
  #   - gomodguard
  #   - goprintffuncname
  #   - gosec
  #   - gosimple
  #   - govet
  #   - grouper
  #   - ifshort
  #   - importas
  #   - ineffassign
  #   - interfacebloat
  #   - interfacer
  #   - ireturn
  #   - lll
  #   - loggercheck
  #   - maintidx
  #   - makezero
  #   - maligned
  #   - misspell
  #   - musttag
  #   - nakedret
  #   - nestif
  #   - nilerr
  #   - nilnil
    - nlreturn
  #   - noctx
  #   - nolintlint
  #   - nonamedreturns
  #   - nosnakecase
  #   - nosprintfhostport
  #   - paralleltest
  #   - prealloc
  #   - predeclared
  #   - promlinter
  #   - reassign
  #   - revive
  #   - rowserrcheck
  #   - scopelint
  #   - sqlclosecheck
  #   - staticcheck
  #   - structcheck
  #   - stylecheck
  #   - tagliatelle
  #   - tenv
  #   - testableexamples
  #   - testpackage
  #   - thelper
  #   - tparallel
  #   - typecheck
  #   - unconvert
  #   - unparam
  #   - unused
  #   - usestdlibvars
  #   - varcheck
  #   - varnamelen
  #   - wastedassign
  #   - whitespace
  #   - wrapcheck
  #   - wsl
  # Enable presets.
  # https://golangci-lint.run/usage/linters
  presets:
    - bugs
    - comment
    - complexity
    - error
    - format
    - import
    - metalinter
    - module
    - performance
    - sql
    - style
    - test
    - unused
  # Run only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  fast: true
# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  concurrency: 4
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m
  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 2
  # Include test files or not.
  # Default: true
  tests: false
  # List of build tags, all linters use it.
  # Default: [].
  build-tags:
    - mytag
  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-dirs:
    - pkg/generated
    - generated
    - proto
  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  skip-dirs-use-default: false
  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-files:
    - ".*\\.my\\.go$"
    - lib/bad.go
  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly
  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: true
  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.18
  go: '1.19'

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  # Default value is an empty string.
  default-severity: error
  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  case-sensitive: true
  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  rules:
    - linters:
        - dupl
      severity: info