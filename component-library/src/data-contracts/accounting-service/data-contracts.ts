/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/** The AccountingAttachment object is used to represent a company's attachments. */
export interface AccountingAttachment {
  /** The company the accounting attachment belongs to. */
  company?: string;
  /** @format date-time */
  createdAt?: string;
  /** The attachment's name. */
  fileName?: string;
  /** The attachment's url. */
  fileUrl?: string;
  /** @format uint64 */
  id?: string;
  /** The third-party API ID of the matching object. */
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * Consider using google.protobuf.Timestamp if precise time manipulation is required
   * @format date-time
   */
  modifiedAt?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  remoteWasDeleted?: boolean;
}

export interface AccountingIntegrationMergeLink {
  /**
   * When you request a link token to initiate a Merge Link session, Merge determines whether to create a new linked account or modify
   * an existing linked account based on a combination of the end_user_origin_id and the category. If you want to support multiple
   * connections, you simply need to provide a different end_user_origin_id for each company.
   *
   * This approach enables you to link multiple instances of the same integration (like QuickBooks) for the same end user.
   * It also has the added security benefit of not exposing any internal end_user_origin_ids.
   */
  account?: LinkedAccountingAccount;
  category?: string;
  endUserEmailAddress?: string;
  endUserOrganizationName?: string;
  endUserOriginId?: string;
  /**
   * id
   * @format uint64
   */
  id?: string;
  integration?: string;
  integrationImage?: string;
  integrationName?: string;
  integrationSlug?: string;
  integrationSquareImage?: string;
  isDuplicate?: boolean;
  /** @format date-time */
  lastModifiedAt?: string;
  mergeLinkedAccountId?: string;
  status?: string;
  token?: MergeLinkedAccountToken;
  webhookListenerUrl?: string;
}

export interface Any {
  '@type'?: string;
  [key: string]: any;
}

/**
 * The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal
 * to liability and equity combined.  This shows the company’s financial health at a specific point in time.
 */
export interface BalanceSheet {
  /** The balance sheet's total assets. */
  assets?: Array<ReportItem>;
  /**
   * Company object for the given BalanceSheet object. May not necessarily be the compnay name but the
   * company reference
   */
  company?: string;
  /**
   * the time the record was created at
   * @format date-time
   */
  createdAt?: string;
  currency?: string;
  /**
   * The balance sheet's date. The balance sheet data will
   *  reflect the company's financial position this point in time.
   *
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  date?: string;
  /** The balance sheet's total equity. */
  equity?: Array<ReportItem>;
  /** @format uint64 */
  id?: string;
  /** The balance sheet's total liabilities. */
  liabilities?: Array<ReportItem>;
  /** the id as stored in merge */
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  modifiedAt?: string;
  /** The balance sheet's name. */
  name?: string;
  /**
   * The balance sheet's net assets.
   * @format double
   */
  netAssets?: number;
  /**
   * The time that balance sheet was generated by the accounting system.
   *
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  remoteGeneratedAt?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted by third party webhooks. */
  remoteWasDeleted?: boolean;
}

/** @default "BANK_ACCOUNT_TYPE_UNSPECIFIED" */
export type BankAccountType =
  | 'BANK_ACCOUNT_TYPE_UNSPECIFIED'
  | 'BANK_ACCOUNT_TYPE_CHECKING'
  | 'BANK_ACCOUNT_TYPE_SAVINGS';

/** The BankInfo object is used to represent the Bank Account information for an Employee. */
export interface BankInfo {
  /** The account number */
  accountNumber?: string;
  /**
   * The bank account type Possible values include: SAVINGS, CHECKING.
   * In cases where there is no clear mapping, the original value passed through will be returned.
   */
  accountType?: BankAccountType;
  /** The bank name */
  bankName?: string;
  /**
   * When the matching bank object was created in the third party system.
   * @format date-time
   */
  createdAt?: string;
  /**
   * id of the record
   * @format uint64
   */
  id?: string;
  /** The record id as stored on the merge platform */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
  /** The routing number */
  routingNumber?: string;
}

/**
 * The type of benefit plan. Possible values include: MEDICAL, HEALTH_SAVINGS,
 * INSURANCE, RETIREMENT, OTHER. In cases where there is no clear mapping,
 * the original value passed through will be returned.
 * @default "BENEFIT_PLAN_TYPE_UNSPECIFIED"
 */
export type BenefitPlanType =
  | 'BENEFIT_PLAN_TYPE_UNSPECIFIED'
  | 'BENEFIT_PLAN_TYPE_MEDICAL'
  | 'BENEFIT_PLAN_TYPE_HEALTH_SAVINGS'
  | 'BENEFIT_PLAN_TYPE_INSURANCE'
  | 'BENEFIT_PLAN_TYPE_RETIREMENT'
  | 'BENEFIT_PLAN_TYPE_OTHER';

export interface BusinessActionableInsight {
  /**
   * Suggested action based on the insight
   * @example "Implement energy-efficient lighting and machinery."
   */
  action?: string;
  /**
   * Detailed description of the insight
   * @example "Reduce operating costs by optimizing energy usage."
   */
  description?: string;
  /**
   * Expected benefit or outcome of taking the suggested action
   * @example "Expected to reduce energy costs by up to 20% annually."
   */
  expectedBenefit?: string;
  /**
   * Time when the insight was generated
   * @format date-time
   */
  generatedTime?: string;
  /**
   * Unique identifier for the insight
   * @format uint64
   * @example "1234567890"
   */
  id?: string;
  /**
   * Specific business metrics that this insight aims to optimize
   * @example ["operating costs","energy consumption"]
   */
  metricsToOptimizeFor?: Array<string>;
  /**
   * Tags associated with the insight for categorization
   * @example ["cost-saving","energy-efficiency"]
   */
  tags?: Array<string>;
  /**
   * Key takeaway or summary of the insight
   * @example "Optimizing energy usage can lead to significant cost savings."
   */
  takeaway?: string;
  /**
   * Type of the actionable insight
   * - BUSINESS_ACTIONABLE_INSIGHT_TYPE_OPERATING_EXPENSES: Operating Expenses: Insights on managing day-to-day operational costs.
   *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_CASH_FLOW_MANAGEMENT: Cash Flow Management: Insights into cash inflows and outflows.
   *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_REVENUE_GROWTH: Revenue Growth: Strategies or opportunities to increase revenue.
   *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_COST_REDUCTION: Cost Reduction: Identifying areas where expenses can be minimized.
   *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_INVENTORY_MANAGEMENT: Inventory Management: Insights on optimizing inventory levels and costs.
   *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_CAPITAL_ALLOCATION: Capital Allocation: Guidance on efficient allocation of financial resources.
   *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_INVESTMENT_OPPORTUNITIES: Investment Opportunities: Identifying potential profitable investments.
   *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_RISK_ASSESSMENT: Risk Assessment: Insights into potential risks and mitigation strategies.
   *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_TAX_PLANNING: Tax Planning: Suggestions for tax optimization.
   *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_DEBT_MANAGEMENT: Debt Management: Strategies for managing and reducing debt.
   */
  type?: BusinessActionableInsightType;
}

/**
 * BusinessActionableInsightType is the type of actionable insight
 * - BUSINESS_ACTIONABLE_INSIGHT_TYPE_OPERATING_EXPENSES: Operating Expenses: Insights on managing day-to-day operational costs.
 *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_CASH_FLOW_MANAGEMENT: Cash Flow Management: Insights into cash inflows and outflows.
 *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_REVENUE_GROWTH: Revenue Growth: Strategies or opportunities to increase revenue.
 *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_COST_REDUCTION: Cost Reduction: Identifying areas where expenses can be minimized.
 *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_INVENTORY_MANAGEMENT: Inventory Management: Insights on optimizing inventory levels and costs.
 *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_CAPITAL_ALLOCATION: Capital Allocation: Guidance on efficient allocation of financial resources.
 *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_INVESTMENT_OPPORTUNITIES: Investment Opportunities: Identifying potential profitable investments.
 *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_RISK_ASSESSMENT: Risk Assessment: Insights into potential risks and mitigation strategies.
 *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_TAX_PLANNING: Tax Planning: Suggestions for tax optimization.
 *  - BUSINESS_ACTIONABLE_INSIGHT_TYPE_DEBT_MANAGEMENT: Debt Management: Strategies for managing and reducing debt.
 * @default "BUSINESS_ACTIONABLE_INSIGHT_TYPE_UNSPECIFIED"
 */
export type BusinessActionableInsightType =
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_UNSPECIFIED'
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_OPERATING_EXPENSES'
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_CASH_FLOW_MANAGEMENT'
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_REVENUE_GROWTH'
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_COST_REDUCTION'
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_INVENTORY_MANAGEMENT'
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_CAPITAL_ALLOCATION'
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_INVESTMENT_OPPORTUNITIES'
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_RISK_ASSESSMENT'
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_TAX_PLANNING'
  | 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_DEBT_MANAGEMENT';

/**
 * The Account object is what companies use to track transactions.
 * They can be both bank accounts or a general ledger account (also called a chart of accounts).
 *
 * Note: a company can have a multitude of these accounts
 */
export interface BusinessChartOfAccount {
  /** The account's number. */
  accountNumber?: string;
  /**
   * The account's broadest grouping. Possible values include: ASSET, EQUITY, EXPENSE,
   * LIABILITY, REVENUE. In cases where there is no clear mapping, the original
   * value passed through will be returned.
   */
  classification?: string;
  /** The company the account belongs to. */
  company?: string;
  /** @format date-time */
  createdAt?: string;
  currency?: string;
  /**
   * The account's current balance.
   * @format double
   */
  currentBalance?: number;
  /** The account's description. */
  description?: string;
  /**
   * the database record's id
   * @format uint64
   */
  id?: string;
  /** the account id as stored in merge-api. this is a required field */
  mergeRecordId: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The account's name. */
  name?: string;
  /** ID of the parent account. */
  parentAccountId?: string;
  /**
   * The third-party matching id for the object. For example, this field will be the id
   * as seen in quickbooks for a sample remote connection against quickbookks
   */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted by third party webhooks. */
  remoteWasDeleted?: boolean;
  /**
   * The account's status. Possible values include: ACTIVE, PENDING, INACTIVE. In cases where there is
   *  no clear mapping, the original value passed through will be returned.
   */
  status?: string;
  /** The account's type is a narrower and more specific grouping within the account's classification. */
  type?: string;
}

/**
 * The Transaction common model includes records of all types of transactions that do not appear in other common models.
 * The type of transaction can be identified through the type field. More specifically,
 * it will contain all types of transactions outside of:
 * * Credit Notes
 * * Expenses
 * * Invoices
 * * Journal Entries
 * * Payments
 * * Purchase Orders
 * * Vendor Credits
 */
export interface BusinessTransaction {
  /** The transaction's account. */
  account?: string;
  /** The accounting period that the Transaction was generated in. */
  accountingPeriod?: string;
  /** The company the transaction belongs to. */
  company?: string;
  /** The contact to whom the transaction relates to. */
  contact?: string;
  /** @format date-time */
  createdAt?: string;
  currency?: string;
  /**
   * The transaction's exchange rate.
   *
   * Assuming string, but might be better as float or double.
   */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  /** The TransactionLineItem object is used to represent a transaction's line item */
  lineItems?: Array<TransactionLineItem>;
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The transaction's number used for identifying purposes. */
  number?: string;
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
  /**
   * The total amount being paid after taxes.
   *
   * Might be better as double.
   */
  totalAmount?: string;
  trackingCategories?: Array<string>;
  /**
   * The date upon which the transaction occurred.
   * @format date-time
   */
  transactionDate?: string;
  /** The type of transaction, which can by any transaction object not already included in Merge’s common model. */
  transactionType?: string;
}

/**
 * The CashFlowStatement object shows operating activities, investing activities, and financing activities over a
 * period of time (month, quarter, or year).
 */
export interface CashFlowStatement {
  /**
   * Cash and cash equivalents at the beginning of the cash flow statement's period.
   * @format double
   */
  cashAtBeginningOfPeriod?: number;
  /**
   * Cash and cash equivalents at the beginning of the cash flow statement's period.
   * @format double
   */
  cashAtEndOfPeriod?: number;
  /** The company the cash flow statement belongs to. */
  company?: string;
  /** The cash flow statement's currency */
  currency?: string;
  /**
   * The cash flow statement's end period.
   *
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  endPeriod?: string;
  /** Financing activities */
  financingActivities?: Array<ReportItem>;
  /** @format uint64 */
  id?: string;
  /** Investing activities */
  investingActivities?: Array<ReportItem>;
  /** the cashflow statements id as stored in merge */
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  modifiedAt?: string;
  /** The cash flow statement's name. */
  name?: string;
  /** Operating activities */
  operatingActivities?: Array<ReportItem>;
  /**
   * The time that cash flow statement was generated by the accounting system.
   *
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  remoteGeneratedAt?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted by third party webhooks. */
  remoteWasDeleted?: boolean;
  /**
   * The cash flow statement's start period.
   *
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  startPeriod?: string;
}

/** The CompanyAddress object is used to represent a contact's or company's address. */
export interface CompanyAddress {
  /** Line 1 of the address's street. */
  street1?: string;
  /** Line 2 of the address's street. */
  street2?: string;
  /** The address's city. */
  city?: string;
  /** The address's country. */
  country?: string;
  /**
   * country's subdivision
   * Typically, this might just be 'state' but used your field name to keep it consistent with the JSON
   */
  countrySubdivision?: string;
  /**
   * the database record's id
   * @format uint64
   */
  id?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * Consider using google.protobuf.Timestamp if precise time manipulation is required
   * @format date-time
   */
  modifiedAt?: string;
  /** The address's state or region. */
  state?: string;
  type?: string;
  /** The address's zip code. */
  zipCode?: string;
}

/** The CompanyInfo object is used to represent a company's information. */
export interface CompanyInfo {
  /** the company's addresses */
  addresses?: Array<CompanyAddress>;
  /** The currency set in the company's accounting platform. */
  currency?: string;
  /**
   * The company's fiscal year end day.
   * @format int32
   */
  fiscalYearEndDay?: number;
  /**
   * The company's fiscal year end month.
   * @format int32
   */
  fiscalYearEndMonth?: number;
  /**
   * the id of the record in our system
   * @format uint64
   */
  id?: string;
  /** The company's legal name. */
  legalName?: string;
  /** the id of the record as stored in merge */
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The company's name. */
  name?: string;
  /** the company's phone numbers */
  phoneNumbers?: Array<string>;
  /**
   * When the third party's company was created.
   *
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  remoteCreatedAt?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted by third party webhooks. */
  remoteWasDeleted?: boolean;
  /** The company's tax number. */
  taxNumber?: string;
  /** The company's urls. */
  urls?: Array<string>;
}

/**
 * The CompanyProfile object is used to represent a company within the HRIS / Payroll system.
 * NOTE: a company can link multiple hris company profiles. This is important because a company can have multiple
 * locations and each location can have its own hris company profile
 */
export interface CompanyProfile {
  /** The displayed name of the company */
  displayName?: string;
  /** The company's tax number. */
  einNumbers?: Array<string>;
  /**
   * id of the record
   * @format uint64
   */
  id?: string;
  /**
   * This is the datetime that this object was created
   * @format date-time
   */
  lastUpdatedAt?: string;
  /** The company's legal name. */
  legalName?: string;
  /** The uuid of the object as stored in merge */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
}

/** The Contact object refers to either a supplier or a customer. */
export interface Contacts {
  /**
   * Address object IDs for the given Contacts object.
   *
   * These are IDs, not the Address structure itself
   */
  addressesIds?: Array<string>;
  /** The company the contact belongs to. */
  company?: string;
  /** The currency the contact's transactions are in. */
  currency?: string;
  /** The contact's email address. */
  emailAddress?: string;
  /** @format uint64 */
  id?: string;
  /** Whether the contact is a customer. */
  isCustomer?: boolean;
  /** Whether the contact is a supplier. */
  isSupplier?: boolean;
  /** The account id as seen in merge */
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  modifiedAt?: string;
  /** The contact's name. */
  name?: string;
  /** Phone numbers of the contact */
  phoneNumbers?: Array<string>;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /**
   * When the third party's contact was updated.
   *
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  remoteUpdatedAt?: string;
  /** Indicates whether or not this object has been deleted by third party webhooks. */
  remoteWasDeleted?: boolean;
  /** The contact's status */
  status?: string;
  /** The contact's tax number. */
  taxNumber?: string;
}

/** Defines a message named CreateAccountingProfileRequest. */
export interface CreateAccountingProfileRequest {
  /** @format uint64 */
  userId: string;
}

/** Defines a message named CreatesAccountingProfileResponse. */
export interface CreateAccountingProfileResponse {
  /**
   * the profile identifier
   * @format uint64
   */
  profileId?: string;
}

export type CreatePayrollProfileData = any;

/**
 * A CreditNote is transaction issued to a customer, indicating a reduction or cancellation of the amount owed by the customer.
 * It is most generally used as an adjustment note used to rectify errors, returns, or overpayments related to a sales transaction.
 * A CreditNote can be applied to Accounts Receivable Invoices to decrease the overall amount of the Invoice.
 */
export interface CreditNote {
  /** The accounting period that the CreditNote was generated in. */
  accountingPeriod?: string;
  /** The company the credit note belongs to. */
  company?: string;
  /** The credit note's contact. */
  contact?: string;
  /** @format date-time */
  createdAt?: string;
  currency?: string;
  /**
   * The credit note's exchange rate.
   *
   * Consider using double or float if this represents a number
   */
  exchangeRate?: string;
  /**
   * the database record id as stored in our systems
   * @format uint64
   */
  id?: string;
  lineItems?: Array<CreditNoteLineItem>;
  /** the id as stored in merge */
  mergeRecordId?: string;
  /**
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  modifiedAt?: string;
  /** The credit note's number. */
  number?: string;
  /**
   * Array of Payment object IDs
   * These are IDs
   */
  paymentIds?: Array<string>;
  /**
   * The amount of value remaining in the credit note that the customer can use.
   * @format double
   */
  remainingCredit?: number;
  /**
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  remoteCreatedAt?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /**
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  remoteUpdatedAt?: string;
  remoteWasDeleted?: boolean;
  /** The credit note's status. */
  status?: string;
  /**
   * The credit note's total amount.
   * @format double
   */
  totalAmount?: number;
  /** These are IDs */
  trackingCategories?: Array<string>;
  /**
   * The credit note's transaction date.
   *
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  transactionDate?: string;
}

/** CreditNoteLineItem is used to represent a credit note's line items. */
export interface CreditNoteLineItem {
  /** This seems to be an ID */
  account?: string;
  company?: string;
  description?: string;
  /** @format uint64 */
  id?: string;
  item?: string;
  memo?: string;
  name?: string;
  quantity?: string;
  remoteId?: string;
  remoteWasDeleted?: boolean;
  /** This seems to be an ID */
  taxRate?: string;
  /** Consider using double or float */
  totalLineAmount?: string;
  /** These are IDs */
  trackingCategories?: Array<string>;
  /** This seems to be an ID */
  trackingCategory?: string;
  /** Consider using double or float if this represents a number */
  unitPrice?: string;
}

/**
 * The Deduction object is used to represent an array of the wages
 * withheld from total earnings for the purpose of paying taxes.
 */
export interface Deduction {
  /**
   * The amount of money that is withheld on behalf of an employee by the company.
   * @format double
   */
  companyDeduction?: number;
  /** @format date-time */
  createdAt?: string;
  /**
   * The amount of money that is withheld from an employee's gross pay by the employee.
   * @format double
   */
  employeeDeduction?: number;
  /**
   * id
   * @format uint64
   */
  id?: string;
  /** This is the record id as seen on the merge platform */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The deduction's name. */
  name?: string;
  /** The payroll being run. */
  payrollRunMergeAccountId?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
}

/** Defines a message named DeleteAccountingProfileResponse. */
export interface DeleteAccountingProfileResponse {
  /**
   * whether the profile is deleted
   * A boolean field named "is_deleted" with field number 1.
   */
  isDeleted?: boolean;
}

export type DeleteProfileData = any;

/**
 * The dependent's relationship to the employee. Possible values include: CHILD,
 * SPOUSE, DOMESTIC_PARTNER. In cases where there is no clear mapping,
 * the original value passed through will be returned.
 * @default "DEPENDENT_RELATIONSHIP_UNSPECIFIED"
 */
export type DependentRelationship =
  | 'DEPENDENT_RELATIONSHIP_UNSPECIFIED'
  | 'DEPENDENT_RELATIONSHIP_CHILD'
  | 'DEPENDENT_RELATIONSHIP_SPOUSE'
  | 'DEPENDENT_RELATIONSHIP_DOMESTIC_PARTNER';

/** Dependents object is used to represent a dependent (e.g. child, spouse, domestic partner, etc) of an Employee */
export interface Dependents {
  /**
   * This is the datetime that this object was created by Merge
   * @format date-time
   */
  createdAt?: string;
  /**
   * The dependent's date of birth.
   * @format date-time
   */
  dateOfBirth?: string;
  /**
   * The relationship of the dependent to the employee. Possible values include: CHILD, SPOUSE, DOMESTIC_PARTNER, OTHER.
   * In cases where there is no clear mapping, the original value passed through will be returned.
   */
  dependentRelationshipToEmployee?: DependentRelationship;
  /** The employee's first name. */
  firstName?: string;
  /**
   * the gender of the dependent
   * The employee's gender. Possible values include: MALE, FEMALE, NON-BINARY, OTHER,
   * PREFER_NOT_TO_DISCLOSE. In cases where there is no clear mapping,
   * the original value passed through will be returned.
   */
  gender?: Gender;
  /**
   * The dependents home location
   * The Location object is used to represent an address that can be associated with an employee.
   */
  homeLocation?: LocationAddress;
  /**
   * id of the record
   * @format uint64
   */
  id?: string;
  /** Whether or not the dependent is a student */
  isStudent?: boolean;
  /** The employee's last name. */
  lastName?: string;
  /** This is the record id as seen on the merge platform */
  mergeAccountId?: string;
  /** The employee's middle name */
  middleName?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** the phone number of the dependent */
  phoneNumber?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
  /** The dependents's social security number. */
  ssn?: string;
}

/**
 * The Earning object is used to represent an array of different compensations
 * that an employee receives within specific wage categories.
 */
export interface Earning {
  /** @format double */
  amount?: number;
  /** @format date-time */
  createdAt?: string;
  /**
   * id
   * @format uint64
   */
  id?: string;
  /** This is the record id as seen on the merge platform */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The payroll being run. */
  payrollRunMergeAccountId?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
  /**
   * The type of earning. Possible values include: SALARY, REIMBURSEMENT, OVERTIME, BONUS.
   *  In cases where there is no clear mapping, the original value passed through will be returned.
   */
  type?: EarningType;
}

/**
 * The type of earning. Possible values include: SALARY, REIMBURSEMENT, OVERTIME, BONUS.
 * In cases where there is no clear mapping, the original value passed through will be returned.
 * @default "EARNING_TYPE_UNSPECIFIED"
 */
export type EarningType =
  | 'EARNING_TYPE_UNSPECIFIED'
  | 'EARNING_TYPE_SALARY'
  | 'EARNING_TYPE_REIMBURSEMENT'
  | 'EARNING_TYPE_OVERTIME'
  | 'EARNING_TYPE_BONUS';

export interface EmployeTimeOffBalance {
  /**
   * balance
   * @format double
   */
  balance?: number;
  /** @format date-time */
  createdAt?: string;
  /**
   * id
   * @format uint64
   */
  id?: string;
  /** This is the record id as seen on the merge platform */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** policy type of the time off balance */
  policyType?: PolicyType;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  remoteWasDeleted?: boolean;
  /**
   * used
   * @format double
   */
  used?: number;
}

/** The Employee object is used to represent any person who has been employed by a company. */
export interface Employee {
  /** The URL of the employee's avatar image. */
  avatar?: string;
  /** The bank account information for an employee */
  bankAccounts?: Array<BankInfo>;
  /** the benefits associated with the employee. */
  benefits?: Array<EmployeeBenefits>;
  /** The ID of the employee's company. */
  companyId?: string;
  /** @format date-time */
  createdAt?: string;
  /**
   * The employee's date of birth.
   *
   * Use string for ISO 8601 datetime
   */
  dateOfBirth?: string;
  /** The dependents of the employee */
  dependents?: Array<Dependents>;
  /**
   * The employee's full name, to use for display purposes.
   * If a preferred first name is available, the full name
   * will include the preferred first name
   */
  displayFullName?: string;
  /** The employee's number */
  employeeNumber?: string;
  /** The employee's username that appears in the remote UI. */
  employeeUserNameAsSeenInRemoteUi?: string;
  /** The employee's preferred name. */
  employeesPreferredName?: string;
  /**
   * The employment status of the employee. Possible values include: ACTIVE, PENDING, INACTIVE.
   * In cases where there is no clear mapping, the original value passed through will be returned.
   */
  employmentStatus?: EmploymentStatus;
  /**
   * the employment type
   * UUID fields
   */
  employmentType?: string;
  /** The employee's various position at the company */
  employments?: Array<EmployeeJobPositionAtCompany>;
  /**
   * The employee's ethnicity. Possible values include: AMERICAN_INDIAN_OR_ALASKA_NATIVE, ASIAN_OR_INDIAN_SUBCONTINENT,
   * BLACK_OR_AFRICAN_AMERICAN, HISPANIC_OR_LATINO, NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER,
   * TWO_OR_MORE_RACES, WHITE, PREFER_NOT_TO_DISCLOSE. In cases where there is no clear mapping, the original value passed through will be returned.
   */
  ethnicity?: Ethnicity;
  /** The employee's first name. */
  firstName?: string;
  /**
   * The employee's gender. Possible values include: MALE, FEMALE, NON-BINARY, OTHER, PREFER_NOT_TO_DISCLOSE.
   * In cases where there is no clear mapping, the original value passed through will be returned.
   */
  gender?: Gender;
  /**
   * the employee's pay group
   * The Group object is used to represent any subset of employees, such as PayGroup or Team. Employees can be in multiple Groups.
   */
  group?: Group;
  /**
   * the employee's home location
   * The Location object is used to represent an address that can be associated with an employee.
   */
  homeLocation?: LocationAddress;
  /**
   * id of the record
   * @format uint64
   */
  id?: string;
  /** The employee's last name. */
  lastName?: string;
  /**
   * the employee's manager
   * The Employee object is used to represent any person who has been employed by a company.
   */
  manager?: Employee;
  /**
   * The employee's filing status as related to marital status. Possible values include: SINGLE, MARRIED_FILING_JOINTLY,
   * MARRIED_FILING_SEPARATELY, HEAD_OF_HOUSEHOLD, QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD.
   * In cases where there is no clear mapping, the original value passed through will be returned.
   */
  maritalStatus?: MaritalStatus;
  /** Merge record UUID */
  mergeAccountId?: string;
  /** The employee's mobile phone number. */
  mobilePhoneNumber?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The time off balance for an employee */
  payTimeOffBalance?: EmployeTimeOffBalance;
  /** Represent an employee's pay statement for a specific payroll run. */
  payrollRuns?: Array<EmployeePayrollRun>;
  /** the employee's personal email */
  personalEmail?: string;
  /**
   * When the third party's employee was created.
   * @format date-time
   */
  remoteCreatedAt?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  remoteWasDeleted?: boolean;
  /**
   * Other fields
   * the employee's social security number
   */
  ssn?: string;
  /**
   * The date that the employee started working.
   * If an employee was rehired, the most recent start date will be returned.
   * @format date-time
   */
  startDate?: string;
  /**
   * The employee's termination date.
   * @format date-time
   */
  terminationDate?: string;
  /** The employee's work email. */
  workEmail?: string;
  /**
   * the employee's work location
   * The Location object is used to represent an address that can be associated with an employee.
   */
  workLocation?: LocationAddress;
}

/** The Benefit object is used to represent a benefit that an employee has enrolled in. */
export interface EmployeeBenefits {
  /** The ID of the benefit plan. */
  benefitPlanMergeAccountId?: string;
  /**
   * The company's contribution.
   * @format uint64
   */
  companyContribution?: string;
  /** @format date-time */
  createdAt?: string;
  /**
   * The employee's contribution.
   * @format uint64
   */
  employeeContribution?: string;
  /** The ID of the employee. */
  employeeMergeAccountId?: string;
  /**
   * The day and time the benefit ended.
   * @format date-time
   */
  endDate?: string;
  /**
   * id of the record
   * @format uint64
   */
  id?: string;
  /** This it the id of the record as seeon on the merge platform */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The name of the benefit provider. */
  providerName?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
  /**
   * The day and time the benefit started.
   * @format date-time
   */
  startDate?: string;
}

/**
 * The Employment object is used to represent a job position at a company.
 * NOTE: When there is a change in pay or title, integrations with historical
 * data will create new Employment objects while integrations without
 * historical data will update existing ones.
 */
export interface EmployeeJobPositionAtCompany {
  /** @format date-time */
  createdAt?: string;
  /**
   * the positions effective date
   * @format date-time
   */
  effectiveDate?: string;
  /**
   * the positions flsa status
   * The position's FLSA status. Possible values include: EXEMPT, SALARIED_NONEXEMPT,
   * NONEXEMPT, OWNER. In cases where there is no clear mapping,
   * the original value passed through will be returned.
   */
  flsaStatus?: FlsaStatus;
  /**
   * id of the record
   * @format uint64
   */
  id?: string;
  /** The job title */
  jobTitle?: string;
  /** This is the record id as seen on merge */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** the pay currency */
  payCurrency?: string;
  /**
   * the pay frequency
   * The position's pay frequency. Possible values include: WEEKLY, BIWEEKLY, MONTHLY,
   * QUARTERLY, SEMIANNUALLY, ANNUALLY, THIRTEEN-MONTHLY, PRO_RATA, SEMIMONTHLY.
   * In cases where there is no clear mapping, the original value passed through will be returned.
   */
  payFrequency?: PayFrequency;
  /**
   * the pay period
   * The time period this pay rate encompasses. Possible values include:
   * HOUR, DAY, WEEK, EVERY_TWO_WEEKS, SEMIMONTHLY, MONTH, QUARTER,
   * EVERY_SIX_MONTHS, YEAR. In cases where there is no clear mapping,
   * the original value passed through will be returned.
   */
  payPeriod?: PayPeriod;
  /**
   * the pay rate
   * @format double
   */
  payRate?: number;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
}

/** The EmployeePayrollRun object is used to represent an employee's pay statement for a specific payroll run. */
export interface EmployeePayrollRun {
  /** @format date-time */
  checkDate?: string;
  /** @format date-time */
  createdAt?: string;
  /**
   * The Deduction object is used to represent an array of the wages withheld
   * from total earnings for the purpose of paying taxes.
   */
  deductions?: Array<Deduction>;
  /**
   * The Earning object is used to represent an array of different compensations
   * that an employee receives within specific wage categories
   */
  earnings?: Array<Earning>;
  /** The employee whose payroll is being run. */
  employeeMergeAccountId?: string;
  /** @format date-time */
  endDate?: string;
  /**
   * The total earnings throughout a given period for an employee before any deductions are made.
   * @format double
   */
  grossPay?: number;
  /**
   * id
   * @format uint64
   */
  id?: string;
  /** This is the record id as seen on the merge platform */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /**
   * The take-home pay throughout a given period for an employee after deductions are made.
   * @format double
   */
  netPay?: number;
  /** The payroll being run. */
  payrollRunMergeAccountId?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
  /**
   * The day and time the payroll run started.
   * @format date-time
   */
  startDate?: string;
  /**
   * The Tax object is used to represent an array of the tax deductions
   * for a given employee's payroll run.
   */
  taxes?: Array<Tax>;
}

/** EmployerBenefits is used to represent a benefit plan offered by a company. */
export interface EmployerBenefits {
  /**
   * The type of benefit plan. Possible values include: MEDICAL, HEALTH_SAVINGS, INSURANCE, RETIREMENT, OTHER.
   * In cases where there is no clear mapping, the original value passed through will be returned.
   *
   * Type of benefit plan, e.g., "MEDICAL"
   */
  benefitPlanType?: BenefitPlanType;
  /**
   * Creation date in ISO 8601 format
   * @format date-time
   */
  createdAt?: string;
  /**
   * The employer benefit's deduction code.
   *
   * Code for payroll deduction
   */
  deductionCode?: string;
  /**
   * The employer benefit's description.
   *
   * Description of the plan
   */
  description?: string;
  /** The employee benefits tied to this provided record */
  employeeBenefits?: Array<EmployeeBenefits>;
  /**
   * id of the record
   * @format uint64
   */
  id?: string;
  /**
   * The id of the record as seen on the merge platform
   * Merge record UUID
   */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * Last modification date in ISO 8601 format
   * @format date-time
   */
  modifiedAt?: string;
  /**
   * The employer benefit's name - typically the carrier or network name.
   *
   * Name of the benefit plan
   */
  name?: string;
  /**
   * The third-party API ID of the matching object.
   *
   * External system identifier (integration)
   */
  remoteId?: string;
  /**
   * Indicates whether or not this object has been deleted in the third party platform.
   *
   * Flag for deletion status
   * @format date-time
   */
  remoteWasDeleted?: string;
}

/** The EmployerPayrollRun object is used to represent a group of pay statements for a specific pay schedule. */
export interface EmployerPayrollRun {
  /**
   * The day and time the payroll run was checked.
   * @format date-time
   */
  checkDate?: string;
  /**
   * This is the datetime that this object was created by Merge
   * @format date-time
   */
  createdAt?: string;
  /**
   * The day and time the payroll run ended.
   * @format date-time
   */
  endDate?: string;
  /**
   * id of the record
   * @format uint64
   */
  id?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The set of payroll records for the payroll run */
  payrollRuns?: Array<EmployeePayrollRun>;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform */
  remoteWasDeleted?: boolean;
  /**
   * The state of the payroll run Possible values include: PAID, DRAFT, APPROVED, FAILED, CLOSED.
   * In cases where there is no clear mapping, the original value passed through will be returned.
   */
  runState?: PayrollRunState;
  /**
   * The type of the payroll run Possible values include: REGULAR, OFF_CYCLE,
   * CORRECTION, TERMINATION, SIGN_ON_BONUS. In cases where there is no clear mapping, the original value passed through will be returned.
   */
  runType?: PayrollRunType;
  /**
   * The day and time the payroll run started.
   * @format date-time
   */
  startDate?: string;
}

/** @default "EMPLOYMENT_STATUS_UNSPECIFIED" */
export type EmploymentStatus =
  | 'EMPLOYMENT_STATUS_UNSPECIFIED'
  | 'EMPLOYMENT_STATUS_ACTIVE'
  | 'EMPLOYMENT_STATUS_PENDING'
  | 'EMPLOYMENT_STATUS_INACTIVE';

/**
 * The employee's ethnicity. Possible values include: AMERICAN_INDIAN_OR_ALASKA_NATIVE, ASIAN_OR_INDIAN_SUBCONTINENT,
 * BLACK_OR_AFRICAN_AMERICAN, HISPANIC_OR_LATINO, NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER,
 * TWO_OR_MORE_RACES, WHITE, PREFER_NOT_TO_DISCLOSE. In cases where there is no clear mapping, the original value passed through will be returned.
 * @default "ETHNICITY_UNSPECIFIED"
 */
export type Ethnicity =
  | 'ETHNICITY_UNSPECIFIED'
  | 'ETHNICITY_AMERICAN_INDIAN_OR_ALASKA_NATIVE'
  | 'ETHNICITY_ASIAN_OR_INDIAN_SUBCONTINENT'
  | 'ETHNICITY_BLACK_OR_AFRICAN_AMERICAN'
  | 'ETHNICITY_HISPANIC_OR_LATINO'
  | 'ETHNICITY_NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER'
  | 'ETHNICITY_TWO_OR_MORE_RACES'
  | 'ETHNICITY_WHITE'
  | 'ETHNICITY_PREFER_NOT_TO_DISCLOSE';

export interface ExchangePublicLinkTokenForAccountTokenRequest {
  /** the end user's origin id */
  endUserOriginId: string;
  /** the organization name */
  organizationName: string;
  /** the public link token */
  publicToken: string;
  /**
   * The user id
   * Validations:
   * - user_id must be greater than 0
   * @format uint64
   */
  userId: string;
}

/** Defines a message named ExchangePublicLinkTokenForAccountTokenResponse. */
export interface ExchangePublicLinkTokenForAccountTokenResponse {
  /** the status of the exchange token */
  success: boolean;
}

export type ExchangePublicLinkTokenForAccountTokenResponseData = any;

/**
 * The Expense object is used to represent a direct purchase by a business, typically made with a check, credit card, or cash.
 * Each Expense object is dedicated to a grouping of expenses, with each expense recorded in the lines object.
 *
 * The Expense object is used also used to represent refunds to direct purchases. Refunds can be distinguished from purchases
 * by the amount sign of the records. Expense objects with a negative amount are purchases and Expense objects
 * with a positive amount are refunds to those purchases.
 */
export interface Expense {
  /** The expense's payment account. */
  account?: string;
  /** The accounting period that the Expense was generated in. */
  accountingPeriod?: string;
  /** The company the expense belongs to. */
  company?: string;
  /** The expense's contact. */
  contact?: string;
  /** The expense's currency */
  currency?: string;
  /**
   * The expense's exchange rate.
   *
   * Consider using double or float if this represents a number
   */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  /** The ExpenseLine object is used to represent an expense's line items. */
  lines?: Array<ExpenseLine>;
  /** The expense's private note. */
  memo?: string;
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  modifiedAt?: string;
  /**
   * When the expense was created.
   *
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  remoteCreatedAt?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted by third party webhooks. */
  remoteWasDeleted?: boolean;
  /**
   * The expense's total amount before tax.
   * @format double
   */
  subTotal?: number;
  /**
   * The expense's total amount.
   * @format double
   */
  totalAmount?: number;
  /**
   * The expense's total tax amount.
   * @format double
   */
  totalTaxAmount?: number;
  /** These are IDs */
  trackingCategories?: Array<string>;
  /**
   * When the transaction occurred.
   *
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  transactionDate?: string;
}

/** The ExpenseLine object is used to represent an expense's line items. */
export interface ExpenseLine {
  /** The expense's payment account. */
  account?: string;
  /** The company the line belongs to. */
  company?: string;
  /**
   * The expense's contact.
   *
   * Optional based on provided JSON
   */
  contact?: string;
  /** @format date-time */
  createdAt?: string;
  /** The expense line item's currency */
  currency?: string;
  /** The description of the item that was purchased by the company. */
  description?: string;
  /**
   * The expense line item's exchange rate.
   *
   * Consider using double or float if this represents a number
   */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  /**
   * The line's item.
   *
   * This seems to be an ID
   */
  item?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  modifiedAt?: string;
  /**
   * The line's net amount.
   * @format double
   */
  netAmount?: number;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  remoteWasDeleted?: boolean;
  /** These are IDs */
  trackingCategories?: Array<string>;
  /** This seems to be an ID */
  trackingCategory?: string;
}

/**
 * The position's FLSA status. Possible values include: EXEMPT, SALARIED_NONEXEMPT,
 * NONEXEMPT, OWNER. In cases where there is no clear mapping,
 * the original value passed through will be returned.
 * @default "FLSA_STATUS_UNSPECIFIED"
 */
export type FlsaStatus =
  | 'FLSA_STATUS_UNSPECIFIED'
  | 'FLSA_STATUS_EXEMPT'
  | 'FLSA_STATUS_NON_EXEMPT'
  | 'FLSA_STATUS_SALARIED_NON_EXEMPT'
  | 'FLSA_STATUS_OWNER';

/**
 * The employee's gender. Possible values include: MALE, FEMALE, NON-BINARY, OTHER,
 * PREFER_NOT_TO_DISCLOSE. In cases where there is no clear mapping,
 * the original value passed through will be returned.
 * @default "GENDER_UNSPECIFIED"
 */
export type Gender =
  | 'GENDER_UNSPECIFIED'
  | 'GENDER_MALE'
  | 'GENDER_FEMALE'
  | 'GENDER_NON_BINARY'
  | 'GENDER_OTHER'
  | 'GENDER_PREFER_NOT_TO_DISCLOSE';

export type GetLinkTokenData = any;

/** Defines a message named GetMergeLinkTokenRequest. */
export interface GetMergeLinkTokenRequest {
  /**
   * Your end user's email address. This is purely for
   * identification purposes - setting this value will not cause any emails to be sent.
   */
  email: string;
  /** Your end user's organization. */
  organizationName: string;
  /**
   * The user id
   * Validations:
   * - user_id must be greater than 0
   * This unique identifier typically represents the ID for your end user in your product's database.
   * This value must be distinct from other Linked Accounts' unique identifiers.
   * @format uint64
   */
  userId: string;
}

/** Defines a message named GetLinkTokenResponse. */
export interface GetMergeLinkTokenResponse {
  /**
   * the end user origin id
   * A string field named "end_user_origin_id" with field number 4.
   */
  endUserOriginId?: string;
  /**
   * the integration name
   * A string field named "integration_name" with field number 2.
   */
  integrationName?: string;
  /**
   * the link token
   * A string field named "link_token" with field number 1.
   */
  linkToken?: string;
  /**
   * the magic link URL
   * A string field named "magic_link_url" with field number 3.
   */
  magicLinkUrl?: string;
  /**
   * the organization name
   * A string field named "organization_name" with field number 5.
   */
  organizationName?: string;
}

/** The Group object is used to represent any subset of employees, such as PayGroup or Team. Employees can be in multiple Groups. */
export interface Group {
  /** @format date-time */
  createdAt?: string;
  /**
   * id of the record
   * @format uint64
   */
  id?: string;
  /** This is the record id as seen on merge */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** the pay group's name */
  name?: string;
  /** the parent pay group merge record id */
  parentGroupMergeAccountId?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
  /**
   * the pay group's type
   * The group type Possible values include: TEAM, DEPARTMENT, COST_CENTER, BUSINESS_UNIT, GROUP.
   * In cases where there is no clear mapping, the original value passed through will be returned.
   */
  type?: PayGroupType;
}

export type HealthCheckData = any;

/** Defines a message named HealthCheckResponse. */
export interface HealthCheckResponse {
  /** whether the service is healthy */
  healthy?: boolean;
}

export interface HrisIntegrationMergeLink {
  /**
   * When you request a link token to initiate a Merge Link session, Merge determines whether to create a new linked account or modify
   * an existing linked account based on a combination of the end_user_origin_id and the category. If you want to support multiple
   * connections, you simply need to provide a different end_user_origin_id for each company.
   *
   * This approach enables you to link multiple instances of the same integration (like QuickBooks) for the same end user.
   * It also has the added security benefit of not exposing any internal end_user_origin_ids.
   */
  account?: HrisLinkedAccount;
  category?: string;
  endUserEmailAddress?: string;
  endUserOrganizationName?: string;
  endUserOriginId?: string;
  /**
   * id
   * @format uint64
   */
  id?: string;
  integration?: string;
  integrationImage?: string;
  integrationName?: string;
  integrationSlug?: string;
  integrationSquareImage?: string;
  isDuplicate?: boolean;
  /** @format date-time */
  lastModifiedAt?: string;
  mergeLinkedAccountId?: string;
  status?: string;
  token?: MergeLinkedAccountToken;
  webhookListenerUrl?: string;
}

export interface HrisLinkedAccount {
  /** the set of benefit plans offered by the company */
  benefitPlans?: Array<EmployerBenefits>;
  /** the set of employees employed by the employer */
  employees?: Array<Employee>;
  /**
   * id
   * @format uint64
   */
  id?: string;
  /** the set of payroll runs by the employer */
  payrollRuns?: Array<EmployerPayrollRun>;
  /** the company profile of interest */
  profile?: CompanyProfile;
}

/**
 * The IncomeStatement object is used to represent a company’s income, the cost of sales, operating expenses,
 * and other non-operating expenses. The object also includes other important values like gross profit,
 * gross operating profit, and net income. This represents a period of time (month, quarter, or year).
 */
export interface IncomeStatement {
  /** The company the income statement belongs to. */
  company?: string;
  /** cost of sales */
  costOfSales?: Array<ReportItem>;
  /** @format date-time */
  createdAt?: string;
  /** The income statement's currency. */
  currency?: string;
  /**
   * The income statement's end period.
   * @format date-time
   */
  endPeriod?: string;
  /**
   * The revenue minus the cost of sale.
   * @format double
   */
  grossProfit?: number;
  /** @format uint64 */
  id?: string;
  /** income */
  income?: Array<ReportItem>;
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The income statement's name. */
  name?: string;
  /**
   * The gross profit minus the total expenses.
   * @format double
   */
  netIncome?: number;
  /**
   * The revenue minus the operating expenses.
   * @format double
   */
  netOperatingIncome?: number;
  nonOperatingExpenses?: Array<ReportItem>;
  /** operating expenses */
  operatingExpenses?: Array<ReportItem>;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted by third party webhooks. */
  remoteWasDeleted?: boolean;
  /**
   * The income statement's start period.
   * @format date-time
   */
  startPeriod?: string;
}

/** The Invoice object represents an itemized record of goods and/or services sold to a customer. */
export interface Invoice {
  /** The accounting period that the Invoice was generated in. */
  accountingPeriod?: string;
  /**
   * The invoice's remaining balance.
   * @format float
   */
  balance?: number;
  /** The company the invoice belongs to. */
  company?: string;
  /** The invoice's contact. */
  contact?: string;
  /** The invoice's currency */
  currency?: string;
  /**
   * The invoice's due date.
   * @format date-time
   */
  dueDate?: string;
  /** The invoice's exchange rate. */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  /**
   * The invoice's issue date.
   * @format date-time
   */
  issueDate?: string;
  lineItems?: Array<InvoiceLineItem>;
  /** The invoice's private note. */
  memo?: string;
  /** the account id as stored in merge */
  mergeRecordId?: string;
  /** @format date-time */
  modifiedAt?: string;
  /** The invoice's number. */
  number?: string;
  /**
   * The invoice's paid date.
   * @format date-time
   */
  paidOnDate?: string;
  /** Array of Payment object IDs. */
  payments?: Array<string>;
  purchaseOrders?: Array<string>;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /**
   * When the third party's invoice entry was updated.
   * @format date-time
   */
  remoteUpdatedAt?: string;
  remoteWasDeleted?: boolean;
  status?: string;
  /**
   * The total amount being paid before taxes.
   * @format float
   */
  subTotal?: number;
  /**
   * The invoice's total amount.
   * @format float
   */
  totalAmount?: number;
  /**
   * The total discounts applied to the total cost.
   * @format float
   */
  totalDiscount?: number;
  /**
   * The total amount being paid in taxes.
   * @format float
   */
  totalTaxAmount?: number;
  trackingCategories?: Array<string>;
  /**
   * Whether the invoice is an accounts receivable or accounts payable
   *  If type is accounts_payable, the invoice is a bill. If type is
   *  accounts_receivable, it is an invoice. Possible values include: ACCOUNTS_RECEIVABLE, ACCOUNTS_PAYABLE.
   */
  type?: string;
}

/** The Invoice object represents an itemized record of goods and/or services sold to a customer. */
export interface InvoiceLineItem {
  account?: string;
  /** The company the line item belongs to. */
  company?: string;
  /** The line item's currency */
  currency?: string;
  /** The line item's description. */
  description?: string;
  /** The line item's exchange rate. */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  item?: string;
  /** the id of the record as stored in merge */
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  modifiedAt?: string;
  /**
   * The line item's quantity.
   * @format int32
   */
  quantity?: number;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /**
   * The line item's total amount.
   * @format float
   */
  totalAmount?: number;
  trackingCategories?: Array<string>;
  trackingCategory?: string;
  /**
   * The line item's unit price.
   * @format float
   */
  unitPrice?: number;
}

/** The Item object refers to the goods involved in a transaction. */
export interface Item {
  /** The company the item belongs to. */
  company?: string;
  /** @format date-time */
  createdAt?: string;
  /** @format uint64 */
  id?: string;
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The item's name. */
  name?: string;
  /** References the default account used to record a purchase of the item. */
  purchaseAccount?: string;
  /**
   * The price at which the item is purchased from a vendor.
   * @format float
   */
  purchasePrice?: number;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /**
   * When the third party's item note was updated.
   * @format date-time
   */
  remoteUpdatedAt?: string;
  /** Indicates whether or not this object has been deleted by third party webhooks. */
  remoteWasDeleted?: boolean;
  /** References the default account used to record a sale. */
  salesAccount?: string;
  status?: string;
  /**
   * The item's unit price.
   * @format float
   */
  unitPrice?: number;
}

/**
 * A JournalEntry is a record of a transaction or event that is entered into a company's accounting system.
 *
 * The JournalEntry common model contains records that are automatically created as a result of a
 * certain type of transaction, like an Invoice, and records that are manually created against a company’s ledger.
 *
 * The lines of a given JournalEntry object should always sum to 0. A positive net_amount means
 * the line represents a debit and a negative net_amount represents a credit.
 */
export interface JournalEntry {
  /** The accounting period that the JournalEntry was generated in. */
  accountingPeriod?: string;
  /**
   * A list of the Payment Applied to Lines common models
   * related to a given Invoice, Credit Note, or Journal Entry.
   */
  appliedPayments?: Array<string>;
  /** The company the journal entry belongs to. */
  company?: string;
  /** @format date-time */
  createdAt?: string;
  currency?: string;
  /**
   * The journal entry's exchange rate.
   *
   * Assuming string due to the example provided, but could be float or double.
   */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  /** Reference number for identifying journal entries. */
  journalNumber?: string;
  /** The JournalLine object is used to represent a journal entry's line items. */
  lines?: Array<JournalLine>;
  /** The journal entry's private note. */
  memo?: string;
  /** the id of the record as stored in merge */
  mergeRecordId?: string;
  /** @format date-time */
  modifiedAt?: string;
  payments?: Array<string>;
  postingStatus?: string;
  /**
   * When the third party's journal entry was created.
   * @format date-time
   */
  remoteCreatedAt?: string;
  remoteId?: string;
  /** @format date-time */
  remoteUpdatedAt?: string;
  remoteWasDeleted?: boolean;
  trackingCategories?: Array<string>;
  /**
   * The journal entry's transaction date.
   * @format date-time
   */
  transactionDate?: string;
}

/** The JournalLine object is used to represent a journal entry's line items. */
export interface JournalLine {
  account?: string;
  /** The company the journal entry belongs to. */
  company?: string;
  contact?: string;
  /** @format date-time */
  createdAt?: string;
  /** The line's description. */
  description?: string;
  /**
   * The journal line item's exchange rate.
   *
   * Assuming string due to the example provided, but could be float or double.
   */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  /** @format date-time */
  modifiedAt?: string;
  /**
   * The value of the line item including taxes and other fees.
   *
   * Might want to use double or a more precise type
   * @format float
   */
  netAmount?: number;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  trackingCategories?: Array<string>;
  trackingCategory?: string;
}

export interface LinkedAccountingAccount {
  /** Represent a company's attachments. a business can have many attachments */
  attachments?: Array<AccountingAttachment>;
  /**
   * The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal to liability and equity combined. This shows the company’s financial health at a specific point in time.
   * a business can have many balance sheets
   */
  balanceSheets?: Array<BalanceSheet>;
  /**
   * The CashFlowStatement object shows operating activities, investing activities, and financing activities over a period of time (month, quarter, or year).
   * a company can have many cash flow statements
   */
  cashFlowStatements?: Array<CashFlowStatement>;
  /**
   * A "Business Chart of Accounts" is a structured list of a company's general ledger accounts.
   * These accounts are used to categorize every financial transaction a company makes.
   * This structure allows businesses to systematically track, manage, and report their financial activities
   */
  chartOfAccounts?: Array<BusinessChartOfAccount>;
  /** The CompanyInfo object is used to represent a company's information. */
  companyInfo?: Array<CompanyInfo>;
  /** The Contact object refers to either a supplier or a customer. */
  contacts?: Array<Contacts>;
  /** a business can have many credit notes */
  creditNotes?: Array<CreditNote>;
  /** a business can have many expenses */
  expenses?: Array<Expense>;
  /**
   * id
   * @format uint64
   */
  id?: string;
  /** a business can have many income statements */
  incomeStatements?: Array<IncomeStatement>;
  /** a business can have many invoices */
  invoices?: Array<Invoice>;
  /** a business can have many items */
  items?: Array<Item>;
  /** a business can have many journal entries */
  journalEntries?: Array<JournalEntry>;
  /** a business can have many payments */
  payments?: Array<Payment>;
  /** a business can have many purchase orders */
  purchaseOrders?: Array<PurchaseOrder>;
  /** a business can have many tax rates */
  taxRates?: Array<TaxRate>;
  /** a business can have many transactions */
  transactions?: Array<BusinessTransaction>;
  /** a business can have many vendor credits */
  vendorCredits?: Array<VendorCredit>;
}

/** The Location object is used to represent an address that can be associated with an employee. */
export interface LocationAddress {
  /** Line 1 of the location's street address. */
  street1?: string;
  /** Line 2 of the location's street address. */
  street2?: string;
  /** The location's city. */
  city?: string;
  /** The location's country. */
  country?: string;
  /** @format date-time */
  createdAt?: string;
  /**
   * id of the record
   * @format uint64
   */
  id?: string;
  /**
   * The location's type. Can be either WORK or HOME Possible values include: HOME, WORK.
   * In cases where there is no clear mapping, the original value passed through will be returned.
   */
  locationType?: LocationType;
  /** This is the record id as seen on merge */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The location's name. */
  name?: string;
  /** The location's phone number. */
  phoneNumber?: string;
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
  /** The location's state. Represents a region if outside of the US. */
  state?: string;
  /** The location's zip code or postal code. */
  zipCode?: string;
}

/**
 * The location's type. Can be either WORK or HOME Possible values include: HOME, WORK.
 * In cases where there is no clear mapping, the original value passed through will be returned.
 * @default "LOCATION_TYPE_UNSPECIFIED"
 */
export type LocationType =
  | 'LOCATION_TYPE_UNSPECIFIED'
  | 'LOCATION_TYPE_HOME'
  | 'LOCATION_TYPE_WORK';

/**
 * The employee's filing status as related to marital status. Possible values include: SINGLE,
 * MARRIED_FILING_JOINTLY, MARRIED_FILING_SEPARATELY, HEAD_OF_HOUSEHOLD, QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD.
 * In cases where there is no clear mapping, the original value passed through will be returned.
 * @default "MARITAL_STATUS_UNSPECIFIED"
 */
export type MaritalStatus =
  | 'MARITAL_STATUS_UNSPECIFIED'
  | 'MARITAL_STATUS_SINGLE'
  | 'MARITAL_STATUS_MARRIED_FILING_JOINTLY'
  | 'MARITAL_STATUS_MARRIED_FILING_SEPARATELY'
  | 'MARITAL_STATUS_HEAD_OF_HOUSEHOLD'
  | 'MARITAL_STATUS_QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD';

/**
 * MergeBusinessProfile stores high level user profile details
 * such as the id, user_id tied to the profile, and many more
 */
export interface MergeBusinessProfile {
  /** this is the accounting integration the business has decided to authorize */
  accountingIntegrationMergeLink?: Array<AccountingIntegrationMergeLink>;
  /** ths is the actionable inisghts the business has be provided with */
  actionablePersonalInsights?: Array<BusinessActionableInsight>;
  companyName?: string;
  /** a user profile can have many links (connected institutions) of which finanical accounts are tied to (checking, savings, etc) */
  email?: string;
  /**
   * id
   * @format uint64
   */
  id?: string;
  /** this is the payroll integration the business has decided to authorize */
  payrollIntegrationMergeLink?: Array<HrisIntegrationMergeLink>;
  /**
   * the user id tied to the profile
   * @format uint64
   */
  userId?: string;
}

export interface MergeLinkedAccountToken {
  accessToken?: string;
  /**
   * id
   * @format uint64
   */
  id?: string;
  /** the id of the item the token is tied to */
  itemId?: string;
  keyId?: string;
  /** This is what you'll pass to Merge as the end_user_origin_id. */
  mergeEndUserOriginId?: string;
  /** The integration slug/identifier. This is returned at the end of the linking flow. */
  mergeIntegrationSlug?: string;
  version?: string;
}

/**
 * The position's pay frequency. Possible values include: WEEKLY, BIWEEKLY, MONTHLY,
 * QUARTERLY, SEMIANNUALLY, ANNUALLY, THIRTEEN-MONTHLY, PRO_RATA, SEMIMONTHLY.
 * In cases where there is no clear mapping, the original value passed through will be returned.
 * @default "PAY_FREQUENCY_UNSPECIFIED"
 */
export type PayFrequency =
  | 'PAY_FREQUENCY_UNSPECIFIED'
  | 'PAY_FREQUENCY_WEEKLY'
  | 'PAY_FREQUENCY_BIWEEKLY'
  | 'PAY_FREQUENCY_MONTHLY'
  | 'PAY_FREQUENCY_QUARTERLY'
  | 'PAY_FREQUENCY_SEMIANNUALLY'
  | 'PAY_FREQUENCY_ANNUALLY'
  | 'PAY_FREQUENCY_THIRTEEN_MONTHLY'
  | 'PAY_FREQUENCY_PRO_RATA'
  | 'PAY_FREQUENCY_SEMIMONTHLY';

/**
 * The group type Possible values include: TEAM, DEPARTMENT, COST_CENTER, BUSINESS_UNIT, GROUP.
 * In cases where there is no clear mapping, the original value passed through will be returned.
 * @default "PAY_GROUP_TYPE_UNSPECIFIED"
 */
export type PayGroupType =
  | 'PAY_GROUP_TYPE_UNSPECIFIED'
  | 'PAY_GROUP_TYPE_TEAM'
  | 'PAY_GROUP_TYPE_DEPARTMENT'
  | 'PAY_GROUP_TYPE_COST_CENTER'
  | 'PAY_GROUP_TYPE_BUSINESS_UNIT'
  | 'PAY_GROUP_TYPE_GROUP';

/**
 * The time period this pay rate encompasses. Possible values include:
 * HOUR, DAY, WEEK, EVERY_TWO_WEEKS, SEMIMONTHLY, MONTH, QUARTER,
 * EVERY_SIX_MONTHS, YEAR. In cases where there is no clear mapping,
 * the original value passed through will be returned.
 * @default "PAY_PERIOD_UNSPECIFIED"
 */
export type PayPeriod =
  | 'PAY_PERIOD_UNSPECIFIED'
  | 'PAY_PERIOD_HOUR'
  | 'PAY_PERIOD_DAY'
  | 'PAY_PERIOD_WEEK'
  | 'PAY_PERIOD_EVERY_TWO_WEEKS'
  | 'PAY_PERIOD_SEMIMONTHLY'
  | 'PAY_PERIOD_MONTH'
  | 'PAY_PERIOD_QUARTER'
  | 'PAY_PERIOD_EVERY_SIX_MONTHS'
  | 'PAY_PERIOD_YEAR';

/** The Payment object represents general payments made towards a specific transaction. */
export interface Payment {
  /** The supplier’s or customer’s account in which the payment is made. */
  account?: string;
  /** The accounting period that the Payment was generated in. */
  accountingPeriod?: string;
  /** The company the payment belongs to. */
  company?: string;
  /** The supplier, or customer involved in the payment. */
  contact?: string;
  /** @format date-time */
  createdAt?: string;
  currency?: string;
  /**
   * The payment's exchange rate.
   *
   * Assuming string due to the example provided, but could be float or double.
   */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  /** the id as stored in merge */
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  remoteId?: string;
  /** @format date-time */
  remoteUpdatedAt?: string;
  remoteWasDeleted?: boolean;
  /**
   * The total amount of money being paid to the supplier, or customer, after taxes.
   *
   * Might want to use double or a more precise type
   * @format float
   */
  totalAmount?: number;
  trackingCategories?: Array<string>;
  /**
   * The payment's transaction date.
   * @format date-time
   */
  transactionDate?: string;
}

/**
 * The state of the payroll run Possible values include: PAID, DRAFT, APPROVED, FAILED, CLOSED.
 * In cases where there is no clear mapping, the original value passed through will be returned.
 * @default "PAYROLL_RUN_STATE_UNSPECIFIED"
 */
export type PayrollRunState =
  | 'PAYROLL_RUN_STATE_UNSPECIFIED'
  | 'PAYROLL_RUN_STATE_PAID'
  | 'PAYROLL_RUN_STATE_DRAFT'
  | 'PAYROLL_RUN_STATE_APPROVED'
  | 'PAYROLL_RUN_STATE_FAILED'
  | 'PAYROLL_RUN_STATE_CLOSED';

/**
 * The type of the payroll run Possible values include: REGULAR, OFF_CYCLE, CORRECTION, TERMINATION, SIGN_ON_BONUS.
 * In cases where there is no clear mapping, the original value passed through will be returned.
 * @default "PAYROLL_RUN_TYPE_UNSPECIFIED"
 */
export type PayrollRunType =
  | 'PAYROLL_RUN_TYPE_UNSPECIFIED'
  | 'PAYROLL_RUN_TYPE_REGULAR'
  | 'PAYROLL_RUN_TYPE_OFF_CYCLE'
  | 'PAYROLL_RUN_TYPE_CORRECTION'
  | 'PAYROLL_RUN_TYPE_TERMINATION'
  | 'PAYROLL_RUN_TYPE_SIGN_ON_BONUS';

/**
 * The policy type of this time off balance. Possible values include: VACATION, SICK, PERSONAL,
 * JURY_DUTY, VOLUNTEER, BEREAVEMENT. In cases where there is no clear mapping, the original
 * value passed through will be returned
 * @default "POLICY_TYPE_UNSPECIFIED"
 */
export type PolicyType =
  | 'POLICY_TYPE_UNSPECIFIED'
  | 'POLICY_TYPE_VACATION'
  | 'POLICY_TYPE_SICK'
  | 'POLICY_TYPE_PERSONAL'
  | 'POLICY_TYPE_JURY_DUTY'
  | 'POLICY_TYPE_VOLUNTEER'
  | 'POLICY_TYPE_BEREAVEMENT';

/** The PurchaseOrder object is a record of request for a product or service between a buyer and seller. */
export interface PurchaseOrder {
  /** The accounting period that the PurchaseOrder was generated in. */
  accountingPeriod?: string;
  /** The company the purchase order belongs to. */
  company?: string;
  /** @format date-time */
  createdAt?: string;
  /** The purchase order's currency. */
  currency?: string;
  /** The contact making the purchase order. */
  customer?: string;
  /** The purchase order's delivery address. */
  deliveryAddress?: CompanyAddress;
  /**
   * The purchase order's delivery date.
   * @format date-time
   */
  deliveryDate?: string;
  /** Assuming string, but might be better as float or double. */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  /**
   * The purchase order's issue date.
   * @format date-time
   */
  issueDate?: string;
  lineItems?: Array<PurchaseOrderLineItem>;
  /** A memo attached to the purchase order. */
  memo?: string;
  mergeRecordId?: string;
  /** @format date-time */
  modifiedAt?: string;
  /** The human-readable number of the purchase order. */
  purchaseOrderNumber?: string;
  /** @format date-time */
  remoteCreatedAt?: string;
  remoteId?: string;
  /** @format date-time */
  remoteUpdatedAt?: string;
  remoteWasDeleted?: boolean;
  status?: string;
  /**
   * The purchase order's total amount.
   *
   * Might be better as double.
   * @format float
   */
  totalAmount?: number;
  trackingCategories?: Array<string>;
  /** The party fulfilling the purchase order. */
  vendor?: string;
}

/** The PurchaseOrderLineItem object is used to represent a purchase order's line item. */
export interface PurchaseOrderLineItem {
  account?: string;
  company?: string;
  /** @format date-time */
  createdAt?: string;
  currency?: string;
  description?: string;
  /** Assuming string, but might be better as float or double. */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  item?: string;
  /** @format date-time */
  modifiedAt?: string;
  /** @format int32 */
  quantity?: number;
  remoteId?: string;
  remoteWasDeleted?: boolean;
  taxAmount?: string;
  totalLineAmount?: string;
  trackingCategories?: Array<string>;
  trackingCategory?: string;
  /** Assuming string, but might be better as float or double. */
  unitPrice?: string;
}

/** Defines a message named ReadProfileRequest. */
export interface ReadAccountingProfileResponse {
  /**
   * the profile of interest
   * A field named "profile" of type BusinessPayrollProfile with field number 1.
   */
  profile?: MergeBusinessProfile;
}

export type ReadAccountingProfileResponseData = any;

export type ReadBalanceSheetsData = any;

export interface ReadBalanceSheetsRequest {
  /**
   * The accounting integration merge link id
   * Validations:
   * - acounting_integration_merge_link_id must be greater than 0
   * @format uint64
   */
  acountingIntegrationMergeLinkId: string;
  /**
   * The end date
   * Validations:
   * - end_date must be a valid date
   * @format date-time
   */
  endDate: string;
  /**
   * The page number
   * @format int32
   */
  pageNumber: number;
  /**
   * The page size
   * @format int32
   */
  pageSize: number;
  /**
   * The start date
   * Validations:
   * - start_date must be a valid date
   * @format date-time
   */
  startDate: string;
  /**
   * The user id
   * Validations:
   * - user_id must be greater than 0
   * @format uint64
   */
  userId: string;
}

export interface ReadBalanceSheetsResponse {
  /** the balance sheets */
  balanceSheets?: Array<BalanceSheet>;
  /**
   * the pagination token
   * @format int32
   */
  nextPage?: number;
}

export type ReadBusinessChartOfAccountsData = any;

export interface ReadBusinessChartOfAccountsRequest {
  /**
   * The accounting integration merge link id
   * Validations:
   * - acounting_integration_merge_link_id must be greater than 0
   * @format uint64
   */
  acountingIntegrationMergeLinkId: string;
  /**
   * The user id
   * Validations:
   * - user_id must be greater than 0
   * @format uint64
   */
  userId: string;
}

export interface ReadBusinessChartOfAccountsResponse {
  /** the chart of accounts */
  chartOfAccounts?: Array<BusinessChartOfAccount>;
}

export type ReadCashFlowStatementsData = any;

export interface ReadCashFlowStatementsRequest {
  /**
   * The accounting integration merge link id
   * Validations:
   * - acounting_integration_merge_link_id must be greater than 0
   * @format uint64
   */
  acountingIntegrationMergeLinkId: string;
  /**
   * The end date
   * Validations:
   * - end_date must be a valid date
   * @format date-time
   */
  endDate: string;
  /**
   * The page number
   * @format int32
   */
  pageNumber: number;
  /**
   * The page size
   * @format int32
   */
  pageSize: number;
  /**
   * The start date
   * Validations:
   * - start_date must be a valid date
   * @format date-time
   */
  startDate: string;
  /**
   * The user id
   * Validations:
   * - user_id must be greater than 0
   * @format uint64
   */
  userId: string;
}

export interface ReadCashFlowStatementsResponse {
  /** the cashflow sheets */
  cashFlowStatements?: Array<CashFlowStatement>;
  /**
   * the pagination token
   * @format int32
   */
  nextPage?: number;
}

export type ReadIncomeStatementsData = any;

export interface ReadIncomeStatementsRequest {
  /**
   * The accounting integration merge link id
   * Validations:
   * - acounting_integration_merge_link_id must be greater than 0
   * @format uint64
   */
  acountingIntegrationMergeLinkId: string;
  /**
   * The end date
   * Validations:
   * - end_date must be a valid date
   * @format date-time
   */
  endDate: string;
  /**
   * The page number
   * @format int32
   */
  pageNumber: number;
  /**
   * The page size
   * @format int32
   */
  pageSize: number;
  /**
   * The start date
   * Validations:
   * - start_date must be a valid date
   * @format date-time
   */
  startDate: string;
  /**
   * The user id
   * Validations:
   * - user_id must be greater than 0
   * @format uint64
   */
  userId: string;
}

export interface ReadIncomeStatementsResponse {
  /** the cashflow sheets */
  incomeStatements?: Array<IncomeStatement>;
  /**
   * the pagination token
   * @format int32
   */
  nextPage?: number;
}

export type ReadinessCheckData = any;

/** Defines a message named ReadynessCheckResponse. */
export interface ReadynessCheckResponse {
  /** whether the service is ready to receive traffic */
  healthy?: boolean;
}

/**
 * The ReportItem object is used to represent a report item for a Balance Sheet,
 * Cash Flow Statement or Profit and Loss Report.
 */
export interface ReportItem {
  /** The company the report item belongs to. may not necessarily be the company name but a reference instead */
  company?: string;
  /** @format uint64 */
  id?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * Consider using google.protobuf.Timestamp
   * @format date-time
   */
  modifiedAt?: string;
  /** The report item's name. */
  name?: string;
  /** the id as stored in the third-party system */
  remoteId?: string;
  /**
   * The report item's value.
   * @format int64
   */
  value?: string;
}

export interface Status {
  /** @format int32 */
  code?: number;
  details?: Array<Any>;
  message?: string;
}

/** The Tax object is used to represent an array of the tax deductions for a given employee's payroll run. */
export interface Tax {
  /**
   * The tax amount.
   * @format double
   */
  amount?: number;
  /** @format date-time */
  createdAt?: string;
  /** Whether or not the employer is responsible for paying the tax. */
  employerTax?: boolean;
  /**
   * id
   * @format uint64
   */
  id?: string;
  /** This is the record id as seen on the merge platform */
  mergeAccountId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The tax's name. */
  name?: string;
  /** The payroll being run. */
  payrollRunMergeAccountId?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  remoteWasDeleted?: boolean;
}

/** The TaxRate object is used to represent a tax rate. */
export interface TaxRate {
  /** The company the tax rate belongs to. */
  company?: string;
  /** @format date-time */
  createdAt?: string;
  /** The tax rate's description. */
  description?: string;
  /**
   * The tax rate's effective tax rate.
   * @format double
   */
  effectiveTaxRate?: number;
  /** @format uint64 */
  id?: string;
  mergeRecordId?: string;
  /**
   * This is the datetime that this object was last updated by Merge
   * @format date-time
   */
  modifiedAt?: string;
  /** The third-party API ID of the matching object. */
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
  /**
   * The tax rate's total tax rate.
   * @format double
   */
  totalTaxRate?: number;
}

/** The TransactionLineItem object is used to represent a transaction's line items. */
export interface TransactionLineItem {
  /** The line item's account. */
  account?: string;
  /** The company the line belongs to. */
  company?: string;
  /** @format date-time */
  createdAt?: string;
  /** The line item's currency */
  currency?: string;
  /**
   * The line item's exchange rate.
   *
   * Assuming string, but might be better as float or double.
   */
  exchangeRate?: string;
  /** @format uint64 */
  id?: string;
  item?: string;
  /** An internal note used by the business to clarify purpose of the transaction. */
  memo?: string;
  /** @format date-time */
  modifiedAt?: string;
  /** The line item's quantity. */
  quantity?: string;
  remoteId?: string;
  /** Indicates whether or not this object has been deleted in the third party platform. */
  remoteWasDeleted?: boolean;
  /** The line item's tax rate. */
  taxRate?: string;
  /** The line item's total. */
  totalLineAmount?: string;
  trackingCategories?: Array<string>;
  /** The line's associated tracking category. */
  trackingCategory?: string;
  /** The line item's unit price. */
  unitPrice?: string;
}

/** Defines a message named UpdateAccountingProfileRequest. */
export interface UpdateAccountingProfileRequest {
  /**
   * business accounting profile to update
   * A field named "profile" of type BusinessPayrollProfile.
   */
  profile?: MergeBusinessProfile;
}

/** Defines a message named UpdateAccountingProfileResponse. */
export interface UpdateAccountingProfileResponse {
  /** A field named "profile" of type BusinessPayrollProfile with field number 1. */
  profile?: MergeBusinessProfile;
}

export type UpdatePayrollProfileData = any;

/**
 * The VendorCredit object represents an accounts receivable transaction indicating that a customer is owed a gift or refund.
 * It includes details such as the amount of credit, the vendor responsible,
 * the associated account, and other relevant information.
 */
export interface VendorCredit {
  /** Accounting period for the transaction */
  accountingPeriod?: string;
  /** Identifier or name of the associated company */
  company?: string;
  /** Currency code for the transaction (e.g., USD, EUR) */
  currency?: string;
  /** Exchange rate used for currency conversion, represented as a string for precision */
  exchangeRate?: string;
  /**
   * Unique identifier for the VendorCredit
   * @format uint64
   */
  id?: string;
  /** Line items associated with the vendor credit */
  lines?: Array<VendorCreditLine>;
  /** Unique identifier for the Merge account */
  mergeRecordId?: string;
  /**
   * Timestamp of the last modification
   * @format date-time
   */
  modifiedAt?: string;
  /** Transaction number or reference identifier */
  number?: string;
  /** Identifier for the VendorCredit in the remote system */
  remoteId?: string;
  /** Flag indicating if the VendorCredit was deleted in the remote system */
  remoteWasDeleted?: boolean;
  /**
   * Total amount of credit owed
   * @format double
   */
  totalAmount?: number;
  /** Tracking categories for accounting purposes */
  trackingCategories?: Array<string>;
  /**
   * Date of the transaction
   * @format date-time
   */
  transactionDate?: string;
  /** Name or identifier of the vendor */
  vendor?: string;
}

/** The VendorCreditLine object represents individual line items in a VendorCredit transaction, detailing specific elements of the credit. */
export interface VendorCreditLine {
  /** Account associated with the line item */
  account?: string;
  /** Identifier or name of the associated company */
  company?: string;
  /** Description of the line item */
  description?: string;
  /** Exchange rate used for currency conversion, potentially as a float or double for precision */
  exchangeRate?: string;
  /**
   * Unique identifier for the VendorCreditLine
   * @format uint64
   */
  id?: string;
  /**
   * Timestamp of the last modification to the line item
   * @format date-time
   */
  modifiedAt?: string;
  /**
   * Net amount for the line item
   * @format double
   */
  netAmount?: number;
  /** Identifier for the VendorCreditLine in the remote system */
  remoteId?: string;
  /** Multiple tracking categories for detailed accounting */
  trackingCategories?: Array<string>;
  /** Single tracking category for this line item */
  trackingCategory?: string;
}
