{"version":3,"file":"HistoricalAccountBalanceChart-2df4fd0a.js","sources":["../../node_modules/lucide-react/dist/esm/icons/bar-chart.js","../../src/lib-utils/StatisticalTests.tsx","../../src/components/HistoricalAccountBalanceChart/HistoricalAccountBalanceChart.tsx"],"sourcesContent":["/**\n * lucide-react v0.268.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst BarChart = createLucideIcon(\"BarChart\", [\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"20\", y2: \"10\", key: \"1vz5eb\" }],\n  [\"line\", { x1: \"18\", x2: \"18\", y1: \"20\", y2: \"4\", key: \"cun8e5\" }],\n  [\"line\", { x1: \"6\", x2: \"6\", y1: \"20\", y2: \"16\", key: \"hq0ia6\" }]\n]);\n\nexport { BarChart as default };\n//# sourceMappingURL=bar-chart.js.map\n","import { AccountBalanceHistory } from 'src/types';\n\nclass StatisticalTests {\n  // 1. Mean Test: Calculates the average balance.\n  static mean(data: AccountBalanceHistory[]): number {\n    const sum = data.reduce((acc, record) => acc + record.balance, 0);\n    return sum / data.length;\n  }\n\n  // 2. Variance Test: Calculates the variance of balances.\n  static variance(data: AccountBalanceHistory[]): number {\n    const avg = this.mean(data);\n    const sumOfSquares = data.reduce(\n      (acc, record) => acc + Math.pow(record.balance - avg, 2),\n      0,\n    );\n    return sumOfSquares / data.length;\n  }\n\n  // 3. Standard Deviation Test: Computes the standard deviation of balances.\n  static standardDeviation(data: AccountBalanceHistory[]): number {\n    return Math.sqrt(this.variance(data));\n  }\n\n  // 4. Kurtosis Test: Evaluates the \"tailedness\" of the balance distribution.\n  static kurtosis(data: AccountBalanceHistory[]): number {\n    const n = data.length;\n    const avg = this.mean(data);\n    const stdDev = this.standardDeviation(data);\n    const sumOfFourthPowers = data.reduce(\n      (acc, record) => acc + Math.pow((record.balance - avg) / stdDev, 4),\n      0,\n    );\n    return (\n      (n * (n + 1) * sumOfFourthPowers - 3 * (n - 1) * (n - 1)) /\n      ((n - 1) * (n - 2) * (n - 3))\n    );\n  }\n\n  // 5. Skewness Test: Measures the asymmetry of the balance distribution.\n  static skewness(data: AccountBalanceHistory[]): number {\n    const n = data.length;\n    const avg = this.mean(data);\n    const stdDev = this.standardDeviation(data);\n    const sumOfCubedDeviations = data.reduce(\n      (acc, record) => acc + Math.pow(record.balance - avg, 3),\n      0,\n    );\n    return (\n      (n * sumOfCubedDeviations) / ((n - 1) * (n - 2) * Math.pow(stdDev, 3))\n    );\n  }\n}\n\nexport { StatisticalTests };\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport * as React from 'react';\nimport { createContext, ReactNode, RefObject, Component } from 'react';\nimport { AccountBalanceHistory } from 'src/types';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '../ui/card';\nimport { cn } from 'src/lib-utils/utils';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\nimport { StatisticalTests } from 'src/lib-utils/StatisticalTests';\nimport { AreaChart } from '@tremor/react';\nimport { BarChart } from 'lucide-react';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n/** @type {React.Context<string>} */\n/**\n * Context to provide account balance history for child components.\n * Primarily created to establish a shared context if required by any child components.\n * Defaulted to an empty array.\n */\nconst HistoricalAccountBalanceChartContext = createContext<\n  AccountBalanceHistory[]\n>([]);\n\n/**\n * Props for the `HistoricalAccountBalanceChart` component.\n *\n * @template T A type that extends `AccountBalanceHistory`, allowing for potential extensions to the base type in the future.\n *\n * @property {T[]} historicalAccountBalance - Array of account balance history to be charted.\n * @property {string} [className] - Optional CSS class to style the component.\n */\nexport type HistoricalAccountBalanceChartProps<\n  T extends AccountBalanceHistory,\n> = {\n  historicalAccountBalance: T[];\n  className?: string;\n  disableLabel?: boolean;\n};\n\n/**\n * State for the `HistoricalAccountBalanceChart` component.\n *\n * @property {number} counter - A sample state property, likely used for internal component operations.\n */\nexport type HistoricalAccountBalanceChartState = {\n  counter: number;\n};\n\n/**\n * The `HistoricalAccountBalanceChart` class component visualizes the history of account balances over time.\n * It leverages the `recharts` library to plot the balances and is built with extensibility in mind, using\n * generics for its props to allow potential custom extensions of the `AccountBalanceHistory` type.\n *\n * Features:\n * - Visualizes the account balance history using a line chart.\n * - Allows for potential customization of data types via TypeScript generics.\n * - Provides a context for potential child components to access the account balance history.\n * - Can be styled further through its `className` prop.\n *\n * @remarks\n * The component contains a sample state property named `counter` and methods associated with it.\n * Its actual use-case within the component should be clarified further.\n *\n * @example Basic Usage:\n * ```tsx\n * import { HistoricalAccountBalanceChart } from './path-to-component';\n *\n * const sampleHistory = [ ... ]; // Sample data here\n *\n * function App() {\n *   return (\n *     <HistoricalAccountBalanceChart historicalAccountBalance={sampleHistory} />\n *   );\n * }\n * ```\n *\n * @example Styling the component:\n * ```tsx\n * <HistoricalAccountBalanceChart className=\"border rounded-md\" historicalAccountBalance={sampleHistory} />\n * ```\n */\nexport class HistoricalAccountBalanceChart<\n  T extends AccountBalanceHistory,\n> extends Component<\n  HistoricalAccountBalanceChartProps<T>,\n  HistoricalAccountBalanceChartState\n> {\n  private myRef: RefObject<HTMLDivElement>;\n\n  static defaultProps = {\n    className: '',\n    historicalAccountBalance: [],\n    disableLabel: false,\n  };\n\n  constructor(props: HistoricalAccountBalanceChartProps<T>) {\n    super(props);\n    this.state = {\n      counter: 0,\n    };\n\n    this.myRef = React.createRef();\n    this.averageBalance = this.averageBalance.bind(this);\n    this.totalAccumulation = this.totalAccumulation.bind(this);\n    this.maxBalance = this.maxBalance.bind(this);\n    this.minBalance = this.minBalance.bind(this);\n    this.movingAverage = this.movingAverage.bind(this);\n  }\n\n  /** Lifecycle method when the component is about to mount. */\n  componentWillMount() {\n    // Deprecated lifecycle, use with caution!\n  }\n\n  /**\n   * Lifecycle method that runs after the component has been mounted.\n   */\n  componentDidMount() {\n    // You can use the ref here, for example:\n    if (this.myRef.current) {\n      this.myRef.current.focus();\n    }\n  }\n\n  private averageBalance(data: AccountBalanceHistory[]): number {\n    if (data.length === 0) return 0;\n    return this.totalAccumulation(data) / data.length;\n  }\n\n  private totalAccumulation(data: AccountBalanceHistory[]): number {\n    return data.reduce((accum, record) => accum + record.balance, 0);\n  }\n\n  private maxBalance(data: AccountBalanceHistory[]): number {\n    return Math.max(...data.map((record) => record.balance));\n  }\n\n  private minBalance(data: AccountBalanceHistory[]): number {\n    return Math.min(...data.map((record) => record.balance));\n  }\n\n  /**\n   * Computes the moving average of account balances.\n   * @param data The data containing the account balance histories.\n   * @param windowSize The window size for the moving average.\n   * @returns An array of moving averages for the given window size.\n   */\n  private movingAverage(\n    data: AccountBalanceHistory[],\n    windowSize: number,\n  ): number[] {\n    const result = [];\n\n    for (let i = 0; i <= data.length - windowSize; i++) {\n      let sum = 0;\n      for (let j = 0; j < windowSize; j++) {\n        sum += data[i + j].balance;\n      }\n      result.push(sum / windowSize);\n    }\n\n    return result;\n  }\n\n  /**\n   * Renders the component.\n   * @returns {ReactNode}\n   */\n  render(): ReactNode {\n    const { historicalAccountBalance, className, disableLabel } = this.props;\n\n    if (\n      historicalAccountBalance === null ||\n      historicalAccountBalance.length === 0\n    ) {\n      return null;\n    }\n\n    return (\n      <HistoricalAccountBalanceChartContext.Provider\n        value={historicalAccountBalance}\n      >\n        <Tabs defaultValue=\"overview\" className={cn('w-full', className)}>\n          <TabsList className=\"grid w-full grid-cols-2 font-bold\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"statistics\">Trends</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"overview\">\n            <div className=\"flex flex-row justify-between gap-2 px-2\"></div>\n            <AccountBalanceChart\n              data={historicalAccountBalance}\n              title=\"Account Balance Through Time\"\n              description=\"This chart shows the account balance over time.\"\n              disableLabels={disableLabel}\n            />\n          </TabsContent>\n          <TabsContent value=\"statistics\">\n            <div className=\"grid grid-cols-2 justify-between gap-2 px-2\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-bold\">Metrics</CardTitle>\n                  <BarChart className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {this.averageBalance(historicalAccountBalance).toFixed(2)}\n                    <span className=\"text-xs\"> average </span>\n                  </div>\n                  <div className=\"grid grid-cols-2\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {this.maxBalance(historicalAccountBalance).toFixed(0)}{' '}\n                        <span className=\"text-xs\"> max </span>\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {this.minBalance(historicalAccountBalance).toFixed(0)}{' '}\n                        <span className=\"text-xs\"> min </span>\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-bold\">\n                    Statistics\n                  </CardTitle>\n                  <BarChart className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {StatisticalTests.kurtosis(\n                      historicalAccountBalance,\n                    ).toFixed(2)}\n                    <span className=\"text-xs\"> kurtosis </span>\n                  </div>\n                  <div className=\"grid grid-cols-2\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {StatisticalTests.standardDeviation(\n                          historicalAccountBalance,\n                        ).toFixed(0)}{' '}\n                        <span className=\"text-xs\"> std </span>\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {StatisticalTests.skewness(\n                          historicalAccountBalance,\n                        ).toFixed(0)}{' '}\n                        <span className=\"text-xs\"> skew </span>\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </HistoricalAccountBalanceChartContext.Provider>\n    );\n  }\n}\n\nconst AccountBalanceChart: React.FC<{\n  data: AccountBalanceHistory[];\n  className?: string;\n  title: string;\n  description: string;\n  disableLabels?: boolean;\n}> = ({ data, className, title, description }) => {\n  type ConvertedAccountHistory = {\n    date: string;\n    'Account Balance': number;\n  };\n\n  function convertAccountHistoryArray(\n    data: AccountBalanceHistory[],\n  ): ConvertedAccountHistory[] {\n    return data.map((item) => {\n      return {\n        date: item.time ? item.time.toISOString() : '',\n        'Account Balance': item.balance,\n      };\n    });\n  }\n\n  const convertedData = convertAccountHistoryArray(data);\n\n  return (\n    <Card className={cn('m-2', className)}>\n      <CardHeader>\n        <CardTitle className=\"text-lg font bold\">{title}</CardTitle>\n        <CardDescription>{description}</CardDescription>\n      </CardHeader>\n      <CardContent className=\"p-3\">\n        <Card className=\"text-black\">\n          <AreaChart\n            className=\"mt-6 w-full h-[400px]\"\n            data={convertedData}\n            index=\"balance\"\n            valueFormatter={(number: number) =>\n              `$${Intl.NumberFormat('us').format(number).toString()}`\n            }\n            categories={['Account Balance']}\n            colors={['slate']}\n            showXAxis={true}\n            showGridLines={false}\n            startEndOnly={true}\n            showYAxis={false}\n            showLegend={true}\n          />\n        </Card>\n      </CardContent>\n    </Card>\n  );\n};\n\n/*\n(Things we should support as part of our historical account balance)\nTrend Analysis: Understand the underlying direction in which the data is moving. Is it increasing, decreasing, or remaining stable over time?\n\nSeasonality: Determine if there are recurring patterns or cycles in the data. For instance, retailers often see higher sales around holidays, or energy consumption might be higher in the winter.\n\nAnomaly Detection: Identify unexpected or unusual patterns in the data. These can be due to genuine fluctuations or might indicate errors or fraud.\n\nForecasting: Predict future values based on historical data. Various models, including ARIMA, Exponential Smoothing, and Prophet, can be used for this purpose.\n\nMoving Averages: Smooth out short-term fluctuations to see the longer-term trend. This can be done using simple moving averages, weighted moving averages, or exponential moving averages.\n\nVolatility: Measure the variation in the data over time. High volatility indicates that the value can potentially be spread out over a larger range of values.\n\nFrequency Domain Analysis: Understand the periodic components of the time series using techniques like Fast Fourier Transform (FFT).\n\nAutocorrelation and Partial Autocorrelation: Measure the relationship between a time series and a lagged version of itself. This is often used in ARIMA modeling to determine the parameters.\n\nDecomposition: Break down a time series into its constituent components of trend, seasonality, and residuals.\n\nGrowth Rate: Measure how much a series has grown over a specified period, often expressed as a percentage.\n\nCumulative Sum: Calculate the cumulative total of the data points over time.\n\nMomentum: Calculate the rate of acceleration of a time series, often used in financial contexts.\n\nBollinger Bands: A technique used in finance to understand the volatility and identify 'overbought' or 'oversold' conditions.\n\nStatistical Tests: Tests like the Augmented Dickey-Fuller or KPSS test to check for stationarity in the data.\n\nRolling Metrics: Metrics like rolling standard deviation or rolling variance, which are computed over a specific window that 'rolls' over the time series.\n\nLag Analysis: Analyze the relationship between lagged variables to understand delayed effects.\n*/\n"],"names":["BarChart","createLucideIcon","StatisticalTests","data","acc","record","avg","n","stdDev","sumOfFourthPowers","sumOfCubedDeviations","HistoricalAccountBalanceChartContext","createContext","HistoricalAccountBalanceChart","Component","props","__publicField","React.createRef","accum","windowSize","result","i","sum","j","historicalAccountBalance","className","disableLabel","jsx","jsxs","Tabs","cn","TabsList","TabsTrigger","TabsContent","AccountBalanceChart","Card","CardHeader","CardTitle","CardContent","title","description","convertAccountHistoryArray","data2","item","convertedData","CardDescription","AreaChart","number"],"mappings":"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","x_google_ignoreList":[0]}