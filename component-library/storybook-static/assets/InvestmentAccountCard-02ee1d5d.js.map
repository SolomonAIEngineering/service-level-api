{"version":3,"file":"InvestmentAccountCard-02ee1d5d.js","sources":["../../src/types/financial/investment-account.tsx","../../src/components/InvestmentAccountCard/InvestmentAccountCard.tsx"],"sourcesContent":["import {\n  getRandomNumber,\n  getRandomString,\n  getRandomBalance,\n} from 'src/lib-utils/utils';\nimport { InvesmentHolding } from './investment-holding';\nimport { InvestmentSecurity } from './investment-security';\n\nexport interface IInvestmentAccount {\n  /** id */\n  id: number;\n  /** the user id to which this bank account is tied to */\n  userId: number;\n  /** the account name */\n  name: string;\n  /** the bank account number */\n  number: string;\n  /** the bank account type */\n  type: string;\n  /** the bank account balance */\n  balance: number;\n  currentFunds: number;\n  balanceLimit: number;\n  /** plaid account id mapped to this bank account */\n  plaidAccountId: string;\n  /** accoint subtype */\n  subtype: string;\n  /** invesment holding is the set of securities this account witholds */\n  holdings: InvesmentHolding[];\n  /** the set of securities this account witholds */\n  securities: InvestmentSecurity[];\n}\n\n/*\n * InvestmentAccount represents the InvestmentAccount entity.\n *\n * @export\n * @class InvestmentAccount\n * @implements {IInvestmentAccount}\n * */\nexport class InvestmentAccount implements IInvestmentAccount {\n  /** id */\n  id = 0;\n  /** the user id to which this bank account is tied to */\n  userId = 0;\n  /** the account name */\n  name = '';\n  /** the bank account number */\n  number = '';\n  /** the bank account type */\n  type = '';\n  /** the bank account balance */\n  balance = 0;\n  currentFunds = 0;\n  balanceLimit = 0;\n  /** plaid account id mapped to this bank account */\n  plaidAccountId = '';\n  /** accoint subtype */\n  subtype = '';\n  /** invesment holding is the set of securities this account witholds */\n  holdings: InvesmentHolding[] = [];\n  /** the set of securities this account witholds */\n  securities: InvestmentSecurity[] = [];\n\n  constructor(data: Partial<InvestmentAccount>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  static randomInstance(): InvestmentAccount {\n    return new InvestmentAccount({\n      id: getRandomNumber(1, 100),\n      userId: getRandomNumber(1, 100),\n      name: getRandomString(10),\n      number: getRandomString(10),\n      type: getRandomString(10),\n      balance: getRandomBalance(),\n      currentFunds: getRandomBalance(),\n      balanceLimit: getRandomBalance(),\n      plaidAccountId: getRandomString(10),\n      subtype: getRandomString(10),\n      holdings: Array.from({ length: 20 }, () =>\n        InvesmentHolding.randomInstance(),\n      ),\n      securities: Array.from({ length: 20 }, () =>\n        InvestmentSecurity.randomInstance(),\n      ),\n    });\n  }\n}\n","import * as React from 'react';\nimport { createContext, ReactNode, RefObject, Component } from 'react';\nimport { cn } from 'src/lib-utils/utils';\nimport { AccountBalanceHistory, InvestmentAccount } from 'src/types';\nimport { Card, CardHeader, CardContent, CardFooter } from '../ui/card';\nimport { HistoricalAccountBalanceChart } from '../HistoricalAccountBalanceChart';\nimport { Badge } from '../ui/badge';\nimport { HoverCard, HoverCardTrigger } from '@radix-ui/react-hover-card';\nimport { HoverCardContent } from '../ui/hover-card';\nimport { InvestmentHoldingCard } from '../InvestmentHoldingCard';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\nimport { InvestmentSecurityCard } from '../InvestmentSecurityCard';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n/** @type {React.Context<InvestmentAccount>} */\nconst InvestmentAccountCardContext = createContext<InvestmentAccount>(\n  new InvestmentAccount({}),\n);\n\nexport type InvestmentAccountCardProps = {\n  investmentAccount: InvestmentAccount;\n  historicalAccountBalance?: AccountBalanceHistory[];\n  enableDemoMode?: boolean;\n  className?: string;\n};\n\nexport type InvestmentAccountCardState = {\n  investmentAccount: InvestmentAccount;\n};\n\n/**\n * @class InvestmentAccountCard\n * @extends {Component<InvestmentAccountCardProps, InvestmentAccountCardState>}\n *\n * @description\n * This is a templated advanced React class component written in TypeScript\n * with TSDoc annotations. It has various features like context usage,\n * dynamic styles, generic props, and more.\n */\nexport class InvestmentAccountCard extends Component<\n  InvestmentAccountCardProps,\n  InvestmentAccountCardState\n> {\n  private myRef: RefObject<HTMLDivElement>;\n\n  static defaultProps = {\n    InvestmentAccount: new InvestmentAccount({}),\n    historicalAccountBalance: [],\n  };\n\n  constructor(props: InvestmentAccountCardProps) {\n    super(props);\n    this.state = {\n      investmentAccount: props.investmentAccount,\n    };\n\n    this.myRef = React.createRef();\n  }\n\n  /** Lifecycle method when the component is about to mount. */\n  componentWillMount() {\n    // Deprecated lifecycle, use with caution!\n  }\n\n  /**\n   * Lifecycle method that runs after the component has been mounted.\n   */\n  componentDidMount() {\n    // You can use the ref here, for example:\n    if (this.myRef.current) {\n      this.myRef.current.focus();\n    }\n  }\n\n  /**\n   * Renders the component.\n   * @returns {ReactNode}\n   */\n  render(): ReactNode {\n    const { className, enableDemoMode, historicalAccountBalance } = this.props;\n    const investmentAccount = enableDemoMode\n      ? InvestmentAccount.randomInstance()\n      : this.state.investmentAccount;\n\n    return (\n      <InvestmentAccountCardContext.Provider value={investmentAccount}>\n        <Card\n          className={cn(\n            'flex flex-col bg-white rounded-lg shadow-lg overflow-hidden min-h-[400px] rounded-t-2xl rounded-b-2xl gap-3',\n            className,\n          )}\n        >\n          <CardHeader className=\"flex-1 px-6 py-8 flex flex-col\">\n            <HoverCard>\n              <p className=\"font-bold text-lg\">\n                <HoverCardTrigger>\n                  {investmentAccount.name.toUpperCase()}\n                </HoverCardTrigger>\n                <span\n                  className=\"ml-1 text-xs\"\n                  style={{\n                    fontSize: '10px',\n                  }}\n                >\n                  {' '}\n                  {investmentAccount.number}\n                </span>\n              </p>\n              <HoverCardContent className=\"w-fit rounded-2xl\">\n                <InvestmentHoldingCard\n                  holdings={investmentAccount.holdings}\n                  className=\"border-none shadow-none\"\n                />\n              </HoverCardContent>\n            </HoverCard>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n              <Badge className=\"bg-black font-bold text-white py-3 rounded-lg\">\n                {investmentAccount.holdings.length} Holdings\n              </Badge>\n              <Badge className=\"bg-black flex flex-col justify-start items-start text-white font-bold  border-gray-300 py-3 rounded-lg\">\n                <span>{investmentAccount.type} </span>\n                <span\n                  className=\"text-xs\"\n                  style={{\n                    fontSize: '10px',\n                  }}\n                >\n                  account type\n                </span>\n              </Badge>\n              <Badge className=\"bg-black flex flex-col justify-start items-start text-white font-bold  border-gray-300 py-3 rounded-lg\">\n                <span>{investmentAccount.subtype} </span>\n                <span\n                  className=\"text-xs\"\n                  style={{\n                    fontSize: '10px',\n                  }}\n                >\n                  account sub type\n                </span>\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Tabs\n              defaultValue={\n                historicalAccountBalance && historicalAccountBalance.length > 0\n                  ? 'accountBalance'\n                  : 'holdings'\n              }\n              className=\"w-fit\"\n            >\n              <TabsList className=\"grid w-full grid-cols-2 font-bold\">\n                {historicalAccountBalance &&\n                  historicalAccountBalance.length > 0 && (\n                    <TabsTrigger value=\"accountBalance\">\n                      Account Balance\n                    </TabsTrigger>\n                  )}\n                <TabsTrigger value=\"holdings\">Holdings</TabsTrigger>\n              </TabsList>\n              {historicalAccountBalance &&\n                historicalAccountBalance.length > 0 && (\n                  <TabsContent value=\"accountBalance\">\n                    <HistoricalAccountBalanceChart\n                      historicalAccountBalance={historicalAccountBalance}\n                      disableLabel={true}\n                      className=\"py-3\"\n                    />\n                  </TabsContent>\n                )}\n              <TabsContent value=\"holdings\" className=\"py-3\">\n                <InvestmentHoldingCard\n                  holdings={investmentAccount.holdings}\n                  historicalAccountBalance={historicalAccountBalance}\n                />\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex flex-col gap-2\">\n              <div className=\"flex flex-row justify-between pt-3 md:pt-6\">\n                <p className=\"font-bold text-lg\">Total Value</p>\n                <p className=\"font-bold text-4xl\">\n                  ${investmentAccount.currentFunds.toFixed(2)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter>\n            <div className=\"pb-3 px-3\">\n              <HoverCard>\n                <HoverCardTrigger>View Securities</HoverCardTrigger>\n                <HoverCardContent className=\"w-fit rounded-2xl\">\n                  <div className=\"flex flex-col h-48 w-48 md:h-64 md:w-64 lg:h-96 lg:w-96 xl:h-[500px] xl:w-[500px] 2xl:h-[600px] 2xl:w-[600px] overflow-scroll gap-2\">\n                    <p className=\"flex items-center text-lg font-bold\">\n                      Account {investmentAccount.name} Currently Holds{' '}\n                      {investmentAccount.securities.length} Securities\n                    </p>\n                    {investmentAccount.securities.map((security) => (\n                      <InvestmentSecurityCard security={security} />\n                    ))}\n                  </div>\n                </HoverCardContent>\n              </HoverCard>\n            </div>\n          </CardFooter>\n        </Card>\n      </InvestmentAccountCardContext.Provider>\n    );\n  }\n}\n"],"names":["InvestmentAccount","data","__publicField","getRandomNumber","getRandomString","getRandomBalance","InvesmentHolding","InvestmentSecurity","InvestmentAccountCardContext","createContext","InvestmentAccountCard","Component","props","React.createRef","className","enableDemoMode","historicalAccountBalance","investmentAccount","jsx","jsxs","Card","cn","CardHeader","HoverCard","HoverCardTrigger","HoverCardContent","InvestmentHoldingCard","Badge","CardContent","Tabs","TabsList","TabsTrigger","TabsContent","HistoricalAccountBalanceChart","CardFooter","security","InvestmentSecurityCard"],"mappings":"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"}