{"version":3,"file":"CreditAccountCard-0271c8e1.js","sources":["../../src/types/financial/apr.tsx","../../src/types/financial/credit-account.tsx","../../node_modules/@radix-ui/react-label/dist/index.mjs","../../src/components/ui/label.tsx","../../node_modules/lucide-react/dist/esm/icons/wallet-2.js","../../src/components/CreditAccountCard/CreditAccountCard.tsx"],"sourcesContent":["/**\n * Represents an Annual Percentage Rate (APR) information.\n */\nexport interface IApr {\n  /**\n   * The unique identifier for the APR.\n   */\n  id: number;\n\n  /**\n   * The percentage value of the APR.\n   */\n  percentage: number;\n\n  /**\n   * The type or category of the APR.\n   */\n  type: string;\n\n  /**\n   * The balance subject to the APR.\n   */\n  balanceSubjectToApr: number;\n\n  /**\n   * The amount of interest charged based on the APR.\n   */\n  interestChargeAmount: number;\n}\n\n/*\n * This class represents the Apr entity.\n *\n * @export\n * @class Apr\n * @implements {IApr}\n * */\nexport class Apr implements IApr {\n  id = 0;\n  percentage = 0;\n  type = '';\n  balanceSubjectToApr = 0;\n  interestChargeAmount = 0;\n\n  constructor(data: Partial<Apr>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  static randomInstance(): Apr {\n    return new Apr({\n      id: Math.floor(Math.random() * 100),\n      percentage: Math.floor(Math.random() * 100),\n      type: 'random type',\n      balanceSubjectToApr: Math.floor(Math.random() * 100),\n      interestChargeAmount: Math.floor(Math.random() * 100),\n    });\n  }\n}\n","import {\n  getRandomArrayItem,\n  getRandomNumber,\n  getRandomString,\n} from 'src/lib-utils/utils';\nimport { Apr } from './apr';\nimport { BankAccountType } from '.';\n\nexport interface ICreditAccount {\n  /** id */\n  id: number;\n  /** the user id to which this bank account is tied to */\n  userId: number;\n  /** the account name */\n  name: string;\n  /** the bank account number */\n  number: string;\n  /** the bank account type */\n  type: string;\n  /** the bank account balance */\n  balance: number;\n  /** current funds on the account */\n  currentFunds: number;\n  /** balance limit */\n  balanceLimit: number;\n  /** plaid account id mapped to this bank account */\n  plaidAccountId: string;\n  /** accoint subtype */\n  subtype: string;\n  /** wether the account is overdue */\n  isOverdue: boolean;\n  /** the last payment amount */\n  lastPaymentAmount: number;\n  /** the last payment date */\n  lastPaymentDate: string;\n  /** the last statement issue date */\n  lastStatementIssueDate: string;\n  /** the minimum amount due date */\n  minimumAmountDueDate: number;\n  /** the next payment date */\n  nextPaymentDate: string;\n  /** the aprs */\n  aprs: Apr[];\n  /** the last statement balance */\n  lastStatementBalance: number;\n  /** the minimum payment amount */\n  minimumPaymentAmount: number;\n  /** the next payment due date */\n  nextPaymentDueDate: string;\n}\n\n/*\n * CreditAccount represents the CreditAccount entity.\n *\n * @export\n * @class CreditAccount\n * @implements {ICreditAccount}\n * */\nexport class CreditAccount implements ICreditAccount {\n  /** id */\n  id = 0;\n  /** the user id to which this bank account is tied to */\n  userId = 0;\n  /** the account name */\n  name = '';\n  /** the bank account number */\n  number = '';\n  /** the bank account type */\n  type = '';\n  /** the bank account balance */\n  balance = 0;\n  /** current funds on the account */\n  currentFunds = 0;\n  /** balance limit */\n  balanceLimit = 0;\n  /** plaid account id mapped to this bank account */\n  plaidAccountId = '';\n  /** accoint subtype */\n  subtype = '';\n  /** wether the account is overdue */\n  isOverdue = false;\n  /** the last payment amount */\n  lastPaymentAmount = 0;\n  /** the last payment date */\n  lastPaymentDate = '';\n  /** the last statement issue date */\n  lastStatementIssueDate = '';\n  /** the minimum amount due date */\n  minimumAmountDueDate = 0;\n  /** the next payment date */\n  nextPaymentDate = '';\n  /** the aprs */\n  aprs: Apr[] = [];\n  /** the last statement balance */\n  lastStatementBalance = 0;\n  /** the minimum payment amount */\n  minimumPaymentAmount = 0;\n  /** the next payment due date */\n  nextPaymentDueDate = '';\n\n  constructor(data: Partial<CreditAccount>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  static randomInstance(): CreditAccount {\n    return new CreditAccount({\n      userId: getRandomNumber(1, 10000),\n      name: `Account ${getRandomString(5)}`,\n      number: `xxxx-xxxx-xxxx-${getRandomString(4)}`, // A sample account number format\n      type: getRandomArrayItem(\n        Object.values(BankAccountType).slice(),\n      ).toString(),\n      balance: getRandomNumber(1000, 10000),\n      currentFunds: getRandomNumber(500, 5000),\n      balanceLimit: getRandomNumber(0, 1000),\n      plaidAccountId: getRandomString(10),\n      subtype: `Subtype ${getRandomString(3)}`,\n      isOverdue: Math.random() < 0.5,\n      lastPaymentAmount: getRandomNumber(0, 1000),\n      lastPaymentDate: getRandomString(10),\n      lastStatementIssueDate: getRandomString(10),\n      minimumAmountDueDate: getRandomNumber(0, 1000),\n      nextPaymentDate: getRandomString(10),\n      aprs: Array.from({ length: getRandomNumber(0, 5) }, () =>\n        Apr.randomInstance(),\n      ),\n      lastStatementBalance: getRandomNumber(0, 1000),\n      minimumPaymentAmount: getRandomNumber(0, 1000),\n      nextPaymentDueDate: getRandomString(10),\n    });\n  }\n}\n","import $7V4JZ$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $7V4JZ$forwardRef, createElement as $7V4JZ$createElement} from \"react\";\nimport {Primitive as $7V4JZ$Primitive} from \"@radix-ui/react-primitive\";\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/ const $b73a6c6685e72184$var$NAME = 'Label';\nconst $b73a6c6685e72184$export$b04be29aa201d4f5 = /*#__PURE__*/ $7V4JZ$forwardRef((props, forwardedRef)=>{\n    return /*#__PURE__*/ $7V4JZ$createElement($7V4JZ$Primitive.label, $7V4JZ$babelruntimehelpersesmextends({}, props, {\n        ref: forwardedRef,\n        onMouseDown: (event)=>{\n            var _props$onMouseDown;\n            (_props$onMouseDown = props.onMouseDown) === null || _props$onMouseDown === void 0 || _props$onMouseDown.call(props, event); // prevent text selection when double clicking label\n            if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n        }\n    }));\n});\n/*#__PURE__*/ Object.assign($b73a6c6685e72184$export$b04be29aa201d4f5, {\n    displayName: $b73a6c6685e72184$var$NAME\n});\n/* -----------------------------------------------------------------------------------------------*/ const $b73a6c6685e72184$export$be92b6f5f03c0fe9 = $b73a6c6685e72184$export$b04be29aa201d4f5;\n\n\n\n\nexport {$b73a6c6685e72184$export$b04be29aa201d4f5 as Label, $b73a6c6685e72184$export$be92b6f5f03c0fe9 as Root};\n//# sourceMappingURL=index.mjs.map\n","import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"src/lib-utils/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","/**\n * lucide-react v0.268.0 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Wallet2 = createLucideIcon(\"Wallet2\", [\n  [\"path\", { d: \"M17 14h.01\", key: \"7oqj8z\" }],\n  [\n    \"path\",\n    {\n      d: \"M7 7h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14\",\n      key: \"u1rqew\"\n    }\n  ]\n]);\n\nexport { Wallet2 as default };\n//# sourceMappingURL=wallet-2.js.map\n","import * as React from 'react';\nimport { createContext, ReactNode, RefObject, Component } from 'react';\nimport {\n  AccountBalanceHistory,\n  Apr,\n  CreditAccount,\n  FinancialProfile,\n} from 'src/types';\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '../ui/card';\nimport {\n  cn,\n  formatDate,\n  formatNumber,\n  removeUnderScores,\n} from 'src/lib-utils/utils';\nimport { Badge } from '../ui/badge';\nimport { Label } from '../ui/label';\nimport { RocketIcon, Wallet2Icon } from 'lucide-react';\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from '../ui/hover-card';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '../ui/collapsible';\nimport { Button } from '../ui/button';\nimport { CaretSortIcon } from '@radix-ui/react-icons';\nimport { HistoricalAccountBalanceChart } from '../HistoricalAccountBalanceChart';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n/** @type {React.Context<CreditAccount>} */\nconst CreditAccountCardContext = createContext<CreditAccount>(\n  new CreditAccount({}),\n);\n\nexport type CreditAccountCardProps<CreditAccount> = {\n  creditAccount: CreditAccount;\n  financialProfile: FinancialProfile;\n  institutionName: string;\n  className?: string;\n  contextQuestions?: string[];\n  enableDemoMode?: boolean;\n  children?: ReactNode;\n  historicalAccountBalance?: AccountBalanceHistory[];\n};\n\nexport type CreditAccountCardState<T extends CreditAccount> = {\n  creditAccount: T;\n};\n\n/**\n * @class CreditAccountCard\n * @extends {Component<CreditAccountCardProps, CreditAccountCardState>}\n *\n * @description\n * This is a templated advanced React class component written in TypeScript\n * with TSDoc annotations. It has various features like context usage,\n * dynamic styles, generic props, and more.\n */\nexport class CreditAccountCard<T extends CreditAccount> extends Component<\n  CreditAccountCardProps<T>,\n  CreditAccountCardState<T>\n> {\n  private myRef: RefObject<HTMLDivElement>;\n\n  static defaultProps = {\n    creditAccount: new CreditAccount({}),\n    financialProfile: new FinancialProfile({}),\n    contextQuestions: [\n      \"What is my account's interest rate?\",\n      'What is my minimum payment, and when is it due?',\n      'What is my credit limit?',\n      'How is my credit utilization ratio calculated?',\n    ],\n    enableDemoMode: false,\n    children: null,\n  };\n\n  constructor(props: CreditAccountCardProps<T>) {\n    super(props);\n    this.state = {\n      creditAccount: props.creditAccount,\n    };\n\n    this.myRef = React.createRef();\n  }\n\n  /**\n   * Lifecycle method that runs after the component has been mounted.\n   */\n  componentDidMount() {\n    // You can use the ref here, for example:\n    if (this.myRef.current) {\n      this.myRef.current.focus();\n    }\n  }\n\n  /**\n   * Renders the component.\n   * @returns {ReactNode}\n   */\n  render(): ReactNode {\n    const {\n      className,\n      enableDemoMode,\n      institutionName,\n      historicalAccountBalance,\n    } = this.props;\n    const account = enableDemoMode\n      ? CreditAccount.randomInstance()\n      : this.state.creditAccount;\n\n    return (\n      <CreditAccountCardContext.Provider value={account}>\n        <Card className={cn('p-2', className)}>\n          <CardHeader className=\"flex items-start gap-x-5 space-y-0\">\n            <div className=\"space-y-1\">\n              <CardTitle className=\"text-xs text-gray-600 dark:text-gray-200 font-bold\">\n                ${formatNumber(account.currentFunds, 2)}\n              </CardTitle>\n              <CardTitle\n                className=\"text-xs font-bold\"\n                style={{\n                  fontSize: '11px',\n                }}\n              >\n                <HoverCard>\n                  <HoverCardTrigger>\n                    {' '}\n                    {institutionName} Credit Card\n                  </HoverCardTrigger>\n                  <HoverCardContent className=\"rounded-2xl\">\n                    <CreditAccountMiniCard\n                      creditAccount={account}\n                      institutionName={institutionName}\n                      className=\"border-0 shadow-none\"\n                    />\n                  </HoverCardContent>\n                </HoverCard>\n              </CardTitle>\n              <div>\n                <div className=\"flex flex-1 gap-2 justify-start\">\n                  <Badge\n                    className=\"bg-white border border-black text-black font-bold\"\n                    style={{\n                      fontSize: '8px',\n                    }}\n                  >\n                    {account.type}\n                  </Badge>\n                  <Badge\n                    className=\"bg-white border border-black text-black \"\n                    style={{\n                      fontSize: '8px',\n                    }}\n                  >\n                    Overdue: {account.isOverdue === false ? 'No' : 'Yes'}\n                  </Badge>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex gap-1\">\n                  <span className=\"text-xs text-gray-600 dark:text-gray-200\">\n                    Account Number:{' '}\n                  </span>\n                  <span className=\"text-xs font-bold\">{account.number}</span>\n                </div>\n              </div>\n              <div className=\"flex flex-col gap-1\">\n                <Label className=\"text-2xl font-bold\">\n                  Currently owe: ${formatNumber(account.balance, 2)}\n                </Label>\n                <p\n                  style={{\n                    fontSize: '10px',\n                  }}\n                  className=\"font-bold\"\n                >\n                  Card balance limit ${account.balanceLimit}\n                </p>\n                <p\n                  style={{\n                    fontSize: '10px',\n                  }}\n                  className=\"font-bold\"\n                >\n                  ${formatNumber(account.minimumPaymentAmount, 2)} due on{' '}\n                  {formatDate(account.nextPaymentDueDate)}\n                </p>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"details\" className=\"min-w-[400px]\">\n              <TabsList className=\"py-2 font-bold\">\n                <TabsTrigger value=\"details\">Details</TabsTrigger>\n                {account.aprs.length > 0 && (\n                  <TabsTrigger value=\"apr\">Apr</TabsTrigger>\n                )}\n              </TabsList>\n              <TabsContent value=\"details\">\n                <CreditCardCollapsibleDetails\n                  creditAccount={account}\n                  className=\"py-2\"\n                />\n              </TabsContent>\n              {account.aprs.length > 0 && (\n                <TabsContent value=\"apr\">\n                  <CreditAccountAprs aprs={account.aprs} />\n                </TabsContent>\n              )}\n            </Tabs>\n          </CardContent>\n          <CardFooter>\n            <HistoricalAccountBalanceChart\n              historicalAccountBalance={historicalAccountBalance}\n            />\n          </CardFooter>\n        </Card>\n      </CreditAccountCardContext.Provider>\n    );\n  }\n}\n\nconst CreditAccountAprs: React.FC<{\n  aprs: Apr[];\n}> = (props) => {\n  const { aprs } = props;\n\n  return (\n    <div>\n      <Card className=\"p-3 flex flex-col gap-3 rounded-lg\">\n        <div>\n          <div className=\"flex flex-row gap-2\">\n            <RocketIcon className=\"w-4 h-4\" />\n            <p className=\"text-xs font-bold\"> Card Aprs </p>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {aprs.map((apr, idx) => (\n            <div className=\"flex flex-col\">\n              <div key={idx} className=\"flex flex-row gap-3\">\n                <p className=\"text-xs font-bold\">\n                  {removeUnderScores(apr.type)}\n                </p>\n                <p className=\"text-xs font-bold\">{apr.percentage}%</p>\n              </div>\n              <p className=\"text-xs\">\n                {apr.balanceSubjectToApr}\n                <span className=\"text-xs\"> of balance subject to apr</span>\n              </p>\n            </div>\n          ))}{' '}\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nconst CreditAccountMiniCard: React.FC<{\n  creditAccount: CreditAccount;\n  institutionName: string;\n  className?: string;\n}> = (props) => {\n  const { creditAccount, institutionName, className } = props;\n  return (\n    <Card\n      className={cn(\n        'flex flex-col space-x-1  bg-white text-secondary-foreground rounded-2xl',\n        className,\n      )}\n    >\n      <CardHeader>\n        <div className=\"flex flex-1 justify-between\">\n          <p className=\"font-bold\">{institutionName.toUpperCase()}</p>\n          <div>\n            <Wallet2Icon className=\"w-4 h-4\" />\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col justify-center items-center\">\n          <p className=\"text-xl font-bold\">\n            ${creditAccount.balance}{' '}\n            <span className=\"text-xs\">current balance</span>\n          </p>\n          <p className=\"text-md font-bold\">\n            ${creditAccount.minimumPaymentAmount}\n            <span className=\"ml-2 text-xs\">\n              due on {creditAccount.nextPaymentDueDate}{' '}\n            </span>\n          </p>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <div className=\"flex flex-col justify-end item-end \">\n          <p className=\"text-sm\">{creditAccount.number} </p>\n          <p className=\"text-xs\">Account Number</p>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nconst CreditCardCollapsibleDetails: React.FC<{\n  creditAccount: CreditAccount;\n  className?: string;\n}> = (props) => {\n  const { creditAccount, className } = props;\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <Collapsible\n      open={isOpen}\n      onOpenChange={setIsOpen}\n      className={cn('w-[350px] space-y-2', className)}\n    >\n      <div className=\"flex items-center justify-between space-x-4 px-4\">\n        <h4 className=\"text-sm font-semibold\">{creditAccount.name} details</h4>\n        <CollapsibleTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\">\n            <CaretSortIcon className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Toggle</span>\n          </Button>\n        </CollapsibleTrigger>\n      </div>\n      <div className=\"rounded-md border px-4 py-2 font-mono text-sm shadow-sm\">\n        <div className=\"flex flex-row justify-between items-between\">\n          <p className=\"text-xs\"> Last Payed</p>\n          <p className=\"text-xs\">\n            {' '}\n            {formatDate(creditAccount.lastPaymentDate)}{' '}\n          </p>\n        </div>\n      </div>\n      <CollapsibleContent className=\"space-y-2\">\n        <div className=\"rounded-md border px-4 py-2 font-mono text-sm shadow-sm\">\n          <div className=\"flex flex-row justify-between items-between\">\n            <p className=\"text-xs\"> Last Issued</p>\n            <p className=\"text-xs\">\n              {' '}\n              {formatDate(creditAccount.lastStatementIssueDate)}{' '}\n            </p>\n          </div>\n        </div>\n        <div className=\"rounded-md border px-4 py-2 font-mono text-sm shadow-sm\">\n          <div className=\"flex flex-row justify-between items-between\">\n            <p className=\"text-xs\"> Last Statement Balance</p>\n            <p className=\"text-xs\">\n              {' '}\n              ${formatNumber(creditAccount.lastStatementBalance, 2)}{' '}\n            </p>\n          </div>\n        </div>\n        <div className=\"rounded-md border px-4 py-2 font-mono text-sm shadow-sm\">\n          <div className=\"flex flex-row justify-between items-between\">\n            <p className=\"text-xs\"> Last Payment Amount</p>\n            <p className=\"text-xs\">\n              {' '}\n              ${formatNumber(creditAccount.lastPaymentAmount, 2)}{' '}\n            </p>\n          </div>\n        </div>\n      </CollapsibleContent>\n    </Collapsible>\n  );\n};\n\nexport { CreditAccountMiniCard };\n"],"names":["Apr","data","__publicField","CreditAccount","getRandomNumber","getRandomString","getRandomArrayItem","BankAccountType","$b73a6c6685e72184$export$b04be29aa201d4f5","$7V4JZ$forwardRef","props","forwardedRef","$7V4JZ$createElement","$7V4JZ$Primitive","$7V4JZ$babelruntimehelpersesmextends","event","_props$onMouseDown","$b73a6c6685e72184$export$be92b6f5f03c0fe9","labelVariants","cva","Label","React.forwardRef","className","ref","jsx","LabelPrimitive.Root","cn","Wallet2","createLucideIcon","CreditAccountCardContext","createContext","CreditAccountCard","Component","React.createRef","enableDemoMode","institutionName","historicalAccountBalance","account","jsxs","Card","CardHeader","CardTitle","formatNumber","HoverCard","HoverCardTrigger","HoverCardContent","CreditAccountMiniCard","Badge","formatDate","CardContent","Tabs","TabsList","TabsTrigger","TabsContent","CreditCardCollapsibleDetails","CreditAccountAprs","CardFooter","HistoricalAccountBalanceChart","FinancialProfile","aprs","RocketIcon","apr","idx","removeUnderScores","creditAccount","Wallet2Icon","isOpen","setIsOpen","React.useState","Collapsible","CollapsibleTrigger","Button","CaretSortIcon","CollapsibleContent"],"mappings":"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","x_google_ignoreList":[2,4]}