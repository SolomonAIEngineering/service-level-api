{"version":3,"file":"MortgageAccountCard-05b9e8ce.js","sources":["../../src/components/MortgageAccountCard/MortgageAccountCard.tsx"],"sourcesContent":["\nimport * as React from \"react\";\nimport { createContext, ReactNode, RefObject, Component } from 'react';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n/** @type {React.Context<string>} */\nconst MortgageAccountCardContext = createContext<string>('MortgageAccountCardContextValue');\n\nexport type MortgageAccountCardProps<T> = {\n  data: T;\n  greeting?: string;\n  className?: string;\n};\n\nexport type MortgageAccountCardState = {\n  counter: number;\n};\n\n/**\n * @class MortgageAccountCard\n * @extends {Component<MortgageAccountCardProps, MortgageAccountCardState>}\n *\n * @description\n * This is a templated advanced React class component written in TypeScript\n * with TSDoc annotations. It has various features like context usage,\n * dynamic styles, generic props, and more.\n */\nexport class MortgageAccountCard<T> extends Component<MortgageAccountCardProps<T>, MortgageAccountCardState> {\n  private myRef: RefObject<HTMLDivElement>;\n\n  static defaultProps = {\n    greeting: 'Hello',\n  };\n\n  constructor(props: MortgageAccountCardProps<T>) {\n    super(props);\n    this.state = {\n      counter: 0,\n    };\n\n    this.myRef = React.createRef();\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n\n  /** Lifecycle method when the component is about to mount. */\n  componentWillMount() {\n    // Deprecated lifecycle, use with caution!\n  }\n\n  /**\n   * Lifecycle method that runs after the component has been mounted.\n   */\n  componentDidMount() {\n    // You can use the ref here, for example:\n    if (this.myRef.current) {\n      this.myRef.current.focus();\n    }\n  }\n\n  /**\n   * Increments the counter state property.\n   * @private\n   */\n  private incrementCounter(): void {\n    this.setState((prevState) => ({ counter: prevState.counter + 1 }));\n  }\n\n  /**\n   * Renders the component.\n   * @returns {ReactNode}\n   */\n  render(): ReactNode {\n    const { greeting, data, className } = this.props;\n    const { counter } = this.state;\n\n    return (\n      <MortgageAccountCardContext.Consumer>\n        {(contextValue) => (\n          <div\n            className={className}\n            ref={this.myRef}\n          >\n            {greeting} from MortgageAccountCard! Context Value: {contextValue}\n            <p>Counter: {counter}</p>\n            <p>{`Data Prop Value: ${data}`}</p>\n            <button onClick={this.incrementCounter}>Increment</button>\n          </div>\n        )}\n      </MortgageAccountCardContext.Consumer>\n    );\n  }\n}\n"],"names":["MortgageAccountCardContext","createContext","MortgageAccountCard","Component","props","__publicField","React.createRef","prevState","greeting","data","className","counter","jsx","contextValue","jsxs"],"mappings":"8PAMA,MAAAA,EAAAC,EAAAA,cAAA,iCAAA,EAqBO,MAAAC,UAAAC,EAAAA,SAAA,CAKL,YAAAC,EAAA,CAGE,MAAAA,CAAA,EARyGC,EAAA,cASzG,KAAA,MAAA,CAAa,QAAA,CACF,EAGX,KAAA,MAAAC,EAAAA,YACA,KAAA,iBAAA,KAAA,iBAAA,KAAA,IAAA,CAAuD,CACzD,oBAAA,CAGqB,CAErB,mBAAA,CAOE,KAAA,MAAA,SACE,KAAA,MAAA,QAAA,OACF,CACF,kBAAA,CAOE,KAAA,SAAAC,IAAA,CAAA,QAAAA,EAAA,QAAA,CAAA,EAAA,CAAiE,CACnE,QAAA,CAOE,KAAA,CAAA,SAAAC,EAAA,KAAAC,EAAA,UAAAC,CAAA,EAAA,KAAA,MACA,CAAA,QAAAC,CAAA,EAAA,KAAA,MAEA,OAAAC,EAAAA,IAAAZ,EAAA,SAAA,CAAA,SAAAa,GAAAC,EAAA,KAGM,MAAC,CAAA,UAAAJ,EACC,IAAA,KAAA,MACU,SAAA,CAETF,EAAA,6CAASK,EAA2CC,OAAA,IAAA,CAAA,SAAA,CAClD,YAAAH,CAAU,EAAA,EAAQC,EAAA,IAAA,IAAA,CAAA,SAAA,oBAAAH,CAAA,GAAA,EACUG,EAAA,IAAA,SAAA,CAAA,QAAA,KAAA,iBAAA,SAAA,YAAA,CACkB,CAAA,CAAA,CAAA,CAAA,CAGvD,CAGN,CA/DUP,EADHH,EACG,eAAA,CAEc,SAAA,OACV"}