{"version":3,"file":"InvestmentHoldingCard-c46a8e62.js","sources":["../../src/types/financial/investment-holding.tsx","../../src/components/InvestmentHoldingCard/InvestmentHoldingCard.tsx"],"sourcesContent":["import {\n  getRandomBalance,\n  getRandomNumber,\n  getRandomString,\n} from 'src/lib-utils/utils';\n\nexport interface IInvesmentHolding {\n  /** id */\n  id: number;\n  /** The name of the investment holding */\n  name: string;\n  /** plaid account id */\n  plaidAccountId: string;\n  costBasis: number;\n  institutionPrice: number;\n  institutionPriceAsOf: string;\n  institutionPriceDatetime: string;\n  institutionValue: number;\n  isoCurrencyCode: string;\n  quantity: number;\n  securityId: string;\n  unofficialCurrencyCode: string;\n}\n\n/*\n * InvesmentHolding represents the InvesmentHolding entity.\n *\n * @export\n * @class InvesmentHolding\n * @implements {IInvesmentHolding}\n * */\nexport class InvesmentHolding implements IInvesmentHolding {\n  /** id */\n  id = 0;\n  /** The name of the investment holding */\n  name = '';\n  /** plaid account id */\n  plaidAccountId = '';\n  costBasis = 0;\n  institutionPrice = 0;\n  institutionPriceAsOf = '';\n  institutionPriceDatetime = '';\n  institutionValue = 0;\n  isoCurrencyCode = '';\n  quantity = 0;\n  securityId = '';\n  unofficialCurrencyCode = '';\n\n  constructor(data: Partial<InvesmentHolding>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  static randomInstance(): InvesmentHolding {\n    return new InvesmentHolding({\n      id: getRandomNumber(1, 100),\n      name: getRandomString(10),\n      plaidAccountId: getRandomString(10),\n      costBasis: getRandomBalance(),\n      institutionPrice: getRandomBalance(),\n      institutionPriceAsOf: getRandomString(10),\n      institutionPriceDatetime: getRandomString(10),\n      institutionValue: getRandomBalance(),\n      isoCurrencyCode: getRandomString(10),\n      quantity: getRandomNumber(1, 100),\n      securityId: getRandomString(10),\n      unofficialCurrencyCode: getRandomString(10),\n    });\n  }\n}\n","import * as React from 'react';\nimport { createContext, ReactNode, RefObject, Component } from 'react';\nimport { AccountBalanceHistory, InvesmentHolding } from 'src/types';\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '../ui/card';\nimport { formatNumber } from 'src/lib-utils/utils';\nimport { HistoricalAccountBalanceChart } from '../HistoricalAccountBalanceChart';\nimport { ScatterChart, Card as TremorCard } from '@tremor/react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n/** @type {React.Context<string>} */\nconst InvestmentHoldingCardContext = createContext<InvesmentHolding[]>([]);\n\nexport type InvestmentHoldingCardProps = {\n  holdings: InvesmentHolding[];\n  accountName: string;\n  className?: string;\n  historicalAccountBalance?: AccountBalanceHistory[];\n};\n\nexport type InvestmentHoldingCardState = {\n  holdings: InvesmentHolding[];\n};\n\n/**\n * @class InvestmentHoldingCard\n * @extends {Component<InvestmentHoldingCardProps, InvestmentHoldingCardState>}\n *\n * @description\n * This is a templated advanced React class component written in TypeScript\n * with TSDoc annotations. It has various features like context usage,\n * dynamic styles, generic props, and more.\n */\nexport class InvestmentHoldingCard extends Component<\n  InvestmentHoldingCardProps,\n  InvestmentHoldingCardState\n> {\n  private myRef: RefObject<HTMLDivElement>;\n\n  static defaultProps = {\n    // holdings: Array.from({ length: 20 }, () => new InvesmentHolding({})),\n    accountName: 'Account Name',\n  };\n\n  constructor(props: InvestmentHoldingCardProps) {\n    super(props);\n    this.state = {\n      holdings: props.holdings,\n    };\n\n    this.myRef = React.createRef();\n    this.computeTotalCostBasis = this.computeTotalCostBasis.bind(this);\n    this.computeAverageCostBasis = this.computeAverageCostBasis.bind(this);\n    this.computeAverageCostBasis = this.computeAverageCostBasis.bind(this);\n    this.computeTotalInstitutionValue =\n      this.computeTotalInstitutionValue.bind(this);\n    this.computeTotalProfitLoss = this.computeTotalProfitLoss.bind(this);\n    this.findLargestHolding = this.findLargestHolding.bind(this);\n    this.findSmallestHolding = this.findSmallestHolding.bind(this);\n  }\n\n  /** Lifecycle method when the component is about to mount. */\n  componentWillMount() {\n    // Deprecated lifecycle, use with caution!\n  }\n\n  /**\n   * Lifecycle method that runs after the component has been mounted.\n   */\n  componentDidMount() {\n    // You can use the ref here, for example:\n    if (this.myRef.current) {\n      this.myRef.current.focus();\n    }\n  }\n\n  private computeTotalCostBasis(holdings: InvesmentHolding[]): number {\n    return holdings.reduce((total, holding) => total + holding.costBasis, 0);\n  }\n\n  private computeAverageCostBasis(holdings: InvesmentHolding[]): number {\n    const totalCostBasis = this.computeTotalCostBasis(holdings);\n    return totalCostBasis / holdings.length;\n  }\n\n  private computeTotalInstitutionValue(holdings: InvesmentHolding[]): number {\n    return holdings.reduce(\n      (total, holding) => total + holding.institutionValue,\n      0,\n    );\n  }\n\n  private computeTotalProfitLoss(holdings: InvesmentHolding[]): number {\n    const totalInstitutionValue = this.computeTotalInstitutionValue(holdings);\n    const totalCostBasis = this.computeTotalCostBasis(holdings);\n    return totalInstitutionValue - totalCostBasis;\n  }\n\n  private findLargestHolding(\n    holdings: InvesmentHolding[],\n  ): InvesmentHolding | null {\n    if (holdings.length === 0) return null;\n    return holdings.reduce((prev, current) =>\n      prev.institutionValue > current.institutionValue ? prev : current,\n    );\n  }\n\n  private findSmallestHolding(\n    holdings: InvesmentHolding[],\n  ): InvesmentHolding | null {\n    if (holdings.length === 0) return null;\n    return holdings.reduce((prev, current) =>\n      prev.institutionValue < current.institutionValue ? prev : current,\n    );\n  }\n  /**\n   * Renders the component.\n   * @returns {ReactNode}\n   */\n  render(): ReactNode {\n    const { className, accountName, historicalAccountBalance } = this.props;\n    const { holdings } = this.state;\n\n    const totalValue = this.computeTotalCostBasis(holdings);\n    const totalInstitutionValue = this.computeTotalInstitutionValue(holdings);\n    const totalProfitLoss = this.computeTotalProfitLoss(holdings);\n    const averageCostBasis = this.computeAverageCostBasis(holdings);\n    const largestHolding = this.findLargestHolding(holdings);\n    const smallestHolding = this.findSmallestHolding(holdings);\n\n    return (\n      <InvestmentHoldingCardContext.Provider value={holdings}>\n        <Card className={className}>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0\">\n            <CardTitle className=\"text-xl font-bold\">{accountName}</CardTitle>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              className=\"h-4 w-4 text-muted-foreground\"\n            >\n              <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n              <path d=\"M2 10h20\" />\n            </svg>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-lg font-bold\">\n              ${formatNumber(totalValue, 2)}{' '}\n              <span className=\"text-xs\"> value across all holdings</span>\n            </p>\n            <p className=\"text-lg font-bold\">\n              ${formatNumber(totalInstitutionValue, 2)}{' '}\n              <span className=\"text-xs\"> institutional value</span>\n            </p>\n            <p className=\"text-lg font-bold\">\n              ${formatNumber(totalProfitLoss, 2)}{' '}\n              <span className=\"text-xs\"> Total P/L</span>\n            </p>\n          </CardContent>\n\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-bold\">\n              Holding Statistics\n            </CardTitle>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              className=\"h-4 w-4 text-muted-foreground\"\n            >\n              <path d=\"M22 12h-4l-3 9L9 3l-3 9H2\" />\n            </svg>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-1 flex-wrap gap-3\">\n              <div className=\"flex flex-col\">\n                <p className=\"text-md\">$ {formatNumber(averageCostBasis, 2)}</p>\n                <p className=\"font-bold text-xs\"> average cost basis </p>\n              </div>\n              <div>\n                <p className=\"text-md\">${largestHolding?.institutionValue}</p>\n                <p className=\"font-bold text-xs\"> largest holding </p>\n              </div>\n              <div>\n                <p className=\"text-md\">${smallestHolding?.institutionValue}</p>\n                <p className=\"font-bold text-xs\"> smallest holding </p>\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col\">\n            <Tabs defaultValue=\"accountBalance\" className=\"min-w-[400px]\">\n              <TabsList className=\"font-bold\">\n                <TabsTrigger value=\"accountBalance\">\n                  Account Balance\n                </TabsTrigger>\n                <TabsTrigger value=\"costBasis\">Security Cost Basis</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"accountBalance\">\n                <HistoricalAccountBalanceChart\n                  historicalAccountBalance={historicalAccountBalance}\n                  disableLabel={true}\n                  className=\"contain\"\n                />\n              </TabsContent>\n              <TabsContent value=\"costBasis\">\n                <TremorCard className=\"shadow-sm bg-white border rounded-2xl\">\n                  <p className=\"text-xl\">Cost Basis vs. Quantity</p>\n                  <ScatterChart\n                    className=\"w-full h-80 mt-6 -ml-2\"\n                    yAxisWidth={50}\n                    data={holdings}\n                    category=\"name\"\n                    x=\"institutionPrice\"\n                    y=\"quantity\"\n                    size=\"costBasis\"\n                    showOpacity={true}\n                    minYValue={60}\n                    valueFormatter={{\n                      x: (amount) => `$${amount}`,\n                      y: (quantity) => `${quantity}`,\n                      size: (costBasis) => `$${costBasis}`,\n                    }}\n                    showLegend={false}\n                    showGridLines={false}\n                  />\n                </TremorCard>\n              </TabsContent>\n            </Tabs>\n          </CardFooter>\n        </Card>\n      </InvestmentHoldingCardContext.Provider>\n    );\n  }\n}\n"],"names":["InvesmentHolding","data","__publicField","getRandomNumber","getRandomString","getRandomBalance","InvestmentHoldingCardContext","createContext","InvestmentHoldingCard","Component","props","React.createRef","holdings","total","holding","totalInstitutionValue","totalCostBasis","prev","current","className","accountName","historicalAccountBalance","totalValue","totalProfitLoss","averageCostBasis","largestHolding","smallestHolding","jsx","jsxs","Card","CardHeader","CardTitle","CardContent","formatNumber","CardFooter","Tabs","TabsList","TabsTrigger","TabsContent","HistoricalAccountBalanceChart","TremorCard","ScatterChart","amount","quantity","costBasis"],"mappings":"qgBA+BO,MAAMA,CAA8C,CAiBzD,YAAYC,EAAiC,CAf7CC,EAAA,UAAK,GAELA,EAAA,YAAO,IAEPA,EAAA,sBAAiB,IACjBA,EAAA,iBAAY,GACZA,EAAA,wBAAmB,GACnBA,EAAA,4BAAuB,IACvBA,EAAA,gCAA2B,IAC3BA,EAAA,wBAAmB,GACnBA,EAAA,uBAAkB,IAClBA,EAAA,gBAAW,GACXA,EAAA,kBAAa,IACbA,EAAA,8BAAyB,IAGnBD,GACF,OAAO,OAAO,KAAM,CAClB,GAAGA,CAAA,CACJ,CAEL,CAEA,OAAO,gBAAmC,CACxC,OAAO,IAAID,EAAiB,CAC1B,GAAIG,EAAgB,EAAG,GAAG,EAC1B,KAAMC,EAAgB,EAAE,EACxB,eAAgBA,EAAgB,EAAE,EAClC,UAAWC,EAAiB,EAC5B,iBAAkBA,EAAiB,EACnC,qBAAsBD,EAAgB,EAAE,EACxC,yBAA0BA,EAAgB,EAAE,EAC5C,iBAAkBC,EAAiB,EACnC,gBAAiBD,EAAgB,EAAE,EACnC,SAAUD,EAAgB,EAAG,GAAG,EAChC,WAAYC,EAAgB,EAAE,EAC9B,uBAAwBA,EAAgB,EAAE,CAAA,CAC3C,CACH,CACF,CCvDA,MAAAE,EAAAC,EAAAA,cAAA,CAAA,CAAA,EAsBO,MAAAC,UAAAC,EAAAA,SAAA,CASL,YAAAC,EAAA,CAGE,MAAAA,CAAA,EATFR,EAAA,cAUE,KAAA,MAAA,CAAa,SAAAQ,EAAA,QACK,EAGlB,KAAA,MAAAC,EAAAA,YACA,KAAA,sBAAA,KAAA,sBAAA,KAAA,IAAA,EACA,KAAA,wBAAA,KAAA,wBAAA,KAAA,IAAA,EACA,KAAA,wBAAA,KAAA,wBAAA,KAAA,IAAA,EACA,KAAA,6BAAA,KAAA,6BAAA,KAAA,IAAA,EAEA,KAAA,uBAAA,KAAA,uBAAA,KAAA,IAAA,EACA,KAAA,mBAAA,KAAA,mBAAA,KAAA,IAAA,EACA,KAAA,oBAAA,KAAA,oBAAA,KAAA,IAAA,CAA6D,CAC/D,oBAAA,CAGqB,CAErB,mBAAA,CAOE,KAAA,MAAA,SACE,KAAA,MAAA,QAAA,OACF,CACF,sBAAAC,EAAA,CAGE,OAAAA,EAAA,OAAA,CAAAC,EAAAC,IAAAD,EAAAC,EAAA,UAAA,CAAA,CAAuE,CACzE,wBAAAF,EAAA,CAIE,OADA,KAAA,sBAAAA,CAAA,EACAA,EAAA,MAAiC,CACnC,6BAAAA,EAAA,CAGE,OAAAA,EAAA,OAAgB,CAAAC,EAAAC,IAAAD,EAAAC,EAAA,iBACsB,CACpC,CACF,CACF,uBAAAF,EAAA,CAGE,MAAAG,EAAA,KAAA,6BAAAH,CAAA,EACAI,EAAA,KAAA,sBAAAJ,CAAA,EACA,OAAAG,EAAAC,CAA+B,CACjC,mBAAAJ,EAAA,CAKE,OAAAA,EAAA,SAAA,EAA2B,KAC3BA,EAAA,OAAgB,CAAAK,EAAAC,IAAAD,EAAA,iBAAAC,EAAA,iBAAAD,EAAAC,CAC4C,CAC5D,CACF,oBAAAN,EAAA,CAKE,OAAAA,EAAA,SAAA,EAA2B,KAC3BA,EAAA,OAAgB,CAAAK,EAAAC,IAAAD,EAAA,iBAAAC,EAAA,iBAAAD,EAAAC,CAC4C,CAC5D,CACF,QAAA,CAME,KAAA,CAAA,UAAAC,EAAA,YAAAC,EAAA,yBAAAC,CAAA,EAAA,KAAA,MACA,CAAA,SAAAT,CAAA,EAAA,KAAA,MAEAU,EAAA,KAAA,sBAAAV,CAAA,EACAG,EAAA,KAAA,6BAAAH,CAAA,EACAW,EAAA,KAAA,uBAAAX,CAAA,EACAY,EAAA,KAAA,wBAAAZ,CAAA,EACAa,EAAA,KAAA,mBAAAb,CAAA,EACAc,EAAA,KAAA,oBAAAd,CAAA,EAEA,OAAAe,MAAArB,EAAA,SAAA,CAAA,MAAAM,EAAA,SAAAgB,OAAAC,EAAA,CAAA,UAAAV,EAAA,SAAA,CAGMS,EAAAA,KAAAE,EAAA,CAAA,UAAA,uDAAA,SAAA,CACEH,EAAA,IAAAI,EAAA,CAAA,UAAA,oBAAA,SAAAX,EAAA,EAAsDQ,EAAA,KACtD,MAAC,CAAA,MAAA,6BACO,QAAA,YACE,KAAA,OACH,OAAA,eACE,cAAA,QACO,eAAA,QACC,YAAA,IACH,UAAA,gCACF,SAAA,CAEVD,EAAAA,IAAA,OAAA,CAAA,MAAA,KAAA,OAAA,KAAA,EAAA,IAAA,EAAA,IAAA,GAAA,GAAA,CAAA,EAAgDA,EAAAA,IAAA,OAAA,CAAA,EAAA,UAAA,CAAA,CAC7B,CAAA,CAAA,CACrB,EAAA,EACFC,OAAAI,EAAA,CAAA,SAAA,CAEEJ,EAAAA,KAAA,IAAA,CAAA,UAAA,oBAAA,SAAA,CAAiC,IAAAK,EAAAX,EAAA,CAAA,EACH,IAAGK,EAAA,IAAA,OAAA,CAAA,UAAA,UAAA,SAAA,6BAAA,CACqB,EAAA,EACtDC,EAAAA,KAAA,IAAA,CAAA,UAAA,oBAAA,SAAA,CACiC,IAAAK,EAAAlB,EAAA,CAAA,EACQ,IAAGY,EAAA,IAAA,OAAA,CAAA,UAAA,UAAA,SAAA,uBAAA,CACI,EAAA,EAChDC,EAAAA,KAAA,IAAA,CAAA,UAAA,oBAAA,SAAA,CACiC,IAAAK,EAAAV,EAAA,CAAA,EACE,IAAGI,EAAA,IAAA,OAAA,CAAA,UAAA,UAAA,SAAA,aAAA,CACA,EAAA,CACtC,EAAA,EACFC,EAAAA,KAAAE,EAAA,CAAA,UAAA,4DAAA,SAAA,CAGEH,EAAA,IAAAI,EAAA,CAAA,UAAA,oBAAA,SAAA,qBAAA,EAEAJ,EAAA,IACA,MAAC,CAAA,MAAA,6BACO,QAAA,YACE,KAAA,OACH,OAAA,eACE,cAAA,QACO,eAAA,QACC,YAAA,IACH,UAAA,gCACF,SAAAA,EAAAA,IAAA,OAAA,CAAA,EAAA,2BAAA,CAAA,CAE0B,CAAA,CACtC,EAAA,EACFA,MAAAK,EAAA,CAAA,SAAAJ,EAAAA,KAAA,MAAA,CAAA,UAAA,8BAAA,SAAA,CAGIA,EAAAA,KAAA,MAAA,CAAA,UAAA,gBAAA,SAAA,CACEA,EAAAA,KAAA,IAAA,CAAA,UAAA,UAAA,SAAA,CAAuB,KAAAK,EAAAT,EAAA,CAAA,CAAmC,EAAA,EAAEG,EAAA,IAAA,IAAA,CAAA,UAAA,oBAAA,SAAA,uBAAA,CACP,EAAA,EACvDC,OAAA,MAAA,CAAA,SAAA,CAEEA,EAAAA,KAAA,IAAA,CAAA,UAAA,UAAA,SAAA,CAAuB,IAAAH,GAAA,YAAAA,EAAA,gBAAkB,EAAA,EAAiBE,EAAA,IAAA,IAAA,CAAA,UAAA,oBAAA,SAAA,oBAAA,CACR,EAAA,EACpDC,OAAA,MAAA,CAAA,SAAA,CAEEA,EAAAA,KAAA,IAAA,CAAA,UAAA,UAAA,SAAA,CAAuB,IAAAF,GAAA,YAAAA,EAAA,gBAAmB,EAAA,EAAiBC,EAAA,IAAA,IAAA,CAAA,UAAA,oBAAA,SAAA,qBAAA,CACR,EAAA,CACrD,CAAA,CAAA,CAAA,CAAA,EAEJA,EAAAA,IAAAO,EAAA,CAAA,UAAA,gBAAA,SAAAN,EAAAA,KAAAO,EAAA,CAAA,aAAA,iBAAA,UAAA,gBAAA,SAAA,CAGIP,EAAAA,KAAAQ,EAAA,CAAA,UAAA,YAAA,SAAA,CACET,EAAA,IAAAU,EAAA,CAAA,MAAA,iBAAA,SAAA,kBAAA,EAEAV,EAAA,IAAAU,EAAA,CAAA,MAAA,YAAA,SAAA,sBAAA,CACkD,EAAA,EACpDV,EAAAA,IAAAW,EAAA,CAAA,MAAA,iBAAA,SAAAX,EAAA,IAEEY,EAAC,CAAA,yBAAAlB,EACC,aAAA,GACc,UAAA,SACJ,CAAA,EAAA,EAEdM,EAAAA,IAAAW,EAAA,CAAA,MAAA,YAAA,SAAAV,EAAA,KAAAY,EAAA,CAAA,UAAA,wCAAA,SAAA,CAGIb,EAAA,IAAA,IAAA,CAAA,UAAA,UAAA,SAAA,0BAAA,EAA8CA,EAAA,IAC9Cc,EAAC,CAAA,UAAA,yBACW,WAAA,GACE,KAAA7B,EACN,SAAA,OACG,EAAA,mBACP,EAAA,WACA,KAAA,YACG,YAAA,GACQ,UAAA,GACF,eAAA,CACK,EAAA8B,GAAA,IAAAA,CAAA,GACW,EAAAC,GAAA,GAAAA,CAAA,GACG,KAAAC,GAAA,IAAAA,CAAA,EACM,EACpC,WAAA,GACY,cAAA,EACG,CAAA,CACjB,CAAA,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,CAAA,CAAA,CAEJ,CAGN,CA5MU1C,EAJHM,EAIG,eAAA,CAEc,YAAA,cAEP"}