{"version":3,"file":"TransactionAnalyticsByMonth-6d6e7a75.js","sources":["../../src/components/TransactionAnalyticsByMonth/MonthlyExpenditureCard.tsx","../../src/components/TransactionAnalyticsByMonth/TransactionAnalyticsByMonth.tsx"],"sourcesContent":["import React from 'react';\nimport { Transaction } from 'src/types';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\n\ntype Props = {\n  transactions: Transaction[];\n  children?: React.ReactNode;\n};\n\nconst MonthlyExpenditureCard: React.FC<Props> = ({\n  transactions,\n  children,\n}) => {\n  const totalExpenditure = transactions\n    .filter((txn) => txn.amount > 0)\n    .reduce((acc, txn) => acc + Math.abs(txn.amount), 0);\n\n  // plaid treats negative amounts as income and positive amounts as expenditure\n  const totalIncome = transactions\n    .filter((txn) => txn.amount < 0)\n    .reduce((acc, txn) => acc + Math.abs(txn.amount), 0);\n\n  const netSavings = totalIncome - totalExpenditure;\n  const averageTransactionSize =\n    transactions.length > 0\n      ? transactions.reduce((acc, txn) => acc + txn.amount, 0) /\n        transactions.length\n      : 0;\n\n  const largestTransaction = Math.max(...transactions.map((txn) => txn.amount));\n  const smallestTransaction = Math.min(\n    ...transactions.map((txn) => txn.amount),\n  );\n\n  // Merchant Breakdown\n  const merchantBreakdown: { [key: string]: number } = {};\n  transactions.forEach((txn) => {\n    merchantBreakdown[txn.merchantName] =\n      (merchantBreakdown[txn.merchantName] || 0) + 1;\n  });\n\n  // Payment Method Breakdown\n  const paymentMethodBreakdown: { [key: string]: number } = {};\n  transactions.forEach((txn) => {\n    paymentMethodBreakdown[txn.paymentMetaPaymentMethod] =\n      (paymentMethodBreakdown[txn.paymentMetaPaymentMethod] || 0) + 1;\n  });\n\n  // Frequency of Transactions\n  const transactionFrequency: { [key: string]: number } = {};\n  transactions.forEach((txn) => {\n    const date = txn.currentDate; // Assuming currentDate represents the date of the transaction\n    transactionFrequency[date] = (transactionFrequency[date] || 0) + 1;\n  });\n\n  // Cash Flow Analysis\n  const cashFlowAnalysis: { [key: string]: number } = {};\n  transactions.forEach((txn) => {\n    const date = txn.currentDate;\n    cashFlowAnalysis[date] = (cashFlowAnalysis[date] || 0) + txn.amount;\n  });\n\n  return (\n    <div className=\"bg-white\">\n      <h2 className=\"text-xl font-bold mb-4\">Transaction Metrics</h2>\n      {children}\n      <div className=\"grid gap-4 grid-cols-2\">\n        <Card className=\"contain\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Total Expenditure\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"w-fit\">\n            <div className=\"font-bold\"> ${totalExpenditure.toFixed(2)}</div>\n            {/* <p className=\"text-xs font-bold\">\n              +20.1% from last month\n            </p> */}\n          </CardContent>\n        </Card>\n        <Card className=\"contain\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Income</CardTitle>\n          </CardHeader>\n          <CardContent className=\"w-fit\">\n            <div className=\"font-bold\"> ${totalIncome.toFixed(2)}</div>\n            {/* <p className=\"text-xs text-muted-foreground\">\n              +20.1% from last month\n            </p> */}\n          </CardContent>\n        </Card>\n        <Card className=\"contain\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Net Savings/Net Expenditure\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"w-fit\">\n            <div className=\"font-bold\"> ${netSavings.toFixed(2)}</div>\n            {/* <p className=\"text-xs text-muted-foreground\">\n              +20.1% from last month\n            </p> */}\n          </CardContent>\n        </Card>\n        <Card className=\"m-2\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Further Details\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-xs font-bold pt-4\">\n              largest transaction: ${largestTransaction.toFixed(2)}\n            </p>{' '}\n            <p className=\"text-xs font-bold pt-4\">\n              smallest transaction: ${smallestTransaction.toFixed(2)}\n            </p>\n            <p className=\"text-xs font-bold pt-4\">\n              average transaction: ${averageTransactionSize.toFixed(2)}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <ul>\n        <li className=\"mt-4\">\n          <strong>Merchant Breakdown:</strong>\n          <ul>\n            {Object.entries(merchantBreakdown).map(([merchant, count]) => (\n              <li key={merchant}>\n                {merchant}: {count} transactions\n              </li>\n            ))}\n          </ul>\n        </li>\n        <li className=\"mt-4\">\n          <strong>Payment Method Breakdown:</strong>\n          <ul>\n            {Object.entries(paymentMethodBreakdown).map(([method, count]) => (\n              <li key={method}>\n                {method}: {count} transactions\n              </li>\n            ))}\n          </ul>\n        </li>\n        <li className=\"mt-4\">\n          <strong>Frequency of Transactions:</strong>\n          <ul>\n            {Object.entries(transactionFrequency).map(([date, count]) => (\n              <li key={date}>\n                {date}: {count} transactions\n              </li>\n            ))}\n          </ul>\n        </li>\n        <li className=\"mt-4\">\n          <strong>Cash Flow Analysis:</strong>\n          <ul>\n            {Object.entries(cashFlowAnalysis).map(([date, amount]) => (\n              <li key={date}>\n                {date}: ${amount.toFixed(2)}\n              </li>\n            ))}\n          </ul>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport { MonthlyExpenditureCard };\n","import {\n  Bold,\n  Flex,\n  Grid,\n  Icon,\n  List,\n  ListItem,\n  Title,\n  Text,\n  Select,\n  SelectItem,\n  DonutChart,\n  Col,\n  ProgressBar,\n  BarChart,\n  ScatterChart,\n} from '@tremor/react';\nimport * as React from 'react';\nimport { createContext, ReactNode, RefObject, Component } from 'react';\nimport { Transaction } from 'src/types';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '../ui/card';\nimport { Card as TremorCard } from '@tremor/react';\nimport { cn, formatNumber } from 'src/lib-utils/utils';\nimport { RocketIcon } from 'lucide-react';\nimport { TabsContent, TabsList } from '@radix-ui/react-tabs';\nimport { Tabs, TabsTrigger } from '../ui/tabs';\nimport { MonthlyExpenditureCard } from './MonthlyExpenditureCard';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n/** @type {React.Context<Transaction[]>} */\nconst TransactionAnalyticsByMonthContext = createContext<Transaction[]>([]);\n\nexport type TransactionAnalyticsByMonthProps = {\n  transactions: Transaction[];\n  className?: string;\n};\n\nexport type TransactionAnalyticsByMonthState = {\n  transactions: Transaction[];\n};\n\ntype TransactionCategory = {\n  name: string;\n  numTransactions: number;\n  amount: number; // Formatted as a string for presentation\n  transactions: Transaction[];\n};\n\ntype MonthTransactions = {\n  name: string;\n  data: TransactionCategory[];\n};\n\ntype CategorizedPickerSet = {\n  key: string;\n  name: string;\n};\n\n/**\n * @class TransactionAnalyticsByMonth\n * @extends {Component<TransactionAnalyticsByMonthProps, TransactionAnalyticsByMonthState>}\n *\n * @description\n * This is a templated advanced React class component written in TypeScript\n * with TSDoc annotations. It has various features like context usage,\n * dynamic styles, generic props, and more.\n */\nexport class TransactionAnalyticsByMonth extends Component<\n  TransactionAnalyticsByMonthProps,\n  TransactionAnalyticsByMonthState\n> {\n  private myRef: RefObject<HTMLDivElement>;\n\n  static defaultProps = {\n    className: '',\n  };\n\n  constructor(props: TransactionAnalyticsByMonthProps) {\n    super(props);\n    this.state = {\n      transactions: props.transactions,\n    };\n\n    this.myRef = React.createRef();\n    this.categorizeTransactions = this.categorizeTransactions.bind(this);\n    this.groupByMonth = this.groupByMonth.bind(this);\n    this.extractCategories = this.extractCategories.bind(this);\n  }\n\n  /**\n   * Lifecycle method that runs after the component has been mounted.\n   */\n  componentDidMount() {\n    // You can use the ref here, for example:\n    if (this.myRef.current) {\n      this.myRef.current.focus();\n    }\n  }\n\n  /**\n   * Categorizes the provided transactions.\n   * @param transactions List of transactions to categorize.\n   * @returns A categorized array.\n   */\n  private categorizeTransactions(\n    transactions: Transaction[],\n  ): TransactionCategory[] {\n    const categoriesMap = new Map<string, TransactionCategory>();\n\n    for (const transaction of transactions) {\n      const categoryName = transaction.personalFinanceCategoryPrimary;\n      const currentCategory = categoriesMap.get(categoryName) || {\n        name: categoryName,\n        numTransactions: 0,\n        amount: 0,\n        transactions: [],\n      };\n\n      currentCategory.numTransactions++;\n      const currentAmount = currentCategory.amount;\n      currentCategory.amount = parseFloat(\n        (currentAmount + transaction.amount).toFixed(2),\n      );\n      currentCategory.transactions.push(transaction);\n      categoriesMap.set(categoryName, currentCategory);\n    }\n\n    return Array.from(categoriesMap.values());\n  }\n\n  /**\n   * Groups transactions by month.\n   * @param transactions List of transactions to group.\n   * @returns An array of month groups with categorized transactions.\n   */\n  private groupByMonth(transactions: Transaction[]): MonthTransactions[] {\n    const monthlyTransactions = new Map<string, Transaction[]>();\n\n    for (const transaction of transactions) {\n      const monthYear = `${transaction.currentDate.split('-')[1]}-${\n        transaction.currentDate.split('-')[0]\n      }`;\n      const monthData = monthlyTransactions.get(monthYear) || [];\n      monthData.push(transaction);\n      monthlyTransactions.set(monthYear, monthData);\n    }\n\n    const months: MonthTransactions[] = [];\n\n    for (const [monthYear, monthTrans] of monthlyTransactions.entries()) {\n      months.push({\n        name: monthYear,\n        data: this.categorizeTransactions(monthTrans),\n      });\n    }\n\n    // Sorting for a consistent ordering of months\n    return months.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  private extractCategories(): CategorizedPickerSet[] {\n    // Create a set to store unique category names\n    const categorySet = new Set<string>();\n\n    this.state.transactions.forEach((transaction) => {\n      categorySet.add(transaction.personalFinanceCategoryPrimary);\n    });\n\n    // Convert category names to the desired format\n    const result = Array.from(categorySet).map((category) => ({\n      key: category.toLowerCase().replace(/[^a-z0-9]/g, ''), // simple mechanism to convert name to key\n      name: category,\n    }));\n\n    // Optionally, add the 'All Categories' entry\n    result.unshift({ key: 'all', name: 'All Categories' });\n\n    return result;\n  }\n\n  /**\n   * Renders the component.\n   * @returns {ReactNode}\n   */\n  render(): ReactNode {\n    const { className } = this.props;\n    const { transactions } = this.state;\n    const monthsData = this.groupByMonth(transactions);\n\n    return (\n      <TransactionAnalyticsByMonthContext.Provider value={transactions}>\n        <Card className={cn('w-full', className)}>\n          <div className=\"p-4 flex flex-col gap-2\">\n            <Tabs defaultValue={'txnbymonth'} className=\"min-w-[400px]\">\n              <TabsList className=\"grid w-full grid-cols-2 font-bold rounded-2xl\">\n                <TabsTrigger value=\"txnbycategories\">Categories</TabsTrigger>\n                <TabsTrigger value=\"txnbymonth\">Monthly Breakdown</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"txnbycategories\" className=\"mt-2\">\n                <TransactionsCategorizePieChart\n                  categorySet={this.extractCategories()}\n                  transactions={this.state.transactions}\n                />\n              </TabsContent>\n              <TabsContent value=\"txnbymonth\" className=\"mt-2\">\n                <TransactionCategories monthlyTransactions={monthsData} />\n              </TabsContent>\n            </Tabs>\n          </div>\n        </Card>\n      </TransactionAnalyticsByMonthContext.Provider>\n    );\n  }\n}\n\n/**\n * A React component that visualizes transaction data in the form of pie charts.\n *\n * @example\n * ```tsx\n * const transactions: Transaction[] = [\n *   { personalFinanceCategoryPrimary: 'Groceries', amount: 50, merchantName: 'SuperMart' },\n *   // ... more transactions\n * ];\n * const categorySet: CategorizedPickerSet[] = [\n *   { key: 'groceries', name: 'Groceries' },\n *   // ... more categories\n * ];\n * <TransactionsCategorizePieChart categorySet={categorySet} transactions={transactions} />\n * ```\n *\n * @param props The properties of the component.\n * @param props.categorySet The set of categories to choose from.\n * @param props.transactions The list of transactions to visualize.\n */\nconst TransactionsCategorizePieChart: React.FC<{\n  categorySet: CategorizedPickerSet[];\n  transactions: Transaction[];\n}> = ({ categorySet, transactions }) => {\n  const valueFormatter = (number: number) =>\n    `$${Intl.NumberFormat('us').format(number).toString()}`;\n\n  const filterByCategory = (category: string, data: Transaction[]) =>\n    category === 'all'\n      ? data\n      : data.filter((txn) => txn.personalFinanceCategoryPrimary === category);\n  const [selectedCategory, setSelectedCategory] = React.useState('all');\n  const [filteredData, setFilteredData] = React.useState(transactions);\n\n  React.useEffect(() => {\n    setFilteredData(filterByCategory(selectedCategory, transactions));\n  }, [selectedCategory, transactions]);\n\n  const countTransactionsByCategory = (\n    transactions: Transaction[],\n  ): { categoryName: string; count: number }[] => {\n    const counts: { [category: string]: number } = {};\n\n    transactions.forEach((transaction) => {\n      if (!counts[transaction.personalFinanceCategoryPrimary]) {\n        counts[transaction.personalFinanceCategoryPrimary] = 0;\n      }\n      counts[transaction.personalFinanceCategoryPrimary] += transaction.amount;\n    });\n\n    const result = Object.entries(counts).map(([categoryName, count]) => {\n      return {\n        categoryName,\n        count,\n      };\n    });\n\n    return result;\n  };\n\n  function countTransactionsByMerchant(\n    transactions: Transaction[],\n  ): { merchantName: string; count: number }[] {\n    const merchantCounts: { [merchant: string]: number } = {};\n\n    transactions.forEach((transaction) => {\n      const merchant = transaction.merchantName;\n      if (!merchantCounts[merchant]) {\n        merchantCounts[merchant] = 0;\n      }\n      merchantCounts[merchant]++;\n    });\n\n    const result: { merchantName: string; count: number }[] = [];\n    for (const merchant in merchantCounts) {\n      result.push({\n        merchantName: merchant,\n        count: merchantCounts[merchant],\n      });\n    }\n\n    return result;\n  }\n\n  const merchantToTransactionMap = countTransactionsByMerchant(transactions);\n\n  return (\n    <TremorCard className=\"mt-2 max-w-4xl mx-auto\">\n      <div className=\"hidden sm:block\">\n        <Flex className=\"space-x-4\" justifyContent=\"start\" alignItems=\"center\">\n          <Title className=\"truncate\">Transactions</Title>\n          <Select\n            placeholder=\"Category Selection\"\n            className=\"max-w-sm mx-auto space-y-6\"\n          >\n            {categorySet.map((category) => (\n              <SelectItem\n                key={category.key}\n                value={category.key}\n                onClick={() => setSelectedCategory(category.name)}\n                icon={RocketIcon}\n              >\n                {category.name}\n              </SelectItem>\n            ))}\n          </Select>\n        </Flex>\n      </div>\n      {/* --- Same code snippet as above but with no flex to optmize mobile view --- */}\n      <div className=\"sm:hidden\">\n        <Title className=\"truncate\">Transactions</Title>\n        <Select\n          onValueChange={setSelectedCategory}\n          placeholder=\"Category Selection\"\n          className=\"max-w-full mt-2\"\n        >\n          {categorySet.map((category) => (\n            <SelectItem key={category.key} value={category.key}>\n              {category.name}\n            </SelectItem>\n          ))}\n        </Select>\n      </div>\n      <Grid numItemsLg={1} className=\"mt-8 gap-y-10 gap-x-14\">\n        <TremorCard>\n          <Title>Spending Across Time</Title>\n          <Text>Comparison between Spending and Time</Text>\n          <BarChart\n            className=\"mt-4 h-80\"\n            data={filteredData}\n            index=\"authorizedDate\"\n            categories={['amount']}\n            colors={['blue', 'stone']}\n            stack={false}\n            yAxisWidth={60}\n            valueFormatter={(number: number) =>\n              `$${Intl.NumberFormat('us').format(number).toString()}`\n            }\n          />\n        </TremorCard>\n      </Grid>\n      <Grid numItemsLg={3} className=\"mt-8 gap-y-10 gap-x-14\">\n        <Flex>\n          <DonutChart\n            data={countTransactionsByCategory(filteredData)}\n            category=\"count\"\n            index=\"categoryName\"\n            variant=\"donut\"\n            valueFormatter={valueFormatter}\n            className={\n              'h-32 w-32 ' + // Default size for very small screens\n              'sm:h-48 sm:w-48 ' + // Size for small screens and up\n              'md:h-56 md:w-56 ' + // Size for medium screens and up\n              'lg:h-60 lg:w-60 ' + // Size for large screens and up\n              'xl:h-64 xl:w-64 ' // Size for extra-large screens and up\n            }\n          />\n        </Flex>\n        <Col numColSpan={1} numColSpanLg={2}>\n          <Flex>\n            <Text className=\"truncate\">\n              <Bold>Merchant</Bold>\n            </Text>\n            <Text>\n              <Bold>% spent at merchant </Bold>\n            </Text>\n          </Flex>\n          <div className=\"hidden sm:block\">\n            <List className=\"mt-2\">\n              {filteredData.map((txn) => (\n                <ProgressBarHelperComponent\n                  txn={txn}\n                  merchantToTransactionMap={merchantToTransactionMap}\n                  transactions={filteredData}\n                />\n              ))}\n            </List>\n          </div>\n          {/* --- Same code snippet as above but with less width for data bars to optimize mobile --- */}\n          <div className=\"sm:hidden\">\n            <List className=\"mt-2\">\n              {filteredData.map((txn) => (\n                <ProgressBarHelperComponent\n                  txn={txn}\n                  merchantToTransactionMap={merchantToTransactionMap}\n                  transactions={filteredData}\n                />\n              ))}\n            </List>\n          </div>\n        </Col>\n      </Grid>\n    </TremorCard>\n  );\n};\n\nconst MONTHS = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\n/**\n * A React component that visualizes transactions grouped by months in the form of tabs.\n *\n * @example\n * ```tsx\n * const monthlyTransactions: MonthTransactions[] = [\n *   { name: '01-2023', data: [ { name: 'Food', numTransactions: 5, amount: 50 } ] },\n *   // ... more month transactions\n * ];\n * <TransactionCategories monthlyTransactions={monthlyTransactions} />\n * ```\n *\n * @param props The properties of the component.\n * @param props.monthlyTransactions The list of transactions categorized by months.\n */\nconst TransactionCategories: React.FC<{\n  monthlyTransactions: MonthTransactions[];\n}> = ({ monthlyTransactions }) => {\n  const convertDateFormat = (dateString: string): string => {\n    const [monthNumber, year] = dateString.split('-');\n    const monthName = MONTHS[parseInt(monthNumber) - 1];\n    return `${monthName} 1, ${year}`;\n  };\n\n  const TransactionContent: React.FC<{ item: MonthTransactions }> = ({\n    item,\n  }) => {\n    // we get all the transactions for the month\n    // then we group them by category\n    // then we sort them by amount\n\n    const getAlltransactionForTheMonthAcrossAllCategories = () => {\n      const allTransactions: Transaction[] = [];\n      item.data.forEach((category) => {\n        allTransactions.push(...category.transactions);\n      });\n      return allTransactions;\n    };\n\n    const categoricalComponent = () => {\n      return (\n        <List className=\"mt-4 \">\n          {item.data.map((monthlyTransactionData) => (\n            <ListItem key={monthlyTransactionData.name}>\n              <Flex justifyContent=\"start\" className=\"truncate space-x-4\">\n                <Icon\n                  variant=\"light\"\n                  icon={RocketIcon}\n                  size=\"md\"\n                  className=\"border bg-black text-white\"\n                />\n                <div className=\"truncate\">\n                  <Text className=\"truncate\">\n                    <Bold>{monthlyTransactionData.name}</Bold>\n                  </Text>\n                  <Text className=\"truncate\">{`${monthlyTransactionData.numTransactions} transactions`}</Text>\n                </div>\n              </Flex>\n              <Text>{monthlyTransactionData.amount}</Text>\n            </ListItem>\n          ))}\n        </List>\n      );\n    };\n\n    return (\n      <div className=\"mt-2 w-fit\">\n        <p className=\"text-md\">\n          Transaction volume for the month of\n          <span className=\"font-bold\"> {convertDateFormat(item.name)}</span>\n        </p>\n        <Tabs\n          defaultValue=\"categories\"\n          className=\"w-[400px] p-2 flex flex-col gap-2\"\n        >\n          <TabsList className=\"grid w-full grid-cols-2 font-bold rounded-2xl\">\n            <TabsTrigger value=\"categories\">\n              Spending Across Categories\n            </TabsTrigger>\n            <TabsTrigger value=\"metrics\">Metrics</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"categories\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Metrics</CardTitle>\n                <CardDescription>\n                  Your monthly breakdown of transactions for the month of{' '}\n                  {convertDateFormat(item.name)}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <MonthlyExpenditureCard\n                  transactions={getAlltransactionForTheMonthAcrossAllCategories()}\n                />\n              </CardContent>\n            </Card>\n          </TabsContent>\n          <TabsContent value=\"metrics\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Spending Across Categories</CardTitle>\n                <CardDescription>\n                  Below is a summary of your spending for the month of{' '}\n                  {convertDateFormat(item.name)} across various categories\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {categoricalComponent()}\n              </CardContent>\n              <CardFooter>\n                <TremorCard>\n                  <Title>Transactions Across Categories</Title>\n                  <Text>\n                    As of {convertDateFormat(item.name)}.{' '}\n                    <span className=\"text-xs font-bold\">\n                      Source: your spening{' '}\n                    </span>\n                  </Text>\n\n                  <ScatterChart\n                    className=\"h-80 mt-6 -ml-2\"\n                    data={item.data}\n                    category=\"name\"\n                    x=\"numTransactions\"\n                    y=\"amount\"\n                    size=\"numTransactions\"\n                    colors={['slate', 'stone']}\n                    showOpacity={true}\n                    valueFormatter={{\n                      x: (numberOfTransactions) =>\n                        `${numberOfTransactions} txn`,\n                      y: (transactionSize) => `$${transactionSize}`,\n                      size: (numberOfTransactions) => `${numberOfTransactions}`,\n                    }}\n                    showLegend={true}\n                  />\n                </TremorCard>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    );\n  };\n\n  return (\n    <Tabs\n      className=\"flex flex-row gap-5\"\n      defaultValue={monthlyTransactions.at(0)?.name}\n    >\n      <Grid numItemsSm={1} numItemsLg={3} className=\"gap-6\">\n        <Col numColSpan={1} numColSpanLg={1}>\n          <TabsList className=\"flex flex-col gap-2 border rounded-2xl p-3\">\n            {monthlyTransactions.map((item) => (\n              <TabsTrigger key={item.name} value={item.name}>\n                {convertDateFormat(item.name)}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n        </Col>{' '}\n        <Col numColSpan={1} numColSpanLg={2}>\n          {monthlyTransactions.map((item) => (\n            <TabsContent key={item.name} value={item.name}>\n              <TransactionContent item={item} />\n            </TabsContent>\n          ))}\n        </Col>\n      </Grid>\n    </Tabs>\n  );\n};\n\n/**\n * A helper component that renders a progress bar for transactions based on merchant data.\n * The progress bar indicates the percentage of transactions for a given merchant relative to the total number of transactions.\n *\n * @example\n * ```tsx\n * const txn: Transaction = { merchantName: 'Amazon', ... };\n * const merchantToTransactionMap: { merchantName: string; count: number }[] = [\n *   { merchantName: 'Amazon', count: 5 },\n *   // ... more merchants\n * ];\n * const transactions: Transaction[] = [ txn, ... ];\n *\n * <ProgressBarHelperComponent txn={txn} merchantToTransactionMap={merchantToTransactionMap} transactions={transactions} />\n * ```\n *\n * @param txn The current transaction to visualize.\n * @param merchantToTransactionMap The map containing transaction counts for each merchant.\n * @param transactions The full list of transactions.\n *\n * @returns A React component rendering the merchant's name, the number of transactions, and a progress bar with the percentage.\n */\nconst ProgressBarHelperComponent: React.FC<{\n  txn: Transaction;\n  merchantToTransactionMap: MerchantTransactionMetadata[];\n  transactions: Transaction[];\n}> = ({ txn, merchantToTransactionMap, transactions }) => {\n  const { merchantName } = txn;\n  const { count } = getMerchantMetadata(merchantName, merchantToTransactionMap);\n  const percentage = computePercentage(transactions.length, count);\n\n  return (\n    <ListItem key={txn.name}>\n      <Text className=\"truncate\">{merchantName}</Text>\n      <div>\n        <Flex justifyContent=\"end\" className=\"space-x-4\">\n          <Text className=\"truncate\">{count} transactions</Text>\n          <div className=\"w-44\">\n            <Flex className=\"space-x-3 mt-3\">\n              <ProgressBar\n                value={percentage}\n                tooltip=\"\"\n                showAnimation={true}\n                color=\"slate\"\n              />\n              <Title>{formatNumber(percentage, 0)}%</Title>\n            </Flex>\n          </div>\n        </Flex>\n      </div>\n    </ListItem>\n  );\n};\n\ninterface MerchantTransactionMetadata {\n  merchantName: string;\n  count: number;\n}\n\nconst getMerchantMetadata = (\n  merchantName: string,\n  metadataList: MerchantTransactionMetadata[],\n) => {\n  const data = metadataList.find((m) => m.merchantName === merchantName);\n  return data || { merchantName: '', count: 0 };\n};\n\nconst computePercentage = (\n  totalTransactions: number,\n  merchantTransactionCount: number,\n) => {\n  return (\n    (Math.abs(totalTransactions - merchantTransactionCount) /\n      totalTransactions) *\n    100\n  );\n};\n"],"names":["MonthlyExpenditureCard","transactions","children","totalExpenditure","txn","acc","totalIncome","netSavings","averageTransactionSize","largestTransaction","smallestTransaction","merchantBreakdown","paymentMethodBreakdown","transactionFrequency","date","cashFlowAnalysis","jsxs","jsx","Card","CardHeader","CardTitle","CardContent","merchant","count","method","amount","TransactionAnalyticsByMonthContext","createContext","TransactionAnalyticsByMonth","Component","props","__publicField","React.createRef","categoriesMap","transaction","categoryName","currentCategory","currentAmount","monthlyTransactions","monthYear","monthData","months","monthTrans","a","b","categorySet","result","category","className","monthsData","cn","Tabs","TabsList","TabsTrigger","TabsContent","TransactionsCategorizePieChart","TransactionCategories","valueFormatter","number","filterByCategory","data","selectedCategory","setSelectedCategory","React.useState","filteredData","setFilteredData","React.useEffect","countTransactionsByCategory","transactions2","counts","countTransactionsByMerchant","merchantCounts","merchantToTransactionMap","TremorCard","Flex","Title","Select","SelectItem","RocketIcon","Grid","Text","BarChart","DonutChart","Col","Bold","List","ProgressBarHelperComponent","MONTHS","convertDateFormat","dateString","monthNumber","year","TransactionContent","item","getAlltransactionForTheMonthAcrossAllCategories","allTransactions","categoricalComponent","monthlyTransactionData","ListItem","Icon","CardDescription","CardFooter","ScatterChart","numberOfTransactions","transactionSize","_a","merchantName","getMerchantMetadata","percentage","computePercentage","ProgressBar","formatNumber","metadataList","m","totalTransactions","merchantTransactionCount"],"mappings":"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"}