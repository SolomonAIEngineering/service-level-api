{"version":3,"file":"card-b76ebb31.js","sources":["../../src/types/common/address.tsx","../../src/types/common/tag.tsx","../../src/types/error/error-metadata.tsx","../../src/types/error/backend-error.tsx","../../src/types/error/error-message.tsx","../../src/types/error/error-response.tsx","../../node_modules/clsx/dist/clsx.mjs","../../node_modules/tailwind-merge/dist/lib/tw-join.mjs","../../node_modules/tailwind-merge/dist/lib/class-utils.mjs","../../node_modules/tailwind-merge/dist/lib/lru-cache.mjs","../../node_modules/tailwind-merge/dist/lib/modifier-utils.mjs","../../node_modules/tailwind-merge/dist/lib/config-utils.mjs","../../node_modules/tailwind-merge/dist/lib/merge-classlist.mjs","../../node_modules/tailwind-merge/dist/lib/create-tailwind-merge.mjs","../../node_modules/tailwind-merge/dist/lib/from-theme.mjs","../../node_modules/tailwind-merge/dist/lib/validators.mjs","../../node_modules/tailwind-merge/dist/lib/default-config.mjs","../../node_modules/tailwind-merge/dist/lib/tw-merge.mjs","../../src/lib-utils/utils.tsx","../../src/types/financial/category.tsx","../../src/types/financial/budget.tsx","../../src/types/financial/milestone.tsx","../../src/types/financial/pocket-type.tsx","../../src/types/financial/forecast.tsx","../../src/types/financial/goal-type.tsx","../../src/types/financial/smart-goal.tsx","../../src/types/financial/pocket.tsx","../../src/types/financial/actionable-insight.tsx","../../src/types/financial/bank-account-status.tsx","../../src/types/financial/bank-account-type.tsx","../../src/types/financial/bank-account.tsx","../../src/types/financial/link-status.tsx","../../src/types/financial/link-type.tsx","../../src/types/financial/link.tsx","../../src/types/financial/stripe-subscription.tsx","../../src/types/financial/financial-profile.tsx","../../src/types/financial/plaid-link.tsx","../../src/types/financial/plaid-sync.tsx","../../src/types/financial/stripe-subscription-status.tsx","../../src/types/financial/token.tsx","../../src/types/financial/account-balance-history.tsx","../../src/types/financial/any.tsx","../../src/types/financial/category-metrics-financial-sub-profile.tsx","../../src/types/financial/category-monthly-expenditure.tsx","../../src/types/financial/category-monthly-income.tsx","../../src/types/financial/category-monthly-transaction-count.tsx","../../src/types/financial/debt-to-income-ratio.tsx","../../src/types/financial/expense-metrics-financial-sub-profile.tsx","../../src/types/financial/expense-metrics.tsx","../../src/types/financial/financial-profile-metrics.tsx","../../src/types/financial/income-expense-ratio.tsx","../../src/types/financial/income-metrics-financial-sub-profile.tsx","../../src/types/financial/income-metrics.tsx","../../src/types/financial/investment-transaction.tsx","../../src/types/financial/location-metrics-financial-sub-profile.tsx","../../src/types/financial/melody-financial-context.tsx","../../src/types/financial/merchant-metrics-financial-sub-profile.tsx","../../src/types/financial/merchant-monthly-expenditure.tsx","../../src/types/financial/monthly-balance.tsx","../../src/types/financial/monthly-expenditure.tsx","../../src/types/financial/monthly-income.tsx","../../src/types/financial/monthly-savings.tsx","../../src/types/financial/monthly-total-quantity-by-security-and-user.tsx","../../src/types/financial/monthly-transaction-count.tsx","../../src/types/financial/payment-channel-metrics-financial-sub-profile.tsx","../../src/types/financial/payment-channel-monthly-expenditure.tsx","../../src/types/financial/recurring-flow.tsx","../../src/types/financial/recurring-transactions-status.tsx","../../src/types/financial/recurring-transactions-frequency.tsx","../../src/types/financial/recurring-transaction.tsx","../../src/types/financial/total-investment-by-security.tsx","../../src/types/financial/transaction-aggregates-by-month.tsx","../../src/types/financial/transaction.tsx","../../src/types/financial/user-financial-health-metrics.tsx","../../src/types/social/social-user-profile.tsx","../../src/types/social/publication-type.tsx","../../src/types/social/publication.tsx","../../src/types/social/social-account.tsx","../../src/types/user/user-account.tsx","../../src/types/request-response/get-account-balance-history.tsx","../../src/types/request-response/get-category-monthly-transaction-count.tsx","../../src/types/request-response/get-debt-to-income-ratio.tsx","../../src/types/request-response/get-expense-metrics.tsx","../../src/types/request-response/get-financial-context.tsx","../../src/types/request-response/get-financial-profile.tsx","../../src/types/request-response/get-income-expense-ratio.tsx","../../src/types/request-response/get-income-metrics.tsx","../../src/types/request-response/get-merchant-monthly-expenditure.tsx","../../src/types/request-response/get-monthly-balance.tsx","../../src/types/request-response/get-monthly-expenditure.tsx","../../src/types/request-response/get-monthly-income.tsx","../../src/types/request-response/get-monthly-savings.tsx","../../src/types/request-response/get-monthly-total-quantity-by-security-and-user.tsx","../../src/types/request-response/get-monthly-transaction-count.tsx","../../src/types/request-response/get-payment-channel-monthly-expenditure.tsx","../../src/types/request-response/get-total-investment-by-security.tsx","../../src/types/request-response/get-transactions-for-bank-account.tsx","../../src/types/request-response/get-transactions.tsx","../../src/types/request-response/get-user-account-balance-history.tsx","../../src/types/request-response/get-user-category-monthly-expenditure.tsx","../../src/types/request-response/get-user-category-monthly-income.tsx","../../src/types/request-response/reset-password.tsx","../../src/types/request-response/update-user-profile.tsx","../../src/components/ui/card.tsx"],"sourcesContent":["/**\n * Represents a geographic address.\n *\n * This class provides a structured representation of a physical location, capturing details such as address line, city, state, unit, zipcode, and geo-coordinates.\n * It also has utility methods like `getFullAddress` to fetch a formatted string representation of the address.\n *\n * @example Constructing an `Address`:\n *\n * ```ts\n * // Example data\n * const addressData = {\n *   address: \"123 Main St\",\n *   city: \"Anytown\",\n *   state: \"CA\",\n *   unit: \"Apt 4B\",\n *   zipcode: \"12345\",\n *   lattitude: \"34.0522\",\n *   longitude: \"-118.2437\",\n *   id: \"unique-address-id\"\n * };\n *\n * const location = new Address(addressData);\n * console.log(location.getFullAddress()); // Outputs: \"123 Main St, Anytown, CA 12345\"\n * ```\n *\n * @property address - The main line of the address, typically the street name and number.\n * @property city - The city or municipality of the address.\n * @property state - The state or province of the address.\n * @property unit - Optional unit or apartment number.\n * @property zipcode - The postal code for the address.\n * @property lattitude - The geographic latitude of the address.\n * @property longitude - The geographic longitude of the address.\n * @property id - A unique identifier for the address.\n */\nclass Address {\n  address?: string = '';\n  city?: string = '';\n  state?: string = '';\n  unit?: string = '';\n  zipcode?: string = '';\n  lattitude?: string = '';\n  longitude?: string = '';\n  id?: string = '';\n\n  /**\n   * Initializes a new instance of the `Address` class.\n   * @param [data] - The data used to populate the properties of the class.\n   */\n  constructor(data?: Partial<Address>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  /**\n   * Returns a formatted string of the full address.\n   *\n   * @example\n   * ```ts\n   * const location = new Address({address: \"123 Main St\", city: \"Anytown\", state: \"CA\", zipcode: \"12345\"});\n   * console.log(location.getFullAddress()); // Outputs: \"123 Main St, Anytown, CA 12345\"\n   * ```\n   *\n   * @returns The formatted address string.\n   */\n  getFullAddress(): string {\n    return `${this.address}, ${this.city}, ${this.state} ${this.zipcode}`;\n  }\n}\n\nexport { Address };\n","/**\n * Represents a metadata tag.\n *\n * The `Tag` class provides a structured representation for tags, commonly used for categorization or metadata annotation.\n * Each tag can have a name, a description, and associated metadata.\n *\n * @remarks\n * The class provides utility methods like `getName`, `getDescription`, and `getMetadata` for fetching properties with a safe default value.\n *\n * @example Constructing a `Tag`:\n *\n * ```ts\n * // Example data\n * const tagData = {\n *   id: \"unique-tag-id\",\n *   tagName: \"ExampleTag\",\n *   tagDescription: \"A description for the ExampleTag\",\n *   metadata: [\"meta1\", \"meta2\"]\n * };\n *\n * const exampleTag = new Tag(tagData);\n * console.log(exampleTag.getName()); // Outputs: \"ExampleTag\"\n * ```\n *\n * @property id - A unique identifier for the tag.\n * @property tagName - The name of the tag.\n * @property tagDescription - A brief description of what the tag represents.\n * @property metadata - An array of associated metadata strings.\n *\n * @author Yoan Yomba\n */\nclass Tag {\n  id?: string;\n  tagName?: string;\n  tagDescription?: string;\n  metadata?: string[] = [];\n\n  /**\n   * Initializes a new instance of the `Tag` class.\n   * @param {Partial<Tag>} [data] - Data used to populate the properties of the class.\n   */\n  constructor(data?: Partial<Tag>) {\n    if (data)\n      Object.assign(this, {\n        ...data,\n        metadata: data?.metadata || [],\n      });\n  }\n\n  /**\n   * Fetches the tag's description or provides a default empty string if not set.\n   * @returns The tag's description or an empty string.\n   */\n  getDescription(): string {\n    return this.tagDescription || '';\n  }\n\n  /**\n   * Fetches the tag's name or provides a default empty string if not set.\n   * @returns The tag's name or an empty string.\n   */\n  getName(): string {\n    return this.tagName || '';\n  }\n\n  /**\n   * Fetches the tag's metadata or provides a default empty array if not set.\n   * @returns The tag's metadata array or an empty array.\n   */\n  getMetadata(): string[] {\n    return this.metadata || [];\n  }\n}\n\nexport { Tag };\n","/**\n * Represents metadata associated with an error.\n * This might be directly from a service or part of an error response.\n */\nclass ErrorMetadata {\n  /**\n   * An optional numeric code indicating the specific error.\n   */\n  code?: number;\n\n  /**\n   * An optional status string providing more context about the error's nature.\n   */\n  status?: string;\n\n  /**\n   * A more descriptive message explaining the error.\n   */\n  message?: string;\n\n  /**\n   * Detailed breakdown or additional information about the error.\n   * This can be useful for debugging or for more granular client-side handling.\n   */\n  details?: string[];\n\n  /**\n   * Creates a new instance of ErrorMetadata.\n   *\n   * @param data - A partial structure representing ErrorMetadata. Used for initialization.\n   */\n  constructor(data?: Partial<ErrorMetadata>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n\nexport { ErrorMetadata };\n","import { ErrorMetadata } from './error-metadata';\n\n/**\n * Represents an error response from the backend or service.\n */\nclass BackendError {\n  /**\n   * Contains an array of error metadata detailing the specifics of the error(s).\n   */\n  response: {\n    errors: ErrorMetadata[];\n  } = { errors: [] };\n\n  /**\n   * Creates a new instance of BackendError.\n   *\n   * @param data - A partial structure representing BackendError. Used for initialization.\n   */\n  constructor(data?: Partial<BackendError>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n        response: {\n          errors: data?.response?.errors?.map(\n            (error) => new ErrorMetadata(error),\n          ),\n        },\n      });\n    }\n  }\n}\n\nexport { BackendError };\n","import { BackendError } from './backend-error';\n\n/**\n * Represents an error message that might include HTTP-specific details.\n */\nclass ErrorMessage {\n  /**\n   * Contains the backend error details.\n   */\n  http_body: BackendError = new BackendError();\n\n  /**\n   * Represents the HTTP status code associated with this error.\n   */\n  http_status_code = 0;\n\n  /**\n   * Creates a new instance of ErrorMessage.\n   *\n   * @param data - A partial structure representing ErrorMessage. Used for initialization.\n   */\n  constructor(data?: Partial<ErrorMessage>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n        http_body: new BackendError(data?.http_body),\n        http_status_code: data?.http_status_code,\n      });\n    }\n  }\n}\n\nexport { ErrorMessage };\n","import { ErrorMessage } from './error-message';\n\n/**\n * Represents a full error response, which may be returned to a client or user.\n */\nclass ErrorResponse {\n  /**\n   * Contains the error message details including HTTP specifics.\n   */\n  error_message: ErrorMessage = new ErrorMessage();\n\n  /**\n   * Creates a new instance of ErrorResponse.\n   *\n   * @param data - A partial structure representing ErrorResponse. Used for initialization.\n   */\n  constructor(data?: Partial<ErrorResponse>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n        error_message: new ErrorMessage(data?.error_message),\n      });\n    }\n  }\n}\n\nexport { ErrorResponse };\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","/**\n * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.\n *\n * Specifically:\n * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js\n * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts\n *\n * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n */\nfunction twJoin() {\n  var index = 0;\n  var argument;\n  var resolvedValue;\n  var string = '';\n  while (index < arguments.length) {\n    if (argument = arguments[index++]) {\n      if (resolvedValue = toValue(argument)) {\n        string && (string += ' ');\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n}\nfunction toValue(mix) {\n  if (typeof mix === 'string') {\n    return mix;\n  }\n  var resolvedValue;\n  var string = '';\n  for (var k = 0; k < mix.length; k++) {\n    if (mix[k]) {\n      if (resolvedValue = toValue(mix[k])) {\n        string && (string += ' ');\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n}\n\nexport { twJoin };\n//# sourceMappingURL=tw-join.mjs.map\n","var CLASS_PART_SEPARATOR = '-';\nfunction createClassUtils(config) {\n  var classMap = createClassMap(config);\n  var conflictingClassGroups = config.conflictingClassGroups,\n    _config$conflictingCl = config.conflictingClassGroupModifiers,\n    conflictingClassGroupModifiers = _config$conflictingCl === void 0 ? {} : _config$conflictingCl;\n  function getClassGroupId(className) {\n    var classParts = className.split(CLASS_PART_SEPARATOR);\n    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n    if (classParts[0] === '' && classParts.length !== 1) {\n      classParts.shift();\n    }\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n  }\n  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {\n    var conflicts = conflictingClassGroups[classGroupId] || [];\n    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n      return [].concat(conflicts, conflictingClassGroupModifiers[classGroupId]);\n    }\n    return conflicts;\n  }\n  return {\n    getClassGroupId: getClassGroupId,\n    getConflictingClassGroupIds: getConflictingClassGroupIds\n  };\n}\nfunction getGroupRecursive(classParts, classPartObject) {\n  if (classParts.length === 0) {\n    return classPartObject.classGroupId;\n  }\n  var currentClassPart = classParts[0];\n  var nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n  var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;\n  if (classGroupFromNextClassPart) {\n    return classGroupFromNextClassPart;\n  }\n  if (classPartObject.validators.length === 0) {\n    return undefined;\n  }\n  var classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return classPartObject.validators.find(function (_ref) {\n    var validator = _ref.validator;\n    return validator(classRest);\n  })?.classGroupId;\n}\nvar arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nfunction getGroupIdForArbitraryProperty(className) {\n  if (arbitraryPropertyRegex.test(className)) {\n    var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n    var property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));\n    if (property) {\n      // I use two dots here because one dot is used as prefix for class groups in plugins\n      return 'arbitrary..' + property;\n    }\n  }\n}\n/**\n * Exported for testing only\n */\nfunction createClassMap(config) {\n  var theme = config.theme,\n    prefix = config.prefix;\n  var classMap = {\n    nextPart: new Map(),\n    validators: []\n  };\n  var prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n  prefixedClassGroupEntries.forEach(function (_ref2) {\n    var classGroupId = _ref2[0],\n      classGroup = _ref2[1];\n    processClassesRecursively(classGroup, classMap, classGroupId, theme);\n  });\n  return classMap;\n}\nfunction processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {\n  classGroup.forEach(function (classDefinition) {\n    if (typeof classDefinition === 'string') {\n      var classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition === 'function') {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId: classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(function (_ref3) {\n      var key = _ref3[0],\n        classGroup = _ref3[1];\n      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n}\nfunction getPart(classPartObject, path) {\n  var currentClassPartObject = classPartObject;\n  path.split(CLASS_PART_SEPARATOR).forEach(function (pathPart) {\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\n      currentClassPartObject.nextPart.set(pathPart, {\n        nextPart: new Map(),\n        validators: []\n      });\n    }\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  });\n  return currentClassPartObject;\n}\nfunction isThemeGetter(func) {\n  return func.isThemeGetter;\n}\nfunction getPrefixedClassGroupEntries(classGroupEntries, prefix) {\n  if (!prefix) {\n    return classGroupEntries;\n  }\n  return classGroupEntries.map(function (_ref4) {\n    var classGroupId = _ref4[0],\n      classGroup = _ref4[1];\n    var prefixedClassGroup = classGroup.map(function (classDefinition) {\n      if (typeof classDefinition === 'string') {\n        return prefix + classDefinition;\n      }\n      if (typeof classDefinition === 'object') {\n        return Object.fromEntries(Object.entries(classDefinition).map(function (_ref5) {\n          var key = _ref5[0],\n            value = _ref5[1];\n          return [prefix + key, value];\n        }));\n      }\n      return classDefinition;\n    });\n    return [classGroupId, prefixedClassGroup];\n  });\n}\n\nexport { createClassMap, createClassUtils };\n//# sourceMappingURL=class-utils.mjs.map\n","// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance\nfunction createLruCache(maxCacheSize) {\n  if (maxCacheSize < 1) {\n    return {\n      get: function get() {\n        return undefined;\n      },\n      set: function set() {}\n    };\n  }\n  var cacheSize = 0;\n  var cache = new Map();\n  var previousCache = new Map();\n  function update(key, value) {\n    cache.set(key, value);\n    cacheSize++;\n    if (cacheSize > maxCacheSize) {\n      cacheSize = 0;\n      previousCache = cache;\n      cache = new Map();\n    }\n  }\n  return {\n    get: function get(key) {\n      var value = cache.get(key);\n      if (value !== undefined) {\n        return value;\n      }\n      if ((value = previousCache.get(key)) !== undefined) {\n        update(key, value);\n        return value;\n      }\n    },\n    set: function set(key, value) {\n      if (cache.has(key)) {\n        cache.set(key, value);\n      } else {\n        update(key, value);\n      }\n    }\n  };\n}\n\nexport { createLruCache };\n//# sourceMappingURL=lru-cache.mjs.map\n","var IMPORTANT_MODIFIER = '!';\nfunction createSplitModifiers(config) {\n  var separator = config.separator || ':';\n  var isSeparatorSingleCharacter = separator.length === 1;\n  var firstSeparatorCharacter = separator[0];\n  var separatorLength = separator.length;\n  // splitModifiers inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\n  return function splitModifiers(className) {\n    var modifiers = [];\n    var bracketDepth = 0;\n    var modifierStart = 0;\n    var postfixModifierPosition;\n    for (var index = 0; index < className.length; index++) {\n      var currentCharacter = className[index];\n      if (bracketDepth === 0) {\n        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {\n          modifiers.push(className.slice(modifierStart, index));\n          modifierStart = index + separatorLength;\n          continue;\n        }\n        if (currentCharacter === '/') {\n          postfixModifierPosition = index;\n          continue;\n        }\n      }\n      if (currentCharacter === '[') {\n        bracketDepth++;\n      } else if (currentCharacter === ']') {\n        bracketDepth--;\n      }\n    }\n    var baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n    var hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);\n    var baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;\n    var maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;\n    return {\n      modifiers: modifiers,\n      hasImportantModifier: hasImportantModifier,\n      baseClassName: baseClassName,\n      maybePostfixModifierPosition: maybePostfixModifierPosition\n    };\n  };\n}\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */\nfunction sortModifiers(modifiers) {\n  if (modifiers.length <= 1) {\n    return modifiers;\n  }\n  var sortedModifiers = [];\n  var unsortedModifiers = [];\n  modifiers.forEach(function (modifier) {\n    var isArbitraryVariant = modifier[0] === '[';\n    if (isArbitraryVariant) {\n      sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort().concat([modifier]));\n      unsortedModifiers = [];\n    } else {\n      unsortedModifiers.push(modifier);\n    }\n  });\n  sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort());\n  return sortedModifiers;\n}\n\nexport { IMPORTANT_MODIFIER, createSplitModifiers, sortModifiers };\n//# sourceMappingURL=modifier-utils.mjs.map\n","import { createClassUtils } from './class-utils.mjs';\nimport { createLruCache } from './lru-cache.mjs';\nimport { createSplitModifiers } from './modifier-utils.mjs';\n\nfunction createConfigUtils(config) {\n  return {\n    cache: createLruCache(config.cacheSize),\n    splitModifiers: createSplitModifiers(config),\n    ...createClassUtils(config)\n  };\n}\n\nexport { createConfigUtils };\n//# sourceMappingURL=config-utils.mjs.map\n","import { sortModifiers, IMPORTANT_MODIFIER } from './modifier-utils.mjs';\n\nvar SPLIT_CLASSES_REGEX = /\\s+/;\nfunction mergeClassList(classList, configUtils) {\n  var splitModifiers = configUtils.splitModifiers,\n    getClassGroupId = configUtils.getClassGroupId,\n    getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;\n  /**\n   * Set of classGroupIds in following format:\n   * `{importantModifier}{variantModifiers}{classGroupId}`\n   * @example 'float'\n   * @example 'hover:focus:bg-color'\n   * @example 'md:!pr'\n   */\n  var classGroupsInConflict = new Set();\n  return classList.trim().split(SPLIT_CLASSES_REGEX).map(function (originalClassName) {\n    var _splitModifiers = splitModifiers(originalClassName),\n      modifiers = _splitModifiers.modifiers,\n      hasImportantModifier = _splitModifiers.hasImportantModifier,\n      baseClassName = _splitModifiers.baseClassName,\n      maybePostfixModifierPosition = _splitModifiers.maybePostfixModifierPosition;\n    var classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n    var hasPostfixModifier = Boolean(maybePostfixModifierPosition);\n    if (!classGroupId) {\n      if (!maybePostfixModifierPosition) {\n        return {\n          isTailwindClass: false,\n          originalClassName: originalClassName\n        };\n      }\n      classGroupId = getClassGroupId(baseClassName);\n      if (!classGroupId) {\n        return {\n          isTailwindClass: false,\n          originalClassName: originalClassName\n        };\n      }\n      hasPostfixModifier = false;\n    }\n    var variantModifier = sortModifiers(modifiers).join(':');\n    var modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n    return {\n      isTailwindClass: true,\n      modifierId: modifierId,\n      classGroupId: classGroupId,\n      originalClassName: originalClassName,\n      hasPostfixModifier: hasPostfixModifier\n    };\n  }).reverse()\n  // Last class in conflict wins, so we need to filter conflicting classes in reverse order.\n  .filter(function (parsed) {\n    if (!parsed.isTailwindClass) {\n      return true;\n    }\n    var modifierId = parsed.modifierId,\n      classGroupId = parsed.classGroupId,\n      hasPostfixModifier = parsed.hasPostfixModifier;\n    var classId = modifierId + classGroupId;\n    if (classGroupsInConflict.has(classId)) {\n      return false;\n    }\n    classGroupsInConflict.add(classId);\n    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(function (group) {\n      return classGroupsInConflict.add(modifierId + group);\n    });\n    return true;\n  }).reverse().map(function (parsed) {\n    return parsed.originalClassName;\n  }).join(' ');\n}\n\nexport { mergeClassList };\n//# sourceMappingURL=merge-classlist.mjs.map\n","import { createConfigUtils } from './config-utils.mjs';\nimport { mergeClassList } from './merge-classlist.mjs';\nimport { twJoin } from './tw-join.mjs';\n\nfunction createTailwindMerge() {\n  for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++) {\n    createConfig[_key] = arguments[_key];\n  }\n  var configUtils;\n  var cacheGet;\n  var cacheSet;\n  var functionToCall = initTailwindMerge;\n  function initTailwindMerge(classList) {\n    var firstCreateConfig = createConfig[0],\n      restCreateConfig = createConfig.slice(1);\n    var config = restCreateConfig.reduce(function (previousConfig, createConfigCurrent) {\n      return createConfigCurrent(previousConfig);\n    }, firstCreateConfig());\n    configUtils = createConfigUtils(config);\n    cacheGet = configUtils.cache.get;\n    cacheSet = configUtils.cache.set;\n    functionToCall = tailwindMerge;\n    return tailwindMerge(classList);\n  }\n  function tailwindMerge(classList) {\n    var cachedResult = cacheGet(classList);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    var result = mergeClassList(classList, configUtils);\n    cacheSet(classList, result);\n    return result;\n  }\n  return function callTailwindMerge() {\n    return functionToCall(twJoin.apply(null, arguments));\n  };\n}\n\nexport { createTailwindMerge };\n//# sourceMappingURL=create-tailwind-merge.mjs.map\n","function fromTheme(key) {\n  var themeGetter = function themeGetter(theme) {\n    return theme[key] || [];\n  };\n  themeGetter.isThemeGetter = true;\n  return themeGetter;\n}\n\nexport { fromTheme };\n//# sourceMappingURL=from-theme.mjs.map\n","var arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);\nvar tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\n// Shadow always begins with x and y offset separated by underscore\nvar shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nfunction isLength(value) {\n  return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value) || isArbitraryLength(value);\n}\nfunction isArbitraryLength(value) {\n  return getIsArbitraryValue(value, 'length', isLengthOnly);\n}\nfunction isArbitrarySize(value) {\n  return getIsArbitraryValue(value, 'size', isNever);\n}\nfunction isArbitraryPosition(value) {\n  return getIsArbitraryValue(value, 'position', isNever);\n}\nfunction isArbitraryUrl(value) {\n  return getIsArbitraryValue(value, 'url', isUrl);\n}\nfunction isArbitraryNumber(value) {\n  return getIsArbitraryValue(value, 'number', isNumber);\n}\n/**\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\n */\nvar isArbitraryWeight = isArbitraryNumber;\nfunction isNumber(value) {\n  return !Number.isNaN(Number(value));\n}\nfunction isPercent(value) {\n  return value.endsWith('%') && isNumber(value.slice(0, -1));\n}\nfunction isInteger(value) {\n  return isIntegerOnly(value) || getIsArbitraryValue(value, 'number', isIntegerOnly);\n}\nfunction isArbitraryValue(value) {\n  return arbitraryValueRegex.test(value);\n}\nfunction isAny() {\n  return true;\n}\nfunction isTshirtSize(value) {\n  return tshirtUnitRegex.test(value);\n}\nfunction isArbitraryShadow(value) {\n  return getIsArbitraryValue(value, '', isShadow);\n}\nfunction getIsArbitraryValue(value, label, testValue) {\n  var result = arbitraryValueRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return result[1] === label;\n    }\n    return testValue(result[2]);\n  }\n  return false;\n}\nfunction isLengthOnly(value) {\n  return lengthUnitRegex.test(value);\n}\nfunction isNever() {\n  return false;\n}\nfunction isUrl(value) {\n  return value.startsWith('url(');\n}\nfunction isIntegerOnly(value) {\n  return Number.isInteger(Number(value));\n}\nfunction isShadow(value) {\n  return shadowRegex.test(value);\n}\n\nexport { isAny, isArbitraryLength, isArbitraryNumber, isArbitraryPosition, isArbitraryShadow, isArbitrarySize, isArbitraryUrl, isArbitraryValue, isArbitraryWeight, isInteger, isLength, isNumber, isPercent, isTshirtSize };\n//# sourceMappingURL=validators.mjs.map\n","import { fromTheme } from './from-theme.mjs';\nimport { isAny, isLength, isTshirtSize, isArbitraryValue, isPercent, isArbitraryLength, isInteger, isArbitraryNumber, isNumber, isArbitraryPosition, isArbitrarySize, isArbitraryUrl, isArbitraryShadow } from './validators.mjs';\n\nfunction getDefaultConfig() {\n  var colors = fromTheme('colors');\n  var spacing = fromTheme('spacing');\n  var blur = fromTheme('blur');\n  var brightness = fromTheme('brightness');\n  var borderColor = fromTheme('borderColor');\n  var borderRadius = fromTheme('borderRadius');\n  var borderSpacing = fromTheme('borderSpacing');\n  var borderWidth = fromTheme('borderWidth');\n  var contrast = fromTheme('contrast');\n  var grayscale = fromTheme('grayscale');\n  var hueRotate = fromTheme('hueRotate');\n  var invert = fromTheme('invert');\n  var gap = fromTheme('gap');\n  var gradientColorStops = fromTheme('gradientColorStops');\n  var gradientColorStopPositions = fromTheme('gradientColorStopPositions');\n  var inset = fromTheme('inset');\n  var margin = fromTheme('margin');\n  var opacity = fromTheme('opacity');\n  var padding = fromTheme('padding');\n  var saturate = fromTheme('saturate');\n  var scale = fromTheme('scale');\n  var sepia = fromTheme('sepia');\n  var skew = fromTheme('skew');\n  var space = fromTheme('space');\n  var translate = fromTheme('translate');\n  var getOverscroll = function getOverscroll() {\n    return ['auto', 'contain', 'none'];\n  };\n  var getOverflow = function getOverflow() {\n    return ['auto', 'hidden', 'clip', 'visible', 'scroll'];\n  };\n  var getSpacingWithAutoAndArbitrary = function getSpacingWithAutoAndArbitrary() {\n    return ['auto', isArbitraryValue, spacing];\n  };\n  var getSpacingWithArbitrary = function getSpacingWithArbitrary() {\n    return [isArbitraryValue, spacing];\n  };\n  var getLengthWithEmpty = function getLengthWithEmpty() {\n    return ['', isLength];\n  };\n  var getNumberWithAutoAndArbitrary = function getNumberWithAutoAndArbitrary() {\n    return ['auto', isNumber, isArbitraryValue];\n  };\n  var getPositions = function getPositions() {\n    return ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top'];\n  };\n  var getLineStyles = function getLineStyles() {\n    return ['solid', 'dashed', 'dotted', 'double', 'none'];\n  };\n  var getBlendModes = function getBlendModes() {\n    return ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity', 'plus-lighter'];\n  };\n  var getAlign = function getAlign() {\n    return ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch'];\n  };\n  var getZeroAndEmpty = function getZeroAndEmpty() {\n    return ['', '0', isArbitraryValue];\n  };\n  var getBreaks = function getBreaks() {\n    return ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];\n  };\n  var getNumber = function getNumber() {\n    return [isNumber, isArbitraryNumber];\n  };\n  var getNumberAndArbitrary = function getNumberAndArbitrary() {\n    return [isNumber, isArbitraryValue];\n  };\n  return {\n    cacheSize: 500,\n    theme: {\n      colors: [isAny],\n      spacing: [isLength],\n      blur: ['none', '', isTshirtSize, isArbitraryValue],\n      brightness: getNumber(),\n      borderColor: [colors],\n      borderRadius: ['none', '', 'full', isTshirtSize, isArbitraryValue],\n      borderSpacing: getSpacingWithArbitrary(),\n      borderWidth: getLengthWithEmpty(),\n      contrast: getNumber(),\n      grayscale: getZeroAndEmpty(),\n      hueRotate: getNumberAndArbitrary(),\n      invert: getZeroAndEmpty(),\n      gap: getSpacingWithArbitrary(),\n      gradientColorStops: [colors],\n      gradientColorStopPositions: [isPercent, isArbitraryLength],\n      inset: getSpacingWithAutoAndArbitrary(),\n      margin: getSpacingWithAutoAndArbitrary(),\n      opacity: getNumber(),\n      padding: getSpacingWithArbitrary(),\n      saturate: getNumber(),\n      scale: getNumber(),\n      sepia: getZeroAndEmpty(),\n      skew: getNumberAndArbitrary(),\n      space: getSpacingWithArbitrary(),\n      translate: getSpacingWithArbitrary()\n    },\n    classGroups: {\n      // Layout\n      /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */\n      aspect: [{\n        aspect: ['auto', 'square', 'video', isArbitraryValue]\n      }],\n      /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       */\n      container: ['container'],\n      /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */\n      columns: [{\n        columns: [isTshirtSize]\n      }],\n      /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */\n      'break-after': [{\n        'break-after': getBreaks()\n      }],\n      /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */\n      'break-before': [{\n        'break-before': getBreaks()\n      }],\n      /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */\n      'break-inside': [{\n        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']\n      }],\n      /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */\n      'box-decoration': [{\n        'box-decoration': ['slice', 'clone']\n      }],\n      /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */\n      box: [{\n        box: ['border', 'content']\n      }],\n      /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */\n      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],\n      /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */\n      \"float\": [{\n        \"float\": ['right', 'left', 'none']\n      }],\n      /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */\n      clear: [{\n        clear: ['left', 'right', 'both', 'none']\n      }],\n      /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */\n      isolation: ['isolate', 'isolation-auto'],\n      /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */\n      'object-fit': [{\n        object: ['contain', 'cover', 'fill', 'none', 'scale-down']\n      }],\n      /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */\n      'object-position': [{\n        object: [].concat(getPositions(), [isArbitraryValue])\n      }],\n      /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      overflow: [{\n        overflow: getOverflow()\n      }],\n      /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      'overflow-x': [{\n        'overflow-x': getOverflow()\n      }],\n      /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      'overflow-y': [{\n        'overflow-y': getOverflow()\n      }],\n      /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      overscroll: [{\n        overscroll: getOverscroll()\n      }],\n      /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      'overscroll-x': [{\n        'overscroll-x': getOverscroll()\n      }],\n      /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      'overscroll-y': [{\n        'overscroll-y': getOverscroll()\n      }],\n      /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */\n      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],\n      /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      inset: [{\n        inset: [inset]\n      }],\n      /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      'inset-x': [{\n        'inset-x': [inset]\n      }],\n      /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      'inset-y': [{\n        'inset-y': [inset]\n      }],\n      /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      start: [{\n        start: [inset]\n      }],\n      /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      end: [{\n        end: [inset]\n      }],\n      /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      top: [{\n        top: [inset]\n      }],\n      /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      right: [{\n        right: [inset]\n      }],\n      /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      bottom: [{\n        bottom: [inset]\n      }],\n      /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      left: [{\n        left: [inset]\n      }],\n      /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */\n      visibility: ['visible', 'invisible', 'collapse'],\n      /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */\n      z: [{\n        z: ['auto', isInteger]\n      }],\n      // Flexbox and Grid\n      /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */\n      basis: [{\n        basis: getSpacingWithAutoAndArbitrary()\n      }],\n      /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */\n      'flex-direction': [{\n        flex: ['row', 'row-reverse', 'col', 'col-reverse']\n      }],\n      /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */\n      'flex-wrap': [{\n        flex: ['wrap', 'wrap-reverse', 'nowrap']\n      }],\n      /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */\n      flex: [{\n        flex: ['1', 'auto', 'initial', 'none', isArbitraryValue]\n      }],\n      /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */\n      grow: [{\n        grow: getZeroAndEmpty()\n      }],\n      /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */\n      shrink: [{\n        shrink: getZeroAndEmpty()\n      }],\n      /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */\n      order: [{\n        order: ['first', 'last', 'none', isInteger]\n      }],\n      /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */\n      'grid-cols': [{\n        'grid-cols': [isAny]\n      }],\n      /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-start-end': [{\n        col: ['auto', {\n          span: ['full', isInteger]\n        }, isArbitraryValue]\n      }],\n      /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-start': [{\n        'col-start': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-end': [{\n        'col-end': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */\n      'grid-rows': [{\n        'grid-rows': [isAny]\n      }],\n      /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-start-end': [{\n        row: ['auto', {\n          span: [isInteger]\n        }, isArbitraryValue]\n      }],\n      /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-start': [{\n        'row-start': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-end': [{\n        'row-end': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */\n      'grid-flow': [{\n        'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']\n      }],\n      /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */\n      'auto-cols': [{\n        'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue]\n      }],\n      /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */\n      'auto-rows': [{\n        'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue]\n      }],\n      /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */\n      gap: [{\n        gap: [gap]\n      }],\n      /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */\n      'gap-x': [{\n        'gap-x': [gap]\n      }],\n      /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */\n      'gap-y': [{\n        'gap-y': [gap]\n      }],\n      /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */\n      'justify-content': [{\n        justify: ['normal'].concat(getAlign())\n      }],\n      /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */\n      'justify-items': [{\n        'justify-items': ['start', 'end', 'center', 'stretch']\n      }],\n      /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */\n      'justify-self': [{\n        'justify-self': ['auto', 'start', 'end', 'center', 'stretch']\n      }],\n      /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */\n      'align-content': [{\n        content: ['normal'].concat(getAlign(), ['baseline'])\n      }],\n      /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */\n      'align-items': [{\n        items: ['start', 'end', 'center', 'baseline', 'stretch']\n      }],\n      /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */\n      'align-self': [{\n        self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline']\n      }],\n      /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */\n      'place-content': [{\n        'place-content': [].concat(getAlign(), ['baseline'])\n      }],\n      /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */\n      'place-items': [{\n        'place-items': ['start', 'end', 'center', 'baseline', 'stretch']\n      }],\n      /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */\n      'place-self': [{\n        'place-self': ['auto', 'start', 'end', 'center', 'stretch']\n      }],\n      // Spacing\n      /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */\n      p: [{\n        p: [padding]\n      }],\n      /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */\n      px: [{\n        px: [padding]\n      }],\n      /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */\n      py: [{\n        py: [padding]\n      }],\n      /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */\n      ps: [{\n        ps: [padding]\n      }],\n      /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pe: [{\n        pe: [padding]\n      }],\n      /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pt: [{\n        pt: [padding]\n      }],\n      /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pr: [{\n        pr: [padding]\n      }],\n      /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pb: [{\n        pb: [padding]\n      }],\n      /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pl: [{\n        pl: [padding]\n      }],\n      /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */\n      m: [{\n        m: [margin]\n      }],\n      /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mx: [{\n        mx: [margin]\n      }],\n      /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */\n      my: [{\n        my: [margin]\n      }],\n      /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ms: [{\n        ms: [margin]\n      }],\n      /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */\n      me: [{\n        me: [margin]\n      }],\n      /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mt: [{\n        mt: [margin]\n      }],\n      /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mr: [{\n        mr: [margin]\n      }],\n      /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mb: [{\n        mb: [margin]\n      }],\n      /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ml: [{\n        ml: [margin]\n      }],\n      /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-x': [{\n        'space-x': [space]\n      }],\n      /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-x-reverse': ['space-x-reverse'],\n      /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-y': [{\n        'space-y': [space]\n      }],\n      /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-y-reverse': ['space-y-reverse'],\n      // Sizing\n      /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */\n      w: [{\n        w: ['auto', 'min', 'max', 'fit', isArbitraryValue, spacing]\n      }],\n      /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */\n      'min-w': [{\n        'min-w': ['min', 'max', 'fit', isArbitraryValue, isLength]\n      }],\n      /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */\n      'max-w': [{\n        'max-w': ['0', 'none', 'full', 'min', 'max', 'fit', 'prose', {\n          screen: [isTshirtSize]\n        }, isTshirtSize, isArbitraryValue]\n      }],\n      /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */\n      h: [{\n        h: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit']\n      }],\n      /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */\n      'min-h': [{\n        'min-h': ['min', 'max', 'fit', isArbitraryValue, isLength]\n      }],\n      /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */\n      'max-h': [{\n        'max-h': [isArbitraryValue, spacing, 'min', 'max', 'fit']\n      }],\n      // Typography\n      /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */\n      'font-size': [{\n        text: ['base', isTshirtSize, isArbitraryLength]\n      }],\n      /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */\n      'font-smoothing': ['antialiased', 'subpixel-antialiased'],\n      /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */\n      'font-style': ['italic', 'not-italic'],\n      /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */\n      'font-weight': [{\n        font: ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black', isArbitraryNumber]\n      }],\n      /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */\n      'font-family': [{\n        font: [isAny]\n      }],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-normal': ['normal-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-ordinal': ['ordinal'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-slashed-zero': ['slashed-zero'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-figure': ['lining-nums', 'oldstyle-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-spacing': ['proportional-nums', 'tabular-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-fraction': ['diagonal-fractions', 'stacked-fractons'],\n      /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */\n      tracking: [{\n        tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', isArbitraryValue]\n      }],\n      /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */\n      'line-clamp': [{\n        'line-clamp': ['none', isNumber, isArbitraryNumber]\n      }],\n      /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */\n      leading: [{\n        leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isArbitraryValue, isLength]\n      }],\n      /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */\n      'list-image': [{\n        'list-image': ['none', isArbitraryValue]\n      }],\n      /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */\n      'list-style-type': [{\n        list: ['none', 'disc', 'decimal', isArbitraryValue]\n      }],\n      /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */\n      'list-style-position': [{\n        list: ['inside', 'outside']\n      }],\n      /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/placeholder-color\n       */\n      'placeholder-color': [{\n        placeholder: [colors]\n      }],\n      /**\n       * Placeholder Opacity\n       * @see https://tailwindcss.com/docs/placeholder-opacity\n       */\n      'placeholder-opacity': [{\n        'placeholder-opacity': [opacity]\n      }],\n      /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */\n      'text-alignment': [{\n        text: ['left', 'center', 'right', 'justify', 'start', 'end']\n      }],\n      /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */\n      'text-color': [{\n        text: [colors]\n      }],\n      /**\n       * Text Opacity\n       * @see https://tailwindcss.com/docs/text-opacity\n       */\n      'text-opacity': [{\n        'text-opacity': [opacity]\n      }],\n      /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */\n      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],\n      /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */\n      'text-decoration-style': [{\n        decoration: [].concat(getLineStyles(), ['wavy'])\n      }],\n      /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */\n      'text-decoration-thickness': [{\n        decoration: ['auto', 'from-font', isLength]\n      }],\n      /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */\n      'underline-offset': [{\n        'underline-offset': ['auto', isArbitraryValue, isLength]\n      }],\n      /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */\n      'text-decoration-color': [{\n        decoration: [colors]\n      }],\n      /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */\n      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],\n      /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */\n      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],\n      /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */\n      indent: [{\n        indent: getSpacingWithArbitrary()\n      }],\n      /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */\n      'vertical-align': [{\n        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryValue]\n      }],\n      /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */\n      whitespace: [{\n        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']\n      }],\n      /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */\n      \"break\": [{\n        \"break\": ['normal', 'words', 'all', 'keep']\n      }],\n      /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */\n      hyphens: [{\n        hyphens: ['none', 'manual', 'auto']\n      }],\n      /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */\n      content: [{\n        content: ['none', isArbitraryValue]\n      }],\n      // Backgrounds\n      /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */\n      'bg-attachment': [{\n        bg: ['fixed', 'local', 'scroll']\n      }],\n      /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */\n      'bg-clip': [{\n        'bg-clip': ['border', 'padding', 'content', 'text']\n      }],\n      /**\n       * Background Opacity\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/background-opacity\n       */\n      'bg-opacity': [{\n        'bg-opacity': [opacity]\n      }],\n      /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */\n      'bg-origin': [{\n        'bg-origin': ['border', 'padding', 'content']\n      }],\n      /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */\n      'bg-position': [{\n        bg: [].concat(getPositions(), [isArbitraryPosition])\n      }],\n      /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */\n      'bg-repeat': [{\n        bg: ['no-repeat', {\n          repeat: ['', 'x', 'y', 'round', 'space']\n        }]\n      }],\n      /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */\n      'bg-size': [{\n        bg: ['auto', 'cover', 'contain', isArbitrarySize]\n      }],\n      /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */\n      'bg-image': [{\n        bg: ['none', {\n          'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']\n        }, isArbitraryUrl]\n      }],\n      /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */\n      'bg-color': [{\n        bg: [colors]\n      }],\n      /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-from-pos': [{\n        from: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-via-pos': [{\n        via: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-to-pos': [{\n        to: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-from': [{\n        from: [gradientColorStops]\n      }],\n      /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-via': [{\n        via: [gradientColorStops]\n      }],\n      /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-to': [{\n        to: [gradientColorStops]\n      }],\n      // Borders\n      /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      rounded: [{\n        rounded: [borderRadius]\n      }],\n      /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-s': [{\n        'rounded-s': [borderRadius]\n      }],\n      /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-e': [{\n        'rounded-e': [borderRadius]\n      }],\n      /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-t': [{\n        'rounded-t': [borderRadius]\n      }],\n      /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-r': [{\n        'rounded-r': [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-b': [{\n        'rounded-b': [borderRadius]\n      }],\n      /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-l': [{\n        'rounded-l': [borderRadius]\n      }],\n      /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-ss': [{\n        'rounded-ss': [borderRadius]\n      }],\n      /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-se': [{\n        'rounded-se': [borderRadius]\n      }],\n      /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-ee': [{\n        'rounded-ee': [borderRadius]\n      }],\n      /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-es': [{\n        'rounded-es': [borderRadius]\n      }],\n      /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-tl': [{\n        'rounded-tl': [borderRadius]\n      }],\n      /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-tr': [{\n        'rounded-tr': [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-br': [{\n        'rounded-br': [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-bl': [{\n        'rounded-bl': [borderRadius]\n      }],\n      /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w': [{\n        border: [borderWidth]\n      }],\n      /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-x': [{\n        'border-x': [borderWidth]\n      }],\n      /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-y': [{\n        'border-y': [borderWidth]\n      }],\n      /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-s': [{\n        'border-s': [borderWidth]\n      }],\n      /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-e': [{\n        'border-e': [borderWidth]\n      }],\n      /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-t': [{\n        'border-t': [borderWidth]\n      }],\n      /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-r': [{\n        'border-r': [borderWidth]\n      }],\n      /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-b': [{\n        'border-b': [borderWidth]\n      }],\n      /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-l': [{\n        'border-l': [borderWidth]\n      }],\n      /**\n       * Border Opacity\n       * @see https://tailwindcss.com/docs/border-opacity\n       */\n      'border-opacity': [{\n        'border-opacity': [opacity]\n      }],\n      /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */\n      'border-style': [{\n        border: [].concat(getLineStyles(), ['hidden'])\n      }],\n      /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-x': [{\n        'divide-x': [borderWidth]\n      }],\n      /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-x-reverse': ['divide-x-reverse'],\n      /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-y': [{\n        'divide-y': [borderWidth]\n      }],\n      /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-y-reverse': ['divide-y-reverse'],\n      /**\n       * Divide Opacity\n       * @see https://tailwindcss.com/docs/divide-opacity\n       */\n      'divide-opacity': [{\n        'divide-opacity': [opacity]\n      }],\n      /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/divide-style\n       */\n      'divide-style': [{\n        divide: getLineStyles()\n      }],\n      /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color': [{\n        border: [borderColor]\n      }],\n      /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-x': [{\n        'border-x': [borderColor]\n      }],\n      /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-y': [{\n        'border-y': [borderColor]\n      }],\n      /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-t': [{\n        'border-t': [borderColor]\n      }],\n      /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-r': [{\n        'border-r': [borderColor]\n      }],\n      /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-b': [{\n        'border-b': [borderColor]\n      }],\n      /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-l': [{\n        'border-l': [borderColor]\n      }],\n      /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */\n      'divide-color': [{\n        divide: [borderColor]\n      }],\n      /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */\n      'outline-style': [{\n        outline: [''].concat(getLineStyles())\n      }],\n      /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */\n      'outline-offset': [{\n        'outline-offset': [isArbitraryValue, isLength]\n      }],\n      /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */\n      'outline-w': [{\n        outline: [isLength]\n      }],\n      /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */\n      'outline-color': [{\n        outline: [colors]\n      }],\n      /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/ring-width\n       */\n      'ring-w': [{\n        ring: getLengthWithEmpty()\n      }],\n      /**\n       * Ring Width Inset\n       * @see https://tailwindcss.com/docs/ring-width\n       */\n      'ring-w-inset': ['ring-inset'],\n      /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/ring-color\n       */\n      'ring-color': [{\n        ring: [colors]\n      }],\n      /**\n       * Ring Opacity\n       * @see https://tailwindcss.com/docs/ring-opacity\n       */\n      'ring-opacity': [{\n        'ring-opacity': [opacity]\n      }],\n      /**\n       * Ring Offset Width\n       * @see https://tailwindcss.com/docs/ring-offset-width\n       */\n      'ring-offset-w': [{\n        'ring-offset': [isLength]\n      }],\n      /**\n       * Ring Offset Color\n       * @see https://tailwindcss.com/docs/ring-offset-color\n       */\n      'ring-offset-color': [{\n        'ring-offset': [colors]\n      }],\n      // Effects\n      /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */\n      shadow: [{\n        shadow: ['', 'inner', 'none', isTshirtSize, isArbitraryShadow]\n      }],\n      /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow-color\n       */\n      'shadow-color': [{\n        shadow: [isAny]\n      }],\n      /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */\n      opacity: [{\n        opacity: [opacity]\n      }],\n      /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */\n      'mix-blend': [{\n        'mix-blend': getBlendModes()\n      }],\n      /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */\n      'bg-blend': [{\n        'bg-blend': getBlendModes()\n      }],\n      // Filters\n      /**\n       * Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/filter\n       */\n      filter: [{\n        filter: ['', 'none']\n      }],\n      /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */\n      blur: [{\n        blur: [blur]\n      }],\n      /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */\n      brightness: [{\n        brightness: [brightness]\n      }],\n      /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */\n      contrast: [{\n        contrast: [contrast]\n      }],\n      /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */\n      'drop-shadow': [{\n        'drop-shadow': ['', 'none', isTshirtSize, isArbitraryValue]\n      }],\n      /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */\n      grayscale: [{\n        grayscale: [grayscale]\n      }],\n      /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */\n      'hue-rotate': [{\n        'hue-rotate': [hueRotate]\n      }],\n      /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */\n      invert: [{\n        invert: [invert]\n      }],\n      /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */\n      saturate: [{\n        saturate: [saturate]\n      }],\n      /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */\n      sepia: [{\n        sepia: [sepia]\n      }],\n      /**\n       * Backdrop Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */\n      'backdrop-filter': [{\n        'backdrop-filter': ['', 'none']\n      }],\n      /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */\n      'backdrop-blur': [{\n        'backdrop-blur': [blur]\n      }],\n      /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */\n      'backdrop-brightness': [{\n        'backdrop-brightness': [brightness]\n      }],\n      /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */\n      'backdrop-contrast': [{\n        'backdrop-contrast': [contrast]\n      }],\n      /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */\n      'backdrop-grayscale': [{\n        'backdrop-grayscale': [grayscale]\n      }],\n      /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */\n      'backdrop-hue-rotate': [{\n        'backdrop-hue-rotate': [hueRotate]\n      }],\n      /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */\n      'backdrop-invert': [{\n        'backdrop-invert': [invert]\n      }],\n      /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */\n      'backdrop-opacity': [{\n        'backdrop-opacity': [opacity]\n      }],\n      /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */\n      'backdrop-saturate': [{\n        'backdrop-saturate': [saturate]\n      }],\n      /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */\n      'backdrop-sepia': [{\n        'backdrop-sepia': [sepia]\n      }],\n      // Tables\n      /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */\n      'border-collapse': [{\n        border: ['collapse', 'separate']\n      }],\n      /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing': [{\n        'border-spacing': [borderSpacing]\n      }],\n      /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing-x': [{\n        'border-spacing-x': [borderSpacing]\n      }],\n      /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing-y': [{\n        'border-spacing-y': [borderSpacing]\n      }],\n      /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */\n      'table-layout': [{\n        table: ['auto', 'fixed']\n      }],\n      /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */\n      caption: [{\n        caption: ['top', 'bottom']\n      }],\n      // Transitions and Animation\n      /**\n       * Tranisition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */\n      transition: [{\n        transition: ['none', 'all', '', 'colors', 'opacity', 'shadow', 'transform', isArbitraryValue]\n      }],\n      /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */\n      duration: [{\n        duration: getNumberAndArbitrary()\n      }],\n      /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */\n      ease: [{\n        ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue]\n      }],\n      /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */\n      delay: [{\n        delay: getNumberAndArbitrary()\n      }],\n      /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */\n      animate: [{\n        animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue]\n      }],\n      // Transforms\n      /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */\n      transform: [{\n        transform: ['', 'gpu', 'none']\n      }],\n      /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */\n      scale: [{\n        scale: [scale]\n      }],\n      /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-x': [{\n        'scale-x': [scale]\n      }],\n      /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-y': [{\n        'scale-y': [scale]\n      }],\n      /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      rotate: [{\n        rotate: [isInteger, isArbitraryValue]\n      }],\n      /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-x': [{\n        'translate-x': [translate]\n      }],\n      /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-y': [{\n        'translate-y': [translate]\n      }],\n      /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */\n      'skew-x': [{\n        'skew-x': [skew]\n      }],\n      /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */\n      'skew-y': [{\n        'skew-y': [skew]\n      }],\n      /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */\n      'transform-origin': [{\n        origin: ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryValue]\n      }],\n      // Interactivity\n      /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */\n      accent: [{\n        accent: ['auto', colors]\n      }],\n      /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */\n      appearance: ['appearance-none'],\n      /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */\n      cursor: [{\n        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryValue]\n      }],\n      /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */\n      'caret-color': [{\n        caret: [colors]\n      }],\n      /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */\n      'pointer-events': [{\n        'pointer-events': ['none', 'auto']\n      }],\n      /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */\n      resize: [{\n        resize: ['none', 'y', 'x', '']\n      }],\n      /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */\n      'scroll-behavior': [{\n        scroll: ['auto', 'smooth']\n      }],\n      /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-m': [{\n        'scroll-m': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mx': [{\n        'scroll-mx': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-my': [{\n        'scroll-my': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-ms': [{\n        'scroll-ms': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-me': [{\n        'scroll-me': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mt': [{\n        'scroll-mt': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mr': [{\n        'scroll-mr': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mb': [{\n        'scroll-mb': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-ml': [{\n        'scroll-ml': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-p': [{\n        'scroll-p': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-px': [{\n        'scroll-px': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-py': [{\n        'scroll-py': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-ps': [{\n        'scroll-ps': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pe': [{\n        'scroll-pe': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pt': [{\n        'scroll-pt': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pr': [{\n        'scroll-pr': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pb': [{\n        'scroll-pb': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pl': [{\n        'scroll-pl': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */\n      'snap-align': [{\n        snap: ['start', 'end', 'center', 'align-none']\n      }],\n      /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */\n      'snap-stop': [{\n        snap: ['normal', 'always']\n      }],\n      /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      'snap-type': [{\n        snap: ['none', 'x', 'y', 'both']\n      }],\n      /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      'snap-strictness': [{\n        snap: ['mandatory', 'proximity']\n      }],\n      /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      touch: [{\n        touch: ['auto', 'none', 'pinch-zoom', 'manipulation', {\n          pan: ['x', 'left', 'right', 'y', 'up', 'down']\n        }]\n      }],\n      /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */\n      select: [{\n        select: ['none', 'text', 'all', 'auto']\n      }],\n      /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */\n      'will-change': [{\n        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue]\n      }],\n      // SVG\n      /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */\n      fill: [{\n        fill: [colors, 'none']\n      }],\n      /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */\n      'stroke-w': [{\n        stroke: [isLength, isArbitraryNumber]\n      }],\n      /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */\n      stroke: [{\n        stroke: [colors, 'none']\n      }],\n      // Accessibility\n      /**\n       * Screen Readers\n       * @see https://tailwindcss.com/docs/screen-readers\n       */\n      sr: ['sr-only', 'not-sr-only']\n    },\n    conflictingClassGroups: {\n      overflow: ['overflow-x', 'overflow-y'],\n      overscroll: ['overscroll-x', 'overscroll-y'],\n      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],\n      'inset-x': ['right', 'left'],\n      'inset-y': ['top', 'bottom'],\n      flex: ['basis', 'grow', 'shrink'],\n      gap: ['gap-x', 'gap-y'],\n      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],\n      px: ['pr', 'pl'],\n      py: ['pt', 'pb'],\n      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],\n      mx: ['mr', 'ml'],\n      my: ['mt', 'mb'],\n      'font-size': ['leading'],\n      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],\n      'fvn-ordinal': ['fvn-normal'],\n      'fvn-slashed-zero': ['fvn-normal'],\n      'fvn-figure': ['fvn-normal'],\n      'fvn-spacing': ['fvn-normal'],\n      'fvn-fraction': ['fvn-normal'],\n      rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],\n      'rounded-s': ['rounded-ss', 'rounded-es'],\n      'rounded-e': ['rounded-se', 'rounded-ee'],\n      'rounded-t': ['rounded-tl', 'rounded-tr'],\n      'rounded-r': ['rounded-tr', 'rounded-br'],\n      'rounded-b': ['rounded-br', 'rounded-bl'],\n      'rounded-l': ['rounded-tl', 'rounded-bl'],\n      'border-spacing': ['border-spacing-x', 'border-spacing-y'],\n      'border-w': ['border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],\n      'border-w-x': ['border-w-r', 'border-w-l'],\n      'border-w-y': ['border-w-t', 'border-w-b'],\n      'border-color': ['border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],\n      'border-color-x': ['border-color-r', 'border-color-l'],\n      'border-color-y': ['border-color-t', 'border-color-b'],\n      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],\n      'scroll-mx': ['scroll-mr', 'scroll-ml'],\n      'scroll-my': ['scroll-mt', 'scroll-mb'],\n      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],\n      'scroll-px': ['scroll-pr', 'scroll-pl'],\n      'scroll-py': ['scroll-pt', 'scroll-pb']\n    },\n    conflictingClassGroupModifiers: {\n      'font-size': ['leading']\n    }\n  };\n}\n\nexport { getDefaultConfig };\n//# sourceMappingURL=default-config.mjs.map\n","import { createTailwindMerge } from './create-tailwind-merge.mjs';\nimport { getDefaultConfig } from './default-config.mjs';\n\nvar twMerge = /*#__PURE__*/createTailwindMerge(getDefaultConfig);\n\nexport { twMerge };\n//# sourceMappingURL=tw-merge.mjs.map\n","import { clsx, type ClassValue } from 'clsx';\nimport { ErrorMessage } from 'src';\nimport { twMerge } from 'tailwind-merge';\nimport {\n  PlaidLinkOnSuccessMetadata,\n  PlaidLinkOnExitMetadata,\n  PlaidLinkStableEvent,\n  PlaidLinkOnEventMetadata,\n  PlaidLinkError,\n} from 'react-plaid-link';\n\n/**\n * Creates a string of CSS classes.\n * @param inputs - Class values to be combined.\n * @returns The string of CSS classes.\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Throws an error if one is present.\n * @param error - The error message to process.\n * @throws If an error is present.\n */\nexport const processErrorIfPresent = (error: ErrorMessage) => {\n  if (error !== undefined) {\n    const { http_body } = error;\n    throw new Error(JSON.stringify(http_body));\n  }\n};\n\n/**\n * Formats a date string or a timestamp into a string representation.\n * @param input - The date string or the timestamp.\n * @returns The formatted date string.\n */\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  });\n}\n\n/**\n * Generates a random integer within the provided range.\n * @param min - The lower bound of the range.\n * @param max - The upper bound of the range.\n * @returns A random integer within the provided range.\n */\nexport const randomIntFromInterval = (min: number, max: number) => {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n/**\n * Formats a number to a defined number of decimal points.\n * @param input - The number to format.\n * @returns The formatted number string.\n */\nexport function formatNumber(\n  input: number,\n  numberOfDecimalPoint: number,\n): string {\n  return input.toFixed(numberOfDecimalPoint);\n}\n\n/**\n * Replaces all underscores in a string with spaces and convert the string to lower case.\n * @param input - The string to format.\n * @returns The formatted string.\n */\nexport function removeUnderScores(input: string): string {\n  // Replace all underscores with spaces\n  const formatted = input.replace(/_/g, ' ');\n\n  return formatted.toLowerCase();\n}\n\n/**\n * Converts a Date object into a \"time ago\" string.\n * @param date - The date to convert.\n * @returns A string representing how long ago the date was.\n */\nexport function timeAgo(date: Date): string {\n  const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);\n  let interval = seconds / 31536000;\n  if (interval > 1) {\n    return `${Math.floor(interval)} years ago`;\n  }\n  interval = seconds / 2592000;\n  if (interval > 1) {\n    return `${Math.floor(interval)} months ago`;\n  }\n  interval = seconds / 86400;\n  if (interval > 1) {\n    return `${Math.floor(interval)} days ago`;\n  }\n  interval = seconds / 3600;\n  if (interval > 1) {\n    return `${Math.floor(interval)} hours ago`;\n  }\n  interval = seconds / 60;\n  if (interval > 1) {\n    return `${Math.floor(interval)} minutes ago`;\n  }\n  return `${Math.floor(seconds)} seconds ago`;\n}\n\n/**\n * Rounds a number to two decimal places.\n * @param num - The number to round.\n * @returns The rounded number.\n */\nexport function roundToTwoDecimalPlaces(num: number): number {\n  return Math.round((num + Number.EPSILON) * 100) / 100;\n}\n\n/**\n * Converts a YYYYMM format string into a Month Year string.\n * @param dateString - The date string to convert.\n * @returns The formatted date string.\n */\nexport function convertToMonth(dateString: string): string {\n  const year = dateString.substr(0, 4);\n  const month = dateString.substr(4, 2);\n\n  // Convert the month number to its name\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const monthNumber = parseInt(month, 10) - 1;\n  const monthName = monthNames[monthNumber];\n\n  return `${monthName} ${year}`;\n}\n\n/**\n * Logs event details to the console.\n * @param eventName - The name of the event.\n * @param metadata - Metadata related to the event.\n * @param error - Any errors related to the event.\n */\nexport const logEvent = (\n  eventName: PlaidLinkStableEvent | string,\n  metadata:\n    | PlaidLinkOnEventMetadata\n    | PlaidLinkOnSuccessMetadata\n    | PlaidLinkOnExitMetadata,\n  error?: PlaidLinkError | null,\n  userId?: number,\n) => {\n  console.log(`Event name: ${eventName}`);\n  console.log('Metadata: ', metadata);\n  console.log('Error: ', error);\n  console.log('User ID: ', userId);\n};\n\n/**\n * Logs successful Plaid Link events.\n * @param params - Metadata related to the success event.\n * @param userId - The ID of the user.\n */\nexport const logSuccess = async (\n  { institution, accounts, link_session_id }: PlaidLinkOnSuccessMetadata,\n  userId: number,\n) => {\n  logEvent(\n    'onSuccess',\n    {\n      institution,\n      accounts,\n      link_session_id,\n    },\n    null,\n    userId,\n  );\n};\n\n/**\n * Logs Plaid Link exit events.\n * @param error - Any errors related to the event.\n * @param params - Metadata related to the exit event.\n * @param userId - The ID of the user.\n */\nexport const logExit = async (\n  error: PlaidLinkError | null,\n  { institution, status, link_session_id, request_id }: PlaidLinkOnExitMetadata,\n  userId: number,\n) => {\n  logEvent(\n    'onExit',\n    {\n      institution,\n      status,\n      link_session_id,\n      request_id,\n    },\n    error,\n  );\n\n  const eventError = error || {};\n  console.log('Error code: ', eventError, userId);\n};\n\n/**\n * Replaces all underscores in a string with spaces.\n * @param str - The string to format.\n * @returns The formatted string.\n */\nexport function replaceUnderscoreWithSpace(str: string): string {\n  return str.replace(/_/g, ' ');\n}\n\n/**\n * Helper function to format the pocket name string.\n *\n * @param input - The pocket name string to format.\n * @returns The formatted pocket name string.\n */\nexport function formatPocketName(input: string): string {\n  const prefix = 'POCKET_TYPE_';\n\n  // Remove the prefix\n  let formatted = input.startsWith(prefix) ? input.slice(prefix.length) : input;\n\n  // Replace all underscores with spaces\n  formatted = formatted.replace(/_/g, ' ');\n\n  return formatted.toLowerCase();\n}\n\nexport function getRandomNumber(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function getRandomString(length: number): string {\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return result;\n}\n\nexport function getRandomArrayItem<T>(arr: T[]): T {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function getRandomDate(start: Date, end: Date): string {\n  const randomDate = new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime()),\n  );\n  return randomDate.toISOString().split('T')[0];\n}\n\nexport function getRandomBoolean(): boolean {\n  return Math.random() > 0.5;\n}\n\nexport function getRandomSubcategories(): string[] {\n  const count = getRandomNumber(1, 5); // for instance, each category can have 1 to 5 subcategories\n  const subcategories: string[] = [];\n  for (let i = 0; i < count; i++) {\n    subcategories.push(getRandomString(5));\n  }\n  return subcategories;\n}\n\nexport function getRandomAmount(): string {\n  return (Math.random() * 10000).toFixed(2);\n}\n\nexport function getRandomBalance(): number {\n  return +(Math.random() * 10000).toFixed(2);\n}\n\nexport function getRandomStringWithPrefix(length: number, prefix = ''): string {\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return prefix + result;\n}\n\nexport function getRandomDateInRange(startYear: number, endYear: number): Date {\n  const year = getRandomNumber(startYear, endYear);\n  const month = getRandomNumber(0, 11);\n  const day = getRandomNumber(1, 28); // Simple method to ensure valid day for all months\n  return new Date(year, month, day);\n}\n\nexport const formatFrequency = (frequency: string): string => {\n  switch (frequency) {\n    case 'RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY':\n      return 'Annually';\n    case 'RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY':\n      return 'Monthly';\n    case 'RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY':\n      return 'BiWeekly';\n    case 'RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY':\n      return 'Semi-Monthly';\n    case 'RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY':\n      return 'Weekly';\n    case 'RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED':\n      return 'Unspecified';\n    case 'UNRECOGNIZED':\n      return 'Unrecognized';\n    default:\n      return 'Unknown';\n  }\n};\n","import {\n  getRandomNumber,\n  getRandomString,\n  getRandomSubcategories,\n} from 'src/lib-utils/utils';\n\nexport interface ICategory {\n  /** id */\n  id: number;\n  /** The name of the category */\n  name: string;\n  /** The description of the category */\n  description: string;\n  /** the sub categories of the category */\n  subcategories: string[];\n}\n\n/*\n * The Categories table stores information about the different categories of expenses or income,\n * such as \"Housing\", \"Food\", \"Transportation\", and \"Entertainment\". Each category has one or more\n * subcategories, which are stored in the Subcategories table.\n *\n * For example, the \"Housing\" category might have subcategories for \"Rent\", \"Utilities\", and \"Home Maintenance\".\n *\n * @export\n * @class Category\n * @implements {ICategory}\n * */\nexport class Category implements ICategory {\n  /** id */\n  id = 0;\n  /** The name of the category */\n  name = '';\n  /** The description of the category */\n  description = '';\n  /** the sub categories of the category */\n  subcategories: string[] = [];\n\n  constructor(data: Partial<Category>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  /**\n   * Creates a random instance of the Category class with all fields populated.\n   * @returns {Category} A random Category.\n   */\n  static randomInstance(): Category {\n    return new Category({\n      id: getRandomNumber(1, 10000),\n      name: getRandomString(5),\n      description: getRandomString(10),\n      subcategories: getRandomSubcategories(),\n    });\n  }\n}\n","import {\n  getRandomDate,\n  getRandomNumber,\n  getRandomString,\n} from 'src/lib-utils/utils';\nimport { Category } from './category';\n\n/**\n * The Budgets table stores information about each budget created by the user,\n * including the name of the budget, the start and end dates, and the user ID.\n */\nexport interface IBudget {\n  /** id */\n  id: number;\n  /** The name of the budget */\n  name: string;\n  description: string;\n  /** the time the goal was created */\n  startDate: string;\n  /** the time the goal was updated */\n  endDate: string;\n  /** category associated with the goal */\n  category: Category | undefined;\n}\n\n/*\n * The Budgets table stores information about each budget created by the user,\n * including the name of the budget, the start and end dates, and the user ID.\n *\n * @export\n * @class Budget\n * @implements {IBudget}\n * */\nexport class Budget implements IBudget {\n  /** id */\n  id = 0;\n  /** The name of the budget */\n  name = '';\n  description = '';\n  /** the time the goal was created */\n  startDate = '';\n  /** the time the goal was updated */\n  endDate = '';\n  /** category associated with the goal */\n  category: Category | undefined;\n\n  constructor(data: Partial<Budget>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  /**\n   * Creates a random instance of the Budget class with all fields populated.\n   * @returns {Budget} A random Budget.\n   */\n  static randomInstance(): Budget {\n    return new Budget({\n      id: getRandomNumber(1, 10000),\n      name: getRandomString(5),\n      description: getRandomString(10),\n      startDate: getRandomDate(new Date(2020, 0, 1), new Date(2025, 0, 1)),\n      endDate: getRandomDate(new Date(2020, 0, 1), new Date(2025, 0, 1)),\n      category: Math.random() > 0.5 ? Category.randomInstance() : undefined,\n    });\n  }\n}\n","import {\n  getRandomNumber,\n  getRandomString,\n  getRandomDate,\n  getRandomBoolean,\n} from 'src/lib-utils/utils';\nimport { Budget } from './budget';\n\n/**\n * Milestone: represents a milestone in the context of simfinni. A financial milestone that is both smart\n * and achievable. A milestone is a sub goal of a goal and is tied to a goal by the goal id\n */\nexport interface IMilestone {\n  /** id */\n  id: number;\n  /**\n   * The name of the milestone\n   * Validations:\n   * - must be at least 3 characters long\n   */\n  name: string;\n  /**\n   * The description of the miletone\n   * Validations:\n   * - must be at least 3 characters long\n   */\n  description: string;\n  /**\n   * the target date of the milestone\n   * Validations:\n   * - must be at least 3 characters long\n   */\n  targetDate: string;\n  /** the target amount of the milestone */\n  targetAmount: string;\n  /** wethe milestone is completed or not */\n  isCompleted: boolean;\n  /** the budget associated with the milestone */\n  budget: Budget | undefined;\n}\n\n/*\n * Milestone: represents a milestone in the context of simfinni. A financial milestone that is both smart\n * and achievable. A milestone is a sub goal of a goal and is tied to a goal by the goal id\n *\n * @export\n * @class Milestone\n * @implements {IMilestone}\n * */\nexport class Milestone implements IMilestone {\n  /** id */\n  id = 0;\n  /**\n   * The name of the milestone\n   * Validations:\n   * - must be at least 3 characters long\n   */\n  name = '';\n  /**\n   * The description of the miletone\n   * Validations:\n   * - must be at least 3 characters long\n   */\n  description = '';\n  /**\n   * the target date of the milestone\n   * Validations:\n   * - must be at least 3 characters long\n   */\n  targetDate = '';\n  /** the target amount of the milestone */\n  targetAmount = '';\n  /** wethe milestone is completed or not */\n  isCompleted = false;\n  /** the budget associated with the milestone */\n  budget: Budget | undefined = undefined;\n\n  constructor(data: Partial<Milestone>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  /**\n   * Creates a random instance of the Milestone class with all fields populated.\n   * @returns {Milestone} A random Milestone.\n   */\n  static randomInstance(): Milestone {\n    return new Milestone({\n      id: getRandomNumber(1, 10000),\n      name: getRandomString(5),\n      description: getRandomString(10),\n      targetDate: getRandomDate(new Date(2020, 0, 1), new Date(2025, 0, 1)),\n      targetAmount: `$${getRandomNumber(100, 1000)}`,\n      isCompleted: getRandomBoolean(),\n      budget: Math.random() > 0.5 ? Budget.randomInstance() : undefined,\n    });\n  }\n}\n","/*\n * Pocket type discloses the type of account pocket tied to a respective bank account\n *\n * @export\n * @enum {number}\n * */\nexport enum PocketType {\n  POCKET_TYPE_UNSPECIFIED = 0,\n  POCKET_TYPE_DISCRETIONARY_SPENDING = 1,\n  POCKET_TYPE_FUN_MONEY = 2,\n  POCKET_TYPE_DEBT_REDUCTION = 3,\n  POCKET_TYPE_EMERGENCY_FUND = 4,\n  POCKET_TYPE_INVESTMENT = 5,\n  POCKET_TYPE_SHORT_TERM_SAVINGS = 6,\n  POCKET_TYPE_LONG_TERM_SAVINGS = 7,\n  UNRECOGNIZED = -1,\n}\n","import {\n  getRandomNumber,\n  getRandomDate,\n  getRandomAmount,\n} from 'src/lib-utils/utils';\n\nexport interface IForecast {\n  /** id */\n  id: number;\n  /** the forecasted amount of the goal */\n  forecastedAmount: string;\n  /** the forecasted completion date of the goal */\n  forecastedCompletionDate: string;\n  /** the forecasted variance of the goal between the forecasted and target amounts */\n  varianceAmount: string;\n}\n\n/*\n * The Forecast table stores information about each forecast generated for a particular goal,\n * including the forecast date, the forecasted amount of money saved or invested for the\n * goal by the target date, and the variance between the forecasted and target amounts.\n * This allows the user to track how well they are progressing towards their goal and make adjustments as needed.\n *\n * @export\n * @class Forecast\n * @implements {IForecast}\n * */\nexport class Forecast implements IForecast {\n  /** id */\n  id = 0;\n  /** the forecasted amount of the goal */\n  forecastedAmount = '';\n  /** the forecasted completion date of the goal */\n  forecastedCompletionDate = '';\n  /** the forecasted variance of the goal between the forecasted and target amounts */\n  varianceAmount = '';\n\n  constructor(data: Partial<Forecast>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  /**\n   * Creates a random instance of the Forecast class with all fields populated.\n   * @returns {Forecast} A random Forecast.\n   */\n  static randomInstance(): Forecast {\n    return new Forecast({\n      id: getRandomNumber(1, 10000),\n      forecastedAmount: getRandomAmount(),\n      forecastedCompletionDate: getRandomDate(\n        new Date(2020, 0, 1),\n        new Date(2025, 0, 1),\n      ),\n      varianceAmount: getRandomAmount(),\n    });\n  }\n}\n","/*\n * GoalType represents the type of the goal\n *\n * @export\n * @enum {number}\n * */\nexport enum GoalType {\n  GOAL_TYPE_UNSPECIFIED = 0,\n  GOAL_TYPE_SAVINGS = 1,\n  GOAL_TYPE_INVESTMENT = 2,\n  GOAL_TYPE_DEBT = 3,\n  GOAL_TYPE_EXPENSE = 4,\n  UNRECOGNIZED = -1,\n}\n","import {\n  getRandomNumber,\n  getRandomString,\n  getRandomBoolean,\n  getRandomArrayItem,\n  getRandomDate,\n} from 'src/lib-utils/utils';\nimport { Forecast } from './forecast';\nimport { GoalType } from './goal-type';\nimport { Milestone } from './milestone';\n\nexport interface ISmartGoal {\n  /** id */\n  id: number;\n  /** the user id to which this goal is tied to */\n  userId: number;\n  /**\n   * The name of the goal\n   * Validations:\n   * - must be at least 3 characters long\n   */\n  name: string;\n  /**\n   * The description of the goal\n   * Validations:\n   * - must be at least 3 characters long\n   */\n  description: string;\n  /** wether the goal has been achieved or not */\n  isCompleted: boolean;\n  /** The type of the goal */\n  goalType: GoalType;\n  /** The duration of the goal */\n  duration: string;\n  /** the start date of the goal */\n  startDate: string;\n  /** the end date of the goal */\n  endDate: string;\n  /**\n   * the target amount of the goal\n   * amount of money the user wants to save or invest\n   */\n  targetAmount: string;\n  /**\n   * the current amount of the goal\n   * current amount of money saved or invested towards the goal\n   */\n  currentAmount: string;\n  /** Milestones associated with the goal */\n  milestones: Milestone[];\n  /** Forecasts associated with the goal */\n  forecasts: Forecast | undefined;\n}\n\n/*\n * SmartGoal: The Goals table stores information about each financial goal, including the name of the goal,\n * its description, the target amount of money the user wants to save or invest, and the expected date of completion.\n *\n * The Goals table also includes columns for the start date of the goal, the current amount of money saved or\n * invested towards the goal, and a boolean flag indicating whether the goal has been achieved.\n * These additional columns allow the user to track their progress towards the goal and see how much\n * more they need to save or invest to reach their target amount.\n *\n * @export\n * @class SmartGoal\n * @implements {ISmartGoal}\n * */\nexport class SmartGoal implements ISmartGoal {\n  /** id */\n  id = 0;\n  /** the user id to which this goal is tied to */\n  userId = 0;\n  /**\n   * The name of the goal\n   * Validations:\n   * - must be at least 3 characters long\n   */\n  name = '';\n  /**\n   * The description of the goal\n   * Validations:\n   * - must be at least 3 characters long\n   */\n  description = '';\n  /** wether the goal has been achieved or not */\n  isCompleted = false;\n  /** The type of the goal */\n  goalType: GoalType = GoalType.GOAL_TYPE_UNSPECIFIED;\n  /** The duration of the goal */\n  duration = '';\n  /** the start date of the goal */\n  startDate = '';\n  /** the end date of the goal */\n  endDate = '';\n  /**\n   * the target amount of the goal\n   * amount of money the user wants to save or invest\n   */\n  targetAmount = '';\n  /**\n   * the current amount of the goal\n   * current amount of money saved or invested towards the goal\n   */\n  currentAmount = '';\n  /** Milestones associated with the goal */\n  milestones: Milestone[] = [];\n  /** Forecasts associated with the goal */\n  forecasts: Forecast | undefined;\n\n  constructor(data: Partial<SmartGoal>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  /**\n   * Creates a random instance of the SmartGoal class with all fields populated.\n   * @returns {SmartGoal} A random SmartGoal.\n   */\n  static randomInstance(): SmartGoal {\n    const numberOfMilestones = getRandomNumber(0, 5); // Assuming a random number of milestones between 0 to 5 for each goal\n    const milestones = Array.from({ length: numberOfMilestones }, () =>\n      Milestone.randomInstance(),\n    );\n\n    return new SmartGoal({\n      id: getRandomNumber(1, 10000),\n      userId: getRandomNumber(1, 10000),\n      name: getRandomString(5),\n      description: getRandomString(10),\n      isCompleted: getRandomBoolean(),\n      goalType: getRandomArrayItem(Object.values(GoalType).slice()) as GoalType,\n      duration: `${getRandomNumber(1, 5)} weeks`,\n      startDate: getRandomDate(new Date(2020, 0, 1), new Date(2025, 0, 1)),\n      endDate: getRandomDate(new Date(2022, 0, 1), new Date(2030, 0, 1)),\n      targetAmount: `$${getRandomNumber(500, 10000)}`,\n      currentAmount: `$${getRandomNumber(0, 5000)}`,\n      milestones: milestones,\n      forecasts: Math.random() > 0.5 ? Forecast.randomInstance() : undefined,\n    });\n  }\n}\n","import { getRandomNumber, getRandomArrayItem } from 'src/lib-utils/utils';\nimport { PocketType } from './pocket-type';\nimport { SmartGoal } from './smart-goal';\n\n/**\n * Pocket is an abstraction of a over a bank account. A user can has at most 4 pockets per connected account\n * NOTE: these pockets are automatically created by the system and should not be exposed for mutation\n * by any client. The only operations that can be performed against a pocket are:\n * 1. Get the pocket\n * 2. Get the pocket's smart goals\n * 3. Adding a smart goal to the pocket\n */\nexport interface IPocket {\n  /** id */\n  id: number;\n  /** the set of smart goals this user witholds */\n  goals: SmartGoal[];\n  /** The type of the pocket */\n  type: PocketType;\n}\n\n/**\n * Pocket represents the Pocket entity.\n *\n * @export\n * @class Pocket\n * @implements {IPocket}\n * */\nexport class Pocket implements IPocket {\n  /** id */\n  id = 0;\n  /** the set of smart goals this user witholds */\n  goals: SmartGoal[] = [];\n  /** The type of the pocket */\n  type: PocketType = PocketType.POCKET_TYPE_UNSPECIFIED;\n\n  constructor(data: Partial<Pocket>) {\n    Object.assign(this, data);\n  }\n\n  /**\n   * Creates a random instance of the Pocket class with all fields populated.\n   * @returns {Pocket} A random pocket.\n   */\n  static randomInstance(): Pocket {\n    const numberOfGoals = getRandomNumber(0, 5); // Assuming a random number of goals between 0 to 5 for each pocket\n    const goals = Array.from({ length: numberOfGoals }, () =>\n      SmartGoal.randomInstance(),\n    );\n\n    return new Pocket({\n      id: getRandomNumber(1, 10000),\n      goals: goals,\n      type: getRandomArrayItem(Object.values(PocketType).slice()) as PocketType,\n    });\n  }\n}\n","export interface IActionableInsight {\n  id: number;\n  /** for each user we generate a detailed actionable insights for them to see */\n  detailedAction: string;\n  /** for each user we generate a summarized insight targeted at optimizing a certain condition */\n  summarizedAction: string;\n  /** the time the insight was generated */\n  generatedTime: string | undefined;\n  /** associated tags with the generated insights */\n  tags: string[];\n}\n\n/*\n * An actionable insight serves as a basic insight users\n * can leverage and act upon and is typically generated based off of their financial contexts.\n * @class ActionableInsight\n * @implements {IActionableInsight}\n * @export\n *\n * */\nclass ActionableInsight implements IActionableInsight {\n  /**\n   * The unique identifier for the actionable insight.\n   * @type {number}\n   */\n  id: number;\n\n  /**\n   * A detailed actionable insight generated for the user to act upon.\n   * @type {string}\n   */\n  detailedAction: string;\n\n  /**\n   * A summarized insight targeting optimization of a certain condition.\n   * @type {string}\n   */\n  summarizedAction: string;\n\n  /**\n   * The time at which the insight was generated.\n   * @type {string | undefined}\n   */\n  generatedTime: string | undefined;\n\n  /**\n   * An array of associated tags with the generated insights.\n   * @type {string[]}\n   */\n  tags: string[];\n\n  /**\n   * Constructs a new ActionableInsight object.\n   * @constructor\n   * @param {Partial<ActionableInsight>} data - Optional data for initializing the actionable insight.\n   */\n  constructor(data: Partial<ActionableInsight> = {}) {\n    /**\n     * The unique identifier for the actionable insight.\n     * @type {number}\n     */\n    this.id = data.id ?? 0;\n\n    /**\n     * A detailed actionable insight generated for the user to act upon.\n     * @type {string}\n     */\n    this.detailedAction = data.detailedAction ?? '';\n\n    /**\n     * A summarized insight targeting optimization of a certain condition.\n     * @type {string}\n     */\n    this.summarizedAction = data.summarizedAction ?? '';\n\n    /**\n     * The time at which the insight was generated.\n     * @type {string | undefined}\n     */\n    this.generatedTime = data.generatedTime;\n\n    /**\n     * An array of associated tags with the generated insights.\n     * @type {string[]}\n     */\n    this.tags = data.tags ?? [];\n  }\n}\n\n/**\n * Export the ActionableInsight class.\n */\nexport { ActionableInsight };\n","/**\n * BankAccountStatus represents the status of a bank account.\n *\n * @enum {number}\n */\nenum BankAccountStatus {\n  BANK_ACCOUNT_STATUS_UNSPECIFIED = 0,\n  BANK_ACCOUNT_STATUS_ACTIVE = 1,\n  BANK_ACCOUNT_STATUS_INACTIVE = 2,\n  UNRECOGNIZED = -1,\n}\n\nexport { BankAccountStatus };\n","/*\n * BankAccountType - BankAccountType type\n * Represents the type of a bank account.\n * @enum {number}\n * */\nenum BankAccountType {\n  /**\n   * The bank account type is unspecified.\n   */\n  BANK_ACCOUNT_TYPE_UNSPECIFIED = 0,\n\n  /**\n   * The bank account type is identified through the Plaid service.\n   */\n  BANK_ACCOUNT_TYPE_PLAID = 1,\n\n  /**\n   * The bank account type is manually specified.\n   */\n  BANK_ACCOUNT_TYPE_MANUAL = 2,\n\n  /**\n   * An unrecognized or unknown bank account type.\n   */\n  UNRECOGNIZED = -1,\n}\n\nexport { BankAccountType };\n","import {\n  getRandomNumber,\n  getRandomString,\n  getRandomArrayItem,\n} from 'src/lib-utils/utils';\nimport { BankAccountStatus } from './bank-account-status';\nimport { BankAccountType } from './bank-account-type';\nimport { Pocket } from './pocket';\nimport { Milestone, SmartGoal } from '.';\n\nexport interface IBankAccount {\n  /** id */\n  id: number;\n  /** the user id to which this bank account is tied to */\n  userId: number;\n  /** the bank account name */\n  name: string;\n  /** the bank account number */\n  number: string;\n  /** the bank account type */\n  type: BankAccountType;\n  /** the bank account balance */\n  balance: number;\n  /** the bank account currency */\n  currency: string;\n  currentFunds: number;\n  balanceLimit: number;\n  /**\n   * the set of \"virtualized accounts this user witholds\"\n   * NOTE: these pockets are automatically created by the system\n   * when a user connects a bank account\n   */\n  pockets: Pocket[];\n  /** plaid account id mapped to this bank account */\n  plaidAccountId: string;\n  /** account subtype */\n  subtype: string;\n  /** the bank account status */\n  status: BankAccountStatus;\n}\n\n/**\n * Represents a bank account tied to a user.\n */\nclass BankAccount implements IBankAccount {\n  /**\n   * The unique identifier for the bank account.\n   * @type {number}\n   */\n  id = 0;\n\n  /**\n   * The user ID to which this bank account is tied.\n   * @type {number}\n   */\n  userId = 0;\n\n  /**\n   * The name of the bank account.\n   * @type {string}\n   */\n  name = '';\n\n  /**\n   * The bank account number.\n   * @type {string}\n   */\n  number = '';\n\n  /**\n   * The type of bank account.\n   * @type {BankAccountType}\n   */\n  type: BankAccountType = BankAccountType.BANK_ACCOUNT_TYPE_UNSPECIFIED;\n\n  /**\n   * The balance of the bank account.\n   * @type {number}\n   */\n  balance = 0;\n\n  /**\n   * The currency of the bank account.\n   * @type {string}\n   */\n  currency = '';\n\n  /**\n   * The current funds available in the bank account.\n   * @type {number}\n   */\n  currentFunds = 0;\n\n  /**\n   * The balance limit of the bank account.\n   * @type {number}\n   */\n  balanceLimit = 0;\n\n  /**\n   * The set of virtualized pockets associated with this bank account.\n   * @type {Pocket[]}\n   */\n  pockets: Pocket[] = [];\n\n  /**\n   * The Plaid account ID mapped to this bank account.\n   * @type {string}\n   */\n  plaidAccountId = '';\n\n  /**\n   * The subtype of the bank account.\n   * @type {string}\n   */\n  subtype = '';\n\n  /**\n   * The status of the bank account.\n   * @type {BankAccountStatus}\n   */\n  status: BankAccountStatus = BankAccountStatus.BANK_ACCOUNT_STATUS_UNSPECIFIED;\n\n  /**\n   * Constructs a new BankAccount object.\n   * @constructor\n   * @param {Partial<BankAccount>} data - Optional data for initializing the bank account.\n   */\n  constructor(data: Partial<BankAccount>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n\n  /**\n   * Gets the number of pockets tied to this bank account.\n   */\n  getNumberOfPockets(): number {\n    return this.pockets.length;\n  }\n\n  /**\n   * Gets the number of goals tied to this bank account.\n   */\n  getNumberOfGoals(): number {\n    const numberOfGoals = this.pockets.reduce((acc, pocket) => {\n      return acc + pocket.goals.length;\n    }, 0);\n    return numberOfGoals;\n  }\n\n  // Returns all goals tied to the given bank account\n  getGoals(): SmartGoal[] {\n    const populatedPockets = this.pockets\n      .filter((pocket) => pocket.goals.length > 0)\n      .flat();\n    const goals = populatedPockets.map((pocket) => pocket.goals).flat();\n    return goals;\n  }\n\n  // Returns all milestones tied to a particular bank account\n  getMilestones(): Milestone[] {\n    const goals = this.getGoals();\n    const populatedGoals = goals.filter((goal) => goal.milestones.length > 0);\n    const milestones = populatedGoals.map((goal) => goal.milestones).flat();\n    return milestones;\n  }\n\n  /**\n   * Creates a random instance of the BankAccount class with all fields populated.\n   * @returns {BankAccount} A random bank account.\n   */\n  static randomInstance(): BankAccount {\n    const numberOfPocketsToGenerate = getRandomNumber(0, 5); // Assuming a random number of goals between 0 to 5 for each pocket\n    const pockets = Array.from({ length: numberOfPocketsToGenerate }, () =>\n      Pocket.randomInstance(),\n    );\n\n    return new BankAccount({\n      id: getRandomNumber(1, 10000),\n      userId: getRandomNumber(1, 10000),\n      name: `Account ${getRandomString(5)}`,\n      number: `xxxx-xxxx-xxxx-${getRandomString(4)}`, // A sample account number format\n      type: getRandomArrayItem(\n        Object.values(BankAccountType).slice(),\n      ) as BankAccountType,\n      balance: getRandomNumber(1000, 10000),\n      currency: getRandomArrayItem(['USD', 'EUR', 'GBP', 'JPY']),\n      currentFunds: getRandomNumber(500, 5000),\n      balanceLimit: getRandomNumber(0, 1000),\n      pockets: pockets,\n      plaidAccountId: getRandomString(10),\n      subtype: `Subtype ${getRandomString(3)}`,\n      status: getRandomArrayItem(\n        Object.values(BankAccountStatus).slice(),\n      ) as BankAccountStatus,\n    });\n  }\n}\n\n/**\n * Export the BankAccount class.\n */\nexport { BankAccount };\n","/**\n * Enum representing the status of a link.\n * @enum {number}\n */\nenum LinkStatus {\n  /**\n   * The link status is unspecified or unknown.\n   */\n  LINK_STATUS_UNSPECIFIED = 0,\n\n  /**\n   * The link setup is in progress.\n   */\n  LINK_STATUS_SETUP = 1,\n\n  /**\n   * The link is pending and awaiting completion.\n   */\n  LINK_STATUS_PENDING = 2,\n\n  /**\n   * An error occurred during the link process.\n   */\n  LINK_STATUS_ERROR = 3,\n\n  /**\n   * The link was successfully established.\n   */\n  LINK_STATUS_SUCCESS = 4,\n\n  /**\n   * The link is pending expiration.\n   */\n  LINK_STATUS_PENDING_EXPIRATION = 5,\n\n  /**\n   * The link has been revoked.\n   */\n  LINK_STATUS_REVOKED = 6,\n\n  /**\n   * Login is required for the associated item.\n   */\n  LINK_STATUS_ITEM_LOGIN_REQUIRED = 7,\n\n  /**\n   * The status value is unrecognized or invalid.\n   */\n  UNRECOGNIZED = -1,\n}\n\n/**\n * Export the LinkStatus enum.\n */\nexport { LinkStatus };\n","/**\n * Enum representing the type of a link.\n * @enum {number}\n */\nenum LinkType {\n  /**\n   * The link type is unspecified or unknown.\n   */\n  LINK_TYPE_UNSPECIFIED = 0,\n\n  /**\n   * The link type is Plaid.\n   */\n  LINK_TYPE_PLAID = 1,\n\n  /**\n   * The link type is manual.\n   */\n  LINK_TYPE_MANUAL = 2,\n\n  /**\n   * The type value is unrecognized or invalid.\n   */\n  UNRECOGNIZED = -1,\n}\n\n/**\n * Export the LinkType enum.\n */\nexport { LinkType };\n","import { BankAccount } from './bank-account';\nimport { CreditAccount } from './credit-account';\nimport { InvestmentAccount } from './investment-account';\nimport { LinkStatus } from './link-status';\nimport { LinkType } from './link-type';\nimport { MortgageAccount } from './mortgage-account';\nimport { PlaidLink } from './plaid-link';\nimport { PlaidSync } from './plaid-sync';\nimport { StudentLoanAccount } from './student-loan-account';\nimport { Token } from './token';\n\nexport interface ILink {\n  /** id */\n  id: number;\n  plaidSync: PlaidSync | undefined;\n  linkStatus: LinkStatus;\n  plaidLink: PlaidLink | undefined;\n  plaidNewAccountsAvailable: boolean;\n  expirationDate: string;\n  institutionName: string;\n  customInstitutionName: string;\n  description: string;\n  lastManualSync: string;\n  lastSuccessfulUpdate: string;\n  /**\n   * token object witholds an access token which is a token used to make API requests related to a specific Item. You will typically obtain an access_token\n   * by calling /item/public_token/exchange. For more details, see the Token exchange flow. An access_token does not expire,\n   * although it may require updating, such as when a user changes their password, or when working with European institutions\n   * that comply with PSD2's 90-day consent window. For more information, see When to use update mode.\n   * Access tokens should always be stored securely, and associated with the user whose data they represent.\n   * If compromised, an access_token can be rotated via /item/access_token/invalidate. If no longer needed,\n   * it can be revoked via /item/remove.(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];\n   */\n  token: Token | undefined;\n  /**\n   * a link event - or client login event can have many connected bank accounts\n   * for example a log in link against one instition like chase can have many account (checking and savings)\n   * it is important though to ensure that if a link against an instition already exists, we dont fascilitate duplicated\n   */\n  bankAccounts: BankAccount[];\n  /**\n   * a link event - or client login event can have many connected investment accounts\n   * for example a log in link against one instition like fidelity can have many accounts (401k and investment account)\n   * it is important though to ensure that if a link against an instition already exists, we dont fascilitate duplicated\n   */\n  investmentAccounts: InvestmentAccount[];\n  /** credit accounts tied to a user */\n  creditAccounts: CreditAccount[];\n  /** mortgage accounts tied to a user */\n  mortgageAccounts: MortgageAccount[];\n  /** student loan accounts tied to a link */\n  studentLoanAccounts: StudentLoanAccount[];\n  /** the id of the institution this link is tied to and against */\n  plaidInstitutionId: string;\n  /** the type of link this is ... can be either a manual or plaid link type */\n  linkType: LinkType;\n  errorCode: string;\n  updatedAt: string;\n  newAccountsAvailable: boolean;\n  shouldBeUpdated: boolean;\n}\n\n/*\n * A Link represents a login at a financial institution. A single end-user of your application might have accounts at different financial\n * institutions, which means they would have multiple different Items. An Item is not the same as a financial institution account,\n * although every account will be associated with an Item. For example, if a user has one login at their bank that allows them to access\n * both their checking account and their savings account, a single Item would be associated with both of those accounts. Each Item\n * linked within your application will have a corresponding access_token, which is a token that you can use to make API requests related\n * to that specific Item.\n * Two Items created for the same set of credentials at the same institution will be considered different and not share the same item_id.\n * @class Link\n * @implements {ILink}\n * */\nclass Link implements ILink {\n  /**\n   * The unique identifier for the link.\n   * @type {number}\n   */\n  id: number = 0;\n\n  /**\n   * Information about Plaid synchronization.\n   * @type {PlaidSync | undefined}\n   */\n  plaidSync: PlaidSync | undefined;\n\n  /**\n   * The status of the link.\n   * @type {LinkStatus}\n   */\n  linkStatus: LinkStatus = LinkStatus.LINK_STATUS_UNSPECIFIED;\n\n  /**\n   * Information about Plaid linking.\n   * @type {PlaidLink | undefined}\n   */\n  plaidLink: PlaidLink | undefined;\n\n  /**\n   * Indicates if new accounts are available through Plaid.\n   * @type {boolean}\n   */\n  plaidNewAccountsAvailable: boolean = false;\n\n  /**\n   * The expiration date of the link.\n   * @type {string}\n   */\n  expirationDate: string = '';\n\n  /**\n   * The name of the financial institution.\n   * @type {string}\n   */\n  institutionName: string = '';\n\n  /**\n   * Custom name for the institution.\n   * @type {string}\n   */\n  customInstitutionName: string = '';\n\n  /**\n   * Description of the link.\n   * @type {string}\n   */\n  description: string = '';\n\n  /**\n   * The timestamp of the last manual sync.\n   * @type {string}\n   */\n  lastManualSync: string = '';\n\n  /**\n   * The timestamp of the last successful update.\n   * @type {string}\n   */\n  lastSuccessfulUpdate: string = '';\n\n  /**\n   * @type {Token | undefined}\n   */\n  token: Token | undefined;\n\n  /**\n   * @type {BankAccount[]}\n   */\n  bankAccounts: BankAccount[] = [];\n\n  /**\n   * @type {InvestmentAccount[]}\n   */\n  investmentAccounts: InvestmentAccount[] = [];\n\n  /**\n   * Credit accounts tied to the link.\n   * @type {CreditAccount[]}\n   */\n  creditAccounts: CreditAccount[] = [];\n\n  /**\n   * Mortgage accounts tied to the link.\n   * @type {MortgageAccount[]}\n   */\n  mortgageAccounts: MortgageAccount[] = [];\n\n  /**\n   * Student loan accounts tied to the link.\n   * @type {StudentLoanAccount[]}\n   */\n  studentLoanAccounts: StudentLoanAccount[] = [];\n\n  /**\n   * The ID of the institution this link is tied to.\n   * @type {string}\n   */\n  plaidInstitutionId: string = '';\n\n  /**\n   * The type of link.\n   * @type {LinkType}\n   */\n  linkType: LinkType = LinkType.LINK_TYPE_UNSPECIFIED;\n\n  /**\n   * Error code associated with the link.\n   * @type {string}\n   */\n  errorCode: string = '';\n\n  /**\n   * The timestamp of the last update.\n   * @type {string}\n   */\n  updatedAt: string = '';\n\n  /**\n   * Indicates if new accounts are available.\n   * @type {boolean}\n   */\n  newAccountsAvailable: boolean = false;\n\n  /**\n   * Indicates if the link should be updated.\n   * @type {boolean}\n   */\n  shouldBeUpdated: boolean = false;\n\n  /**\n   * Constructs a new Link object.\n   * @constructor\n   * @param {Partial<Link>} data - Optional data for initializing the link.\n   */\n  constructor(data: Partial<Link>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n\n/**\n * Export the Link class.\n */\nexport { Link };\n","import { StripeSubscriptionStatus } from './stripe-subscription-status';\n\n/**\n * Represents a subscription managed through the Stripe payment platform.\n */\nclass StripeSubscription {\n  /**\n   * The unique identifier for the subscription.\n   * @type {number}\n   */\n  id: number;\n\n  /**\n   * The ID of the subscription in the Stripe system tied to the customer.\n   * @type {string}\n   */\n  stripeSubscriptionId: string;\n\n  /**\n   * The status of the Stripe subscription.\n   * @type {StripeSubscriptionStatus}\n   */\n  stripeSubscriptionStatus: StripeSubscriptionStatus;\n\n  /**\n   * The date until which the Stripe subscription is active.\n   * @type {string}\n   */\n  stripeSubscriptionActiveUntil: string;\n\n  /**\n   * The latest timestamp from the Stripe webhook related to the subscription.\n   * @type {string}\n   */\n  stripeWebhookLatestTimestamp: string;\n\n  /**\n   * Indicates whether the subscription is currently in a trial period.\n   * @type {boolean}\n   */\n  isTrialing: boolean;\n\n  /**\n   * Constructs a new StripeSubscription object.\n   * @constructor\n   * @param {Partial<StripeSubscription>} [data] - Optional data for initializing the subscription.\n   */\n  constructor(data: Partial<StripeSubscription> = {}) {\n    /**\n     * The unique identifier for the subscription.\n     * @type {number}\n     */\n    this.id = data.id ?? 0;\n\n    /**\n     * The ID of the subscription in the Stripe system tied to the customer.\n     * @type {string}\n     */\n    this.stripeSubscriptionId = data.stripeSubscriptionId ?? '';\n\n    /**\n     * The status of the Stripe subscription.\n     * @type {StripeSubscriptionStatus}\n     */\n    this.stripeSubscriptionStatus =\n      data.stripeSubscriptionStatus as StripeSubscriptionStatus; // Assumes a default or validation elsewhere.\n\n    /**\n     * The date until which the Stripe subscription is active.\n     * @type {string}\n     */\n    this.stripeSubscriptionActiveUntil =\n      data.stripeSubscriptionActiveUntil ?? '';\n\n    /**\n     * The latest timestamp from the Stripe webhook related to the subscription.\n     * @type {string}\n     */\n    this.stripeWebhookLatestTimestamp = data.stripeWebhookLatestTimestamp ?? '';\n\n    /**\n     * Indicates whether the subscription is currently in a trial period.\n     * @type {boolean}\n     */\n    this.isTrialing = data.isTrialing ?? false;\n  }\n}\n\nexport { StripeSubscription };\n","import { ActionableInsight } from './actionable-insight';\nimport { Link } from './link';\nimport { StripeSubscription } from './stripe-subscription';\n\n/**\n * Represents a user's financial profile.\n *\n * @remarks\n * This class is designed to store and manage the details related to a user's financial standing and interactions.\n * It integrates with services like Stripe and can manage multiple links to different financial institutions.\n *\n * @example Constructing a `FinancialProfile`\n *\n * ```ts\n * // Example data\n * const data = {\n *   userFinancialProfileID: 123,\n *   userId: 456,\n *   stripeCustomerId: 'stripe-customer-1',\n *   stripeSubscriptions: new StripeSubscription({ ...stripeSubscriptionData... }),\n *   link: [new Link({ ...linkData... })],\n *   actionableInsights: [new ActionableInsight({ ...insightData... })],\n * };\n *\n * const financialProfile = new FinancialProfile(data);\n * ```\n *\n * @property userFinancialProfileID - Unique identifier for the financial profile.\n * @property userId - Identifier for the user associated with this profile.\n * @property stripeCustomerId - Identifier for the Stripe customer associated with this user.\n * @property stripeSubscriptions - The Stripe subscriptions that the user profile actively maintains.\n * @property link - Array of linked financial institutions associated with the user's profile.\n * @property actionableInsights - Array of insights derived from the user's financial data.\n */\nclass FinancialProfile {\n  /** id */\n  userFinancialProfileID = 0;\n  /** the user id tied to the profile */\n  userId = 0;\n  stripeCustomerId = '';\n  /** the stripe subscriptions the user profile actively maintains */\n  stripeSubscriptions: StripeSubscription | undefined;\n  /** a user profile can have many links (connected institutions) of which finanical accounts are tied to (checking, savings, etc) */\n  link: Link[] = [];\n  actionableInsights: ActionableInsight[] = [];\n\n  constructor(data?: Partial<FinancialProfile>) {\n    if (data)\n      Object.assign(this, {\n        ...data,\n        stripeSubscriptions: new StripeSubscription(data?.stripeSubscriptions),\n        link: data?.link?.map((link) => new Link(link)),\n        actionableInsights: data?.actionableInsights?.map(\n          (insight) => new ActionableInsight(insight),\n        ),\n      });\n  }\n}\n\nexport { FinancialProfile };\n","export interface IPlaidLink {\n  /** id */\n  id: number;\n  products: string[];\n  webhookUrl: string;\n  institutionId: string;\n  institutionName: string;\n  usePlaidSync: boolean;\n  itemId: string;\n}\n\n/**\n * Represents linking information related to Plaid.\n */\nclass PlaidLink implements IPlaidLink {\n  /**\n   * The unique identifier for the Plaid link.\n   * @type {number}\n   */\n  id: number;\n\n  /**\n   * An array of products associated with the Plaid link.\n   * @type {string[]}\n   */\n  products: string[];\n\n  /**\n   * The webhook URL associated with the Plaid link.\n   * @type {string}\n   */\n  webhookUrl: string;\n\n  /**\n   * The ID of the institution associated with the Plaid link.\n   * @type {string}\n   */\n  institutionId: string;\n\n  /**\n   * The name of the institution associated with the Plaid link.\n   * @type {string}\n   */\n  institutionName: string;\n\n  /**\n   * Indicates whether Plaid sync is used with the link.\n   * @type {boolean}\n   */\n  usePlaidSync: boolean;\n\n  /**\n   * The ID of the item associated with the Plaid link.\n   * @type {string}\n   */\n  itemId: string;\n\n  /**\n   * Constructs a new PlaidLink object.\n   * @constructor\n   * @param {Partial<PlaidLink>} data - Optional data for initializing the PlaidLink.\n   */\n  constructor(data: Partial<PlaidLink> = {}) {\n    /**\n     * The unique identifier for the Plaid link.\n     * @type {number}\n     */\n    this.id = data.id ?? 0;\n\n    /**\n     * An array of products associated with the Plaid link.\n     * @type {string[]}\n     */\n    this.products = data.products ?? [];\n\n    /**\n     * The webhook URL associated with the Plaid link.\n     * @type {string}\n     */\n    this.webhookUrl = data.webhookUrl ?? '';\n\n    /**\n     * The ID of the institution associated with the Plaid link.\n     * @type {string}\n     */\n    this.institutionId = data.institutionId ?? '';\n\n    /**\n     * The name of the institution associated with the Plaid link.\n     * @type {string}\n     */\n    this.institutionName = data.institutionName ?? '';\n\n    /**\n     * Indicates whether Plaid sync is used with the link.\n     * @type {boolean}\n     */\n    this.usePlaidSync = data.usePlaidSync ?? false;\n\n    /**\n     * The ID of the item associated with the Plaid link.\n     * @type {string}\n     */\n    this.itemId = data.itemId ?? '';\n  }\n}\n\n/**\n * Export the PlaidLink class.\n */\nexport { PlaidLink };\n","export interface IPlaidSync {\n  /** id */\n  id: number;\n  timeStamp: string;\n  trigger: string;\n  nextCursor: string;\n  added: number;\n  removed: number;\n  modified: number;\n}\n\n/**\n * Represents synchronization information related to Plaid.\n */\nclass PlaidSync implements IPlaidSync {\n  /**\n   * The unique identifier for the Plaid synchronization.\n   * @type {number}\n   */\n  id: number;\n\n  /**\n   * The timestamp of the synchronization.\n   * @type {string}\n   */\n  timeStamp: string;\n\n  /**\n   * The trigger that initiated the synchronization.\n   * @type {string}\n   */\n  trigger: string;\n\n  /**\n   * The cursor for the next synchronization.\n   * @type {string}\n   */\n  nextCursor: string;\n\n  /**\n   * The number of added items in the synchronization.\n   * @type {number}\n   */\n  added: number;\n\n  /**\n   * The number of removed items in the synchronization.\n   * @type {number}\n   */\n  removed: number;\n\n  /**\n   * The number of modified items in the synchronization.\n   * @type {number}\n   */\n  modified: number;\n\n  /**\n   * Constructs a new PlaidSync object.\n   * @constructor\n   * @param {Partial<PlaidSync>} data - Optional data for initializing the PlaidSync.\n   */\n  constructor(data: Partial<PlaidSync> = {}) {\n    /**\n     * The unique identifier for the Plaid synchronization.\n     * @type {number}\n     */\n    this.id = data.id ?? 0;\n\n    /**\n     * The timestamp of the synchronization.\n     * @type {string}\n     */\n    this.timeStamp = data.timeStamp ?? '';\n\n    /**\n     * The trigger that initiated the synchronization.\n     * @type {string}\n     */\n    this.trigger = data.trigger ?? '';\n\n    /**\n     * The cursor for the next synchronization.\n     * @type {string}\n     */\n    this.nextCursor = data.nextCursor ?? '';\n\n    /**\n     * The number of added items in the synchronization.\n     * @type {number}\n     */\n    this.added = data.added ?? 0;\n\n    /**\n     * The number of removed items in the synchronization.\n     * @type {number}\n     */\n    this.removed = data.removed ?? 0;\n\n    /**\n     * The number of modified items in the synchronization.\n     * @type {number}\n     */\n    this.modified = data.modified ?? 0;\n  }\n}\n\n/**\n * Export the PlaidSync class.\n */\nexport { PlaidSync };\n","/**\n * Enum representing the status of a Stripe subscription.\n * @enum {number}\n */\nenum StripeSubscriptionStatus {\n  /**\n   * The subscription status is unspecified or unknown.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_UNSPECIFIED = 0,\n\n  /**\n   * The subscription is currently in a trialing period.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_TRIALING = 1,\n\n  /**\n   * The subscription is currently active.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_ACTIVE = 2,\n\n  /**\n   * The subscription is past due and requires payment.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_PAST_DUE = 3,\n\n  /**\n   * The subscription has been canceled by the customer.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_CANCELED = 4,\n\n  /**\n   * The subscription is unpaid, and payment is required.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_UNPAID = 5,\n\n  /**\n   * The subscription is complete, indicating a successful subscription cycle.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_COMPLETE = 6,\n\n  /**\n   * The subscription is incomplete and requires additional actions.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE = 7,\n\n  /**\n   * The subscription is incomplete and has expired.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE_EXPIRED = 8,\n\n  /**\n   * The subscription has been created but is not yet active.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_CREATED = 9,\n\n  /**\n   * The subscription is paused and not billing the customer.\n   */\n  STRIPE_SUBSCRIPTION_STATUS_PAUSED = 10,\n\n  /**\n   * The status value is unrecognized or invalid.\n   */\n  UNRECOGNIZED = -1,\n}\n\n/**\n * Export the StripeSubscriptionStatus enum.\n */\nexport { StripeSubscriptionStatus };\n","export interface IToken {\n  /** id */\n  id: number;\n  /** the id of the item the token is tied to */\n  itemId: string;\n  keyId: string;\n  accessToken: string;\n  version: string;\n}\n\n/**\n * Token object holding an access token used to make API requests related to a specific Item.\n */\nclass Token implements IToken {\n  /**\n   * The unique identifier for the token.\n   * @type {number}\n   */\n  id: number;\n\n  /**\n   * The ID of the item the token is tied to.\n   * @type {string}\n   */\n  itemId: string;\n\n  /**\n   * The key ID associated with the token.\n   * @type {string}\n   */\n  keyId: string;\n\n  /**\n   * The access token.\n   * @type {string}\n   */\n  accessToken: string;\n\n  /**\n   * The version of the token.\n   * @type {string}\n   */\n  version: string;\n\n  /**\n   * Constructs a new Token object.\n   * @constructor\n   * @param {Partial<Token>} data - Optional data for initializing the token.\n   */\n  constructor(data: Partial<Token> = {}) {\n    /**\n     * The unique identifier for the token.\n     * @type {number}\n     */\n    this.id = data.id ?? 0;\n\n    /**\n     * The ID of the item the token is tied to.\n     * @type {string}\n     */\n    this.itemId = data.itemId ?? '';\n\n    /**\n     * The key ID associated with the token.\n     * @type {string}\n     */\n    this.keyId = data.keyId ?? '';\n\n    /**\n     * The access token.\n     * @type {string}\n     */\n    this.accessToken = data.accessToken ?? '';\n\n    /**\n     * The version of the token.\n     * @type {string}\n     */\n    this.version = data.version ?? '';\n  }\n}\n\n/**\n * Export the Token class.\n */\nexport { Token };\n","import {\n  getRandomBalance,\n  getRandomDateInRange,\n  getRandomNumber,\n  getRandomStringWithPrefix,\n} from 'src/lib-utils/utils';\n\n/**\n * Represents the balance history of an account.\n *\n * @remarks\n * This class is used to store and manage the details of the balance history associated with a specific account.\n * It provides an organized structure to manage the time, currency, balance, and other related information.\n *\n * @example Constructing an `AccountBalanceHistory` instance\n *\n * ```ts\n * const data = {\n *   time: new Date(),\n *   accountId: 'ACC-12345',\n *   isoCurrencyCode: 'USD',\n *   balance: 100.50,\n *   userId: 1,\n *   sign: 1,\n *   id: 'BAL-67890'\n * };\n *\n * const accountHistory = new AccountBalanceHistory(data);\n * ```\n *\n * @property time - The timestamp when the balance history was recorded.\n * @property accountId - The account ID associated with the balance history.\n * @property isoCurrencyCode - The ISO currency code of the balance.\n * @property balance - The balance value.\n * @property userId - The user ID associated with the balance history.\n * @property sign - The sign indicating the balance change direction (e.g., +1 or -1).\n * @property id - The unique identifier for the balance history.\n */\nclass AccountBalanceHistory {\n  time: Date | undefined = undefined;\n  accountId = '';\n  isoCurrencyCode = '';\n  balance = 0;\n  userId = 0;\n  sign = 0;\n  id = '';\n\n  /**\n   * Constructs a new AccountBalanceHistory instance.\n   *\n   * @param data - Initialization data for the balance history.\n   */\n  constructor(data: Partial<AccountBalanceHistory>) {\n    if (data)\n      Object.assign(this, {\n        ...data,\n        time: data.time instanceof Date ? data.time : undefined,\n      });\n  }\n\n  /**\n   * Creates a random instance of the AccountBalanceHistory class with all fields populated.\n   * @returns {AccountBalanceHistory} A random AccountBalanceHistory.\n   */\n  static randomInstance(): AccountBalanceHistory {\n    return new AccountBalanceHistory({\n      id: getRandomStringWithPrefix(5, 'BAL-'),\n      time: getRandomDateInRange(2000, 2025),\n      accountId: getRandomStringWithPrefix(5, 'ACC-'),\n      isoCurrencyCode: ['USD', 'EUR', 'GBP', 'JPY', 'AUD'][\n        getRandomNumber(0, 4)\n      ],\n      balance: getRandomBalance(),\n      userId: getRandomNumber(1, 100),\n      sign: [1, -1][getRandomNumber(0, 1)],\n    });\n  }\n}\n\nexport { AccountBalanceHistory };\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nclass Any {\n  /**\n   * A URL/resource name that uniquely identifies the type of the serialized\n   * protocol buffer message. This string must contain at least\n   * one \"/\" character. The last segment of the URL's path must represent\n   * the fully qualified name of the type (as in\n   * `path/google.protobuf.Duration`). The name should be in a canonical form\n   * (e.g., leading \".\" is not accepted).\n   *\n   * In practice, teams usually precompile into the binary all types that they\n   * expect it to use in the context of Any. However, for URLs which use the\n   * scheme `http`, `https`, or no scheme, one can optionally set up a type\n   * server that maps type URLs to message definitions as follows:\n   *\n   * * If no scheme is provided, `https` is assumed.\n   * * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   *   value in binary format, or produce an error.\n   * * Applications are allowed to cache lookup results based on the\n   *   URL, or have them precompiled into a binary to avoid any\n   *   lookup. Therefore, binary compatibility needs to be preserved\n   *   on changes to types. (Use versioned type names to manage\n   *   breaking changes.)\n   *\n   * Note: this functionality is not currently available in the official\n   * protobuf release, and it is not used for type URLs beginning with\n   * type.googleapis.com.\n   *\n   * Schemes other than `http`, `https` (or the empty scheme) might be\n   * used with implementation specific semantics.\n   */\n  typeUrl: string;\n\n  /** Must be a valid serialized protocol buffer of the above specified type. */\n  value: Uint8Array;\n\n  constructor(typeUrl: string, value: Uint8Array) {\n    this.typeUrl = typeUrl;\n    this.value = value;\n  }\n\n  static fromJSON(object: any): Any {\n    return new Any(\n      isSet(object.typeUrl) ? String(object.typeUrl) : '',\n      isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),\n    );\n  }\n\n  toJSON(): unknown {\n    const obj: any = {};\n    if (this.typeUrl !== '') {\n      obj.typeUrl = this.typeUrl;\n    }\n    if (this.value.length !== 0) {\n      obj.value = base64FromBytes(this.value);\n    }\n    return obj;\n  }\n\n  static create<I extends Exact<DeepPartial<Any>, I>>(base?: I): Any {\n    return Any.fromPartial(base ?? {});\n  }\n\n  static fromPartial<I extends Exact<DeepPartial<Any>, I>>(object: I): Any {\n    const message = new Any('', new Uint8Array(0));\n    message.typeUrl = object.typeUrl ?? '';\n    message.value = object.value ?? new Uint8Array(0);\n    return message;\n  }\n}\n\ndeclare const self: any | undefined;\ndeclare const window: any | undefined;\ndeclare const global: any | undefined;\nconst tsProtoGlobalThis: any = (() => {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw 'Unable to locate global object';\n})();\n\nfunction bytesFromBase64(b64: string): Uint8Array {\n  if (tsProtoGlobalThis.Buffer) {\n    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, 'base64'));\n  } else {\n    const bin = tsProtoGlobalThis.atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n      arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n  }\n}\n\nfunction base64FromBytes(arr: Uint8Array): string {\n  if (tsProtoGlobalThis.Buffer) {\n    return tsProtoGlobalThis.Buffer.from(arr).toString('base64');\n  } else {\n    const bin: string[] = [];\n    arr.forEach((byte) => {\n      bin.push(String.fromCharCode(byte));\n    });\n    return tsProtoGlobalThis.btoa(bin.join(''));\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\ntype DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\ntype Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {\n      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;\n    };\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n\nexport { Any };\n","/**\n * Represents the financial sub-profile of a category.\n *\n * @remarks\n * This class is used to store and manage the details of the financial metrics associated with a specific category.\n * It offers a detailed view into the financial transactions, spending habits, and more over various time periods.\n *\n * @example Constructing a `CategoryMetricsFinancialSubProfile` instance\n *\n * ```ts\n * const data = {\n *   month: 5,\n *   personalFinanceCategoryPrimary: 'Groceries',\n *   transactionCount: 10,\n *   spentLastWeek: 50.00,\n *   spentLastTwoWeeks: 95.00,\n *   spentLastMonth: 200.00,\n *   spentLastSixMonths: 1200.00,\n *   spentLastYear: 2400.00,\n *   spentLastTwoYears: 4800.00,\n *   userId: 1\n * };\n *\n * const metricsProfile = new CategoryMetricsFinancialSubProfile(data);\n * ```\n *\n * @property month - The month for which the metrics are recorded.\n * @property personalFinanceCategoryPrimary - The primary category of personal finance for these metrics.\n * @property transactionCount - The number of transactions made in the category.\n * @property spentLastWeek - Amount spent in the last week for this category.\n * @property spentLastTwoWeeks - Amount spent in the last two weeks for this category.\n * @property spentLastMonth - Amount spent in the last month for this category.\n * @property spentLastSixMonths - Amount spent in the last six months for this category.\n * @property spentLastYear - Amount spent in the last year for this category.\n * @property spentLastTwoYears - Amount spent in the last two years for this category.\n * @property userId - The user ID associated with these metrics.\n */\nclass CategoryMetricsFinancialSubProfile {\n  month: number = 0;\n  personalFinanceCategoryPrimary: string = '';\n  transactionCount: number = 0;\n  spentLastWeek: number = 0;\n  spentLastTwoWeeks: number = 0;\n  spentLastMonth: number = 0;\n  spentLastSixMonths: number = 0;\n  spentLastYear: number = 0;\n  spentLastTwoYears: number = 0;\n  userId: number = 0;\n\n  /**\n   * Constructs a new CategoryMetricsFinancialSubProfile instance.\n   *\n   * @param data - Initialization data for the financial sub-profile.\n   */\n  constructor(data: Partial<CategoryMetricsFinancialSubProfile> = {}) {\n    if (data)\n      Object.assign(this, {\n        ...data,\n      });\n  }\n}\n\nexport { CategoryMetricsFinancialSubProfile };\n","/**\n * Represents the monthly expenditure of a category.\n *\n * @remarks\n * This class provides insights into the monthly spending habits of a user for a specific category.\n * It can be beneficial for tracking spending patterns and understanding financial behaviors over time.\n *\n * @example Constructing a `CategoryMonthlyExpenditure` instance\n *\n * ```ts\n * const data = {\n *   month: 5,\n *   personalFinanceCategoryPrimary: 'Utilities',\n *   totalSpending: 150.00,\n *   userId: 1\n * };\n *\n * const monthlyExpenditure = new CategoryMonthlyExpenditure(data);\n * ```\n *\n * @property month - The month for which the expenditure is recorded.\n * @property personalFinanceCategoryPrimary - The primary category of personal finance for this expenditure.\n * @property totalSpending - Total amount spent in the specified month for this category.\n * @property userId - The user ID associated with this expenditure.\n */\nclass CategoryMonthlyExpenditure {\n  month: number = 0;\n  personalFinanceCategoryPrimary: string = '';\n  totalSpending: number = 0;\n  userId: number = 0;\n\n  /**\n   * Constructs a new CategoryMonthlyExpenditure instance.\n   *\n   * @param data - Initialization data for the monthly expenditure.\n   */\n  constructor(data: Partial<CategoryMonthlyExpenditure> = {}) {\n    if (data)\n      Object.assign(this, {\n        ...data,\n      });\n  }\n}\n\nexport { CategoryMonthlyExpenditure };\n","/**\n * Represents the monthly income of a category.\n *\n * @remarks\n * This class provides insights into the monthly income habits of a user for a specific category.\n * It can be valuable for tracking income patterns and understanding financial behaviors over time.\n *\n * @example Constructing a `CategoryMonthlyIncome` instance\n *\n * ```ts\n * const data = {\n *   month: 6,\n *   personalFinanceCategoryPrimary: 'Salary',\n *   totalIncome: 3000,\n *   userId: 123\n * };\n *\n * const monthlyIncome = new CategoryMonthlyIncome(data);\n * ```\n *\n * @property month - The month for which the income is recorded.\n * @property personalFinanceCategoryPrimary - The primary category of personal finance for this income.\n * @property totalIncome - Total income received in the specified month for this category.\n * @property userId - The user ID associated with this income.\n */\nclass CategoryMonthlyIncome {\n  month: number = 0;\n  personalFinanceCategoryPrimary: string = '';\n  totalIncome: number = 0;\n  userId: number = 0;\n\n  /**\n   * Constructs a new CategoryMonthlyIncome instance.\n   *\n   * @param data - Initialization data for the monthly income.\n   */\n  constructor(data: Partial<CategoryMonthlyIncome>) {\n    if (data)\n      Object.assign(this, {\n        ...data,\n      });\n  }\n}\n\nexport { CategoryMonthlyIncome };\n","/**\n * Represents the monthly transaction count of a category.\n *\n * @remarks\n * This class provides insights into the monthly transaction frequency of a user for a specific category.\n * It helps in understanding the user's transactional habits and identifying financial behaviors over specific months.\n *\n * @example Constructing a `CategoryMonthlyTransactionCount` instance\n *\n * ```ts\n * const data = {\n *   month: 6,\n *   personalFinanceCategoryPrimary: 'Groceries',\n *   transactionCount: 15,\n *   userId: 123\n * };\n *\n * const monthlyTransactionCount = new CategoryMonthlyTransactionCount(data);\n * ```\n *\n * @property month - The month for which the transaction count is recorded.\n * @property personalFinanceCategoryPrimary - The primary category of personal finance for these transactions.\n * @property transactionCount - Total number of transactions in the specified month for this category.\n * @property userId - The user ID associated with these transactions.\n */\nclass CategoryMonthlyTransactionCount {\n  month: number = 0;\n  personalFinanceCategoryPrimary: string = '';\n  transactionCount: number = 0;\n  userId: number = 0;\n\n  /**\n   * Constructs a new CategoryMonthlyTransactionCount instance.\n   *\n   * @param data - Initialization data for the monthly transaction count.\n   */\n  constructor(data: Partial<CategoryMonthlyTransactionCount> = {}) {\n    if (data)\n      Object.assign(this, {\n        ...data,\n      });\n  }\n}\n\nexport { CategoryMonthlyTransactionCount };\n","/**\n * Represents the debt to income ratio of a user.\n *\n * @remarks\n * This class provides a snapshot of a user's financial health by comparing their total debt to their total income for a specific month.\n * A lower ratio indicates that a user has a good balance between debt and income, whereas a higher ratio can signal potential financial distress.\n *\n * @example Constructing a `DebtToIncomeRatio` instance\n *\n * ```ts\n * const data = {\n *   month: 6,\n *   ratio: 0.5,\n *   userId: 123\n * };\n *\n * const dtiRatio = new DebtToIncomeRatio(data);\n * ```\n *\n * @property month - The month for which the debt to income ratio is recorded.\n * @property ratio - Represents the proportion of debt to income for the user. It's typically a value between 0 and 1, with higher values indicating more debt relative to income.\n * @property userId - The user ID for whom the ratio is calculated.\n */\nclass DebtToIncomeRatio {\n  month: number;\n  ratio: number;\n  userId: number;\n\n  /**\n   * Constructs a new DebtToIncomeRatio instance.\n   *\n   * @param data - Initialization data for the debt to income ratio.\n   */\n  constructor(data: Partial<DebtToIncomeRatio> = {}) {\n    this.month = data.month ?? 0;\n    this.ratio = data.ratio ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { DebtToIncomeRatio };\n","/**\n * Represents the financial sub-profile metrics related to a user's expenses.\n *\n * @remarks\n * This class captures a detailed overview of a user's spending habits, tracking expenses on various timelines and categorizing them into discretionary and recurring spending.\n * Discretionary spending refers to non-essential expenses, while recurring spending covers fixed, consistent expenses like rent or mortgage.\n *\n * @example Constructing an `ExpenseMetricsFinancialSubProfileMetrics` instance\n *\n * ```ts\n * const data = {\n *   month: 6,\n *   spentLastWeek: 100,\n *   spentLastMonth: 400,\n *   spentLastSixMonths: 2400,\n *   averageMonthlyDiscretionarySpending: 200,\n *   averageMonthlyRecurringSpending: 800,\n *   userId: 123\n * };\n *\n * const expenseMetrics = new ExpenseMetricsFinancialSubProfileMetrics(data);\n * ```\n *\n * @property month - The month for which the financial metrics are recorded.\n * @property spentLastWeek - The total amount spent by the user in the last week.\n * @property spentLastMonth - The total amount spent by the user in the last month.\n * @property spentLastSixMonths - The total amount spent by the user in the last six months.\n * @property averageMonthlyDiscretionarySpending - The average amount spent by the user on non-essential items every month.\n * @property averageMonthlyRecurringSpending - The average monthly fixed expenses of the user.\n * @property userId - The user ID for whom the metrics are calculated.\n */\nclass ExpenseMetricsFinancialSubProfileMetrics {\n  month: number;\n  spentLastWeek: number;\n  spentLastMonth: number;\n  spentLastSixMonths: number;\n  averageMonthlyDiscretionarySpending: number;\n  averageMonthlyRecurringSpending: number;\n  userId: number;\n\n  /**\n   * Constructs a new ExpenseMetricsFinancialSubProfileMetrics instance.\n   *\n   * @param data - Initialization data for the financial sub profile metrics.\n   */\n  constructor(data: Partial<ExpenseMetricsFinancialSubProfileMetrics> = {}) {\n    this.month = data.month ?? 0;\n    this.spentLastWeek = data.spentLastWeek ?? 0;\n    this.spentLastMonth = data.spentLastMonth ?? 0;\n    this.spentLastSixMonths = data.spentLastSixMonths ?? 0;\n    this.averageMonthlyDiscretionarySpending =\n      data.averageMonthlyDiscretionarySpending ?? 0;\n    this.averageMonthlyRecurringSpending =\n      data.averageMonthlyRecurringSpending ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { ExpenseMetricsFinancialSubProfileMetrics };\n","/**\n * Represents the expense metrics related to a user's personal finance.\n *\n * @remarks\n * This class captures an overview of a user's monthly expenditure based on specific financial categories. It provides a comprehensive snapshot of the user's spending patterns, transaction frequency, and total expenses.\n *\n * @example Constructing an `ExpenseMetrics` instance\n *\n * ```ts\n * const data = {\n *   month: 6,\n *   personalFinanceCategoryPrimary: \"Dining\",\n *   transactionCount: 15,\n *   totalExpenses: 500,\n *   userId: 123\n * };\n *\n * const expenseMetrics = new ExpenseMetrics(data);\n * ```\n *\n * @property month - The month for which the expense metrics are recorded.\n * @property personalFinanceCategoryPrimary - The primary category under personal finance for which metrics are recorded.\n * @property transactionCount - The number of transactions carried out in that month under the given category.\n * @property totalExpenses - The total amount spent by the user in that month for the given category.\n * @property userId - The user ID for whom the metrics are calculated.\n */\nclass ExpenseMetrics {\n  month: number;\n  personalFinanceCategoryPrimary: string;\n  transactionCount: number;\n  totalExpenses: number;\n  userId: number;\n\n  /**\n   * Constructs a new ExpenseMetrics instance.\n   *\n   * @param data - Initialization data for the expense metrics.\n   */\n  constructor(data: Partial<ExpenseMetrics> = {}) {\n    this.month = data.month ?? 0;\n    this.personalFinanceCategoryPrimary =\n      data.personalFinanceCategoryPrimary ?? '';\n    this.transactionCount = data.transactionCount ?? 0;\n    this.totalExpenses = data.totalExpenses ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { ExpenseMetrics };\n","/**\n * Represents the comprehensive financial profile of a user.\n *\n * @remarks\n * This class provides a holistic view of a user's financial activities in a given month. It encapsulates the user's total income, total expenses, number of transactions, and the category where the most was spent.\n *\n * @example Constructing a `FinancialProfileMetrics` instance:\n *\n * ```ts\n * const data = {\n *   month: 6,\n *   totalIncome: 5000,\n *   totalExpenses: 3000,\n *   numberOfTransactions: 40,\n *   mostExpensiveCategory: \"Travel\",\n *   userId: 123\n * };\n *\n * const financialProfileMetrics = new FinancialProfileMetrics(data);\n * ```\n *\n * @property month - The month for which the financial profile is detailed.\n * @property totalIncome - The total income of the user for that month.\n * @property totalExpenses - The total expenditure of the user for that month.\n * @property numberOfTransactions - The number of transactions the user made during that month.\n * @property mostExpensiveCategory - The category in which the user spent the most during that month.\n * @property userId - The user ID associated with this financial profile.\n */\nclass FinancialProfileMetrics {\n  month: number;\n  totalIncome: number;\n  totalExpenses: number;\n  numberOfTransactions: number;\n  mostExpensiveCategory: string;\n  userId: number;\n\n  /**\n   * Constructs a new FinancialProfileMetrics instance.\n   *\n   * @param data - Initialization data for the financial profile.\n   */\n  constructor(data: Partial<FinancialProfileMetrics> = {}) {\n    this.month = data.month ?? 0;\n    this.totalIncome = data.totalIncome ?? 0;\n    this.totalExpenses = data.totalExpenses ?? 0;\n    this.numberOfTransactions = data.numberOfTransactions ?? 0;\n    this.mostExpensiveCategory = data.mostExpensiveCategory ?? '';\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { FinancialProfileMetrics };\n","/**\n * Represents the income-expense ratio of a user for a particular month.\n *\n * @remarks\n * This class provides insight into a user's financial health by comparing the total income to total expenses. A ratio greater than 1 indicates that income exceeds expenses, which is a positive financial indicator. Conversely, a ratio less than 1 indicates expenses exceeding income, suggesting potential financial challenges.\n *\n * @example Constructing an `IncomeExpenseRatio` instance:\n *\n * ```ts\n * const data = {\n *   month: 6,\n *   ratio: 1.5,\n *   userId: 123\n * };\n *\n * const incomeExpenseRatio = new IncomeExpenseRatio(data);\n * ```\n *\n * @property month - The month for which the income-expense ratio is detailed.\n * @property ratio - The calculated ratio between total income and total expenses for the user for that month.\n * @property userId - The user ID associated with this income-expense ratio.\n */\nclass IncomeExpenseRatio {\n  month: number;\n  ratio: number;\n  userId: number;\n\n  /**\n   * Constructs a new IncomeExpenseRatio instance.\n   *\n   * @param data - Initialization data for the income-expense ratio.\n   */\n  constructor(data: Partial<IncomeExpenseRatio> = {}) {\n    this.month = data.month ?? 0;\n    this.ratio = data.ratio ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { IncomeExpenseRatio };\n","/**\n * Represents the income metrics for a user's financial sub-profile.\n *\n * @remarks\n * This class offers an insight into a user's historical income patterns, providing data points for various intervals like the last two weeks, last month, and so forth. It's crucial for financial analysis and planning.\n *\n * @example Constructing an `IncomeMetricsFinancialSubProfile` instance:\n *\n * ```ts\n * const data = {\n *   month: 6,\n *   incomeLastTwoWeeks: 2000,\n *   incomeLastMonth: 4000,\n *   incomeLastTwoMonths: 7500,\n *   incomeLastSixMonths: 22000,\n *   incomeLastYear: 50000,\n *   userId: 123\n * };\n *\n * const incomeMetrics = new IncomeMetricsFinancialSubProfile(data);\n * ```\n *\n * @property month - The month for which the income metrics are detailed.\n * @property incomeLastTwoWeeks - The total income for the last two weeks.\n * @property incomeLastMonth - The total income for the last month.\n * @property incomeLastTwoMonths - The total income for the last two months.\n * @property incomeLastSixMonths - The total income for the last six months.\n * @property incomeLastYear - The total income for the last year.\n * @property userId - The user ID associated with these income metrics.\n */\nclass IncomeMetricsFinancialSubProfile {\n  month: number;\n  incomeLastTwoWeeks: number;\n  incomeLastMonth: number;\n  incomeLastTwoMonths: number;\n  incomeLastSixMonths: number;\n  incomeLastYear: number;\n  userId: number;\n\n  /**\n   * Constructs a new IncomeMetricsFinancialSubProfile instance.\n   *\n   * @param data - Initialization data for the income metrics.\n   */\n  constructor(data: Partial<IncomeMetricsFinancialSubProfile> = {}) {\n    this.month = data.month ?? 0;\n    this.incomeLastTwoWeeks = data.incomeLastTwoWeeks ?? 0;\n    this.incomeLastMonth = data.incomeLastMonth ?? 0;\n    this.incomeLastTwoMonths = data.incomeLastTwoMonths ?? 0;\n    this.incomeLastSixMonths = data.incomeLastSixMonths ?? 0;\n    this.incomeLastYear = data.incomeLastYear ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { IncomeMetricsFinancialSubProfile };\n","/**\n * Represents the income metrics for a user.\n *\n * @remarks\n * This class provides an overview of a user's income activity, including the category, transaction count, and total income. It helps in tracking and analyzing the income patterns for a specific month.\n *\n * @example Constructing an `IncomeMetrics` instance:\n *\n * ```ts\n * const data = {\n *   month: 6,\n *   personalFinanceCategoryPrimary: 'Salary',\n *   transactionCount: 2,\n *   totalIncome: 5000,\n *   userId: 123\n * };\n *\n * const incomeDetails = new IncomeMetrics(data);\n * ```\n *\n * @property month - The month for which the income metrics are detailed.\n * @property personalFinanceCategoryPrimary - The primary financial category associated with the income.\n * @property transactionCount - The total number of income transactions for the specified month.\n * @property totalIncome - The total income amount for the month.\n * @property userId - The user ID associated with these income metrics.\n */\nclass IncomeMetrics {\n  month: number;\n  personalFinanceCategoryPrimary: string;\n  transactionCount: number;\n  totalIncome: number;\n  userId: number;\n\n  /**\n   * Constructs a new IncomeMetrics instance.\n   *\n   * @param data - Initialization data for the income metrics.\n   */\n  constructor(data: Partial<IncomeMetrics> = {}) {\n    this.month = data.month ?? 0;\n    this.personalFinanceCategoryPrimary =\n      data.personalFinanceCategoryPrimary ?? '';\n    this.transactionCount = data.transactionCount ?? 0;\n    this.totalIncome = data.totalIncome ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { IncomeMetrics };\n","import { Any } from './any';\n\n/**\n * Represents an investment transaction.\n *\n * @remarks\n * This class provides detailed information regarding a specific investment transaction, including quantities, prices, fees, and other metadata. The associated gotags help in mapping these properties for database integration or other systems.\n *\n * @example Constructing an `InvestmentTransaction` instance:\n *\n * ```ts\n * const data = {\n *   accountId: '12345',\n *   ammount: '150',\n *   investmentTransactionId: 'trans001',\n *   // ... other properties\n * };\n *\n * const investmentTrans = new InvestmentTransaction(data);\n * ```\n *\n * @property accountId - The ID of the account.\n * @property ammount - The amount of the investment transaction. (There's a typo here, it should probably be 'amount'.)\n * @property investmentTransactionId - The unique ID of the investment transaction.\n * @property securityId - The ID of the security involved in the transaction.\n * @property currentDate - The current date of the transaction.\n * @property name - The name of the transaction.\n * @property quantity - The quantity involved in the transaction.\n * @property amount - The exact amount of the transaction.\n * @property price - The price per security for the transaction.\n * @property fees - Any associated fees with the transaction.\n * @property type - The type of transaction.\n * @property subtype - The subtype of transaction.\n * @property isoCurrencyCode - The official ISO code for the currency.\n * @property unofficialCurrencyCode - Any unofficial currency code that might be associated.\n * @property linkId - The ID of the link associated with the transaction.\n * @property id - The unique identifier for the transaction.\n * @property userId - The user ID associated with the transaction.\n * @property createdAt - The timestamp when the transaction was created.\n * @property sign - A sign indicating the direction of the transaction.\n * @property time - The exact time of the transaction.\n * @property additionalProperties - Any additional properties that might be associated with the transaction.\n */\nclass InvestmentTransaction {\n  accountId: string;\n  ammount: string;\n  investmentTransactionId: string;\n  securityId: string;\n  currentDate: string;\n  name: string;\n  quantity: number;\n  amount: number;\n  price: number;\n  fees: number;\n  type: string;\n  subtype: string;\n  isoCurrencyCode: string;\n  unofficialCurrencyCode: string;\n  linkId: number;\n  id: string;\n  userId: number;\n  createdAt: string;\n  sign: number;\n  time: Date | undefined;\n  additionalProperties: Any | undefined;\n\n  /**\n   * Constructs a new InvestmentTransaction instance.\n   *\n   * @param data - Initialization data for the investment transaction.\n   */\n  constructor(data: Partial<InvestmentTransaction> = {}) {\n    this.accountId = data.accountId ?? '';\n    this.ammount = data.ammount ?? ''; // Note: There's a typo here, consider renaming to 'amount'\n    this.investmentTransactionId = data.investmentTransactionId ?? '';\n    this.securityId = data.securityId ?? '';\n    this.currentDate = data.currentDate ?? '';\n    this.name = data.name ?? '';\n    this.quantity = data.quantity ?? 0;\n    this.amount = data.amount ?? 0;\n    this.price = data.price ?? 0;\n    this.fees = data.fees ?? 0;\n    this.type = data.type ?? '';\n    this.subtype = data.subtype ?? '';\n    this.isoCurrencyCode = data.isoCurrencyCode ?? '';\n    this.unofficialCurrencyCode = data.unofficialCurrencyCode ?? '';\n    this.linkId = data.linkId ?? 0;\n    this.id = data.id ?? '';\n    this.userId = data.userId ?? 0;\n    this.createdAt = data.createdAt ?? '';\n    this.sign = data.sign ?? 0;\n    this.time = data.time instanceof Date ? data.time : undefined;\n    this.additionalProperties = data.additionalProperties;\n  }\n}\n\nexport { InvestmentTransaction };\n","/**\n * Represents the financial sub profile of a location.\n *\n * @remarks\n * This class provides a detailed representation of the financial transactions and spending patterns associated with a specific city or location. It can be used to understand user behavior and spending in different regions.\n *\n * @example Constructing a `LocationFinancialSubProfile` instance:\n *\n * ```ts\n * const data = {\n *   locationCity: 'New York',\n *   transactionCount: 120,\n *   spentLastWeek: 250,\n *   // ... other properties\n * };\n *\n * const locationProfile = new LocationFinancialSubProfile(data);\n * ```\n *\n * @property locationCity - The name of the city or location.\n * @property transactionCount - The total number of transactions made in the specified location.\n * @property spentLastWeek - The total amount spent in the location during the last week.\n * @property spentLastTwoWeeks - The total amount spent in the location during the last two weeks.\n * @property spentLastMonth - The total amount spent in the location during the last month.\n * @property spentLastSixMonths - The total amount spent in the location over the past six months.\n * @property spentLastYear - The total amount spent in the location over the past year.\n * @property spentLastTwoYears - The total amount spent in the location over the past two years.\n * @property userId - The user ID associated with this financial profile.\n * @property month - The month for which this financial profile is reported.\n */\nclass LocationFinancialSubProfile {\n  locationCity: string;\n  transactionCount: number;\n  spentLastWeek: number;\n  spentLastTwoWeeks: number;\n  spentLastMonth: number;\n  spentLastSixMonths: number;\n  spentLastYear: number;\n  spentLastTwoYears: number;\n  userId: number;\n  month: number;\n\n  /**\n   * Constructs a new LocationFinancialSubProfile instance.\n   *\n   * @param data - Initialization data for the location financial sub profile.\n   */\n  constructor(data: Partial<LocationFinancialSubProfile> = {}) {\n    this.locationCity = data.locationCity ?? '';\n    this.transactionCount = data.transactionCount ?? 0;\n    this.spentLastWeek = data.spentLastWeek ?? 0;\n    this.spentLastTwoWeeks = data.spentLastTwoWeeks ?? 0;\n    this.spentLastMonth = data.spentLastMonth ?? 0;\n    this.spentLastSixMonths = data.spentLastSixMonths ?? 0;\n    this.spentLastYear = data.spentLastYear ?? 0;\n    this.spentLastTwoYears = data.spentLastTwoYears ?? 0;\n    this.userId = data.userId ?? 0;\n    this.month = data.month ?? 0;\n  }\n}\n\nexport { LocationFinancialSubProfile };\n","import { BankAccount } from './bank-account';\nimport { CategoryMetricsFinancialSubProfile } from './category-metrics-financial-sub-profile';\nimport { CreditAccount } from './credit-account';\nimport { ExpenseMetricsFinancialSubProfileMetrics } from './expense-metrics-financial-sub-profile';\nimport { IncomeMetricsFinancialSubProfile } from './income-metrics-financial-sub-profile';\nimport { InvestmentAccount } from './investment-account';\nimport { LocationFinancialSubProfile } from './location-metrics-financial-sub-profile';\nimport { MerchantMetricsFinancialSubProfile } from './merchant-metrics-financial-sub-profile';\nimport { MortgageAccount } from './mortgage-account';\nimport { PaymentChannelMetricsFinancialSubProfile } from './payment-channel-metrics-financial-sub-profile';\nimport { StudentLoanAccount } from './student-loan-account';\n\n/**\n * Represents the comprehensive financial context of a user.\n *\n * @remarks\n * This class captures a holistic view of a user's financial life, covering various aspects from categories\n * and expenses to different account types. By holding this extensive information, it becomes the foundation\n * for financial decision-making, insights generation, and personalized recommendations.\n *\n * @example Constructing a `MelodyFinancialContext` instance:\n *\n * ```ts\n * // Sample data\n * const financialContextData = {\n *   categories: [...], // array of CategoryMetricsFinancialSubProfile instances\n *   expenses: [...],   // array of ExpenseMetricsFinancialSubProfileMetrics instances\n *   income: [...],     // array of IncomeMetricsFinancialSubProfile instances\n *   // Add other properties here\n * };\n *\n * const userFinancialContext = new MelodyFinancialContext(financialContextData);\n * ```\n *\n * @property categories - Array of metrics related to financial categories.\n * @property expenses - Array of metrics related to expenses.\n * @property income - Array of metrics related to income sources.\n * @property locations - Array of location-specific financial metrics.\n * @property merchants - Array of metrics concerning merchants.\n * @property paymentChannels - Array of metrics related to different payment channels.\n * @property bankAccounts - Array of user's bank accounts.\n * @property investmentAccounts - Array of user's investment accounts.\n * @property creditAccounts - Array of user's credit accounts.\n * @property mortgageLoanAccounts - Array of user's mortgage accounts.\n * @property studentLoanAccounts - Array of user's student loan accounts.\n */\nclass MelodyFinancialContext {\n  categories: CategoryMetricsFinancialSubProfile[] = [];\n  expenses: ExpenseMetricsFinancialSubProfileMetrics[] = [];\n  income: IncomeMetricsFinancialSubProfile[] = [];\n  locations: LocationFinancialSubProfile[] = [];\n  merchants: MerchantMetricsFinancialSubProfile[] = [];\n  paymentChannels: PaymentChannelMetricsFinancialSubProfile[] = [];\n  bankAccounts: BankAccount[] = [];\n  investmentAccounts: InvestmentAccount[] = [];\n  creditAccounts: CreditAccount[] = [];\n  mortgageLoanAccounts: MortgageAccount[] = [];\n  studentLoanAccounts: StudentLoanAccount[] = [];\n\n  /**\n   * Creates an instance of MelodyFinancialContext.\n   * @param data - Object containing properties for MelodyFinancialContext.\n   */\n  constructor(data: Partial<MelodyFinancialContext>) {\n    Object.assign(this, data);\n  }\n}\n\nexport { MelodyFinancialContext };\n","/**\n * Represents the financial sub profile of a merchant.\n *\n * @remarks\n * This class encapsulates the financial metrics related to a specific merchant's transactions. It gives insights into user spending patterns and behaviors over various time frames with a particular merchant.\n *\n * @example Constructing a `MerchantMetricsFinancialSubProfile` instance:\n *\n * ```ts\n * const data = {\n *   merchantName: 'Amazon',\n *   spentLastWeek: 150,\n *   spentLastMonth: 700,\n *   // ... other properties\n * };\n *\n * const merchantProfile = new MerchantMetricsFinancialSubProfile(data);\n * ```\n *\n * @property merchantName - The name of the merchant.\n * @property spentLastWeek - The total amount spent with the merchant during the last week.\n * @property spentLastTwoWeeks - The total amount spent with the merchant during the last two weeks.\n * @property spentLastMonth - The total amount spent with the merchant during the last month.\n * @property spentLastSixMonths - The total amount spent with the merchant over the past six months.\n * @property spentLastYear - The total amount spent with the merchant over the past year.\n * @property spentLastTwoYears - The total amount spent with the merchant over the past two years.\n * @property userId - The user ID associated with this financial profile.\n * @property month - The month for which this financial profile is reported.\n */\nclass MerchantMetricsFinancialSubProfile {\n  merchantName: string;\n  spentLastWeek: number;\n  spentLastTwoWeeks: number;\n  spentLastMonth: number;\n  spentLastSixMonths: number;\n  spentLastYear: number;\n  spentLastTwoYears: number;\n  userId: number;\n  month: number;\n\n  /**\n   * Constructs a new MerchantMetricsFinancialSubProfile instance.\n   *\n   * @param data - Initialization data for the merchant financial sub profile.\n   */\n  constructor(data: Partial<MerchantMetricsFinancialSubProfile> = {}) {\n    this.merchantName = data.merchantName ?? '';\n    this.spentLastWeek = data.spentLastWeek ?? 0;\n    this.spentLastTwoWeeks = data.spentLastTwoWeeks ?? 0;\n    this.spentLastMonth = data.spentLastMonth ?? 0;\n    this.spentLastSixMonths = data.spentLastSixMonths ?? 0;\n    this.spentLastYear = data.spentLastYear ?? 0;\n    this.spentLastTwoYears = data.spentLastTwoYears ?? 0;\n    this.userId = data.userId ?? 0;\n    this.month = data.month ?? 0;\n  }\n}\n\nexport { MerchantMetricsFinancialSubProfile };\n","/**\n * Represents the monthly expenditure of a merchant.\n *\n * @remarks\n * This class encapsulates the monthly financial metrics related to a specific merchant's transactions. It provides insights into how much a user spends with a particular merchant on a monthly basis.\n *\n * @example Constructing a `MerchantMonthlyExpenditure` instance:\n *\n * ```ts\n * const expenditureData = {\n *   month: 7,\n *   merchantName: 'Amazon',\n *   totalSpending: 500,\n *   userId: 12345,\n * };\n *\n * const monthlyExpenditure = new MerchantMonthlyExpenditure(expenditureData);\n * ```\n *\n * @property month - The month for which this expenditure is reported.\n * @property merchantName - The name of the merchant.\n * @property totalSpending - The total amount spent with the merchant during the month.\n * @property userId - The user ID associated with this expenditure.\n */\nclass MerchantMonthlyExpenditure {\n  month: number;\n  merchantName: string;\n  totalSpending: number;\n  userId: number;\n\n  /**\n   * Constructs a new MerchantMonthlyExpenditure instance.\n   *\n   * @param data - Initialization data for the merchant monthly expenditure.\n   */\n  constructor(data: Partial<MerchantMonthlyExpenditure> = {}) {\n    this.month = data.month ?? 0;\n    this.merchantName = data.merchantName ?? '';\n    this.totalSpending = data.totalSpending ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { MerchantMonthlyExpenditure };\n","/**\n * Represents the monthly balance of a user.\n *\n * @remarks\n * This class provides insights into the net balance of a user for a specific month, helping in understanding their financial health and status for that period.\n *\n * @example Constructing a `MonthlyBalance` instance:\n *\n * ```ts\n * const balanceData = {\n *   month: 7,\n *   netBalance: 1000,\n *   userId: 12345,\n * };\n *\n * const userMonthlyBalance = new MonthlyBalance(balanceData);\n * ```\n *\n * @property month - The month for which the balance is reported.\n * @property netBalance - The net balance of the user for the month.\n * @property userId - The user ID associated with this balance.\n */\nclass MonthlyBalance {\n  month: number;\n  netBalance: number;\n  userId: number;\n\n  /**\n   * Constructs a new MonthlyBalance instance.\n   *\n   * @param data - Initialization data for the monthly balance.\n   */\n  constructor(data: Partial<MonthlyBalance> = {}) {\n    this.month = data.month ?? 0;\n    this.netBalance = data.netBalance ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { MonthlyBalance };\n","/**\n * Represents the monthly expenditure of a user.\n *\n * @remarks\n * This class offers insights into the total expenditure of a user for a particular month, assisting in understanding their spending habits and financial decisions during that period.\n *\n * @example Constructing a `MonthlyExpenditure` instance:\n *\n * ```ts\n * const expenditureData = {\n *   month: 7,\n *   totalSpending: 500,\n *   userId: 12345,\n * };\n *\n * const userMonthlyExpenditure = new MonthlyExpenditure(expenditureData);\n * ```\n *\n * @property month - The month for which the expenditure is reported.\n * @property totalSpending - The total expenditure of the user for the month.\n * @property userId - The user ID associated with this expenditure record.\n */\nclass MonthlyExpenditure {\n  month: number;\n  totalSpending: number;\n  userId: number;\n\n  /**\n   * Constructs a new MonthlyExpenditure instance.\n   *\n   * @param data - Initialization data for the monthly expenditure.\n   */\n  constructor(data: Partial<MonthlyExpenditure> = {}) {\n    this.month = data.month ?? 0;\n    this.totalSpending = data.totalSpending ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { MonthlyExpenditure };\n","/**\n * Represents the monthly income of a user.\n *\n * @remarks\n * This class provides insights into the total income of a user for a particular month, assisting in understanding their income sources and financial gains during that timeframe.\n *\n * @example Constructing a `MonthlyIncome` instance:\n *\n * ```ts\n * const incomeData = {\n *   month: 7,\n *   totalIncome: 1500,\n *   userId: 12345,\n * };\n *\n * const userMonthlyIncome = new MonthlyIncome(incomeData);\n * ```\n *\n * @property month - The month for which the income is reported.\n * @property totalIncome - The total income of the user for the month.\n * @property userId - The user ID associated with this income record.\n */\nclass MonthlyIncome {\n  month: number;\n  totalIncome: number;\n  userId: number;\n\n  /**\n   * Constructs a new MonthlyIncome instance.\n   *\n   * @param data - Initialization data for the monthly income.\n   */\n  constructor(data: Partial<MonthlyIncome> = {}) {\n    this.month = data.month ?? 0;\n    this.totalIncome = data.totalIncome ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { MonthlyIncome };\n","/**\n * Represents the monthly savings of a user.\n *\n * @remarks\n * This class provides insights into the net savings of a user for a particular month. It assists in understanding their financial health, disciplined spending, and savings habits during that timeframe.\n *\n * @example Constructing a `MonthlySavings` instance:\n *\n * ```ts\n * const savingsData = {\n *   month: 7,\n *   netSavings: 800,\n *   userId: 12345,\n * };\n *\n * const userMonthlySavings = new MonthlySavings(savingsData);\n * ```\n *\n * @property month - The month for which the savings are reported.\n * @property netSavings - The net savings amount of the user for the month.\n * @property userId - The user ID associated with this savings record.\n */\nclass MonthlySavings {\n  month: number;\n  netSavings: number;\n  userId: number;\n\n  /**\n   * Constructs a new MonthlySavings instance.\n   *\n   * @param data - Initialization data for the monthly savings.\n   */\n  constructor(data: Partial<MonthlySavings> = {}) {\n    this.month = data.month ?? 0;\n    this.netSavings = data.netSavings ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { MonthlySavings };\n","/**\n * Represents the monthly total quantity of a security by user.\n *\n * @remarks\n * This class provides insights into the total quantity of a particular security held by a user for a specific month. It aids in tracking investments and holdings in different securities.\n *\n * @example Constructing a `MonthlyTotalQuantityBySecurityAndUser` instance:\n *\n * ```ts\n * const securityData = {\n *   month: 7,\n *   securityId: \"XYZ123\",\n *   totalQuantity: 100,\n *   userId: 12345,\n * };\n *\n * const userSecurity = new MonthlyTotalQuantityBySecurityAndUser(securityData);\n * ```\n *\n * @property month - The month for which the total quantity is reported.\n * @property securityId - The unique identifier for the security.\n * @property totalQuantity - The total quantity of the security held by the user for the month.\n * @property userId - The user ID associated with this record.\n */\nclass MonthlyTotalQuantityBySecurityAndUser {\n  month: number;\n  securityId: string;\n  totalQuantity: number;\n  userId: number;\n\n  /**\n   * Constructs a new MonthlyTotalQuantityBySecurityAndUser instance.\n   *\n   * @param data - Initialization data for the monthly total quantity by security and user.\n   */\n  constructor(data: Partial<MonthlyTotalQuantityBySecurityAndUser> = {}) {\n    this.month = data.month ?? 0;\n    this.securityId = data.securityId || '';\n    this.totalQuantity = data.totalQuantity ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { MonthlyTotalQuantityBySecurityAndUser };\n","/**\n * Represents the monthly transaction count of a user.\n *\n * @remarks\n * This class offers insights into the number of transactions a user has made for a specific month. It aids in monitoring user activity and spending behavior.\n *\n * @example Constructing a `MonthlyTransactionCount` instance:\n *\n * ```ts\n * const userTransactionData = {\n *   month: 7,\n *   transactionCount: 20,\n *   userId: 12345,\n * };\n *\n * const userTransaction = new MonthlyTransactionCount(userTransactionData);\n * ```\n *\n * @property month - The month for which the transaction count is reported.\n * @property transactionCount - The total number of transactions made by the user for the month.\n * @property userId - The user ID associated with this record.\n */\nclass MonthlyTransactionCount {\n  month: number;\n  transactionCount: number;\n  userId: number;\n\n  /**\n   * Constructs a new MonthlyTransactionCount instance.\n   *\n   * @param data - Initialization data for the monthly transaction count.\n   */\n  constructor(data: Partial<MonthlyTransactionCount> = {}) {\n    this.month = data.month ?? 0;\n    this.transactionCount = data.transactionCount ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { MonthlyTransactionCount };\n","/**\n * Represents the financial sub profile of a payment channel.\n *\n * @remarks\n * This class provides insights into a user's spending behavior and patterns across different payment channels. It helps in understanding user preferences and can be instrumental in tailoring offerings to user habits.\n *\n * @example Constructing a `PaymentChannelMetricsFinancialSubProfile` instance:\n *\n * ```ts\n * const paymentChannelData = {\n *   paymentChannel: 'Credit Card',\n *   spentLastWeek: 200,\n *   spentLastTwoWeeks: 500,\n *   spentLastMonth: 1200,\n *   spentLastSixMonths: 7500,\n *   spentLastYear: 15000,\n *   spentLastTwoYears: 30000,\n *   userId: 12345,\n *   month: 7,\n *   transactionCount: 25\n * };\n *\n * const paymentChannelProfile = new PaymentChannelMetricsFinancialSubProfile(paymentChannelData);\n * ```\n *\n * @property paymentChannel - The type of payment channel.\n * @property spentLastWeek - Amount spent by the user through this channel in the last week.\n * @property spentLastTwoWeeks - Amount spent in the last two weeks.\n * @property spentLastMonth - Amount spent in the last month.\n * @property spentLastSixMonths - Amount spent in the last six months.\n * @property spentLastYear - Amount spent in the last year.\n * @property spentLastTwoYears - Amount spent in the last two years.\n * @property userId - The user ID associated with this record.\n * @property month - The month for which the data is reported.\n * @property transactionCount - Number of transactions made through this channel in the specified month.\n */\nclass PaymentChannelMetricsFinancialSubProfile {\n  paymentChannel: string;\n  spentLastWeek: number;\n  spentLastTwoWeeks: number;\n  spentLastMonth: number;\n  spentLastSixMonths: number;\n  spentLastYear: number;\n  spentLastTwoYears: number;\n  userId: number;\n  month: number;\n  transactionCount: number;\n\n  /**\n   * Constructs a new PaymentChannelMetricsFinancialSubProfile instance.\n   *\n   * @param data - Initialization data for the financial sub profile of the payment channel.\n   */\n  constructor(data: Partial<PaymentChannelMetricsFinancialSubProfile> = {}) {\n    this.paymentChannel = data.paymentChannel ?? '';\n    this.spentLastWeek = data.spentLastWeek ?? 0;\n    this.spentLastTwoWeeks = data.spentLastTwoWeeks ?? 0;\n    this.spentLastMonth = data.spentLastMonth ?? 0;\n    this.spentLastSixMonths = data.spentLastSixMonths ?? 0;\n    this.spentLastYear = data.spentLastYear ?? 0;\n    this.spentLastTwoYears = data.spentLastTwoYears ?? 0;\n    this.userId = data.userId ?? 0;\n    this.month = data.month ?? 0;\n    this.transactionCount = data.transactionCount ?? 0;\n  }\n}\n\nexport { PaymentChannelMetricsFinancialSubProfile };\n","/**\n * Represents the monthly expenditure of a payment channel.\n *\n * @remarks\n * This class provides insights into the monthly spending behavior of a user across different payment channels. It offers a detailed view of user spending patterns for each month, aiding financial analysis and decision-making.\n *\n * @example Constructing a `PaymentChannelMonthlyExpenditure` instance:\n *\n * ```ts\n * const monthlyExpenditureData = {\n *   month: 7,\n *   paymentChannel: 'Credit Card',\n *   totalSpending: 1200,\n *   userId: 12345\n * };\n *\n * const monthlyExpenditure = new PaymentChannelMonthlyExpenditure(monthlyExpenditureData);\n * ```\n *\n * @property month - The month for which the expenditure data is reported.\n * @property paymentChannel - The type of payment channel.\n * @property totalSpending - Total amount spent by the user through this channel for the specified month.\n * @property userId - The user ID associated with this record.\n */\nclass PaymentChannelMonthlyExpenditure {\n  month: number;\n  paymentChannel: string;\n  totalSpending: number;\n  userId: number;\n\n  /**\n   * Constructs a new PaymentChannelMonthlyExpenditure instance.\n   *\n   * @param data - Initialization data for the monthly expenditure of the payment channel.\n   */\n  constructor(data: Partial<PaymentChannelMonthlyExpenditure> = {}) {\n    this.month = data.month ?? 0;\n    this.paymentChannel = data.paymentChannel ?? '';\n    this.totalSpending = data.totalSpending ?? 0;\n    this.userId = data.userId ?? 0;\n  }\n}\n\nexport { PaymentChannelMonthlyExpenditure };\n","/**\n * Represents the types of recurring flows.\n *\n * @remarks\n * This class encapsulates the different states of recurring flows such as unspecified, inflow, outflow, and unrecognized. This is useful to categorize and identify the nature of a recurring financial flow.\n *\n * @example Using `ReCurringFlow`:\n *\n * ```ts\n * const currentFlow = ReCurringFlow.RE_CURRING_FLOW_INFLOW;\n * if (currentFlow === ReCurringFlow.RE_CURRING_FLOW_INFLOW) {\n *   console.log('The recurring flow is an inflow.');\n * }\n * ```\n *\n */\nenum ReCurringFlow {\n  RE_CURRING_FLOW_UNSPECIFIED = 0,\n  RE_CURRING_FLOW_INFLOW = 1,\n  RE_CURRING_FLOW_OUTFLOW = 2,\n  UNRECOGNIZED = -1,\n}\n\nexport { ReCurringFlow };\n","/**\n * Represents the different statuses of reoccurring transactions.\n *\n * @remarks\n * This class encapsulates the different statuses of reoccurring transactions like unspecified, mature, early detection, tombstoned, and unrecognized. This is useful for understanding the maturity and consistency of recurring transactions.\n *\n * @example Using `ReOccuringTransactionsStatus`:\n *\n * ```ts\n * const transactionStatus = ReOccuringTransactionsStatus.RE_OCCURING_TRANSACTIONS_STATUS_MATURE;\n * if (transactionStatus === ReOccuringTransactionsStatus.RE_OCCURING_TRANSACTIONS_STATUS_MATURE) {\n *   console.log('The transaction is mature.');\n * }\n * ```\n *\n */\nenum ReOccuringTransactionsStatus {\n  RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED = 0,\n  /**\n   * RE_OCCURING_TRANSACTIONS_STATUS_MATURE - A MATURE recurring stream should have at least 3 transactions and happen\n   *  on a regular cadence (For Annual recurring stream, we will mark it MATURE after 2 instances).\n   */\n  RE_OCCURING_TRANSACTIONS_STATUS_MATURE = 1,\n  /**\n   * RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION - When a recurring transaction first appears in the transaction history and before it fulfills\n   * the requirement of a mature stream, the status will be EARLY_DETECTION.\n   */\n  RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION = 2,\n  /**\n   * RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED - A stream that was previously in the EARLY_DETECTION status will move to the TOMBSTONED\n   * status when no further transactions were found at the next expected date.\n   */\n  RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED = 3,\n  UNRECOGNIZED = -1,\n}\n\nexport { ReOccuringTransactionsStatus };\n","/**\n * Represents the frequency of a recurring transaction.\n *\n * @remarks\n * This enumeration provides a range of possible frequencies for recurring financial transactions.\n * It helps to classify the regularity at which a user might be billed or receive payments.\n * From weekly to annually, this enum ensures clear representation of time intervals for\n * financial activities in applications or services.\n *\n * @example Using `ReOccuringTransactionsFrequency` in a function:\n *\n * ```ts\n * function getNextBillingDate(startDate: Date, frequency: ReOccuringTransactionsFrequency): Date {\n *   let resultDate = new Date(startDate);\n *   switch (frequency) {\n *     case ReOccuringTransactionsFrequency.RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY:\n *       resultDate.setDate(resultDate.getDate() + 7);\n *       break;\n *     // Handle other frequencies...\n *     default:\n *       break;\n *   }\n *   return resultDate;\n * }\n * ```\n *\n * @enum\n * @property RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED - Default value when the frequency is not specified or recognized.\n * @property RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY - Represents a transaction that occurs every week.\n * @property RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY - Represents a transaction that occurs every two weeks.\n * @property RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY - Represents a transaction that occurs twice a month.\n * @property RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY - Represents a transaction that occurs once a month.\n * @property RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY - Represents a transaction that occurs once a year.\n * @property UNRECOGNIZED - Represents an unrecognized or unsupported frequency value.\n */\nenum ReOccuringTransactionsFrequency {\n  RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED = 0,\n  RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY = 1,\n  RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY = 2,\n  RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY = 3,\n  RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY = 4,\n  RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY = 5,\n  UNRECOGNIZED = -1,\n}\n\nexport { ReOccuringTransactionsFrequency };\n","import { ReCurringFlow } from './recurring-flow';\nimport { ReOccuringTransactionsStatus } from './recurring-transactions-status';\nimport { ReOccuringTransactionsFrequency } from './recurring-transactions-frequency';\nimport { Any } from '.';\n\n/**\n * Represents a recurring financial transaction for a user.\n *\n * @remarks\n * This class captures and manages the specifics of a recurring financial transaction, such as subscriptions\n * or regular bill payments. It tracks transaction details, merchants, dates, and amounts, making it useful\n * for personal finance management applications or services.\n *\n * @example Constructing a `ReOccuringTransaction`\n *\n * ```ts\n * // Example data\n * const transactionData = {\n *   accountId: 'account123',\n *   description: 'Monthly subscription to streaming service',\n *   merchantName: 'StreamFlix',\n *   averageAmount: '14.99',\n *   averageAmountIsoCurrencyCode: 'USD',\n *   // Add other properties here\n * };\n *\n * const recurringTransaction = new ReOccuringTransaction(transactionData);\n * ```\n *\n * @property accountId - The unique identifier of the account associated with the transaction.\n * @property streamId - The unique identifier of the transaction stream.\n * @property categoryId - The unique identifier of the category associated with the transaction.\n * @property description - A brief overview of the transaction's purpose.\n * @property merchantName - The name of the merchant or business entity related to the transaction.\n * @property personalFinanceCategoryPrimary - The primary financial category of the transaction.\n * @property personalFinanceCategoryDetailed - The more detailed categorization of the transaction.\n * @property firstDate - The date when the transaction first occurred.\n * @property lastDate - The date of the most recent occurrence of the transaction.\n * @property frequency - How often the transaction occurs (e.g., weekly, monthly).\n * @property transactionIds - A list of unique transaction IDs associated with this recurring transaction.\n * @property averageAmount - The typical transaction amount for this recurring item.\n * @property averageAmountIsoCurrencyCode - The currency code of the average transaction amount.\n * @property lastAmount - The amount from the most recent transaction occurrence.\n * @property lastAmountIsoCurrencyCode - The currency code of the most recent transaction amount.\n * @property isActive - Flag indicating if the transaction is still active or not.\n * @property status - The current status of the recurring transaction (e.g., active, paused).\n * @property updatedTime - The last time the transaction details were updated.\n * @property userId - The identifier of the user associated with this transaction.\n * @property linkId - The unique identifier of a linked transaction or reference.\n * @property id - The unique identifier of this recurring transaction.\n * @property flow - The direction or flow of the transaction (e.g., inbound, outbound).\n * @property sign - A numerical indicator that signifies the nature of the transaction (e.g., credit, debit).\n * @property time - The exact timestamp of the transaction.\n * @property additionalProperties - Any extra data or properties associated with the transaction.\n */\nclass ReOccuringTransaction {\n  /** The unique identifier of the account associated with the transaction. */\n  public accountId = '';\n\n  /** The unique identifier of the transaction stream. */\n  public streamId = '';\n\n  /** The unique identifier of the category associated with the transaction. */\n  public categoryId = '';\n\n  /** A description of the transaction. */\n  public description = '';\n\n  /** The name of the merchant. */\n  public merchantName = '';\n\n  /** The primary personal finance category of the transaction. */\n  public personalFinanceCategoryPrimary = '';\n\n  /** The detailed personal finance category of the transaction. */\n  public personalFinanceCategoryDetailed = '';\n\n  /** The date of the first occurrence of the transaction. */\n  public firstDate = '';\n\n  /** The date of the last occurrence of the transaction. */\n  public lastDate = '';\n\n  /** The frequency of the recurring transaction. */\n  public frequency: ReOccuringTransactionsFrequency =\n    ReOccuringTransactionsFrequency.RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED;\n\n  /** A comma-separated list of transaction IDs. */\n  public transactionIds = '';\n\n  /** The average amount of the transaction. */\n  public averageAmount = '';\n\n  /** The ISO currency code of the average amount. */\n  public averageAmountIsoCurrencyCode = '';\n\n  /** The amount of the last occurrence of the transaction. */\n  public lastAmount = '';\n\n  /** The ISO currency code of the last amount. */\n  public lastAmountIsoCurrencyCode = '';\n\n  /** Indicates whether the transaction is active. */\n  public isActive = false;\n\n  /** The status of the recurring transaction. */\n  public status: ReOccuringTransactionsStatus =\n    ReOccuringTransactionsStatus.RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED;\n\n  /** The last time the transaction was updated. */\n  public updatedTime = '';\n\n  /** The unique identifier of the user associated with the transaction. */\n  public userId = 0;\n\n  /** The unique identifier of the linked transaction. */\n  public linkId = 0;\n\n  /** The unique identifier of the transaction. */\n  public id = '';\n\n  /** The flow of the recurring transaction. */\n  public flow: ReCurringFlow = ReCurringFlow.UNRECOGNIZED;\n\n  /** A numerical sign associated with the transaction. */\n  public sign = 0;\n\n  /** The date and time of the transaction. */\n  public time: Date | undefined;\n\n  /** Additional properties associated with the transaction. */\n  public additionalProperties: Any | undefined;\n\n  /**\n   * Creates an instance of ReOccuringTransaction.\n   * @param data - Object containing properties for ReOccuringTransaction.\n   * @example\n   * const transactionData = {\n   *   accountId: 'account123',\n   *   description: 'Monthly subscription',\n   *   // Add other properties here\n   * };\n   * const recurringTransaction = new ReOccuringTransaction(transactionData);\n   */\n  constructor(data: Partial<ReOccuringTransaction>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n        time: data.time ? new Date(data.time) : undefined,\n      });\n    }\n  }\n\n  static randomInstance(): ReOccuringTransaction {\n    return new ReOccuringTransaction({\n      accountId: 'account123',\n      streamId: 'stream123',\n      categoryId: 'category123',\n\n      description: 'Monthly subscription',\n      merchantName: 'StreamFlix',\n      personalFinanceCategoryPrimary: 'Entertainment',\n      personalFinanceCategoryDetailed: 'Streaming Services',\n      firstDate: '2020-01-01',\n      lastDate: '2020-12-31',\n      frequency:\n        ReOccuringTransactionsFrequency.RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY,\n      transactionIds: 'transaction123',\n      averageAmount: '14.99',\n      averageAmountIsoCurrencyCode: 'USD',\n      lastAmount: '14.99',\n      lastAmountIsoCurrencyCode: 'USD',\n      isActive: true,\n      status:\n        ReOccuringTransactionsStatus.RE_OCCURING_TRANSACTIONS_STATUS_MATURE,\n      updatedTime: '2020-01-01',\n      userId: 123,\n      linkId: 123,\n      id: 'transaction123',\n      flow: ReCurringFlow.UNRECOGNIZED,\n      sign: 0,\n      time: new Date(),\n    });\n  }\n}\n\nexport { ReOccuringTransaction };\n","/**\n * Represents the total investment in a particular security.\n *\n * @remarks\n * This class encapsulates details about the total investment made by a user in a specific security.\n * It provides a structured way to track and manage the investment amounts across different securities\n * for portfolio management, financial reporting, and analysis purposes.\n *\n * @example Constructing a `TotalInvestmentBySecurity` instance:\n *\n * ```ts\n * // Example data\n * const investmentData = {\n *   securityId: 'AAPL123',\n *   totalInvestment: 5000,\n *   userId: 456\n * };\n *\n * const investment = new TotalInvestmentBySecurity(investmentData);\n * ```\n *\n * @property securityId - The unique identifier of the security (e.g., stock ticker, bond ID).\n * @property totalInvestment - The total monetary amount invested in the security.\n * @property userId - The identifier of the user who made the investment.\n */\nexport class TotalInvestmentBySecurity {\n  public securityId: string = '';\n  public totalInvestment: number = 0;\n  public userId: number = 0;\n\n  /**\n   * Creates an instance of TotalInvestmentBySecurity.\n   *\n   * @param data - Object containing properties for TotalInvestmentBySecurity.\n   */\n  constructor(data: Partial<TotalInvestmentBySecurity>) {\n    if (data)\n      Object.assign(this, {\n        ...data,\n      });\n  }\n}\n","/**\n * Represents the aggregated transactions of a user by month.\n *\n * @remarks\n * This class is essential for generating monthly reports or providing insights into a user's spending habits.\n * By capturing the primary finance category, location, payment channel, and merchant name, it gives\n * a comprehensive view of the user's monthly transactions.\n *\n * @example Constructing a `TransactionAggregatesByMonth` instance:\n *\n * ```ts\n * // Sample transaction aggregate data\n * const aggregateData = {\n *   month: 5, // May\n *   personalFinanceCategoryPrimary: 'Food & Dining',\n *   locationCity: 'New York',\n *   paymentChannel: 'Online',\n *   merchantName: 'Restaurant XYZ',\n *   transactionCount: 15,\n *   totalAmount: 500,\n *   userId: 12345,\n * };\n *\n * const monthlyAggregate = new TransactionAggregatesByMonth(aggregateData);\n * ```\n *\n * @property month - The month (1-12) for which the transactions are aggregated.\n * @property personalFinanceCategoryPrimary - The primary category of the transaction, e.g., 'Food & Dining', 'Entertainment'.\n * @property locationCity - The city in which the transaction took place.\n * @property paymentChannel - The channel through which the payment was made, e.g., 'Online', 'In-store'.\n * @property merchantName - The name of the merchant or store where the transaction was made.\n * @property transactionCount - The total number of transactions made in the specified month.\n * @property totalAmount - The total amount spent in the specified month.\n * @property userId - Identifier of the user associated with these transactions.\n */\nclass TransactionAggregatesByMonth {\n  month: number = 0;\n  personalFinanceCategoryPrimary: string = '';\n  locationCity: string = '';\n  paymentChannel: string = '';\n  merchantName: string = '';\n  transactionCount: number = 0;\n  totalAmount: number = 0;\n  userId: number = 0;\n\n  /**\n   * Creates an instance of TransactionAggregatesByMonth.\n   * @param data - Object containing properties for TransactionAggregatesByMonth.\n   */\n  constructor(data: Partial<TransactionAggregatesByMonth>) {\n    Object.assign(this, data);\n  }\n}\n\nexport { TransactionAggregatesByMonth };\n","import {\n  getRandomArrayItem,\n  getRandomDate,\n  getRandomNumber,\n  getRandomString,\n} from 'src/lib-utils/utils';\nimport { Any } from '.';\n\n/**\n * Represents a financial transaction.\n *\n * @remarks\n * This class provides a comprehensive view of a financial transaction, capturing essential\n * details like amounts, dates, merchant information, and location data. It's an integral component\n * for financial systems, banking applications, or any platform requiring transaction tracking and\n * analytics.\n *\n * @example Constructing a `Transaction` instance:\n *\n * ```ts\n * // Sample transaction data\n * const transactionDetails = {\n *   accountId: 'acc-123',\n *   amount: 500,\n *   isoCurrencyCode: 'USD',\n *   // ... other properties ...\n * };\n *\n * const transactionInstance = new Transaction(transactionDetails);\n * ```\n *\n * @property accountId - Unique identifier of the account associated with the transaction.\n * @property amount - Monetary amount of the transaction.\n * @property isoCurrencyCode - Official ISO code representing the currency used in the transaction.\n * @property unofficialCurrencyCode - Any non-official currency codes, if applicable.\n * @property categoryId - Identifier for the transaction category.\n * @property checkNumber - Check number if the transaction was a cheque payment.\n * @property currentDate - Date of the transaction.\n * @property currentDatetime - Detailed timestamp of the transaction.\n * @property authorizedDate - Date when the transaction was authorized.\n * @property authorizedDatetime - Timestamp when the transaction was authorized.\n * @property name - Name or title of the transaction.\n * @property merchantName - Name of the merchant or vendor.\n * @property paymentChannel - Channel through which payment was made (e.g., online, in-store).\n * @property pending - Indicates if the transaction is still pending.\n * @property pendingTransactionId - If pending, a unique identifier for the pending transaction.\n * @property accountOwner - Name of the account owner or holder.\n * @property transactionId - Unique identifier for the transaction.\n * @property transactionCode - Code related to the type or nature of the transaction.\n * @property id - Unique identifier for this specific record or object.\n * @property userId - Identifier of the user associated with the transaction.\n * @property linkId - Identifier linking to another related record or object.\n * @property sign - Numerical sign associated with the transaction (e.g., positive for credit, negative for debit).\n * @property personalFinanceCategoryPrimary - Broad category for personal finance classification.\n * @property personalFinanceCategoryDetailed - More detailed or specific financial category.\n * @property locationAddress - Address where the transaction occurred.\n * @property locationCity - City of the transaction location.\n * @property locationRegion - Region or state of the transaction location.\n * @property locationPostalCode - Postal or ZIP code of the transaction location.\n * @property locationCountry - Country of the transaction location.\n * @property locationLat - Latitude coordinates of the transaction location.\n * @property locationLon - Longitude coordinates of the transaction location.\n * @property locationStoreNumber - Store number if the transaction was at a retail chain.\n * @property paymentMetaByOrderOf - Metadata field for payment details.\n * @property paymentMetaPayee - Metadata about the payee or recipient of the funds.\n * @property paymentMetaPayer - Metadata about the payer or sender of the funds.\n * @property paymentMetaPaymentMethod - Method used for the payment.\n * @property paymentMetaPaymentProcessor - Processor or intermediary handling the payment.\n * @property paymentMetaPpdId - Prearranged Payment and Deposit identifier.\n * @property paymentMetaReason - Reason or note for the transaction.\n * @property paymentMetaReferenceNumber - A reference number for the transaction.\n * @property time - Timestamp of the transaction.\n * @property additionalProperties - Any extra or miscellaneous properties related to the transaction.\n * @property categories - List of categories associated with the transaction.\n */\nclass Transaction {\n  public accountId = '';\n  public amount = 0;\n  public isoCurrencyCode = '';\n  public unofficialCurrencyCode = '';\n  public categoryId = '';\n  public checkNumber = '';\n  public currentDate = '';\n  public currentDatetime = '';\n  public authorizedDate = '';\n  public authorizedDatetime = '';\n  public name = '';\n  public merchantName = '';\n  public paymentChannel = '';\n  public pending = false;\n  public pendingTransactionId = '';\n  public accountOwner = '';\n  public transactionId = '';\n  public transactionCode = '';\n  public id = '';\n  public userId = 0;\n  public linkId = 0;\n  public sign = 0;\n  public personalFinanceCategoryPrimary = '';\n  public personalFinanceCategoryDetailed = '';\n  public locationAddress = '';\n  public locationCity = '';\n  public locationRegion = '';\n  public locationPostalCode = '';\n  public locationCountry = '';\n  public locationLat = 0;\n  public locationLon = 0;\n  public locationStoreNumber = '';\n  public paymentMetaByOrderOf = '';\n  public paymentMetaPayee = '';\n  public paymentMetaPayer = '';\n  public paymentMetaPaymentMethod = '';\n  public paymentMetaPaymentProcessor = '';\n  public paymentMetaPpdId = '';\n  public paymentMetaReason = '';\n  public paymentMetaReferenceNumber = '';\n  public time: Date | undefined;\n  public additionalProperties: Any | undefined; // Replaced 'Any' with 'any' as TypeScript uses 'any'\n  public categories: string[] = []; // Replaced 'any' with 'string[]' as TypeScript uses 'any'\n\n  /**\n   * Creates an instance of Transaction.\n   *\n   * @param data - Object with details for Transaction.\n   */\n  constructor(data: Partial<Transaction>) {\n    Object.assign(this, data);\n    this.time = data.time ? new Date(data.time) : undefined;\n  }\n\n  static randomInstance(): Transaction {\n    return new Transaction({\n      accountId: getRandomString(10),\n      amount: getRandomNumber(1, 10000),\n      isoCurrencyCode: 'USD', // For simplicity, using a fixed value; can be randomized as needed\n      unofficialCurrencyCode: getRandomString(3),\n      categoryId: getRandomString(5),\n      checkNumber: getRandomString(8),\n      currentDate: getRandomDate(new Date(2022, 0, 1), new Date()).slice(0, 10),\n      currentDatetime: getRandomDate(new Date(2022, 0, 1), new Date()),\n      authorizedDate: getRandomDate(new Date(2022, 0, 1), new Date()).slice(\n        0,\n        10,\n      ),\n      authorizedDatetime: getRandomDate(new Date(2022, 0, 1), new Date()),\n      name: getRandomString(20),\n      merchantName: getRandomArrayItem([\n        'Amazon',\n        'Pizza Hut',\n        'Duane Reades',\n        'Fresh Grocer',\n        'Walmart',\n        'Subway',\n        'Amtrak',\n        'Best Buy',\n        'Starbucks',\n        \"McDonald's\",\n        'Apple Store',\n        'Nike',\n        'Adidas',\n        'Home Depot',\n        'Target',\n      ]),\n      paymentChannel: getRandomNumber(0, 2) === 0 ? 'online' : 'in-store',\n      pending: Boolean(getRandomNumber(0, 2)),\n      pendingTransactionId: getRandomString(10),\n      accountOwner: getRandomString(15),\n      transactionId: getRandomString(10),\n      transactionCode: getRandomString(5),\n      id: getRandomString(10),\n      userId: getRandomNumber(1, 10000),\n      linkId: getRandomNumber(1, 10000),\n      sign: getRandomNumber(0, 2) === 0 ? -1 : 1,\n      personalFinanceCategoryPrimary: getRandomArrayItem([\n        'Food',\n        'Rent',\n        'Transportation',\n        'Entertainment',\n        'Miscellaneous',\n      ]),\n      personalFinanceCategoryDetailed: getRandomString(15),\n      locationAddress: getRandomString(30),\n      locationCity: getRandomString(15),\n      locationRegion: getRandomString(10),\n      locationPostalCode: getRandomString(5),\n      locationCountry: 'US', // For simplicity, using a fixed value; can be randomized as needed\n      locationLat: Math.random() * 180 - 90,\n      locationLon: Math.random() * 360 - 180,\n      locationStoreNumber: getRandomString(5),\n      paymentMetaByOrderOf: getRandomString(10),\n      paymentMetaPayee: getRandomString(10),\n      paymentMetaPayer: getRandomString(10),\n      paymentMetaPaymentMethod: 'Card', // For simplicity, using a fixed value; can be randomized as needed\n      paymentMetaPaymentProcessor: getRandomString(10),\n      paymentMetaPpdId: getRandomString(10),\n      paymentMetaReason: getRandomString(20),\n      paymentMetaReferenceNumber: getRandomString(8),\n      time: new Date(2022, 0, 1),\n      categories: [getRandomString(10), getRandomString(10)],\n    });\n  }\n}\n\nexport { Transaction };\n","/**\n * Represents the financial health metrics of a user.\n *\n * @remarks\n * This class provides insights into a user's financial health by capturing vital metrics\n * such as income, expenses, and transaction diversity. It's an essential tool for financial\n * advisors, banking systems, or any platform aiming to provide financial advice or insights to users.\n *\n * @example Constructing a `UserFinancialHealthMetricsTable` instance:\n *\n * ```ts\n * // Sample financial health metrics data\n * const userMetrics = {\n *   userId: 12345,\n *   monthlyIncome: 5000,\n *   monthlyExpenses: 4000,\n *   transactionDiversity: 0.7,\n *   // ... other properties ...\n * };\n *\n * const userFinancialHealth = new UserFinancialHealthMetricsTable(userMetrics);\n * ```\n *\n * @property time - Timestamp when the metrics were recorded or updated.\n * @property userId - Identifier of the user associated with these metrics.\n * @property monthlyIncome - The user's total income on a monthly basis.\n * @property monthlyExpenses - The user's total expenses on a monthly basis.\n * @property transactionDiversity - A metric representing the diversity or variety of transactions.\n *                                 For instance, a value closer to 1 might indicate a diverse set\n *                                 of transactions across different categories.\n * @property debtToIncomeRatio - Ratio of a user's total debt to their income. A lower value is generally seen as favorable.\n * @property overdraftFrequency - Number of times the user has had an overdraft in a specific period,\n *                                e.g., the past month or year.\n */\nclass UserFinancialHealthMetricsTable {\n  time: Date | undefined;\n  userId: number = 0;\n  monthlyIncome: number = 0;\n  monthlyExpenses: number = 0;\n  transactionDiversity: number = 0;\n  debtToIncomeRatio: number = 0;\n  overdraftFrequency: number = 0;\n\n  /**\n   * Creates an instance of UserFinancialHealthMetricsTable.\n   * @param data - Object containing properties for UserFinancialHealthMetricsTable.\n   */\n  constructor(data: Partial<UserFinancialHealthMetricsTable>) {\n    Object.assign(this, {\n      ...data,\n      time: data.time ? new Date(data.time) : undefined,\n    });\n  }\n}\n\nexport { UserFinancialHealthMetricsTable };\n","import { Tag } from '../common/tag';\nimport { Bookmark } from './bookmark';\n\n/** SocialUserProfile: The social  profile object tied to a given user */\nexport interface ISocialUserProfile {\n  /** User profile ID */\n  id: number;\n  /** Tags are interests */\n  tags: Tag[];\n  /**\n   * Profile name is the name tied to the user profile\n   * user name must be at least 5 characters long\n   */\n  name: string;\n  /**\n   * Private defines wether only approved followers can see what this profile\n   * posts\n   */\n  private: boolean;\n  /** Followers outlines the number of followers this user profile has */\n  followers: number;\n  /** Number of people account is following */\n  following: number;\n  /**\n   * Notification timeline Id. Notification for anything a user/group is\n   * following\n   */\n  notificationFeedTimelineId: string;\n  /** Personal timeline ID Has activities for a user that can be followed */\n  personalFeedTimelineId: string;\n  /**\n   * Newsfeed timeline ID Displays all followed and group activities the user\n   * follows\n   */\n  newsFeedTimelineId: string;\n  /** ProfileImageUrl witholds the url of a given profile image */\n  profileImageUrl: string;\n  /** all the bookmarked pieces of content on the platform */\n  bookmarks: Bookmark | undefined;\n  /** The id of the algolia record referencing this user */\n  algoliaId: string;\n}\n\n/**\n * Represents a user's social profile on the platform.\n *\n * The SocialUserProfile captures various details about a user's presence and activity in the social aspect of the platform. This includes details such as interests (tags), followers and following counts, profile image, and timelines.\n *\n * @remarks\n * Each social user profile is uniquely identified by its ID. It has a name, privacy setting (private or public), followers and following counts, and three distinct timelines: notification, personal feed, and news feed.\n *\n * @example\n * Creating an instance of `SocialUserProfile`:\n * ```ts\n * const profileData = {\n *   id: 12345,\n *   tags: [new Tag('Technology'), new Tag('AI')],\n *   name: \"techenthusiast\",\n *   private: false,\n *   followers: 500,\n *   following: 150,\n *   notificationFeedTimelineId: \"notif12345\",\n *   personalFeedTimelineId: \"persfeed12345\",\n *   newsFeedTimelineId: \"newsfeed12345\",\n *   profileImageUrl: \"https://example.com/path/to/profile/image.jpg\",\n *   algoliaId: \"alg12345\"\n * };\n * const userProfile = new SocialUserProfile(profileData);\n * console.log(userProfile.name); // Outputs: \"techenthusiast\"\n * ```\n *\n * @property id - The unique identifier of the user profile.\n * @property tags - An array of tags representing the user's interests.\n * @property name - The name tied to the user profile. Must be at least 5 characters long.\n * @property private - A boolean indicating if only approved followers can see what this profile posts.\n * @property followers - The number of followers this user profile has.\n * @property following - The number of users or groups this user profile is following.\n * @property notificationFeedTimelineId - The ID for the timeline capturing notifications for anything the user/group is following.\n * @property personalFeedTimelineId - The ID for the personal timeline capturing activities of the user.\n * @property newsFeedTimelineId - The ID for the news feed displaying all followed activities and groups the user is interested in.\n * @property profileImageUrl - The URL pointing to the user's profile image.\n * @property bookmarks - All content that the user has bookmarked on the platform.\n * @property algoliaId - The ID referencing this user in the Algolia platform.\n *\n * @implements {ISocialUserProfile}\n * @author [\"yoan yomba\"]\n */\nexport class SocialUserProfile implements ISocialUserProfile {\n  /** User profile ID */\n  id: number = 0;\n  /** Tags are interests */\n  tags: Tag[] = [];\n  /**\n   * Profile name is the name tied to the user profile\n   * user name must be at least 5 characters long\n   */\n  name: string = '';\n  /**\n   * Private defines wether only approved followers can see what this profile\n   * posts\n   */\n  private: boolean = false;\n  /** Followers outlines the number of followers this user profile has */\n  followers: number = 0;\n  /** Number of people account is following */\n  following: number = 0;\n  /**\n   * Notification timeline Id. Notification for anything a user/group is\n   * following\n   */\n  notificationFeedTimelineId: string = '';\n  /** Personal timeline ID Has activities for a user that can be followed */\n  personalFeedTimelineId: string = '';\n  /**\n   * Newsfeed timeline ID Displays all followed and group activities the user\n   * follows\n   */\n  newsFeedTimelineId: string = '';\n  /** ProfileImageUrl witholds the url of a given profile image */\n  profileImageUrl: string = '';\n  /** all the bookmarked pieces of content on the platform */\n  bookmarks: Bookmark | undefined;\n  /** The id of the algolia record referencing this user */\n  algoliaId: string = '';\n\n  constructor(data: Partial<SocialUserProfile>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","/*\n * PublicationType represents the type of publication referenced\n *\n * @export\n * @enum {number}\n * */\nexport enum PublicationType {\n  PUBLICATION_TYPE_UNSPECIFIED = 0,\n  /** PUBLICATION_TYPE_MAGAZINE - a publication with a fixed publication staff that posts stories around a specific topic */\n  PUBLICATION_TYPE_MAGAZINE = 1,\n  /** PUBLICATION_TYPE_PLATFORM - a publication that accepts stories published around simfiny */\n  PUBLICATION_TYPE_PLATFORM = 2,\n  /** PUBLICATION_TYPE_BLOG - A community blog, a publication that is created specifically to share subset (community) news */\n  PUBLICATION_TYPE_BLOG = 3,\n  /** PUBLICATION_TYPE_SUBJECTS - A collection of individual stories by a set of authors that are part of a whole */\n  PUBLICATION_TYPE_SUBJECTS = 4,\n  UNRECOGNIZED = -1,\n}\n","import { SocialUserProfile } from './social-user-profile';\nimport { PublicationType } from './publication-type';\n\nexport interface IPublication {\n  id: number;\n  /** stories are post that can be submitted only by the publication editors */\n  postIds: string[];\n  admin: SocialUserProfile | undefined;\n  adminSimfinyPlatformUserId: number;\n  tags: string[];\n  editors: SocialUserProfile[];\n  subjects: string[];\n  description: string;\n  createdAt: string;\n  type: PublicationType;\n  publicationName: string;\n}\n\n/**\n * A Publication is a collections of stories based around a common theme. Anyone can create them\n * As the creator of a publication, you're an editor by default, which means you have the ability to\n * a) add writers to your publication,\n * b) edit and publish the stories that are submitted by your writers, and\n * c) review the metrics for all of the stories that are part of your publication.\n * As the publication's creator, you'll also have the ability\n * to appoint new editors (so they can do all of that stuff I just mentioned)\n *\n * Use Case\n * - An online magazine, a publication with a fixed publication staff that posts stories around a specific topic\n * - A community publication, a publication that accepts stories published around Medium\n * - A company blog, a publication that is created specifically to share company news\n * - A collection of individual stories by a single author that are parts of a larger whole\n *\n * Publications can be thought of as a collection of posts or articles, curated and managed by one or more administrators and editors.\n *\n * @remarks\n * Each publication has a unique ID, associated tags, subjects, a description, creation date, and a publication type.\n * The publication can have multiple editors and is owned by an admin.\n *\n * @example\n * Creating an instance of `Publication`:\n * ```ts\n * const publicationData = {\n *   id: 1,\n *   postIds: [\"post123\", \"post456\"],\n *   admin: new UserProfile({...}),\n *   tags: [\"tech\", \"AI\"],\n *   editors: [new UserProfile({...}), new UserProfile({...})],\n *   subjects: [\"Deep Learning\", \"Neural Networks\"],\n *   description: \"A tech publication focusing on AI advancements.\",\n *   createdAt: \"2023-01-01\",\n *   type: PublicationType.JOURNAL,\n *   publicationName: \"Tech Forward\"\n * };\n * const techPublication = new Publication(publicationData);\n * console.log(techPublication.publicationName); // Outputs: \"Tech Forward\"\n * ```\n *\n * @property id - The unique identifier for the publication.\n * @property postIds - An array of post IDs that belong to this publication.\n * @property admin - The administrator `UserProfile` of this publication.\n * @property adminSimfinyPlatformUserId - The unique identifier of the admin in the Simfiny platform.\n * @property tags - An array of tags associated with this publication.\n * @property editors - An array of editor `UserProfile`s who curate the publication's content.\n * @property subjects - Topics or subjects covered by the publication.\n * @property description - A brief description of the publication.\n * @property createdAt - The date when the publication was created.\n * @property type - The type/category of the publication.\n * @property publicationName - The name/title of the publication.\n *\n * @implements {IPublication}\n * @author [Your Name or the Original Author's Name if you know it]\n */\nexport class Publication implements IPublication {\n  id: number = 0;\n  postIds: string[] = [];\n  admin: SocialUserProfile | undefined;\n  adminSimfinyPlatformUserId: number = 0;\n  tags: string[] = [];\n  editors: SocialUserProfile[] = [];\n  subjects: string[] = [];\n  description: string = '';\n  createdAt: string = '';\n  type: PublicationType = PublicationType.PUBLICATION_TYPE_UNSPECIFIED;\n  publicationName: string = '';\n\n  constructor(data: Partial<Publication>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n        admin:\n          data?.admin !== undefined ? new SocialUserProfile(data.admin) : null,\n        editors: data?.editors?.map((editor) => new SocialUserProfile(editor)),\n      });\n    }\n  }\n}\n","import { Tag } from '../common/tag';\nimport { Bookmark } from './bookmark';\n\n/**\n * Represents a social account in the platform.\n *\n * A `SocialAccount` is a representation of a user's social presence on the platform. It captures details about followers, following, tags (interests), profile imagery, and more.\n *\n * @remarks\n * Each `SocialAccount` is uniquely identified by its ID and is associated with a user profile. It also provides details like the number of followers, the number of users it's following, and tags associated with it.\n *\n * @example\n * Initializing a new instance of `SocialAccount`:\n * ```ts\n * const accountData = {\n *   id: \"12345\",\n *   followers: \"500\",\n *   following: \"150\",\n *   name: \"techuser\",\n *   tags: [new Tag('Technology'), new Tag('AI')],\n *   profileImageUrl: \"https://example.com/path/to/profile/image.jpg\"\n * };\n * const socialAccount = new SocialAccount(accountData);\n * console.log(socialAccount.name); // Outputs: \"techuser\"\n * ```\n *\n * @property followers - The number of followers this profile has.\n * @property following - The number of users this profile is following.\n * @property id - The unique identifier for the social account.\n * @property name - The name or username associated with the social account.\n * @property tags - An array of tags (interests) associated with this profile.\n * @property private - A boolean indicating if this account is private or public.\n * @property profileImageUrl - The URL pointing to the user's profile image.\n * @property userProfileid - The ID of the user that owns this social account. Kept for backwards compatibility with earlier versions.\n *\n * @author [yoan yomba]\n */\nclass SocialAccount {\n  /**\n   * The number of followers this profile has.\n   *\n   * @type {string}\n   */\n  followers = '';\n  /**\n   * The number of users this profile is following.\n   *\n   * @type {string}\n   */\n  following = '';\n  /**\n   * the id of the profile\n   *\n   * @type {string}\n   */\n  id = '';\n  /**\n   * this is the username of the profile\n   *\n   * @type {string}\n   */\n  name = '';\n  /**\n   * The set of tags associated to this profile\n   *\n   * @type {Tag[]}\n   */\n  tags: Tag[] = [];\n  /**\n   * Deliniates wether the profile is a private or public one\n   *\n   * @type {boolean}\n   */\n  private = false;\n  /**\n   * The profile image url.\n   *\n   * @type {string}\n   */\n  profileImageUrl = '';\n  /**\n   * User profile id.\n   * This is the id of the user that owns the profile.\n   * NOTE: this is the same as the id field referenced above.\n   * However we are keeping this field for backwards compatibility.\n   *\n   * @type {string}\n   */\n  userProfileid = '';\n\n  bookmarks: Bookmark | undefined;\n\n  /**\n   * Creates an instance of Profile.\n   *\n   * @constructor\n   * @param {?Partial<Profile>} [data]\n   */\n  constructor(data?: Partial<SocialAccount>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n        tags: data?.tags || [],\n      });\n    }\n  }\n\n  /**\n   * Checks if the profile is private.\n   * @returns {boolean} True if the profile is private, false otherwise.\n   */\n  isPrivate(): boolean {\n    return this.private;\n  }\n\n  /**\n   * Deciphers wether or not to show the profile's content\n   * @returns {boolean} True if the profile is not private, false otherwise.\n   */\n  shouldShowContent(): boolean {\n    return !this.isPrivate();\n  }\n\n  /**\n   * Gets the profile image url.\n   *\n   * @returns {string} The profile image url.\n   */\n  getProfileImageUrl(): string {\n    return this.profileImageUrl;\n  }\n\n  /**\n   * Gets the tags of the profile.\n   *\n   * @returns {(Tag[] | string[])} The tags of the profile.\n   */\n  getTags(): Tag[] | string[] {\n    return this.tags;\n  }\n\n  /**\n   * Gets the number of tags the profile has.\n   *\n   * @returns {number} The number of tags the profile has.\n   */\n  getTagCount(): number {\n    return this.tags.length;\n  }\n\n  /**\n   * Gets the tag names of the profile.\n   * @returns {string[]} The tag names of the profile.\n   */\n  getTagNames(): string[] {\n    return this.tags.map((tag) => (tag as Tag).getName());\n  }\n\n  /**\n   * Gets the number of followers this profile has.\n   *\n   * @returns {string} The number of followers this profile has.\n   */\n  getFollowerCount(): number {\n    return Number(this.followers);\n  }\n\n  /**\n   * Get the number of users following this profile.\n   * @returns {string} The number of users following this profile.\n   */\n  getfollowingCount(): number {\n    return Number(this.following);\n  }\n}\n\nexport { SocialAccount };\n","import { Address } from '../common/address';\nimport { Tag } from '../common/tag';\n\n/**\n * Represents a user's account in simfiny's backend.\n *\n * The `UserAccount` class is central to operations within simfiny's backend. An instance of this class captures a user's details and\n * metadata such as their address, contact information, profile data, account verification status, and more.\n *\n * @remarks\n * The gateway performs some data transformations; specifically:\n *   - `id` becomes `userAccountID`\n *   - `authnId` becomes `userAuthnAccountID`\n *\n * @example Creating an instance of `UserAccount`:\n * ```ts\n * const userData = {\n *   email: \"user@example.com\",\n *   username: \"exampleUser\",\n *   // ... other data fields ...\n * };\n * const account = new UserAccount(userData);\n * console.log(account.getUserName()); // Outputs: \"exampleUser\"\n * ```\n *\n * @property address - A structured address associated with the user.\n * @property bio - A short biography or description for the user.\n * @property email - The user's email address.\n * @property firstname - The user's first name.\n * @property lastname - The user's last name.\n * @property username - The user's unique username.\n * @property headline - A headline or title for the user's profile.\n * @property phoneNumber - The user's contact phone number.\n * @property userAccountID - A transformed ID for the user, manipulated by the gateway.\n * @property userAuthnAccountID - A transformed authentication ID for the user, manipulated by the gateway.\n * @property id - The user's unique identifier.\n * @property tags - An array of tags associated with the user.\n * @property created_at - Timestamp for when the user was created.\n * @property isEmailVerified - Indicates if the user's email is verified.\n * @property isPrivate - Indicates if the user's account content is private.\n * @property verifiedAt - Timestamp for when the user was verified.\n * @property isActive - Indicates if the user's account is active.\n * @property authnAccountId - The user's authentication account ID.\n * @property createdAt - The user's account creation timestamp.\n *\n * @author Yoan Yomba\n */\nclass UserAccount {\n  address?: Address = new Address();\n  bio?: string = '';\n  email = '';\n  firstname?: string;\n  lastname?: string;\n  username = '';\n  headline?: string;\n  phoneNumber?: string;\n  userAccountID?: string;\n  userAuthnAccountID?: string;\n  id = '';\n  tags: Tag[] = [];\n  created_at?: string;\n  isEmailVerified?: boolean;\n  isPrivate?: boolean;\n  verifiedAt?: string;\n  isActive?: boolean;\n  authnAccountId?: string;\n  createdAt?: string;\n\n  /**\n   * A constructor function that takes in a data object and assigns the data to the UserAccount class.\n   * @param [data] - The data that you want to assign to the object.\n   */\n  constructor(data?: Partial<UserAccount>) {\n    if (data)\n      Object.assign(this, {\n        ...data,\n        // address: new Address(data?.address),\n        tags: data?.tags?.map((tag) => new Tag(tag)),\n        id: data?.userAccountID !== undefined ? data?.userAccountID : data?.id,\n        authnAccountId:\n          data?.userAuthnAccountID !== undefined\n            ? data?.userAuthnAccountID\n            : data?.authnAccountId,\n      });\n  }\n\n  /**\n   * Returns the username of the account\n   *\n   * @return {*}  {string}\n   * @memberof UserAccount\n   */\n  getUserName(): string {\n    return this.username;\n  }\n\n  /**\n   * Returns the tags associated with a given account\n   *\n   * @return {*}  {Tag[]}\n   * @memberof UserAccount\n   */\n  getTags(): Tag[] {\n    return this.tags;\n  }\n\n  /**\n   * Returns the number of tags associated with a given account\n   *\n   * @return {*}  {number}\n   * @memberof UserAccount\n   */\n  getTagCount(): number {\n    return this.tags.length;\n  }\n\n  /**\n   * Deciphers wether the account has a verified email or not\n   *\n   * @return {*}  {boolean}\n   * @memberof UserAccount\n   */\n  isAccountVerified(): boolean | undefined {\n    return this.isEmailVerified && this.isActive;\n  }\n\n  /**\n   * Deciphers wether the account's content should be shown or not\n   *\n   * @return {*}  {boolean}\n   * @memberof UserAccount\n   */\n  shouldShowContent(): boolean | undefined {\n    return this.isActive && !this.isPrivate;\n  }\n\n  /**\n   * Obtains the bio of the account\n   *\n   * @return {*}  {string}\n   * @memberof UserAccount\n   */\n  getBio(): string | undefined {\n    return this.bio;\n  }\n\n  /**\n   * Obtains the headline of the account\n   *\n   * @return {*}  {string}\n   * @memberof UserAccount\n   */\n  getHeadline(): string | undefined {\n    return this.headline;\n  }\n\n  /**\n   * @description Returns the ID of the account\n   * @author Yoan Yomba\n   * @returns {*}  {string}\n   * @memberof UserAccount\n   */\n  getID(): string | undefined {\n    return this.id;\n  }\n}\n\nexport { UserAccount };\n","import { ErrorResponse } from '../error';\nimport { AccountBalanceHistory } from '../financial';\n\nexport class GetAccountBalanceHistoryResponse extends ErrorResponse {\n  accountBalanceHistory: AccountBalanceHistory[] = [];\n\n  constructor(data: Partial<GetAccountBalanceHistoryResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n\n/**\n * Represents the request for getting account balance history.\n */\nexport class GetAccountBalanceHistoryRequest {\n  /**\n   * The account ID associated with the request.\n   */\n  plaidAccountId: string;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetAccountBalanceHistoryRequest.\n   * @param partialRequest Partial request object to initialize the GetAccountBalanceHistoryRequest.\n   * @remarks You can use this constructor to create a partial instance of GetAccountBalanceHistoryRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetAccountBalanceHistoryRequest>) {\n    this.plaidAccountId = partialRequest.plaidAccountId || '';\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { CategoryMonthlyTransactionCount } from '../financial';\n\n/**\n * Represents the request for getting category monthly transaction count.\n */\nclass GetCategoryMonthlyTransactionCountRequest {\n  /**\n   * The user ID associated with the request (has to be present and defined).\n   */\n  userId: number;\n\n  /**\n   * The month for which category monthly transaction count is requested (optional).\n   */\n  month: number;\n\n  /**\n   * The primary personal finance category for filtering the records (optional).\n   */\n  personalFinanceCategoryPrimary: string;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetCategoryMonthlyTransactionCountRequest.\n   * @param partialRequest Partial request object to initialize the GetCategoryMonthlyTransactionCountRequest.\n   * @remarks You can use this constructor to create a partial instance of GetCategoryMonthlyTransactionCountRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(\n    partialRequest: Partial<GetCategoryMonthlyTransactionCountRequest>,\n  ) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || 0;\n    this.personalFinanceCategoryPrimary =\n      partialRequest.personalFinanceCategoryPrimary || '';\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\nclass GetCategoryMonthlyTransactionCountResponse extends ErrorResponse {\n  categoryMonthlyTransactionCount: CategoryMonthlyTransactionCount[] = [];\n  nextPageNumber: number = 0;\n\n  constructor(data?: Partial<GetCategoryMonthlyTransactionCountResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n\nexport {\n  GetCategoryMonthlyTransactionCountRequest,\n  GetCategoryMonthlyTransactionCountResponse,\n};\n","import { ErrorResponse } from '../error';\nimport { DebtToIncomeRatio } from '../financial';\n\n/**\n * Represents the request for getting debt to income ratio.\n */\nexport class GetDebtToIncomeRatioRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which debt to income ratio is requested (optional).\n   */\n  month?: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetDebtToIncomeRatioRequest.\n   * @param partialRequest Partial request object to initialize the GetDebtToIncomeRatioRequest.\n   * @remarks You can use this constructor to create a partial instance of GetDebtToIncomeRatioRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetDebtToIncomeRatioRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || undefined;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting debt to income ratio.\n */\nexport class GetDebtToIncomeRatioResponse extends ErrorResponse {\n  /**\n   * List of debt to income ratios.\n   */\n  debtToIncomeRatios: DebtToIncomeRatio[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetDebtToIncomeRatioResponse.\n   * @param debtToIncomeRatios List of debt to income ratios.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetDebtToIncomeRatioResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { ExpenseMetrics } from '../financial';\n\n/**\n * Represents the request for getting expense metrics.\n */\nexport class GetExpenseMetricsRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which expense metrics are requested (optional).\n   */\n  month?: number;\n\n  /**\n   * The primary personal finance category for filtering the records (optional).\n   */\n  personalFinanceCategoryPrimary?: string;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetExpenseMetricsRequest.\n   * @param partialRequest Partial request object to initialize the GetExpenseMetricsRequest.\n   * @remarks You can use this constructor to create a partial instance of GetExpenseMetricsRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetExpenseMetricsRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || undefined;\n    this.personalFinanceCategoryPrimary =\n      partialRequest.personalFinanceCategoryPrimary || '';\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting expense metrics.\n */\nexport class GetExpenseMetricsResponse extends ErrorResponse {\n  /**\n   * List of expense metrics.\n   */\n  expenseMetrics: ExpenseMetrics[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetExpenseMetricsResponse.\n   * @param expenseMetrics List of expense metrics.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n\n  constructor(data?: Partial<GetExpenseMetricsResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { MelodyFinancialContext } from '../financial';\n\n/**\n * Represents the response for getting melody financial context.\n */\nexport class GetMelodyFinancialContextResponse extends ErrorResponse {\n  /**\n   * Melody financial context information.\n   */\n  melodyFinancialContext: MelodyFinancialContext | undefined;\n\n  /**\n   * Creates a new instance of GetMelodyFinancialContextResponse.\n   * @param melodyFinancialContext Melody financial context information.\n   */\n  constructor(data?: Partial<GetMelodyFinancialContextResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n\n/**\n * Represents the request for getting Melody financial context.\n */\nexport class GetMelodyFinancialContextRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * Creates a new instance of GetMelodyFinancialContextRequest.\n   * @param userId The user ID associated with the request.\n   */\n  constructor(userId: number) {\n    this.userId = userId;\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { FinancialProfile } from '../financial';\n\n/**\n * Represents the request for getting financial profile.\n */\nexport class GetFinancialProfileRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which financial profile is requested (optional).\n   */\n  month?: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetFinancialProfileRequest.\n   * @param partialRequest Partial request object to initialize the GetFinancialProfileRequest.\n   * @remarks You can use this constructor to create a partial instance of GetFinancialProfileRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetFinancialProfileRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || undefined;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting financial profile.\n */\nexport class GetFinancialProfileResponse extends ErrorResponse {\n  /**\n   * List of financial profiles.\n   */\n  financialProfiles: FinancialProfile[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetFinancialProfileResponse.\n   * @param financialProfiles List of financial profiles.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n\n  constructor(data?: Partial<GetFinancialProfileResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { IncomeExpenseRatio } from '../financial';\n\n/**\n * Represents the request for getting income expense ratio.\n */\nexport class GetIncomeExpenseRatioRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which income expense ratio is requested (optional).\n   */\n  month?: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetIncomeExpenseRatioRequest.\n   * @param partialRequest Partial request object to initialize the GetIncomeExpenseRatioRequest.\n   * @remarks You can use this constructor to create a partial instance of GetIncomeExpenseRatioRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetIncomeExpenseRatioRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || undefined;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting income expense ratio.\n */\nexport class GetIncomeExpenseRatioResponse extends ErrorResponse {\n  /**\n   * List of income expense ratios.\n   */\n  incomeExpenseRatios: IncomeExpenseRatio[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetIncomeExpenseRatioResponse.\n   * @param incomeExpenseRatios List of income expense ratios.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetIncomeExpenseRatioResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { IncomeMetrics } from '../financial';\n\n/**\n * Represents the request for getting income metrics.\n */\nexport class GetIncomeMetricsRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which income metrics are requested (optional).\n   */\n  month?: number;\n\n  /**\n   * The primary personal finance category for filtering the records (optional).\n   */\n  personalFinanceCategoryPrimary?: string;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetIncomeMetricsRequest.\n   * @param partialRequest Partial request object to initialize the GetIncomeMetricsRequest.\n   * @remarks You can use this constructor to create a partial instance of GetIncomeMetricsRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetIncomeMetricsRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || undefined;\n    this.personalFinanceCategoryPrimary =\n      partialRequest.personalFinanceCategoryPrimary || '';\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting income metrics.\n */\nexport class GetIncomeMetricsResponse extends ErrorResponse {\n  /**\n   * List of income metrics.\n   */\n  incomeMetrics: IncomeMetrics[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetIncomeMetricsResponse.\n   * @param incomeMetrics List of income metrics.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetIncomeMetricsResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { MerchantMonthlyExpenditure } from '../financial';\n\n/**\n * Represents the request for getting merchant monthly expenditure.\n */\nexport class GetMerchantMonthlyExpenditureRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which merchant monthly expenditure is requested (optional).\n   */\n  month?: number;\n\n  /**\n   * The merchant name for filtering the records (optional).\n   */\n  merchantName?: string;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetMerchantMonthlyExpenditureRequest.\n   * @param partialRequest Partial request object to initialize the GetMerchantMonthlyExpenditureRequest.\n   * @remarks You can use this constructor to create a partial instance of GetMerchantMonthlyExpenditureRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetMerchantMonthlyExpenditureRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || undefined;\n    this.merchantName = partialRequest.merchantName || '';\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting merchant monthly expenditure.\n */\nexport class GetMerchantMonthlyExpenditureResponse extends ErrorResponse {\n  /**\n   * List of merchant monthly expenditures.\n   */\n  merchantMonthlyExpenditures: MerchantMonthlyExpenditure[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetMerchantMonthlyExpenditureResponse.\n   * @param merchantMonthlyExpenditures List of merchant monthly expenditures.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetMerchantMonthlyExpenditureResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { MonthlyBalance } from '../financial';\n\n/**\n * Represents the request for getting monthly balance.\n */\nexport class GetMonthlyBalanceRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which monthly balance is requested (optional).\n   */\n  month?: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetMonthlyBalanceRequest.\n   * @param partialRequest Partial request object to initialize the GetMonthlyBalanceRequest.\n   * @remarks You can use this constructor to create a partial instance of GetMonthlyBalanceRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetMonthlyBalanceRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || undefined;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting monthly balance.\n */\nexport class GetMonthlyBalanceResponse extends ErrorResponse {\n  /**\n   * List of monthly balances.\n   */\n  monthlyBalances: MonthlyBalance[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetMonthlyBalanceResponse.\n   * @param monthlyBalances List of monthly balances.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetMonthlyBalanceResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { MonthlyExpenditure } from '../financial';\n\n/**\n * Represents the request for getting monthly expenditure.\n */\nexport class GetMonthlyExpenditureRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which monthly expenditure is requested.\n   */\n  month: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetMonthlyExpenditureRequest.\n   * @param partialRequest Partial request object to initialize the GetMonthlyExpenditureRequest.\n   * @remarks You can use this constructor to create a partial instance of GetMonthlyExpenditureRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetMonthlyExpenditureRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || 0;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting monthly expenditure.\n */\nexport class GetMonthlyExpenditureResponse extends ErrorResponse {\n  /**\n   * List of monthly expenditures.\n   */\n  monthlyExpenditures: MonthlyExpenditure[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetMonthlyExpenditureResponse.\n   * @param monthlyExpenditures List of monthly expenditures.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetMonthlyExpenditureResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { MonthlyIncome } from '../financial';\n\n/**\n * Represents the request for getting monthly income.\n */\nexport class GetMonthlyIncomeRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which monthly income is requested.\n   */\n  month: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetMonthlyIncomeRequest.\n   * @param partialRequest Partial request object to initialize the GetMonthlyIncomeRequest.\n   * @remarks You can use this constructor to create a partial instance of GetMonthlyIncomeRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetMonthlyIncomeRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || 0;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting monthly income.\n */\nexport class GetMonthlyIncomeResponse extends ErrorResponse {\n  /**\n   * List of monthly incomes.\n   */\n  monthlyIncomes: MonthlyIncome[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetMonthlyIncomeResponse.\n   * @param monthlyIncomes List of monthly incomes.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetMonthlyIncomeResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { MonthlySavings } from '../financial';\n\n/**\n * Represents the request for getting monthly savings.\n */\nexport class GetMonthlySavingsRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which monthly savings is requested.\n   */\n  month: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetMonthlySavingsRequest.\n   * @param partialRequest Partial request object to initialize the GetMonthlySavingsRequest.\n   * @remarks You can use this constructor to create a partial instance of GetMonthlySavingsRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetMonthlySavingsRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || 0;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting monthly savings.\n */\nexport class GetMonthlySavingsResponse extends ErrorResponse {\n  /**\n   * List of monthly savings.\n   */\n  monthlySavings: MonthlySavings[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetMonthlySavingsResponse.\n   * @param monthlySavings List of monthly savings.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetMonthlySavingsResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { MonthlyTotalQuantityBySecurityAndUser } from '../financial';\n\n/**\n * Represents the request for getting monthly total quantity by security and user.\n */\nexport class GetMonthlyTotalQuantityBySecurityAndUserRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which monthly total quantity is requested.\n   */\n  month: number;\n\n  /**\n   * The security ID for filtering the records.\n   */\n  securityId: string;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetMonthlyTotalQuantityBySecurityAndUserRequest.\n   * @param partialRequest Partial request object to initialize the GetMonthlyTotalQuantityBySecurityAndUserRequest.\n   * @remarks You can use this constructor to create a partial instance of GetMonthlyTotalQuantityBySecurityAndUserRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(\n    partialRequest: Partial<GetMonthlyTotalQuantityBySecurityAndUserRequest>,\n  ) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || 0;\n    this.securityId = partialRequest.securityId || '';\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting monthly total quantity by security and user.\n */\nexport class GetMonthlyTotalQuantityBySecurityAndUserResponse extends ErrorResponse {\n  /**\n   * List of monthly total quantity by security and user.\n   */\n  monthlyTotalQuantityBySecurityAndUser: MonthlyTotalQuantityBySecurityAndUser[] =\n    [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetMonthlyTotalQuantityBySecurityAndUserResponse.\n   * @param monthlyTotalQuantityBySecurityAndUser List of monthly total quantity by security and user.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(\n    data?: Partial<GetMonthlyTotalQuantityBySecurityAndUserResponse>,\n  ) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { MonthlyTransactionCount } from '../financial';\n\n/**\n * Represents the request for getting monthly transaction count.\n */\nexport class GetMonthlyTransactionCountRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which monthly transaction count is requested.\n   */\n  month: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetMonthlyTransactionCountRequest.\n   * @param partialRequest Partial request object to initialize the GetMonthlyTransactionCountRequest.\n   * @remarks You can use this constructor to create a partial instance of GetMonthlyTransactionCountRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetMonthlyTransactionCountRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || 0;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting monthly transaction count.\n */\nexport class GetMonthlyTransactionCountResponse extends ErrorResponse {\n  /**\n   * List of monthly transaction counts.\n   */\n  monthlyTransactionCounts: MonthlyTransactionCount[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetMonthlyTransactionCountResponse.\n   * @param monthlyTransactionCounts List of monthly transaction counts.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetMonthlyTransactionCountResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { PaymentChannelMonthlyExpenditure } from '../financial';\n\n/**\n * Represents the request for getting payment channel monthly expenditure.\n */\nexport class GetPaymentChannelMonthlyExpenditureRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The month for which payment channel monthly expenditure is requested.\n   */\n  month: number;\n\n  /**\n   * The payment channel for filtering the records.\n   */\n  paymentChannel: string;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetPaymentChannelMonthlyExpenditureRequest.\n   * @param partialRequest Partial request object to initialize the GetPaymentChannelMonthlyExpenditureRequest.\n   * @remarks You can use this constructor to create a partial instance of GetPaymentChannelMonthlyExpenditureRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(\n    partialRequest: Partial<GetPaymentChannelMonthlyExpenditureRequest>,\n  ) {\n    this.userId = partialRequest.userId || 0;\n    this.month = partialRequest.month || 0;\n    this.paymentChannel = partialRequest.paymentChannel || '';\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting payment channel monthly expenditure.\n */\nexport class GetPaymentChannelMonthlyExpenditureResponse extends ErrorResponse {\n  /**\n   * List of payment channel monthly expenditures.\n   */\n  paymentChannelMonthlyExpenditure: PaymentChannelMonthlyExpenditure[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetPaymentChannelMonthlyExpenditureResponse.\n   * @param paymentChannelMonthlyExpenditure List of payment channel monthly expenditures.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetPaymentChannelMonthlyExpenditureResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { TotalInvestmentBySecurity } from '../financial';\n\n/**\n * Represents the request for getting total investment by security.\n */\nexport class GetTotalInvestmentBySecurityRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The security ID for filtering the records.\n   */\n  securityId: string;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetTotalInvestmentBySecurityRequest.\n   * @param partialRequest Partial request object to initialize the GetTotalInvestmentBySecurityRequest.\n   * @remarks You can use this constructor to create a partial instance of GetTotalInvestmentBySecurityRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetTotalInvestmentBySecurityRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.securityId = partialRequest.securityId || '';\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\n/**\n * Represents the response for getting total investment by security.\n */\nexport class GetTotalInvestmentBySecurityResponse extends ErrorResponse {\n  /**\n   * List of total investment by security.\n   */\n  totalInvestmentBySecurity: TotalInvestmentBySecurity[] = [];\n\n  /**\n   * The page number of the next set of data.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetTotalInvestmentBySecurityResponse.\n   * @param totalInvestmentBySecurity List of total investment by security.\n   * @param nextPageNumber The page number of the next set of data.\n   */\n  constructor(data?: Partial<GetTotalInvestmentBySecurityResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { Transaction } from '../financial';\n\n/**\n * Represents the response for getting transactions for a bank account.\n */\nexport class GetTransactionsForBankAccountResponse extends ErrorResponse {\n  /**\n   * An array of transactions for the bank account.\n   */\n  transactions: Transaction[] = [];\n\n  /**\n   * The page number of the next set of transactions.\n   */\n  nextPageNumber: number = 0;\n\n  /**\n   * Creates a new instance of GetTransactionsForBankAccountResponse.\n   * @param transactions An array of transactions for the bank account.\n   * @param nextPageNumber The page number of the next set of transactions.\n   */\n  constructor(data: GetTransactionsForBankAccountResponse) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n\n/**\n * Class representing a request to get transactions for a bank account.\n */\nexport class GetTransactionsForBankAccountRequest {\n  /** The user id */\n  userId: number = 0;\n\n  /** Plaid account id */\n  plaidAccountId: string = '';\n\n  /** Page number for paginated results */\n  pageNumber: number = 0;\n\n  /** Page size for paginated results */\n  pageSize: number = 0;\n\n  /**\n   * Create a request to get transactions for a bank account.\n   * @param {Partial<GetTransactionsForBankAccountRequest>} data - Object containing any properties of a request.\n   */\n  constructor(data: Partial<GetTransactionsForBankAccountRequest>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { Transaction } from '../financial';\n\n/**\n * GetTransactionsRequest class\n *\n * Represents a request for getting transactions.\n */\nexport class GetTransactionsRequest {\n  /**\n   * The user ID.\n   * Validations:\n   * - Must be greater than 0.\n   */\n  userId: number = 0;\n\n  /**\n   * The page number.\n   */\n  pageNumber: number = 0;\n\n  /**\n   * The number of transactions per page.\n   */\n  pageSize: number = 0;\n\n  /**\n   * Creates an instance of GetTransactionsRequest.\n   *\n   * @param data - The data to initialize the request.\n   */\n  constructor(data: Partial<GetTransactionsRequest>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n\nexport class GetTransactionsResponse extends ErrorResponse {\n  nextPageNumber: number | undefined;\n  transactions: Transaction[] | undefined;\n\n  constructor(data: Partial<GetTransactionsResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { AccountBalanceHistory } from '../financial';\n\n/**\n * Represents the response for getting user account balance history.\n */\nexport class GetUserAccountBalanceHistoryResponse extends ErrorResponse {\n  /**\n   * List of account balance history records.\n   */\n  accountBalanceHistory: AccountBalanceHistory[] = [];\n\n  constructor(data: Partial<GetUserAccountBalanceHistoryResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n\n/**\n * Represents the request for getting user account balance history.\n */\nexport class GetUserAccountBalanceHistoryRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetUserAccountBalanceHistoryRequest.\n   * @param partialRequest Partial request object to initialize the GetUserAccountBalanceHistoryRequest.\n   * @remarks You can use this constructor to create a partial instance of GetUserAccountBalanceHistoryRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetUserAccountBalanceHistoryRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { CategoryMonthlyExpenditure } from '../financial';\n\n/**\n * Represents the request for getting user category monthly expenditure.\n */\nexport class GetUserCategoryMonthlyExpenditureRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The primary personal finance category for filtering the records.\n   */\n  personalFinanceCategoryPrimary: string;\n\n  /**\n   * The month for which category monthly expenditure is requested (in the format YYYYMM).\n   */\n  month: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetUserCategoryMonthlyExpenditureRequest.\n   * @param partialRequest Partial request object to initialize the GetUserCategoryMonthlyExpenditureRequest.\n   * @remarks You can use this constructor to create a partial instance of GetUserCategoryMonthlyExpenditureRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(\n    partialRequest: Partial<GetUserCategoryMonthlyExpenditureRequest>,\n  ) {\n    this.userId = partialRequest.userId || 0;\n    this.personalFinanceCategoryPrimary =\n      partialRequest.personalFinanceCategoryPrimary || '';\n    this.month = partialRequest.month || 0;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\nexport class GetUserCategoryMonthlyExpenditureResponse extends ErrorResponse {\n  categoryMonthlyExpenditure: CategoryMonthlyExpenditure[] = [];\n  nextPageNumber: number = 0;\n\n  constructor(data?: Partial<GetUserCategoryMonthlyExpenditureResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { CategoryMonthlyIncome } from '../financial';\n\n/**\n * Represents the request for getting user category monthly income.\n */\nclass GetUserCategoryMonthlyIncomeRequest {\n  /**\n   * The user ID associated with the request.\n   */\n  userId: number;\n\n  /**\n   * The primary personal finance category for filtering the records.\n   */\n  personalFinanceCategoryPrimary: string;\n\n  /**\n   * The month for which category monthly income is requested (in the format YYYYMM).\n   */\n  month: number;\n\n  /**\n   * The page number of the requested data.\n   */\n  pageNumber: number;\n\n  /**\n   * Number of items to return per page.\n   */\n  pageSize: number;\n\n  /**\n   * Creates a new instance of GetUserCategoryMonthlyIncomeRequest.\n   * @param partialRequest Partial request object to initialize the GetUserCategoryMonthlyIncomeRequest.\n   * @remarks You can use this constructor to create a partial instance of GetUserCategoryMonthlyIncomeRequest.\n   *          You can later populate the additional properties manually if needed.\n   */\n  constructor(partialRequest: Partial<GetUserCategoryMonthlyIncomeRequest>) {\n    this.userId = partialRequest.userId || 0;\n    this.personalFinanceCategoryPrimary =\n      partialRequest.personalFinanceCategoryPrimary || '';\n    this.month = partialRequest.month || 0;\n    this.pageNumber = partialRequest.pageNumber || 1;\n    this.pageSize = partialRequest.pageSize || 10;\n  }\n}\n\nclass GetUserCategoryMonthlyIncomeResponse extends ErrorResponse {\n  categoryMonthlyIncome: CategoryMonthlyIncome[] = [];\n  nextPageNumber: number = 0;\n\n  constructor(data?: Partial<GetUserCategoryMonthlyIncomeResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n      });\n    }\n  }\n}\n\nexport {\n  GetUserCategoryMonthlyIncomeRequest,\n  GetUserCategoryMonthlyIncomeResponse,\n};\n","/**\n * Represents a request to reset a password.\n */\nexport interface ResetPasswordRequest {\n  /**\n   * The new password that the user wants to set.\n   */\n  password: string;\n\n  /**\n   * A token that verifies the legitimacy of the reset password request.\n   */\n  token: string;\n}\n\n/**\n * Represents a response containing a token.\n */\nexport class ResetPasswordResponse {\n  /**\n   * The token returned by the server, typically used for authentication purposes.\n   */\n  token: string;\n\n  /**\n   * A code indicating the status or result of the operation.\n   */\n  code: number;\n\n  /**\n   * An error message, if any occurred during the operation.\n   */\n  err: string;\n\n  /**\n   * Creates a new instance of `TokenResponse`.\n   *\n   * @param data - An object containing any subset of the `TokenResponse` properties.\n   */\n  constructor(data: Partial<ResetPasswordResponse>) {\n    this.token = data.token || \"\";\n    this.code = data.code || 0;\n    this.err = data.err || \"\";\n  }\n}\n","import { ErrorResponse } from '../error';\nimport { UserAccount } from '../user/user-account';\nimport { IRequest } from './IRequest';\n\n/**\n * UpdateUserRequest: Represents the request object invoked against the user\n * service to update a given user account\n */\nexport class UpdateUserAccountRequest implements IRequest {\n  /**\n   * UserAccount to update\n   * Validation:\n   * - cannot nil hence required\n   */\n  account: UserAccount | undefined = new UserAccount();\n\n  constructor(data?: Partial<UpdateUserAccountRequest>) {\n    if (data) {\n      Object.assign(this, {\n        ...data,\n        account: new UserAccount(data?.account),\n      });\n    }\n  }\n\n  isValid(): boolean {\n    return this.account !== undefined;\n  }\n}\n\nexport class UpdateUserAccountResponse extends ErrorResponse {\n  accountUpdated = false;\n  account: UserAccount | undefined;\n\n  constructor(data?: Partial<UpdateUserAccountResponse>) {\n    super();\n    if (data) {\n      Object.assign(this, {\n        ...data,\n        account: new UserAccount(data?.account),\n      });\n    }\n  }\n}\n","import * as React from \"react\"\n\nimport { cn } from \"src/lib-utils/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border border-slate-200 bg-white text-slate-950 shadow dark:border-slate-800 dark:bg-slate-950 dark:text-slate-50\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-slate-500 dark:text-slate-400\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":["Address$1","data","__publicField","Tag$1","ErrorMetadata$1","BackendError$1","_b","_a","error","ErrorMetadata","ErrorMessage$1","BackendError","ErrorResponse$1","ErrorMessage","r","f","n","clsx","twJoin","index","argument","resolvedValue","string","toValue","mix","k","CLASS_PART_SEPARATOR","createClassUtils","config","classMap","createClassMap","conflictingClassGroups","_config$conflictingCl","conflictingClassGroupModifiers","getClassGroupId","className","classParts","getGroupRecursive","getGroupIdForArbitraryProperty","getConflictingClassGroupIds","classGroupId","hasPostfixModifier","conflicts","classPartObject","currentClassPart","nextClassPartObject","classGroupFromNextClassPart","classRest","_ref","validator","arbitraryPropertyRegex","arbitraryPropertyClassName","property","theme","prefix","prefixedClassGroupEntries","getPrefixedClassGroupEntries","_ref2","classGroup","processClassesRecursively","classDefinition","classPartObjectToEdit","getPart","isThemeGetter","_ref3","key","path","currentClassPartObject","pathPart","func","classGroupEntries","_ref4","prefixedClassGroup","_ref5","value","createLruCache","maxCacheSize","cacheSize","cache","previousCache","update","IMPORTANT_MODIFIER","createSplitModifiers","separator","isSeparatorSingleCharacter","firstSeparatorCharacter","separatorLength","modifiers","bracketDepth","modifierStart","postfixModifierPosition","currentCharacter","baseClassNameWithImportantModifier","hasImportantModifier","baseClassName","maybePostfixModifierPosition","sortModifiers","sortedModifiers","unsortedModifiers","modifier","isArbitraryVariant","createConfigUtils","SPLIT_CLASSES_REGEX","mergeClassList","classList","configUtils","splitModifiers","classGroupsInConflict","originalClassName","_splitModifiers","variantModifier","modifierId","parsed","classId","group","createTailwindMerge","_len","createConfig","_key","cacheGet","cacheSet","functionToCall","initTailwindMerge","firstCreateConfig","restCreateConfig","previousConfig","createConfigCurrent","tailwindMerge","cachedResult","result","fromTheme","themeGetter","arbitraryValueRegex","fractionRegex","stringLengths","tshirtUnitRegex","lengthUnitRegex","shadowRegex","isLength","isNumber","isArbitraryLength","getIsArbitraryValue","isLengthOnly","isArbitrarySize","isNever","isArbitraryPosition","isArbitraryUrl","isUrl","isArbitraryNumber","isPercent","isInteger","isIntegerOnly","isArbitraryValue","isAny","isTshirtSize","isArbitraryShadow","isShadow","label","testValue","getDefaultConfig","colors","spacing","blur","brightness","borderColor","borderRadius","borderSpacing","borderWidth","contrast","grayscale","hueRotate","invert","gap","gradientColorStops","gradientColorStopPositions","inset","margin","opacity","padding","saturate","scale","sepia","skew","space","translate","getOverscroll","getOverflow","getSpacingWithAutoAndArbitrary","getSpacingWithArbitrary","getLengthWithEmpty","getNumberWithAutoAndArbitrary","getPositions","getLineStyles","getBlendModes","getAlign","getZeroAndEmpty","getBreaks","getNumber","getNumberAndArbitrary","twMerge","cn","inputs","processErrorIfPresent","http_body","formatDate","input","randomIntFromInterval","min","max","formatNumber","numberOfDecimalPoint","removeUnderScores","timeAgo","date","seconds","interval","roundToTwoDecimalPlaces","num","convertToMonth","dateString","year","month","monthNames","monthNumber","logEvent","eventName","metadata","userId","logSuccess","institution","accounts","link_session_id","logExit","status","request_id","replaceUnderscoreWithSpace","str","formatPocketName","formatted","getRandomNumber","getRandomString","length","characters","i","getRandomArrayItem","arr","getRandomDate","start","end","getRandomBoolean","getRandomSubcategories","count","subcategories","getRandomAmount","getRandomBalance","getRandomStringWithPrefix","getRandomDateInRange","startYear","endYear","day","formatFrequency","frequency","Category","Budget","Milestone","PocketType","Forecast","GoalType","SmartGoal","numberOfMilestones","milestones","Pocket$1","Pocket","numberOfGoals","goals","ActionableInsight","BankAccountStatus","BankAccountStatus2","BankAccountType","BankAccount$1","BankAccount","acc","pocket","goal","numberOfPocketsToGenerate","pockets","LinkStatus","LinkStatus2","LinkType","LinkType2","Link","StripeSubscription$1","FinancialProfile$1","StripeSubscription","link","insight","PlaidLink$1","PlaidSync$1","StripeSubscriptionStatus","StripeSubscriptionStatus2","Token$1","AccountBalanceHistory$1","AccountBalanceHistory","CategoryMetricsFinancialSubProfile$1","CategoryMonthlyExpenditure$1","CategoryMonthlyIncome$1","CategoryMonthlyTransactionCount$1","DebtToIncomeRatio$1","ExpenseMetricsFinancialSubProfileMetrics$1","ExpenseMetrics$1","FinancialProfileMetrics$1","IncomeExpenseRatio$1","IncomeMetricsFinancialSubProfile$1","IncomeMetrics$1","InvestmentTransaction$1","LocationFinancialSubProfile$1","MelodyFinancialContext$1","MerchantMetricsFinancialSubProfile$1","MerchantMonthlyExpenditure$1","MonthlyBalance$1","MonthlyExpenditure$1","MonthlyIncome$1","MonthlySavings$1","MonthlyTotalQuantityBySecurityAndUser$1","MonthlyTransactionCount$1","PaymentChannelMetricsFinancialSubProfile$1","PaymentChannelMonthlyExpenditure$1","ReCurringFlow","ReCurringFlow2","ReOccuringTransactionsStatus","ReOccuringTransactionsStatus2","ReOccuringTransactionsFrequency","ReOccuringTransactionsFrequency2","ReOccuringTransaction$1","ReOccuringTransaction","TotalInvestmentBySecurity$1","TransactionAggregatesByMonth$1","Transaction$1","Transaction","UserFinancialHealthMetricsTable$1","SocialUserProfile$1","PublicationType","PublicationType2","Publication$1","SocialUserProfile","editor","SocialAccount$1","tag","UserAccount$1","Address","Tag","GetAccountBalanceHistoryRequest$1","partialRequest","GetCategoryMonthlyTransactionCountRequest$1","GetDebtToIncomeRatioRequest$1","ErrorResponse","GetExpenseMetricsRequest$1","GetMelodyFinancialContextRequest$1","GetFinancialProfileRequest$1","GetIncomeExpenseRatioRequest$1","GetIncomeMetricsRequest$1","GetMerchantMonthlyExpenditureRequest$1","GetMonthlyBalanceRequest$1","GetMonthlyExpenditureRequest$1","GetMonthlyIncomeRequest$1","GetMonthlySavingsRequest$1","GetMonthlyTotalQuantityBySecurityAndUserRequest$1","GetMonthlyTransactionCountRequest$1","GetPaymentChannelMonthlyExpenditureRequest$1","GetTotalInvestmentBySecurityRequest$1","GetTransactionsForBankAccountRequest$1","GetTransactionsRequest$1","GetUserAccountBalanceHistoryRequest$1","GetUserCategoryMonthlyExpenditureRequest$1","GetUserCategoryMonthlyIncomeRequest$1","ResetPasswordResponse$1","UpdateUserAccountRequest$1","UserAccount","Card","React.forwardRef","props","ref","jsx","CardHeader","CardTitle","CardDescription","CardContent","CardFooter"],"mappings":"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","x_google_ignoreList":[6,7,8,9,10,11,12,13,14,15,16,17]}