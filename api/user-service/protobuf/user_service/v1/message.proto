syntax = "proto3";

package user_service.v1;

import "protoc-gen-gorm/options/gorm.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/SolomonAIEngineering/service-level-api/pkg/generated/user_service/v1";

/*
  ProfileType: represents the type of account tied to a given profile
*/
enum ProfileType {
  PROFILE_TYPE_UNSPECIFIED = 0;
  PROFILE_TYPE_USER = 1;
  PROFILE_TYPE_BUSINESS = 2;
}

/**
 * @brief Represents a user account in the context of simfinni.
 */
message UserAccount {
  option (gorm.opts) = {
    ormable: true
  };

  // Unique identifier for the account.
  uint64 id = 1;

  // Email associated with the user account.
  string email = 2 [
    (validate.rules).string.email = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"sample@example.com\""
    } 
  ];

  // Physical address associated with the user.
  Address address = 7;

  // Brief description about the user, up to 200 characters.
  string bio = 12;

  // Short headline for the user's profile.
  string headline = 13;

  // Phone number associated with the account.
  string phone_number = 14;

  // Tags associated with the user account, between 1 and 10.
  repeated Tags tags = 15 [
    (validate.rules).repeated.min_items = 1,
    (validate.rules).repeated.max_items = 10
  ];

  // ID for the authentication service linked to this account.
  uint64 authn_account_id = 18;

  // Indicates if the account is currently active.
  bool is_active = 22;

  // User's first name.
  string firstname = 26;

  // User's last name.
  string lastname = 27;

  // Username associated with the account, minimum of 10 characters.
  string username = 28 [
    (validate.rules).string.min_len = 10,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"testuser9696\""
    }
  ];

  // Indicates if the account is set to private.
  bool is_private = 29;

  // Indicates if the user's email has been verified.
  bool is_email_verified = 30;

  // Timestamp for when the account was created.
  google.protobuf.Timestamp created_at = 31;

  // Timestamp for when the email was verified.
  google.protobuf.Timestamp verified_at = 32;

  // Settings specific to the user account.
  UserSettings user_settings = 40;

  // Enum indicating the type of profile (e.g., individual, corporate).
  ProfileType account_type = 42;
}

// BusinessAccount represents a business account within the context of solomon-ai.
message BusinessAccount {
  option (gorm.opts) = {
    ormable: true,
  };

  // Unique identifier for the business account.
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "" }
  ];

  // Email associated with the business account.
  string email = 2 [
    (validate.rules).string.email = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"example@gmail.com\"" } 
  ];

  // Physical address associated with the business account.
  Address address = 7 [
    (gorm.field).has_one.preload = true,
    (validate.rules).message.required = false
  ];

  // Short description of the business account. Maximum of 200 characters.
  string bio = 12 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"sample description\"" } 
  ];

  // Headline for the profile of the business account.
  string headline = 13 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"sample headline\"" } 
  ];

  // Phone number associated with the business account.
  string phone_number = 14 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"6513424124\"" } 
  ];

  // Tags associated with the business account. Between 1 and 10 tags are allowed.
  repeated Tags tags = 15 [
    (gorm.field).has_many.preload = true,
    (validate.rules).repeated.min_items = 1,
    (validate.rules).repeated.max_items = 10
  ];

  // Identifier for the associated authentication service account.
  uint64 authn_account_id = 18 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "" }
  ];

  // Indicates whether the business account is active.
  bool is_active = 22 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "true" }
  ];

  // Username for the business account. Must be at least 10 characters long.
  string username = 28 [
    (validate.rules).string.min_len = 10,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"testuser9696\"" }
  ];

  // Indicates whether the business account is private.
  bool is_private = 29 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "false" }
  ];

  // Indicates whether the email associated with the business account has been verified.
  bool is_email_verified = 30 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "false" }
  ];

  // Timestamp indicating when the business account was created.
  google.protobuf.Timestamp created_at = 31;

  // Timestamp indicating when the email for the business account was verified.
  google.protobuf.Timestamp verified_at = 32;

  // Date when the company associated with the business account was established.
  string company_established_date = 35;

  // Industry type of the company associated with the business account.
  string company_industry_type = 36 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"fintech\"" } 
  ];

  // Website URL of the company associated with the business account.
  string company_website_url = 37 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"https://solomon-ai.io\"" } 
  ];

  // Description of the company associated with the business account.
  string company_description = 38 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"We help businesses succeed\"" } 
  ];

  // Name of the company associated with the business account.
  string company_name = 39 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"Solomon AI\"" } 
  ];

  // Settings specific to the business account.
  BusinessAccountSettings business_account_settings = 41 [
    (gorm.field).has_one.preload = true
  ];

  // The type of profile associated with the business account (e.g., individual, corporate).
  ProfileType account_type = 42;
}

/*
 Address: represents an account's address
*/
message Address {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];
  // the address field
  // Validations:
  // - must be at least 5 character long (meaning cannot be empty)
  string address = 2 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1234 5th Ave\""
    }
  ];
  // the unit if the address is an apartment
  // Validations:
  // - must be at least 1 character long (meaning cannot be empty)
  string unit = 3 
  [(validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"Apt 1\""
    }
  ];
  // the address zipcode
  // Validations: 
  // - must be exactly 5 characters
  string zipcode = 4 [
    (validate.rules).string.len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"12345\""
    }  
  ];
  // the city
  // Validations:
  // - must be at least 3 characters long (meaning cannot be empty)
  string city = 5 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"New York\""
    }
  ];
  // the state/municipality
  // Validations
  // - must be at least 2 characters long 
  string state = 6 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"New York\""
    }
  ];
  // longitude
  // Validations: None - can be empty
  string longitude = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"-73.987654\""
    }
  ];
  // latittude
  // Validations: None - can be empty
  string lattitude = 8 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"40.123456\""
    }
  ];
}

/*
 Tags: represents metadata tags associated to an account
*/
message Tags {
  option (gorm.opts) = {
    ormable : true,
  };
  // tag id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];
  // name of tag
  // validations: 
  // - cannot be empty
  // - must be at least 3 characters long
  string tag_name = 2  [(validate.rules).string.min_len = 3,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"testtagname\""
    }
  ];
  // description of tag
  // validations: 
  // - cannot be empty
  // - must be at least 10 characters long
  string tag_description = 3 [(validate.rules).string.min_len = 10,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"testtagdescription\""
    }
  ];
  // metadata associated with tag
  // validations:
  // - must provide between 1 and 10 metadata tags
  repeated string metadata = 4 [(validate.rules).repeated = {min_items: 1, max_items: 10},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "[\"testmetadata1\", \"testmetadata2\"]"
    }
  ];
}


// User settings for the fintech application.
message UserSettings {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];

  // Display and interaction preferences.
  enum Theme {
    THEME_UNSPECIFIED = 0;
    THEME_LIGHT = 1;
    THEME_DARK = 2;
  }

  Theme app_theme = 2;

  // Notification preferences.
  bool email_notifications = 3;
  bool push_notifications = 4;
  bool sms_notifications = 5;

  // Currency preference.
  string default_currency = 6;

  // Preferred date-time format.
  string datetime_format = 7;

  // Two-factor authentication status.
  bool two_factor_authentication_enabled = 8;

  // Language preference.
  string preferred_language = 9;

  // Privacy settings.
  bool public_profile = 10;   // Whether the user's profile is public.
  bool enable_goal_journal = 11;   // Option to share transaction history with friends/family.
  
  // Investment preferences.
  enum RiskTolerance {
    RISK_TOLERANCE_UNSPECIFIED = 0;
    RISK_TOLERANCE_LOW = 1;
    RISK_TOLERANCE_MEDIUM = 2;
    RISK_TOLERANCE_HIGH = 3;
  }

  RiskTolerance investment_risk_tolerance = 12;

  enum DashboardWidget {
    DASHBOARD_WIDGET_TRANSACTIONS_UNSPECIFIED = 0;
    DASHBOARD_WIDGET_TRANSACTIONS_OVERVIEW = 1;
    DASHBOARD_WIDGET_INVESTMENT_SUMMARY = 2;
    DASHBOARD_WIDGET_MONTHLY_SPENDING_REPORT = 3;
    DASHBOARD_WIDGET_SAVINGS_TRACKER = 4;
    DASHBOARD_WIDGET_CREDIT_SCORE_MONITOR = 5;
  }
  
  // Dashboard customization, e.g., specific widgets or reports.
  repeated DashboardWidget dashboard_widgets = 13;
}

message ContactInformation {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];
  string email = 2;
  string phone_number = 3;
  string address = 4;
}

message AccountInformation {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];

  string business_name = 2;
  enum BusinessType {
      BUSINESS_TYPE_UNSPECIFIED = 0;
      BUSINESS_TYPE_SOLE_PROPRIETORSHIP = 1;
      BUSINESS_TYPE_PARTNERSHIP = 2;
      BUSINESS_TYPE_LLC = 3;
      BUSINESS_TYPE_CORPORATION = 4;
      BUSINESS_TYPE_OTHER = 5;
  }
  BusinessType business_type = 3;
  string business_registration_number = 4;

  ContactInformation contact_info = 5;
}

message TaxSettings {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];
  double tax_percentage = 2;
  string tax_code = 3;
}

message FinancialPreferences {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];

  string currency_preference = 2;
  TaxSettings tax_settings = 3 [
    (gorm.field).has_one.preload = true
  ];
  string financial_year_start = 4;
}

message AIPoweredInsights {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];

  // frequency by which insights should be generated
  enum Frequency {
      FREQUENCY_UNSPECIFIED = 0;
      FREQUENCY_DAILY = 1;
      FREQUENCY_WEEKLY = 2;
      FREQUENCY_MONTHLY = 3;
  }
  Frequency insight_frequency = 2;

  // List of areas of interest for insights
  repeated string areas_of_interest = 3;  // List of areas for insights
  bool data_sharing = 4;  // True if user agrees to share data for insights
}

message IntegrationSettings {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];
  // wether to enable linking bank account for account
  bool bank_account_linking = 2;

  // list of supported third party apps of interest
  repeated string third_party_apps = 3;  // List of connected third-party apps
}

message NotificationSettings {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];

  // type of enabled notification
  enum Type {
      TYPE_UNSPECIFIED = 0;
      // email based notification
      TYPE_EMAIL = 1;
      // sms based notification
      TYPE_SMS = 2;
      // app based notification
      TYPE_IN_APP = 3;
  }
  Type notification_type = 2;
  bool alerts = 3;  // True if user wants to be alerted for anomalies
}

// Business Account Settings
message BusinessAccountSettings {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    }
  ];

  AccountInformation account_information = 2 [
    (gorm.field).has_one.preload = true
  ];
  FinancialPreferences financial_preferences = 3;
  AIPoweredInsights ai_powered_insights = 4 [
    (gorm.field).has_one.preload = true
  ];
  IntegrationSettings integration_settings = 5 [
    (gorm.field).has_one.preload = true
  ];
  NotificationSettings notification_settings = 6 [
    (gorm.field).has_one.preload = true
  ];
}