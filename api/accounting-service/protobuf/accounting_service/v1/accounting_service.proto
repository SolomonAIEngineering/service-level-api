syntax = "proto3";

package accounting_service.v1;

import "accounting_service/v1/request.proto";
import "accounting_service/v1/response.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/SolomonAIEngineering/service-level-api/pkg/generated/accounting_service/v1";

// AccountingService API.
service AccountingService {
  // Healthcheck performs a health check on the service
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {get: "/api/v1/health"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "health check"
      tags: ["service health"]
      operation_id: "HealthCheck"
      description: "This endpoint performs a healc check on the service"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.HealthCheckResponse"}
          }
        }
      }
    };
  }

  // ReadynessCheck performs a readiness check on the service
  rpc ReadynessCheck(ReadynessCheckRequest) returns (ReadynessCheckResponse) {
    option (google.api.http) = {get: "/api/v1/ready"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "readyness check"
      tags: ["service readyness"]
      operation_id: "ReadynessCheck"
      description: "This endpoint performs a readiness check on the service"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.ReadynessCheckResponse"}
          }
        }
      }
    };
  }

  // creates a business accouting profile on the service
  rpc CreateBusinessAccountingProfile(CreateBusinessAccountingProfileRequest) returns (CreateBusinessAccountingProfileResponse) {
    option (google.api.http) = {
      post: "/api/v1/profile"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create accounting profile"
      tags: ["profile"]
      operation_id: "CreateAccountingProfile"
      description: "This endpoint creates an accounting profile"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateBusinessAccountingProfileResponse"}
          }
        }
      }
    };
  }

  // gets business accounting profile
  rpc GetBusinessAccountingProfile(GetBusinessAccountingProfileRequest) returns (GetBusinessAccountingProfileResponse) {
    option (google.api.http) = {
      get: "/api/v1/profile/{user_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "gets a business account profile"
      tags: ["profile"]
      operation_id: "GetBusinessAccountingProfile"
      description: ""
      responses: {
        key: "200"
        value: {
          description: ""
          schema: {
            json_schema: {ref: ".api.v1.GetBusinessAccountingProfileResponse"}
          }
        }
      }
    };
  }

  // delete business accounting profile
  rpc DeleteBusinessAccountingProfile(DeleteBusinessAccountingProfileRequest) returns (DeleteBusinessAccountingProfileResponse) {
    option (google.api.http) = {
      delete: "/api/v1/profile/{user_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete business accounting profile"
      tags: ["profile"]
      operation_id: "DeleteBusinessAccountingProfile"
      description: ""
      responses: {
        key: "200"
        value: {
          description: ""
          schema: {
            json_schema: {ref: ".api.v1.DeleteBusinessAccountingProfileResponse"}
          }
        }
      }
    };
  }

  // updates a business account
  rpc UpdateBusinessAccountingProfile(UpdateBusinessAccountingProfileRequest) returns (UpdateBusinessAccountingProfileResponse) {
    option (google.api.http) = {
      put: "/api/v1/profile"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update accounting profile"
      tags: ["profile"]
      operation_id: "UpdateAccountingProfile"
      description: "This endpoint Updates an accounting profile"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateBusinessAccountingProfileResponse"}
          }
        }
      }
    };
  }


  // enables the client to get a link_token to initialize a Link session for your end user.
  rpc MergeGetPublicLinkToken(MergeGetPublicLinkTokenRequest) 
  returns (MergeGetPublicLinkTokenResponse) {
    option (google.api.http) = {
      post: "/api/v1/merge/initiate-token-exchange"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: ""
      tags: ["merge"]
      operation_id: "MergeGetPublicLinkToken"
      description: ""
      responses: {
        key: "200"
        value: {
          description: ""
          schema: {
            json_schema: {ref: ".api.v1.MergeGetPublicLinkTokenResponse"}
          }
        }
      }
    };
  }

  // enables the client to exchange a public link token for an access token
  rpc MergeExchangePublicLinkTokenForAccountToken(MergeExchangePublicLinkTokenForAccountTokenRequest) returns (MergeExchangePublicLinkTokenForAccountTokenResponse) {
    option (google.api.http) = {
      post: "/api/v1/merge/exchange-token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: ""
      tags: ["merge"]
      operation_id: "MergeExchangePublicLinkTokenForAccountToken"
      description: ""
      responses: {
        key: "200"
        value: {
          description: ""
          schema: {
            json_schema: {ref: ".api.v1.MergeExchangePublicLinkTokenForAccountTokenResponse"}
          }
        }
      }
    };
  }

  rpc GetChartOfAccounts(GetChartOfAccountsRequest) returns (GetChartOfAccountsResponse) {
    option (google.api.http) = {
      get: "/api/v1/business-analysis/{user_id}/chart-of-accounts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "gets a business chart of accounts"
      tags: ["business-analysis"]
      operation_id: "GetChartOfAccounts"
      description: ""
      responses: {
        key: "200"
        value: {
          description: ""
          schema: {
            json_schema: {ref: ".api.v1.GetChartOfAccountsResponse"}
          }
        }
      }
    };
  }

  rpc GetTransactionDetails(GetTransactionDetailsRequest) returns (GetTransactionDetailsResponse) {
    option (google.api.http) = {
      get: "/api/v1/business-analysis/{user_id}/transaction-details"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "gets a business transactions details"
      tags: ["business-analysis"]
      operation_id: "GetTransactionDetails"
      description: ""
      responses: {
        key: "200"
        value: {
          description: ""
          schema: {
            json_schema: {ref: ".api.v1.GetTransactionDetailsResponse"}
          }
        }
      }
    };
  }

  rpc GetReferenceDetails(GetReferenceDetailsRequest) returns (GetReferenceDetailsResponse) {
    option (google.api.http) = {
      get: "/api/v1/business-analysis/{user_id}/reference-details"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "gets a business reference details"
      tags: ["business-analysis"]
      operation_id: "GetReferenceDetails"
      description: ""
      responses: {
        key: "200"
        value: {
          description: ""
          schema: {
            json_schema: {ref: ".api.v1.GetReferenceDetailsResponse"}
          }
        }
      }
    };
  }


}