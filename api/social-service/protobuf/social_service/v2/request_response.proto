syntax = "proto3";

package social_service.v2;

import "social_service/v2/common.proto";
import "social_service/v2/message.proto";
import "social_service/v2/mongo.proto";
import "google/api/field_behavior.proto";
import "validate/validate.proto";

option go_package = "github.com/SolomonAIEngineering/service-level-api/pkg/generated/social_service/v2";

// EmptyRequest: Represents a request object invoked against the social service
// that is empty
message EmptyRequest {}

// ServiceHealthRequest: Represents a request object invoked against the social
// service to ascertain service health
message HealthCheckRequest {}

// ServiceHealthResponse: Represent the object returned as a response to the
// service health api invocation
message HealthCheckResponse {
  bool healthy = 1;
}

// ReadynessCheckRequest: Represents a request object invoked against the social service
// for the readyness check
message ReadynessCheckRequest {}

// ReadynessCheckResponse Represents a request invoked against the social service for the
// readyness check response
message ReadynessCheckResponse {
  bool ready = 1;
}

// GetUserProfileRequest: Represents the request object invoked against the
// social service to obtain a user's social profile
message GetUserProfileRequest {
  // The user ID associated with the profile we want to get | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // The RequestorProfileID is an optional parameter used to check if the
  // profileID (requestor) making a request for the record actually follows the
  // record
  uint64 requestor_profile_id = 2;
  // The RequestorProfileType is an optional parameter which tells us what type
  // of profile is the requestor
  AccountType requestor_profile_type = 3;
}

// GetCommunityProfileRequest: Represents the request object invoked against the
// social
// service to obtain a user's social profile
message GetCommunityProfileRequest {
  // The communityID associated with the community being requested  | type:
  // uint64
  uint64 community_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // The RequestorProfileID is an optional parameter used to check if the
  // profileID (requestor) making a request for the record actually follows the
  // record
  uint64 requestor_profile_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // The RequestorProfileType is an optional parameter which tells us what type
  // of profile is the requestor
  AccountType requestor_profile_type = 3 [(google.api.field_behavior) = REQUIRED];
}

// CreateUserProfileRequest: Represents the request object invoked against the
// social service to create a user profile account
message CreateUserProfileRequest {
  // the user ID trying to create this user profile (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  uint64 user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // the set of ids of community profiles to follow
  repeated uint64 ids_of_communities_to_follow = 3;

  string username = 4 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  repeated UserTags tags = 5 [
    (validate.rules).repeated.min_items = 0,
    (google.api.field_behavior) = REQUIRED
  ];

  bool is_private = 6;
  string profile_image_url = 7 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

// CreateCommunityProfileRequest: Represents the request object invoked against
// the social service to create a community profile account
message CreateCommunityProfileRequest {
  // the community profile being created | type: json_object
  CommunityProfile profile = 1 [
    (validate.rules).message.required = true,
    (google.api.field_behavior) = REQUIRED
  ];
  // the user ID trying to create this community profile (NOTE: userID refers to
  // the ID from the vantage point of the user service. This ID is the single
  // source of truth for a given user across our suite of services) | type:
  // uint64
  uint64 user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

// DeleteUserProfileRequest: Represents the request object invoked against the
// social service to delete a user profile account
message DeleteUserProfileRequest {
  // the user ID trying to delete this user profile (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

// DeleteCommunityProfileRequest: Represents the request object invoked against
// the social service to delete a community profile account
message DeleteCommunityProfileRequest {
  // the user ID trying to delete this community profile (NOTE: userID refers to
  // the ID from the vantage point of the user service. This ID is the single
  // source of truth for a given user across our suite of services) | type:
  // uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 community_profile_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

// EditUserProfileRequest: Represents the request object invoked against the
// social service to update a user profile account
message EditUserProfileRequest {
  // the user ID trying to update this user profile (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  // the profile payload | type: json_object
  UserProfile profile = 2 [
    (validate.rules).message.required = true,
    (google.api.field_behavior) = REQUIRED
  ];
}

// EditCommunityProfileRequest: Represents the request object invoked against
// the social service to update a community profile account
message EditCommunityProfileRequest {
  // The community profile being updated | type: json_object
  CommunityProfile profile = 1 [
    (validate.rules).message.required = true,
    (google.api.field_behavior) = REQUIRED
  ];
  // the user ID trying to update this community profile (NOTE: userID refers to
  // the ID from the vantage point of the user service. This ID is the single
  // source of truth for a given user across our suite of services) | type:
  // uint64
  uint64 user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // The community profile ID of the community being updated | type: uint64
  uint64 community_profile_id = 3 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

// BlockUserProfileRequest: Represents the request object invoked against the
// social service to block a given user profile
message BlockUserProfileRequest {
  // the user ID trying to block another user (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  uint64 source_user_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // the user ID being blocked by another user (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  uint64 target_user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

// FollowProfileRequest: Represents the request object invoked against the
// social service to follow a given user profile
message FollowProfileRequest {
  // the user ID trying to follow another user (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  uint64 source_user_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // the user ID being followed by another user (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  uint64 target_user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

// FollowCommunityProfileRequest: Represents the request object invoked against
// the social service to follow a given community profile
message FollowCommunityProfileRequest {
  // the user ID trying to follow another user (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  uint64 source_user_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // the targetCommunityProfileID ID being followed by another user
  uint64 target_community_profile_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

// AcceptFollowProfileRequest: Represents the request object invoked against the
// social service to accept a follow request
message AcceptFollowProfileRequest {
  // The id of the follow record | type: uint64
  uint64 follow_record_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

// CreatePostRequest: Represents the request object invoked against the
// social service to create a post
message CreatePostRequest {
  // the user ID trying to create a post (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // The ID of the community profile attempting to create the post  | type:
  // uint64
  uint64 community_profile_id = 2;
  // The post payload | type: json_object
  Post post = 3 [
    (validate.rules).message.required = true,
    (google.api.field_behavior) = REQUIRED
  ];
  // The type of profile making the request | type: string
  AccountType account_type = 4 [(google.api.field_behavior) = REQUIRED];
}

// DeletePostRequest: Represents the request object invoked against the
// social service to delete a post
message DeletePostRequest {
  // the user ID trying to delete a post (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // The ID of the post attempted to be delete | type: string
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  PostType post_type = 3 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
}

// EditPostRequest: Represents the request object invoked against the
// social service to update a post
message EditPostRequest {
  // The post payload | type: json_object
  Post post = 2 [
    (validate.rules).message.required = true,
    (google.api.field_behavior) = REQUIRED
  ];
  // The ID of the post to be updated | type: string
  string post_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  PostType post_type = 4 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
}

// GetPostRequest: Represents the request object invoked against the
// social service to obtain a post
message GetPostRequest {
  // the user ID trying to obtain a post (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // The ID of the post to obtain | type: string
  string post_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  PostType post_type = 4 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
}

// ReactionRequest: Represents the request object invoked against the
// social service to create, update or obtain a reaction
message ReactionRequest {
  // The ID of the post to whom we aim to add a reaction to | type: string
  string post_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // the user ID trying to add a reaction (NOTE: user_id refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  uint64 user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // The type of reaction to add to a post or comment | type: string
  ReactionType type = 3 [(google.api.field_behavior) = REQUIRED];
  // The type of post being reacted to | type: string
  PostType post_type = 5 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
}

// GetUserFeedRequest: Represents the request object invoked against the
// social service to obtain a feed
message GetUserFeedRequest {
  // the user ID trying to obtain a given feed (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // The type of feed aiming to be obtained | type: string
  FeedType feed_type = 3 [(google.api.field_behavior) = REQUIRED];
  // The type of account making the request to obtain the feed | type: string
  AccountType account_type = 4 [(google.api.field_behavior) = REQUIRED];
  string next_page_token = 5;
}


// GetCommunityFeedRequest: Represents the request object invoked against the
// social service to obtain a community's feed
message GetCommunityFeedRequest {
  // The ID of the community we are trying to obtain the feed for | type: uint64
  uint64 community_profile_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // The type of feed aiming to be obtained | type: string
  FeedType feed_type = 2 [(google.api.field_behavior) = REQUIRED];
  // The type of account making the request to obtain the feed | type: string
  AccountType account_type = 3 [(google.api.field_behavior) = REQUIRED];
  string next_page_token = 4;
}

// CreateCommentRequest: Represents the request object invoked against the
// social service to create a comment
message CreateCommentRequest {
  // The ID of the post to whom to add the comment | type: string
  string post_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // the user ID trying to create a comment (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  uint64 user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // The ID of the community trying to create a comment | type: uint64
  uint64 community_profile_id = 3;
  // The type of account making the request to create a comment | type: string
  AccountType account_type = 4 [(google.api.field_behavior) = REQUIRED];
  // The actual comment payload | type: json_object
  Comment comment = 5 [
    (validate.rules).message.required = true,
    (google.api.field_behavior) = REQUIRED
  ];
  // The type of post being reacted to | type: string
  PostType post_type = 6 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
}

// DeleteCommentRequest: Represents the request object invoked against the
// social service to delete a comment
message DeleteCommentRequest {
  // The ID of the post trying to be deleted | type: string
  string post_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // The ID of the comment trying to be delete | type: string
  string comment_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // The type of post being reacted to | type: string
  PostType post_type = 3 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED];
}

// CreateTopicRequest: Represent the request object inoked against the
// social service to create a topic
message CreateTopicRequest {
  // the community profile to associate the topic to | type: uint64
  uint64 community_profile_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // the user ID trying to whom the community is tied to (NOTE: userID refers to
  // the ID from the vantage point of the user service. This ID is the single
  // source of truth for a given user across our suite of services) | type:
  // uint64
  uint64 user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // topic payload | type: json_object
  Topic topic = 3 [
    (validate.rules).message.required = true,
    (google.api.field_behavior) = REQUIRED
  ];
}

// GetPostsByTopicRequest: Represents the request object inoked against the
// social service to get all post tied to a topic name
message GetPostsByTopicRequest {
  // the community profile to associate the topic to | type: uint64
  uint64 community_profile_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // the name of a given topic | type: string
  string topic_name = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

// GetPendingFollowRequests: Represent the request object invoked against the
// social service to get all pending follow requests tied to a user
message GetPendingFollowsRequest {
  // the user ID who's pending request we want to obtain (NOTE: userID refers to
  // the ID from the vantage point of the user service. This ID is the single
  // source of truth for a given user across our suite of services) | type:
  // uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

// GetCommunitiesUserFollowsRequest: Represent the request object invoked
// against the social service to get all the communities a given user follows
message GetCommunitiesUserFollowsRequest {
  // the user ID who's communities follow set we want to obtain (NOTE: userID
  // refers to the ID from the vantage point of the user service. This ID is the
  // single source of truth for a given user across our suite of services) |
  // type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  // the max number of communities to return | type: uint64
  uint64 limit = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

// GetTopicsOfCommunitiesUserFollowsRequest: Represents the request object
// invoked against the social service to get all the topics tied to the
// communities a user follows
message GetTopicsOfCommunitiesUserFollowsRequest {
  // the user ID whose communities topics follow set we want to obtain (NOTE:
  // userID refers to the ID from the vantage point of the user service. This ID
  // is the single source of truth for a given user across our suite of
  // services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  uint64 limit = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

// PaginationRequest: Represents the request object invoked against the
// social service to obtain a paginated response from a given endpoint
message PaginationRequest {
  int32 page_size = 1;
  int32 page_number = 2;
}

// GetUserProfilesRequest: Represents the request object invoked against the
// social service to obtain a paginated response of user profiles
message GetUserProfilesRequest {
  int32 page_size = 1;
  int32 page_number = 2;
}

// GetCommunityProfilesRequest: Represents the request object invoked against the
// social service to obtain a paginated response of community profiles
message GetCommunityProfilesRequest {
  int32 page_size = 1;
  int32 page_number = 2;
}

// AddPostQualityScoreRequest: Represents the request object invoked against the
// social service to add a quality score to a given post
message AddPostQualityScoreRequest {
  string post_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 quality_score = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 user_id = 3 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // The type of post being reacted to | type: string
  PostType post_type = 4 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).enum = {not_in: [0]}
    ];
}

// AddCommentQualityScoreRequest: Represents the request object invoked against
// the social service to add a quality score to a given comment
message AddCommentQualityScoreRequest {
  string post_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string comment_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 quality_score = 3 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 user_id = 4 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // The type of post being reacted to | type: string
  PostType post_type = 5 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).enum = {not_in: [0]}
    ];
}

// ReportPostRequest: Represents the request object invoked against the
// social service to report a post
message ReportPostRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  PostType post_type = 3 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
  ];
}

// ReportCommentRequest: Represents the request object invoked against the
// social service to report a comment
message ReportCommentRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string comment_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // The type of post being reacted to | type: string
  PostType post_type = 4 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
}

// GetBlogPostsByTagRequest: Represents the request object invoked against the
// social service to block posts by a given tag
message GetBlogPostsByTagRequest {
  string tag = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // The type of post being reacted to | type: string
  PostType post_type = 2 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
  ];
}

// GetCommunityBlogPostsRequest represents the request object invoked against the
// social service to get all blog posts tied to a given community
message GetCommunityBlogPostsRequest {
  uint64 community_profile_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

// DiscoverRequest: Represents the request object invoked against the
// social service to discover posts
message DiscoverProfilesRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 limit = 2;
}

/// =========================================

// ServiceReadyResponse: Represent the object returned as a response to the
// service readyness api invocation
message ServiceReadyResponse {
  bool ready = 1;
}

// GetUserProfileResponse: Represents the object returned as a response to
// `get-user-profile` request
message GetUserProfileResponse {
  UserProfile profile = 1;
  SocialRelationshipMetadata metadata = 2;
}

// GetCommunityProfileResponse: Represents the object returned as a response to
// `get-commmunity-profile` request
message GetCommunityProfileResponse {
  CommunityProfile profile = 1;
  SocialRelationshipMetadata metadata = 2;
}

// CreateUserProfileResponse: Represents the response object returned as a
// response to the `create-user` request
message CreateUserProfileResponse {
  uint64 virtual_profile_id = 1;
}

// CreateCommunityProfileResponse: Represents the response object returned as a
// response to the `create-community` request
message CreateCommunityProfileResponse {
  CommunityProfile profile = 1;
}

// DeleteUserProfileResponse: Represent the response object returned as a response
// to the `delete profile` and `delete-community` request
message DeleteUserProfileResponse {
  bool success = 1;
}

// EditUserProfileResponse: Represents the object returned as a response to
// `update-user-profile` request
message EditUserProfileResponse {
  UserProfile profile = 1;
}

// UpdateCommunityProfileResponse: Represents the object returned as a response
// to `update-commmunity-profile` request
message EditCommunityProfileResponse {
  CommunityProfile profile = 1;
}

// BlockUserProfileResponse: Represents the object returned as a response to the
// block user request
message BlockUserProfileResponse {
  bool success = 1;
}

// FollowProfileResponse: Represent the object returned as a response to the
// follow profile user request
message FollowCommunityProfileResponse {
  bool success = 2;
}

// AcceptFollowProfileRequestResponse: Represent the object returned as a
// response to the accept follow profile request
message AcceptFollowProfileResponse {
  bool success = 2;
}

// CreatePostResponse: Represent the object returned as a
// response to the create post request
message CreatePostResponse {
  Post post = 1;
}

// DeletePostResponse: Represent the object returned as a
// response to the delete post request
message DeletePostResponse {
  bool success = 2;
}

// EditPostResponse: Represent the object returned as a
// response to the update post request
message EditPostResponse {
  bool success = 2;
}

// GetPostResponse: Represent the object returned as a
// response to the get post request
message GetPostResponse {
  Post post = 1;
}

// ReportPostResponse: Represent the object returned as a
// response to the report post request
message ReportPostResponse {
  Post post = 1;
}

// ReactionResponse: Represent the object returned as a
// response to the (create/update) reaction request
message ReactionResponse {}

// GetUserFeedResponse: Represent the object returned as a
// response to the get user feed request
message GetUserFeedResponse {
  oneof timeline {
    BaseTimeline base_timeline = 1;
    NotificationTimeline notification_timeline = 2;
  };
  string next_page_token = 3;
}

// GetCommunityFeedResponse: Represent the object returned as a
// response to the get community feed request
message GetCommunityFeedResponse {
  oneof timeline {
    BaseTimeline base_timeline = 1;
    NotificationTimeline notification_timeline = 2;
  };
  string next_page_token = 3;
}

// CreateCommentResponse: Represent the object returned as a
// response to the create comment request
message CreateCommentResponse {
  oneof post {
    Post regular_post = 1;
    SharedPost shared_post = 2;
    PollPost poll_post = 3;
  }
}

// DeleteCommentResponse: Represent the object returned as a
// response to the delete comment request
message DeleteCommentResponse {
  bool sucess = 1;
}

// CreateTopicResponse: Represent the object returned as a response to the
// create topic request
message CreateTopicResponse {
  uint64 topic_id = 2;
}

// GetPostsByTopicResponse: Represent the object returned as a
// response to the get posts by topic request
message GetPostsByTopicResponse {
  repeated Post posts = 1;
}

// GetPendingFollowRequestsResponse: Represent the response object invoked
// against the social service to get all pending follow requests tied to a user
message GetPendingFollowsResponse {
  repeated PendingFollowRequest requests = 1;
}

// GetCommunitiesUserFollowsResponse: Represent the response object invoked
// against the social service to get all the communities a given user follows
message GetCommunitiesUserFollowsResponse {
  repeated CommunityProfile communities = 1;
}

// GetTopicsOfCommunitiesUserFollowsResponse: Represent the response object
// invoked against the social service to get all the communities a given user
// follows
message GetTopicsOfCommunitiesUserFollowsResponse {
  repeated Topic topic = 2;
}

message GetUserProfilesResponse {
  int32 next_page_number = 1;
  repeated UserProfile profiles = 2;
}

message GetCommunityProfilesResponse {
  int32 next_page_number = 1;
  repeated CommunityProfile profiles = 2;
}

message AddPostQualityScoreResponse {
  oneof post {
    Post regular_post = 1;
    SharedPost shared_post = 2;
    PollPost poll_post = 3;
  }
}

message GetBlogPostsByTagResponse {
  repeated Post posts = 1;
}

message ReportCommentResponse {
  Comment comment = 1;
}

message PostsPaginationResponse {
  repeated Post posts = 1;
  int32 next_page_number = 2;
}


message DiscoverProfilesResponse {
  repeated CommunityProfile community_profiles = 1;
  repeated UserProfile user_profiles = 2;
  repeated Topic topics = 3;
}

// DeleteCommunityProfileResponse: Represent the response object returned as a response
// to the `delete profile` and `delete-community` request
message DeleteCommunityProfileResponse {
  bool success = 1;
}

// FollowProfileResponse: Represent the object returned as a response to the
// follow profile user request
message FollowProfileResponse {
  bool success = 2;
}

message AddCommentQualityScoreResponse {
  Comment comment = 1;
}

message GetCommunityBlogPostsResponse {
  repeated Post posts = 1;
}

// CreatePollRequest: Represents the request object invoked against the
// social service to create a post
message CreatePollRequest {
  // the user ID trying to create a post (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  // The post payload | type: json_object
  PollPost poll = 3 [
    (validate.rules).message.required = true,
    (google.api.field_behavior) = REQUIRED
  ];
}

message CreatePollResponse {
  string poll_id = 1;
}

message DeletePollRequest {
  // the user ID trying to delete this user profile (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  // The ID of the post attempted to be delete | type: string
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

message DeletePollResponse {
  bool success = 1;
}

message GetPollRequest {
  // the user ID trying to delete this user profile (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  // The ID of the post attempted to be delete | type: string
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

message GetPollResponse {
  PollPost poll = 1;
}

message GetPollsRequest {
  // the user ID trying to delete this user profile (NOTE: userID refers to the
  // ID from the vantage point of the user service. This ID is the single source
  // of truth for a given user across our suite of services) | type: uint64
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

message GetPollsResponse {
  repeated PollPost polls = 1;
}

message RespondToPollRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  string poll_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  // the poll option the user is responding with
  string poll_option = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  // the index of the poll option the user is responding with
  uint64 poll_option_idx = 4 [
    (validate.rules).uint64.gte = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message RespondToPollResponse {
  PollPost poll = 1;
}

message CreateNoteRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  PostType post_type = 3 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).enum = {not_in: [0]}
    ];
  Note note = 4 [(validate.rules).message.required = true];
}

message CreateNoteResponse {
  oneof post {
    Post regular_post = 1;
    SharedPost shared_post = 2;
    PollPost poll_post = 3;
  }
}

message DeleteNoteRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  string note_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  PostType post_type = 4 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).enum = {not_in: [0]}
    ];
}

message DeleteNoteResponse {
  bool success = 1;
}

message EditNoteRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  string note_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  Note note = 4 [(validate.rules).message.required = true];
  PostType post_type = 5 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ]; 
}

message EditNoteResponse {
  oneof post {
    Post regular_post = 1;
    SharedPost shared_post = 2;
    PollPost poll_post = 3;
  }
}

message CreatePublicationRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  Publication publication = 2 [(validate.rules).message.required = true];
}

message CreatePublicationResponse {
  uint64 id = 1;
}

message GetPublicationRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 publication_id = 2 [
    (validate.rules).uint64.gt = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

message GetPublicationResponse {
  Publication publication = 1;
}

message DeletePublicationRequest {
  uint64 admin_user_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 publication_id = 2 [
    (validate.rules).uint64.gt = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

message DeletePublicationResponse {
  bool success = 1;
}

message AddPublicationEditorRequest {
  uint64 admin_user_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 editor_user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 publication_id = 3 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message AddPublicationEditorResponse {
  Publication publication = 1;
}

message DeletePublicationEditorRequest {
  uint64 admin_user_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 editor_user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 publication_id = 3 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message DeletePublicationEditorResponse {
  bool success = 1;
}

message AddPostToPublicationRequest {
  uint64 editor_user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 publication_id = 3 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  Post post = 4 [(validate.rules).message.required = true];
}

message AddPostToPublicationResponse {
  Publication publication = 1;
}

message DeletePostFromPublicationRequest {
  uint64 editor_user_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 publication_id = 3 [
    (validate.rules).uint64.gt = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 4 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  PostType post_type = 5 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
}

message DeletePostFromPublicationResponse {
  bool success = 1;
}

message AddPostToThreadRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string parent_post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  Post post = 3 [(validate.rules).message.required = true];
  PostType post_type = 4 [
    (validate.rules).enum = {not_in: [0]},
    (google.api.field_behavior) = REQUIRED
  ];
}

message AddPostToThreadResponse {
  oneof post {
    Post regular_post = 1;
    SharedPost shared_post = 2;
    PollPost poll_post = 3;
  }
}

message RemovePostFromThreadRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string parent_post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string participant_post_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  PostType post_type = 4 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
  ];
}

message RemovePostFromThreadResponse {
  bool success = 1;
}

message GetPostThreadRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  PostType post_type = 5 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED]; 
}

message GetPostThreadResponse {
  repeated Post posts = 1;
}

message BookmarkPostRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

message BookmarkPostResponse {
  Bookmark bookmark = 1;
}

message RemoveBookmarkedPostRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  PostType post_type = 5 [
    (validate.rules).enum = {not_in: [0]},  
   (google.api.field_behavior) = REQUIRED
   ];
}

message RemoveBookmarkedPostResponse {
  Bookmark bookmark = 1;
}

message BookmarkPublicationRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 publication_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message BookmarkPublicationResponse {
  Bookmark bookmark = 1;
}

message RemoveBookmarkedPublicationRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 publication_id = 2 [
    (validate.rules).uint64.gt = 1,
    (google.api.field_behavior) = REQUIRED
  ];
}

message RemoveBookmarkedPublicationResponse {
  Bookmark bookmark = 1;
}

message GetFollowersRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 profile_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];

  uint64 limit = 4 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message GetFollowersResponse {
  repeated UserProfile users = 1;
}

message GetAccountsFollowingRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  uint64 profile_id = 2 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  // the account type of the user whoses followers are being requested
  AccountType account_type = 3 [(google.api.field_behavior) = REQUIRED];
  uint64 limit = 4 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message GetAccountsFollowingResponse {
  repeated UserProfile users = 1;
  repeated CommunityProfile communities = 2;
}

message ReactToPostRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2;
  AccountType account_type = 3 [(google.api.field_behavior) = REQUIRED];
  Reaction reaction = 4;
  PostType post_type = 5 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ]; 
}

message ReactToPostResponse {
  oneof post {
    Post regular_post = 1;
    SharedPost shared_post = 2;
    PollPost poll_post = 3;
  }
}

message ReactToCommentRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string comment_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  AccountType account_type = 4 [(google.api.field_behavior) = REQUIRED];
  Reaction reaction = 5;
  PostType post_type = 6 [
    (validate.rules).enum = {not_in: [0]},    
    (google.api.field_behavior) = REQUIRED
  ];  
}

message ReactToCommentResponse {
  Comment comment = 1;
}

message ReactToCommentReplyRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string comment_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string reply_id = 4 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  AccountType account_type = 5 [(google.api.field_behavior) = REQUIRED];
  Reaction reaction = 6;
  PostType post_type = 7 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
}

message ReactToCommentReplyResponse {
  CommentReply reply = 1;
}

message CreateCommentReplyRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string comment_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  CommentReply reply = 4 [(validate.rules).message.required = true];
  PostType post_type = 5 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
}

message CreateCommentReplyResponse {
  Comment comment = 1;
}

message DeleteCommentReplyRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string comment_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string reply_id = 4 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  PostType post_type = 7 [
    (validate.rules).enum = {not_in: [0]},    
    (google.api.field_behavior) = REQUIRED
  ];
}

message DeleteCommentReplyResponse {
  Comment comment = 1;
}

message EditCommentReplyRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string comment_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string reply_id = 4 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  CommentReply reply = 5 [(validate.rules).message.required = true];
  PostType post_type = 7 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ]; 
}

message EditCommentReplyResponse {
  CommentReply reply = 1;
}

message GetCommentRepliesRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string comment_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  PostType post_type = 7 [
    (validate.rules).enum = {not_in: [0]},    
    (google.api.field_behavior) = REQUIRED
  ];
}

message GetCommentRepliesResponse {
  repeated CommentReply replies = 1;
}

message ReportCommentReplyRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string comment_id = 3 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string reply_id = 4 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  PostType post_type = 7 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
}

message ReportCommentReplyResponse {
  CommentReply reply = 1;
}

message SharePostRequest {
  string user_id = 1 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string parent_post_id = 2 [
    (validate.rules).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];

  PostType parent_post_type = 3 [
    (validate.rules).enum = {not_in: [0]},  
    (google.api.field_behavior) = REQUIRED
    ];
  string content = 4  [
    (validate.rules).string = {min_bytes: 5},
    (google.api.field_behavior) = REQUIRED
  ];
}

message SharePostResponse {
  bool success = 1;
}

message GetBookmarkedPostsRequest {
  uint64 user_id = 1 [
    (validate.rules).uint64.gt = 0,
    (google.api.field_behavior) = REQUIRED];
}

message GetBookmarkedPostsResponse {
  repeated Post posts = 1;
}