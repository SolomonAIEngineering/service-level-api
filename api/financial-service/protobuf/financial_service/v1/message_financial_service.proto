syntax = "proto3";

package financial_service.v1;

import "protoc-gen-gorm/options/gorm.proto";
// import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/SolomonAIEngineering/service-level-api/pkg/generated/financial_service/v1";

enum BankAccountStatus {
  BANK_ACCOUNT_STATUS_UNSPECIFIED = 0;
  BANK_ACCOUNT_STATUS_ACTIVE = 1;
  BANK_ACCOUNT_STATUS_INACTIVE = 2;
}

enum GoalStatus {
  GOAL_STATUS_UNSPECIFIED = 0;
  GOAL_STATUS_ACTIVE = 1;
  GOAL_STATUS_INACTIVE = 2;
  GOAL_STATUS_COMPLETED = 3;
  GOAL_STATUS_DELETE = 4;
}

enum GoalType {
  GOAL_TYPE_UNSPECIFIED = 0;
  GOAL_TYPE_SAVINGS = 1;
  GOAL_TYPE_INVESTMENT = 2;
  GOAL_TYPE_DEBT = 3;
  GOAL_TYPE_EXPENSE = 4;
}

enum PocketType {
  POCKET_TYPE_UNSPECIFIED = 0;
  POCKET_TYPE_DISCRETIONARY_SPENDING = 1;
  POCKET_TYPE_FUN_MONEY = 2;
  POCKET_TYPE_DEBT_REDUCTION = 3;
  POCKET_TYPE_EMERGENCY_FUND = 4;
  POCKET_TYPE_INVESTMENT = 5;
  POCKET_TYPE_SHORT_TERM_SAVINGS = 6;
  POCKET_TYPE_LONG_TERM_SAVINGS = 7;
}

enum BankAccountType {
  BANK_ACCOUNT_TYPE_UNSPECIFIED = 0;
  BANK_ACCOUNT_TYPE_PLAID = 1;
  BANK_ACCOUNT_TYPE_MANUAL = 2;
}

enum StripeSubscriptionStatus {
  STRIPE_SUBSCRIPTION_STATUS_UNSPECIFIED = 0;
  STRIPE_SUBSCRIPTION_STATUS_TRIALING = 1;
  STRIPE_SUBSCRIPTION_STATUS_ACTIVE = 2;
  STRIPE_SUBSCRIPTION_STATUS_PAST_DUE = 3;
  STRIPE_SUBSCRIPTION_STATUS_CANCELED = 4;
  STRIPE_SUBSCRIPTION_STATUS_UNPAID = 5;
  STRIPE_SUBSCRIPTION_STATUS_COMPLETE = 6;
  STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE = 7;
  STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE_EXPIRED = 8;
  STRIPE_SUBSCRIPTION_STATUS_CREATED = 9;
   STRIPE_SUBSCRIPTION_STATUS_PAUSED = 10;
}

enum LinkStatus {
  LINK_STATUS_UNSPECIFIED = 0;
  LINK_STATUS_SETUP = 1;
  LINK_STATUS_PENDING = 2;
  LINK_STATUS_ERROR = 3;
  LINK_STATUS_SUCCESS = 4;
  LINK_STATUS_PENDING_EXPIRATION = 5;
  LINK_STATUS_REVOKED = 6;
  LINK_STATUS_ITEM_LOGIN_REQUIRED = 7;
}

enum LinkType {
  LINK_TYPE_UNSPECIFIED = 0;
  LINK_TYPE_PLAID = 1;
  LINK_TYPE_MANUAL = 2;
}

enum CategoryType {
    CATEGORY_TYPE_UNSPECIFIED = 0;
    CATEGORY_TYPE_DEPARTMENT = 1;
    CATEGORY_TYPE_CLASS = 2;
}

enum PersonalActionableInsightName {
  PERSONAL_ACTIONABLE_INSIGHT_NAME_UNSPECIFIED = 0;
  PERSONAL_ACTIONABLE_INSIGHT_NAME_EXPENSE = 1;
  PERSONAL_ACTIONABLE_INSIGHT_NAME_EMERGENCY_FUND = 2;
  PERSONAL_ACTIONABLE_INSIGHT_NAME_DEBT_PRIORITIZATION = 3;
  PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_ESSENTIAL_EXPENSES = 4;
  PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_SUBSCRIPTIONS = 5;
  PERSONAL_ACTIONABLE_INSIGHT_NAME_DISCRETIONARY_SPENDING = 6;

}

enum FinancialUserProfileType {
  FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED = 0;
  FINANCIAL_USER_PROFILE_TYPE_USER = 1;
  FINANCIAL_USER_PROFILE_TYPE_BUSINESS = 2;
}

// StripeSubscription stores high level stripe subscription details of which the user profile has
message StripeSubscription {
  option (gorm.opts) = {ormable: true};
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // stripe subscription id tied to the customer
  string stripe_subscription_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // stripe subscription status
  StripeSubscriptionStatus stripe_subscription_status = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // stripe subscription active until 
  string stripe_subscription_active_until = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // stripe webhook latest timestamp 
  string stripe_webhook_latest_timestamp = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // wether the subscription is trialing
  bool is_trialing = 6;
}

// FinancialUserProfile stores high level user profile details
// such as the id, user_id tied to the profile, and many more
message FinancialUserProfile {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
  // the user id tied to the profile
  uint64 user_id = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
    (validate.rules).uint64.gt = 0
  ];
  string stripe_customer_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // the stripe subscriptions the user profile actively maintains
  StripeSubscription stripe_subscriptions = 4 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  // a user profile can have many links (connected institutions) of which finanical accounts are tied to (checking, savings, etc)
  repeated Link link = 6 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  repeated ActionableInsight actionable_insights = 7 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  string email = 8;
  repeated MergeLink merge_liink = 9;
  repeated PersonalActionableInsight actionable_personal_insights = 10 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  FinancialUserProfileType profile_type = 11;
}


// An actionable insight serves as a basic insight users 
// can leverage and act upon and is typically generated based off of their financial contexts
message ActionableInsight {
  option (gorm.opts) = {ormable: true};
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // for each user we generate a detailed actionable insights for them to see
  string detailed_action = 2;
  // for each user we generate a summarized insight targeted at optimizing a certain condition
  string summarized_action = 3;
  // the time the insight was generated
  google.protobuf.Timestamp generated_time = 4;
  // associated tags with the generated insights
  repeated string tags = 5;
}

message PersonalActionableInsight {
  option (gorm.opts) = {ormable: true};
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // insight name
  PersonalActionableInsightName insight_name = 2;
  // insight description
  string description = 3;
  // insight takeaway
  string takeaway = 4;
  // insight action
  string action = 5;
  // insight expected benefit
  string expected_benefit = 6;
  // insight tags
  repeated string tags = 7;
  // insight generated time
  google.protobuf.Timestamp generated_time = 8;
  // metrics to optimize for
  repeated string metrics_to_optimize_for = 9;
}

// A Link represents a login at a financial institution. A single end-user of your application might have accounts at different financial
// institutions, which means they would have multiple different Items. An Item is not the same as a financial institution account,
// although every account will be associated with an Item. For example, if a user has one login at their bank that allows them to access
// both their checking account and their savings account, a single Item would be associated with both of those accounts. Each Item 
// linked within your application will have a corresponding access_token, which is a token that you can use to make API requests related
// to that specific Item.
// Two Items created for the same set of credentials at the same institution will be considered different and not share the same item_id.
message Link {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
  PlaidSync plaid_sync = 2 [
    (gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
  ];
  LinkStatus link_status = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  PlaidLink plaid_link = 4 [(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  bool plaid_new_accounts_available = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string expiration_date = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string institution_name = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string custom_institution_name = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string description = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string last_manual_sync = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string last_successful_update = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // token object witholds an access token which is a token used to make API requests related to a specific Item. You will typically obtain an access_token
  // by calling /item/public_token/exchange. For more details, see the Token exchange flow. An access_token does not expire,
  // although it may require updating, such as when a user changes their password, or when working with European institutions
  // that comply with PSD2's 90-day consent window. For more information, see When to use update mode. 
  // Access tokens should always be stored securely, and associated with the user whose data they represent. 
  // If compromised, an access_token can be rotated via /item/access_token/invalidate. If no longer needed, 
  // it can be revoked via /item/remove.(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  Token token = 12 [(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  // a link event - or client login event can have many connected bank accounts
  // for example a log in link against one instition like chase can have many account (checking and savings)
  // it is important though to ensure that if a link against an instition already exists, we dont fascilitate duplicated
  repeated BankAccount bank_accounts = 13 [(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  // a link event - or client login event can have many connected investment accounts
  // for example a log in link against one instition like fidelity can have many accounts (401k and investment account)
  // it is important though to ensure that if a link against an instition already exists, we dont fascilitate duplicated
  repeated InvestmentAccount investment_accounts = 14 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  // credit accounts tied to a user
  repeated CreditAccount credit_accounts = 15 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  // mortgage accounts tied to a user
  repeated MortgageAccount mortgage_accounts = 16 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  // student loan accounts tied to a link
  repeated StudentLoanAccount student_loan_accounts = 17 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  // the id of the institution this link is tied to and against
  string plaid_institution_id = 18 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // the type of link this is ... can be either a manual or plaid link type
  LinkType link_type = 19 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}]; 
  string error_code = 20 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string updated_at = 21 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  bool new_accounts_available = 22 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  bool should_be_updated = 23 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
}


message PlaidSync {
   option (gorm.opts) = {ormable: true};
    // id
    uint64 id = 1 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
    string time_stamp = 3;
    string trigger = 4;
    string next_cursor = 5;
    int64 added = 6;
    int64 removed = 7;
    int64 modified = 8;
}

message Token {
  option (gorm.opts) = {ormable: true};
  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // the id of the item the token is tied to 
  string item_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string key_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string access_token = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string version = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // This is what you'll pass to Merge as the end_user_origin_id.
  string merge_end_user_origin_id = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // The integration slug/identifier. This is returned at the end of the linking flow.
  string merge_integration_slug = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // last time you performed a merge fetch
  google.protobuf.Timestamp last_merge_created_at = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
}

message PlaidLink {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
  repeated string products = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string webhook_url = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string institution_id = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string institution_name = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  bool use_plaid_sync = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string item_id = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
}

message StudentLoanAccount {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
  string plaid_account_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  repeated string disbursement_dates = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string expected_payoff_date = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string guarantor = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double interest_rate_percentage = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  bool is_overdue = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double last_payment_amount = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string last_payment_date = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string last_statement_issue_date = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string loan_name = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string loan_end_date = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double minimum_payment_amount = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string next_payment_due_date = 14 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string origination_date = 15 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double origination_principal_amount = 16 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double outstanding_interest_amount = 17 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string payment_reference_number = 18 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string sequence_number = 21 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double ytd_interest_paid = 23 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double ytd_principal_paid = 24 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string loan_type = 25 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string pslf_status_estimated_eligibility_date = 26 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  int32 pslf_status_payments_made = 27 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  int32 pslf_status_payments_remaining = 28 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string repayment_plan_type = 29 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string repayment_plan_description = 30 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string servicer_address_city = 31 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string servicer_address_postal_code = 32 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string servicer_address_state = 33 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string servicer_address_street = 34 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string servicer_address_region = 35 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string servicer_address_country = 36 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // the user id to which this bank account is tied to
  uint64 user_id = 37 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // the account name
  string name = 38 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
   // the bank account status
  BankAccountStatus status = 39;
}

message CreditAccount {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the user id to which this bank account is tied to
  uint64 user_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the account name
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the bank account number
  string number = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the bank account type
  string type = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the bank account balance
  float balance = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // current funds on the account
  double current_funds = 9;
  // balance limit
  uint64 balance_limit = 10;

  // plaid account id mapped to this bank account
  string plaid_account_id = 12;
  // accoint subtype
  string subtype = 13;
  // wether the account is overdue
  bool is_overdue = 14;
  // the last payment amount
  double last_payment_amount = 15;
  // the last payment date
  string last_payment_date = 16;
  // the last statement issue date
  string last_statement_issue_date = 17;
  // the minimum amount due date
  double minimum_amount_due_date = 18;
  // the next payment date
  string next_payment_date = 19; 
  // the aprs
  repeated Apr aprs = 20 [ (gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  // the last statement balance
  double last_statement_balance = 21;
  // the minimum payment amount
  double minimum_payment_amount = 22;
  // the next payment due date
  string next_payment_due_date = 23;
   // the bank account status
  BankAccountStatus status = 24;
}

message MortgageAccount {
  option (gorm.opts) = {ormable: true};
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string plaid_account_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string account_number = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double current_late_fee = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double escrow_balance = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  bool has_pmi = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  bool has_prepayment_penalty = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double last_payment_amount = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string last_payment_date = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string loan_term = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string loan_type_description = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string maturity_date = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double next_monthly_payment = 14 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string next_payment_due_date = 15 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double original_principal_balance = 16 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double original_property_value = 17 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double outstanding_principal_balance = 18 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double payment_amount = 19 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string payment_date = 20 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string origination_date = 25 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double origination_principal_amount = 26 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double past_due_amount = 28 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double ytd_interest_paid = 29 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double ytd_principal_paid = 30 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string property_address_city = 31 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string property_address_state = 32 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string property_address_street = 33 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string property_address_postal_code = 34 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string property_region = 35 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string property_country = 36 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  double interest_rate_percentage = 37 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  string interest_rate_type = 38 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
   // the bank account status
  BankAccountStatus status = 39;
}

message InvestmentAccount {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the user id to which this bank account is tied to
  uint64 user_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the account name
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the bank account number
  string number = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the bank account type
  string type = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the bank account balance
  float balance = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  double current_funds = 9;
  uint64 balance_limit = 10;

  // plaid account id mapped to this bank account
  string plaid_account_id = 12;
  // accoint subtype
  string subtype = 13;
  // invesment holding is the set of securities this account witholds
  repeated InvesmentHolding holdings = 7 [ (gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];  
  // the set of securities this account witholds
  repeated InvestmentSecurity securities = 8 [ (gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
   // the bank account status
  BankAccountStatus status = 14;
}

message BankAccount {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the user id to which this bank account is tied to
  uint64 user_id = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
    (validate.rules).uint64.gt = 0
  ];

  // the bank account name
  string name = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
    (google.api.field_behavior) = REQUIRED
  ];

  // the bank account number
  string number = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
    (google.api.field_behavior) = REQUIRED
  ];

  // the bank account type
  BankAccountType type = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
    (google.api.field_behavior) = REQUIRED
  ];

  // the bank account balance
  float balance = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
    (google.api.field_behavior) = REQUIRED  
  ];

  // the bank account currency
  string currency = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
    (google.api.field_behavior) = REQUIRED
  ];

  double current_funds = 9 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
    (google.api.field_behavior) = REQUIRED
  ];

  uint64 balance_limit = 10;

  // the set of "virtualized accounts this user witholds"
  // NOTE: these pockets are automatically created by the system
  // when a user connects a bank account
  repeated Pocket pockets = 11 [
    (gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true},
    (validate.rules).repeated.min_items = 0
  ];

  // plaid account id mapped to this bank account
  string plaid_account_id = 13;
  // account subtype
  string subtype = 14;

  // the bank account status
  BankAccountStatus status = 15;
}

// Pocket is an abstraction of a over a bank account. A user can has at most 4 pockets per connected account
// NOTE: these pockets are automatically created by the system and should not be exposed for mutation
// by any client. The only operations that can be performed against a pocket are:
// 1. Get the pocket
// 2. Get the pocket's smart goals
// 3. Adding a smart goal to the pocket
message Pocket {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the set of smart goals this user witholds
  repeated SmartGoal goals = 3 [
    (gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true},
    (validate.rules).repeated.min_items = 0
  ];

  // The type of the pocket
  PocketType type = 4;
}

/*
   SmartGoal: The Goals table stores information about each financial goal, including the name of the goal,
   its description, the target amount of money the user wants to save or invest, and the expected date of completion.
   
   The Goals table also includes columns for the start date of the goal, the current amount of money saved or
    invested towards the goal, and a boolean flag indicating whether the goal has been achieved.
    These additional columns allow the user to track their progress towards the goal and see how much
    more they need to save or invest to reach their target amount.
*/
message SmartGoal {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // the user id to which this goal is tied to
  uint64 user_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // The name of the goal
  // Validations:
  // - must be at least 3 characters long
  string name = 3 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Buy a car\""
    }
  ];

  // The description of the goal
  // Validations:
  // - must be at least 3 characters long
  string description = 4 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Buy a car\""
    }
  ];

  // wether the goal has been achieved or not
  bool is_completed = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: "true"}];

  // The type of the goal
  GoalType goal_type = 9;

  // The duration of the goal
  string duration = 10 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Active\""
    }
  ];

  // the start date of the goal
  string start_date = 11 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Active\""
    }
  ];

  // the end date of the goal
  string end_date = 12 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Active\""
    }
  ];

  // the target amount of the goal
  // amount of money the user wants to save or invest
  string target_amount = 13 [
    (validate.rules).string = {min_bytes: 1},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Active\""
    }
  ];

  // the current amount of the goal
  // current amount of money saved or invested towards the goal
  string current_amount = 14 [
    (validate.rules).string = {min_bytes: 0},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Active\""
    }
  ];

  // Milestones associated with the goal
  repeated Milestone milestones = 15 [
    (gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true},
    (validate.rules).repeated.min_items = 0
  ];

  // Forecasts associated with the goal
  Forecast forecasts = 16 [(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
  
  // Notes associated with the goal
  repeated SmartNote notes = 17 [
    (gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true},
    (validate.rules).repeated.min_items = 0
  ];
}

// Note schema
message SmartNote {
  option (gorm.opts) = {ormable: true};

  // Unique identifier for the note
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // The user id who created the note. This can be useful if in the future you allow multiple users to add notes to the same goal.
  uint64 user_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // The content of the note
  // Validations:
  // - must be at least 3 characters long
  string content = 4 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Note content here...\""
    }
  ];

  // Timestamp indicating when the note was created
  google.protobuf.Timestamp created_at = 5;

  // Timestamp indicating when the note was last updated
  google.protobuf.Timestamp updated_at = 6;
}

// The Forecast table stores information about each forecast generated for a particular goal,
// including the forecast date, the forecasted amount of money saved or invested for the
// goal by the target date, and the variance between the forecasted and target amounts.
// This allows the user to track how well they are progressing towards their goal and make adjustments as needed.
message Forecast {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // the forecasted amount of the goal
  string forecasted_amount = 2 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Active\""
    }
  ];

  // the forecasted completion date of the goal
  string forecasted_completion_date = 3 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Active\""
    }
  ];

  // the forecasted variance of the goal between the forecasted and target amounts
  string variance_amount = 4 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Active\""
    }
  ];
}

/*
   Milestone: represents a milestone in the context of simfinni. A financial milestone that is both smart
   and achievable. A milestone is a sub goal of a goal and is tied to a goal by the goal id
*/
message Milestone {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // The name of the milestone
  // Validations:
  // - must be at least 3 characters long
  string name = 2 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Buy a car\""
    }
  ];

  // The description of the miletone
  // Validations:
  // - must be at least 3 characters long
  string description = 3 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Buy a car\""
    }
  ];

  // the target date of the milestone
  // Validations:
  // - must be at least 3 characters long
  string target_date = 4 [
    (validate.rules).string.min_len = 10,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: "\"testtagdescription\""}
  ];

  // the target amount of the milestone
  string target_amount = 5 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 0,
      example: "\"Active\""
    }
  ];

  // wethe milestone is completed or not
  bool is_completed = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: "true"}];

  // the budget associated with the milestone
   Budget budget = 13 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
}

// The Budgets table stores information about each budget created by the user,
// including the name of the budget, the start and end dates, and the user ID.
message Budget {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];
  // The name of the budget
  string name = 2 [
    (validate.rules).string = {min_bytes: 10},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 10,
      example: "\"Buy a car\""
    }
  ];

  string description = 3;
  // the time the goal was created
  string start_date = 4;
  // the time the goal was updated
  string end_date = 5;
  // category associated with the goal
  Category category = 6 [(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
}

/*
   The Categories table stores information about the different categories of expenses or income,
   such as "Housing", "Food", "Transportation", and "Entertainment". Each category has one or more
   subcategories, which are stored in the Subcategories table.
   
   For example, the "Housing" category might have subcategories for "Rent", "Utilities", and "Home Maintenance".
*/
message Category {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // The name of the category
  string name = 2 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 3,
      example: "\"Housing\""
    }
  ];

  // The description of the category
  string description = 3 [
    (validate.rules).string = {min_bytes: 10},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 10,
      example: "\"Housing is a category primarily for housing\""
    }
  ];

  // the sub categories of the category
  repeated string subcategories = 4;
}

message InvesmentHolding {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  // The name of the investment holding
  string name = 2 [
    (validate.rules).string = {min_bytes: 3},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 3,
      example: "\"nfdkjfjksdhjhfjsdhjgf\""
    }
  ];

  // plaid account id
  string plaid_account_id = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"k67E4xKvMlhmleEa4pg9hlwGGNnnEeixPolGm\""
    }
  ];

  double cost_basis = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"15\""
    }
  ];

  double institution_price = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"13.73\""
    }
  ];

  string institution_price_as_of = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2021-04-13\""
    }
  ];

  string institution_price_datetime = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2022-06-07T23:01:00Z\""
    }
  ];

  double institution_value = 8  [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"4437.35905\""
    }
  ];

  string iso_currency_code = 9 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"USD\""
    }
  ];

  double quantity = 10  [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"25000\""
    }
  ];

  string security_id = 11 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"vLRMV3MvY1FYNP91on35CJD5QN5rw9Fpa9qOL\""
    }
  ];

  string unofficial_currency_code = 12 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"USD\""
    }
  ];
}

message InvestmentSecurity {
  option (gorm.opts) = {ormable: true};

  // id
  uint64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}];

  double close_price = 2  [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\" 0.140034616\""
    }
  ];
  string close_price_as_of = 3  [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2022-01-24\""
    }
  ];
  string cusip = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"dfkjhdgjdhhgd\""
    }
  ];
  string institution_id = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"ins_3\""
    }
  ];
  string institution_security_id = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"dfkjhdgjdhhgd\""
    }
  ];
  bool is_cash_equivalent = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"true\""
    }
  ];
  string isin = 8 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"dfkjhdgjdhhgd\""
    }
  ];
  string iso_currency_code = 9 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"USD\""
    }
  ];
  string name = 10[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"Dogecoin\""
    }
  ];
  string proxy_security_id = 11[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"dfkjhdgjdhhgd\""
    }
  ];
  string security_id = 12 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"vLRMV3MvY1FYNP91on35CJD5QN5rw9Fpa9qOL\""
    }
  ];
  string sedol = 13 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"dfkjhdgjdhhgd\""
    }
  ];
  string ticker_symbol = 14 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"DOGE\""
    }
  ];
  string type = 15 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"cryptocurrency\""
    }
  ];
  string unofficial_currency_code = 16 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"USD\""
    }
  ];
  string update_datetime = 17 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2022-06-07T23:01:00Z\""
    }
  ];
}

message Apr {
  option (gorm.opts) = {
    ormable : true,
  };
  uint64 id = 1;
  double percentage = 2;
  string type = 3;
  double balance_subject_to_apr = 4;
  double interest_charge_amount = 5;
}

// ===============================
message MergeLink {
    option (gorm.opts) = {ormable: true};

    // id
    uint64 id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];

    string integration = 2;
    string integration_slug = 3;
    string category = 4;
    string end_user_origin_id = 5;
    string end_user_organization_name = 6;
    string end_user_email_address = 7;
    string status = 8;
    string webhook_listener_url = 9;
    bool is_duplicate = 10;
    Token token = 11 [(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    string integration_name = 12;
    string integration_image = 13;
    string integration_square_image = 14;
    /**
        When you request a link token to initiate a Merge Link session, Merge determines whether to create a new linked account or modify
         an existing linked account based on a combination of the end_user_origin_id and the category. If you want to support multiple
          connections, you simply need to provide a different end_user_origin_id for each company.

        This approach enables you to link multiple instances of the same integration (like QuickBooks) for the same end user.
         It also has the added security benefit of not exposing any internal end_user_origin_ids.
    **/
    repeated LinkedAccountingAccount account = 15 [(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    string merge_linked_account_id = 16;
  }

message LinkedAccountingAccount {
    option (gorm.opts) = {ormable: true};

    // id
    uint64 id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];


    // Represent a company's attachments. a business can have many attachments
    repeated Attachments attachments = 2 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];

    // The CompanyInfo object is used to represent a company's information.
    repeated CompanyInfo company_info = 3 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];

    // a business can have many purchase orders
    repeated PurchaseOrder purchase_orders = 4 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // a business can have one report object
    ReportDetails report_details = 5 [(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    ReferenceDetails reference_details = 6 [(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    TransactionDetails transactions_details = 7 [(gorm.field).has_one = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
}

/**
    TransactionDetails: These are the actual financial transactions that occur within an accounting system.
    They include things like Invoices, Payments, Expenses, and Journal Entries.
**/
message TransactionDetails {
    option (gorm.opts) = {ormable: true};

    // id
    uint64 id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
    // a business can have many invoices
    repeated Invoice invoices = 3 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
   
    // a business can have many payments
    repeated Payment payments = 4 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    
    // a business can have many expenses
    repeated Expense expenses = 5 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // a business can have many journal entries
    repeated JournalEntry journal_entries = 6 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // a business can have many transactions
    repeated BusinessTransaction transactions = 7 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // a business can have many vendor credits
    repeated VendorCredit vendor_credits = 8 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
   
    // a business can have many credit notes
    repeated CreditNote credit_notes = 9 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];    
}

/**
    ReferenceDetails: These are the objects that provide additional context or information about the transactions.
    They include things like Accounts, Contacts, Items, and Tax Rates.
**/
message ReferenceDetails {
    option (gorm.opts) = {ormable: true};

    // id
    uint64 id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
    // The Account object is what companies use to track transactions. They can be both bank accounts or a general ledger account (also called a chart of accounts).
    repeated BusinessChartOfAccounts chart_of_accounts = 3 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // a business can have many items
    repeated Item items = 4 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // a business can have many tax rates
    repeated TaxRate tax_rates = 5 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // The Contact object refers to either a supplier or a customer.
    repeated Contacts contacts = 6 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
}

/**
    ReportDetails: These are the summaries or overviews of the financial data. They include things
    like Balance Sheets, Income Statements, and Cash Flow Statements.
**/
message ReportDetails {
    option (gorm.opts) = {ormable: true};

    // id
    uint64 id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
    
    // The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal to liability and equity combined. This shows the company’s financial health at a specific point in time.
    // a business can have many balance sheets
    repeated BalanceSheet balance_sheets = 17 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // The CashFlowStatement object shows operating activities, investing activities, and financing activities over a period of time (month, quarter, or year).
    // a company can have many cash flow statements
    repeated CashFlowStatements cash_flow_statements = 18 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // a business can have many income statements
    repeated IncomeStatement income_statements = 23 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
}



/**
    The Account object is what companies use to track transactions. 
    They can be both bank accounts or a general ledger account (also called a chart of accounts).

    Note: a company can have a multitude of these accounts
**/
message BusinessChartOfAccounts {
  option (gorm.opts) = {ormable: true};

  // the database record's id 
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
  ];

  // the account id as stored in merge-api. this is a required field
  string merge_account_id = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
    (google.api.field_behavior) = REQUIRED
  ];
  // The third-party matching id for the object. For example, this field will be the id 
  // as seen in quickbooks for a sample remote connection against quickbookks
  string remote_id = 3;
  // The account's name.
  string name = 4;
  // The account's description.
  string description = 5;
  // The account's broadest grouping. Possible values include: ASSET, EQUITY, EXPENSE, 
  // LIABILITY, REVENUE. In cases where there is no clear mapping, the original 
  // value passed through will be returned.
  string classification = 6;
  // The account's type is a narrower and more specific grouping within the account's classification.
  string type = 7;
  // The account's status. Possible values include: ACTIVE, PENDING, INACTIVE. In cases where there is
  //  no clear mapping, the original value passed through will be returned.
  string status = 8;
  // The account's current balance.
  double current_balance = 9;
  string currency = 10;
  // The account's number.
  string account_number = 11;
  // ID of the parent account.
  string parent_account_id = 12;
  // The company the account belongs to.
  string company = 13;
  // This is the datetime that this object was last updated by Merge
  google.protobuf.Timestamp modified_at = 14;
  // Indicates whether or not this object has been deleted by third party webhooks.
  bool remote_was_deleted = 15;
}

/**
    The Address object is used to represent a contact's or company's address.
**/
message Address {
    option (gorm.opts) = {ormable: true};

    // the database record's id 
    uint64 id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];

    string type = 2;
    // Line 1 of the address's street.
    string street_1 = 3;
    // Line 2 of the address's street.
    string street_2 = 4;
    // The address's city.
    string city = 5;
    // The address's state or region.
    string state = 6;
    // country's subdivision
    string country_subdivision = 7; // Typically, this might just be 'state' but used your field name to keep it consistent with the JSON
    // The address's country.
    string country = 8;
    // The address's zip code.
    string zip_code = 9;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 10; // Consider using google.protobuf.Timestamp if precise time manipulation is required
  }

/**
    The AccountingAttachment object is used to represent a company's attachments.
**/
message Attachments {
    option (gorm.opts) = {ormable: true};

    uint64 id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];

    // the object's id as stored in merge
    string merge_account_id = 2;
    // The third-party API ID of the matching object.
    string remote_id = 3;
    // The attachment's name.
    string file_name = 4;
    // The attachment's url.
    string file_url = 5;
    // The company the accounting attachment belongs to.
    string company = 6;
    // Indicates whether or not this object has been deleted by third party webhooks.
    bool remote_was_deleted = 7;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 8;
}

/**
    The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal
    to liability and equity combined.  This shows the company’s financial health at a specific point in time.
**/
message BalanceSheet {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;
    // The third-party API ID of the matching object.
    string remote_id = 2;
    // The balance sheet's name.
    string name = 3;
    string currency = 4;
    // Company object for the given BalanceSheet object. May not necessarily be the compnay name but the 
    // company reference
    string company = 5;
    // The balance sheet's date. The balance sheet data will
    //  reflect the company's financial position this point in time.
    google.protobuf.Timestamp date = 6;  // Consider using google.protobuf.Timestamp
    // The balance sheet's net assets.
    int64 net_assets = 7;
    // The balance sheet's total assets.
    repeated ReportItem assets = 8 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];;
    // The balance sheet's total liabilities.
    repeated ReportItem liabilities = 9 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];;
    // The balance sheet's total equity.
    repeated ReportItem equity = 10 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];;
    // The time that balance sheet was generated by the accounting system.
    google.protobuf.Timestamp remote_generated_at = 11;  // Consider using google.protobuf.Timestamp
    // Indicates whether or not this object has been deleted by third party webhooks.
    bool remote_was_deleted = 12;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 13;  // Consider using google.protobuf.Timestamp
    // the id as stored in merge
    string merge_account_id = 14;
}

/**
    The ReportItem object is used to represent a report item for a Balance Sheet, 
    Cash Flow Statement or Profit and Loss Report.
**/
message ReportItem {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;
    // the id as stored in the third-party system
    string remote_id = 2;
    // The report item's name.
    string name = 3;
    // The report item's value.
    int64 value = 4;
    // The company the report item belongs to. may not necessarily be the company name but a reference instead
    string company = 5;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 6;  // Consider using google.protobuf.Timestamp
}

/**
    The CashFlowStatement object shows operating activities, investing activities, and financing activities over a
     period of time (month, quarter, or year).
**/
message CashFlowStatements {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;
    // The third-party API ID of the matching object.
    string remote_id = 2;
    // The cash flow statement's name.
    string name = 3;
    // The cash flow statement's currency
    string currency = 4;
    // The company the cash flow statement belongs to.
    string company = 5;
    // The cash flow statement's start period.
     google.protobuf.Timestamp start_period = 6;  // Consider using google.protobuf.Timestamp
     // The cash flow statement's end period.
     google.protobuf.Timestamp end_period = 7;    // Consider using google.protobuf.Timestamp
     // Cash and cash equivalents at the beginning of the cash flow statement's period.
    double cash_at_beginning_of_period = 8;
    // Cash and cash equivalents at the beginning of the cash flow statement's period.
    double cash_at_end_of_period = 9;
    // Operating activities
    repeated ReportItem operating_activities = 10 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // Investing activities
    repeated ReportItem investing_activities = 11 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // Financing activities
    repeated ReportItem financing_activities = 12 [(gorm.field).has_many = {disable_association_autocreate: false disable_association_autoupdate: false preload: true}];
    // The time that cash flow statement was generated by the accounting system. 
    google.protobuf.Timestamp remote_generated_at = 13;  // Consider using google.protobuf.Timestamp
    // Indicates whether or not this object has been deleted by third party webhooks.
    bool remote_was_deleted = 14;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 15;          // Consider using google.protobuf.Timestamp
     // the cashflow statements id as stored in merge
    string merge_record_id = 16;
}

/**
    The CompanyInfo object is used to represent a company's information.
**/
message CompanyInfo {
    option (gorm.opts) = {ormable: true};
    // the id of the record in our system
    uint64 id = 1;
    // The third-party API ID of the matching object.
    string remote_id = 2;
    // The company's name.
    string name = 3;
    // The company's legal name.
    string legal_name = 4;
    // The company's tax number.
    string tax_number = 5;
    // The company's fiscal year end month.
    int32 fiscal_year_end_month = 6;
    // The company's fiscal year end day.
    int32 fiscal_year_end_day = 7;
    // The currency set in the company's accounting platform.
    string currency = 8;
    // When the third party's company was created.
    google.protobuf.Timestamp remote_created_at = 9;   // Consider using google.protobuf.Timestamp
    // The company's urls.
    repeated string urls = 10;
    // the company's addresses
    repeated Address addresses = 11;
    // the company's phone numbers
    repeated string phone_numbers = 12;
    // Indicates whether or not this object has been deleted by third party webhooks.
    bool remote_was_deleted = 13;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 14;   
    // the id of the record as stored in merge
    string merge_account_id = 15;
}

/**
    The AccountingAttachment object is used to represent a company's attachments.
**/
message AccountingAttachment {
    option (gorm.opts) = {ormable: true};

    uint64 id = 1;
    string remote_id = 2;
    string file_name = 3;
    string file_url = 4;
    string company = 5;
    bool remote_was_deleted = 6;
    string modified_at = 7;  // Consider using google.protobuf.Timestamp if precise time manipulation is required
    string merge_record_id = 8;
}




/**
    The Contact object refers to either a supplier or a customer.
**/
message Contacts {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;
    // The third-party API ID of the matching object.
    string remote_id = 2;
    // The contact's name.
    string name = 3;
    // Whether the contact is a supplier.
    bool is_supplier = 4;
    // Whether the contact is a customer.
    bool is_customer = 5;
    // The contact's email address.
    string email_address = 6;
    // The contact's tax number.
    string tax_number = 7;
    // The contact's status
    string status = 8;
    // The currency the contact's transactions are in.
    string currency = 9;
    // When the third party's contact was updated.
    google.protobuf.Timestamp remote_updated_at = 10;  // Consider using google.protobuf.Timestamp
    // The company the contact belongs to.
    string company = 11;
    // Address object IDs for the given Contacts object.
    repeated string addresses_ids = 12; // These are IDs, not the Address structure itself
    // Phone numbers of the contact
    repeated string phone_numbers = 13;
    // Indicates whether or not this object has been deleted by third party webhooks.
    bool remote_was_deleted = 14;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 15;        // Consider using google.protobuf.Timestamp
    // The account id as seen in merge
    string merge_account_id = 16;
}

/**
    The CreditNote object is an accounts payable transaction used when to represent a gift or refund to a customer. 
    A credit note will contain information on the amount of credit owed, the customer, and the account.
**/
message CreditNote {
    option (gorm.opts) = {ormable: true};
    // the database record id as stored in our systems
    uint64 id = 1;
    // The third-party API ID of the matching object.
    string remote_id = 2;
    // The credit note's transaction date.
    google.protobuf.Timestamp transaction_date = 3;  // Consider using google.protobuf.Timestamp
    // The credit note's status.
    string status = 4;
    // The credit note's number.
    string number = 5;
    // The credit note's contact.
    string contact = 6;
    // The company the credit note belongs to.
    string company = 7;
    // The credit note's exchange rate.
    string exchange_rate = 8;  // Consider using double or float if this represents a number
    // The credit note's total amount.
    double total_amount = 9;
    // The amount of value remaining in the credit note that the customer can use.
    double remaining_credit = 10;
    repeated CreditNoteLineItem line_items = 11;
    repeated string tracking_categories = 12;  // These are IDs
    string currency = 13;
    google.protobuf.Timestamp remote_created_at = 14;  // Consider using google.protobuf.Timestamp
    google.protobuf.Timestamp remote_updated_at = 15;  // Consider using google.protobuf.Timestamp
    // Array of Payment object IDs
    repeated string payment_ids = 16;  // These are IDs
    bool remote_was_deleted = 17;
    // The accounting period that the CreditNote was generated in.
    string accounting_period = 18;
    google.protobuf.Timestamp modified_at = 19;        // Consider using google.protobuf.Timestamp
    // the id as stored in merge
    string merge_account_id = 20;
}

message CreditNoteLineItem {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;
    string name = 2;
    string description = 3;
    string quantity = 4;
    string unit_price = 6;  // Consider using double or float if this represents a number
    string tax_rate = 7;   // This seems to be an ID
    string total_line_amount = 8;  // Consider using double or float
    string tracking_category = 9;  // This seems to be an ID
    repeated string tracking_categories = 10;  // These are IDs
    string account = 11;  // This seems to be an ID
    string company = 12;
    string remote_id = 13;
    string item = 14;
}

/*
    The Expense object is used to represent a purchase made from a business which can be made with a check, credit card, or cash.
     Each expense object is dedicated to a grouping of expenses, with each expense recorded in the lines object.
*/
message Expense {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;
    // The third-party API ID of the matching object.
    string remote_id = 2;
    // When the transaction occurred.
    google.protobuf.Timestamp transaction_date = 3;  // Consider using google.protobuf.Timestamp
    // When the expense was created.
    google.protobuf.Timestamp remote_created_at = 4;  // Consider using google.protobuf.Timestamp
    // The expense's payment account.
    string account = 5;
    // The expense's contact.
    string contact = 6;
    // The expense's total amount.
    double total_amount = 7;
    // The expense's total amount before tax.
    double sub_total = 8;
    // The expense's total tax amount.
    double total_tax_amount = 9;
    // The expense's currency
    string currency = 10;
    // The expense's exchange rate.
    string exchange_rate = 11;  // Consider using double or float if this represents a number
    // The company the expense belongs to.
    string company = 12;
    // The expense's private note.
    string memo = 13;
    // The ExpenseLine object is used to represent an expense's line items.
    repeated ExpenseLine lines = 14;
    repeated string tracking_categories = 15;  // These are IDs
    // Indicates whether or not this object has been deleted by third party webhooks.
    bool remote_was_deleted = 16;
    // The accounting period that the Expense was generated in.
    string accounting_period = 17;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 18;  // Consider using google.protobuf.Timestamp
    string merge_account_id = 19;
}

/**
    The ExpenseLine object is used to represent an expense's line items.
**/
message ExpenseLine {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;
    // The line's net amount.
    double net_amount = 2;
    string tracking_category = 3;  // This seems to be an ID
    repeated string tracking_categories = 4;  // These are IDs
    // The company the line belongs to.
    string company = 5;
    // The line's item.
    string item = 6;  // This seems to be an ID
    // The expense's payment account.
    string account = 7;
    // The expense's contact.
    string contact = 8;  // Optional based on provided JSON
    // The description of the item that was purchased by the company.
    string description = 9;
    // The expense line item's exchange rate.
    string exchange_rate = 10;  // Consider using double or float if this represents a number
    // The third-party API ID of the matching object.
    string remote_id = 11;
    // The expense line item's currency
    string currency = 12;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 13;  // Consider using google.protobuf.Timestamp
}

/**
    The IncomeStatement object is used to represent a company’s income, the cost of sales, operating expenses,
     and other non-operating expenses. The object also includes other important values like gross profit, gross 
     operating profit, and net income. This represents a period of time (month, quarter, or year).
**/
message IncomeStatement {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;
    // The third-party API ID of the matching object.
    string remote_id = 2;
    // The income statement's name.
    string name = 3;
    // The income statement's currency.
    string currency = 4;
    // The company the income statement belongs to.
    string company = 5;
    // The income statement's start period.
    google.protobuf.Timestamp start_period = 6;
    // The income statement's end period.
    google.protobuf.Timestamp end_period = 7;
    // income
    repeated ReportItem income = 8;
    // cost of sales
    repeated ReportItem cost_of_sales = 9;
    // The revenue minus the cost of sale.
    int32 gross_profit = 10;
    // operating expenses
    repeated ReportItem operating_expenses = 11;
    // The revenue minus the operating expenses.
    int32 net_operating_income = 12;
    repeated ReportItem non_operating_expenses = 13;
    // The gross profit minus the total expenses.
    int32 net_income = 14;
    // Indicates whether or not this object has been deleted by third party webhooks.
    bool remote_was_deleted = 15;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 16;
}

/**
    The Invoice object represents an itemized record of goods and/or services sold to a customer.
**/
message Invoice {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;
    // Whether the invoice is an accounts receivable or accounts payable
    //  If type is accounts_payable, the invoice is a bill. If type is
    //  accounts_receivable, it is an invoice. Possible values include: ACCOUNTS_RECEIVABLE, ACCOUNTS_PAYABLE.
    string type = 2;
    // The invoice's contact.
    string contact = 3;
    // The invoice's number.
    string number = 4;
    // The invoice's issue date.
    google.protobuf.Timestamp issue_date = 5;
    // The invoice's due date.
    google.protobuf.Timestamp due_date = 6;
    // The invoice's paid date.
    google.protobuf.Timestamp paid_on_date = 7;
    // The invoice's private note.
    string memo = 8;
    // The company the invoice belongs to.
    string company = 9;
    // The invoice's currency
    string currency = 10;
    // The invoice's exchange rate.
    string exchange_rate = 11;
    // The total discounts applied to the total cost.
    float total_discount = 12;
    // The total amount being paid before taxes.
    float sub_total = 13;
    string status = 14;
    // The total amount being paid in taxes.
    float total_tax_amount = 15;
    // The invoice's total amount.
    float total_amount = 16;
    // The invoice's remaining balance.
    float balance = 17;
    // When the third party's invoice entry was updated.
    google.protobuf.Timestamp remote_updated_at = 18;
    repeated string tracking_categories = 19;
    // Array of Payment object IDs.
    repeated string payments = 20;
    repeated InvoiceLineItem line_items = 21;
    bool remote_was_deleted = 22;
    // The accounting period that the Invoice was generated in.
    string accounting_period = 23;
    repeated string purchase_orders = 24;
    // The third-party API ID of the matching object.
    string remote_id = 25;
    google.protobuf.Timestamp modified_at = 26;
    // the account id as stored in merge
    string merge_account_id = 27;
}

/**
    The Invoice object represents an itemized record of goods and/or services sold to a customer.
**/
message InvoiceLineItem {
    option (gorm.opts) = {ormable: true};

    uint64 id = 1;
    // The third-party API ID of the matching object.
    string remote_id = 2;
    // The line item's description.
    string description = 3;
    // The line item's unit price.
    float unit_price = 4;
    // The line item's quantity.
    int32 quantity = 5;
    // The line item's total amount.
    float total_amount = 6;
    // The line item's currency
    string currency = 7;
    // The line item's exchange rate.
    string exchange_rate = 8;
    string item = 9;
    string account = 10;
    string tracking_category = 11;
    repeated string tracking_categories = 12;
    // The company the line item belongs to.
    string company = 13;
    // the id of the record as stored in merge
    string merge_account_id = 14;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 15;  // Consider using google.protobuf.Timestamp
}

/**
    The Item object refers to the goods involved in a transaction.
**/
message Item {
    option (gorm.opts) = {ormable: true};

    uint64 id = 1;
    // The third-party API ID of the matching object.
    string remote_id = 2;
    // The item's name.
    string name = 3;
    string status = 4;
    // The item's unit price.
    float unit_price = 5;
    // The price at which the item is purchased from a vendor.
    float purchase_price = 6;
    // References the default account used to record a purchase of the item.
    string purchase_account = 7;
    // References the default account used to record a sale.
    string sales_account = 8;
    // The company the item belongs to.
    string company = 9;
    // When the third party's item note was updated.
    google.protobuf.Timestamp remote_updated_at = 10;
    // Indicates whether or not this object has been deleted by third party webhooks.
    bool remote_was_deleted = 11;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp  modified_at = 12;
    string merge_account_id = 13;
}

/**
    The JournalEntry object is used to get a record of all manually created entries made in a company’s general ledger.
     The journal line items for each journal entry should sum to zero.
**/
message JournalEntry {
    option (gorm.opts) = {ormable: true};

    uint64 id = 1;
    string remote_id = 2;
    // The journal entry's transaction date.
    google.protobuf.Timestamp transaction_date = 3;
    // When the third party's journal entry was created.
    google.protobuf.Timestamp remote_created_at = 4;
    google.protobuf.Timestamp remote_updated_at = 5;
    repeated string payment_ids = 6;
    // The journal entry's private note.
    string memo = 7;
    string currency = 8;
    string exchange_rate = 9; // Assuming string due to the example provided, but could be float or double.
    string company = 10;
    repeated JournalLine lines = 11;
    // Reference number for identifying journal entries.
    string journal_number = 12;
    repeated string tracking_categories = 13;
    bool remote_was_deleted = 14;
    string posting_status = 15;
    // The accounting period that the JournalEntry was generated in.
    string accounting_period = 16;
    google.protobuf.Timestamp modified_at = 17;
    // the id of the record as stored in merge
    string merge_account_id = 18;
}

/**
    The JournalLine object is used to represent a journal entry's line items.
**/
message JournalLine {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;

    string remote_id = 2;
    string account = 4;
    float net_amount = 5; // Might want to use double or a more precise type
    string tracking_category = 6;
    repeated string tracking_categories = 7;
    string contact = 8;
    string company = 9;
    string description = 10;
    string exchange_rate = 11; // Assuming string due to the example provided, but could be float or double.
    google.protobuf.Timestamp modified_at = 17;
}

/**
    The Payment object represents general payments made towards a specific transaction.
**/
message Payment {
    option (gorm.opts) = {ormable: true};

    uint64 id = 1;
    string remote_id = 2;
    google.protobuf.Timestamp transaction_date = 3;
    string contact = 4;
    // The supplier’s or customer’s account in which the payment is made.
    string account = 5;
    string currency = 6;
    string exchange_rate = 7; // Assuming string due to the example provided, but could be float or double.
    string company = 8;
    // The total amount of money being paid to the supplier, or customer, after taxes.
    float total_amount = 9; // Might want to use double or a more precise type
    repeated string tracking_categories = 10;
    google.protobuf.Timestamp remote_updated_at = 11;
    bool remote_was_deleted = 12;
    // The accounting period that the Payment was generated in.
    string accounting_period = 13;
    // This is the datetime that this object was last updated by Merge
    google.protobuf.Timestamp modified_at = 14;
    // the id as stored in merge
    string merge_account_id = 15;
}

/**
    The PurchaseOrder object is a record of request for a product or service between a buyer and seller.
**/
message PurchaseOrder {
    option (gorm.opts) = {ormable: true};

    uint64 id = 1;
    string merge_account_id = 2;

    string status = 3;
    // The purchase order's issue date.
    google.protobuf.Timestamp issue_date = 4;
    // The human-readable number of the purchase order.
    string purchase_order_number = 5;
    // The purchase order's delivery date.
    google.protobuf.Timestamp delivery_date = 6;
    // The purchase order's delivery address.
    Address delivery_address = 7;
    // The contact making the purchase order.
    string customer = 8;
    // The party fulfilling the purchase order.
    string vendor = 9;
    // A memo attached to the purchase order.
    string memo = 10;
    // The company the purchase order belongs to.
    string company = 11;
    // The purchase order's total amount.
    float total_amount = 12; // Might be better as double.
    // The purchase order's currency.
    string currency = 13;
    string exchange_rate = 14; // Assuming string, but might be better as float or double.
    repeated PurchaseOrderLineItem line_items = 15;
    repeated string tracking_categories = 16;
    google.protobuf.Timestamp remote_created_at = 17;
    google.protobuf.Timestamp remote_updated_at = 18;
    bool remote_was_deleted = 19;
     // The accounting period that the PurchaseOrder was generated in.
    string accounting_period = 20;
    string remote_id = 21;
    google.protobuf.Timestamp modified_at = 22;
}

/**
    The PurchaseOrderLineItem object is used to represent a purchase order's line item.
**/
message PurchaseOrderLineItem {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;

    string remote_id = 2;
    string description = 3;
    int32 quantity = 4;
    string unit_price = 5; // Assuming string, but might be better as float or double.
    string item = 6;
    string account = 7;
    string tracking_category = 8;
    repeated string tracking_categories = 9;
    string tax_amount = 10;
    string total_line_amount = 11;
    string currency = 12;
    string exchange_rate = 13; // Assuming string, but might be better as float or double.
    string company = 14;
    google.protobuf.Timestamp modified_at = 15;
}

/**
    The TaxRate object is used to represent a tax rate.
**/
message TaxRate {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;

    string remote_id = 2;
    string description = 3;
    double total_tax_rate = 4;
    double effective_tax_rate = 5;
    string company = 6;
    bool remote_was_deleted = 7;
    google.protobuf.Timestamp modified_at = 8;
    string merge_account_id = 9;
}

/**
    The TrackingCategory object is used to represent a company's tracking categories.
**/
message TrackingCategory {
    option (gorm.opts) = {ormable: true};

    uint64 id = 1;

    string remote_id = 2;
    string merge_account_id = 3;
    CategoryType category_type = 4;
    string parent_category = 5;
    string company = 6;
    bool remote_was_deleted = 7;
    google.protobuf.Timestamp modified_at = 8;
}

/**
    The Transaction includes different types of transactions. The Transactions object does not cover expenses, credit notes,
     vendor credit, invoices, purchase orders, and journal entries. See the “transaction_type” field for more information.
**/
message BusinessTransaction {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;

    string transaction_type = 2;
    string number = 3;
    google.protobuf.Timestamp transaction_date = 4;
    string account = 5;
    string contact = 6;
    string total_amount = 7; // Might be better as double.
    string currency = 8;
    string exchange_rate = 9; // Assuming string, but might be better as float or double.
    string company = 10;
    repeated string tracking_categories = 11;
    repeated TransactionLineItem line_items = 12;
    bool remote_was_deleted = 13;
    string accounting_period = 14;
    string merge_account_id = 15;
    string remote_id = 16;
    google.protobuf.Timestamp modified_at = 17;
}

message TransactionLineItem {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1;

    string remote_id = 2;
    string memo = 3;
    string unit_price = 4;
    string quantity = 5;
    string item = 6;
    string account = 7;
    string tracking_category = 8;
    repeated string tracking_categories = 9;
    string total_line_amount = 10;
    string tax_rate = 11;
    string currency = 12;
    string exchange_rate = 13; // Assuming string, but might be better as float or double.
    string company = 14;
    google.protobuf.Timestamp modified_at = 15;
}

/**
    The VendorCredit object is an accounts receivable transaction used to show that a customer is owed a gift or refund.
    A vendor credit will contain information on the amount of credit owed to the customer, the vendor that owes the credit,
    and the account.
**/
message VendorCredit {
    option (gorm.opts) = {ormable: true};

    string merge_account_id = 1;
    string remote_id = 2;
    string number = 3;
    google.protobuf.Timestamp transaction_date = 4;
    string vendor = 5;
    double total_amount = 6;  // Using double for more precision.
    string currency = 7;
    string exchange_rate = 8;  // Assuming string, but might be better as float or double.
    string company = 9;
    repeated VendorCreditLine lines = 10;
    repeated string tracking_categories = 11;
    bool remote_was_deleted = 12;
    string accounting_period = 13;
    google.protobuf.Timestamp modified_at = 14;
    uint64 id = 15;
}

/**
    The VendorCreditLine object is used to represent a vendor credit's line items.
**/
message VendorCreditLine {
    option (gorm.opts) = {ormable: true};
    
    string remote_id = 1;
    double net_amount = 2;  // Using double for more precision.
    string tracking_category = 3;
    repeated string tracking_categories = 4;
    string description = 5;
    string account = 6;
    string company = 7;
    string exchange_rate = 8;  // Assuming string, but might be better as float or double.
    google.protobuf.Timestamp modified_at = 9;    // Could use a specific Timestamp type for this if you need.
    uint64 id = 10;
}

message PlaidAccountInvestmentTransaction {
  option (gorm.opts) = {ormable: true};
    // @gotag: ch:"account_id"
    string account_id = 1;
    // @gotag: ch:"amount"
    string ammount = 2;
    // @gotag: ch:"investment_transaction_id"
    string investment_transaction_id = 3;
    // @gotag: ch:"security_id"
    string security_id = 4;
    // @gotag: ch:"date"
    string current_date = 5;
    // @gotag: ch:"name"
    string name = 6;
    // @gotag: ch:"quantity"
    double quantity = 7;
    // @gotag: ch:"amount"
    double amount = 8;
    // @gotag: ch:"price"
    double price = 9;
    // @gotag: ch:"fees"
    double fees = 10;
    // @gotag: ch:"type"
    string type = 11;
    // @gotag: ch:"subtype"
    string subtype = 12;
    // @gotag: ch:"iso_currency_code"
    string iso_currency_code = 13;
    // @gotag: ch:"unofficial_currency_code"
    string unofficial_currency_code = 14;
     // @gotag: ch:"link_id"
    uint64 link_id = 15 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];
    // @gotag: ch:"id"
    uint64 id = 16 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
        // @gotag: ch:"user_id"
    uint64 user_id = 17 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];

    string created_at = 18;
    google.protobuf.Timestamp time = 20;
    google.protobuf.Any additional_properties = 21;
}

message PlaidAccountRecurringTransaction {
    option (gorm.opts) = {ormable: true};
    // @gotag: ch:"account_id"
    string account_id = 1;
    // @gotag: ch:"stream_id"
    string stream_id = 2;
    // @gotag: ch:"category_id"
    string category_id = 4;
    // @gotag: ch:"description"
    string description = 5;
    // @gotag: ch:"merchant_name"
    string merchant_name = 6;
    // @gotag: ch:"personal_finance_category_primary"
    string personal_finance_category_primary = 7;
    // @gotag: ch:"personal_finance_category_detailed"
    string personal_finance_category_detailed = 8;
    // @gotag: ch:"first_date"
    string first_date = 9;
    // @gotag: ch:"last_date"
    string last_date = 10;
    // @gotag: ch:"frequency"
    string frequency = 11;
    // @gotag: ch:"transaction_ids,array"
    string transaction_ids = 12;
    // @gotag: ch:"average_amount"
    string average_amount = 13;
    // @gotag: ch:"average_amount_iso_currency_code"
    string average_amount_iso_currency_code = 14;
    // @gotag: ch:"last_amount"
    string last_amount = 15;
    // @gotag: ch:"last_amount_iso_currency_code"
    string last_amount_iso_currency_code = 16;
    // @gotag: ch:"is_active"
    bool is_active = 17;
    // @gotag: ch:"status"
    string status = 18;
    // @gotag: ch:"updated_time"
    string updated_time = 19;
    // @gotag: ch:"user_id"
    uint64 user_id = 20 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];
    // @gotag: ch:"link_id"
    uint64 link_id = 21 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];
    // @gotag: ch:"id"
    uint64 id = 22 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
    // @gotag: ch:"flow"
    string flow = 23;
    google.protobuf.Timestamp time = 25;
    google.protobuf.Any additional_properties = 26;
}

message PlaidAccountTransaction {
    option (gorm.opts) = {ormable: true};

    // Basic transaction details
    string account_id = 1; // @gotag: ch:"account_id"
    double amount = 2;     // @gotag: ch:"amount"
    string iso_currency_code = 3;     // @gotag: ch:"iso_currency_code"
    string unofficial_currency_code = 4; // @gotag: ch:"unofficial_currency_code"
    string transaction_id = 20;      // @gotag: ch:"transaction_id"
    string transaction_code = 21;    // @gotag: ch:"transaction_code"
    
    // Date details
    string current_date = 8;         // @gotag: ch:"date"
    string current_datetime = 9;     // @gotag: ch:"datetime"
    string authorized_date = 10;     // @gotag: ch:"authorized_date"
    string authorized_datetime = 11; // @gotag: ch:"authorized_datetime"
    
    // Transaction categories
    string category_id = 6;          // @gotag: ch:"category_id"
    repeated string categories = 46; 
    string personal_finance_category_primary = 26;   // @gotag: ch:"personal_finance_category_primary"
    string personal_finance_category_detailed = 27;  // @gotag: ch:"personal_finance_category_detailed"
    
    // Merchant details
    string name = 13;        // @gotag: ch:"name"
    string merchant_name = 14;   // @gotag: ch:"merchant_name"
    
    // Payment details
    string check_number = 7;     // @gotag: ch:"check_number"
    string payment_channel = 16; // @gotag: ch:"payment_channel"
    bool pending = 17;           // @gotag: ch:"pending"
    string pending_transaction_id = 18;   // @gotag: ch:"pending_transaction_id"
    string account_owner = 19;       // @gotag: ch:"account_owner"
    string payment_meta_by_order_of = 36;
    string payment_meta_payee = 37;
    string payment_meta_payer = 38;
    string payment_meta_payment_method = 39;
    string payment_meta_payment_processor = 40;
    string payment_meta_ppd_id = 41;
    string payment_meta_reason = 42;
    string payment_meta_reference_number = 43;
    
    // Location details
    string location_address = 28;
    string location_city = 29;
    string location_region = 30;
    string location_postal_code = 31;
    string location_country = 32;
    double location_lat = 33;
    double location_lon = 34;
    string location_store_number = 35;
    
    // Additional properties
    google.protobuf.Timestamp time = 44;
    google.protobuf.Any additional_properties = 45;
    
    // System generated fields
    uint64 id = 22 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
    uint64 user_id = 23 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];
    uint64 link_id = 24 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];
}